require = function() {
  function r(e, n, t) {
    function o(i, f) {
      if (!n[i]) {
        if (!e[i]) {
          var c = "function" == typeof require && require;
          if (!f && c) return c(i, !0);
          if (u) return u(i, !0);
          var a = new Error("Cannot find module '" + i + "'");
          throw a.code = "MODULE_NOT_FOUND", a;
        }
        var p = n[i] = {
          exports: {}
        };
        e[i][0].call(p.exports, function(r) {
          var n = e[i][1][r];
          return o(n || r);
        }, p, p.exports, r, e, n, t);
      }
      return n[i].exports;
    }
    for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
    return o;
  }
  return r;
}()({
  AppInfoMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "850a533+K9Lu6YGxwJIUJbN", "AppInfoMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AppInfoMgr = function() {
      function AppInfoMgr() {
        this.appid = "com.bamingmajiangshijie.wmwb";
        this.appname = "八闽麻将世界";
      }
      AppInfoMgr.getInstance = function() {
        this._instance || (this._instance = new AppInfoMgr());
        return this._instance;
      };
      AppInfoMgr.prototype.getAppActivityPath = function() {
        var path = this.appid.replace(/\./g, "/");
        return path;
      };
      AppInfoMgr.prototype.getAppId = function() {
        return this.appid;
      };
      AppInfoMgr.prototype.getAppName = function() {
        return this.appname;
      };
      return AppInfoMgr;
    }();
    exports.default = AppInfoMgr;
    cc._RF.pop();
  }, {} ],
  AudioCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cece86SgDpK/6d5PGXW3bBC", "AudioCfg");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCfg_1 = require("../Libs/BaseCfg");
    var SettingMgr_1 = require("../GameMgrs/SettingMgr");
    var AudioCfg = function(_super) {
      __extends(AudioCfg, _super);
      function AudioCfg() {
        var _this = _super.call(this) || this;
        _this.audioData = null;
        _this.audioPath = null;
        _this.gamecode = null;
        _this.backgroudMusicID = null;
        _this.curCfg = null;
        _this.audioDic = null;
        _this.path = null;
        _this.audioPath = _this.getFullPath("audio");
        return _this;
      }
      AudioCfg.getInstance = function() {
        this._instance || (this._instance = new AudioCfg());
        return this._instance;
      };
      AudioCfg.prototype.loadCb = function(name, data) {
        this.loaded = true;
        this.audioData = data.audio;
        this.updateCfg();
      };
      AudioCfg.prototype.getData = function() {
        return this.audioData;
      };
      AudioCfg.prototype.load = function() {
        this.loadRes(this.audioPath, this.loadCb);
      };
      AudioCfg.prototype.updateCfg = function() {
        this.audioDic = {};
        for (var i = 0; i < this.audioData.length; ++i) this.audioDic[this.audioData[i]["name"]] = this.audioData[i];
      };
      AudioCfg.prototype.play = function(name) {
        var item = null;
        for (var key in this.audioDic) if (this.audioDic.hasOwnProperty(key)) {
          var desArray = this.audioDic[key].des.split("&");
          for (var index = 0; index < desArray.length; index++) {
            var functions = desArray[index];
            name.indexOf(functions) >= 0 && (item = this.audioDic[key]);
          }
        }
        if (null == item) return;
        var playLoop = false;
        if (!item) {
          console.log("音效配置不存在");
          return;
        }
        switch (item.type) {
         case 0:
          playLoop = false;
          break;

         case 1:
          playLoop = true;
        }
        var url = cc.url.raw("/resources/audio/plat/" + item.file + ".mp3");
        console.log("音效配置路径", url);
        cc.loader.load(url, function(err, data) {
          if (err) return;
          var volume = 0;
          if (playLoop) {
            volume = SettingMgr_1.default.getInstance().getMusicInfo().musicVolume / 100;
            SettingMgr_1.default.getInstance().getMusicInfo().bMusicSwitch || (volume = 0);
            cc.audioEngine.stopAll();
            this.backgroudMusicID = cc.audioEngine.play(url, playLoop, volume);
            console.log("背景配置路径", url);
          } else {
            volume = SettingMgr_1.default.getInstance().getMusicInfo().effectVolume / 100;
            SettingMgr_1.default.getInstance().getMusicInfo().bEffectSwitch || (volume = 0);
            cc.audioEngine.play(url, playLoop, volume);
            console.log("音效配置路径", url);
          }
        }.bind(this));
      };
      AudioCfg.prototype.stopbackgroudMusic = function() {
        this.backgroudMusicID ? cc.audioEngine.stop(this.backgroudMusicID) : this.backgroudMusicID = null;
      };
      AudioCfg.prototype.pausebackgroudMusic = function() {
        this.backgroudMusicID ? cc.audioEngine.pause(this.backgroudMusicID) : this.backgroudMusicID = null;
      };
      AudioCfg.prototype.resumebackgroudMusic = function() {
        var volume = SettingMgr_1.default.getInstance().getMusicInfo().musicVolume / 100;
        SettingMgr_1.default.getInstance().getMusicInfo().bMusicSwitch || (volume = 0);
        if (this.backgroudMusicID) {
          cc.audioEngine.setVolume(this.backgroudMusicID, volume);
          cc.audioEngine.resume(this.backgroudMusicID);
        } else this.backgroudMusicID = null;
      };
      return AudioCfg;
    }(BaseCfg_1.default);
    exports.default = AudioCfg;
    cc._RF.pop();
  }, {
    "../GameMgrs/SettingMgr": "SettingMgr",
    "../Libs/BaseCfg": "BaseCfg"
  } ],
  AudioMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d289aAxaU5CGrpTBcxQ844K", "AudioMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var AudioCfg_1 = require("../CfgMgrs/AudioCfg");
    var AudioMgr = function(_super) {
      __extends(AudioMgr, _super);
      function AudioMgr() {
        var _this = _super.call(this) || this;
        _this.effectVolume = null;
        _this.musicVolume = null;
        _this.voiceVolume = null;
        _this.effectVolume = 1;
        _this.musicVolume = 1;
        _this.voiceVolume = 1;
        return _this;
      }
      AudioMgr.prototype.setMusicVolume = function(volume) {
        this.musicVolume = volume;
      };
      AudioMgr.prototype.getMusicVolume = function() {
        return this.musicVolume;
      };
      AudioMgr.prototype.setEffectVolume = function(volume) {
        this.effectVolume = volume;
      };
      AudioMgr.prototype.getEffectVolume = function() {
        return this.effectVolume;
      };
      AudioMgr.prototype.setVoiceVolume = function(volume) {
        this.voiceVolume = volume;
      };
      AudioMgr.prototype.getVoiceVolume = function() {
        return this.voiceVolume;
      };
      AudioMgr.prototype.play = function(name) {
        AudioCfg_1.default.getInstance().play(name);
      };
      AudioMgr.prototype.stopbackgroudMusic = function() {
        AudioCfg_1.default.getInstance().stopbackgroudMusic();
      };
      AudioMgr.prototype.pausebackgroudMusic = function() {
        AudioCfg_1.default.getInstance().pausebackgroudMusic();
      };
      AudioMgr.prototype.resumebackgroudMusic = function() {
        AudioCfg_1.default.getInstance().resumebackgroudMusic();
      };
      AudioMgr.getInstance = function() {
        this._instance || (this._instance = new AudioMgr());
        return this._instance;
      };
      return AudioMgr;
    }(BaseMgr_1.default);
    exports.default = AudioMgr;
    cc._RF.pop();
  }, {
    "../CfgMgrs/AudioCfg": "AudioCfg",
    "../Libs/BaseMgr": "BaseMgr"
  } ],
  BagMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d3d5eR55q9IVLKvE1TMNr0C", "BagMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var BagMgr = function(_super) {
      __extends(BagMgr, _super);
      function BagMgr() {
        var _this = _super.call(this) || this;
        _this.routes = null;
        _this.itemID = null;
        _this.itemType = null;
        _this.routes = {};
        return _this;
      }
      BagMgr.prototype.setItemPrice = function(index) {
        this.itemID = index;
      };
      BagMgr.prototype.setItemType = function(type) {
        this.itemType = type;
      };
      BagMgr.prototype.getItemPrice = function() {
        return this.itemID;
      };
      BagMgr.prototype.getItemType = function() {
        return this.itemType;
      };
      BagMgr.getInstance = function() {
        this._instance || (this._instance = new BagMgr());
        return this._instance;
      };
      return BagMgr;
    }(BaseMgr_1.default);
    exports.default = BagMgr;
    cc._RF.pop();
  }, {
    "../Libs/BaseMgr": "BaseMgr"
  } ],
  BaseCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "37219K0vZhFpZYFUoP4Zqc/", "BaseCfg");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCfg = function() {
      function BaseCfg() {
        this.rootPath = "Configs/Plat/";
        this.loaded = false;
      }
      BaseCfg.prototype.getFullPath = function(cfgName) {
        return "" + this.rootPath + cfgName;
      };
      BaseCfg.prototype.loadRes = function(name, cb) {
        cc.loader.loadRes(name, function(err, data) {
          err ? console.log("cc.loader.loadRes err=," + JSON.stringify(err) + "," + name) : cb.bind(this)(name, data);
        }.bind(this));
      };
      BaseCfg.prototype.isLoaded = function() {
        return this.loaded;
      };
      return BaseCfg;
    }();
    exports.default = BaseCfg;
    cc._RF.pop();
  }, {} ],
  BaseCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "084b8hsWyZJZpGyA0ag/0En", "BaseCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var UiMgr_1 = require("../GameMgrs/UiMgr");
    var ModuleMgr_1 = require("../GameMgrs/ModuleMgr");
    var scheduler = null;
    var BaseCtrl = function(_super) {
      __extends(BaseCtrl, _super);
      function BaseCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.ui = null;
        _this.n_events = {};
        _this.g_events = {};
        _this.model = null;
        _this.view = null;
        return _this;
      }
      BaseCtrl.prototype.gemit = function(event, data) {
        G_FRAME.globalEmitter.emit(event, data);
      };
      BaseCtrl.prototype.defineNetEvents = function() {};
      BaseCtrl.prototype.defineGlobalEvents = function() {};
      BaseCtrl.prototype.regAllEvents = function() {
        for (var event_id in this.n_events) {
          var cb = this.n_events[event_id];
          G_FRAME.netEmitter.on(event_id, cb.bind(this), this);
        }
        for (var event_id in this.g_events) {
          var cb = this.g_events[event_id];
          G_FRAME.globalEmitter.on(event_id, cb.bind(this), this);
        }
      };
      BaseCtrl.prototype.onDestroy = function() {
        G_FRAME.netEmitter.remove_by_listener(this);
        G_FRAME.globalEmitter.remove_by_listener(this);
        delete this.model;
        delete this.view;
      };
      BaseCtrl.prototype.finish = function() {
        this.node.destroy();
      };
      BaseCtrl.prototype.start_sub_module = function(module_id, cb, scriptName) {
        void 0 === cb && (cb = function() {});
        void 0 === scriptName && (scriptName = null);
        ModuleMgr_1.default.getInstance().start_sub_module(module_id, cb, scriptName);
      };
      BaseCtrl.prototype.start_module = function(module_id) {
        ModuleMgr_1.default.getInstance().start_module(module_id);
      };
      BaseCtrl.prototype.turnback_module = function() {
        ModuleMgr_1.default.getInstance().turnback_module();
      };
      BaseCtrl.prototype.connect = function(uitype, node, callback, opname) {
        var callbackTemp = {};
        if ("function" == typeof callback) UiMgr_1.default.getInstance().connect(uitype, node, callback.bind(this), opname); else if ("object" == typeof callback) {
          callback.startCallBack && (callbackTemp["startCallBack"] = callback.startCallBack.bind(this));
          callback.moveCallBack && (callbackTemp["moveCallBack"] = callback.moveCallBack.bind(this));
          callback.endCallBack && (callbackTemp["endCallBack"] = callback.endCallBack.bind(this));
          callback.cancelCallBack && (callbackTemp["cancelCallBack"] = callback.cancelCallBack.bind(this));
          UiMgr_1.default.getInstance().connect(uitype, node, callbackTemp, opname);
        }
      };
      BaseCtrl.prototype.connectUi = function() {};
      BaseCtrl.prototype.initMvc = function(Model, View) {
        this.model = new Model();
        this.view = new View(this.model);
        this.ui = this.view.ui;
        this.defineNetEvents();
        this.defineGlobalEvents();
        this.regAllEvents();
        this.connectUi();
      };
      BaseCtrl.prototype.isIPhoneX = function() {
        var size = cc.view.getFrameSize();
        if (cc.sys.isNative && cc.sys.platform == cc.sys.IPHONE && (2436 == size.width && 1125 == size.height || 1125 == size.width && 2436 == size.height)) return true;
        return false;
      };
      BaseCtrl.prototype.resetDesignResolution = function(canvas) {
        var height = 720;
        var size = cc.view.getFrameSize();
        var proportion = size.width / size.height;
        var width = height * proportion;
        canvas.designResolution = new cc.Size(width, height);
        canvas.fitHeight = true;
        canvas.fitWidth = true;
      };
      BaseCtrl._obj_id = 1;
      return BaseCtrl;
    }(cc.Component);
    exports.default = BaseCtrl;
    cc._RF.pop();
  }, {
    "../GameMgrs/ModuleMgr": "ModuleMgr",
    "../GameMgrs/UiMgr": "UiMgr"
  } ],
  BaseMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "67fe65+z4pDY4lFlb5FMki0", "BaseMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameNet_1 = require("../NetCenter/GameNet");
    var NetNotify_1 = require("../NetCenter/NetNotify");
    var ModuleMgr_1 = require("../GameMgrs/ModuleMgr");
    var BaseMgr = function() {
      function BaseMgr() {
        this.routes = null;
        NetNotify_1.default.getInstance().regNotifyListener(this);
        this.routes = {};
      }
      BaseMgr.prototype.destroy = function() {
        NetNotify_1.default.getInstance().unregNotifyListener(this);
      };
      BaseMgr.prototype.gemit = function(event, arg) {
        void 0 === arg && (arg = null);
        G_FRAME.globalEmitter.emit(event, arg);
      };
      BaseMgr.prototype.send_msg = function(route, msg) {
        GameNet_1.default.getInstance().send_msg(route, msg);
      };
      BaseMgr.prototype.start_sub_module = function(module_id, cb, scriptName) {
        void 0 === cb && (cb = function() {});
        void 0 === scriptName && (scriptName = null);
        ModuleMgr_1.default.getInstance().start_sub_module(module_id, cb, scriptName);
      };
      BaseMgr.prototype.start_module = function(module_id) {
        ModuleMgr_1.default.getInstance().start_module(module_id);
      };
      BaseMgr.prototype.start_websocket = function(url) {
        return GameNet_1.default.getInstance().initWebSocket(url);
      };
      BaseMgr.prototype.close_websocket = function(url) {
        GameNet_1.default.getInstance().closeWebSocket(url);
      };
      BaseMgr.prototype.dealResp = function(route, msg) {
        if (!this.routes) return;
        var routerfun = this.routes[route];
        routerfun && routerfun.bind(this)(msg);
      };
      return BaseMgr;
    }();
    exports.default = BaseMgr;
    cc._RF.pop();
  }, {
    "../GameMgrs/ModuleMgr": "ModuleMgr",
    "../NetCenter/GameNet": "GameNet",
    "../NetCenter/NetNotify": "NetNotify"
  } ],
  BaseModel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b1836nInTpFt4NyrIrZcr/1", "BaseModel");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel = function() {
      function BaseModel() {}
      return BaseModel;
    }();
    exports.default = BaseModel;
    cc._RF.pop();
  }, {} ],
  BaseView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8e6f9Qfv7JMs46rjqRSsxQV", "BaseView");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseView = function() {
      function BaseView(model) {
        this.model = null;
        this.ui = {};
        this.node = null;
        this._grayLayer = null;
        this._smallGrayLayer = null;
        this.model = model;
      }
      BaseView.prototype.initUi = function() {};
      BaseView.prototype.addPrefabNode = function(prefab) {
        var prefabNode = cc.instantiate(prefab);
        this.node.addChild(prefabNode);
      };
      BaseView.prototype.addGrayLayer = function(black) {
        var _this = this;
        void 0 === black && (black = true);
        cc.loader.loadRes("Icons/singleColor", cc.SpriteFrame, function(err, spriteFrame) {
          if (err) cc.error(err); else {
            var _grayLayer = new cc.Node();
            _grayLayer.addComponent(cc.Sprite).spriteFrame = spriteFrame;
            _grayLayer.parent = _this.node;
            var _size = cc.director.getVisibleSize();
            _grayLayer.width = _size.width;
            _grayLayer.height = _size.height;
            _grayLayer.color = new cc.Color(0, 4, 17);
            _grayLayer.opacity = 229;
            _grayLayer.zIndex = -1;
            _grayLayer.on(cc.Node.EventType.TOUCH_START, function() {
              console.log("touch limit");
            }, _this);
          }
        });
      };
      BaseView.prototype.addSmallGrayLayer = function(node, removeNode, array) {
        var _this = this;
        cc.loader.loadRes("Icons/singleColor", cc.SpriteFrame, function(err, spriteFrame) {
          if (err) cc.error(err); else {
            _this.removeSmallGrayLayer();
            _this._smallGrayLayer = new cc.Node();
            _this._smallGrayLayer.addComponent(cc.Sprite).spriteFrame = spriteFrame;
            _this._smallGrayLayer.parent = node;
            var _size = cc.director.getVisibleSize();
            _this._smallGrayLayer.width = _size.width;
            _this._smallGrayLayer.height = _size.height;
            _this._smallGrayLayer.color = cc.Color.BLACK;
            _this._smallGrayLayer.opacity = 0;
            _this._smallGrayLayer.on(cc.Node.EventType.TOUCH_START, function() {
              console.log("touch smalllimit");
              _this.removeSmallGrayLayer();
              removeNode.removeFromParent();
              array.shift();
            }, _this);
          }
        });
      };
      BaseView.prototype.removeSmallGrayLayer = function() {
        this._smallGrayLayer && this._smallGrayLayer.destroy();
      };
      BaseView.prototype.CutOutChat = function(name, number) {
        if (null == name.length) return name;
        if (name.length > number) return name.slice(0, number) + "...";
        return name;
      };
      return BaseView;
    }();
    exports.default = BaseView;
    cc._RF.pop();
  }, {} ],
  BehaviorMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ae7d84WrH9Po5nUDnfBbOzG", "BehaviorMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BehaviorMgr = function() {
      function BehaviorMgr() {
        this.goodsId = null;
        this.goodsType = null;
        this.goodsBuyId = null;
        this.goodsBuyType = null;
        this.rankData = null;
        this.clubRoomData = null;
        this.clubSeekData = null;
        this.clubSelectId = null;
        this.clubMemberId = null;
        this.clubGameData = null;
        this.clubRecordData = null;
        this.applyListData = null;
        this.blacklistData = null;
        this.record_data = null;
        this.record_player_data = null;
      }
      BehaviorMgr.getInstance = function() {
        this._instance || (this._instance = new BehaviorMgr());
        return this._instance;
      };
      BehaviorMgr.prototype.setApplyListData = function(data) {
        this.applyListData = data;
      };
      BehaviorMgr.prototype.getApplyData = function() {
        return this.applyListData;
      };
      BehaviorMgr.prototype.setBlacklistData = function(data) {
        this.blacklistData = data;
      };
      BehaviorMgr.prototype.getBlacklistData = function() {
        return this.blacklistData;
      };
      BehaviorMgr.prototype.setGoodsItemData = function(_id, _type) {
        this.goodsId = _id;
        this.goodsType = _type;
      };
      BehaviorMgr.prototype.getGoodsItemData = function() {
        return new Array(this.goodsId, this.goodsType);
      };
      BehaviorMgr.prototype.setGoodsBuyData = function(_id, _type) {
        this.goodsBuyId = _id;
        this.goodsBuyType = _type;
      };
      BehaviorMgr.prototype.getGoodsBuyData = function() {
        return new Array(this.goodsBuyId, this.goodsBuyType);
      };
      BehaviorMgr.prototype.setRankItemData = function(data) {
        this.rankData = data;
      };
      BehaviorMgr.prototype.getRankItemData = function() {
        return this.rankData;
      };
      BehaviorMgr.prototype.setClubRoomData = function(data) {
        this.clubRoomData = data;
      };
      BehaviorMgr.prototype.getClubRoomData = function() {
        return this.clubRoomData;
      };
      BehaviorMgr.prototype.setClubSeekData = function(data) {
        this.clubSeekData = data;
      };
      BehaviorMgr.prototype.getClubSeekData = function() {
        return this.clubSeekData;
      };
      BehaviorMgr.prototype.setClubSelectId = function(id) {
        this.clubSelectId = id;
      };
      BehaviorMgr.prototype.getClubSelectId = function() {
        return this.clubSelectId;
      };
      BehaviorMgr.prototype.setClubMemberId = function(data) {
        this.clubMemberId = data;
      };
      BehaviorMgr.prototype.getClubMemberId = function() {
        return this.clubMemberId;
      };
      BehaviorMgr.prototype.setClubGameRoom = function(data) {
        this.clubGameData = data;
      };
      BehaviorMgr.prototype.getClubGameRoom = function() {
        return this.clubGameData;
      };
      BehaviorMgr.prototype.setClubRecordData = function(data) {
        this.clubRecordData = data;
      };
      BehaviorMgr.prototype.getClubRecordData = function() {
        return this.clubRecordData;
      };
      BehaviorMgr.prototype.setGameRecordData = function(data) {
        this.record_data = data;
      };
      BehaviorMgr.prototype.getGameRecordData = function() {
        return this.record_data;
      };
      BehaviorMgr.prototype.setRecordPlayerData = function(data) {
        this.record_player_data = data;
      };
      BehaviorMgr.prototype.getRecordPlayerData = function() {
        return this.record_player_data;
      };
      return BehaviorMgr;
    }();
    exports.default = BehaviorMgr;
    cc._RF.pop();
  }, {} ],
  BetMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8feb6QKiUVHaJfASDV03NH+", "BetMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var JbcCfg_1 = require("../CfgMgrs/JbcCfg");
    var GameCateCfg_1 = require("../CfgMgrs/GameCateCfg");
    var LocalStorage_1 = require("../Libs/LocalStorage");
    var BetMgr = function(_super) {
      __extends(BetMgr, _super);
      function BetMgr() {
        var _this = _super.call(this) || this;
        _this.betType = 1;
        _this.gameId = 1;
        return _this;
      }
      BetMgr.getInstance = function() {
        this._instance || (this._instance = new BetMgr());
        return this._instance;
      };
      BetMgr.prototype.setGameId = function(gameId) {
        this.gameId = gameId;
        LocalStorage_1.default.getInstance().setCreateRoomInfoCfg(this.gameId);
      };
      BetMgr.prototype.setBetType = function(bettype) {
        this.betType = bettype;
      };
      BetMgr.prototype.getGameName = function() {
        var game = GameCateCfg_1.default.getInstance().getGameById(this.gameId);
        return game.name;
      };
      BetMgr.prototype.getGameId = function() {
        LocalStorage_1.default.getInstance().getCreateRoomInfoCfg() && (this.gameId = LocalStorage_1.default.getInstance().getCreateRoomInfoCfg());
        return this.gameId;
      };
      BetMgr.prototype.getBetType = function() {
        return this.betType;
      };
      BetMgr.prototype.getJbcCfg = function() {
        var game = GameCateCfg_1.default.getInstance().getGameById(this.gameId);
        return JbcCfg_1.default.getInstance().getCfgByGameCodeAndBetType(game.code, this.betType);
      };
      return BetMgr;
    }(BaseMgr_1.default);
    exports.default = BetMgr;
    cc._RF.pop();
  }, {
    "../CfgMgrs/GameCateCfg": "GameCateCfg",
    "../CfgMgrs/JbcCfg": "JbcCfg",
    "../Libs/BaseMgr": "BaseMgr",
    "../Libs/LocalStorage": "LocalStorage"
  } ],
  BullCardsMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "873282U8qxEW4omZrvehaXZ", "BullCardsMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LocalStorage_1 = require("../../Plat/Libs/LocalStorage");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var BaseMgr_1 = require("../../Plat/Libs/BaseMgr");
    var NiuNiu = require("NiuNiuFP");
    var C_cardAttr = "_cardInfo";
    var CONFIGS = {
      otherCardSizeRate: .6,
      cardIntervalTime: .1,
      cardMoveTime: .25,
      moveStartPos: cc.p(0, 0),
      bigCardOffWRate: 1.08,
      halfRate: 2
    };
    var C_CardType = cc.Enum({
      block: 0,
      flower: 1,
      redHeart: 2,
      blackHeart: 3
    });
    var BullCardsMgr = function(_super) {
      __extends(BullCardsMgr, _super);
      function BullCardsMgr() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.atlas_myCards = null;
        _this.atlas_otherCards = null;
        _this.node_handler = null;
        _this.ctrl_handler = null;
        _this.SpriteFrameState = null;
        _this.lastcard = null;
        _this.allcard = [];
        return _this;
      }
      BullCardsMgr.prototype.initData = function(handler, atlas_cards) {
        this.ctrl_handler = handler;
        this.node_handler = handler.node;
        this.atlas_myCards = atlas_cards;
        this.SpriteFrameState = 3;
        LocalStorage_1.default.getInstance().setBullCardBGCfg(this.SpriteFrameState);
      };
      BullCardsMgr.prototype.setOtherCardsAtlas = function(atlas_cards) {
        this.atlas_otherCards = atlas_cards;
      };
      BullCardsMgr.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        delete BullCardsMgr._instance;
      };
      BullCardsMgr.prototype.setSpriteFrameState = function(state) {
        this.SpriteFrameState = state;
        LocalStorage_1.default.getInstance().setBullCardBGCfg(this.SpriteFrameState);
      };
      BullCardsMgr.prototype.clearData = function() {
        this.atlas_myCards = null;
        this.atlas_otherCards = null;
        this.ctrl_handler = null;
        this.node_handler = null;
        BullCardsMgr._instance = null;
      };
      BullCardsMgr.prototype.getSixValue = function(logicNum) {
        logicNum = parseInt(logicNum);
        var str = logicNum < 14 ? "0x0" : "0x";
        return str + logicNum.toString(16);
      };
      BullCardsMgr.prototype.setCardValue = function(cardNode) {
        var value = parseInt(cardNode[C_cardAttr].logicValue);
        var sixValue = this.getSixValue(value);
        var name;
        var frame;
        if ("0x00" == sixValue) switch (LocalStorage_1.default.getInstance().getBullCardBGCfg()) {
         case 1:
          sixValue += "_1";
          break;

         case 2:
          sixValue += "_2";
          break;

         case 3:
          sixValue = "0x00";
          break;

         case 4:
          sixValue += "_4";
        }
        if (1 == cardNode[C_cardAttr].cardScale) {
          name = "bull1_" + sixValue;
          frame = this.atlas_myCards.getSpriteFrame(name);
        } else {
          name = "bull_" + sixValue;
          frame = this.atlas_otherCards.getSpriteFrame(name);
        }
        frame ? cardNode.getComponent(cc.Sprite).spriteFrame = frame : cc.error("atlas lost frame= " + name + ", user value= ", value);
      };
      BullCardsMgr.prototype.giveCards = function(flyData) {
        var isMyself = flyData.isMyself;
        var cardsList = flyData.cardsList;
        var targetPos = flyData.targetPos;
        var cb = flyData.cb;
        var isNoEffect = flyData.isNoEffect;
        var i, maxNum, curCardRate, cardNode, startPos, basePosX, endPos, moveTime, intervalTime;
        startPos = CONFIGS.moveStartPos;
        moveTime = CONFIGS.cardMoveTime;
        intervalTime = CONFIGS.cardIntervalTime;
        maxNum = cardsList.length;
        curCardRate = isMyself ? CONFIGS.bigCardOffWRate : CONFIGS.otherCardSizeRate;
        for (i = 0; i < maxNum; i++) {
          cardNode = cardsList[maxNum - i - 1];
          if (cardNode) {
            this.allcard.push(cardNode);
            cardNode.stopAllActions();
            cardNode.position = startPos;
            cardNode.zIndex = i + 1;
            endPos = cc.p(targetPos.x, targetPos.y);
            endPos.x += -cardNode.width * curCardRate * CONFIGS.halfRate + i * curCardRate * cardNode.width;
            if (isNoEffect) cardNode.position = endPos; else {
              var act1 = cc.delayTime(i * intervalTime);
              var act2 = cc.moveTo(moveTime, endPos);
              if (i == maxNum - 1) {
                var act3 = cc.callFunc(function() {
                  cb && cb();
                }, this);
                cardNode.runAction(cc.sequence(act1, act2, act3));
              } else cardNode.runAction(cc.sequence(act1, act2));
            }
          }
        }
      };
      BullCardsMgr.prototype.addMyCard = function() {
        var curNode = new cc.Node();
        curNode.parent = this.node_handler;
        curNode.addComponent(cc.Sprite);
        curNode[C_cardAttr] = {
          logicValue: 0,
          isOpen: false,
          initPosY: null,
          cardScale: 1
        };
        this.setCardValue(curNode);
        return curNode;
      };
      BullCardsMgr.prototype.addOtherCard = function() {
        var curNode = new cc.Node();
        curNode.parent = this.node_handler;
        curNode.addComponent(cc.Sprite);
        curNode[C_cardAttr] = {
          logicValue: 0,
          initPosY: null,
          isOpen: false,
          cardScale: CONFIGS.otherCardSizeRate
        };
        this.setCardValue(curNode);
        return curNode;
      };
      BullCardsMgr.prototype.coverCards = function(cardsList) {
        var len = cardsList.length;
        for (var i = 0; i < len; i++) this._coverCard(cardsList[i]);
      };
      BullCardsMgr.prototype.openCards = function(cardsList, valueList, cb) {
        var cardNode;
        for (var i = 0; i < cardsList.length; i++) {
          cardNode = cardsList[i];
          if (cardNode.active) {
            cardNode[C_cardAttr].logicValue = valueList[i];
            this._openCard(cardNode, cb);
            cb = null;
          }
        }
      };
      BullCardsMgr.prototype.opencardsBycount = function(count, cardsList, valueList, cb) {
        var cardNode;
        for (var i = 0; i < cardsList.length; i++) if (i < count) {
          this.lastcard = cardsList[i];
          this.lastcard.active = false;
          this.lastcard[C_cardAttr].logicValue = valueList[i];
        } else {
          cardNode = cardsList[i];
          if (cardNode.active) {
            cardNode[C_cardAttr].logicValue = valueList[i];
            this._openCard(cardNode, cb);
            cb = null;
          }
        }
      };
      BullCardsMgr.prototype.showlastcards = function() {
        this.lastcard.active = true;
      };
      BullCardsMgr.prototype.openlastcard = function(cb) {
        this._openCard(this.lastcard, cb);
      };
      BullCardsMgr.prototype.showTanPai = function(cardsList, valueList, resultType) {
        this.resetCardsToTarget(cardsList);
        this.resetCardsValue(cardsList, valueList);
        this.setGroupGray(cardsList, resultType, valueList);
      };
      BullCardsMgr.prototype.resetCardsToTarget = function(cardsList) {
        var giveNum = cardsList.length, i, cardNode, endPos;
        for (i = 0; i < giveNum; i++) {
          cardNode = cardsList[giveNum - i - 1];
          this._resetCard(cardNode);
        }
      };
      BullCardsMgr.prototype.setGroupGray = function(cardsList, resultType, valueList) {
        var isTeshupai = parseInt(resultType) > 10;
        if (isTeshupai) return;
        var isHaveBull = parseInt(resultType) > 0;
        var len = cardsList.length;
        var bullValueList = valueList.slice(0, 3);
        var curCardNode;
        for (var i = len - 1; i >= 0; i--) {
          curCardNode = cardsList[i];
          isHaveBull ? -1 != bullValueList.indexOf(curCardNode[C_cardAttr].logicValue) && (curCardNode.color = new cc.Color(121, 121, 121)) : curCardNode.color = new cc.Color(121, 121, 121);
        }
      };
      BullCardsMgr.prototype.getCardResult = function(cardIdList) {
        var noKingList = NiuNiu.getNoKingList(cardIdList);
        var result = NiuNiu.getCardsResult(noKingList);
        if (result.type == NiuNiu.CardType.OX_VALUE0) {
          console.log("没有特殊牌", result);
          var haveKing = noKingList.length != cardIdList.length;
          if (haveKing) {
            console.log("有大小王");
            return NiuNiu.getWanglaiMaxValue(noKingList, cardIdList);
          }
          return NiuNiu.getOXResult(cardIdList);
        }
        console.log("有特殊牌", result);
        return {
          cardIdList: result.cards,
          resultType: result.type
        };
      };
      BullCardsMgr.prototype.resetCardsValue = function(cardNodeList, valueList) {
        var cardNode;
        for (var i = 0; i < cardNodeList.length; i++) {
          cardNode = cardNodeList[i];
          cardNode.scaleX = 1;
          valueList && (cardNode[C_cardAttr].logicValue = valueList[i]);
          this.setCardValue(cardNode);
        }
      };
      BullCardsMgr.prototype._getBullResult = function(cardIdList) {
        var total = 0, curValue;
        for (var i = 0; i < cardIdList.length; i++) {
          curValue = 15 & cardIdList[i];
          curValue > 10 && (curValue = 10);
          total += curValue;
        }
        return total % 10;
      };
      BullCardsMgr.prototype.resortTanPai = function(cardsList) {
        cardsList = this.reSortCardByPosX(cardsList.concat([]));
        var len = cardsList.length, card;
        for (var i = 0; i < cardsList.length; i++) {
          card = cardsList[i];
          if (i >= len - 2) {
            card.zIndex = 0;
            card.y += .35 * card.height;
            card.x -= .9 * card.width;
          }
        }
        return cardsList;
      };
      BullCardsMgr.prototype.reSortCardByPosX = function(cardsList) {
        var self = this;
        var resort = function(a, b) {
          return a.x - b.x;
        };
        cardsList = cardsList.sort(resort);
        return cardsList;
      };
      BullCardsMgr.prototype._resetCard = function(cardNode) {
        cardNode.opacity = 255;
        cardNode[C_cardAttr].initPosY && (cardNode.y = cardNode[C_cardAttr].initPosY);
        cardNode[C_cardAttr].isOpen = false;
        cardNode[C_cardAttr].initPosY = null;
      };
      BullCardsMgr.prototype._hideCard = function(cardNode) {
        cardNode.active = false;
        cardNode[C_cardAttr].isOpen = false;
      };
      BullCardsMgr.prototype._coverCard = function(cardNode) {
        cardNode[C_cardAttr].logicValue = 0;
        this.setCardValue(cardNode);
      };
      BullCardsMgr.prototype._openCard = function(cardNode, cb) {
        var _this = this;
        var intervalTime = .3;
        cardNode[C_cardAttr].isOpen = true;
        var act1 = cc.scaleTo(intervalTime, 0, 1);
        var act2 = cc.callFunc(function() {
          act1 = cc.scaleTo(intervalTime, 1, 1);
          _this.setCardValue(cardNode);
          if (cb) {
            var act3 = cc.callFunc(function() {
              cb();
            }, _this);
            cardNode.runAction(cc.sequence(act1, act3));
          } else cardNode.runAction(act1);
        });
        cardNode.runAction(cc.sequence(act1, act2));
      };
      BullCardsMgr.prototype.initTeshuLimit = function() {
        var cfg = RoomMgr_1.default.getInstance().getFangKaCfg();
        console.log("这里是房间配置=== ", cfg);
        var limitList = [];
        0 == parseInt(cfg.v_huluNiuLimit) && limitList.push(NiuNiu.CardType.OX_THREE_SAME_TWAIN);
        0 == parseInt(cfg.v_shunziNiuLimit) && limitList.push(NiuNiu.CardType.OX_ORDER_NUMBER);
        0 == parseInt(cfg.v_tonghuaNiuLimit) && limitList.push(NiuNiu.CardType.OX_FIVE_SAME_FLOWER);
        0 == parseInt(cfg.v_wuhuaNiuLimit) && limitList.push(NiuNiu.CardType.OX_FIVE_KING);
        0 == parseInt(cfg.v_zhadanNiuLimit) && limitList.push(NiuNiu.CardType.OX_FOUR_SAME);
        0 == parseInt(cfg.v_wuxiaoNiuLimit) && limitList.push(NiuNiu.CardType.OX_FIVE_CALVES);
        NiuNiu.setLimitList(limitList);
      };
      BullCardsMgr.getInstance = function() {
        this._instance || (this._instance = new BullCardsMgr());
        return this._instance;
      };
      return BullCardsMgr;
    }(BaseMgr_1.default);
    exports.default = BullCardsMgr.getInstance();
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseMgr": "BaseMgr",
    "../../Plat/Libs/LocalStorage": "LocalStorage",
    NiuNiuFP: "NiuNiuFP"
  } ],
  BullPosMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "531adRXgxFJ/rUDHgBA2hGN", "BullPosMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../../Plat/Libs/BaseMgr");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var CONFIGS = {
      minAdaptNum: 5
    };
    var BullPosMgr = function(_super) {
      __extends(BullPosMgr, _super);
      function BullPosMgr() {
        return _super.call(this) || this;
      }
      BullPosMgr.prototype.setSeatConfigs = function(posNodeCfg) {
        this.seatCfg = this.initPosCfg(posNodeCfg);
      };
      BullPosMgr.prototype.setGiveCardPosCfg = function(posNodeCfg) {
        this.giveCardsCfg = this.initPosCfg(posNodeCfg);
      };
      BullPosMgr.prototype.setChipValuePosCfg = function(posNodeCfg) {
        this.chipValueCfg = this.initPosCfg(posNodeCfg);
      };
      BullPosMgr.prototype.setResultTypePosCfg = function(posNodeCfg) {
        this.resultTypeCfg = this.initPosCfg(posNodeCfg);
      };
      BullPosMgr.prototype.setChatPosCfg = function(posNodeCfg) {
        this.chatPosCfg = this.initPosCfg(posNodeCfg);
      };
      BullPosMgr.prototype.setSeatSizeConfig = function(seatNode) {
        if (!this.seatNodeCfg) {
          this.seatNodeCfg = {};
          this.seatNodeCfg.nodeW = seatNode.width;
          this.seatNodeCfg.nodeH = seatNode.height;
          var bg = seatNode.children[0];
          var headNode = bg.children[0];
          var headPos = headNode.position;
          this.seatNodeCfg.headW = headNode.width;
          this.seatNodeCfg.headH = headNode.height;
          var offX = seatNode.width - bg.width;
          var offY = seatNode.height - bg.height;
          this.seatNodeCfg.headPos = headPos;
          this.seatNodeCfg.mySelfHeadPos = cc.p(headPos.x, headPos.y);
          this.seatNodeCfg.mySeatPos = cc.p(seatNode.x, seatNode.y);
          this.seatNodeCfg.mySeatPos.x += offX;
          this.seatNodeCfg.mySeatPos.y -= offY;
        }
      };
      BullPosMgr.prototype.getSeatPos = function(viewSeatId) {
        return this.seatCfg.children[viewSeatId].position;
      };
      BullPosMgr.prototype.getGiveCardPos = function(viewSeatId) {
        return this.giveCardsCfg.children[viewSeatId].position;
      };
      BullPosMgr.prototype.getChatPos = function(viewSeatId) {
        return this.chatPosCfg.children[viewSeatId].position;
      };
      BullPosMgr.prototype.getSeatVoicePos = function(viewSeatId) {
        var seatPos = this.getSeatHeadPos(viewSeatId);
        return cc.p(seatPos.x + this.seatNodeCfg.headW / 2, seatPos.y - this.seatNodeCfg.headH / 2);
      };
      BullPosMgr.prototype.getChipPos = function(viewSeatId) {
        return this.chipValueCfg.children[viewSeatId].position;
      };
      BullPosMgr.prototype.getResultTypePos = function(viewSeatId) {
        return this.resultTypeCfg.children[viewSeatId].position;
      };
      BullPosMgr.prototype.getSeatHeadPos = function(viewSeatId) {
        var seat = this.seatCfg.children[viewSeatId];
        if (seat) {
          var headParentPos = cc.p(0, 0);
          var headPos = void 0;
          headPos = 0 == viewSeatId ? this.seatNodeCfg.mySelfHeadPos : this.seatNodeCfg.headPos;
          return cc.p(headPos.x + headParentPos.x + seat.x, headPos.y + headParentPos.y + seat.y);
        }
        return null;
      };
      BullPosMgr.prototype.getSeatCheckPos = function(viewSeatId) {
        var seatPos = this.seatCfg.children[viewSeatId].position;
        var minSeat = this.getMinSeatId();
        return 0 == viewSeatId ? cc.p(seatPos.x + this.seatNodeCfg.nodeW / 2 + 20, seatPos.y) : viewSeatId < minSeat ? cc.p(seatPos.x - this.seatNodeCfg.nodeW / 2, seatPos.y) : cc.p(seatPos.x + this.seatNodeCfg.nodeW / 2, seatPos.y);
      };
      BullPosMgr.prototype.getMinSeatId = function() {
        var seatCount = RoomMgr_1.default.getInstance().getSeatCount();
        var dict = {
          6: 3,
          8: 4
        };
        seatCount = seatCount <= 6 ? 6 : 8;
        return dict[seatCount];
      };
      BullPosMgr.prototype.getSeatH = function() {
        return this.seatNodeCfg.nodeH;
      };
      BullPosMgr.prototype.initPosCfg = function(posCfgNode) {
        var seatCount = RoomMgr_1.default.getInstance().getSeatCount();
        var curStrName = "seats_" + RoomMgr_1.default.getInstance().getSeatCount();
        var nNode = posCfgNode.getChildByName(curStrName);
        if (!nNode) {
          var curChildren = posCfgNode.children;
          for (var i = 0; i < curChildren.length; i++) if (parseInt(curChildren[i].name.split("_")[1]) > seatCount) {
            nNode = curChildren[i];
            break;
          }
        }
        return nNode;
      };
      BullPosMgr.prototype.clear = function() {
        delete BullPosMgr._instance;
        BullPosMgr._instance = null;
      };
      BullPosMgr.getInstance = function() {
        this._instance || (this._instance = new BullPosMgr());
        return this._instance;
      };
      return BullPosMgr;
    }(BaseMgr_1.default);
    exports.default = BullPosMgr;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseMgr": "BaseMgr"
  } ],
  BullRoomAroundCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fe764KH+55IV7IMA4hDgZ6v", "BullRoomAroundCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.mySeatId = null;
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_gameRule: null,
          btn_set: null,
          btn_chat: null,
          btn_record: null,
          node_Electricity: null,
          label_curtime: null,
          node_internet: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.label_curtime = ctrl.label_curtime;
        this.ui.node_Electricity = ctrl.node_Electricity;
        this.ui.node_internet = ctrl.node_internet;
        this.ui.btn_chat = ctrl.node_btn_chat;
        this.ui.btn_gameRule = ctrl.node_btn_gameRule;
        this.ui.btn_set = ctrl.node_btn_set;
        this.ui.btn_record = ctrl.node_btn_record;
      };
      return View;
    }(BaseView_1.default);
    var BullRoomAroundCtrl = function(_super) {
      __extends(BullRoomAroundCtrl, _super);
      function BullRoomAroundCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.node_btn_gameRule = null;
        _this.node_btn_set = null;
        _this.node_btn_record = null;
        _this.node_btn_chat = null;
        _this.label_curtime = null;
        _this.node_internet = null;
        _this.node_Electricity = null;
        return _this;
      }
      BullRoomAroundCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.schedule(this.updateCurDate.bind(this), 1);
        if (cc.sys.isNative) {
          G_PLATFORM.getCurNetWorkData();
          G_PLATFORM.getBatteryPercent();
        }
      };
      BullRoomAroundCtrl.prototype.updateCurDate = function() {
        var curDate = new Date();
        var hours = curDate.getHours();
        var minutes = curDate.getMinutes();
        this.label_curtime.string = (hours < 10 ? "0" + hours : hours) + ":" + (minutes < 10 ? "0" + minutes : minutes);
      };
      BullRoomAroundCtrl.prototype.onDestroy = function() {
        this.unschedule(this.updateCurDate);
        _super.prototype.onDestroy.call(this);
      };
      BullRoomAroundCtrl.prototype.defineNetEvents = function() {};
      BullRoomAroundCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          batteryChange: this.onBatteryChange,
          networkChange: this.onNetWorkChange
        };
      };
      BullRoomAroundCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_gameRule, this.btn_gameRule_cb, "点击房间规则");
        this.connect(G_UiType.image, this.ui.btn_chat, this.btn_chat_cb, "点击聊天");
        this.connect(G_UiType.image, this.ui.btn_record, this.btn_zhanji_cb, "点击战绩");
        this.connect(G_UiType.image, this.ui.btn_set, this.setting_cb, "点击设置");
      };
      BullRoomAroundCtrl.prototype.start = function() {};
      BullRoomAroundCtrl.prototype.setting_cb = function() {
        this.start_sub_module(G_MODULE.RoomSetting);
      };
      BullRoomAroundCtrl.prototype.btn_gameRule_cb = function(event) {
        this.start_sub_module(G_MODULE.GameRule);
      };
      BullRoomAroundCtrl.prototype.btn_chat_cb = function(event) {
        this.start_sub_module(G_MODULE.RoomChat);
      };
      BullRoomAroundCtrl.prototype.btn_zhanji_cb = function() {
        this.start_sub_module(G_MODULE.GambleRecord);
      };
      BullRoomAroundCtrl.prototype.onBatteryChange = function(msg) {
        var _this = this;
        cc.log("电量变化？？", msg);
        var proportion = parseInt(msg / 10);
        var imageName = "";
        imageName = 6 <= proportion ? "dl_1" : 3 <= proportion ? "dl_2" : "dl_3";
        cc.loader.loadRes("Icons/" + imageName, cc.SpriteFrame, function(err, sprite) {
          if (err) return cc.error("no find Icons/" + imageName);
          var childrens = _this.node_Electricity.children;
          for (var i = 0; i < childrens.length; i++) {
            childrens[i].active = i < proportion;
            i < proportion && (childrens[i].getComponent(cc.Sprite).spriteFrame = sprite);
          }
        });
      };
      BullRoomAroundCtrl.prototype.onNetWorkChange = function(msg) {
        var _this = this;
        cc.log("网络变化？？", msg);
        var imageName = msg.type + "_" + msg.level;
        cc.loader.loadRes("Icons/" + imageName, cc.SpriteFrame, function(err, sprite) {
          if (err) return cc.error("no find Icons/" + imageName);
          _this.node_internet.getComponent(cc.Sprite).spriteFrame = sprite;
        });
      };
      __decorate([ property({
        tooltip: "游戏规则",
        type: cc.Node
      }) ], BullRoomAroundCtrl.prototype, "node_btn_gameRule", void 0);
      __decorate([ property({
        tooltip: "设置",
        type: cc.Node
      }) ], BullRoomAroundCtrl.prototype, "node_btn_set", void 0);
      __decorate([ property({
        tooltip: "战绩",
        type: cc.Node
      }) ], BullRoomAroundCtrl.prototype, "node_btn_record", void 0);
      __decorate([ property({
        tooltip: "聊天",
        type: cc.Node
      }) ], BullRoomAroundCtrl.prototype, "node_btn_chat", void 0);
      __decorate([ property({
        tooltip: "时间",
        type: cc.Label
      }) ], BullRoomAroundCtrl.prototype, "label_curtime", void 0);
      __decorate([ property({
        tooltip: "网络",
        type: cc.Node
      }) ], BullRoomAroundCtrl.prototype, "node_internet", void 0);
      __decorate([ property({
        tooltip: "电量",
        type: cc.Node
      }) ], BullRoomAroundCtrl.prototype, "node_Electricity", void 0);
      BullRoomAroundCtrl = __decorate([ ccclass ], BullRoomAroundCtrl);
      return BullRoomAroundCtrl;
    }(BaseCtrl_1.default);
    exports.default = BullRoomAroundCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView"
  } ],
  BullThinkingAniCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "28c5b2dmupDbYSccCL3/WOx", "BullThinkingAniCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var GEventDef_1 = require("../../Plat/GameMgrs/GEventDef");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var BullPosMgr_1 = require("./BullPosMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var BullConst;
    var BullLogic;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        BullConst = RoomMgr_1.default.getInstance().getDef();
        BullLogic = RoomMgr_1.default.getInstance().getLogic().getInstance();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          Prefab_thinking: null
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.Prefab_thinking = ctrl.Prefab_thinking;
      };
      View.prototype.showThinking = function(viewSeatId) {
        console.log("显示思考中，获取算牌中viewSeatId= ", viewSeatId);
        this.dict_thinking || (this.dict_thinking = {});
        if (this.dict_thinking[viewSeatId]) {
          this.dict_thinking[viewSeatId].active = true;
          this.dict_thinking[viewSeatId].getComponent(cc.Animation).play();
        } else {
          var seatPos = BullPosMgr_1.default.getInstance().getSeatHeadPos(viewSeatId);
          if (seatPos) {
            var aniNode = cc.instantiate(this.ui.Prefab_thinking);
            aniNode.parent = this.node;
            aniNode.position = seatPos;
            this.dict_thinking[viewSeatId] = aniNode;
          }
        }
      };
      View.prototype.clearAllThinking = function() {
        if (this.dict_thinking) for (var viewSeatId in this.dict_thinking) this.dict_thinking[viewSeatId].active = false;
      };
      View.prototype.clearOneThinking = function(viewSeatId) {
        console.log("清理某个人的思考中图标viewSeatId= ", viewSeatId);
        this.dict_thinking && this.dict_thinking[viewSeatId] && (this.dict_thinking[viewSeatId].active = false);
      };
      return View;
    }(BaseView_1.default);
    var BullThinkingAniCtrl = function(_super) {
      __extends(BullThinkingAniCtrl, _super);
      function BullThinkingAniCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.Prefab_thinking = null;
        return _this;
      }
      BullThinkingAniCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.isSync = false;
      };
      BullThinkingAniCtrl.prototype.defineNetEvents = function() {
        this.n_events[BullConst.clientEvent.onTanPai] = this.onTanPai;
        this.n_events[BullConst.clientEvent.onProcess] = this.onProcess;
        this.n_events[BullConst.clientEvent.onSyncData] = this.onSyncData;
        this.n_events[BullConst.clientEvent.onMidEnter] = this.onMidEnter;
        this.n_events["connector.entryHandler.enterRoom"] = this.onMyEnterRoom;
        this.n_events["http.reqUsers"] = this.http_reqUsers;
      };
      BullThinkingAniCtrl.prototype.defineGlobalEvents = function() {
        this.g_events[GEventDef_1.default.bull_giveCardEnd] = this.onModules_giveCardsEnd;
        this.g_events[GEventDef_1.default.usersUpdated] = this.usersUpdated;
      };
      BullThinkingAniCtrl.prototype.connectUi = function() {};
      BullThinkingAniCtrl.prototype.start = function() {};
      BullThinkingAniCtrl.prototype.onMidEnter = function(msg) {
        this.midEnterInfo = msg;
      };
      BullThinkingAniCtrl.prototype.http_reqUsers = function() {
        if (this.midEnterInfo) {
          var dictTanpai = this.midEnterInfo.dict_tanPai;
          var idleSeatIdList = this.midEnterInfo.idleSeatIdList;
          var room = RoomMgr_1.default.getInstance();
          var users = room.users;
          var myLogicSeatId = room.getMySeatId();
          for (var seatId in users) if (dictTanpai[seatId]) this.view.clearOneThinking(room.getViewSeatId(seatId)); else {
            console.log("没有摊牌的玩家作为seatId= ", seatId);
            if (this.isHaveKey(idleSeatIdList, seatId)) {
              console.log("是旁观者seatId= ", seatId);
              this.view.clearOneThinking(room.getViewSeatId(seatId));
            } else this.view.showThinking(room.getViewSeatId(seatId));
          }
          this.midEnterInfo = null;
        }
      };
      BullThinkingAniCtrl.prototype.isHaveKey = function(list, key) {
        for (var i = 0; i < list.length; i++) if (list[i] == key) return true;
        return false;
      };
      BullThinkingAniCtrl.prototype.onMyEnterRoom = function(msg) {
        var room = RoomMgr_1.default.getInstance();
        this.view.clearAllThinking();
      };
      BullThinkingAniCtrl.prototype.onSyncData = function(msg) {
        var dictTanpai = msg.tanpaiDict;
        var room = RoomMgr_1.default.getInstance();
        var users = room.users;
        this.isSync = true;
        for (var seatId in users) dictTanpai[seatId] ? this.view.clearOneThinking(room.getViewSeatId(seatId)) : this.view.showThinking(room.getViewSeatId(seatId));
      };
      BullThinkingAniCtrl.prototype.onTanPai = function(msg) {
        var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(msg.seatId);
        this.view.clearOneThinking(viewSeatId);
      };
      BullThinkingAniCtrl.prototype.onProcess = function(msg) {
        if (msg.process == BullConst.process.settle) {
          this.isSync = false;
          this.view.clearAllThinking();
        }
      };
      BullThinkingAniCtrl.prototype.usersUpdated = function() {};
      BullThinkingAniCtrl.prototype.onModules_giveCardsEnd = function() {
        if (this.isSync) {
          this.isSync = false;
          return;
        }
        var room = RoomMgr_1.default.getInstance();
        var users = room.users;
        for (var seatId in users) BullLogic.getIsWatcher && BullLogic.getIsWatcher(seatId) || this.view.showThinking(room.getViewSeatId(seatId));
      };
      __decorate([ property(cc.Prefab) ], BullThinkingAniCtrl.prototype, "Prefab_thinking", void 0);
      BullThinkingAniCtrl = __decorate([ ccclass ], BullThinkingAniCtrl);
      return BullThinkingAniCtrl;
    }(BaseCtrl_1.default);
    exports.default = BullThinkingAniCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/GEventDef": "GEventDef",
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "./BullPosMgr": "BullPosMgr"
  } ],
  Bull_Seat: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "79bd4b+ZB5NsZ8XepOXT5TI", "Bull_Seat");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var UserMgr_1 = require("../../Plat/GameMgrs/UserMgr");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var UiMgr_1 = require("../../Plat/GameMgrs/UiMgr");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var BullLogic = null;
    var BullConst = null;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.viewSeatId = null;
        _this.logicseatid = null;
        _this.uid = null;
        _this.userinfo = null;
        BullConst = RoomMgr_1.default.getInstance().getDef();
        BullLogic = RoomMgr_1.default.getInstance().getLogic().getInstance();
        return _this;
      }
      Model.prototype.clear = function() {
        this.uid = null;
        this.logicseatid = null;
        this.userinfo = null;
      };
      Model.prototype.updateLogicId = function() {
        this.logicseatid = RoomMgr_1.default.getInstance().getLogicSeatId(this.viewSeatId);
        this.uid = RoomMgr_1.default.getInstance().users[this.logicseatid];
        console.log("刷新玩家信息this.viewSeatId= ", this.viewSeatId, ", this.logicseatid=", this.logicseatid, ", this.uid=", this.uid);
      };
      Model.prototype.updateUserInfo = function() {
        this.userinfo = UserMgr_1.default.getInstance().getUserById(this.uid);
        console.log("获取个人信息= this.uid= ", this.uid, ", this.userinfo=", this.userinfo);
      };
      Model.prototype.getIsMyself = function() {
        return RoomMgr_1.default.getInstance().getMySeatId() == this.logicseatid;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.isUpdateMoney = null;
        _this.ui = {
          node_img_head: null,
          lbl_name: null,
          lbl_money: null
        };
        _this.node = null;
        _this.isUpdateMoney = true;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_img_head = ctrl.node_img_head;
        this.ui.lbl_name = ctrl.lbl_name;
        this.ui.lbl_money = ctrl.lbl_money;
      };
      View.prototype.clear = function() {
        if (this.node.active) {
          this.updateIsMyself();
          this.resetHead();
          this.updateMoney();
          this._updateName();
        }
      };
      View.prototype.updateUserInfo = function() {
        if (this.node.active) {
          this._updateHead();
          this._updateName();
        }
      };
      View.prototype.updateMoney = function() {
        var score = BullLogic.getMyScore(this.model.logicseatid);
        if (score) {
          parseInt(score) > 0 && (score = "+" + score);
          this.ui.lbl_money.string = score;
        } else this.ui.lbl_money.string = "0";
      };
      View.prototype.updateIsMyself = function() {
        if (this.model.getIsMyself()) {
          var bg = this.node.children[0];
          bg.width = this.node.width;
          bg.height = this.node.height;
        }
      };
      View.prototype._updateHead = function() {
        this.ui.node_img_head._defaultHead || (this.ui.node_img_head._defaultHead = this.ui.node_img_head.getComponent(cc.Sprite).spriteFrame);
        UiMgr_1.default.getInstance().setUserHead(this.ui.node_img_head, this.model.userinfo.headid || "number" == typeof this.model.userinfo.headurl && this.model.userinfo.headurl, this.model.userinfo.headurl || "string" == typeof this.model.userinfo.headurl && this.model.userinfo.headurl);
      };
      View.prototype._updateName = function() {
        if (this.model.userinfo) {
          var curStr = void 0;
          this.model.userinfo.nickname && (curStr = this.model.userinfo.nickname);
          curStr = curStr || "";
          this.ui.lbl_name.string = curStr;
        } else this.ui.lbl_name.string = "";
      };
      View.prototype.resetHead = function() {
        this.ui.node_img_head._defaultHead && (this.ui.node_img_head.getComponent(cc.Sprite).spriteFrame = this.ui.node_img_head._defaultHead);
      };
      return View;
    }(BaseView_1.default);
    var Bull_Seat = function(_super) {
      __extends(Bull_Seat, _super);
      function Bull_Seat() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_img_head = null;
        _this.lbl_name = null;
        _this.lbl_money = null;
        return _this;
      }
      Bull_Seat.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.model.viewSeatId = this.node.parent.children.indexOf(this.node);
        this.node.active = false;
        this.view.updateMoney();
      };
      Bull_Seat.prototype.defineNetEvents = function() {
        this.n_events = {
          onEnterRoom: this.onEnterRoom,
          onLeaveRoom: this.onLeaveRoom,
          "http.reqRoomUsers": this.http_reqRoomUsers,
          "http.reqUsers": this.http_reqUsers
        };
        this.n_events["http.reqSettle"] = this.onReqSettle;
        this.n_events[BullConst.clientEvent.onProcess] = this.onProcess;
        this.n_events[BullConst.clientEvent.onSettle] = this.onSettle_bull;
      };
      Bull_Seat.prototype.defineGlobalEvents = function() {
        this.g_events = {
          usersUpdated: this.usersUpdated,
          changeShuohuaActive: this.chengeShuohuaActive
        };
      };
      Bull_Seat.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.node_img_head, this.showUserDetail, "点击头像");
      };
      Bull_Seat.prototype.start = function() {};
      Bull_Seat.prototype.showUserDetail = function() {
        var _this = this;
        if (null != this.model.uid) var ctrl = this.start_sub_module(G_MODULE.RoomUserInfo, function(uiCtrl) {
          uiCtrl.setUid(_this.model.uid);
        }, "RoomUserInfoCtrl");
      };
      Bull_Seat.prototype.onEnterRoom = function(msg) {
        this.model.updateLogicId();
        if (this.model.logicseatid != msg.seatid) return;
        console.log("onEnterRoom= ", msg);
        this.model.uid = msg.user;
      };
      Bull_Seat.prototype.onLeaveRoom = function(msg) {
        if (this.model.logicseatid == msg.seatid) {
          this.model.clear();
          this.view.clear();
          this.node.active = false;
        }
      };
      Bull_Seat.prototype.onProcess = function(msg) {
        msg.process == BullConst.process.start || msg.process == BullConst.process.settle;
      };
      Bull_Seat.prototype.http_reqRoomUsers = function(msg) {
        console.log("http_reqRoomUsers== ", msg);
        this.model.updateLogicId();
        this.view.clear();
      };
      Bull_Seat.prototype.http_reqUsers = function(msg) {
        console.log("http_reqUsers== ", msg);
        if (!this.model.uid) return;
        this.node.active = true;
        this.model.updateUserInfo();
        this.view.updateMoney();
        this.view.updateUserInfo();
      };
      Bull_Seat.prototype.onReqSettle = function() {
        this.model.updateUserInfo();
        this.view.updateUserInfo();
        this.view.isUpdateMoney && this.view.updateMoney();
      };
      Bull_Seat.prototype.onSettle_bull = function(msg) {
        if (!this.node.active) return;
        this.model.getScore = msg.scoreInfo[this.model.logicseatid];
        if (this.model.getScore > 0) {
          var cb = function() {
            this.view.updateMoney();
          };
          var seq = cc.sequence(cc.delayTime(2.5), cc.callFunc(cb, this));
          this.node.runAction(seq);
          this.view.isUpdateMoney = false;
        } else this.view.isUpdateMoney = true;
      };
      Bull_Seat.prototype.usersUpdated = function() {
        this.model.updateLogicId();
        this.view.clear();
      };
      Bull_Seat.prototype.chengeShuohuaActive = function() {
        this.ui.shuohua.active = !this.ui.shuohua.active;
      };
      Bull_Seat.prototype.initViewSeatId = function(viewSeatId) {
        this.model.viewSeatId = viewSeatId;
      };
      __decorate([ property({
        type: cc.Node,
        displayName: "headImg"
      }) ], Bull_Seat.prototype, "node_img_head", void 0);
      __decorate([ property({
        type: cc.Label,
        displayName: "nameLabel"
      }) ], Bull_Seat.prototype, "lbl_name", void 0);
      __decorate([ property({
        type: cc.Label,
        displayName: "moneyLabel"
      }) ], Bull_Seat.prototype, "lbl_money", void 0);
      Bull_Seat = __decorate([ ccclass ], Bull_Seat);
      return Bull_Seat;
    }(BaseCtrl_1.default);
    exports.default = Bull_Seat;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/GameMgrs/UiMgr": "UiMgr",
    "../../Plat/GameMgrs/UserMgr": "UserMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView"
  } ],
  Bull_calculateCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c6c6dOIPmVAe7GKiwtZ+QuE", "Bull_calculateCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          lbl_num4: null
        };
        _this.node = null;
        _this.list_lbls = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.lbl_num4 = ctrl.lbl_num4;
        ctrl.lbl_num1.string = "";
        ctrl.lbl_num2.string = "";
        ctrl.lbl_num3.string = "";
        ctrl.lbl_num4.string = "";
        this.list_lbls = [ ctrl.lbl_num1, ctrl.lbl_num2, ctrl.lbl_num3 ];
      };
      View.prototype.addValue = function(valueList) {
        var len = this.list_lbls.length, i, curLbl, value;
        for (i = 0; i < len; i++) {
          curLbl = this.list_lbls[i];
          !curLbl.string && valueList.length > 0 && (curLbl.string = this.parseValue(valueList.splice(0, 1)[0]));
        }
        this.showResult();
      };
      View.prototype.delValue = function(delValueList) {
        var len = this.list_lbls.length, i, j, curLbl;
        for (i = 0; i < len; i++) {
          curLbl = this.list_lbls[i];
          if (curLbl.string) for (j = 0; j < delValueList.length; j++) if (this.parseValue(delValueList[j]) == curLbl.string) {
            curLbl.string = "";
            delValueList.splice(j, 1);
            break;
          }
        }
        this.showResult();
      };
      View.prototype.clearValue = function() {
        var len = this.list_lbls.length, i, curLbl;
        for (i = 0; i < len; i++) {
          curLbl = this.list_lbls[i];
          curLbl.string = "";
        }
        this.ui.lbl_num4.string = "";
      };
      View.prototype.showResult = function() {
        var len = this.list_lbls.length, i, curLbl, resultValue = 0;
        for (i = 0; i < len; i++) {
          curLbl = this.list_lbls[i];
          if (!curLbl.string) {
            this.ui.lbl_num4.string = "";
            return;
          }
          resultValue += parseInt(curLbl.string);
        }
        this.ui.lbl_num4.string = resultValue;
      };
      View.prototype.parseValue = function(value) {
        var result;
        switch (value) {
         case "a":
         case "b":
         case "c":
         case "d":
          result = 10;
          break;

         default:
          result = value;
        }
        return result;
      };
      return View;
    }(BaseView_1.default);
    var Bull_calculateCtrl = function(_super) {
      __extends(Bull_calculateCtrl, _super);
      function Bull_calculateCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.model = null;
        _this.view = null;
        _this.lbl_num1 = null;
        _this.lbl_num2 = null;
        _this.lbl_num3 = null;
        _this.lbl_num4 = null;
        return _this;
      }
      Bull_calculateCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Bull_calculateCtrl.prototype.defineNetEvents = function() {};
      Bull_calculateCtrl.prototype.defineGlobalEvents = function() {};
      Bull_calculateCtrl.prototype.connectUi = function() {};
      Bull_calculateCtrl.prototype.start = function() {};
      Bull_calculateCtrl.prototype.addValues = function(valueList) {
        this.view.addValue(valueList);
      };
      Bull_calculateCtrl.prototype.delValues = function(valueList) {
        this.view.delValue(valueList);
      };
      __decorate([ property(cc.Label) ], Bull_calculateCtrl.prototype, "lbl_num1", void 0);
      __decorate([ property(cc.Label) ], Bull_calculateCtrl.prototype, "lbl_num2", void 0);
      __decorate([ property(cc.Label) ], Bull_calculateCtrl.prototype, "lbl_num3", void 0);
      __decorate([ property(cc.Label) ], Bull_calculateCtrl.prototype, "lbl_num4", void 0);
      Bull_calculateCtrl = __decorate([ ccclass ], Bull_calculateCtrl);
      return Bull_calculateCtrl;
    }(BaseCtrl_1.default);
    exports.default = Bull_calculateCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView"
  } ],
  Bull_cardResultTypeCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "699266lZI9OGIG1+7pP2AeJ", "Bull_cardResultTypeCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BullPosMgr_1 = require("./BullPosMgr");
    var UserMgr_1 = require("../../Plat/GameMgrs/UserMgr");
    var GEventDef_1 = require("../../Plat/GameMgrs/GEventDef");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var TbnnAudio_1 = require("../../Games/Tbnn/BullMgr/TbnnAudio");
    var MpnnAudio_1 = require("../../Games/Mpnn/BullMgr/MpnnAudio");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var BullConst;
    var BullLogic;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.seatCount = null;
        _this._roomRuleInfo = null;
        _this._gameid = null;
        _this.userSex = null;
        _this.delaerSeatId = null;
        BullConst = RoomMgr_1.default.getInstance().getDef();
        BullLogic = RoomMgr_1.default.getInstance().getLogic().getInstance();
        _this.seatCount = RoomMgr_1.default.getInstance().getSeatCount();
        _this._roomRuleInfo = RoomMgr_1.default.getInstance().getFangKaCfg();
        _this.userSex = UserMgr_1.default.getInstance().getMySex();
        BullLogic.getDelaerSeatId && (_this.delaerSeatId = BullLogic.getDelaerSeatId());
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          prefab_Min_ani: null,
          prefab_niuniu_ani: null,
          prefab_hulu_ani: null,
          prefab_shunzi_ani: null,
          prefab_tonghua_ani: null,
          prefab_wuhua_ani: null,
          prefab_wuxiaoniu_ani: null,
          prefab_zhadanniu_ani: null,
          atlas_resultValue: null,
          prefab_oneResultType: null,
          font_huluniu: null,
          font_niuniu: null,
          font_putongniu: null,
          font_shunziniu: null,
          font_tonghuaniu: null,
          font_wuhuaniu: null,
          font_wuxiaoniu: null,
          font_zhadnaniu: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.dict_results = {};
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.font_huluniu = ctrl.font_huluniu;
        this.ui.font_niuniu = ctrl.font_niuniu;
        this.ui.font_putongniu = ctrl.font_putongniu;
        this.ui.font_shunziniu = ctrl.font_shunziniu;
        this.ui.font_tonghuaniu = ctrl.font_tonghuaniu;
        this.ui.font_wuhuaniu = ctrl.font_wuhuaniu;
        this.ui.font_wuxiaoniu = ctrl.font_wuxiaoniu;
        this.ui.font_zhadnaniu = ctrl.font_zhadnaniu;
        this.ui.prefab_Min_ani = ctrl.prefab_Min_ani;
        this.ui.prefab_niuniu_ani = ctrl.prefab_niuniu_ani;
        this.ui.prefab_hulu_ani = ctrl.prefab_hulu_ani;
        this.ui.prefab_shunzi_ani = ctrl.prefab_shunzi_ani;
        this.ui.prefab_tonghua_ani = ctrl.prefab_tonghua_ani;
        this.ui.prefab_wuhua_ani = ctrl.prefab_wuhua_ani;
        this.ui.prefab_wuxiaoniu_ani = ctrl.prefab_wuxiaoniu_ani;
        this.ui.prefab_zhadanniu_ani = ctrl.prefab_zhadanniu_ani;
        this.ui.atlas_resultValue = ctrl.atlas_resultValue;
        this.ui.prefab_oneResultType = ctrl.prefab_oneResultType;
      };
      View.prototype.showResultType = function(viewSeatId, value, onsettle) {
        void 0 === onsettle && (onsettle = true);
        var typeNode = this.getOneResult(viewSeatId);
        if (typeNode) {
          typeNode.active = true;
          var bgNode = typeNode.children[0];
          var valueNode = typeNode.children[1];
          var label = typeNode.children[2];
          var aniNode = bgNode.children[0];
          if (aniNode) {
            aniNode.destroy();
            bgNode.removeAllChildren(true);
          }
          onsettle && TbnnAudio_1.default.getInstance().playResultAudio(this.model.userSex, value);
          aniNode = this.getBgAni(value);
          var font = this.getFont(value);
          var index = parseInt(value);
          var ScoreRate = this.getScoreRate(index);
          if (0 != ScoreRate && 1 != ScoreRate) {
            label.active = true;
            label.getComponent(cc.Label).string = "x" + ScoreRate;
          } else label.active = false;
          label.getComponent(cc.Label).font = font;
          aniNode && bgNode.addChild(aniNode);
          var frame = this.ui.atlas_resultValue.getSpriteFrame("bull_result_" + value);
          frame ? valueNode.getComponent(cc.Sprite).spriteFrame = frame : cc.error("show cardResultType value=" + value);
        }
      };
      View.prototype.hideAllResultType = function() {
        var effectNode;
        for (var viewSeatId in this.dict_results) {
          effectNode = this.dict_results[viewSeatId].children[0].children[0];
          if (effectNode) {
            effectNode.removeFromParent(true);
            effectNode.destroy();
          }
          this.dict_results[viewSeatId].active = false;
        }
      };
      View.prototype.getFont = function(resultType) {
        var font = null;
        switch (resultType) {
         case 0:
          break;

         case 10:
          font = this.ui.font_niuniu;
          break;

         case 12:
          font = this.ui.font_shunziniu;
          break;

         case 13:
          font = this.ui.font_tonghuaniu;
          break;

         case 14:
          font = this.ui.font_huluniu;
          break;

         case 15:
          font = this.ui.font_zhadnaniu;
          break;

         case 17:
          font = this.ui.font_wuhuaniu;
          break;

         case 18:
          font = this.ui.font_wuxiaoniu;
          break;

         default:
          font = this.ui.font_putongniu;
        }
        if (font) return font;
        return null;
      };
      View.prototype.getScoreRate = function(resultType) {
        var ScoreRate = null;
        switch (resultType) {
         case 0:
          ScoreRate = 1;
          break;

         case 1:
         case 2:
         case 3:
         case 4:
         case 5:
         case 6:
          ScoreRate = this.model._roomRuleInfo.t_niu_6;
          break;

         case 7:
          ScoreRate = this.model._roomRuleInfo.t_niu_7;
          break;

         case 8:
          ScoreRate = this.model._roomRuleInfo.t_niu_8;
          break;

         case 9:
          ScoreRate = this.model._roomRuleInfo.t_niu_9;
          break;

         case 10:
          ScoreRate = this.model._roomRuleInfo.t_niu_10;
          break;

         case 12:
          ScoreRate = this.model._roomRuleInfo.t_niu_12;
          break;

         case 13:
          ScoreRate = this.model._roomRuleInfo.t_niu_13;
          break;

         case 14:
          ScoreRate = this.model._roomRuleInfo.t_niu_14;
          break;

         case 15:
          ScoreRate = this.model._roomRuleInfo.t_niu_15;
          break;

         case 17:
          ScoreRate = this.model._roomRuleInfo.t_niu_17;
          break;

         case 18:
          ScoreRate = this.model._roomRuleInfo.t_niu_18;
          break;

         default:
          ScoreRate = 1;
        }
        if (ScoreRate) return ScoreRate;
        return null;
      };
      View.prototype.getBgAni = function(resultType) {
        var curPrefab = null;
        switch (resultType) {
         case 0:
          break;

         case 10:
          curPrefab = this.ui.prefab_niuniu_ani;
          break;

         case 12:
          curPrefab = this.ui.prefab_shunzi_ani;
          break;

         case 13:
          curPrefab = this.ui.prefab_tonghua_ani;
          break;

         case 14:
          curPrefab = this.ui.prefab_hulu_ani;
          break;

         case 15:
          curPrefab = this.ui.prefab_zhadanniu_ani;
          break;

         case 17:
          curPrefab = this.ui.prefab_wuhua_ani;
          break;

         case 18:
          curPrefab = this.ui.prefab_wuxiaoniu_ani;
          break;

         default:
          curPrefab = this.ui.prefab_Min_ani;
        }
        if (curPrefab) return cc.instantiate(curPrefab);
        return null;
      };
      View.prototype.getOneResult = function(viewSeatId) {
        var curNode = this.dict_results[viewSeatId];
        if (!curNode) {
          curNode = cc.instantiate(this.ui.prefab_oneResultType);
          curNode.parent = this.node;
          curNode.position = BullPosMgr_1.default.getInstance().getResultTypePos(viewSeatId);
          this.dict_results[viewSeatId] = curNode;
        }
        return curNode;
      };
      return View;
    }(BaseView_1.default);
    var Bull_cardResultTypeCtrl = function(_super) {
      __extends(Bull_cardResultTypeCtrl, _super);
      function Bull_cardResultTypeCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.atlas_resultValue = null;
        _this.prefab_Min_ani = null;
        _this.prefab_niuniu_ani = null;
        _this.prefab_hulu_ani = null;
        _this.prefab_shunzi_ani = null;
        _this.prefab_tonghua_ani = null;
        _this.prefab_wuhua_ani = null;
        _this.prefab_wuxiaoniu_ani = null;
        _this.prefab_zhadanniu_ani = null;
        _this.prefab_oneResultType = null;
        _this.font_shunziniu = null;
        _this.font_tonghuaniu = null;
        _this.font_zhadnaniu = null;
        _this.font_wuxiaoniu = null;
        _this.font_wuhuaniu = null;
        _this.font_putongniu = null;
        _this.font_niuniu = null;
        _this.font_huluniu = null;
        return _this;
      }
      Bull_cardResultTypeCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.atlas_resultValue.getSpriteFrame;
      };
      Bull_cardResultTypeCtrl.prototype.defineNetEvents = function() {
        this.n_events["onPrepare"] = this.onPrepare;
        this.n_events[BullConst.clientEvent.onTanPai] = this.onTanPai;
        this.n_events[BullConst.clientEvent.onSettle] = this.onSettle_bull;
        this.n_events["room.roomHandler.nextRound"] = this.room_roomHandler_nextRound;
        this.n_events["connector.entryHandler.enterRoom"] = this.onMyEnterRoom;
      };
      Bull_cardResultTypeCtrl.prototype.defineGlobalEvents = function() {
        this.g_events[GEventDef_1.default.bull_showResultType] = this.onShowResultType;
      };
      Bull_cardResultTypeCtrl.prototype.connectUi = function() {};
      Bull_cardResultTypeCtrl.prototype.start = function() {};
      Bull_cardResultTypeCtrl.prototype.onMyEnterRoom = function(msg) {
        var room = RoomMgr_1.default.getInstance();
        this.view.hideAllResultType();
      };
      Bull_cardResultTypeCtrl.prototype.onPrepare = function(msg) {
        msg.seatid == RoomMgr_1.default.getInstance().getMySeatId() && this.view.hideAllResultType();
      };
      Bull_cardResultTypeCtrl.prototype.onSettle_bull = function(msg) {
        var resultObj;
        if (null != this.model.delaerSeatId) for (var logicId in msg.dict_notTanPai) {
          var delaerviewId = RoomMgr_1.default.getInstance().getViewSeatId(this.model.delaerSeatId);
          this.view.showResultType(RoomMgr_1.default.getInstance().getViewSeatId(logicId), msg.dict_notTanPai[logicId].resultType, false);
          delaerviewId == logicId && msg.dict_notTanPai[logicId] && MpnnAudio_1.default.getInstance().playResultAudio(this.model.userSex, msg.dict_notTanPai[logicId].resultType);
        } else for (var logicId in msg.dict_notTanPai) {
          resultObj = msg.dict_notTanPai[logicId];
          if (resultObj) {
            this.view.showResultType(RoomMgr_1.default.getInstance().getViewSeatId(logicId), resultObj.resultType);
            TbnnAudio_1.default.getInstance().playResultAudio(this.model.userSex, resultObj.resultType);
          }
        }
      };
      Bull_cardResultTypeCtrl.prototype.onTanPai = function(msg) {
        console.log("onTanPai=== ", msg);
        var Room = RoomMgr_1.default.getInstance();
        var myViewSeatId = Room.getViewSeatId(msg.seatId);
        this.view.showResultType(myViewSeatId, msg.resultType);
      };
      Bull_cardResultTypeCtrl.prototype.room_roomHandler_nextRound = function() {
        this.view.hideAllResultType();
      };
      Bull_cardResultTypeCtrl.prototype.onShowResultType = function(msg) {
        console.log("全局显示卡牌类型结果= ", msg);
        var type = msg.resultType;
        var seatId = msg.seatId;
        this.view.showResultType(seatId, type);
      };
      __decorate([ property(cc.SpriteAtlas) ], Bull_cardResultTypeCtrl.prototype, "atlas_resultValue", void 0);
      __decorate([ property(cc.Prefab) ], Bull_cardResultTypeCtrl.prototype, "prefab_Min_ani", void 0);
      __decorate([ property(cc.Prefab) ], Bull_cardResultTypeCtrl.prototype, "prefab_niuniu_ani", void 0);
      __decorate([ property(cc.Prefab) ], Bull_cardResultTypeCtrl.prototype, "prefab_hulu_ani", void 0);
      __decorate([ property(cc.Prefab) ], Bull_cardResultTypeCtrl.prototype, "prefab_shunzi_ani", void 0);
      __decorate([ property(cc.Prefab) ], Bull_cardResultTypeCtrl.prototype, "prefab_tonghua_ani", void 0);
      __decorate([ property(cc.Prefab) ], Bull_cardResultTypeCtrl.prototype, "prefab_wuhua_ani", void 0);
      __decorate([ property(cc.Prefab) ], Bull_cardResultTypeCtrl.prototype, "prefab_wuxiaoniu_ani", void 0);
      __decorate([ property(cc.Prefab) ], Bull_cardResultTypeCtrl.prototype, "prefab_zhadanniu_ani", void 0);
      __decorate([ property(cc.Prefab) ], Bull_cardResultTypeCtrl.prototype, "prefab_oneResultType", void 0);
      __decorate([ property(cc.Font) ], Bull_cardResultTypeCtrl.prototype, "font_shunziniu", void 0);
      __decorate([ property(cc.Font) ], Bull_cardResultTypeCtrl.prototype, "font_tonghuaniu", void 0);
      __decorate([ property(cc.Font) ], Bull_cardResultTypeCtrl.prototype, "font_zhadnaniu", void 0);
      __decorate([ property(cc.Font) ], Bull_cardResultTypeCtrl.prototype, "font_wuxiaoniu", void 0);
      __decorate([ property(cc.Font) ], Bull_cardResultTypeCtrl.prototype, "font_wuhuaniu", void 0);
      __decorate([ property(cc.Font) ], Bull_cardResultTypeCtrl.prototype, "font_putongniu", void 0);
      __decorate([ property(cc.Font) ], Bull_cardResultTypeCtrl.prototype, "font_niuniu", void 0);
      __decorate([ property(cc.Font) ], Bull_cardResultTypeCtrl.prototype, "font_huluniu", void 0);
      Bull_cardResultTypeCtrl = __decorate([ ccclass ], Bull_cardResultTypeCtrl);
      return Bull_cardResultTypeCtrl;
    }(BaseCtrl_1.default);
    exports.default = Bull_cardResultTypeCtrl;
    cc._RF.pop();
  }, {
    "../../Games/Mpnn/BullMgr/MpnnAudio": "MpnnAudio",
    "../../Games/Tbnn/BullMgr/TbnnAudio": "TbnnAudio",
    "../../Plat/GameMgrs/GEventDef": "GEventDef",
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/GameMgrs/UserMgr": "UserMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "./BullPosMgr": "BullPosMgr"
  } ],
  Bull_cardsTest: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f8d88VkLs1CQ65LOlgdSfG1", "Bull_cardsTest");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var BullLogic;
    var BullConst;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        BullLogic = RoomMgr_1.default.getInstance().getLogic();
        BullConst = RoomMgr_1.default.getInstance().getDef();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {};
      return View;
    }(BaseView_1.default);
    var Bull_cardsTest = function(_super) {
      __extends(Bull_cardsTest, _super);
      function Bull_cardsTest() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_cards = null;
        _this.node_start = null;
        _this.editBox = null;
        return _this;
      }
      Bull_cardsTest.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Bull_cardsTest.prototype.defineNetEvents = function() {
        this.n_events[BullConst.clientEvent.onGiveCards] = this.onGiveCards;
      };
      Bull_cardsTest.prototype.start = function() {
        this.node.on(cc.Node.EventType.TOUCH_START, this.touchLimit, this);
        this.node_cards.on(cc.Node.EventType.TOUCH_START, this.clickAddCards, this);
        this.node_start.on(cc.Node.EventType.TOUCH_START, this.clickStart, this);
      };
      Bull_cardsTest.prototype.onGiveCards = function() {
        this.node.destroy();
      };
      Bull_cardsTest.prototype.touchLimit = function() {};
      Bull_cardsTest.prototype.clickAddCards = function() {
        var curJson = JSON.parse(this.editBox.string);
        console.log("最终传输的数据", curJson);
        BullLogic.getInstance().sendTestCards(curJson);
        this.node.destroy();
      };
      Bull_cardsTest.prototype.clickStart = function() {
        BullLogic.getInstance().sendTestStart();
        this.node.destroy();
      };
      __decorate([ property(cc.Node) ], Bull_cardsTest.prototype, "node_cards", void 0);
      __decorate([ property(cc.Node) ], Bull_cardsTest.prototype, "node_start", void 0);
      __decorate([ property(cc.EditBox) ], Bull_cardsTest.prototype, "editBox", void 0);
      Bull_cardsTest = __decorate([ ccclass ], Bull_cardsTest);
      return Bull_cardsTest;
    }(BaseCtrl_1.default);
    exports.default = Bull_cardsTest;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView"
  } ],
  Bull_chatMsgCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e53e1JR4S5BUa6MlkyEMPJK", "Bull_chatMsgCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BullPosMgr_1 = require("./BullPosMgr");
    var QuickAudioCfg_1 = require("../../Plat/CfgMgrs/QuickAudioCfg");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var UserMgr_1 = require("../../Plat/GameMgrs/UserMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.userSex = UserMgr_1.default.getInstance().getMySex();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          prefab_chatMsg: null,
          ExpressionAtlas: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.dict_chats = [];
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.prefab_chatMsg = ctrl.Prefab_ChatMsg;
        this.ui.ExpressionAtlas = ctrl.ExpressionAtlas;
      };
      View.prototype.addChatMsg = function(viewSeat, type, id) {
        var prefab_ChatMsg = this.dict_chats[viewSeat];
        if (!prefab_ChatMsg) {
          prefab_ChatMsg = cc.instantiate(this.ui.prefab_chatMsg);
          prefab_ChatMsg.parent = this.node;
          this.dict_chats[viewSeat] = prefab_ChatMsg;
        }
        prefab_ChatMsg.active = true;
        prefab_ChatMsg.stopAllActions();
        var pos = BullPosMgr_1.default.getInstance().getChatPos(viewSeat);
        prefab_ChatMsg.position = pos;
        var isLeft = pos.x < 0;
        var children = prefab_ChatMsg.children;
        var curContent;
        if (isLeft) {
          curContent = children[0].children;
          children[0].active = true;
          children[1].active = false;
        } else {
          curContent = children[1].children;
          children[0].active = false;
          children[1].active = true;
        }
        var background = curContent[0];
        var textNode = curContent[1];
        var imgNode = curContent[2];
        switch (type) {
         case 1:
          textNode.active = true;
          imgNode.active = false;
          var list = QuickAudioCfg_1.default.getInstance().getCfg();
          var value = list[id - 1].text;
          textNode.getComponent(cc.Label).string = value;
          background.width = textNode.width + 30;
          QuickAudioCfg_1.default.getInstance().play(id, this.model.userSex);
          break;

         case 2:
          textNode.active = false;
          imgNode.active = true;
          imgNode.getComponent(cc.Sprite).spriteFrame = this.ui.ExpressionAtlas.getSpriteFrame(id);
          background.width = 50;
        }
        this.addHideAct(prefab_ChatMsg);
      };
      View.prototype.addHideAct = function(curNode) {
        var act1 = cc.delayTime(2);
        var act2 = cc.callFunc(function() {
          curNode.active = false;
        }, this);
        curNode.runAction(cc.sequence(act1, act2));
      };
      return View;
    }(BaseView_1.default);
    var Bull_chatMsgCtrl = function(_super) {
      __extends(Bull_chatMsgCtrl, _super);
      function Bull_chatMsgCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.Prefab_ChatMsg = null;
        _this.ExpressionAtlas = null;
        return _this;
      }
      Bull_chatMsgCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Bull_chatMsgCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onRoomChat: this.onRoomChat
        };
      };
      Bull_chatMsgCtrl.prototype.defineGlobalEvents = function() {};
      Bull_chatMsgCtrl.prototype.connectUi = function() {};
      Bull_chatMsgCtrl.prototype.start = function() {};
      Bull_chatMsgCtrl.prototype.onRoomChat = function(msg) {
        var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(msg.seatid);
        this.view.addChatMsg(viewSeatId, msg.type, msg.id);
      };
      __decorate([ property({
        type: cc.Prefab,
        displayName: "Prefab_ChatMsg"
      }) ], Bull_chatMsgCtrl.prototype, "Prefab_ChatMsg", void 0);
      __decorate([ property({
        tooltip: "表情图集",
        type: cc.SpriteAtlas
      }) ], Bull_chatMsgCtrl.prototype, "ExpressionAtlas", void 0);
      Bull_chatMsgCtrl = __decorate([ ccclass ], Bull_chatMsgCtrl);
      return Bull_chatMsgCtrl;
    }(BaseCtrl_1.default);
    exports.default = Bull_chatMsgCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/CfgMgrs/QuickAudioCfg": "QuickAudioCfg",
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/GameMgrs/UserMgr": "UserMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "./BullPosMgr": "BullPosMgr"
  } ],
  Bull_cuopaiCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a37227N3xdPLqynB6pMo64t", "Bull_cuopaiCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GEventDef_1 = require("../../Plat/GameMgrs/GEventDef");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var C_attr = "_isMove";
    var ctrl;
    var BullConst;
    var BullLogic;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        BullConst = RoomMgr_1.default.getInstance().getDef();
        BullLogic = RoomMgr_1.default.getInstance().getLogic().getInstance();
        var visibleSize = cc.director.getVisibleSize();
        _this.w2 = visibleSize.width / 2;
        _this.h2 = visibleSize.height / 2;
        _this.waitPos = cc.p(.3 * -_this.w2, 1.2 * -_this.h2);
        _this.openAngle = 2.5;
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_cardsList: null,
          node_btn_close: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_cardsList = ctrl.node_cardsList;
        this.ui.node_btn_close = ctrl.node_btn_close;
      };
      View.prototype.initCardGroup = function(cardValueList, cb) {
        var loadNum = 0;
        this.list_cards = [];
        for (var i = 0; i < cardValueList.length; i++) this.createOneCard(i, cardValueList[i], function() {
          loadNum += 1;
          loadNum >= cardValueList.length && cb();
        });
      };
      View.prototype.createOneCard = function(index, cardValue, cb) {
        var _this = this;
        this.list_asserts || (this.list_asserts = []);
        var url = "Plat/GameRoomCommon/BigPoker/bull2_" + this.getSixValue(cardValue);
        cc.loader.loadRes(url, cc.SpriteFrame, function(err, assets) {
          if (err) cc.error(err); else {
            _this.list_asserts.push(assets);
            var curNode = _this.ui.node_cardsList.children[index];
            curNode.getComponent(cc.Sprite).spriteFrame = assets;
            curNode[C_attr] = false;
            _this.initCardPos(curNode);
            _this.list_cards[_this.ui.node_cardsList.children.indexOf(curNode)] = curNode;
            cb();
            cb = null;
          }
        });
      };
      View.prototype.doCardMoveIn = function(cb) {
        var cardsList = this.list_cards;
        for (var i = 0; i < cardsList.length; i++) 0 == i ? this.doMoveIn(cardsList[i], function() {
          cb();
        }) : this.doMoveIn(cardsList[i]);
      };
      View.prototype.resortCards = function() {
        var cardsList = this.list_cards;
        var minIndex = 2, oneAngle = this.model.openAngle, curAngle;
        for (var i = 0; i < cardsList.length; i++) if (i < minIndex) {
          curAngle = -(minIndex - i) * oneAngle;
          console.log("左边的角度", curAngle);
          this.doRotate(cardsList[i], curAngle, 0 == i);
        } else if (i == minIndex) ; else {
          curAngle = (i - minIndex) * oneAngle;
          console.log("右边的角度", curAngle);
          this.doRotate(cardsList[i], curAngle);
        }
      };
      View.prototype.doExit = function() {
        var _this = this;
        var curNode, isOpenAll = true;
        for (var i = 0; i < this.list_cards.length; i++) {
          curNode = this.list_cards[i];
          0 == i ? this.doMoveIn(curNode, function() {
            _this.doClearRotation();
          }) : this.doMoveIn(curNode);
        }
      };
      View.prototype.openTouch = function() {
        this.ui.node_cardsList.on(cc.Node.EventType.TOUCH_START, ctrl.onTouchStart, ctrl);
        this.ui.node_cardsList.on(cc.Node.EventType.TOUCH_MOVE, ctrl.onTouchMove, ctrl);
        this.ui.node_cardsList.on(cc.Node.EventType.TOUCH_END, ctrl.onTouchEnd, ctrl);
        this.ui.node_cardsList.on(cc.Node.EventType.TOUCH_CANCEL, ctrl.onTouchCancel, ctrl);
      };
      View.prototype.closeTouch = function() {
        this.ui.node_cardsList.off(cc.Node.EventType.TOUCH_START, ctrl.onTouchStart, ctrl);
        this.ui.node_cardsList.off(cc.Node.EventType.TOUCH_MOVE, ctrl.onTouchMove, ctrl);
        this.ui.node_cardsList.off(cc.Node.EventType.TOUCH_END, ctrl.onTouchEnd, ctrl);
        this.ui.node_cardsList.off(cc.Node.EventType.TOUCH_CANCEL, ctrl.onTouchCancel, ctrl);
      };
      View.prototype.getIsCuopaiDone = function() {
        var curNode, moveNum = 0;
        for (var i = 0; i < this.list_cards.length; i++) {
          curNode = this.list_cards[i];
          curNode[C_attr] && (moveNum += 1);
        }
        return moveNum >= 4;
      };
      View.prototype.clearCacheCards = function() {
        if (this.list_asserts && this.list_asserts.length > 0) {
          for (var i = 0; i < this.list_asserts.length; i++) cc.loader.releaseAsset(this.list_asserts[i]);
          this.list_asserts = null;
        }
      };
      View.prototype.doClearRotation = function() {
        var _this = this;
        var curNode, time = .3;
        for (var i = 0; i < this.list_cards.length; i++) {
          curNode = this.list_cards[i];
          var act1 = cc.rotateTo(time, 0);
          if (0 == i) {
            var act2 = cc.callFunc(function() {
              _this.doCardsExit();
            }, this);
            curNode.runAction(cc.sequence(act1, act2));
          } else curNode.runAction(act1);
        }
      };
      View.prototype.doCardsExit = function() {
        var curNode, time = .3;
        for (var i = 0; i < this.list_cards.length; i++) {
          curNode = this.list_cards[i];
          0 == i ? this.doMoveOut(curNode, function() {
            ctrl.onCuopaiEnd();
          }) : this.doMoveOut(curNode);
        }
      };
      View.prototype.doMoveOut = function(curNode, cb) {
        var time = .5;
        var act = cc.moveTo(time, cc.p(this.model.waitPos.x, -(this.model.h2 + curNode.height)));
        if (cb) {
          var act2 = cc.callFunc(cb, this);
          curNode.runAction(cc.sequence(act, act2));
        } else curNode.runAction(act);
      };
      View.prototype.doMoveIn = function(curNode, cb) {
        var time = .5;
        var act = cc.moveTo(time, this.model.waitPos);
        if (cb) {
          var act2 = cc.callFunc(cb, this);
          curNode.runAction(cc.sequence(act, act2));
        } else curNode.runAction(act);
      };
      View.prototype.doRotate = function(curNode, angle, isOpen) {
        var time = .5;
        var act1 = cc.rotateTo(time, angle);
        if (isOpen) {
          var act2 = cc.callFunc(this.openTouch, this);
          curNode.runAction(cc.sequence(act1, act2));
        } else curNode.runAction(act1);
      };
      View.prototype.initCardPos = function(cardNode) {
        cardNode.x = this.model.waitPos.x;
        cardNode.y = -(this.model.h2 + cardNode.height);
      };
      View.prototype.getSixValue = function(logicNum) {
        logicNum = parseInt(logicNum);
        var str = logicNum < 14 ? "0x0" : "0x";
        return str + logicNum.toString(16);
      };
      return View;
    }(BaseView_1.default);
    var Bull_cuopaiCtrl = function(_super) {
      __extends(Bull_cuopaiCtrl, _super);
      function Bull_cuopaiCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.node_cardsList = null;
        _this.node_btn_close = null;
        return _this;
      }
      Bull_cuopaiCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Bull_cuopaiCtrl.prototype.defineNetEvents = function() {
        this.n_events[BullConst.clientEvent.onProcess] = this.onProcess;
        this.n_events[BullConst.clientEvent.onSyncData] = this.onSyncData;
      };
      Bull_cuopaiCtrl.prototype.defineGlobalEvents = function() {
        this.g_events[GEventDef_1.default.bull_cuopai] = this.onStartCuopai;
        this.g_events[GEventDef_1.default.usersUpdated] = this.usersUpdated;
      };
      Bull_cuopaiCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.node_btn_close, this.node_btn_close_cb, "点击关闭搓牌");
      };
      Bull_cuopaiCtrl.prototype.start = function() {
        this.node.on(cc.Node.EventType.TOUCH_START, this.touchLimit, this);
      };
      Bull_cuopaiCtrl.prototype.finish = function() {
        var manager = cc.director.getCollisionManager();
        manager.enabled = false;
        _super.prototype.finish.call(this);
      };
      Bull_cuopaiCtrl.prototype.onProcess = function(msg) {
        switch (msg.process) {
         case BullConst.process.settle:
          this.finish();
        }
      };
      Bull_cuopaiCtrl.prototype.onSyncData = function() {
        this.finish();
      };
      Bull_cuopaiCtrl.prototype.usersUpdated = function() {
        this.finish();
      };
      Bull_cuopaiCtrl.prototype.onStartCuopai = function(msg) {
        var _this = this;
        var manager = cc.director.getCollisionManager();
        manager.enabled = true;
        this.view.initCardGroup(msg, function() {
          _this.startCuopai();
        });
      };
      Bull_cuopaiCtrl.prototype.onCuopaiEnd = function() {
        BullLogic.emit_cuopaiEnd(this.view.getIsCuopaiDone() ? 1 : 0);
        ctrl.finish();
      };
      Bull_cuopaiCtrl.prototype.touchLimit = function() {};
      Bull_cuopaiCtrl.prototype.node_btn_close_cb = function() {
        this.view.closeTouch();
        this.view.doExit();
      };
      Bull_cuopaiCtrl.prototype.onTouchStart = function(event) {
        var pos = event.touch.getLocation();
        this.checkTouch(pos);
      };
      Bull_cuopaiCtrl.prototype.onTouchMove = function(event) {
        var delta = event.touch.getDelta();
        if (this.touchCard) {
          this.touchCard.x += delta.x;
          this.touchCard.y += delta.y;
          this.touchCard[C_attr] = true;
        }
      };
      Bull_cuopaiCtrl.prototype.onTouchEnd = function(event) {
        this.touchCard = null;
        this.view.getIsCuopaiDone() && this.node_btn_close_cb();
      };
      Bull_cuopaiCtrl.prototype.onTouchCancel = function(event) {
        this.touchCard = null;
      };
      Bull_cuopaiCtrl.prototype.checkTouch = function(pos) {
        var cardList = this.view.list_cards, len = cardList.length, curNode, curPos, curRect;
        for (var i = len - 1; i >= 0; i--) {
          curNode = cardList[i];
          var isTouch = cc.Intersection.pointInPolygon(pos, curNode.getComponent(cc.Collider).world.points);
          if (isTouch) {
            this.touchCard = curNode;
            break;
          }
        }
      };
      Bull_cuopaiCtrl.prototype.startCuopai = function() {
        var _this = this;
        this.view.doCardMoveIn(function() {
          _this.view.resortCards();
        });
      };
      Bull_cuopaiCtrl.prototype.onDestroy = function() {
        this.view.clearCacheCards();
        _super.prototype.onDestroy.call(this);
      };
      __decorate([ property(cc.Node) ], Bull_cuopaiCtrl.prototype, "node_cardsList", void 0);
      __decorate([ property(cc.Node) ], Bull_cuopaiCtrl.prototype, "node_btn_close", void 0);
      Bull_cuopaiCtrl = __decorate([ ccclass ], Bull_cuopaiCtrl);
      return Bull_cuopaiCtrl;
    }(BaseCtrl_1.default);
    exports.default = Bull_cuopaiCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/GEventDef": "GEventDef",
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView"
  } ],
  Bull_readyCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5c2495qeblIvaz5NMVCECgo", "Bull_readyCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BullPosMgr_1 = require("./BullPosMgr");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var BullConst = null;
    var BullLogic = null;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        BullConst = RoomMgr_1.default.getInstance().getDef();
        BullLogic = RoomMgr_1.default.getInstance().getLogic().getInstance();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          sprite_oneReady: null
        };
        _this.node = null;
        _this.nodeConfig = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.dict_readys = {};
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.sprite_oneReady = ctrl.sprite_oneReady;
        this.nodeConfig = this.node.getChildByName("seats_" + RoomMgr_1.default.getInstance().getSeatCount());
      };
      View.prototype.setReady = function(viewSeatId) {
        var curNode = this.getOneReady(viewSeatId);
        curNode && (curNode.active = true);
      };
      View.prototype.hideReady = function(viewSeatId) {
        var curNode = this.getOneReady(viewSeatId);
        curNode && (curNode.active = false);
      };
      View.prototype.hideAll = function() {
        var curNode;
        for (var viewId in this.dict_readys) {
          curNode = this.dict_readys[viewId];
          curNode.active = false;
        }
      };
      View.prototype.initPrepare = function() {
        if (BullLogic.getIsMyWatcher()) return;
        console.log("强行刷新准备信息===", RoomMgr_1.default.getInstance().preparemap);
        var Room = RoomMgr_1.default.getInstance();
        for (var logicSeatId in Room.preparemap) {
          var viewId = Room.getViewSeatId(logicSeatId);
          var isPrepare = Room.preparemap[logicSeatId];
          isPrepare ? this.setReady(viewId) : this.dict_readys[viewId] && (this.dict_readys[viewId].active = false);
        }
      };
      View.prototype.getOneReady = function(viewSeatId) {
        var curNode = this.dict_readys[viewSeatId];
        if (!curNode) {
          curNode = new cc.Node();
          curNode.parent = this.node;
          curNode.addComponent(cc.Sprite).spriteFrame = this.ui.sprite_oneReady;
          curNode.position = BullPosMgr_1.default.getInstance().getSeatHeadPos(viewSeatId);
          this.dict_readys[viewSeatId] = curNode;
        }
        return curNode;
      };
      return View;
    }(BaseView_1.default);
    var Bull_readyCtrl = function(_super) {
      __extends(Bull_readyCtrl, _super);
      function Bull_readyCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.sprite_oneReady = null;
        return _this;
      }
      Bull_readyCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Bull_readyCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onPrepare: this.onPrepare,
          "connector.entryHandler.enterRoom": this.connector_entryHandler_enterRoom
        };
        this.n_events[BullConst.clientEvent.onProcess] = this.onProcess;
        this.n_events[BullConst.clientEvent.onMidEnter] = this.onMidEnter;
        this.n_events["onReEnterRoom"] = this.onReEnterRoom;
        this.n_events["onLeaveRoom"] = this.onLeaveRoom;
        this.n_events["room.roomHandler.nextRound"] = this.room_roomHandler_nextRound;
      };
      Bull_readyCtrl.prototype.defineGlobalEvents = function() {};
      Bull_readyCtrl.prototype.connectUi = function() {};
      Bull_readyCtrl.prototype.start = function() {};
      Bull_readyCtrl.prototype.onProcess = function(msg) {
        if (msg.process == BullConst.process.start) {
          console.log("游戏开始，清理准备");
          this.view.hideAll();
        } else msg.process == BullConst.process.settle || msg.process == BullConst.process.giveCards;
      };
      Bull_readyCtrl.prototype.onPrepare = function(msg) {
        console.log("onPrepare进入准备的 id= ", msg);
        var viewId = RoomMgr_1.default.getInstance().getViewSeatId(msg.seatid);
        this.view.setReady(viewId);
      };
      Bull_readyCtrl.prototype.onReEnterRoom = function(msg) {
        this.view.initPrepare();
      };
      Bull_readyCtrl.prototype.onLeaveRoom = function(msg) {
        var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(msg.seatid);
        this.view.hideReady(viewSeatId);
      };
      Bull_readyCtrl.prototype.room_roomHandler_nextRound = function() {
        this.view.initPrepare();
      };
      Bull_readyCtrl.prototype.connector_entryHandler_enterRoom = function(msg) {
        RoomMgr_1.default.getInstance().isGameStarted() ? this.view.hideAll() : this.view.initPrepare();
      };
      Bull_readyCtrl.prototype.onMidEnter = function() {
        this.view.hideAll();
      };
      __decorate([ property(cc.SpriteFrame) ], Bull_readyCtrl.prototype, "sprite_oneReady", void 0);
      Bull_readyCtrl = __decorate([ ccclass ], Bull_readyCtrl);
      return Bull_readyCtrl;
    }(BaseCtrl_1.default);
    exports.default = Bull_readyCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "./BullPosMgr": "BullPosMgr"
  } ],
  Bull_resultGoldCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f6eacnO5BlJPrPCr0xIuhKH", "Bull_resultGoldCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BullPosMgr_1 = require("./BullPosMgr");
    var GEventDef_1 = require("../../Plat/GameMgrs/GEventDef");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CONFIGS = {
      resultGoldUpH: 100,
      failFontSize: 25,
      winFontSize: 30
    };
    var ctrl;
    var BullConst;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        BullConst = RoomMgr_1.default.getInstance().getDef();
        var seatH = BullPosMgr_1.default.getInstance().getSeatH();
        _this.flyH = seatH + CONFIGS.winFontSize / 2;
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          font_winNumber: null,
          font_loseNumber: null,
          spriteframe_WinNunberbg: null,
          spriteframe_LoseNunberbg: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.dict_resultLbl = {};
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.font_winNumber = ctrl.font_winNumber;
        this.ui.font_loseNumber = ctrl.font_loseNumber;
        this.ui.spriteframe_WinNunberbg = ctrl.spriteframe_WinNunberbg;
        this.ui.spriteframe_LoseNunberbg = ctrl.spriteframe_LoseNunberbg;
      };
      View.prototype.showOneResultGold = function(viewSeatId, value) {
        var bgNode = this.getOneResultLbl(viewSeatId, value);
        if (bgNode) {
          value = parseInt(value);
          var targetNode = bgNode.children[0];
          var curLbl = targetNode.getComponent(cc.Label);
          curLbl["spacingX"] = 6;
          var spriteComp = bgNode.getComponent(cc.Sprite);
          if (value > 0) {
            value = "+" + value;
            curLbl.font = this.ui.font_winNumber;
            curLbl.fontSize = CONFIGS.winFontSize;
            spriteComp.spriteFrame = this.ui.spriteframe_WinNunberbg;
          } else {
            curLbl.font = this.ui.font_loseNumber;
            curLbl.fontSize = CONFIGS.failFontSize;
            spriteComp.spriteFrame = this.ui.spriteframe_LoseNunberbg;
          }
          curLbl.string = value;
          this.playResultGoldAni(bgNode);
        }
      };
      View.prototype.hideAll = function() {
        this.node.stopAllActions();
        var curNode;
        for (var viewSeatId in this.dict_resultLbl) {
          curNode = this.dict_resultLbl[viewSeatId];
          curNode.stopAllActions();
          curNode.active = false;
        }
      };
      View.prototype.getOneResultLbl = function(viewSeatId, value) {
        var bgNode = this.dict_resultLbl[viewSeatId];
        if (!bgNode) {
          bgNode = new cc.Node();
          bgNode.parent = this.node;
          bgNode.addComponent(cc.Sprite);
          bgNode.position = BullPosMgr_1.default.getInstance().getSeatPos(viewSeatId);
          bgNode.y -= this.model.flyH / 2;
          var lblNode = new cc.Node();
          lblNode.parent = bgNode;
          lblNode.addComponent(cc.Label).string = "";
          this.dict_resultLbl[viewSeatId] = bgNode;
        }
        return bgNode;
      };
      View.prototype.playResultGoldAni = function(bgNode) {
        bgNode.active = true;
        bgNode["_initPosY"] ? bgNode.y = bgNode["_initPosY"] : bgNode["_initPosY"] = bgNode.y;
        bgNode.scale = .2;
        var time1 = .5;
        var targetY = bgNode.y + this.model.flyH;
        var WinH = cc.director.getVisibleSize().height;
        targetY += targetY >= WinH / 2 ? -CONFIGS.winFontSize : 0;
        var act1 = cc.moveTo(time1, bgNode.x, targetY);
        var act2 = cc.scaleTo(time1, 1);
        bgNode.runAction(cc.spawn(act1, act2));
      };
      return View;
    }(BaseView_1.default);
    var Bull_resultGoldCtrl = function(_super) {
      __extends(Bull_resultGoldCtrl, _super);
      function Bull_resultGoldCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.font_winNumber = null;
        _this.font_loseNumber = null;
        _this.spriteframe_WinNunberbg = null;
        _this.spriteframe_LoseNunberbg = null;
        return _this;
      }
      Bull_resultGoldCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Bull_resultGoldCtrl.prototype.defineNetEvents = function() {
        this.n_events["onPrepare"] = this.onPrepare;
        this.n_events[BullConst.clientEvent.onSettle] = this.onSettle_bull;
        this.n_events[BullConst.clientEvent.onSyncData] = this.onSyncData;
        this.n_events[BullConst.clientEvent.onProcess] = this.onProcess;
      };
      Bull_resultGoldCtrl.prototype.defineGlobalEvents = function() {
        this.g_events[GEventDef_1.default.usersUpdated] = this.usersUpdated;
      };
      Bull_resultGoldCtrl.prototype.connectUi = function() {};
      Bull_resultGoldCtrl.prototype.start = function() {};
      Bull_resultGoldCtrl.prototype.onSettle_bull = function(msg) {
        var resultList = [];
        for (var logicId in msg.scoreInfo) resultList.push({
          viewSeatId: RoomMgr_1.default.getInstance().getViewSeatId(logicId),
          goldValue: msg.scoreInfo[logicId]
        });
        console.log("显示结算金币信息", resultList);
        var cb = function() {
          this.showGoldsResult(resultList);
        };
        var seq = cc.sequence(cc.delayTime(2), cc.callFunc(cb, this));
        this.node.runAction(seq);
      };
      Bull_resultGoldCtrl.prototype.onPrepare = function(msg) {
        msg.seatid == RoomMgr_1.default.getInstance().getMySeatId() && this.view.hideAll();
      };
      Bull_resultGoldCtrl.prototype.usersUpdated = function() {
        this.view.hideAll();
      };
      Bull_resultGoldCtrl.prototype.onSyncData = function() {
        this.view.hideAll();
      };
      Bull_resultGoldCtrl.prototype.onProcess = function(msg) {
        msg.process == BullConst.process.start && this.view.hideAll();
      };
      Bull_resultGoldCtrl.prototype.showGoldsResult = function(dataList) {
        var i, data;
        for (i = 0; i < dataList.length; i++) {
          data = dataList[i];
          this.view.showOneResultGold(data.viewSeatId, data.goldValue);
        }
      };
      __decorate([ property({
        type: cc.Font,
        tooltip: "赢数字"
      }) ], Bull_resultGoldCtrl.prototype, "font_winNumber", void 0);
      __decorate([ property({
        type: cc.Font,
        tooltip: "输数字"
      }) ], Bull_resultGoldCtrl.prototype, "font_loseNumber", void 0);
      __decorate([ property({
        type: cc.SpriteFrame,
        tooltip: "赢背景"
      }) ], Bull_resultGoldCtrl.prototype, "spriteframe_WinNunberbg", void 0);
      __decorate([ property({
        type: cc.SpriteFrame,
        tooltip: "输背景"
      }) ], Bull_resultGoldCtrl.prototype, "spriteframe_LoseNunberbg", void 0);
      Bull_resultGoldCtrl = __decorate([ ccclass ], Bull_resultGoldCtrl);
      return Bull_resultGoldCtrl;
    }(BaseCtrl_1.default);
    exports.default = Bull_resultGoldCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/GEventDef": "GEventDef",
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "./BullPosMgr": "BullPosMgr"
  } ],
  Bull_voiceCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "56ed3jmSOBDr7mTaV7Y9pE1", "Bull_voiceCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BullPosMgr_1 = require("./BullPosMgr");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AUDIOSTATE = {
      speak: 1,
      nothing: 3,
      listen: 2
    };
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.voice = null;
        _this.ui = {
          prefab_voice: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.prefab_voice = ctrl.prefab_voice;
      };
      View.prototype.addVoice = function(viewSeat, state) {
        this.dict_flagImg || (this.dict_flagImg = {});
        if (0 == viewSeat) return;
        var curNode = this.dict_flagImg[viewSeat];
        if (!curNode) {
          curNode = cc.instantiate(this.ui.prefab_voice);
          var pos = BullPosMgr_1.default.getInstance().getSeatVoicePos(viewSeat);
          pos.x -= curNode.width / 2;
          pos.y += curNode.height / 2;
          curNode.position = pos;
          this.node.addChild(curNode);
          this.dict_flagImg[viewSeat] = curNode;
        }
        this.checkState(curNode, state);
      };
      View.prototype.checkState = function(curNode, state) {
        if (state == AUDIOSTATE.speak) {
          curNode.children[0].active = true;
          curNode.children[1].active = false;
          curNode.children[2].active = false;
        } else if (state == AUDIOSTATE.nothing) {
          curNode.children[0].active = false;
          curNode.children[1].active = false;
          curNode.children[2].active = true;
        } else if (state == AUDIOSTATE.listen) {
          curNode.children[0].active = false;
          curNode.children[1].active = true;
          curNode.children[2].active = false;
        }
      };
      View.prototype.deleteVoice = function(viewSeatId) {
        if (this.dict_flagImg[viewSeatId]) {
          this.dict_flagImg[viewSeatId].destroy();
          delete this.dict_flagImg[viewSeatId];
        }
      };
      return View;
    }(BaseView_1.default);
    var Bull_voiceCtrl = function(_super) {
      __extends(Bull_voiceCtrl, _super);
      function Bull_voiceCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.seatID = 0;
        _this.prefab_voice = null;
        return _this;
      }
      Bull_voiceCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Bull_voiceCtrl.prototype.defineNetEvents = function() {
        this.n_events["onVoiceStateChanged"] = this.onVoiceStateChanged;
        this.n_events["onEnterRoom"] = this.onEnterRoom;
        this.n_events["connector.entryHandler.enterRoom"] = this.onEnterRoom1;
        this.n_events["onLeaveRoom"] = this.onLeaveRoom;
      };
      Bull_voiceCtrl.prototype.defineGlobalEvents = function() {};
      Bull_voiceCtrl.prototype.connectUi = function() {};
      Bull_voiceCtrl.prototype.start = function() {};
      Bull_voiceCtrl.prototype.onVoiceStateChanged = function(msg) {
        console.log("更改了声音显示=", msg);
        this.updateVoice(msg.seatid);
      };
      Bull_voiceCtrl.prototype.onEnterRoom = function(msg) {
        this.updateVoice(msg.seatid);
      };
      Bull_voiceCtrl.prototype.onEnterRoom1 = function(msg) {
        for (var seatId in msg.voicestates) this.updateVoice(seatId);
      };
      Bull_voiceCtrl.prototype.onLeaveRoom = function(msg) {
        var seatid = msg.seatid;
        var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(seatid);
        this.view.deleteVoice(viewSeatId);
      };
      Bull_voiceCtrl.prototype.updateVoice = function(logicSeatId) {
        var voiceState = RoomMgr_1.default.getInstance().getVoiceState(logicSeatId);
        var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(logicSeatId);
        this.view.addVoice(viewSeatId, voiceState);
      };
      __decorate([ property({
        tooltip: "voice",
        type: cc.Prefab
      }) ], Bull_voiceCtrl.prototype, "prefab_voice", void 0);
      Bull_voiceCtrl = __decorate([ ccclass ], Bull_voiceCtrl);
      return Bull_voiceCtrl;
    }(BaseCtrl_1.default);
    exports.default = Bull_voiceCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "./BullPosMgr": "BullPosMgr"
  } ],
  BunchInfoMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e005c09XWZC6Ivm85yM00L5", "BunchInfoMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var viewLogicSeatConvertMgr_1 = require("./viewLogicSeatConvertMgr");
    var UserMgr_1 = require("./UserMgr");
    var GameCateCfg_1 = require("../CfgMgrs/GameCateCfg");
    var RoomOptionCfg_1 = require("../CfgMgrs/RoomOptionCfg");
    var BunchInfoMgr = function(_super) {
      __extends(BunchInfoMgr, _super);
      function BunchInfoMgr() {
        var _this = _super.call(this) || this;
        _this.bunchInfo = null;
        _this.memberlist = null;
        _this.plazzaFlag = false;
        _this.gameid = null;
        _this.roomOption = null;
        _this.roomName = null;
        _this.roomid = null;
        _this.resetData();
        _this.routes = {
          "http.reqGambleRecord": _this.http_reqGambleRecord,
          "http.reqUsers": _this.http_reqUsers
        };
        viewLogicSeatConvertMgr_1.default.getInstance();
        return _this;
      }
      BunchInfoMgr.prototype.http_reqUsers = function(msg) {
        if (null != this.memberlist && null != this.memberlist.length) for (var user in msg.users) {
          var userdata = msg.users[user];
          for (var i = 0; i < this.memberlist.length; i++) {
            if (!this.memberlist[i]) continue;
            if (this.memberlist[i].id == userdata.id) {
              this.memberlist[i] = userdata;
              break;
            }
          }
        }
      };
      BunchInfoMgr.prototype.resetData = function() {
        this.bunchInfo = null;
        this.memberlist = null;
        this.plazzaFlag = false;
        this.roomOption = null;
        this.roomName = null;
        viewLogicSeatConvertMgr_1.default.getInstance().clear();
      };
      BunchInfoMgr.prototype.clear = function() {
        delete BunchInfoMgr._instance;
        BunchInfoMgr._instance = null;
        BunchInfoMgr.getInstance();
        viewLogicSeatConvertMgr_1.default.getInstance().clear();
      };
      BunchInfoMgr.prototype.setBunchInfo = function(data) {
        this.bunchInfo = data;
      };
      BunchInfoMgr.prototype.getBunchInfo = function() {
        return this.bunchInfo;
      };
      BunchInfoMgr.prototype.setMembelist = function(data) {
        if (this.memberlist) for (var i = 0; i < data.length; i++) data[i] && (this.memberlist[i] = data[i]); else this.memberlist = data;
      };
      BunchInfoMgr.prototype.getMembelist = function() {
        return this.memberlist;
      };
      BunchInfoMgr.prototype.getMyLogicSeatId = function() {
        var myUsrId = UserMgr_1.default.getInstance().getUid();
        var mySeatID;
        for (var i = 0; i < this.memberlist.length; i++) {
          if (!this.memberlist[i]) continue;
          if (this.memberlist[i].id == myUsrId) {
            mySeatID = i;
            break;
          }
        }
        return mySeatID;
      };
      BunchInfoMgr.prototype.getUidBySeatId = function(logicSeatId) {
        return this.memberlist[logicSeatId].id;
      };
      BunchInfoMgr.prototype.getGameId = function() {
        return this.gameid;
      };
      BunchInfoMgr.prototype.setRoomId = function(data) {
        this.roomid = data;
      };
      BunchInfoMgr.prototype.getRoomId = function() {
        return this.roomid;
      };
      BunchInfoMgr.prototype.http_reqGambleRecord = function(msg) {
        console.log("http_reqGambleRecord=", msg);
        this.gameid = msg.gameid;
        this.bunchInfo = msg.bunchInfo;
        this.memberlist = msg.MembeListr;
        this.roomid = msg.roomid;
        var mySeatID = this.getMyLogicSeatId();
        viewLogicSeatConvertMgr_1.default.getInstance().setMySeatId(parseInt(mySeatID), msg.bunchInfo.seatcount);
      };
      BunchInfoMgr.prototype.reqMatchGameId = function(recordcode) {
        var msg = {
          recordcode: recordcode
        };
        this.send_msg("http.reqMatchGameId", msg);
      };
      BunchInfoMgr.prototype.reqGambleRecord = function(bunchid) {
        this.plazzaFlag = true;
        var info = {
          bunchid: bunchid
        };
        this.send_msg("http.reqGambleRecord", info);
      };
      BunchInfoMgr.prototype.getplazzaFlag = function() {
        return this.plazzaFlag;
      };
      BunchInfoMgr.prototype.getSeatCount = function() {
        return this.bunchInfo.seatcount;
      };
      BunchInfoMgr.prototype.getRoomOption = function() {
        return this.roomOption;
      };
      BunchInfoMgr.prototype.getRoomName = function() {
        return this.roomName;
      };
      BunchInfoMgr.prototype.showFinalSettle = function(gameid) {
        var ucfirst = function(str) {
          var str = str.toLowerCase();
          str = str.replace(/\b\w+\b/g, function(word) {
            return word.substring(0, 1).toUpperCase() + word.substring(1);
          });
          return str;
        };
        var catecfg = GameCateCfg_1.default.getInstance().getGameById(gameid);
        var gamecode = catecfg.code;
        var upper = ucfirst(gamecode);
        this.roomOption = RoomOptionCfg_1.default.getInstance().getRoomDescToString(gameid, this.bunchInfo.roomValue);
        this.roomName = catecfg.name;
        var resname = "GameStatistics/" + gamecode + "/" + upper + "FinalSettle";
        console.log("资源名字=", resname, catecfg, this.roomOption);
        cc.loader.loadRes(resname, function(err, prefab) {
          if (err) cc.error(err); else {
            var prefabNode = cc.instantiate(prefab);
            prefabNode.parent = cc.director.getScene();
            var prefabComp = null;
            var winSize = cc.director.getVisibleSize();
            prefabNode.position = cc.p(winSize.width / 2, winSize.height / 2);
          }
        });
      };
      BunchInfoMgr.getInstance = function() {
        this._instance || (this._instance = new BunchInfoMgr());
        return this._instance;
      };
      return BunchInfoMgr;
    }(BaseMgr_1.default);
    exports.default = BunchInfoMgr;
    cc._RF.pop();
  }, {
    "../CfgMgrs/GameCateCfg": "GameCateCfg",
    "../CfgMgrs/RoomOptionCfg": "RoomOptionCfg",
    "../Libs/BaseMgr": "BaseMgr",
    "./UserMgr": "UserMgr",
    "./viewLogicSeatConvertMgr": "viewLogicSeatConvertMgr"
  } ],
  Button_middle: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "60a1chQ2HNMkLqHaTTP2bJO", "Button_middle");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var ClubMgr_1 = require("../../GameMgrs/ClubMgr");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var GameFreeMgr_1 = require("../../GameMgrs/GameFreeMgr");
    var GameCateCfg_1 = require("../../CfgMgrs/GameCateCfg");
    var ShareMgr_1 = require("../../GameMgrs/ShareMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.gameList = null;
        _this.isShare = null;
        _this.gameList = GameCateCfg_1.default.getInstance().getGames();
        _this.isShare = ShareMgr_1.default.getInstance().getCheckDailyShare();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_createRoom: ctrl.CreateRoom,
          btn_joinRoom: ctrl.JoinRoom,
          btn_club: ctrl.Club,
          btn_match: ctrl.Match,
          markFree: ctrl.markFree,
          btn_share: ctrl.btn_share
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.markFree.active = false;
        this.showGameFree();
      };
      View.prototype.showGameFree = function() {
        var games = this.model.gameList;
        for (var i = 0; i < games.length; i++) if (GameFreeMgr_1.default.getInstance().isFree(games[i].id)) {
          this.ui.markFree.active = true;
          return;
        }
      };
      return View;
    }(BaseView_1.default);
    var NodeRightCtrl = function(_super) {
      __extends(NodeRightCtrl, _super);
      function NodeRightCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.CreateRoom = null;
        _this.markFree = null;
        _this.JoinRoom = null;
        _this.Club = null;
        _this.btn_share = null;
        _this.Match = null;
        return _this;
      }
      NodeRightCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      NodeRightCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqGameFreeList": this.http_reqGameFreeList
        };
      };
      NodeRightCtrl.prototype.defineGlobalEvents = function() {};
      NodeRightCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.btn_createRoom, this.CreateRoom_cb, "点击创建房间");
        this.connect(G_UiType.button, this.ui.btn_joinRoom, this.JoinRoomBtn_cb, "点击加入房间");
        this.connect(G_UiType.button, this.ui.btn_club, this.Clud_cb, "点击茶馆");
        this.connect(G_UiType.button, this.ui.btn_match, this.Match_cb, "点击比赛");
        this.connect(G_UiType.button, this.ui.btn_share, this.btn_shareCb, "点击分享");
      };
      NodeRightCtrl.prototype.start = function() {};
      NodeRightCtrl.prototype.http_reqGameFreeList = function() {
        this.view.showGameFree();
      };
      NodeRightCtrl.prototype.JoinRoomBtn_cb = function(event) {
        this.start_sub_module(G_MODULE.joinRoom);
      };
      NodeRightCtrl.prototype.CreateRoom_cb = function(event) {
        this.start_sub_module(G_MODULE.createRoom);
      };
      NodeRightCtrl.prototype.Match_cb = function(event) {
        FrameMgr_1.default.getInstance().showTips("暂未开放，敬请期待", null, 35, cc.color(0, 255, 0), cc.p(0, 0), "Arial", 1e3);
      };
      NodeRightCtrl.prototype.Clud_cb = function(event) {
        var bolOpen = ClubMgr_1.default.getInstance().club_enter;
        bolOpen ? this.start_sub_module(G_MODULE.ClubLobby) : this.start_sub_module(G_MODULE.ClubSeek);
      };
      NodeRightCtrl.prototype.btn_shareCb = function() {
        ShareMgr_1.default.getInstance().sendReqCheckDailyShare();
        this.start_sub_module(G_MODULE.ShareTip);
      };
      __decorate([ property({
        tooltip: "创建房间按钮",
        type: cc.Node
      }) ], NodeRightCtrl.prototype, "CreateRoom", void 0);
      __decorate([ property({
        tooltip: "限时免费角标",
        type: cc.Node
      }) ], NodeRightCtrl.prototype, "markFree", void 0);
      __decorate([ property({
        tooltip: "加入房间按钮",
        type: cc.Node
      }) ], NodeRightCtrl.prototype, "JoinRoom", void 0);
      __decorate([ property({
        tooltip: "茶馆",
        type: cc.Node
      }) ], NodeRightCtrl.prototype, "Club", void 0);
      __decorate([ property({
        tooltip: "分享",
        type: cc.Node
      }) ], NodeRightCtrl.prototype, "btn_share", void 0);
      __decorate([ property({
        tooltip: "比赛",
        type: cc.Node
      }) ], NodeRightCtrl.prototype, "Match", void 0);
      NodeRightCtrl = __decorate([ ccclass ], NodeRightCtrl);
      return NodeRightCtrl;
    }(BaseCtrl_1.default);
    exports.default = NodeRightCtrl;
    cc._RF.pop();
  }, {
    "../../CfgMgrs/GameCateCfg": "GameCateCfg",
    "../../GameMgrs/ClubMgr": "ClubMgr",
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/GameFreeMgr": "GameFreeMgr",
    "../../GameMgrs/ShareMgr": "ShareMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  CharMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b5b90NZm0JOwK57F3Te5Ji0", "CharMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var CharMgr = function(_super) {
      __extends(CharMgr, _super);
      function CharMgr() {
        var _this = _super.call(this) || this;
        _this.routes = null;
        _this.ChatText = null;
        _this.uid = null;
        _this.routes = {};
        return _this;
      }
      CharMgr.prototype.sendText = function(msg) {
        this.send_msg("http.reqChat", msg);
      };
      CharMgr.getInstance = function() {
        this._instance || (this._instance = new CharMgr());
        return this._instance;
      };
      return CharMgr;
    }(BaseMgr_1.default);
    exports.default = CharMgr;
    cc._RF.pop();
  }, {
    "../Libs/BaseMgr": "BaseMgr"
  } ],
  ChatFillterMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "112b2wXoPJMhZGJLle1wceM", "ChatFillterMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var ChatFillterMgr = function(_super) {
      __extends(ChatFillterMgr, _super);
      function ChatFillterMgr() {
        var _this = _super.call(this) || this;
        _this.rootNode = {};
        _this.rootNode = _this.createNode("R");
        _this.routes = {
          "http.reqFilterWords": _this.http_reqFilterWords
        };
        return _this;
      }
      ChatFillterMgr.getInstance = function() {
        this._instance || (this._instance = new ChatFillterMgr());
        return this._instance;
      };
      ChatFillterMgr.prototype.http_reqFilterWords = function(msg) {
        console.log("http_reqFilterWords", msg);
        this.init(msg.result);
      };
      ChatFillterMgr.prototype.reqFilterWords = function() {
        this.send_msg("http.reqFilterWords");
      };
      ChatFillterMgr.prototype.createNode = function(c, flag, nodes) {
        void 0 === c && (c = "");
        void 0 === flag && (flag = 0);
        void 0 === nodes && (nodes = new Array());
        var node = new Array();
        node["c"] = c;
        node["flag"] = flag;
        node["nodes"] = nodes;
        return node;
      };
      ChatFillterMgr.prototype.init = function(filterData) {
        if (null != filterData) {
          var max = filterData.length, curIndex = 0;
          for (var i = 0; i < max; i++) {
            var v = filterData[i];
            var chars = this.getCharArray(v);
            chars.length > 0 && this.insertNode(this.rootNode, chars, 0);
          }
        }
      };
      ChatFillterMgr.prototype.insertNode = function(node, cs, index) {
        var n = this.findNode(node, cs[index]);
        if (null == n) {
          n = this.createNode(cs[index]);
          node.nodes.push(n);
        }
        index == cs.length - 1 && (n.flag = 1);
        index++;
        index <= cs.length && this.insertNode(n, cs, index);
      };
      ChatFillterMgr.prototype.findNode = function(node, c) {
        var nodes = node.nodes, rn = null;
        if (null != nodes) {
          var count = nodes.length;
          if (null != count) for (var i = 0; i < count; i++) {
            var v = nodes[i];
            if (v.c == c) {
              rn = v;
              break;
            }
          }
        }
        return rn;
      };
      ChatFillterMgr.prototype.getCharArray = function(str) {
        var array = new Array();
        var len = str.length;
        while (str) {
          var fontUTF = str.charCodeAt(0);
          if (null == fontUTF) break;
          if (fontUTF > 127) {
            var tmp = str.substring(0, 1);
            array.push(tmp);
            str = str.substring(1, len);
          } else {
            var tmp = str.substring(0, 1);
            array.push(tmp);
            str = str.substring(1, len);
          }
        }
        return array;
      };
      ChatFillterMgr.prototype.warningStrGsub = function(inputStr) {
        var chars = this.getCharArray(inputStr), index = 0, node = this.rootNode, word = new Array();
        while (chars.length - 1 >= index) {
          " " != chars[index] && (node = this.findNode(node, chars[index]));
          if (null == node) {
            index -= word.length;
            node = this.rootNode;
            word = new Array();
          } else if (1 == node.flag) {
            word.push(index);
            var count_1 = word.length;
            for (var i = 0; i < count_1; i++) {
              var v = word[i];
              chars[v] = "*";
            }
            node = this.rootNode;
            word = new Array();
          } else word.push(index);
          index++;
        }
        var str = "", count = chars.length;
        for (var i = 0; i < count; i++) {
          var v = chars[i];
          str += v;
        }
        return str;
      };
      ChatFillterMgr.prototype.isWarningInPutStr = function(inputStr) {
        var chars = this.getCharArray(inputStr), index = 0, node = this.rootNode, word = new Array();
        while (chars.length - 1 >= index) {
          " " != chars[index] && (node = this.findNode(node, chars[index]));
          if (null == node) {
            index -= word.length;
            node = this.rootNode;
            word = new Array();
          } else {
            if (1 == node.flag) return true;
            word.push(index);
          }
          index += 1;
        }
        return false;
      };
      ChatFillterMgr.prototype.isEmojiCharacter = function(substring) {
        for (var i = 0; i < substring.length; i++) {
          var hs = substring.charCodeAt(i);
          if (55296 <= hs && hs <= 56319) {
            if (substring.length > 1) {
              var ls = substring.charCodeAt(i + 1);
              var uc = 1024 * (hs - 55296) + (ls - 56320) + 65536;
              if (118784 <= uc && uc <= 128895) return true;
            }
          } else if (substring.length > 1) {
            var ls = substring.charCodeAt(i + 1);
            if (8419 == ls) return true;
          } else {
            if (8448 <= hs && hs <= 10239) return true;
            if (11013 <= hs && hs <= 11015) return true;
            if (10548 <= hs && hs <= 10549) return true;
            if (12951 <= hs && hs <= 12953) return true;
            if (169 == hs || 174 == hs || 12349 == hs || 12336 == hs || 11093 == hs || 11036 == hs || 11035 == hs || 11088 == hs) return true;
          }
        }
      };
      return ChatFillterMgr;
    }(BaseMgr_1.default);
    exports.default = ChatFillterMgr;
    cc._RF.pop();
  }, {
    "../Libs/BaseMgr": "BaseMgr"
  } ],
  ClubChatMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c78df4Gq4hKpLOVh3mr6qgZ", "ClubChatMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var CLUB_CHAT_TYPE = cc.Enum({
      TYPE_LABEL: 0,
      TYPE_BLEND: 1,
      TYPE_VOICE: 2,
      TYPE_ROOM_ENTER: 3,
      TYPE_ROOM_MODIFICATION: 4
    });
    window["CLUB_CHAT_TYPE"] = CLUB_CHAT_TYPE;
    var ClubChatMgr = function(_super) {
      __extends(ClubChatMgr, _super);
      function ClubChatMgr() {
        var _this = _super.call(this) || this;
        _this.club_id = null;
        _this.club_chat = {};
        _this.club_web = null;
        _this.club_url = "";
        _this.club_chat_max = 40;
        _this.routes = null;
        _this.club_id = -1;
        _this.club_url = "";
        _this.club_chat = {};
        _this.routes = {
          "http.reqWSUrl": _this.http_reqWSUrl,
          webSocketOpen: _this.webSocketOpen,
          "ws.reqOnConnect": _this.ws_reqOnConnect,
          "ws.reqSendClubChat": _this.ws_reqSendClubChat,
          "ws.onClubChat": _this.ws_onClubChat
        };
        return _this;
      }
      ClubChatMgr.prototype.http_reqWSUrl = function(msg) {
        console.log("http_reqWSUrl");
        if ("" == msg) return;
        "" != this.club_url && this.club_url != msg + "/" && this.close_websocket(this.club_url);
        this.club_url = msg + "/";
        this.start_websocket(this.club_url);
      };
      ClubChatMgr.prototype.closeSocket = function() {
        "" != this.club_url && this.close_websocket(this.club_url);
        this.club_url = "";
      };
      ClubChatMgr.prototype.webSocketOpen = function() {
        console.log("webSocketOpen");
        this.reqOnConnect();
      };
      ClubChatMgr.prototype.ws_reqOnConnect = function(msg) {
        console.log("ws_reqOnConnect");
      };
      ClubChatMgr.prototype.ws_reqSendClubChat = function() {
        console.log("ws_reqSendClubChat");
      };
      ClubChatMgr.prototype.ws_onClubChat = function(msg) {
        console.log("ws_onClubChatroute", msg);
        null == this.club_chat[msg.clubid] && (this.club_chat[msg.clubid] = new Array());
        msg.type == CLUB_CHAT_TYPE.TYPE_ROOM_MODIFICATION ? this.refreshChatStrip(msg) : this.club_chat[msg.clubid].push(msg);
        this.club_chat[msg.clubid].length > this.club_chat_max && this.club_chat[msg.clubid].splice(0, 1);
      };
      ClubChatMgr.prototype.reqWSUrl = function() {
        this.send_msg("http.reqWSUrl");
      };
      ClubChatMgr.prototype.reqOnConnect = function() {
        var info = {
          url: this.club_url
        };
        this.send_msg("ws.reqOnConnect", info);
      };
      ClubChatMgr.prototype.reqSendClubChat = function(chat) {
        var info = {
          url: this.club_url,
          clubid: chat.club_id,
          type: chat.type,
          text: chat.text
        };
        this.send_msg("ws.reqSendClubChat", info);
      };
      ClubChatMgr.prototype.getClubChat = function(id) {
        null == this.club_chat[id] && (this.club_chat[id] = new Array());
        return this.club_chat[id];
      };
      ClubChatMgr.prototype.getClubChatMax = function() {
        return this.club_chat_max;
      };
      ClubChatMgr.prototype.refreshChatStrip = function(msg) {
        var list = this.club_chat[msg.clubid], count = list.length;
        if (null == count) return;
        for (var i = 0; i < count; i++) {
          var data = list[i];
          if (data.type == CLUB_CHAT_TYPE.TYPE_ROOM_ENTER) {
            var room = data.room_data;
            if (room.id == msg.room_data.id) {
              room.state = msg.room_data.state;
              if (1 != msg.room_data.state) {
                this.club_chat[msg.clubid].splice(i, 1);
                break;
              }
              room.count = msg.room_data.count;
              room.round = msg.room_data.round;
            }
          }
        }
      };
      ClubChatMgr.getInstance = function() {
        this._instance || (this._instance = new ClubChatMgr());
        return this._instance;
      };
      return ClubChatMgr;
    }(BaseMgr_1.default);
    exports.default = ClubChatMgr;
    cc._RF.pop();
  }, {
    "../Libs/BaseMgr": "BaseMgr"
  } ],
  ClubGameMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "77e4aQsshlBp6cwYY1hgwVd", "ClubGameMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var ClubGameMgr = function(_super) {
      __extends(ClubGameMgr, _super);
      function ClubGameMgr() {
        var _this = _super.call(this) || this;
        _this.club_id = null;
        _this.gameList = {};
        _this.routes = null;
        _this.club_enter = false;
        _this.club_change_list = {};
        _this.club_id = -1;
        _this.gameList = {};
        _this.routes = {
          "http.onClubGame": _this.http_onClubGame,
          "http.reqClubGameList": _this.http_reqClubGameList
        };
        return _this;
      }
      ClubGameMgr.prototype.onGameCreateEvent = function(msg) {
        var data = {
          id: msg.id,
          name: msg.name,
          type: msg.type,
          pay: msg.pay,
          mCount: msg.mCount,
          mMax: msg.mMax,
          time: msg.time,
          round: msg.round
        };
        this.gameList.splice(0, 0, data);
      };
      ClubGameMgr.prototype.onGameColseEvent = function(msg) {
        this.removeClubGame(msg.id);
      };
      ClubGameMgr.prototype.onGameRemoveEvent = function(msg) {
        var data = this.getClubGameData(msg.id);
        data.mCount = msg.mCount;
      };
      ClubGameMgr.prototype.http_onClubGame = function(msg) {
        var data = msg.states;
        switch (data.state) {
         case CLUB_GAME_STATE.CREATE:
          this.onGameCreateEvent(data);
          break;

         case CLUB_GAME_STATE.COLSE:
          this.onGameColseEvent(data);
          break;

         case CLUB_GAME_STATE.REMOVE:
          this.onGameRemoveEvent(data);
        }
      };
      ClubGameMgr.prototype.http_reqClubGameList = function(msg) {
        console.log("ClubMember");
        console.dir(msg);
        null == this.gameList.length ? this.gameList = msg.list : this.gameList = this.gameList.concat(msg.list);
      };
      ClubGameMgr.prototype.getClubGameList = function() {
        return this.gameList;
      };
      ClubGameMgr.prototype.getClubGameData = function(id) {
        var count = this.gameList.length;
        for (var i = 0; i < count; i++) {
          var data = this.gameList[i];
          if (id == data.id) return data;
        }
        return null;
      };
      ClubGameMgr.prototype.removeClubGame = function(room_id) {
        var room_list = this.gameList, count = room_list.length;
        for (var i = 0; i < count; i++) {
          var data = room_list[i];
          if (room_id == data.id) {
            room_list.splice(i, 1);
            break;
          }
        }
      };
      ClubGameMgr.prototype.reqClubGameList = function(club_id, page, game_type) {
        void 0 === game_type && (game_type = 0);
        if (1 == page) {
          this.gameList = null;
          this.gameList = {};
        }
        var clubinfo = {
          id: club_id,
          page: page,
          type: game_type
        };
        this.send_msg("http.reqClubGameList", clubinfo);
      };
      ClubGameMgr.getInstance = function() {
        this._instance || (this._instance = new ClubGameMgr());
        return this._instance;
      };
      return ClubGameMgr;
    }(BaseMgr_1.default);
    exports.default = ClubGameMgr;
    cc._RF.pop();
  }, {
    "../Libs/BaseMgr": "BaseMgr"
  } ],
  ClubMemberMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a455fwqEqJOxYIz8u51ad1n", "ClubMemberMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var UserMgr_1 = require("./UserMgr");
    var ClubMemberMgr = function(_super) {
      __extends(ClubMemberMgr, _super);
      function ClubMemberMgr() {
        var _this = _super.call(this) || this;
        _this.club_id = null;
        _this.memberlist = {};
        _this.routes = null;
        _this.refresh_club_id = 0;
        _this.club_change_list = {};
        _this.club_id = -1;
        _this.refresh_club_id = 0;
        _this.memberlist = {};
        _this.routes = {
          "http.onClubInfo": _this.http_onClubInfo,
          "http.reqClubList": _this.http_reqClubList,
          "http.reqClubInfo": _this.http_reqClubInfo,
          "http.reqClubMember": _this.http_reqClubMember,
          "http.reqClubClearDiamond": _this.http_reqClubClearDiamond,
          "http.reqClubChangeIdentity": _this.http_reqClubChangeIdentity,
          "http.reqClubKick": _this.http_reqClubKick
        };
        return _this;
      }
      ClubMemberMgr.prototype.onClubEnterEvent = function(msg) {
        var user_id = UserMgr_1.default.getInstance().getUid();
        msg.change_id != user_id && this.reqClubMember(msg.club_id, 1);
      };
      ClubMemberMgr.prototype.onClubExitEvent = function(msg) {
        var user_id = UserMgr_1.default.getInstance().getUid();
        msg.change_id != user_id && this.removeClubMember(msg.club_id, msg.change_id);
      };
      ClubMemberMgr.prototype.onClubChangeMemberEvent = function(msg) {
        var user_id = UserMgr_1.default.getInstance().getUid();
        msg.operation_id != user_id && (this.refresh_club_id = msg.club_id);
      };
      ClubMemberMgr.prototype.http_onClubInfo = function(msg) {
        if (this.club_id != msg.states.club_id) return;
        var data = msg.states;
        switch (data.state) {
         case CLUB_INFO_STATE.ENTER:
          this.onClubEnterEvent(data);
          break;

         case CLUB_INFO_STATE.EXIT:
          this.onClubExitEvent(data);
          break;

         case CLUB_INFO_STATE.CHANGEM:
          this.onClubChangeMemberEvent(data);
          break;

         case CLUB_INFO_STATE.APPLY:
        }
      };
      ClubMemberMgr.prototype.http_reqClubList = function() {
        if (0 != this.refresh_club_id) {
          this.reqClubMember(this.refresh_club_id, 1);
          this.refresh_club_id = 0;
        }
      };
      ClubMemberMgr.prototype.http_reqClubInfo = function() {
        if (0 != this.refresh_club_id) {
          this.reqClubMember(this.refresh_club_id, 1);
          this.refresh_club_id = 0;
        }
      };
      ClubMemberMgr.prototype.http_reqClubClearDiamond = function(msg) {
        var id = this.club_change_list.id, pid = this.club_change_list.playerid, data = this.getClubMemberData(pid);
        if (id != this.club_id) return;
        data.diamond = 0;
      };
      ClubMemberMgr.prototype.http_reqClubChangeIdentity = function(msg) {
        this.reqClubMember(this.club_id, 1);
      };
      ClubMemberMgr.prototype.http_reqClubKick = function(msg) {
        var id = this.club_id, pid = msg.playerid;
        if (id != this.club_id) return;
        this.removeClubMember(id, pid);
      };
      ClubMemberMgr.prototype.http_reqClubMember = function(msg) {
        console.log("ClubMember");
        console.dir(msg);
        var id = msg.clubId;
        if (this.club_id != id) return;
        null == this.memberlist.length ? this.memberlist = msg.list : this.memberlist = this.memberlist.concat(msg.list);
      };
      ClubMemberMgr.prototype.getClubMemberList = function() {
        console.log(this.memberlist);
        return this.memberlist;
      };
      ClubMemberMgr.prototype.getClubMemberData = function(playerid) {
        var member_list = this.memberlist, count = member_list.length;
        for (var i = 0; i < count; i++) {
          var data = member_list[i];
          if (playerid == data.id) return data;
        }
        return null;
      };
      ClubMemberMgr.prototype.removeClubMember = function(club_id, playerid) {
        var member_list = this.memberlist, count = member_list.length;
        for (var i = 0; i < count; i++) {
          var data = member_list[i];
          if (playerid == data.id) {
            member_list.splice(i, 1);
            break;
          }
        }
      };
      ClubMemberMgr.prototype.reqClubMember = function(club_id, page) {
        if (1 == page) {
          this.memberlist = null;
          this.memberlist = {};
        }
        var clubinfo = {
          id: club_id,
          page: page
        };
        this.club_id = club_id;
        this.send_msg("http.reqClubMember", clubinfo);
      };
      ClubMemberMgr.prototype.reqClubClearDiamond = function(club_id, member_id) {
        var clubinfo = {
          id: club_id,
          playerid: member_id
        };
        this.club_change_list = clubinfo;
        this.send_msg("http.reqClubClearDiamond", clubinfo);
      };
      ClubMemberMgr.getInstance = function() {
        this._instance || (this._instance = new ClubMemberMgr());
        return this._instance;
      };
      return ClubMemberMgr;
    }(BaseMgr_1.default);
    exports.default = ClubMemberMgr;
    cc._RF.pop();
  }, {
    "../Libs/BaseMgr": "BaseMgr",
    "./UserMgr": "UserMgr"
  } ],
  ClubMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6ee0bAnFUdDAZHxPaVDjJbQ", "ClubMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var LoginMgr_1 = require("./LoginMgr");
    var UserMgr_1 = require("./UserMgr");
    var RoomMgr_1 = require("./RoomMgr");
    var FrameMgr_1 = require("./FrameMgr");
    var LocalStorage_1 = require("../Libs/LocalStorage");
    var IDENTITY_TYPE = {
      MEMBER: "0",
      MANAGE: "1",
      CAPTAIN: "3"
    };
    var CLUB_INFO_STATE = {
      ENTER: 1,
      DISSOVE: 2,
      EXIT: 3,
      CHANGE: 4,
      GAME: 5,
      CHANGEM: 6,
      APPLY: 7,
      BLACK: 11,
      CREATE: 12
    };
    var CLUB_GAME_STATE = {
      CREATE: 1,
      COLSE: 2,
      REMOVE: 3
    };
    var OPEN_GAME_MGR = {
      MEMBER: 0,
      MANAGE: 1
    };
    window["IDENTITY_TYPE"] = IDENTITY_TYPE;
    window["CLUB_INFO_STATE"] = CLUB_INFO_STATE;
    window["CLUB_GAME_STATE"] = CLUB_GAME_STATE;
    window["OPEN_GAME_MGR"] = OPEN_GAME_MGR;
    var ClubMgr = function(_super) {
      __extends(ClubMgr, _super);
      function ClubMgr() {
        var _this = _super.call(this) || this;
        _this.clublist = [];
        _this.clubinfo = {};
        _this.seeklist = {};
        _this.recordList = {};
        _this.applyList = {};
        _this.blackList = {};
        _this.routes = null;
        _this.club_enter = false;
        _this.club_change_list = {};
        _this.dissolveID = null;
        _this.clublist = [];
        _this.seeklist = {};
        _this.recordList = {};
        _this.applyList = {};
        _this.blackList = {};
        _this.routes = {
          "http.onClubInfo": _this.http_onClubInfo,
          "http.reqClubList": _this.http_reqClubList,
          "http.reqClubTop": _this.http_reqClubTop,
          "http.reqClubInfo": _this.http_reqClubInfo,
          "http.reqClubSeekList": _this.http_reqClubSeekList,
          "http.reqClubExit": _this.http_reqClubExit,
          "http.reqClubDissolve": _this.http_reqClubDissolve,
          "http.reqClubApplyList": _this.http_reqClubApplyList,
          "http.reqClubBlacklist": _this.http_reqClubBlacklist,
          "http.reqClubApplyJoin": _this.http_reqClubApplyJoin,
          "http.reqClubRefuseJoin": _this.http_reqClubRefuseJoin,
          "http.reqClubJoinBlacklist": _this.http_reqClubJoinBlacklist,
          "http.reqClubChangeAvater": _this.http_reqClubChangeAvater,
          "http.reqClubChangeName": _this.http_reqClubChangeName,
          "http.reqClubChangeNotice": _this.http_reqClubChangeNotice,
          "http.reqClubChangeOpenGame": _this.http_reqClubChangeOpenGame,
          "http.reqClubKick": _this.http_reqClubKick,
          "http.reqClubJoin": _this.http_reqClubJoin,
          "http.reqClubBlacklisRemove": _this.http_reqClubBlacklisRemove,
          "http.reqClubRecordList": _this.http_reqClubRecordList,
          "http.reqClubRecordData": _this.http_reqClubRecordData,
          "http.reqClubRecharge": _this.http_reqClubRecharge
        };
        return _this;
      }
      ClubMgr.prototype.onClubEnterEvent = function(msg) {
        var user_id = UserMgr_1.default.getInstance().getUid();
        msg.change_id == user_id ? this.reqClubList() : msg.operation_id != user_id && this.reqClubList();
      };
      ClubMgr.prototype.onClubDissoveEvent = function(msg) {
        this.reqClubList();
        var roomMgr = RoomMgr_1.default.getInstance();
        if (roomMgr.isInRoom()) {
          var club = roomMgr.getEnterFangKaClubId();
          console.log("onClubDissoveEvent", club);
          console.log("onClubDissoveEvent", roomMgr.isGameStarted());
          0 != club && club == msg.club_id && (roomMgr.isGameStarted() || FrameMgr_1.default.getInstance().showHintBox("茶馆" + msg.club_name + "已被解散，牌局结束！", function() {}));
        } else {
          var user_id = UserMgr_1.default.getInstance().getUid();
          msg.operation_id != user_id && FrameMgr_1.default.getInstance().showMsgBox("茶馆" + msg.club_name + "已解散", function() {}, "提示");
        }
      };
      ClubMgr.prototype.onClubExitEvent = function(msg) {
        var user_id = UserMgr_1.default.getInstance().getUid();
        this.reqClubList();
      };
      ClubMgr.prototype.onClubChangeEvent = function(msg) {
        var user_id = UserMgr_1.default.getInstance().getUid();
        msg.operation_id != user_id && this.reqClubInfo(msg.club_id);
      };
      ClubMgr.prototype.onClubChangeMemberEvent = function(msg) {
        var user_id = UserMgr_1.default.getInstance().getUid();
        msg.operation_id != user_id && this.reqClubInfo(msg.club_id);
      };
      ClubMgr.prototype.onClubApplyList = function(msg) {
        var data = this.getClubInfo(msg.club_id);
        null != data && data.identity != IDENTITY_TYPE.MEMBER && this.reqClubInfo(msg.club_id);
      };
      ClubMgr.prototype.http_onClubInfo = function(msg) {
        var data = msg.states;
        switch (data.state) {
         case CLUB_INFO_STATE.ENTER:
          this.onClubEnterEvent(data);
          break;

         case CLUB_INFO_STATE.DISSOVE:
          this.onClubDissoveEvent(data);
          break;

         case CLUB_INFO_STATE.EXIT:
          this.onClubExitEvent(data);
          break;

         case CLUB_INFO_STATE.CHANGE:
          this.onClubChangeEvent(data);
          break;

         case CLUB_INFO_STATE.GAME:
          break;

         case CLUB_INFO_STATE.CHANGEM:
          this.onClubChangeMemberEvent(data);
          break;

         case CLUB_INFO_STATE.APPLY:
          this.onClubApplyList(data);
          break;

         case CLUB_INFO_STATE.CREATE:
          this.reqClubList();
        }
      };
      ClubMgr.prototype.http_reqClubInfo = function(msg) {
        console.log("ClubInfo", msg);
        this.setClubListData(msg);
        console.log("ClubInfo..1", this.clublist);
      };
      ClubMgr.prototype.http_reqClubList = function(msg) {
        console.log("ClubList");
        console.dir(msg);
        this.clublist = msg.list;
        LocalStorage_1.default.getInstance().setClubList(this.clublist);
        0 != this.clublist.length ? this.club_enter = true : 0 == this.clublist.length && (this.club_enter = false);
      };
      ClubMgr.prototype.http_reqClubTop = function(msg) {
        console.log("茶馆列表置顶消息", msg);
      };
      ClubMgr.prototype.http_reqClubSeekList = function(msg) {
        console.log("SeekList");
        console.dir(msg);
        this.seeklist = msg.list;
      };
      ClubMgr.prototype.http_reqClubApplyList = function(msg) {
        var _this = this;
        var attributeFun = function(item) {
          var bInList = false;
          for (var i = 0; i < _this.applyList.length; ++i) _this.applyList[i].id == item.id && (bInList = true);
          if (!bInList) return item;
        };
        var id = msg.clubId;
        if (null == this.applyList.length) this.applyList = msg.list; else {
          var newApply = msg.list.filter(attributeFun);
          this.applyList = this.applyList.concat(newApply);
        }
      };
      ClubMgr.prototype.http_reqClubBlacklist = function(msg) {
        var id = msg.clubId;
        null == this.blackList.length ? this.blackList = msg.list : this.blackList = this.blackList.concat(msg.list);
      };
      ClubMgr.prototype.http_reqClubApplyJoin = function(msg) {};
      ClubMgr.prototype.http_reqClubRefuseJoin = function(msg) {};
      ClubMgr.prototype.http_reqClubJoinBlacklist = function(msg) {
        console.log("加入黑名单后的返回", msg);
      };
      ClubMgr.prototype.http_reqClubExit = function(msg) {
        for (var i = 0; i < this.clublist.length; i++) if (this.clublist[i].id == this.dissolveID) {
          this.clublist.splice(i, 1);
          break;
        }
        LocalStorage_1.default.getInstance().setClubList(this.clublist);
        this.reqClubList();
      };
      ClubMgr.prototype.http_reqClubDissolve = function(msg) {
        for (var i = 0; i < this.clublist.length; i++) if (this.clublist[i].id == this.dissolveID) {
          this.clublist.splice(i, 1);
          break;
        }
        LocalStorage_1.default.getInstance().setClubList(this.clublist);
        this.reqClubList();
      };
      ClubMgr.prototype.http_reqClubChangeAvater = function(msg) {
        console.dir(msg);
        var id = msg.clubId, data = this.getClubListData(id);
        data.avater = msg.msg;
      };
      ClubMgr.prototype.http_reqClubChangeName = function(msg) {
        var id = this.club_change_list.id, name = this.club_change_list.name, data = this.getClubListData(id);
        data.name = name;
      };
      ClubMgr.prototype.http_reqClubChangeNotice = function(msg) {
        var id = this.club_change_list.id, notice = this.club_change_list.notice, data = this.getClubListData(id);
        data.notice = notice;
      };
      ClubMgr.prototype.http_reqClubChangeOpenGame = function(msg) {
        console.dir(msg);
        var id = this.club_change_list.id, openGame = this.club_change_list.identity, data = this.getClubListData(id);
        data.openGame = openGame;
      };
      ClubMgr.prototype.http_reqClubKick = function(msg) {
        var id = this.club_change_list.id, pid = this.club_change_list.playerid;
        this.removeClubMemberCount(id);
      };
      ClubMgr.prototype.http_reqClubJoin = function(msg) {
        this.addClubMemberCount(msg.club_id);
      };
      ClubMgr.prototype.http_reqClubBlacklisRemove = function(msg) {};
      ClubMgr.prototype.http_reqClubRecordList = function(msg) {
        console.log("http_reqClubRecordList", msg);
        this.recordList = msg;
      };
      ClubMgr.prototype.http_reqClubRecordData = function(msg) {
        console.log("http_reqClubRecordData", msg);
      };
      ClubMgr.prototype.http_reqClubRecharge = function(msg) {
        var data = msg.data, club_data = this.getClubListData(data.clubId);
        club_data.diamond = data.diamond;
      };
      ClubMgr.prototype.getClubList = function() {
        return this.clublist;
      };
      ClubMgr.prototype.getClubInfo = function(id) {
        return this.getClubListData(id);
      };
      ClubMgr.prototype.getClubApplyList = function(id) {
        return this.applyList;
      };
      ClubMgr.prototype.getClubBlackList = function(id) {
        return this.blackList;
      };
      ClubMgr.prototype.getClubRecordList = function() {
        return this.recordList;
      };
      ClubMgr.prototype.setClubListData = function(msg_data) {
        var count = this.clublist.length;
        for (var i = 0; i < count; i++) {
          var data = this.clublist[i];
          msg_data.id == data.id && (this.clublist[i] = msg_data);
        }
      };
      ClubMgr.prototype.getClubListData = function(id) {
        var count = this.clublist.length;
        for (var i = 0; i < count; i++) {
          var data = this.clublist[i];
          if (id == data.id) return data;
        }
        return null;
      };
      ClubMgr.prototype.getClubIdentity = function(id) {
        var count = this.clublist.length;
        for (var i = 0; i < count; i++) {
          var data = this.clublist[i];
          if (id == data.id) return data.identity;
        }
        return "0";
      };
      ClubMgr.prototype.getClubApplyDot = function(id) {
        var count = this.clublist.length;
        for (var i = 0; i < count; i++) {
          var data = this.clublist[i];
          if (id == data.id) return data.apply;
        }
        return 0;
      };
      ClubMgr.prototype.getClubDiamond = function(id) {
        var count = this.clublist.length;
        for (var i = 0; i < count; i++) {
          var data = this.clublist[i];
          if (id == data.id) return data.diamond;
        }
        return 0;
      };
      ClubMgr.prototype.getSeekList = function() {
        return this.seeklist;
      };
      ClubMgr.prototype.changeClubList = function(id) {
        var list = this.clublist;
        for (var i = 0; i < list.length; i++) if (id == list[i].id) {
          var temp = list[i];
          list.splice(i, 1);
          list.unshift(temp);
          LocalStorage_1.default.getInstance().setClubList(list);
          break;
        }
      };
      ClubMgr.prototype.addClubMemberCount = function(id) {
        console.log("addClubMemberCount");
        var club_data = this.getClubListData(id), count = Number(club_data.mCount);
        count++;
        console.log(club_data, id);
        null != club_data && (club_data.mCount = "" + count);
        if (null != this.clublist[id]) {
          var clubInfo = this.clublist[id];
          clubInfo.mCount = "" + count;
        }
        console.log(count);
      };
      ClubMgr.prototype.removeClubMemberCount = function(id) {
        var club_data = this.getClubListData(id), count = Number(club_data.mCount);
        count--;
        null != club_data && (club_data.mCount = "" + count);
        if (null != this.clublist[id]) {
          var clubInfo = this.clublist[id];
          clubInfo.mCount = "" + count;
        }
      };
      ClubMgr.prototype.reqClubs = function(uids) {};
      ClubMgr.prototype.getHeadPng = function(headid) {
        var webRootUrl = LoginMgr_1.default.getInstance().getWetRootUrl();
        return webRootUrl + "/images/default_" + headid + ".png";
      };
      ClubMgr.prototype.reqCreate = function(icon, name) {
        var clubinfo = {
          avater: icon,
          name: name
        };
        this.send_msg("http.reqClubCreate", clubinfo);
      };
      ClubMgr.prototype.reqClubList = function() {
        var clubinfo = {
          page: 1
        };
        this.send_msg("http.reqClubList", clubinfo);
      };
      ClubMgr.prototype.reqClubTop = function(club_id) {
        var clubinfo = {
          club_id: club_id
        };
        this.send_msg("http.reqClubTop", clubinfo);
      };
      ClubMgr.prototype.reqClubInfo = function(club_id) {
        var clubinfo = {
          id: club_id
        };
        this.send_msg("http.reqClubInfo", clubinfo);
      };
      ClubMgr.prototype.reqClubSeekList = function(name) {
        var clubinfo = {
          keyword: name
        };
        this.send_msg("http.reqClubSeekList", clubinfo);
      };
      ClubMgr.prototype.reqApplyClub = function(club_id) {
        var clubinfo = {
          id: club_id
        };
        this.send_msg("http.reqApplyClub", clubinfo);
      };
      ClubMgr.prototype.reqClubExit = function(club_id) {
        var clubinfo = {
          id: club_id
        };
        this.dissolveID = club_id;
        this.send_msg("http.reqClubExit", clubinfo);
      };
      ClubMgr.prototype.reqClubDissolve = function(club_id) {
        var clubinfo = {
          id: club_id
        };
        this.dissolveID = club_id;
        this.send_msg("http.reqClubDissolve", clubinfo);
      };
      ClubMgr.prototype.reqClubJoin = function(club_id, playerid) {
        var clubinfo = {
          id: club_id,
          playerid: playerid
        };
        this.send_msg("http.reqClubJoin", clubinfo);
      };
      ClubMgr.prototype.reqClubApplyList = function(club_id, page) {
        if (1 == page) {
          this.applyList = null;
          this.applyList = {};
        }
        var clubinfo = {
          id: club_id,
          page: page
        };
        this.send_msg("http.reqClubApplyList", clubinfo);
      };
      ClubMgr.prototype.reqClubBlacklist = function(club_id, page) {
        if (1 == page) {
          this.blackList = null;
          this.blackList = {};
        }
        var clubinfo = {
          id: club_id,
          page: page
        };
        this.send_msg("http.reqClubBlacklist", clubinfo);
      };
      ClubMgr.prototype.reqClubApplyJoin = function(club_id) {
        var clubinfo = {
          id: club_id
        };
        this.send_msg("http.reqClubApplyJoin", clubinfo);
      };
      ClubMgr.prototype.reqClubRefuseJoin = function(club_id, playerId) {
        var clubinfo = {
          id: club_id,
          playerid: playerId
        };
        this.send_msg("http.reqClubRefuseJoin", clubinfo);
      };
      ClubMgr.prototype.reqClubJoinBlacklist = function(club_id, playerId) {
        var clubinfo = {
          id: club_id,
          playerid: playerId
        };
        this.send_msg("http.reqClubJoinBlacklist", clubinfo);
      };
      ClubMgr.prototype.reqClubBlacklisRemove = function(club_id, playerId) {
        var clubinfo = {
          id: club_id,
          playerid: playerId
        };
        this.send_msg("http.reqClubBlacklisRemove", clubinfo);
      };
      ClubMgr.prototype.reqClubRecordList = function(club_id) {
        var clubinfo = {
          id: club_id
        };
        this.send_msg("http.reqClubRecordList", clubinfo);
      };
      ClubMgr.prototype.reqClubRecordData = function(game_id) {
        var clubinfo = {
          id: game_id
        };
        this.send_msg("http.reqClubRecordData", clubinfo);
      };
      ClubMgr.prototype.reqClubChangeIcon = function(club_id, icon) {
        var clubinfo = {
          id: club_id,
          icon: icon
        };
        this.club_change_list = clubinfo;
        this.send_msg("http.reqClubChangeAvater", clubinfo);
      };
      ClubMgr.prototype.reqClubChangeName = function(club_id, name) {
        var clubinfo = {
          id: club_id,
          name: name
        };
        this.club_change_list = clubinfo;
        this.send_msg("http.reqClubChangeName", clubinfo);
      };
      ClubMgr.prototype.reqClubChangeNotice = function(club_id, notice) {
        var clubinfo = {
          id: club_id,
          notice: notice
        };
        this.club_change_list = clubinfo;
        this.send_msg("http.reqClubChangeNotice", clubinfo);
      };
      ClubMgr.prototype.reqClubChangeOpenGame = function(club_id, identity) {
        var clubinfo = {
          id: club_id,
          identity: identity
        };
        this.club_change_list = clubinfo;
        this.send_msg("http.reqClubChangeOpenGame", clubinfo);
      };
      ClubMgr.prototype.reqClubChangeIdentity = function(club_id, memberid, identity) {
        var clubinfo = {
          id: club_id,
          playerid: memberid,
          identity: identity
        };
        this.club_change_list = clubinfo;
        this.send_msg("http.reqClubChangeIdentity", clubinfo);
      };
      ClubMgr.prototype.reqClubKick = function(club_id, member_id) {
        var clubinfo = {
          id: club_id,
          playerid: member_id
        };
        this.club_change_list = clubinfo;
        this.send_msg("http.reqClubKick", clubinfo);
      };
      ClubMgr.prototype.reqClubRecharge = function(club_id, diamond) {
        var clubinfo = {
          id: club_id,
          count: diamond
        };
        this.send_msg("http.reqClubRecharge", clubinfo);
      };
      ClubMgr.getInstance = function() {
        this._instance || (this._instance = new ClubMgr());
        return this._instance;
      };
      return ClubMgr;
    }(BaseMgr_1.default);
    exports.default = ClubMgr;
    cc._RF.pop();
  }, {
    "../Libs/BaseMgr": "BaseMgr",
    "../Libs/LocalStorage": "LocalStorage",
    "./FrameMgr": "FrameMgr",
    "./LoginMgr": "LoginMgr",
    "./RoomMgr": "RoomMgr",
    "./UserMgr": "UserMgr"
  } ],
  Club_ApplicationList: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "da39ciSva5Ko4odA7cQrBTk", "Club_ApplicationList");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var ClubMgr_1 = require("../../GameMgrs/ClubMgr");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.applyList = [];
        _this.blackList = [];
        _this.listMaxCount = null;
        _this.applyItemBegin = null;
        _this.applyPage = null;
        _this.blacklistItemBegin = null;
        _this.blacklistPage = null;
        _this.bApplyListAdded = null;
        _this.bBlacklistAdded = null;
        _this.clubId = null;
        _this.listMaxCount = 20;
        _this.applyItemBegin = 0;
        _this.applyPage = 1;
        _this.blacklistItemBegin = 0;
        _this.blacklistPage = 1;
        _this.clubId = BehaviorMgr_1.default.getInstance().getClubSelectId();
        return _this;
      }
      Model.prototype.getClubId = function() {
        return this.clubId;
      };
      Model.prototype.getApplyList = function() {
        return this.applyList;
      };
      Model.prototype.getBlackList = function() {
        return this.blackList;
      };
      Model.prototype.getApplyItemBegin = function() {
        return this.applyItemBegin;
      };
      Model.prototype.getBlacklistItemBegin = function() {
        return this.blacklistItemBegin;
      };
      Model.prototype.getListMaxCount = function() {
        return this.listMaxCount;
      };
      Model.prototype.getApplyPage = function() {
        return this.applyPage;
      };
      Model.prototype.getBlacklistPage = function() {
        return this.blacklistPage;
      };
      Model.prototype.getBlacklistAdded = function() {
        return this.bBlacklistAdded;
      };
      Model.prototype.getApplyListAdded = function() {
        return this.bApplyListAdded;
      };
      Model.prototype.setApplyItemBegin = function(data) {
        this.applyItemBegin = data;
      };
      Model.prototype.setBlacklistItemBegin = function(data) {
        this.blacklistItemBegin = data;
      };
      Model.prototype.setApplyPage = function(data) {
        this.applyPage += data;
      };
      Model.prototype.setBlacklistPage = function(data) {
        this.blacklistPage += data;
      };
      Model.prototype.setApplyListAdded = function(state) {
        this.bApplyListAdded = state;
      };
      Model.prototype.setBlacklistAdded = function(state) {
        this.bBlacklistAdded = state;
      };
      Model.prototype.refApplyList = function() {
        this.applyList = ClubMgr_1.default.getInstance().getClubApplyList(this.clubId);
      };
      Model.prototype.refBlackList = function() {
        this.blackList = ClubMgr_1.default.getInstance().getClubBlackList(this.clubId);
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          listPanel: ctrl.ListPanel,
          askListContent: ctrl.AskListContent,
          blackListContent: ctrl.BlackListContent,
          blackListItem: ctrl.BlackListItem,
          askListItem: ctrl.AskListItem,
          askItems: [],
          blackItems: [],
          askListView: ctrl.AskListView,
          blacklistView: ctrl.BlacklistView
        };
        _this.node = ctrl.node;
        _this.addGrayLayer();
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {};
      View.prototype.addApplyListItem = function() {
        var applyList = this.model.getApplyList();
        var applyItemBegin = this.model.getApplyItemBegin();
        var applyItemCount = applyItemBegin + this.model.getListMaxCount();
        applyItemCount = Math.min(applyItemCount, applyList.length);
        for (var i = applyItemBegin; i < applyItemCount; i++) {
          BehaviorMgr_1.default.getInstance().setApplyListData(applyList[i]);
          var item = cc.instantiate(this.ui.askListItem);
          item.parent = this.ui.askListContent;
          this.ui.askItems.push(item);
        }
        this.model.setApplyItemBegin(applyItemCount);
        var page = this.model.getApplyPage();
        var count = this.model.getListMaxCount();
        applyItemCount == page * count && this.model.setApplyPage(1);
        this.model.setBlacklistAdded(true);
      };
      View.prototype.addBlacklistItem = function() {
        var blackList = this.model.getBlackList();
        var blacklistItemBegin = this.model.getBlacklistItemBegin();
        var blacklistItemCount = blacklistItemBegin + this.model.getListMaxCount();
        blacklistItemCount = Math.min(blacklistItemCount, blackList.length);
        for (var i = blacklistItemBegin; i < blacklistItemCount; i++) {
          BehaviorMgr_1.default.getInstance().setBlacklistData(blackList[i]);
          var item = cc.instantiate(this.ui.blackListItem);
          item.parent = this.ui.blackListContent;
          this.ui.blackItems.push(item);
        }
        this.model.setBlacklistItemBegin(blacklistItemCount);
        var page = this.model.getBlacklistPage();
        var count = this.model.getListMaxCount();
        blacklistItemCount == page * count && this.model.setBlacklistPage(1);
        this.model.setApplyListAdded(true);
      };
      View.prototype.showAni = function(action) {
        this.ui.listPanel.runAction(action);
      };
      return View;
    }(BaseView_1.default);
    var Club_Application = function(_super) {
      __extends(Club_Application, _super);
      function Club_Application() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.ListPanel = null;
        _this.AskListContent = null;
        _this.BlackListContent = null;
        _this.BlackListItem = null;
        _this.AskListItem = null;
        _this.AskListView = null;
        _this.BlacklistView = null;
        return _this;
      }
      Club_Application.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        ClubMgr_1.default.getInstance().reqClubApplyList(this.model.getClubId(), this.model.getApplyPage());
        ClubMgr_1.default.getInstance().reqClubBlacklist(this.model.getClubId(), 1);
        var action = cc.sequence(cc.show(), cc.moveBy(.3, -635, 0));
        this.view.showAni(action);
      };
      Club_Application.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqClubApplyList": this.http_reqClubApplyList,
          "http.reqClubBlacklist": this.http_reqClubBlacklist,
          "http.reqClubJoin": this.http_reqClubJoin,
          "http.reqClubJoinBlacklist": this.http_reqClubJoinBlacklist,
          "http.reqClubBlacklisRemove": this.http_reqClubBlacklisRemove,
          "http.reqClubRefuseJoin": this.http_reqClubRefuseJoin,
          "http.onClubInfo": this.http_onClubInfo
        };
      };
      Club_Application.prototype.defineGlobalEvents = function() {};
      Club_Application.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.node, this.clickClose, "关闭界面");
        this.connect(G_UiType.scroll, this.view.ui.askListContent, this.applyListScrollCB, "茶馆申请列表拖动");
        this.connect(G_UiType.scroll, this.view.ui.blackListContent, this.blackListScrollCB, "申请列表黑名单拖动");
      };
      Club_Application.prototype.clickClose = function() {
        var action = cc.sequence(cc.moveBy(.3, 620, 0), cc.callFunc(function() {
          console.log("关闭");
          ctrl.finish();
        }));
        this.ui.listPanel.runAction(action);
      };
      Club_Application.prototype.applyListScrollCB = function(node, event) {
        if (event.type == cc.Node.EventType.TOUCH_MOVE) {
          var applyList = this.model.getApplyList(), itemMax = applyList.length;
          var node_height = node.height - this.ui.askListView.height;
          if (node_height < node.y && true == this.model.getApplyListAdded()) {
            this.model.setApplyListAdded(false);
            ClubMgr_1.default.getInstance().reqClubApplyList(this.model.getClubId(), this.model.getApplyPage());
          }
        }
      };
      Club_Application.prototype.blackListScrollCB = function(node, event) {
        if (event.type == cc.Node.EventType.TOUCH_MOVE) {
          var blacklist = this.model.getBlackList(), itemMax = blacklist.length;
          var node_height = node.height - this.ui.blacklistView.height;
          if (node_height < node.y && true == this.model.getBlacklistAdded()) {
            this.model.setBlacklistAdded(false);
            ClubMgr_1.default.getInstance().reqClubBlacklist(this.model.getClubId(), this.model.getBlacklistPage());
          }
        }
      };
      Club_Application.prototype.http_reqClubApplyList = function() {
        this.model.refApplyList();
        this.view.addApplyListItem();
      };
      Club_Application.prototype.http_reqClubBlacklist = function() {
        this.model.refBlackList();
        this.view.addBlacklistItem();
      };
      Club_Application.prototype.http_reqClubJoin = function() {
        this.view.ui.askItems = this.view.ui.askListContent.children;
      };
      Club_Application.prototype.http_reqClubJoinBlacklist = function() {
        ClubMgr_1.default.getInstance().reqClubBlacklist(this.model.getClubId(), this.model.getBlacklistPage());
        this.view.ui.askItems = this.view.ui.askListContent.children;
      };
      Club_Application.prototype.http_reqClubBlacklisRemove = function() {
        this.view.ui.blackItems = this.view.ui.blackListContent.children;
      };
      Club_Application.prototype.http_reqClubRefuseJoin = function() {
        this.view.ui.askItems = this.view.ui.askListContent.children;
      };
      Club_Application.prototype.http_onClubInfo = function(msg) {
        var data = msg.states;
        console.log("状态信息", data);
        if (CLUB_INFO_STATE.EXIT == data.state) {
          var user_id = UserMgr_1.default.getInstance().getUid();
          data.change_id == user_id && this.model.getClubId() == data.club_id && this.finish();
        } else if (CLUB_INFO_STATE.DISSOVE == data.state) data.club_id == this.model.getClubId() && this.finish(); else if (CLUB_INFO_STATE.APPLY == data.state) {
          var user_id = UserMgr_1.default.getInstance().getUid();
          if (data.club_id == this.model.getClubId() && data.change_id != user_id && data.operation_id != user_id) {
            this.model.refApplyList();
            var maxCount = this.ui.askListContent.children.length;
            var items = this.ui.askListContent.children;
            var criticalRefPos = this.ui.askListContent.height - this.ui.askListView.height;
            if (this.ui.askListContent.getPositionY() > criticalRefPos) {
              ClubMgr_1.default.getInstance().reqClubApplyList(this.model.getClubId(), this.model.getApplyPage());
              ClubMgr_1.default.getInstance().reqClubBlacklist(this.model.getClubId(), 1);
            }
          }
        } else if (CLUB_INFO_STATE.BLACK == data.state) {
          var user_id = UserMgr_1.default.getInstance().getUid();
          if (data.club_id == this.model.getClubId() && data.change_id != user_id && data.operation_id != user_id) {
            this.ui.blackListContent.removeAllChildren();
            this.model.blacklistItemBegin = 0;
            ClubMgr_1.default.getInstance().reqClubBlacklist(this.model.getClubId(), 1);
          }
        }
      };
      __decorate([ property({
        tooltip: "界面节点",
        type: cc.Node
      }) ], Club_Application.prototype, "ListPanel", void 0);
      __decorate([ property({
        tooltip: "申请列表容器",
        type: cc.Node
      }) ], Club_Application.prototype, "AskListContent", void 0);
      __decorate([ property({
        tooltip: "黑名单容器",
        type: cc.Node
      }) ], Club_Application.prototype, "BlackListContent", void 0);
      __decorate([ property({
        tooltip: "黑名单item预置",
        type: cc.Prefab
      }) ], Club_Application.prototype, "BlackListItem", void 0);
      __decorate([ property({
        tooltip: "申请列表item预置",
        type: cc.Prefab
      }) ], Club_Application.prototype, "AskListItem", void 0);
      __decorate([ property({
        tooltip: "申请列表View",
        type: cc.Node
      }) ], Club_Application.prototype, "AskListView", void 0);
      __decorate([ property({
        tooltip: "黑名单列表View",
        type: cc.Node
      }) ], Club_Application.prototype, "BlacklistView", void 0);
      Club_Application = __decorate([ ccclass ], Club_Application);
      return Club_Application;
    }(BaseCtrl_1.default);
    exports.default = Club_Application;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/ClubMgr": "ClubMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Club_AskListItemCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1f1e6g7ViRMP6IuceS9AQ09", "Club_AskListItemCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var UiMgr_1 = require("../../GameMgrs/UiMgr");
    var ClubMgr_1 = require("../../GameMgrs/ClubMgr");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.clubId = null;
        _this.applyData = null;
        _this.bDeleted = null;
        _this.node_max = null;
        _this.name_slice = 0;
        _this.clubId = BehaviorMgr_1.default.getInstance().getClubSelectId();
        _this.applyData = BehaviorMgr_1.default.getInstance().getApplyData();
        _this.bDeleted = false;
        _this.node_max = 138;
        _this.name_slice = 6;
        console.log("applyData", _this.applyData);
        return _this;
      }
      Model.prototype.getNodeMax = function() {
        return this.node_max;
      };
      Model.prototype.getNameSlice = function() {
        return this.name_slice;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          labUserName: ctrl.LabUserName,
          btnBlackList: ctrl.BtnBlackList,
          btnRefuse: ctrl.BtnRefuse,
          btnAgree: ctrl.BtnAgree,
          imgUserHead: ctrl.ImgUserHead
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.labUserName.string = this.model.applyData.name;
        var name = this.ui.labUserName.string;
        if (this.ui.labUserName.node.width >= this.model.getNodeMax()) {
          name = name.slice(0, this.model.getNameSlice()) + "...";
          this.ui.labUserName.string = name;
        }
        UiMgr_1.default.getInstance().setUserHead(this.ui.imgUserHead.node, 0, this.model.applyData.icon);
      };
      return View;
    }(BaseView_1.default);
    var Club_AskListCtrl = function(_super) {
      __extends(Club_AskListCtrl, _super);
      function Club_AskListCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.LabUserName = null;
        _this.BtnBlackList = null;
        _this.BtnRefuse = null;
        _this.BtnAgree = null;
        _this.ImgUserHead = null;
        return _this;
      }
      Club_AskListCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Club_AskListCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqClubJoin": this.http_reqClubJoin,
          "http.reqClubRefuseJoin": this.http_reqClubRefuseJoin,
          "http.reqClubJoinBlacklist": this.http_reqClubJoinBlacklist
        };
      };
      Club_AskListCtrl.prototype.defineGlobalEvents = function() {};
      Club_AskListCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.view.ui.btnBlackList, this.addToBlackListCB, "加入黑名单");
        this.connect(G_UiType.button, this.view.ui.btnRefuse, this.refuseCB, "拒绝玩家");
        this.connect(G_UiType.button, this.view.ui.btnAgree, this.agreeCB, "接受玩家");
      };
      Club_AskListCtrl.prototype.start = function() {};
      Club_AskListCtrl.prototype.refuseCB = function(event) {
        console.log("拒绝玩家");
        var okcb = function() {
          ClubMgr_1.default.getInstance().reqClubRefuseJoin(this.model.clubId, this.model.applyData.id);
          this.model.bDeleted = true;
        };
        FrameMgr_1.default.getInstance().showDialog("是否拒绝该玩家加入？", okcb.bind(this));
        this.changClubList();
      };
      Club_AskListCtrl.prototype.agreeCB = function(event) {
        console.log("接受玩家");
        var okcb = function() {
          ClubMgr_1.default.getInstance().reqClubJoin(this.model.clubId, this.model.applyData.id);
          this.model.bDeleted = true;
        };
        FrameMgr_1.default.getInstance().showDialog("接受该玩家进入茶馆？", okcb.bind(this));
        this.changClubList();
      };
      Club_AskListCtrl.prototype.addToBlackListCB = function(event) {
        console.log("加入黑名单");
        var okcb = function() {
          ClubMgr_1.default.getInstance().reqClubJoinBlacklist(this.model.clubId, this.model.applyData.id);
          this.model.bDeleted = true;
        };
        FrameMgr_1.default.getInstance().showDialog("是否确定将该玩家加入黑名单？", okcb.bind(this));
        this.changClubList();
      };
      Club_AskListCtrl.prototype.http_reqClubJoin = function() {
        true == this.model.bDeleted && this.finish();
      };
      Club_AskListCtrl.prototype.http_reqClubRefuseJoin = function() {
        true == this.model.bDeleted && this.finish();
      };
      Club_AskListCtrl.prototype.http_reqClubJoinBlacklist = function() {
        true == this.model.bDeleted && this.finish();
      };
      Club_AskListCtrl.prototype.changClubList = function() {
        var club_id = this.model.clubId;
        ClubMgr_1.default.getInstance().changeClubList(club_id);
        this.gemit("refreshClubList");
      };
      __decorate([ property({
        tooltip: "角色名称",
        type: cc.Label
      }) ], Club_AskListCtrl.prototype, "LabUserName", void 0);
      __decorate([ property({
        tooltip: "黑名单按钮",
        type: cc.Node
      }) ], Club_AskListCtrl.prototype, "BtnBlackList", void 0);
      __decorate([ property({
        tooltip: "拒绝按钮",
        type: cc.Node
      }) ], Club_AskListCtrl.prototype, "BtnRefuse", void 0);
      __decorate([ property({
        tooltip: "同意按钮",
        type: cc.Node
      }) ], Club_AskListCtrl.prototype, "BtnAgree", void 0);
      __decorate([ property({
        tooltip: "头像图片",
        type: cc.Sprite
      }) ], Club_AskListCtrl.prototype, "ImgUserHead", void 0);
      Club_AskListCtrl = __decorate([ ccclass ], Club_AskListCtrl);
      return Club_AskListCtrl;
    }(BaseCtrl_1.default);
    exports.default = Club_AskListCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/ClubMgr": "ClubMgr",
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/UiMgr": "UiMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Club_BlackListItemCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f5d2dZ/tVxGW7RIlfe8+LMV", "Club_BlackListItemCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var UiMgr_1 = require("../../GameMgrs/UiMgr");
    var ClubMgr_1 = require("../../GameMgrs/ClubMgr");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.clubId = null;
        _this.blacklistData = null;
        _this.bRemove = null;
        _this.bRemove = false;
        _this.clubId = BehaviorMgr_1.default.getInstance().getClubSelectId();
        _this.blacklistData = BehaviorMgr_1.default.getInstance().getBlacklistData();
        cc.log("blacklistData", _this.blacklistData);
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          labUserName: ctrl.LabUserName,
          btnRemove: ctrl.BtnRemove,
          nodeUserHead: ctrl.UserHead
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.labUserName.string = this.model.blacklistData.name;
        UiMgr_1.default.getInstance().setUserHead(this.ui.nodeUserHead, 0, this.model.blacklistData.icon);
      };
      return View;
    }(BaseView_1.default);
    var Club_BlackListCtrl = function(_super) {
      __extends(Club_BlackListCtrl, _super);
      function Club_BlackListCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.LabUserName = null;
        _this.BtnRemove = null;
        _this.UserHead = null;
        return _this;
      }
      Club_BlackListCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Club_BlackListCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqClubBlacklisRemove": this.http_reqClubBlacklisRemove
        };
      };
      Club_BlackListCtrl.prototype.defineGlobalEvents = function() {};
      Club_BlackListCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.view.ui.btnRemove, this.RemoveCB, "移除操作按钮");
      };
      Club_BlackListCtrl.prototype.start = function() {};
      Club_BlackListCtrl.prototype.RemoveCB = function(event) {
        console.log("移除黑名单内成员");
        var okcb = function() {
          ClubMgr_1.default.getInstance().reqClubBlacklisRemove(this.model.clubId, this.model.blacklistData.id);
          this.model.bRemove = true;
        };
        FrameMgr_1.default.getInstance().showDialog("是否确定将该玩家移出茶馆黑名单？", okcb.bind(this));
      };
      Club_BlackListCtrl.prototype.http_reqClubBlacklisRemove = function() {
        true == this.model.bRemove && this.finish();
      };
      __decorate([ property({
        tooltip: "角色名",
        type: cc.Label
      }) ], Club_BlackListCtrl.prototype, "LabUserName", void 0);
      __decorate([ property({
        tooltip: "操作按钮",
        type: cc.Node
      }) ], Club_BlackListCtrl.prototype, "BtnRemove", void 0);
      __decorate([ property({
        tooltip: "角色头像",
        type: cc.Node
      }) ], Club_BlackListCtrl.prototype, "UserHead", void 0);
      Club_BlackListCtrl = __decorate([ ccclass ], Club_BlackListCtrl);
      return Club_BlackListCtrl;
    }(BaseCtrl_1.default);
    exports.default = Club_BlackListCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/ClubMgr": "ClubMgr",
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/UiMgr": "UiMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Club_ChangeIconCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7214buEL3ZAFILFhpX+gXqn", "Club_ChangeIconCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var ClubMgr_1 = require("../../GameMgrs/ClubMgr");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.club_id = null;
        _this.club_id = BehaviorMgr_1.default.getInstance().getClubSelectId();
        return _this;
      }
      Model.prototype.getClubId = function() {
        return this.club_id;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_close: null,
          icon_list: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_close = ctrl.node_close;
        this.ui.icon_list = ctrl.icon_list;
      };
      return View;
    }(BaseView_1.default);
    var Club_ChangeIconCtrl = function(_super) {
      __extends(Club_ChangeIconCtrl, _super);
      function Club_ChangeIconCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_close = null;
        _this.icon_list = null;
        return _this;
      }
      Club_ChangeIconCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Club_ChangeIconCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqClubChangeAvater": this.http_reqClubChangeAvater
        };
      };
      Club_ChangeIconCtrl.prototype.defineGlobalEvents = function() {};
      Club_ChangeIconCtrl.prototype.connectUi = function() {
        var _this = this;
        this.connect(G_UiType.image, this.ui.node_close, this.node_close_cb, "退出");
        var count = this.ui.icon_list.childrenCount;
        var _loop_1 = function(i) {
          var node = this_1.ui.icon_list.children[i];
          this_1.connect(G_UiType.image, node, function(node, event) {
            var index = i + 1;
            _this.node_icon_cb(index, node, event);
          }, "图标点击");
        };
        var this_1 = this;
        for (var i = 0; i < count; i++) _loop_1(i);
      };
      Club_ChangeIconCtrl.prototype.start = function() {};
      Club_ChangeIconCtrl.prototype.http_reqClubChangeAvater = function() {
        this.finish();
      };
      Club_ChangeIconCtrl.prototype.node_close_cb = function(node, event) {
        console.log("node_close_cb");
        this.finish();
      };
      Club_ChangeIconCtrl.prototype.node_icon_cb = function(index, node, event) {
        console.log("node_icon_cb");
        var id = this.model.getClubId();
        ClubMgr_1.default.getInstance().reqClubChangeIcon(id, index);
        this.changClubList();
      };
      Club_ChangeIconCtrl.prototype.changClubList = function() {
        var club_id = this.model.getClubId();
        ClubMgr_1.default.getInstance().changeClubList(club_id);
        this.gemit("refreshClubList");
      };
      __decorate([ property(cc.Node) ], Club_ChangeIconCtrl.prototype, "node_close", void 0);
      __decorate([ property(cc.Node) ], Club_ChangeIconCtrl.prototype, "icon_list", void 0);
      Club_ChangeIconCtrl = __decorate([ ccclass ], Club_ChangeIconCtrl);
      return Club_ChangeIconCtrl;
    }(BaseCtrl_1.default);
    exports.default = Club_ChangeIconCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/ClubMgr": "ClubMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Club_ChangeNameCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "380e7x0RRNCqp0gnamzmCwg", "Club_ChangeNameCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var ClubMgr_1 = require("../../GameMgrs/ClubMgr");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var ChatFillterMgr_1 = require("../../GameMgrs/ChatFillterMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.name = null;
        _this.club_id = null;
        _this.name = "";
        _this.club_id = BehaviorMgr_1.default.getInstance().getClubSelectId();
        return _this;
      }
      Model.prototype.getClubName = function() {
        return this.name;
      };
      Model.prototype.setClubName = function(name) {
        this.name = name;
      };
      Model.prototype.getClubId = function() {
        return this.club_id;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_close: null,
          node_edit: null,
          btn_confirm: null,
          edit_club_name: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.btn_close = ctrl.btn_close;
        this.ui.node_edit = ctrl.node_edit;
        this.ui.btn_confirm = ctrl.btn_confirm;
        this.ui.edit_club_name = this.ui.node_edit.getComponent(cc.EditBox);
      };
      return View;
    }(BaseView_1.default);
    var Club_ChangeNameCtrl = function(_super) {
      __extends(Club_ChangeNameCtrl, _super);
      function Club_ChangeNameCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_close = null;
        _this.node_edit = null;
        _this.btn_confirm = null;
        return _this;
      }
      Club_ChangeNameCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Club_ChangeNameCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqClubChangeName": this.http_reqClubChangeName
        };
      };
      Club_ChangeNameCtrl.prototype.defineGlobalEvents = function() {};
      Club_ChangeNameCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_close, this.btn_close_cb, "退出");
        this.connect(G_UiType.image, this.ui.btn_confirm, this.btn_confirm_cb, "确认");
        this.connect(G_UiType.edit, this.ui.node_edit, this.node_edit_cb, "监听输入框");
      };
      Club_ChangeNameCtrl.prototype.start = function() {};
      Club_ChangeNameCtrl.prototype.http_reqClubChangeName = function() {
        this.finish();
      };
      Club_ChangeNameCtrl.prototype.btn_close_cb = function(node, event) {
        console.log("btn_close_cb");
        this.finish();
      };
      Club_ChangeNameCtrl.prototype.btn_confirm_cb = function(node, event) {
        console.log("btn_confirm_cb");
        if ("" == this.model.getClubName()) {
          FrameMgr_1.default.getInstance().showTips("请输入茶馆名称！");
          return;
        }
        if (ChatFillterMgr_1.default.getInstance().isEmojiCharacter(this.model.getClubName())) {
          FrameMgr_1.default.getInstance().showTips("输入非法字符，请重新输入");
          return;
        }
        ClubMgr_1.default.getInstance().reqClubChangeName(this.model.getClubId(), this.model.getClubName());
        this.changClubList();
      };
      Club_ChangeNameCtrl.prototype.node_edit_cb = function(str, event) {
        console.log("node_edit_cb");
        if ("editing-did-ended" == str) {
          var content = this.ui.edit_club_name.string;
          this.model.setClubName(content);
        }
      };
      Club_ChangeNameCtrl.prototype.changClubList = function() {
        var club_id = this.model.getClubId();
        ClubMgr_1.default.getInstance().changeClubList(club_id);
        this.gemit("refreshClubList");
      };
      __decorate([ property(cc.Node) ], Club_ChangeNameCtrl.prototype, "btn_close", void 0);
      __decorate([ property(cc.Node) ], Club_ChangeNameCtrl.prototype, "node_edit", void 0);
      __decorate([ property(cc.Node) ], Club_ChangeNameCtrl.prototype, "btn_confirm", void 0);
      Club_ChangeNameCtrl = __decorate([ ccclass ], Club_ChangeNameCtrl);
      return Club_ChangeNameCtrl;
    }(BaseCtrl_1.default);
    exports.default = Club_ChangeNameCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/ChatFillterMgr": "ChatFillterMgr",
    "../../GameMgrs/ClubMgr": "ClubMgr",
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Club_ChatRoomEnterCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3a9favL/LxMI6N2Plycmgeu", "Club_ChatRoomEnterCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var RoomMgr_1 = require("../../GameMgrs/RoomMgr");
    var SubGameMgr_1 = require("../../GameMgrs/SubGameMgr");
    var GameCateCfg_1 = require("../../CfgMgrs/GameCateCfg");
    var RoomCostCfg_1 = require("../../CfgMgrs/RoomCostCfg");
    var ClubMgr_1 = require("../../GameMgrs/ClubMgr");
    var UiMgr_1 = require("../../GameMgrs/UiMgr");
    var RoomOptionCfg_1 = require("../../CfgMgrs/RoomOptionCfg");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var CLUB_ROOM_PAY_SOURCE = {
      ROOM_CREATE_SELF: 1,
      ROOM_CREATE_CLUB: 2
    };
    var CLUB_ROOM_PAY_TYPE = {
      TYPE_SELF: 0,
      TYPE_AA: 1,
      TYPE_WIN: 2
    };
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.room_data = null;
        _this.room_data = BehaviorMgr_1.default.getInstance().getClubRoomData();
        console.log(_this.room_data);
        return _this;
      }
      Model.prototype.getRoomId = function() {
        return this.room_data.id;
      };
      Model.prototype.getClubRoomType = function() {
        var games = GameCateCfg_1.default.getInstance().getGameById(this.room_data.type);
        var type_name = games.name;
        return type_name;
      };
      Model.prototype.getClubRoomPayType = function() {
        var type_name = this.getPayTypeName(this.room_data.payType);
        var pay_count = 0;
        if (0 == this.room_data.roundMax) pay_count = RoomCostCfg_1.default.getInstance().getRoomCost(GameCateCfg_1.default.getInstance().getGameById(this.room_data.type).code, 1, this.room_data.roundMax, this.room_data.countMax, this.room_data.type); else {
          console.log("支付的类型是什么" + this.room_data.payType);
          console.log("游戏名字" + GameCateCfg_1.default.getInstance().getGameById(this.room_data.type).code);
          pay_count = RoomCostCfg_1.default.getInstance().getRoomCost(GameCateCfg_1.default.getInstance().getGameById(this.room_data.type).code, 0, this.room_data.roundMax, this.room_data.countMax, this.room_data.payType);
        }
        return type_name + ":" + pay_count;
      };
      Model.prototype.getClubRoomPaySource = function() {
        return this.room_data.paySource;
      };
      Model.prototype.getClubRoomCount = function() {
        return this.room_data.count + "/" + this.room_data.countMax;
      };
      Model.prototype.getClubRoomRound = function() {
        if (0 == this.room_data.roundMax) return "1课";
        return this.room_data.round + "/" + this.room_data.roundMax;
      };
      Model.prototype.getClubRoomTime = function() {
        return this.room_data.time;
      };
      Model.prototype.getClubRoomState = function() {
        return this.room_data.state;
      };
      Model.prototype.getClubPaySource = function() {
        return this.room_data.paySource;
      };
      Model.prototype.getClubRoomInfo = function() {
        var roomInfo = this.room_data.countMax + "人，";
        null != this.room_data.youjintype && void 0 != this.room_data.youjintype && 1 == this.room_data.type && (roomInfo = roomInfo + RoomOptionCfg_1.default.getInstance().getRoomDescToString(this.room_data.type, {
          t_youjin: this.room_data.youjintype
        }) + "，");
        0 == this.room_data.roundMax ? roomInfo += "1课\n" : roomInfo = roomInfo + this.room_data.roundMax + "局\n";
        roomInfo += "茶馆支付";
        return roomInfo;
      };
      Model.prototype.getClubRoomData = function() {
        return this.room_data;
      };
      Model.prototype.setClubRoomData = function(data) {
        this.room_data.state = data.state;
        if (1 == this.room_data.state) {
          this.room_data.count = data.count;
          this.room_data.round = data.round;
        }
        this.room_data.userheads = data.userheads;
      };
      Model.prototype.getClubRoomOpen = function() {
        return this.room_data.disableotherenter;
      };
      Model.prototype.getClubRoomMember = function() {
        return this.room_data.count >= this.room_data.countMax;
      };
      Model.prototype.getPayTypeName = function(type) {
        var strName = "";
        switch (type) {
         case CLUB_ROOM_PAY_TYPE.TYPE_SELF:
          strName = "房主支付";
          break;

         case CLUB_ROOM_PAY_TYPE.TYPE_AA:
          strName = "AA制支付";
          break;

         case CLUB_ROOM_PAY_TYPE.TYPE_WIN:
          strName = "赢家支付";
        }
        return strName;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          label_roomid: null,
          label_type: null,
          label_pay: null,
          label_count: null,
          label_round: null,
          label_time: null,
          node_enter: null,
          node_bottom_1: null,
          node_club: null,
          btn_club: null,
          label_roomInfo: null,
          node_users: null,
          node_roomState: null,
          node_roomInWait: null,
          node_roomInGame: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.label_roomid = ctrl.label_roomid;
        this.ui.label_type = ctrl.label_type;
        this.ui.label_pay = ctrl.label_pay;
        this.ui.label_count = ctrl.label_count;
        this.ui.label_round = ctrl.label_round;
        this.ui.label_time = ctrl.label_time;
        this.ui.node_enter = ctrl.node_enter;
        this.ui.node_bottom_1 = ctrl.node_bottom_1;
        this.ui.node_club = ctrl.node_club;
        this.ui.btn_club = ctrl.btn_club;
        this.ui.label_roomInfo = ctrl.label_roomInfo;
        this.ui.node_users = ctrl.node_users;
        this.ui.node_roomState = ctrl.node_roomState;
        this.ui.node_roomInGame = ctrl.node_roomState.getChildByName("ingame");
        this.ui.node_roomInWait = ctrl.node_roomState.getChildByName("waiting");
        this.refreshUi();
      };
      View.prototype.refreshUi = function() {
        this.refreshRoomID();
        this.refreshRoomType();
        this.refreshRoomPay();
        this.refreshRoomCount();
        this.refreshRoomRound();
        this.refreshRoomTime();
        this.refreshRoomInfo();
        this.refreshRoomUsers();
        this.refreshEnter();
        this.refreshPayType();
        this.refreshRoomState();
      };
      View.prototype.refreshRoomID = function() {
        this.ui.label_roomid.string = this.model.getRoomId();
      };
      View.prototype.refreshRoomType = function() {
        this.ui.label_type.string = this.model.getClubRoomType();
      };
      View.prototype.refreshRoomInfo = function() {
        this.ui.label_roomInfo.string = this.model.getClubRoomInfo();
      };
      View.prototype.refreshRoomUsers = function() {
        for (var userIdx = 0; userIdx < this.ui.node_users.children.length; userIdx++) {
          var user = this.ui.node_users.children[userIdx];
          user.active = false;
        }
        if (this.model.room_data.userheads) {
          var self = this;
          for (var userIdx = 0; userIdx < this.model.room_data.userheads.length; userIdx++) {
            var user = this.ui.node_users.children[userIdx];
            if (userIdx > 3) return;
            user.active = true;
            "number" == typeof this.model.room_data.userheads[userIdx] ? UiMgr_1.default.getInstance().setUserHead(user, this.model.room_data.userheads[userIdx]) : UiMgr_1.default.getInstance().setUserHead(user, 0, this.model.room_data.userheads[userIdx]);
          }
        }
        console.log("userheads", this.model.room_data.userheads);
      };
      View.prototype.refreshRoomPay = function() {
        this.ui.label_pay.string = this.model.getClubRoomPayType();
      };
      View.prototype.refreshRoomCount = function() {
        this.ui.label_count.string = this.model.getClubRoomCount();
      };
      View.prototype.refreshRoomRound = function() {
        this.ui.label_round.string = this.model.getClubRoomRound();
      };
      View.prototype.refreshRoomTime = function() {
        0 == this.model.getClubRoomState() ? this.ui.label_time.string = "已结束" : this.ui.label_time.string = this.model.getClubRoomTime();
      };
      View.prototype.refreshPayType = function() {
        2 == this.model.getClubPaySource(), this.ui.node_club.active = false;
      };
      View.prototype.refreshEnter = function() {
        if (0 == this.model.getClubRoomState() || 1 == this.model.getClubRoomOpen() || this.model.getClubRoomMember()) {
          this.ui.node_enter.active = false;
          this.ui.btn_club.active = false;
          this.ui.btn_club.pauseSystemEvents();
        } else {
          this.ui.node_enter.active = true;
          this.ui.btn_club.active = true;
          this.ui.btn_club.resumeSystemEvents();
        }
      };
      View.prototype.refreshRoomState = function() {
        if (1 == this.model.room_data.state) {
          this.ui.node_roomInWait.active = true;
          this.ui.node_roomInGame.active = false;
        } else {
          this.ui.node_roomInWait.active = false;
          this.ui.node_roomInGame.active = true;
        }
      };
      return View;
    }(BaseView_1.default);
    var Club_ChatRoomEnterCtrl = function(_super) {
      __extends(Club_ChatRoomEnterCtrl, _super);
      function Club_ChatRoomEnterCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label_roomid = null;
        _this.label_type = null;
        _this.label_pay = null;
        _this.label_count = null;
        _this.label_round = null;
        _this.label_time = null;
        _this.label_roomInfo = null;
        _this.node_enter = null;
        _this.node_bottom_1 = null;
        _this.node_club = null;
        _this.btn_club = null;
        _this.node_users = null;
        _this.node_roomState = null;
        return _this;
      }
      Club_ChatRoomEnterCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Club_ChatRoomEnterCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqFangKaCfg": this.http_reqFangKaCfg,
          "ws.onClubChat": this.ws_onClubChat
        };
      };
      Club_ChatRoomEnterCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          chat_room_refresh: this.chat_room_refresh
        };
      };
      Club_ChatRoomEnterCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_club, this.node_enter_cb, "点击关闭");
      };
      Club_ChatRoomEnterCtrl.prototype.start = function() {};
      Club_ChatRoomEnterCtrl.prototype.http_reqFangKaCfg = function(msg) {
        var gameid = msg.cfg.gameid;
        var game = GameCateCfg_1.default.getInstance().getGameById(gameid);
        var state = SubGameMgr_1.default.getInstance().getSubGameState(game.code);
        if (0 != state) {
          FrameMgr_1.default.getInstance().showTips("此游戏未下载,请到创建房间模块去下载子游戏", null, 35, cc.color(255, 0, 0), cc.p(0, 0), "Arial", 1e3);
          return;
        }
        this.finish();
        console.log("防止重复监听了");
        RoomMgr_1.default.getInstance().isLoadingGame() || RoomMgr_1.default.getInstance().reqFangKaVerify(this.model.getRoomId());
      };
      Club_ChatRoomEnterCtrl.prototype.ws_onClubChat = function(msg) {
        console.log("ws_onClubChat1", msg);
        if (msg.type == CLUB_CHAT_TYPE.TYPE_ROOM_MODIFICATION) {
          var roomId = this.model.getRoomId();
          if (roomId == msg.room_data.id) {
            this.model.setClubRoomData(msg.room_data);
            this.view.refreshUi();
          }
        }
      };
      Club_ChatRoomEnterCtrl.prototype.chat_room_refresh = function() {
        this.view.refreshEnter();
      };
      Club_ChatRoomEnterCtrl.prototype.node_enter_cb = function(node, event) {
        console.log("node_enter_cb");
        var roomId = this.model.getRoomId();
        RoomMgr_1.default.getInstance().reqFangKaCfg(roomId);
        var club_id = BehaviorMgr_1.default.getInstance().getClubSelectId();
        ClubMgr_1.default.getInstance().changeClubList(club_id);
        this.gemit("refreshClubList");
      };
      __decorate([ property(cc.Label) ], Club_ChatRoomEnterCtrl.prototype, "label_roomid", void 0);
      __decorate([ property(cc.Label) ], Club_ChatRoomEnterCtrl.prototype, "label_type", void 0);
      __decorate([ property(cc.Label) ], Club_ChatRoomEnterCtrl.prototype, "label_pay", void 0);
      __decorate([ property(cc.Label) ], Club_ChatRoomEnterCtrl.prototype, "label_count", void 0);
      __decorate([ property(cc.Label) ], Club_ChatRoomEnterCtrl.prototype, "label_round", void 0);
      __decorate([ property(cc.Label) ], Club_ChatRoomEnterCtrl.prototype, "label_time", void 0);
      __decorate([ property(cc.Label) ], Club_ChatRoomEnterCtrl.prototype, "label_roomInfo", void 0);
      __decorate([ property(cc.Node) ], Club_ChatRoomEnterCtrl.prototype, "node_enter", void 0);
      __decorate([ property(cc.Node) ], Club_ChatRoomEnterCtrl.prototype, "node_bottom_1", void 0);
      __decorate([ property(cc.Node) ], Club_ChatRoomEnterCtrl.prototype, "node_club", void 0);
      __decorate([ property(cc.Node) ], Club_ChatRoomEnterCtrl.prototype, "btn_club", void 0);
      __decorate([ property(cc.Node) ], Club_ChatRoomEnterCtrl.prototype, "node_users", void 0);
      __decorate([ property(cc.Node) ], Club_ChatRoomEnterCtrl.prototype, "node_roomState", void 0);
      Club_ChatRoomEnterCtrl = __decorate([ ccclass ], Club_ChatRoomEnterCtrl);
      return Club_ChatRoomEnterCtrl;
    }(BaseCtrl_1.default);
    exports.default = Club_ChatRoomEnterCtrl;
    cc._RF.pop();
  }, {
    "../../CfgMgrs/GameCateCfg": "GameCateCfg",
    "../../CfgMgrs/RoomCostCfg": "RoomCostCfg",
    "../../CfgMgrs/RoomOptionCfg": "RoomOptionCfg",
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/ClubMgr": "ClubMgr",
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/RoomMgr": "RoomMgr",
    "../../GameMgrs/SubGameMgr": "SubGameMgr",
    "../../GameMgrs/UiMgr": "UiMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Club_CreateCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "73fa2GXOlhBmZdI4uze1CeC", "Club_CreateCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var ClubMgr_1 = require("../../GameMgrs/ClubMgr");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var ChatFillterMgr_1 = require("../../GameMgrs/ChatFillterMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.iconCallOpen = false;
        _this.iconId = 0;
        _this.name = null;
        _this.name = "";
        return _this;
      }
      Model.prototype.setIconCallOpen = function(data) {
        this.iconCallOpen = data;
      };
      Model.prototype.getIconCallOpen = function() {
        return this.iconCallOpen;
      };
      Model.prototype.getIconId = function() {
        return this.iconId;
      };
      Model.prototype.setIconId = function(id) {
        this.iconId = id;
      };
      Model.prototype.getClubName = function() {
        return this.name;
      };
      Model.prototype.setClubName = function(name) {
        this.name = name;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_close: null,
          btn_create: null,
          btn_icon_open: null,
          btn_icon_close: null,
          btn_icon_frame: null,
          btn_icons: null,
          node_club_name: null,
          edit_club_name: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.btn_close = ctrl.btn_close;
        this.ui.btn_create = ctrl.btn_create;
        this.ui.btn_icon_open = ctrl.btn_icon_open;
        this.ui.btn_icon_close = ctrl.btn_icon_close;
        this.ui.btn_icon_frame = ctrl.btn_icon_frame;
        this.ui.btn_icons = ctrl.btn_icons;
        this.ui.node_club_name = ctrl.node_club_name;
        this.ui.edit_club_name = ctrl.edit_club_name;
      };
      View.prototype.refreshIcon = function(node) {
        var pic = this.ui.btn_icon_open.getComponent(cc.Sprite), btns = node;
        if (null == btns) {
          console.log("node : null :" + node);
          return;
        }
        var sprPic = btns.getComponent(cc.Sprite);
        pic.spriteFrame = sprPic.spriteFrame;
      };
      View.prototype.OpenIconList = function() {
        this.ui.btn_icon_frame.active = true;
      };
      View.prototype.CloseIconList = function() {
        this.ui.btn_icon_frame.active = false;
      };
      return View;
    }(BaseView_1.default);
    var Club_CreateCtrl = function(_super) {
      __extends(Club_CreateCtrl, _super);
      function Club_CreateCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_close = null;
        _this.btn_create = null;
        _this.btn_icon_open = null;
        _this.btn_icon_close = null;
        _this.btn_icon_frame = null;
        _this.btn_icons = null;
        _this.node_club_name = null;
        _this.edit_club_name = null;
        return _this;
      }
      Club_CreateCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Club_CreateCtrl.prototype.defineNetEvents = function() {};
      Club_CreateCtrl.prototype.defineGlobalEvents = function() {
        this.n_events = {
          "http.reqClubCreate": this.http_reqClubCreate
        };
      };
      Club_CreateCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_close, this.btn_close_cb, "关闭界面");
        this.connect(G_UiType.image, this.ui.btn_create, this.btn_create_cb, "创建界面");
        this.connect(G_UiType.image, this.ui.btn_icon_open, this.btn_icon_open_cb, "开启头像选择");
        this.connect(G_UiType.image, this.ui.btn_icon_close, this.btn_icon_close_cb, "关闭头像选择");
        this.connect(G_UiType.edit, this.ui.node_club_name, this.node_club_name_cb, "监听输入框");
      };
      Club_CreateCtrl.prototype.addTypeCallBak = function() {
        var _this = this;
        if (true == this.model.getIconCallOpen()) return;
        this.model.setIconCallOpen(true);
        var count = this.view.ui.btn_icons.childrenCount, btns = this.view.ui.btn_icons.children;
        console.log("count:" + count);
        var _loop_1 = function(i) {
          var curBtn = btns[i];
          this_1.connect(G_UiType.image, curBtn, function(node, event) {
            var index = i + 1;
            _this.node_icon_cb(index, node, event);
          }, "图标:btn_" + i);
        };
        var this_1 = this;
        for (var i = 0; i < count; i++) _loop_1(i);
      };
      Club_CreateCtrl.prototype.start = function() {};
      Club_CreateCtrl.prototype.http_reqClubCreate = function() {
        ClubMgr_1.default.getInstance().reqClubList();
        UserMgr_1.default.getInstance().reqMyInfo();
        this.finish();
      };
      Club_CreateCtrl.prototype.btn_close_cb = function(node, event) {
        console.log("btn_close_cb");
        this.finish();
      };
      Club_CreateCtrl.prototype.btn_create_cb = function(node, event) {
        console.log("btn_create_cb:" + this.model.getClubName());
        if ("" == this.model.getClubName()) {
          FrameMgr_1.default.getInstance().showTips("请输入茶馆名称！");
          return;
        }
        if (ChatFillterMgr_1.default.getInstance().isEmojiCharacter(this.model.getClubName())) {
          FrameMgr_1.default.getInstance().showTips("输入非法字符，请重新输入");
          return;
        }
        ClubMgr_1.default.getInstance().reqCreate(this.model.getIconId(), this.model.getClubName());
      };
      Club_CreateCtrl.prototype.node_club_name_cb = function(str, event) {
        console.log("node_club_name_cb");
        if ("editing-did-ended" == str) {
          var content = this.ui.edit_club_name.string;
          this.model.setClubName(content);
        }
      };
      Club_CreateCtrl.prototype.btn_icon_open_cb = function(node, event) {
        this.view.OpenIconList();
        this.addTypeCallBak();
      };
      Club_CreateCtrl.prototype.btn_icon_close_cb = function(node, event) {
        this.view.CloseIconList();
      };
      Club_CreateCtrl.prototype.node_icon_cb = function(index, node, event) {
        this.model.setIconId(index);
        this.view.refreshIcon(node);
        this.view.CloseIconList();
      };
      __decorate([ property(cc.Node) ], Club_CreateCtrl.prototype, "btn_close", void 0);
      __decorate([ property(cc.Node) ], Club_CreateCtrl.prototype, "btn_create", void 0);
      __decorate([ property(cc.Node) ], Club_CreateCtrl.prototype, "btn_icon_open", void 0);
      __decorate([ property(cc.Node) ], Club_CreateCtrl.prototype, "btn_icon_close", void 0);
      __decorate([ property(cc.Node) ], Club_CreateCtrl.prototype, "btn_icon_frame", void 0);
      __decorate([ property(cc.Node) ], Club_CreateCtrl.prototype, "btn_icons", void 0);
      __decorate([ property(cc.Node) ], Club_CreateCtrl.prototype, "node_club_name", void 0);
      __decorate([ property(cc.EditBox) ], Club_CreateCtrl.prototype, "edit_club_name", void 0);
      Club_CreateCtrl = __decorate([ ccclass ], Club_CreateCtrl);
      return Club_CreateCtrl;
    }(BaseCtrl_1.default);
    exports.default = Club_CreateCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/ChatFillterMgr": "ChatFillterMgr",
    "../../GameMgrs/ClubMgr": "ClubMgr",
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Club_LobbyChatCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d710eEGZFhAep9NabPLgHpm", "Club_LobbyChatCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var RichTextMgr_1 = require("../../GameMgrs/RichTextMgr");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var ClubChatMgr_1 = require("../../GameMgrs/ClubChatMgr");
    var UiMgr_1 = require("../../GameMgrs/UiMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var CHAT_POS_TYPE = cc.Enum({
      POS_PLAYER: 0,
      POS_FRIEND: 1
    });
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.chat_max = 0;
        _this.char_offset_x = 150;
        _this.char_offset_y = 140;
        _this.myinfo = null;
        _this.myinfo = UserMgr_1.default.getInstance().getMyInfo();
        _this.chat_max = ClubChatMgr_1.default.getInstance().getClubChatMax();
        return _this;
      }
      Model.prototype.getChatStripMax = function() {
        return this.chat_max;
      };
      Model.prototype.getUserId = function() {
        return this.myinfo.id;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_chat_list: null,
          scroll_chatView: null,
          node_chatStrip1: null,
          node_chatStrip2: null,
          node_room_enter: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_chat_list = ctrl.node_chat_list;
        this.ui.scroll_chatView = ctrl.scroll_chatView;
        this.ui.node_chatStrip1 = ctrl.node_chatStrip1;
        this.ui.node_chatStrip2 = ctrl.node_chatStrip2;
        this.ui.node_room_enter = ctrl.node_room_enter;
      };
      View.prototype.setChatStripIcon = function(node, icon) {
        var node_icon = node.getChildByName("player_icon");
        null != icon && ("number" == typeof icon ? UiMgr_1.default.getInstance().setUserHead(node_icon, icon) : UiMgr_1.default.getInstance().setUserHead(node_icon, 0, icon));
      };
      View.prototype.setChatStripName = function(node, name) {
        var node_name = node.getChildByName("player_name");
        var text_name = node_name.getComponent(cc.Label);
        text_name.string = name;
      };
      View.prototype.addRoomEnter = function(node, id) {
        var node_enter = cc.instantiate(this.ui.node_room_enter);
        node_enter.parent = node;
        node_enter.x = 0;
        node_enter.y = -this.model.char_offset_y / 2;
        node.height = node.height + node_enter.height / 4;
      };
      View.prototype.setChatStripContent = function(node, data) {
        var btn_strip = null, color = "#89704C", node_chat = node.getChildByName("chat_text"), node_botton = node.getChildByName("chat_botton"), node_icon = node.getChildByName("player_icon"), node_name = node.getChildByName("player_name"), node_pic = node.getChildByName("player_pic");
        node_botton.active = false;
        node_icon.active = false;
        node_name.active = false;
        var rich_chat = node_chat.getComponent(cc.RichText);
        var rich_data = RichTextMgr_1.default.getInstance();
        var chat_x = 30;
        rich_chat.string = "";
        switch (data.type) {
         case CLUB_CHAT_TYPE.TYPE_LABEL:
          node_chat.active = true;
          rich_chat.string = rich_data.richTextColor(data.text, color);
          node_botton.active = true;
          node_botton.width = node_chat.width + chat_x;
          break;

         case CLUB_CHAT_TYPE.TYPE_BLEND:
          node_chat.active = true;
          rich_chat.string = rich_data.richTextBlend(data.text, color);
          node_botton.active = true;
          node_botton.width = node_chat.width + chat_x;
          break;

         case CLUB_CHAT_TYPE.TYPE_VOICE:
          node_pic.active = true;
          btn_strip = node_pic;
          break;

         case CLUB_CHAT_TYPE.TYPE_ROOM_ENTER:
          BehaviorMgr_1.default.getInstance().setClubRoomData(data.room_data);
          this.addRoomEnter(node, data.id);
        }
        return btn_strip;
      };
      View.prototype.addChatStrip = function(data) {
        var add_node = null;
        add_node = data.id == this.model.getUserId() ? cc.instantiate(this.ui.node_chatStrip2) : cc.instantiate(this.ui.node_chatStrip1);
        if (null == add_node) return;
        add_node.active = true;
        add_node.x = 0;
        add_node.parent = this.ui.node_chat_list;
        this.setChatStripIcon(add_node, data.icon);
        this.setChatStripName(add_node, data.name);
        var btn_strip = this.setChatStripContent(add_node, data);
        this.refreshChatList();
        return btn_strip;
      };
      View.prototype.refreshChatList = function() {
        var height = 0, layout = this.ui.node_chat_list.getComponent(cc.Layout), gapTop = layout.paddingTop, gapBottom = layout.paddingBottom, gapY = layout.spacingY, count = this.ui.node_chat_list.childrenCount;
        if (count > this.model.getChatStripMax()) {
          this.ui.node_chat_list.children[0].destroy();
          count = this.ui.node_chat_list.childrenCount;
        }
        height += gapTop;
        height += gapBottom;
        height += (count - 1) * gapY;
        for (var i = 0; i < count; i++) {
          var node = this.ui.node_chat_list.children[i];
          height += node.height;
        }
        if (this.ui.node_chat_list.height < height) {
          this.ui.node_chat_list.height = height;
          this.ui.scroll_chatView.scrollToBottom(0);
        }
      };
      View.prototype.removeChatList = function() {
        this.ui.node_chat_list.destroyAllChildren();
        this.ui.node_chat_list.removeAllChildren();
        this.ui.node_chat_list.height = this.ui.node_chat_list.parent.height;
      };
      return View;
    }(BaseView_1.default);
    var Club_LobbyChatCtrl = function(_super) {
      __extends(Club_LobbyChatCtrl, _super);
      function Club_LobbyChatCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_chat_list = null;
        _this.scroll_chatView = null;
        _this.node_chatStrip1 = null;
        _this.node_chatStrip2 = null;
        _this.node_room_enter = null;
        return _this;
      }
      Club_LobbyChatCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.initChatContent();
      };
      Club_LobbyChatCtrl.prototype.initChatContent = function() {
        var club_id = BehaviorMgr_1.default.getInstance().getClubSelectId(), chat_list = ClubChatMgr_1.default.getInstance().getClubChat(club_id), chat_count = chat_list.length;
        if (null != chat_count) for (var i = 0; i < chat_count; i++) {
          var data = chat_list[i];
          this.view.addChatStrip(data);
        }
      };
      Club_LobbyChatCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "ws.onClubChat": this.ws_onClubChat
        };
      };
      Club_LobbyChatCtrl.prototype.defineGlobalEvents = function() {};
      Club_LobbyChatCtrl.prototype.connectUi = function() {};
      Club_LobbyChatCtrl.prototype.start = function() {};
      Club_LobbyChatCtrl.prototype.ws_onClubChat = function(msg) {
        console.log("ws_onClubChat2", msg);
        if (msg.type == CLUB_CHAT_TYPE.TYPE_ROOM_MODIFICATION) {
          if (0 == msg.room_data.state) {
            this.view.removeChatList();
            this.initChatContent();
          }
          return;
        }
        var club_id = BehaviorMgr_1.default.getInstance().getClubSelectId();
        club_id == msg.clubid && this.view.addChatStrip(msg);
      };
      __decorate([ property(cc.Node) ], Club_LobbyChatCtrl.prototype, "node_chat_list", void 0);
      __decorate([ property(cc.ScrollView) ], Club_LobbyChatCtrl.prototype, "scroll_chatView", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyChatCtrl.prototype, "node_chatStrip1", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyChatCtrl.prototype, "node_chatStrip2", void 0);
      __decorate([ property(cc.Prefab) ], Club_LobbyChatCtrl.prototype, "node_room_enter", void 0);
      Club_LobbyChatCtrl = __decorate([ ccclass ], Club_LobbyChatCtrl);
      return Club_LobbyChatCtrl;
    }(BaseCtrl_1.default);
    exports.default = Club_LobbyChatCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/ClubChatMgr": "ClubChatMgr",
    "../../GameMgrs/RichTextMgr": "RichTextMgr",
    "../../GameMgrs/UiMgr": "UiMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Club_LobbyCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "afebbLqWC9Bh426Xy0uMglN", "Club_LobbyCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var ClubMgr_1 = require("../../GameMgrs/ClubMgr");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var SwitchMgr_1 = require("../../GameMgrs/SwitchMgr");
    var AppInfoMgr_1 = require("../../../AppStart/AppMgrs/AppInfoMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var RIGHT_BTNS = cc.Enum({
      CLUB_CHAT: 0,
      CLUB_ROOM: 1
    });
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.club_list = null;
        _this.club_index = null;
        _this.club_id = null;
        _this.user_identity = null;
        _this.name_max = 4;
        _this.creatSwitch = null;
        _this.club_list = ClubMgr_1.default.getInstance().getClubList();
        _this.setClubIndex(0);
        _this.creatSwitch = SwitchMgr_1.default.getInstance().get_switch_add_club();
        return _this;
      }
      Model.prototype.getClubList = function() {
        this.club_list = ClubMgr_1.default.getInstance().getClubList();
        return this.club_list;
      };
      Model.prototype.refreshClubList = function() {
        this.club_list = ClubMgr_1.default.getInstance().getClubList();
        var club_index = this.getClubIdToIndex(this.club_id);
        this.setClubIndex(club_index);
      };
      Model.prototype.getClubData = function() {
        return this.club_list[this.club_index];
      };
      Model.prototype.getClubIndex = function() {
        return this.club_index;
      };
      Model.prototype.setClubIndex = function(index) {
        this.club_index = index;
        if (0 != this.club_list.length) {
          console.log("setClubIndex", index, this.club_list);
          this.club_id = this.club_list[this.club_index].id;
          BehaviorMgr_1.default.getInstance().setClubSelectId(this.club_id);
          this.user_identity = ClubMgr_1.default.getInstance().getClubIdentity(this.club_id);
        }
      };
      Model.prototype.getClubId = function() {
        return this.club_id;
      };
      Model.prototype.getClubIdToIndex = function(id) {
        var list = this.getClubList();
        for (var i = 0; i < list.length; i++) {
          var data = list[i];
          if (id == data.id) return i;
        }
        return 0;
      };
      Model.prototype.getIdentity = function() {
        return this.user_identity;
      };
      Model.prototype.updateSwitch = function(msg) {
        this.creatSwitch = msg.cfg.switch_add_club;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          prefab_top_btns: null,
          prefab_botton_frame: null,
          frame_top_btns: null,
          btn_close: null,
          node_top_frame: null,
          node_left_btns: null,
          node_left_create: null,
          node_left_enter1: null,
          node_left_enter: null,
          node_right_frame: null,
          node_club_member: null,
          node_club_diamond: null,
          node_room_frame: null,
          node_botton_frame: null,
          label_club_id: null,
          label_club_diamond: null,
          node_club_share: null,
          member_count_color: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.prefab_top_btns = ctrl.prefab_top_btns;
        this.ui.prefab_botton_frame = ctrl.prefab_botton_frame;
        this.ui.btn_close = ctrl.btn_close;
        this.ui.node_top_frame = ctrl.node_top_frame;
        this.ui.node_left_btns = ctrl.node_left_btns;
        this.ui.node_left_create = ctrl.node_left_create;
        this.ui.node_left_enter1 = ctrl.node_left_enter1;
        this.ui.node_left_enter = ctrl.node_left_enter;
        this.ui.node_right_frame = ctrl.node_right_frame;
        this.ui.node_club_member = ctrl.node_club_member;
        this.ui.node_club_diamond = ctrl.node_club_diamond;
        this.ui.label_club_id = ctrl.label_club_id;
        this.ui.label_club_diamond = ctrl.label_club_diamond;
        this.ui.node_club_share = ctrl.node_club_share;
        this.ui.member_count_color = ctrl.member_count_color;
        this.ui.node_left_create.active = false;
        this.showCreateBtn();
        this.addRightFrame();
        this.refreshClubId();
        this.refreshClubDiamond();
        this.refreshClubRecharge();
      };
      View.prototype.refreshResreshUi = function() {
        var list = this.model.getClubList();
        for (var i = 0; i < list.length; i++) {
          var data = list[i];
          var mCount = data.nowCount + "/" + data.mMax;
          var node_select = this.addClubMember(data.avater, data.name, data.gameCount, mCount, i);
          if (this.model.getClubId() == data.id) {
            var select = node_select.getComponent(cc.Toggle);
            select.check();
            this.refreshLeftMemberCount(data.id);
          }
        }
      };
      View.prototype.removeResreshUi = function() {
        this.ui.node_left_btns.destroyAllChildren();
        this.ui.node_left_btns.removeAllChildren();
      };
      View.prototype.refreshClubId = function() {
        this.ui.label_club_id.string = this.model.getClubData().no;
      };
      View.prototype.refreshClubDiamond = function() {
        console.log("refreshClubDiamond", this.model.getClubData());
        this.ui.label_club_diamond.string = this.model.getClubData().diamond;
      };
      View.prototype.refreshClubRecharge = function() {
        if (this.model.getIdentity() == IDENTITY_TYPE.CAPTAIN) {
          this.ui.node_club_diamond.active = true;
          this.ui.node_club_diamond.resumeSystemEvents(true);
        } else {
          this.ui.node_club_diamond.active = false;
          this.ui.node_club_diamond.pauseSystemEvents(true);
        }
      };
      View.prototype.refreshLeftIcon = function(id) {};
      View.prototype.refreshLeftName = function(id) {
        var club_index = this.model.getClubIdToIndex(id), data = this.model.getClubList()[club_index], node_member = this.ui.node_left_btns.children[club_index];
        var node_name = node_member.getChildByName("club_name");
        var label_name = node_name.getComponent(cc.Label);
        label_name.string = this.CutOutChat(data.name, this.model.name_max);
      };
      View.prototype.refreshLeftCount = function(id) {
        var club_index = this.model.getClubIdToIndex(id), data = this.model.getClubList()[club_index], node_member = this.ui.node_left_btns.children[club_index];
        var node_count = node_member.getChildByName("checkmark").getChildByName("count");
        var label_count = node_count.getComponent(cc.Label);
        label_count.string = data.gameCount + "桌";
        node_member.getChildByName("nonTopNode").getChildByName("count").getComponent(cc.Label).string = data.gameCount + "桌";
      };
      View.prototype.refreshLeftMemberCount = function(id) {
        var club_index = this.model.getClubIdToIndex(id), data = this.model.getClubList()[club_index], Chat_down = this.ui.node_botton_frame.getChildByName("Chat_down");
        var node_count = Chat_down.getChildByName("member_count");
        var label_count = node_count.getComponent(cc.Label);
        label_count.string = "在线人数:" + data.nowCount + "/" + data.mMax;
        console.log("在线人数", data, id);
      };
      View.prototype.addClubMember = function(icon, name, count, mCount, idx) {
        var node_member = cc.instantiate(this.ui.node_club_member);
        node_member.parent = this.ui.node_left_btns;
        node_member.active = true;
        node_member.x = 0;
        this.refreshClubMemberHeight();
        var node_icon = node_member.getChildByName("club_icon"), node_name = node_member.getChildByName("club_name"), node_count = node_member.getChildByName("checkmark").getChildByName("count"), nonTopNode_count = node_member.getChildByName("nonTopNode").getChildByName("count"), member_count = node_member.getChildByName("member_count");
        if (0 == idx) {
          node_icon.active = false;
          node_member.getChildByName("top").active = false;
        }
        var label_name = node_name.getComponent(cc.Label);
        label_name.string = this.CutOutChat(name, this.model.name_max);
        var label_count = node_count.getComponent(cc.Label);
        label_count.string = count + "桌";
        nonTopNode_count.getComponent(cc.Label).string = count + "桌";
        if (count < 10) {
          label_count.string = count + " 桌";
          nonTopNode_count.getComponent(cc.Label).string = count + " 桌";
        }
        return node_member;
      };
      View.prototype.refreshClubMemberHeight = function() {
        var count = this.ui.node_left_btns.childrenCount, height = 0;
        if (0 != count) {
          var layout = this.ui.node_left_btns.getComponent(cc.Layout), gapTop = layout.paddingTop, gapBottom = layout.paddingBottom, gapY = layout.spacingY, node = this.ui.node_left_btns.children[0];
          height += gapTop;
          height += gapBottom;
          height += (count - 1) * gapY;
          height += node.height * count;
        }
        this.ui.node_left_btns.height = height;
      };
      View.prototype.addRightFrame = function() {
        this.removeRightFrame();
        this.ui.node_botton_frame = cc.instantiate(this.ui.prefab_botton_frame);
        this.ui.node_right_frame.addChild(this.ui.node_botton_frame);
        this.addTopFrame();
      };
      View.prototype.removeRightFrame = function() {
        this.ui.node_right_frame.destroyAllChildren();
        this.refreshClubMemberHeight();
      };
      View.prototype.addTopFrame = function() {
        console.log("this.ui.frame_top_btns", this.ui.frame_top_btns);
        if (null != this.ui.frame_top_btns) {
          this.ui.frame_top_btns.destroy();
          this.ui.frame_top_btns = null;
        }
        this.ui.frame_top_btns = cc.instantiate(this.ui.prefab_top_btns);
        this.ui.node_right_frame.addChild(this.ui.frame_top_btns);
      };
      View.prototype.refreshLobbyOff = function() {
        this.ui.node_left_create.pauseSystemEvents(true);
        this.ui.node_left_enter1.resumeSystemEvents(true);
      };
      View.prototype.refreshLobbyOn = function() {
        this.ui.node_left_create.resumeSystemEvents(true);
        this.ui.node_left_enter1.pauseSystemEvents(true);
      };
      View.prototype.showCreateBtn = function() {
        this.ui.node_left_create.active = 1 == this.model.creatSwitch;
        if (this.ui.node_left_create.active) {
          this.ui.node_left_create.active = true;
          this.ui.node_left_enter1.active = false;
          this.refreshLobbyOn();
        } else {
          this.ui.node_left_create.active = false;
          this.ui.node_left_enter1.active = true;
          this.refreshLobbyOff();
        }
      };
      return View;
    }(BaseView_1.default);
    var Club_LobbyCtrl = function(_super) {
      __extends(Club_LobbyCtrl, _super);
      function Club_LobbyCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.prefab_top_btns = null;
        _this.prefab_botton_frame = null;
        _this.btn_close = null;
        _this.node_top_frame = null;
        _this.node_left_btns = null;
        _this.node_left_create = null;
        _this.node_left_enter1 = null;
        _this.node_left_enter = null;
        _this.node_right_frame = null;
        _this.node_club_member = null;
        _this.node_club_diamond = null;
        _this.label_club_id = null;
        _this.label_club_diamond = null;
        _this.node_club_share = null;
        _this.member_count_color = null;
        return _this;
      }
      Club_LobbyCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.refreshClubList();
      };
      Club_LobbyCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqClubList": this.http_reqClubList,
          "http.reqClubInfo": this.http_reqClubInfo,
          "http.reqClubDissolve": this.http_reqClubDissolve,
          "http.reqClubExit": this.http_reqClubExit,
          "http.reqClubChangeAvater": this.http_reqClubChangeIcon,
          "http.reqClubChangeName": this.http_reqClubChangeName,
          "http.reqClubJoin": this.http_reqClubJoin,
          "http.reqClubBlacklisRemove": this.http_reqClubBlacklisRemove,
          "http.reqClubKick": this.http_reqClubKick,
          "http.reqClubRecharge": this.http_reqClubRecharge,
          "http.reqClubTop": this.http_reqClubTop,
          "http.onClubInfo": this.http_onClubInfo,
          "http.reqGameSwitch": this.http_reqGameSwitch
        };
      };
      Club_LobbyCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          refreshClubList: this.refreshClubList
        };
      };
      Club_LobbyCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_close, this.btn_close_cb, "关闭界面");
        this.connect(G_UiType.image, this.ui.node_left_create, this.node_left_create_cb, "创建茶馆");
        this.connect(G_UiType.image, this.ui.node_left_enter1, this.node_left_enter_cb, "创建茶馆");
        this.connect(G_UiType.image, this.ui.node_left_enter, this.node_left_enter_cb, "进入茶馆");
        this.connect(G_UiType.image, this.ui.node_club_diamond, this.node_club_diamond_cb, "添加茶馆钻石");
        this.connect(G_UiType.image, this.ui.node_club_share, this.node_club_share_cb, "分享茶馆");
      };
      Club_LobbyCtrl.prototype.refreshClubList = function() {
        var _this = this;
        this.model.refreshClubList();
        this.view.removeResreshUi();
        this.view.refreshResreshUi();
        var clubNum = this.ui.node_left_btns.childrenCount;
        var _loop_1 = function(i) {
          left_node = this_1.ui.node_left_btns.children[i];
          this_1.connect(G_UiType.button, left_node, function(node, event) {
            var index = i;
            console.log("refreshClubList 2", index, clubNum);
            _this._onClick_item(index, node, event);
          }, "选择茶馆" + i);
          var node_clubtop = this_1.ui.node_left_btns.children[i].getChildByName("top");
          var clubId = this_1.model.club_list[i].id;
          node_clubtop.tag = clubId;
          this_1.connect(G_UiType.image, node_clubtop, this_1.node_club_top_cb, "点击置顶" + i);
        };
        var this_1 = this, left_node;
        for (var i = 0; i < clubNum; i++) _loop_1(i);
      };
      Club_LobbyCtrl.prototype.start = function() {};
      Club_LobbyCtrl.prototype.http_reqClubList = function() {
        this.model.refreshClubList();
        var list = this.model.getClubList();
        if (0 == list.length || null == list.length) this.finish(); else {
          this.refreshClubList();
          this.view.addTopFrame();
          this.view.refreshClubId();
          this.view.refreshClubDiamond();
          this.view.addRightFrame();
          this.view.refreshLeftMemberCount(this.model.getClubId());
          this.view.refreshClubRecharge();
        }
      };
      Club_LobbyCtrl.prototype.http_reqClubInfo = function() {
        this.model.refreshClubList();
        this.view.refreshLeftIcon(this.model.getClubId());
        this.view.refreshLeftName(this.model.getClubId());
        this.view.refreshLeftCount(this.model.getClubId());
        this.view.refreshClubId();
        this.view.refreshClubDiamond();
        this.view.addRightFrame();
        this.view.refreshLeftMemberCount(this.model.getClubId());
        this.view.refreshClubRecharge();
      };
      Club_LobbyCtrl.prototype.http_reqClubDissolve = function() {
        FrameMgr_1.default.getInstance().showHintBox("茶馆解散成功", function() {});
      };
      Club_LobbyCtrl.prototype.http_reqClubExit = function() {
        FrameMgr_1.default.getInstance().showHintBox("已退出茶馆", function() {});
      };
      Club_LobbyCtrl.prototype.http_reqClubChangeIcon = function() {
        this.model.refreshClubList();
        this.view.refreshLeftIcon(this.model.getClubId());
      };
      Club_LobbyCtrl.prototype.http_reqClubChangeName = function() {
        this.model.refreshClubList();
        this.view.refreshLeftName(this.model.getClubId());
      };
      Club_LobbyCtrl.prototype.http_onClubInfo = function(msg) {
        var data = msg.states;
        if (CLUB_INFO_STATE.EXIT == data.state) {
          var user_id = UserMgr_1.default.getInstance().getUid();
          if (data.operation_id != user_id) {
            this.model.refreshClubList();
            this.view.refreshLeftMemberCount(this.model.getClubId());
            data.change_id == user_id && FrameMgr_1.default.getInstance().showMsgBox("已踢出茶馆" + data.club_name, function() {}, "提示");
          }
        } else if (CLUB_INFO_STATE.ENTER == data.state) {
          var user_id = UserMgr_1.default.getInstance().getUid();
          if (data.change_id != user_id) {
            this.model.refreshClubList();
            this.view.refreshLeftMemberCount(data.club_id);
          }
        } else CLUB_INFO_STATE.DISSOVE == data.state;
      };
      Club_LobbyCtrl.prototype.http_reqClubJoin = function(msg) {
        this.model.refreshClubList();
        this.view.refreshLeftMemberCount(msg.club_id);
        this.changClubList();
      };
      Club_LobbyCtrl.prototype.http_reqClubBlacklisRemove = function(msg) {
        this.model.refreshClubList();
        this.view.refreshLeftMemberCount(msg.club_id);
      };
      Club_LobbyCtrl.prototype.http_reqClubKick = function(msg) {
        this.model.refreshClubList();
        this.view.refreshLeftMemberCount(this.model.getClubId());
      };
      Club_LobbyCtrl.prototype.http_reqClubTop = function(msg) {
        console.log("茶馆列表置顶消息", msg);
        if ("置顶成功" == msg) {
          FrameMgr_1.default.getInstance().showTips("置顶成功", null, 35, cc.color(0, 255, 0), cc.p(0, 0), "Arial", 1e3);
          ClubMgr_1.default.getInstance().reqClubList();
          this.model.refreshClubList();
          this.view.removeResreshUi();
          this.view.refreshResreshUi();
        } else FrameMgr_1.default.getInstance().showTips("置顶失败", null, 35, cc.color(255, 0, 0), cc.p(0, 0), "Arial", 1e3);
      };
      Club_LobbyCtrl.prototype.http_reqClubRecharge = function(msg) {
        this.model.refreshClubList();
        this.view.refreshClubDiamond();
      };
      Club_LobbyCtrl.prototype.http_reqGameSwitch = function(msg) {
        this.model.updateSwitch(msg);
        this.view.showCreateBtn();
      };
      Club_LobbyCtrl.prototype.btn_close_cb = function(node, event) {
        console.log("btn_close_cb");
        this.finish();
      };
      Club_LobbyCtrl.prototype.node_left_create_cb = function(node, event) {
        this.start_sub_module(G_MODULE.ClubCreate);
      };
      Club_LobbyCtrl.prototype.node_left_enter_cb = function(node, event) {
        this.start_sub_module(G_MODULE.ClubSeek, function(uiRoom) {
          uiRoom.offCreate();
        }, "Club_SeekListCtrl");
      };
      Club_LobbyCtrl.prototype._onClick_item = function(index, node, event) {
        if (this.model.getClubIndex() == index) return;
        this.model.setClubIndex(index);
        this.view.refreshLeftMemberCount(this.model.getClubId());
        ClubMgr_1.default.getInstance().reqClubInfo(this.model.getClubId());
      };
      Club_LobbyCtrl.prototype.node_club_diamond_cb = function(node, event) {
        this.start_sub_module(G_MODULE.ClubRecharge);
      };
      Club_LobbyCtrl.prototype.node_club_share_cb = function(node, event) {
        if (cc.sys.isNative) {
          var club_index = this.model.getClubIdToIndex(this.model.getClubId()), data = this.model.getClubList()[club_index];
          var strContent = data.name + "(ID:" + this.model.getClubData().no + ")发来了一封邀请函，快来加入茶馆一起玩牌！";
          var appname = AppInfoMgr_1.default.getInstance().getAppName();
          G_PLATFORM.wxShareClub(G_PLATFORM.WX_SHARE_TYPE.WXSceneSession, appname + "茶馆邀请", strContent, this.model.getClubId());
        }
      };
      Club_LobbyCtrl.prototype.node_club_top_cb = function(node) {
        ClubMgr_1.default.getInstance().reqClubTop(node.tag);
      };
      Club_LobbyCtrl.prototype.changClubList = function() {
        var club_id = this.model.getClubId();
        ClubMgr_1.default.getInstance().changeClubList(club_id);
        this.gemit("refreshClubList");
      };
      __decorate([ property(cc.Prefab) ], Club_LobbyCtrl.prototype, "prefab_top_btns", void 0);
      __decorate([ property(cc.Prefab) ], Club_LobbyCtrl.prototype, "prefab_botton_frame", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyCtrl.prototype, "btn_close", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyCtrl.prototype, "node_top_frame", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyCtrl.prototype, "node_left_btns", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyCtrl.prototype, "node_left_create", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyCtrl.prototype, "node_left_enter1", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyCtrl.prototype, "node_left_enter", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyCtrl.prototype, "node_right_frame", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyCtrl.prototype, "node_club_member", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyCtrl.prototype, "node_club_diamond", void 0);
      __decorate([ property(cc.Label) ], Club_LobbyCtrl.prototype, "label_club_id", void 0);
      __decorate([ property(cc.Label) ], Club_LobbyCtrl.prototype, "label_club_diamond", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyCtrl.prototype, "node_club_share", void 0);
      __decorate([ property(cc.Color) ], Club_LobbyCtrl.prototype, "member_count_color", void 0);
      Club_LobbyCtrl = __decorate([ ccclass ], Club_LobbyCtrl);
      return Club_LobbyCtrl;
    }(BaseCtrl_1.default);
    exports.default = Club_LobbyCtrl;
    cc._RF.pop();
  }, {
    "../../../AppStart/AppMgrs/AppInfoMgr": "AppInfoMgr",
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/ClubMgr": "ClubMgr",
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/SwitchMgr": "SwitchMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Club_LobbyDownCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "276237pMetMGIF8gbVNdWWl", "Club_LobbyDownCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var RichTextMgr_1 = require("../../GameMgrs/RichTextMgr");
    var CreateRoomMgr_1 = require("../../GameMgrs/CreateRoomMgr");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var ClubMgr_1 = require("../../GameMgrs/ClubMgr");
    var ClubChatMgr_1 = require("../../GameMgrs/ClubChatMgr");
    var ChatFillterMgr_1 = require("../../GameMgrs/ChatFillterMgr");
    var SwitchMgr_1 = require("../../GameMgrs/SwitchMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var CHAT_POS_TYPE = cc.Enum({
      POS_PLAYER: 0,
      POS_FRIEND: 1
    });
    var CHAT_TYPE = cc.Enum({
      TYPE_LABEL: 0,
      TYPE_BLEND: 1,
      TYPE_VOICE: 2,
      TYPE_ROOM_ENTER: 3,
      TYPE_ROOM_FINISH: 4
    });
    var CREATE_ROOM_STATE = cc.Enum({
      SELF_PAY: 1,
      CLUB_PAY: 2
    });
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.iconCallOpen = false;
        _this.roomCallOpen = false;
        _this.chat_content = "";
        _this.chat_placeholder = "";
        _this.nowRoomOpen = false;
        _this.creatRoomSwitch = null;
        _this.creatRoomSwitch = SwitchMgr_1.default.getInstance().get_switch_add_club_expense();
        return _this;
      }
      Model.prototype.setIconCallOpen = function(data) {
        this.iconCallOpen = data;
      };
      Model.prototype.getIconCallOpen = function() {
        return this.iconCallOpen;
      };
      Model.prototype.setRoomCallOpen = function(data) {
        this.roomCallOpen = data;
      };
      Model.prototype.getRoomCallOpen = function() {
        return this.roomCallOpen;
      };
      Model.prototype.getChatContent = function() {
        return this.chat_content;
      };
      Model.prototype.setChatContent = function(data) {
        this.chat_content = data;
      };
      Model.prototype.getChatPlaceholder = function() {
        return this.chat_placeholder;
      };
      Model.prototype.setChatPlaceholder = function(data) {
        this.chat_placeholder = data;
      };
      Model.prototype.setNowRoomOpen = function(data) {
        this.nowRoomOpen = data;
      };
      Model.prototype.getNowRoomOpen = function() {
        return this.nowRoomOpen;
      };
      Model.prototype.updateSwitch = function(msg) {
        this.creatRoomSwitch = msg.cfg.switch_add_club_expense;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          prefab_room_frame: null,
          pode_chat_frame: null,
          prefab_notice_frame: null,
          node_chat_frame: null,
          node_notice_frame: null,
          node_frame: null,
          btn_voice: null,
          btn_icon: null,
          btn_send: null,
          node_editbox_content: null,
          editbox_content: null,
          node_iconContent: null,
          node_iconClose: null,
          node_iconList: null,
          node_chat: null,
          node_room: null,
          btn_openCreate: null,
          btn_closeCreate: null,
          btn_baseRoom: null,
          btn_publicRoom: null,
          btn_nowRoom: null,
          node_room_frame: null,
          btn_nowChat: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.prefab_room_frame = ctrl.prefab_room_frame;
        this.ui.pode_chat_frame = ctrl.pode_chat_frame;
        this.ui.prefab_notice_frame = ctrl.prefab_notice_frame;
        this.ui.node_frame = ctrl.node_frame;
        this.ui.btn_voice = ctrl.btn_voice;
        this.ui.btn_icon = ctrl.btn_icon;
        this.ui.btn_send = ctrl.btn_send;
        this.ui.node_editbox_content = ctrl.node_editbox_content;
        this.ui.editbox_content = ctrl.editbox_content;
        this.ui.node_iconContent = ctrl.node_iconContent;
        this.ui.node_iconClose = ctrl.node_iconClose;
        this.ui.node_iconList = ctrl.node_iconList;
        this.ui.node_chat = ctrl.node_chat;
        this.ui.node_room = ctrl.node_room;
        this.ui.btn_openCreate = ctrl.btn_openCreate;
        this.ui.btn_closeCreate = ctrl.btn_closeCreate;
        this.ui.btn_baseRoom = ctrl.btn_baseRoom;
        this.ui.btn_publicRoom = ctrl.btn_publicRoom;
        this.ui.btn_nowRoom = ctrl.btn_nowRoom;
        this.ui.btn_nowChat = ctrl.btn_nowChat;
        this.addRightFrame();
        this.OpenRoomList();
      };
      View.prototype.OpenIconList = function() {
        this.ui.node_iconContent.active = true;
      };
      View.prototype.CloseIconList = function() {
        this.ui.node_iconContent.active = false;
        this.ui.node_iconContent.pauseSystemEvents(true);
      };
      View.prototype.addEditboxContent = function(str) {
        var rich_data = RichTextMgr_1.default.getInstance();
        this.model.chat_content = this.model.chat_content + rich_data.richTextPicToName(str);
        this.ui.editbox_content.string = this.model.chat_content;
      };
      View.prototype.OpenNodeRoom = function() {
        this.ui.node_room.active = true;
      };
      View.prototype.CloseNodeRoom = function() {
        this.ui.node_room.active = false;
        this.ui.node_room.pauseSystemEvents(true);
      };
      View.prototype.OpenRoomList = function() {
        if (this.model.getNowRoomOpen()) {
          this.ui.node_room_frame = cc.instantiate(this.ui.prefab_room_frame);
          this.ui.node_frame.addChild(this.ui.node_room_frame);
          this.ui.node_chat_frame.active = false;
          this.ui.node_notice_frame.active = false;
          this.ui.btn_nowRoom.active = false;
          this.ui.btn_nowChat.active = true;
        } else {
          if (null != this.ui.node_room_frame) {
            this.ui.node_room_frame.destroy();
            this.ui.node_room_frame = null;
          }
          this.ui.node_chat_frame.active = true;
          this.ui.node_notice_frame.active = true;
          this.ui.btn_nowRoom.active = false;
          this.ui.btn_nowChat.active = false;
        }
      };
      View.prototype.addRightFrame = function() {
        this.ui.node_notice_frame = cc.instantiate(this.ui.prefab_notice_frame);
        this.ui.node_frame.addChild(this.ui.node_notice_frame);
        this.ui.node_chat_frame = cc.instantiate(this.ui.pode_chat_frame);
        this.ui.node_frame.addChild(this.ui.node_chat_frame);
      };
      return View;
    }(BaseView_1.default);
    var Club_LobbyDownCtrl = function(_super) {
      __extends(Club_LobbyDownCtrl, _super);
      function Club_LobbyDownCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.prefab_room_frame = null;
        _this.pode_chat_frame = null;
        _this.prefab_notice_frame = null;
        _this.node_frame = null;
        _this.btn_voice = null;
        _this.btn_icon = null;
        _this.btn_send = null;
        _this.node_editbox_content = null;
        _this.editbox_content = null;
        _this.node_iconContent = null;
        _this.node_iconClose = null;
        _this.node_iconList = null;
        _this.node_chat = null;
        _this.node_room = null;
        _this.btn_openCreate = null;
        _this.btn_closeCreate = null;
        _this.btn_baseRoom = null;
        _this.btn_publicRoom = null;
        _this.btn_nowRoom = null;
        _this.btn_nowChat = null;
        return _this;
      }
      Club_LobbyDownCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.model.setChatPlaceholder(this.ui.editbox_content.placeholder);
      };
      Club_LobbyDownCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "ws.reqSendClubChat": this.ws_reqSendClubChat,
          "http.reqGameSwitch": this.http_reqGameSwitch
        };
      };
      Club_LobbyDownCtrl.prototype.defineGlobalEvents = function() {};
      Club_LobbyDownCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_voice, this.btn_voice_cb, "语音按钮");
        this.connect(G_UiType.image, this.ui.btn_icon, this.btn_icon_cb, "表情按钮");
        this.connect(G_UiType.image, this.ui.btn_send, this.btn_send_cb, "发送按钮");
        this.connect(G_UiType.edit, this.ui.node_editbox_content, this.editbox_content_cb, "发送按钮");
        this.connect(G_UiType.image, this.ui.node_iconClose, this.node_iconClose_cb, "关闭表情界面");
        this.connect(G_UiType.image, this.ui.btn_openCreate, this.btn_publicRoom_cb, "开启房间控制");
        this.connect(G_UiType.image, this.ui.btn_closeCreate, this.btn_closeCreate_cb, "关闭房间控制");
        this.connect(G_UiType.image, this.ui.btn_nowRoom, this.btn_nowRoom_cb, "房间列表");
        this.connect(G_UiType.image, this.ui.btn_nowChat, this.btn_nowChat_cb, "聊天列表");
      };
      Club_LobbyDownCtrl.prototype.addIconCallBak = function() {
        if (true == this.model.getIconCallOpen()) return;
        this.model.setIconCallOpen(true);
        var count = this.view.ui.node_iconList.childrenCount, btns = this.view.ui.node_iconList.children;
        console.log("count:" + count);
        for (var i = 0; i < count; i++) {
          var curBtn = btns[i];
          this.connect(G_UiType.image, curBtn, this.node_icon_cb, "图标:btn_" + i);
        }
      };
      Club_LobbyDownCtrl.prototype.addRoomCallBak = function() {
        if (true == this.model.getRoomCallOpen()) return;
        this.model.setRoomCallOpen(true);
        this.connect(G_UiType.image, this.ui.btn_baseRoom, this.btn_baseRoom_cb, "普通创建");
        this.connect(G_UiType.image, this.ui.btn_publicRoom, this.btn_publicRoom_cb, "特殊创建");
      };
      Club_LobbyDownCtrl.prototype.start = function() {};
      Club_LobbyDownCtrl.prototype.ws_reqSendClubChat = function() {
        this.model.setChatContent("");
        this.ui.editbox_content.string = "";
      };
      Club_LobbyDownCtrl.prototype.http_reqGameSwitch = function(msg) {
        this.model.updateSwitch(msg);
      };
      Club_LobbyDownCtrl.prototype.btn_voice_cb = function(node, event) {};
      Club_LobbyDownCtrl.prototype.btn_icon_cb = function(node, event) {
        this.addIconCallBak();
        this.view.OpenIconList();
      };
      Club_LobbyDownCtrl.prototype.btn_send_cb = function(node, event) {
        console.log("btn_send_cb");
        var content = this.model.getChatContent();
        if ("" == content) {
          FrameMgr_1.default.getInstance().showTips(this.model.getChatPlaceholder());
          return;
        }
        var club_id = BehaviorMgr_1.default.getInstance().getClubSelectId();
        var chat_data = {
          club_id: club_id,
          type: CHAT_TYPE.TYPE_BLEND,
          text: content
        };
        console.log("btn_send_cb", chat_data);
        ClubChatMgr_1.default.getInstance().reqSendClubChat(chat_data);
        ClubMgr_1.default.getInstance().changeClubList(club_id);
        this.gemit("refreshClubList");
      };
      Club_LobbyDownCtrl.prototype.editbox_content_cb = function(str, event) {
        console.log("editbox_content_cb");
        if ("editing-did-ended" == str) {
          var content = this.ui.editbox_content.string;
          content = ChatFillterMgr_1.default.getInstance().warningStrGsub(content);
          this.model.setChatContent(content);
        }
      };
      Club_LobbyDownCtrl.prototype.node_iconClose_cb = function(node, event) {
        this.view.CloseIconList();
      };
      Club_LobbyDownCtrl.prototype.node_icon_cb = function(node, event) {
        var icon_pic = node.getComponent(cc.Sprite);
        this.view.addEditboxContent(icon_pic.spriteFrame.name);
        this.view.CloseIconList();
      };
      Club_LobbyDownCtrl.prototype.btn_openCreate_cb = function(node, event) {
        if (2 == this.model.creatRoomSwitch) {
          this.btn_publicRoom_cb(null, null);
          return;
        }
        this.addRoomCallBak();
        this.view.OpenNodeRoom();
      };
      Club_LobbyDownCtrl.prototype.btn_closeCreate_cb = function(node, event) {
        this.view.CloseNodeRoom();
      };
      Club_LobbyDownCtrl.prototype.btn_baseRoom_cb = function(node, event) {
        console.log("btn_baseRoom_cb");
        this.view.CloseNodeRoom();
        var club_id = BehaviorMgr_1.default.getInstance().getClubSelectId();
        CreateRoomMgr_1.default.getInstance().setProperty(club_id, "clubId");
        CreateRoomMgr_1.default.getInstance().setProperty(CREATE_ROOM_STATE.SELF_PAY, "paysource");
        this.start_sub_module(G_MODULE.createRoom);
        ClubMgr_1.default.getInstance().changeClubList(club_id);
        this.gemit("refreshClubList");
      };
      Club_LobbyDownCtrl.prototype.btn_publicRoom_cb = function(node, event) {
        console.log("btn_publicRoom_cb");
        this.view.CloseNodeRoom();
        var club_id = BehaviorMgr_1.default.getInstance().getClubSelectId(), club_info = ClubMgr_1.default.getInstance().getClubInfo(club_id);
        CreateRoomMgr_1.default.getInstance().setProperty(club_id, "clubId");
        CreateRoomMgr_1.default.getInstance().setProperty(CREATE_ROOM_STATE.CLUB_PAY, "paysource");
        this.start_sub_module(G_MODULE.createRoom);
        ClubMgr_1.default.getInstance().changeClubList(club_id);
        this.gemit("refreshClubList");
      };
      Club_LobbyDownCtrl.prototype.btn_nowRoom_cb = function(node, event) {
        this.model.setNowRoomOpen(true);
        this.view.OpenRoomList();
        this.model.getNowRoomOpen() || this.gemit("chat_room_refresh");
      };
      Club_LobbyDownCtrl.prototype.btn_nowChat_cb = function(node, event) {
        this.model.setNowRoomOpen(false);
        this.view.OpenRoomList();
        this.model.getNowRoomOpen() || this.gemit("chat_room_refresh");
      };
      __decorate([ property(cc.Prefab) ], Club_LobbyDownCtrl.prototype, "prefab_room_frame", void 0);
      __decorate([ property(cc.Prefab) ], Club_LobbyDownCtrl.prototype, "pode_chat_frame", void 0);
      __decorate([ property(cc.Prefab) ], Club_LobbyDownCtrl.prototype, "prefab_notice_frame", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyDownCtrl.prototype, "node_frame", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyDownCtrl.prototype, "btn_voice", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyDownCtrl.prototype, "btn_icon", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyDownCtrl.prototype, "btn_send", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyDownCtrl.prototype, "node_editbox_content", void 0);
      __decorate([ property(cc.EditBox) ], Club_LobbyDownCtrl.prototype, "editbox_content", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyDownCtrl.prototype, "node_iconContent", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyDownCtrl.prototype, "node_iconClose", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyDownCtrl.prototype, "node_iconList", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyDownCtrl.prototype, "node_chat", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyDownCtrl.prototype, "node_room", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyDownCtrl.prototype, "btn_openCreate", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyDownCtrl.prototype, "btn_closeCreate", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyDownCtrl.prototype, "btn_baseRoom", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyDownCtrl.prototype, "btn_publicRoom", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyDownCtrl.prototype, "btn_nowRoom", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyDownCtrl.prototype, "btn_nowChat", void 0);
      Club_LobbyDownCtrl = __decorate([ ccclass ], Club_LobbyDownCtrl);
      return Club_LobbyDownCtrl;
    }(BaseCtrl_1.default);
    exports.default = Club_LobbyDownCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/ChatFillterMgr": "ChatFillterMgr",
    "../../GameMgrs/ClubChatMgr": "ClubChatMgr",
    "../../GameMgrs/ClubMgr": "ClubMgr",
    "../../GameMgrs/CreateRoomMgr": "CreateRoomMgr",
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/RichTextMgr": "RichTextMgr",
    "../../GameMgrs/SwitchMgr": "SwitchMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Club_LobbyNoticeCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b3df5qHV2hPwq3MvRB/aaQS", "Club_LobbyNoticeCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var ClubMgr_1 = require("../../GameMgrs/ClubMgr");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.club_id = null;
        _this.now_club_notice = null;
        _this.new_club_notice = null;
        _this.club_state = null;
        _this.user_identity = null;
        _this._moveTime = null;
        _this.now_club_notice = "";
        _this.new_club_notice = "";
        _this.user_identity = IDENTITY_TYPE.MEMBER;
        _this.club_state = false;
        _this.club_id = BehaviorMgr_1.default.getInstance().getClubSelectId();
        _this.refreshClubNotice();
        _this.refreshIdentity();
        return _this;
      }
      Model.prototype.refreshIdentity = function() {
        this.user_identity = ClubMgr_1.default.getInstance().getClubIdentity(this.club_id);
      };
      Model.prototype.getNowClubNotice = function() {
        return this.now_club_notice;
      };
      Model.prototype.getNewClubNotice = function() {
        return this.new_club_notice;
      };
      Model.prototype.setClubNotice = function(str) {
        this.new_club_notice = str;
      };
      Model.prototype.refreshClubNotice = function() {
        var clubData = ClubMgr_1.default.getInstance().getClubListData(this.club_id);
        this.now_club_notice = clubData.notice;
      };
      Model.prototype.setClubState = function(state) {
        this.club_state = state;
      };
      Model.prototype.getClubState = function() {
        return this.club_state;
      };
      Model.prototype.getIdentity = function() {
        return this.user_identity;
      };
      Model.prototype.getClubId = function() {
        return this.club_id;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this._delayTime = null;
        _this._moveDistanceX = null;
        _this._moveTime = null;
        _this.label_noticepos = null;
        _this.ui = {
          node_showNotice: null,
          node_setNotice: null,
          btn_setNotice: null,
          btn_saveNotice: null,
          label_notice: null,
          node_edit: null,
          edit_notice: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_showNotice = ctrl.node_showNotice;
        this.ui.node_setNotice = ctrl.node_setNotice;
        this.ui.btn_setNotice = ctrl.btn_setNotice;
        this.ui.btn_saveNotice = ctrl.btn_saveNotice;
        this.ui.label_notice = ctrl.label_notice;
        this.ui.node_edit = ctrl.node_edit;
        this.ui.edit_notice = this.ui.node_edit.getComponent(cc.EditBox);
        this.cutNoticeCtrl();
        this.refreshNotice();
      };
      View.prototype.move = function() {
        var _this = this;
        if (this.ui.node_showNotice.width < this.ui.label_notice.node.width) {
          this.ui.label_notice.node.x = this.ui.btn_setNotice.x + this.ui.label_notice.node.width / 2;
          this.ui.label_notice.node.stopAllActions(false);
          var callback = cc.callFunc(function() {
            _this.ui.label_notice.node.x = _this.ui.btn_setNotice.x + _this.ui.label_notice.node.width / 2;
          });
          var movex = -(this.ui.node_showNotice.width + 1.2 * this.ui.label_notice.node.width);
          var speed = 100;
          this.model._moveTime = Math.abs(movex / speed);
          var moveBy = cc.moveBy(this.model._moveTime, movex, 0);
          var seq = cc.repeatForever(cc.sequence(moveBy, callback));
          this.ui.label_notice.node.runAction(seq);
        } else {
          this.ui.label_notice.node.x = 0;
          this.ui.label_notice.node.stopAllActions(true);
        }
      };
      View.prototype.cutNoticeCtrl = function() {
        if (this.model.getIdentity() == IDENTITY_TYPE.MEMBER) {
          this.ui.btn_setNotice.active = false;
          this.ui.btn_setNotice.pauseSystemEvents(true);
          this.ui.btn_saveNotice.active = false;
          this.ui.btn_saveNotice.pauseSystemEvents(true);
          return;
        }
        if (this.model.getClubState()) {
          this.ui.node_showNotice.active = false;
          this.ui.node_showNotice.pauseSystemEvents(true);
          this.ui.node_setNotice.active = true;
          this.ui.node_setNotice.resumeSystemEvents(true);
        } else {
          this.ui.node_setNotice.active = false;
          this.ui.node_setNotice.pauseSystemEvents(true);
          this.ui.node_showNotice.active = true;
          this.ui.node_showNotice.resumeSystemEvents(true);
        }
      };
      View.prototype.refreshNotice = function() {
        this.ui.label_notice.string = this.model.getNowClubNotice();
        this.ui.edit_notice.string = this.model.getNowClubNotice();
        this.move();
      };
      return View;
    }(BaseView_1.default);
    var Club_LobbyNoticeCtrl = function(_super) {
      __extends(Club_LobbyNoticeCtrl, _super);
      function Club_LobbyNoticeCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_showNotice = null;
        _this.node_setNotice = null;
        _this.btn_setNotice = null;
        _this.btn_saveNotice = null;
        _this.label_notice = null;
        _this.node_edit = null;
        return _this;
      }
      Club_LobbyNoticeCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Club_LobbyNoticeCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqClubChangeNotice": this.http_reqClubChangeNotice
        };
      };
      Club_LobbyNoticeCtrl.prototype.defineGlobalEvents = function() {};
      Club_LobbyNoticeCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.btn_setNotice, this.btn_setNotice_cb, "设置");
        this.connect(G_UiType.button, this.ui.btn_saveNotice, this.btn_saveNotice_cb, "保存");
        this.connect(G_UiType.edit, this.ui.node_edit, this.node_edit_cb, "监听输入框");
      };
      Club_LobbyNoticeCtrl.prototype.start = function() {};
      Club_LobbyNoticeCtrl.prototype.http_reqClubChangeNotice = function() {
        this.model.refreshClubNotice();
        this.view.refreshNotice();
        FrameMgr_1.default.getInstance().showTips("公告修改成功", null, 35, cc.color(0, 255, 50));
      };
      Club_LobbyNoticeCtrl.prototype.btn_setNotice_cb = function(node, event) {
        this.model.setClubState(true);
        this.view.cutNoticeCtrl();
      };
      Club_LobbyNoticeCtrl.prototype.btn_saveNotice_cb = function(node, event) {
        this.model.setClubState(false);
        this.view.cutNoticeCtrl();
        if (this.model.getNowClubNotice() == this.model.getNewClubNotice()) return;
        ClubMgr_1.default.getInstance().reqClubChangeNotice(this.model.getClubId(), this.model.getNewClubNotice());
        this.changClubList();
      };
      Club_LobbyNoticeCtrl.prototype.node_edit_cb = function(str, event) {
        if ("editing-did-ended" == str) {
          var content = this.ui.edit_notice.string;
          this.model.setClubNotice(content);
        }
      };
      Club_LobbyNoticeCtrl.prototype.changClubList = function() {
        var club_id = this.model.getClubId();
        ClubMgr_1.default.getInstance().changeClubList(club_id);
        this.gemit("refreshClubList");
      };
      __decorate([ property(cc.Node) ], Club_LobbyNoticeCtrl.prototype, "node_showNotice", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyNoticeCtrl.prototype, "node_setNotice", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyNoticeCtrl.prototype, "btn_setNotice", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyNoticeCtrl.prototype, "btn_saveNotice", void 0);
      __decorate([ property(cc.Label) ], Club_LobbyNoticeCtrl.prototype, "label_notice", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyNoticeCtrl.prototype, "node_edit", void 0);
      Club_LobbyNoticeCtrl = __decorate([ ccclass ], Club_LobbyNoticeCtrl);
      return Club_LobbyNoticeCtrl;
    }(BaseCtrl_1.default);
    exports.default = Club_LobbyNoticeCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/ClubMgr": "ClubMgr",
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Club_LobbyRoomCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "248f7Y7q0xN1qN2SXCf0S3w", "Club_LobbyRoomCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var ClubGameMgr_1 = require("../../GameMgrs/ClubGameMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.room_list = null;
        _this.club_id = null;
        _this.game_begin = null;
        _this.game_page = null;
        _this.game_num = null;
        _this.club_record = true;
        _this.game_num = 6;
        _this.game_begin = 0;
        _this.game_page = 1;
        _this.club_id = BehaviorMgr_1.default.getInstance().getClubSelectId();
        _this.room_list = {};
        return _this;
      }
      Model.prototype.setRoomList = function(data) {
        this.room_list = data;
      };
      Model.prototype.refreshRoomList = function(data) {
        this.room_list = ClubGameMgr_1.default.getInstance().getClubGameList();
      };
      Model.prototype.getRoomList = function() {
        return this.room_list;
      };
      Model.prototype.getClubId = function() {
        return this.club_id;
      };
      Model.prototype.getRoomBegin = function() {
        return this.game_begin;
      };
      Model.prototype.setRoomBegin = function(data) {
        this.game_begin = data;
      };
      Model.prototype.getRoomPage = function() {
        return this.game_page;
      };
      Model.prototype.setRoomPage = function(data) {
        this.game_page = data;
      };
      Model.prototype.addRoomPage = function(data) {
        this.game_page += data;
      };
      Model.prototype.getRoomNum = function() {
        return this.game_num;
      };
      Model.prototype.setClubRecord = function(state) {
        this.club_record = state;
      };
      Model.prototype.getClubRecord = function() {
        return this.club_record;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_room_list: null,
          node_room_frame: null,
          node_room_botton: null,
          node_gameList: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_room_list = ctrl.node_room_list;
        this.ui.node_room_frame = ctrl.node_room_frame;
        this.ui.node_room_botton = ctrl.node_room_botton;
        this.ui.node_gameList = ctrl.node_gameList;
      };
      View.prototype.addRoomStrip = function() {
        var node_strip = cc.instantiate(this.ui.node_room_frame);
        this.ui.node_room_list.addChild(node_strip);
      };
      View.prototype.insertRoomStrip = function() {
        var node_strip = cc.instantiate(this.ui.node_room_frame);
        this.ui.node_room_list.insertChild(node_strip, 0);
        this.refreshRoomList();
      };
      View.prototype.refreshRoomList = function() {
        var count = this.ui.node_room_list.childrenCount, height = 0;
        if (0 != count) {
          var layout = this.ui.node_room_list.getComponent(cc.Layout), gapTop = layout.paddingTop, gapBottom = layout.paddingBottom, gapY = layout.spacingY, node = this.ui.node_room_list.children[0];
          height += gapTop;
          height += gapBottom;
          height += Math.floor(count / 2) * gapY;
          height += node.height * Math.ceil(count / 2);
        }
        this.ui.node_room_list.height = height;
      };
      return View;
    }(BaseView_1.default);
    var Club_LobbyRoomCtrl = function(_super) {
      __extends(Club_LobbyRoomCtrl, _super);
      function Club_LobbyRoomCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_room_frame = null;
        _this.node_room_list = null;
        _this.node_room_botton = null;
        _this.node_gameList = null;
        return _this;
      }
      Club_LobbyRoomCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        ClubGameMgr_1.default.getInstance().reqClubGameList(this.model.getClubId(), this.model.getRoomPage());
      };
      Club_LobbyRoomCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqClubGameList": this.http_reqClubGameList,
          "http.onClubGame": this.http_onClubGame
        };
      };
      Club_LobbyRoomCtrl.prototype.defineGlobalEvents = function() {};
      Club_LobbyRoomCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.node_room_botton, function() {}, "遮罩层");
        this.connect(G_UiType.scroll, this.ui.node_room_list, this.club_view_cb, "拖动动态添加");
      };
      Club_LobbyRoomCtrl.prototype.start = function() {};
      Club_LobbyRoomCtrl.prototype.http_reqClubGameList = function() {
        this.model.refreshRoomList();
        this.refreshRoomList();
      };
      Club_LobbyRoomCtrl.prototype.http_onClubGame = function(msg) {
        var data = msg.states;
        if (data.state == CLUB_GAME_STATE.CREATE) {
          this.view.refreshRoomList();
          BehaviorMgr_1.default.getInstance().setClubGameRoom(data);
          this.view.insertRoomStrip();
          this.model.setRoomBegin(this.model.getRoomNum() + 1);
        }
      };
      Club_LobbyRoomCtrl.prototype.refreshRoomList = function() {
        var roomList = this.model.getRoomList(), roomBegin = this.model.getRoomBegin(), roomCount = roomBegin + this.model.getRoomNum();
        roomCount = Math.min(roomCount, roomList.length);
        for (var i = roomBegin; i < roomCount; i++) {
          var data = roomList[i];
          BehaviorMgr_1.default.getInstance().setClubGameRoom(data);
          this.view.addRoomStrip();
        }
        this.view.refreshRoomList();
        this.model.setRoomBegin(roomCount);
        this.model.addRoomPage(1);
        this.model.setClubRecord(true);
      };
      Club_LobbyRoomCtrl.prototype.club_view_cb = function(node, event) {
        if (event.type == cc.Node.EventType.TOUCH_MOVE) {
          var game_list = this.model.getRoomList(), itemMax = game_list.length;
          if (this.model.getRoomBegin() == itemMax) return;
          var node_height = node.height - this.ui.node_gameList.height;
          if (.25 * node_height * 4 < node.y && true == this.model.getClubRecord()) {
            this.model.setClubRecord(false);
            ClubGameMgr_1.default.getInstance().reqClubGameList(this.model.getClubId(), this.model.getRoomPage());
          }
        }
      };
      __decorate([ property(cc.Prefab) ], Club_LobbyRoomCtrl.prototype, "node_room_frame", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyRoomCtrl.prototype, "node_room_list", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyRoomCtrl.prototype, "node_room_botton", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyRoomCtrl.prototype, "node_gameList", void 0);
      Club_LobbyRoomCtrl = __decorate([ ccclass ], Club_LobbyRoomCtrl);
      return Club_LobbyRoomCtrl;
    }(BaseCtrl_1.default);
    exports.default = Club_LobbyRoomCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/ClubGameMgr": "ClubGameMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Club_LobbyTopCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bc94b8oS2xPqLN6YQr1Lpgi", "Club_LobbyTopCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var ClubMgr_1 = require("../../GameMgrs/ClubMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.user_identity = null;
        _this.apply_dot = null;
        _this.club_id = null;
        _this.user_identity = IDENTITY_TYPE.MEMBER;
        _this.apply_dot = 0;
        _this.club_id = BehaviorMgr_1.default.getInstance().getClubSelectId();
        _this.refreshIdentity();
        _this.refreshApplyDot();
        return _this;
      }
      Model.prototype.refreshIdentity = function() {
        this.user_identity = ClubMgr_1.default.getInstance().getClubIdentity(this.club_id);
      };
      Model.prototype.getIdentity = function() {
        return this.user_identity;
      };
      Model.prototype.refreshApplyDot = function() {
        this.apply_dot = ClubMgr_1.default.getInstance().getClubApplyDot(this.club_id);
      };
      Model.prototype.getApply = function() {
        return this.apply_dot;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_record: null,
          btn_apply: null,
          btn_member: null,
          apply_dot: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.btn_record = ctrl.btn_record;
        this.ui.btn_apply = ctrl.btn_apply;
        this.ui.btn_member = ctrl.btn_member;
        this.ui.apply_dot = ctrl.apply_dot;
        this.refreshBtn();
        this.refreshDot();
      };
      View.prototype.refreshBtn = function() {
        if (this.model.getIdentity() == IDENTITY_TYPE.MEMBER) {
          this.ui.btn_apply.active = false;
          this.ui.btn_apply.pauseSystemEvents(true);
        } else {
          this.ui.btn_apply.active = true;
          this.ui.btn_apply.resumeSystemEvents(true);
        }
      };
      View.prototype.refreshDot = function() {
        0 == this.model.getApply() ? this.ui.apply_dot.active = false : this.ui.apply_dot.active = true;
      };
      return View;
    }(BaseView_1.default);
    var Club_LobbyTopCtrl = function(_super) {
      __extends(Club_LobbyTopCtrl, _super);
      function Club_LobbyTopCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_record = null;
        _this.btn_apply = null;
        _this.btn_member = null;
        _this.apply_dot = null;
        return _this;
      }
      Club_LobbyTopCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Club_LobbyTopCtrl.prototype.defineNetEvents = function() {};
      Club_LobbyTopCtrl.prototype.defineGlobalEvents = function() {};
      Club_LobbyTopCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_record, this.btn_record_cb, "战绩按钮");
        this.connect(G_UiType.image, this.ui.btn_apply, this.btn_apply_cb, "申请按钮");
        this.connect(G_UiType.image, this.ui.btn_member, this.btn_member_cb, "成员按钮");
      };
      Club_LobbyTopCtrl.prototype.start = function() {};
      Club_LobbyTopCtrl.prototype.btn_record_cb = function(node, event) {
        console.log("btn_record_cb");
        this.start_sub_module(G_MODULE.ClubRecord);
      };
      Club_LobbyTopCtrl.prototype.btn_apply_cb = function(node, event) {
        console.log("btn_apply_cb");
        this.start_sub_module(G_MODULE.ClubApplication);
      };
      Club_LobbyTopCtrl.prototype.btn_member_cb = function(node, event) {
        console.log("btn_member_cb");
        this.start_sub_module(G_MODULE.ClubMember);
      };
      __decorate([ property(cc.Node) ], Club_LobbyTopCtrl.prototype, "btn_record", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyTopCtrl.prototype, "btn_apply", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyTopCtrl.prototype, "btn_member", void 0);
      __decorate([ property(cc.Node) ], Club_LobbyTopCtrl.prototype, "apply_dot", void 0);
      Club_LobbyTopCtrl = __decorate([ ccclass ], Club_LobbyTopCtrl);
      return Club_LobbyTopCtrl;
    }(BaseCtrl_1.default);
    exports.default = Club_LobbyTopCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/ClubMgr": "ClubMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Club_MemberListCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "edcc2C4SgBKDLP/+VEjQN9g", "Club_MemberListCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var ClubMgr_1 = require("../../GameMgrs/ClubMgr");
    var ClubMemberMgr_1 = require("../../GameMgrs/ClubMemberMgr");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var UiMgr_1 = require("../../GameMgrs/UiMgr");
    var SwitchMgr_1 = require("../../GameMgrs/SwitchMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.club_id = null;
        _this.club_data = null;
        _this.member_list = null;
        _this.user_identity = null;
        _this.open_game = null;
        _this.member_begin = null;
        _this.member_num = null;
        _this.member_page = null;
        _this.club_record = true;
        _this.delClubSwtich = null;
        _this.name_max = 5;
        _this.member_num = 20;
        _this.user_identity = IDENTITY_TYPE.MEMBER;
        _this.club_id = BehaviorMgr_1.default.getInstance().getClubSelectId();
        _this.refreshClubData();
        _this.setUserIdentity();
        _this.member_begin = 0;
        _this.member_page = 1;
        _this.delClubSwtich = SwitchMgr_1.default.getInstance().get_switch_del_club();
        return _this;
      }
      Model.prototype.getClubId = function() {
        return this.club_id;
      };
      Model.prototype.getMemberList = function() {
        return this.member_list;
      };
      Model.prototype.getClubData = function() {
        return this.club_data;
      };
      Model.prototype.refreshClubData = function() {
        this.club_data = ClubMgr_1.default.getInstance().getClubInfo(this.club_id);
        this.open_game = this.club_data.openGame;
      };
      Model.prototype.refreshMemberList = function() {
        this.member_list = ClubMemberMgr_1.default.getInstance().getClubMemberList();
      };
      Model.prototype.setUserIdentity = function() {
        this.user_identity = ClubMgr_1.default.getInstance().getClubIdentity(this.club_id);
      };
      Model.prototype.getUserIdentity = function() {
        return this.user_identity;
      };
      Model.prototype.getOpenGame = function() {
        return this.open_game;
      };
      Model.prototype.setOpenGame = function(data) {
        this.open_game = data;
      };
      Model.prototype.getMemberBegin = function() {
        return this.member_begin;
      };
      Model.prototype.setMemberBegin = function(data) {
        this.member_begin = data;
      };
      Model.prototype.getMemberPage = function() {
        return this.member_page;
      };
      Model.prototype.setMemberPage = function(data) {
        this.member_page = data;
      };
      Model.prototype.addMemberPage = function(data) {
        this.member_page += data;
      };
      Model.prototype.getMemberNum = function() {
        return this.member_num;
      };
      Model.prototype.setClubRecord = function(state) {
        this.club_record = state;
      };
      Model.prototype.getClubRecord = function() {
        return this.club_record;
      };
      Model.prototype.updateSwitch = function(msg) {
        this.delClubSwtich = msg.cfg.switch_del_club;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_sprite_all: null,
          node_close: null,
          btn_icon: null,
          club_icon: null,
          club_name: null,
          club_id: null,
          club_count: null,
          node_managerStrip: null,
          btn_manageCtrl: null,
          pic_manage: null,
          pic_member: null,
          btn_exitClub: null,
          btn_dissolve: null,
          btn_change_name: null,
          node_memberView: null,
          node_memberList: null,
          prefab_member: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_sprite_all = ctrl.node_sprite_all;
        this.ui.node_close = ctrl.node_close;
        this.ui.btn_icon = ctrl.btn_icon;
        this.ui.club_icon = ctrl.btn_icon.getComponent(cc.Sprite);
        this.ui.club_name = ctrl.club_name;
        this.ui.club_id = ctrl.club_id;
        this.ui.club_count = ctrl.club_count;
        this.ui.node_managerStrip = ctrl.node_managerStrip;
        this.ui.btn_manageCtrl = ctrl.btn_manageCtrl;
        this.ui.pic_manage = ctrl.pic_manage;
        this.ui.pic_member = ctrl.pic_member;
        this.ui.btn_exitClub = ctrl.btn_exitClub;
        this.ui.btn_dissolve = ctrl.btn_dissolve;
        this.ui.btn_change_name = ctrl.btn_change_name;
        this.ui.node_memberView = ctrl.node_memberView;
        this.ui.node_memberList = ctrl.node_memberList;
        this.ui.prefab_member = ctrl.prefab_member;
        this.ui.btn_dissolve.active = false;
        this.enterRankAction();
        this.refreshAllUi();
      };
      View.prototype.refreshAllUi = function() {
        this.refreshClubIcon();
        this.refreshClubName();
        this.refreshClubId();
        this.refreshClubCount();
        this.refreshOpenGame();
        this.refreshClubIdentity();
        this.refreshAmendName();
        this.refreshClubIconBtn();
      };
      View.prototype.enterRankAction = function() {
        var _this = this;
        this.ui.node_sprite_all.pauseSystemEvents(true);
        var moveBy = cc.moveBy(.3, cc.p(-this.ui.node_sprite_all.width, 0));
        var callback = cc.callFunc(function() {
          _this.ui.node_sprite_all.resumeSystemEvents(true);
          _this.refreshAllUi();
        });
        this.ui.node_sprite_all.runAction(cc.sequence(moveBy, callback));
      };
      View.prototype.exitRankAction = function(exitCall) {
        this.ui.node_sprite_all.pauseSystemEvents(true);
        var moveBy = cc.moveBy(.3, cc.p(this.ui.node_sprite_all.width, 0));
        var callback = cc.callFunc(function() {
          exitCall();
        });
        this.ui.node_sprite_all.runAction(cc.sequence(moveBy, callback));
      };
      View.prototype.refreshClubIcon = function() {
        UiMgr_1.default.getInstance().setUserHead(this.ui.club_icon, 0, this.model.getClubData().avater);
      };
      View.prototype.refreshClubName = function() {
        this.ui.club_name.string = this.CutOutChat(this.model.getClubData().name, this.model.name_max);
      };
      View.prototype.refreshClubId = function() {
        this.ui.club_id.string = this.model.getClubData().no;
      };
      View.prototype.refreshClubCount = function() {
        var str = "" + this.model.getClubData().mCount;
        str = str + "/" + this.model.getClubData().mMax;
        this.ui.club_count.string = str;
      };
      View.prototype.refreshOpenGame = function() {
        var identity = this.model.getUserIdentity();
        if (identity != IDENTITY_TYPE.MEMBER) {
          this.ui.node_managerStrip.active = false;
          this.ui.btn_manageCtrl.resumeSystemEvents(true);
          var node_sprite = this.ui.btn_manageCtrl.getComponent(cc.Sprite);
          this.model.getOpenGame() == OPEN_GAME_MGR.MANAGE ? node_sprite.spriteFrame = this.ui.pic_manage : node_sprite.spriteFrame = this.ui.pic_member;
        } else {
          this.ui.node_managerStrip.active = false;
          this.ui.btn_manageCtrl.pauseSystemEvents(true);
        }
      };
      View.prototype.refreshClubIconBtn = function() {
        var identity = this.model.getUserIdentity();
        identity == IDENTITY_TYPE.MEMBER ? this.ui.btn_icon.pauseSystemEvents(true) : this.ui.btn_icon.resumeSystemEvents(true);
      };
      View.prototype.refreshClubIdentity = function() {
        var identity = this.model.getUserIdentity();
        if (identity == IDENTITY_TYPE.CAPTAIN) {
          this.ui.btn_exitClub.active = false;
          this.ui.btn_dissolve.active = 1 == this.model.delClubSwtich;
        } else {
          this.ui.btn_exitClub.active = true;
          this.ui.btn_dissolve.active = false;
        }
      };
      View.prototype.refreshAmendName = function() {
        var identity = this.model.getUserIdentity();
        if (identity == IDENTITY_TYPE.MEMBER) {
          this.ui.btn_change_name.active = false;
          this.ui.btn_change_name.pauseSystemEvents(true);
        } else {
          this.ui.btn_change_name.active = true;
          this.ui.btn_change_name.resumeSystemEvents(true);
        }
      };
      View.prototype.addMemberStrip = function() {
        var node_member = cc.instantiate(this.ui.prefab_member);
        this.ui.node_memberList.addChild(node_member);
      };
      View.prototype.removeMemberList = function() {
        this.ui.node_memberList.destroyAllChildren();
      };
      View.prototype.refreshMemberList = function() {
        var count = this.ui.node_memberList.childrenCount, curNode = cc.instantiate(this.ui.prefab_member), layout = this.ui.node_memberList.getComponent(cc.Layout), layoutGap = layout.spacingY, layoutHeight = layout.paddingTop + layout.paddingBottom;
        this.ui.node_memberList.height = layoutHeight + count * (curNode.height + layoutGap);
      };
      return View;
    }(BaseView_1.default);
    var Club_MemberListCtrl = function(_super) {
      __extends(Club_MemberListCtrl, _super);
      function Club_MemberListCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_sprite_all = null;
        _this.node_close = null;
        _this.btn_icon = null;
        _this.club_name = null;
        _this.club_id = null;
        _this.club_count = null;
        _this.node_managerStrip = null;
        _this.btn_manageCtrl = null;
        _this.pic_manage = null;
        _this.pic_member = null;
        _this.btn_exitClub = null;
        _this.btn_dissolve = null;
        _this.btn_change_name = null;
        _this.node_memberView = null;
        _this.node_memberList = null;
        _this.prefab_member = null;
        return _this;
      }
      Club_MemberListCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        ClubMemberMgr_1.default.getInstance().reqClubMember(this.model.getClubId(), this.model.getMemberPage());
      };
      Club_MemberListCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqClubInfo": this.http_reqClubInfo,
          "http.reqClubMember": this.http_reqClubMember,
          "http.reqClubDissolve": this.http_reqClubDissolve,
          "http.reqClubExit": this.http_reqClubExit,
          "http.reqClubChangeAvater": this.http_reqClubChangeIcon,
          "http.reqClubChangeName": this.http_reqClubChangeName,
          "http.reqClubChangeOpenGame": this.http_reqClubChangeOpenGame,
          "http.reqClubChangeIdentity": this.http_reqClubChangeIdentity,
          "http.reqClubKick": this.http_reqClubKick,
          "http.reqClubJoin": this.http_reqClubJoin,
          "http.reqClubBlacklisRemove": this.http_reqClubBlacklisRemove,
          "http.onClubInfo": this.http_onClubInfo,
          "http.reqGameSwitch": this.http_reqGameSwitch
        };
      };
      Club_MemberListCtrl.prototype.defineGlobalEvents = function() {};
      Club_MemberListCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.node_close, this.node_close_cb, "右关闭界面");
        this.connect(G_UiType.image, this.ui.btn_change_name, this.btn_change_name_cb, "改名");
        this.connect(G_UiType.image, this.ui.btn_icon, this.btn_icon_cb, "改图标");
        this.connect(G_UiType.scroll, this.ui.node_memberList, this.club_view_cb, "拖动动态添加");
        this.connect(G_UiType.image, this.ui.btn_manageCtrl, this.btn_manage_cb, "管理开房");
        var identity = this.model.getUserIdentity();
        identity != IDENTITY_TYPE.CAPTAIN ? this.connect(G_UiType.image, this.ui.btn_exitClub, this.btn_exitClub_cb, "退出茶馆") : this.connect(G_UiType.image, this.ui.btn_dissolve, this.btn_dissolve_cb, "解散茶馆");
      };
      Club_MemberListCtrl.prototype.start = function() {};
      Club_MemberListCtrl.prototype.http_reqClubInfo = function() {
        this.model.setUserIdentity();
        this.model.refreshClubData();
        this.view.refreshClubIcon();
        this.view.refreshClubName();
        this.view.refreshClubId();
        this.view.refreshClubCount();
        this.view.refreshAmendName();
        this.view.refreshOpenGame();
        this.view.refreshClubIconBtn();
      };
      Club_MemberListCtrl.prototype.http_reqClubMember = function() {
        this.model.refreshMemberList();
        this.addMemberList();
      };
      Club_MemberListCtrl.prototype.http_reqClubDissolve = function() {
        this.finish();
      };
      Club_MemberListCtrl.prototype.http_reqClubExit = function() {
        this.finish();
      };
      Club_MemberListCtrl.prototype.http_reqClubChangeIcon = function() {
        this.model.refreshClubData();
        this.view.refreshClubIcon();
      };
      Club_MemberListCtrl.prototype.http_reqClubChangeName = function() {
        FrameMgr_1.default.getInstance().showHintBox("茶馆名字修改成功！", function() {});
        this.model.refreshClubData();
        this.view.refreshClubName();
      };
      Club_MemberListCtrl.prototype.http_reqClubChangeOpenGame = function() {
        this.model.refreshClubData();
        this.view.refreshOpenGame();
      };
      Club_MemberListCtrl.prototype.http_reqClubChangeIdentity = function() {
        this.view.removeMemberList();
        this.model.setMemberPage(1);
        this.model.setMemberBegin(0);
        FrameMgr_1.default.getInstance().showHintBox("操作成功", function() {});
      };
      Club_MemberListCtrl.prototype.http_reqClubKick = function() {
        this.model.refreshMemberList();
        this.model.refreshClubData();
        this.view.refreshClubCount();
      };
      Club_MemberListCtrl.prototype.http_reqClubJoin = function(msg) {
        this.model.refreshClubData();
        this.view.refreshClubCount();
      };
      Club_MemberListCtrl.prototype.http_reqClubBlacklisRemove = function(msg) {
        this.model.refreshClubData();
        this.view.refreshClubCount();
      };
      Club_MemberListCtrl.prototype.http_onClubInfo = function(msg) {
        var data = msg.states;
        var user_id = UserMgr_1.default.getInstance().getUid();
        if (CLUB_INFO_STATE.ENTER == data.state) {
          if (data.change_id != user_id && data.operation_id != user_id) {
            this.view.removeMemberList();
            this.model.setMemberBegin(0);
            this.model.setMemberPage(1);
            this.model.refreshClubData();
            this.view.refreshClubCount();
          }
        } else if (CLUB_INFO_STATE.EXIT == data.state) if (data.change_id != user_id) {
          if (data.operation_id != user_id) {
            this.view.removeMemberList();
            this.model.refreshClubData();
            this.view.refreshClubCount();
            this.model.refreshMemberList();
            this.model.setMemberBegin(0);
            this.model.setMemberPage(1);
            this.addMemberList();
          }
        } else data.club_id == this.model.getClubId() && this.finish(); else if (CLUB_INFO_STATE.DISSOVE == data.state) data.club_id == this.model.getClubId() && this.finish(); else if (CLUB_INFO_STATE.CHANGEM == data.state && data.operation_id != user_id) {
          this.view.removeMemberList();
          this.model.setMemberBegin(0);
          this.model.setMemberPage(1);
        }
      };
      Club_MemberListCtrl.prototype.http_reqGameSwitch = function(msg) {
        this.model.updateSwitch(msg);
        this.view.refreshClubIdentity();
      };
      Club_MemberListCtrl.prototype.addMemberList = function() {
        var MemberList = this.model.getMemberList(), memberBegin = this.model.getMemberBegin(), memberCount = memberBegin + this.model.getMemberNum();
        console.log("memberCount", MemberList.length);
        memberCount = Math.min(memberCount, MemberList.length);
        for (var i = memberBegin; i < memberCount; i++) {
          var data = MemberList[i];
          BehaviorMgr_1.default.getInstance().setClubMemberId(data.id);
          this.view.addMemberStrip();
        }
        this.view.refreshMemberList();
        this.model.setMemberBegin(memberCount);
        this.model.addMemberPage(1);
        memberCount != memberBegin && this.model.setClubRecord(true);
      };
      Club_MemberListCtrl.prototype.club_view_cb = function(node, event) {
        if (event.type == cc.Node.EventType.TOUCH_MOVE) {
          var rank_list = this.model.getMemberList(), itemMax = rank_list.length;
          var node_height = node.height - this.ui.node_memberView.height;
          if (.25 * node_height * 4 < node.y && true == this.model.getClubRecord()) {
            this.model.setClubRecord(false);
            ClubMemberMgr_1.default.getInstance().reqClubMember(this.model.getClubId(), this.model.getMemberPage());
          }
        }
      };
      Club_MemberListCtrl.prototype.node_close_cb = function(node, event) {
        var _this = this;
        console.log("node_close_cb");
        this.view.exitRankAction(function() {
          _this.finish();
        });
      };
      Club_MemberListCtrl.prototype.btn_manage_cb = function(node, event) {
        var _this = this;
        console.log("btn_manage_cb");
        var state = null, str = "";
        if (OPEN_GAME_MGR.MANAGE == this.model.getOpenGame()) {
          state = OPEN_GAME_MGR.MEMBER;
          str = "开房权限切换为成员开房";
        } else if (OPEN_GAME_MGR.MEMBER == this.model.getOpenGame()) {
          state = OPEN_GAME_MGR.MANAGE;
          str = "开房权限切换为管理员开房";
        }
        FrameMgr_1.default.getInstance().showDialog(str, function() {
          ClubMgr_1.default.getInstance().reqClubChangeOpenGame(_this.model.getClubId(), state);
        }, "提示");
      };
      Club_MemberListCtrl.prototype.btn_exitClub_cb = function(node, event) {
        var _this = this;
        console.log("btn_exitClub_cb");
        FrameMgr_1.default.getInstance().showDialog("确定退出茶馆吗？", function() {
          ClubMgr_1.default.getInstance().reqClubExit(_this.model.getClubId());
        }, "提示");
      };
      Club_MemberListCtrl.prototype.btn_dissolve_cb = function(node, event) {
        var _this = this;
        console.log("btn_dissolve_cb");
        FrameMgr_1.default.getInstance().showDialog("茶馆解散后，无法恢复，是否解散？", function() {
          ClubMgr_1.default.getInstance().reqClubDissolve(_this.model.getClubId());
        }, "提示");
      };
      Club_MemberListCtrl.prototype.btn_change_name_cb = function() {
        this.start_sub_module(G_MODULE.ClubChangeName);
      };
      Club_MemberListCtrl.prototype.btn_icon_cb = function() {
        this.start_sub_module(G_MODULE.ClubChangeIcon);
      };
      __decorate([ property(cc.Node) ], Club_MemberListCtrl.prototype, "node_sprite_all", void 0);
      __decorate([ property(cc.Node) ], Club_MemberListCtrl.prototype, "node_close", void 0);
      __decorate([ property(cc.Node) ], Club_MemberListCtrl.prototype, "btn_icon", void 0);
      __decorate([ property(cc.Label) ], Club_MemberListCtrl.prototype, "club_name", void 0);
      __decorate([ property(cc.Label) ], Club_MemberListCtrl.prototype, "club_id", void 0);
      __decorate([ property(cc.Label) ], Club_MemberListCtrl.prototype, "club_count", void 0);
      __decorate([ property(cc.Node) ], Club_MemberListCtrl.prototype, "node_managerStrip", void 0);
      __decorate([ property(cc.Node) ], Club_MemberListCtrl.prototype, "btn_manageCtrl", void 0);
      __decorate([ property(cc.SpriteFrame) ], Club_MemberListCtrl.prototype, "pic_manage", void 0);
      __decorate([ property(cc.SpriteFrame) ], Club_MemberListCtrl.prototype, "pic_member", void 0);
      __decorate([ property(cc.Node) ], Club_MemberListCtrl.prototype, "btn_exitClub", void 0);
      __decorate([ property(cc.Node) ], Club_MemberListCtrl.prototype, "btn_dissolve", void 0);
      __decorate([ property(cc.Node) ], Club_MemberListCtrl.prototype, "btn_change_name", void 0);
      __decorate([ property(cc.Node) ], Club_MemberListCtrl.prototype, "node_memberView", void 0);
      __decorate([ property(cc.Node) ], Club_MemberListCtrl.prototype, "node_memberList", void 0);
      __decorate([ property(cc.Prefab) ], Club_MemberListCtrl.prototype, "prefab_member", void 0);
      Club_MemberListCtrl = __decorate([ ccclass ], Club_MemberListCtrl);
      return Club_MemberListCtrl;
    }(BaseCtrl_1.default);
    exports.default = Club_MemberListCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/ClubMemberMgr": "ClubMemberMgr",
    "../../GameMgrs/ClubMgr": "ClubMgr",
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/SwitchMgr": "SwitchMgr",
    "../../GameMgrs/UiMgr": "UiMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Club_MemberStripCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "aae3aibZCdMTqwECoBgdhKv", "Club_MemberStripCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var UiMgr_1 = require("../../GameMgrs/UiMgr");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var ClubMgr_1 = require("../../GameMgrs/ClubMgr");
    var ClubMemberMgr_1 = require("../../GameMgrs/ClubMemberMgr");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var IDENTITY_TOP_DOWN = {
      0: "1",
      1: "0"
    };
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.member_data = null;
        _this.member_id = null;
        _this.member_change = false;
        _this.user_identity = null;
        _this.club_id = null;
        _this.club_id = BehaviorMgr_1.default.getInstance().getClubSelectId();
        _this.member_id = BehaviorMgr_1.default.getInstance().getClubMemberId();
        _this.refreshMemberData();
        _this.member_change = false;
        return _this;
      }
      Model.prototype.refreshMemberData = function() {
        this.member_data = ClubMemberMgr_1.default.getInstance().getClubMemberData(this.member_id);
        this.user_identity = ClubMgr_1.default.getInstance().getClubIdentity(this.club_id);
      };
      Model.prototype.getClubId = function() {
        return this.club_id;
      };
      Model.prototype.getMemberTime = function() {
        return this.member_data.state;
      };
      Model.prototype.getMemberId = function() {
        return this.member_data.id;
      };
      Model.prototype.getMemberIcon = function() {
        return this.member_data.icon;
      };
      Model.prototype.getMemberName = function() {
        console.log(this.member_data.name + "123");
        return this.member_data.name;
      };
      Model.prototype.getMemberIdentity = function() {
        return this.member_data.identity;
      };
      Model.prototype.getMemberDiamond = function() {
        return this.member_data.diamond + "/" + this.member_data.diamondMax;
      };
      Model.prototype.getUserIdentity = function() {
        return this.user_identity;
      };
      Model.prototype.setMemberChange = function(state) {
        this.member_change = state;
      };
      Model.prototype.getMemberChange = function() {
        return this.member_change;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          pic_icon: null,
          label_name: null,
          identity_captain: null,
          identity_manage: null,
          label_diamond: null,
          btn_clear: null,
          btn_identity: null,
          btn_kick: null,
          identity_top: null,
          identity_down: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.pic_icon = ctrl.pic_icon;
        this.ui.label_name = ctrl.label_name;
        this.ui.identity_captain = ctrl.identity_captain;
        this.ui.identity_manage = ctrl.identity_manage;
        this.ui.label_diamond = ctrl.label_diamond;
        this.ui.btn_clear = ctrl.btn_clear;
        this.ui.btn_identity = ctrl.btn_identity;
        this.ui.btn_kick = ctrl.btn_kick;
        this.ui.identity_top = ctrl.identity_top;
        this.ui.identity_down = ctrl.identity_down;
        this.refreshIcon();
        this.refreshName();
        this.refreshIdentity();
        this.refreshDiamond();
        this.refreshBtnCtrl();
      };
      View.prototype.refreshIcon = function() {
        var icon = this.model.getMemberIcon();
        "number" == typeof icon ? UiMgr_1.default.getInstance().setUserHead(this.ui.pic_icon, icon) : UiMgr_1.default.getInstance().setUserHead(this.ui.pic_icon, 0, icon);
      };
      View.prototype.refreshName = function() {
        this.ui.label_name.string = this.model.getMemberName();
      };
      View.prototype.refreshIdentity = function() {
        var role_identity = this.model.getMemberIdentity();
        if (role_identity == IDENTITY_TYPE.CAPTAIN) {
          this.ui.identity_captain.active = true;
          this.ui.identity_manage.active = false;
        } else if (role_identity == IDENTITY_TYPE.MANAGE) {
          this.ui.identity_captain.active = false;
          this.ui.identity_manage.active = true;
        } else {
          this.ui.identity_captain.active = false;
          this.ui.identity_manage.active = false;
        }
      };
      View.prototype.refreshDiamond = function() {
        this.ui.label_diamond.string = this.model.getMemberDiamond();
      };
      View.prototype.refreshBtnCtrl = function() {
        var identity = this.model.getUserIdentity(), role_identity = this.model.getMemberIdentity();
        switch (identity) {
         case IDENTITY_TYPE.CAPTAIN:
          if (role_identity == IDENTITY_TYPE.CAPTAIN) {
            this.ui.btn_clear.position = this.ui.btn_identity.position;
            this.ui.btn_identity.destroy();
            this.ui.btn_kick.destroy();
          } else if (role_identity == IDENTITY_TYPE.MANAGE) {
            this.ui.identity_top.active = false;
            this.ui.identity_down.active = true;
          } else if (role_identity == IDENTITY_TYPE.MEMBER) {
            this.ui.identity_top.active = true;
            this.ui.identity_down.active = false;
          }
          break;

         case IDENTITY_TYPE.MANAGE:
          this.ui.btn_clear.destroy();
          this.ui.btn_identity.destroy();
          role_identity != IDENTITY_TYPE.CAPTAIN && role_identity != IDENTITY_TYPE.MANAGE || this.ui.btn_kick.destroy();
          break;

         case IDENTITY_TYPE.MEMBER:
          this.ui.btn_clear.destroy();
          this.ui.btn_identity.destroy();
          this.ui.btn_kick.destroy();
        }
      };
      return View;
    }(BaseView_1.default);
    var Club_MemberStripCtrl = function(_super) {
      __extends(Club_MemberStripCtrl, _super);
      function Club_MemberStripCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.pic_icon = null;
        _this.label_name = null;
        _this.identity_captain = null;
        _this.identity_manage = null;
        _this.label_diamond = null;
        _this.btn_clear = null;
        _this.btn_identity = null;
        _this.btn_kick = null;
        _this.identity_top = null;
        _this.identity_down = null;
        return _this;
      }
      Club_MemberStripCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Club_MemberStripCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqClubClearDiamond": this.http_reqClubClearDiamond,
          "http.reqClubKick": this.http_reqClubKick,
          "http.onClubInfo": this.http_onClubInfo
        };
      };
      Club_MemberStripCtrl.prototype.defineGlobalEvents = function() {};
      Club_MemberStripCtrl.prototype.connectUi = function() {
        null != this.ui.btn_clear && this.connect(G_UiType.image, this.ui.btn_clear, this.btn_clear_cb, "清理钻石");
        null != this.ui.btn_identity && this.connect(G_UiType.image, this.ui.btn_identity, this.btn_identity_cb, "成员管理");
        null != this.ui.btn_kick && this.connect(G_UiType.image, this.ui.btn_kick, this.btn_kick_cb, "踢出");
      };
      Club_MemberStripCtrl.prototype.start = function() {};
      Club_MemberStripCtrl.prototype.http_reqClubClearDiamond = function() {
        if (true == this.model.getMemberChange()) {
          this.model.refreshMemberData();
          this.view.refreshDiamond();
          this.model.setMemberChange(false);
        }
      };
      Club_MemberStripCtrl.prototype.http_reqClubKick = function() {
        if (true == this.model.getMemberChange()) {
          this.finish();
          FrameMgr_1.default.getInstance().showTips("已经将该成员踢出茶馆！", function() {}, 35, cc.color(0, 255, 50));
        }
      };
      Club_MemberStripCtrl.prototype.http_onClubInfo = function(msg) {
        var data = msg.states;
        if (CLUB_INFO_STATE.EXIT == data.state) {
          var user_id = UserMgr_1.default.getInstance().getUid();
          msg.change_id != user_id && this.model.getMemberId() == data.change_id && this.finish();
        }
      };
      Club_MemberStripCtrl.prototype.btn_clear_cb = function(node, event) {
        var _this = this;
        console.log("btn_clear_cb");
        FrameMgr_1.default.getInstance().showDialog("钻石消耗清零", function() {
          _this.model.setMemberChange(true);
          ClubMemberMgr_1.default.getInstance().reqClubClearDiamond(_this.model.getClubId(), _this.model.getMemberId());
        }, "设置");
        this.changClubList();
      };
      Club_MemberStripCtrl.prototype.btn_identity_cb = function(node, event) {
        var _this = this;
        console.log("btn_identity_cb");
        FrameMgr_1.default.getInstance().showDialog("修改玩家的限权", function() {
          _this.model.setMemberChange(true);
          var identity = IDENTITY_TOP_DOWN[_this.model.getMemberIdentity()];
          ClubMgr_1.default.getInstance().reqClubChangeIdentity(_this.model.getClubId(), _this.model.getMemberId(), identity);
        }, "设置");
        this.changClubList();
      };
      Club_MemberStripCtrl.prototype.btn_kick_cb = function(node, event) {
        var _this = this;
        console.log("btn_kick_cb");
        FrameMgr_1.default.getInstance().showDialog("是否确定将该成员踢出茶馆？", function() {
          _this.model.setMemberChange(true);
          ClubMgr_1.default.getInstance().reqClubKick(_this.model.getClubId(), _this.model.getMemberId());
        }, "设置");
        this.changClubList();
      };
      Club_MemberStripCtrl.prototype.changClubList = function() {
        var club_id = this.model.getClubId();
        ClubMgr_1.default.getInstance().changeClubList(club_id);
        this.gemit("refreshClubList");
      };
      __decorate([ property(cc.Sprite) ], Club_MemberStripCtrl.prototype, "pic_icon", void 0);
      __decorate([ property(cc.Label) ], Club_MemberStripCtrl.prototype, "label_name", void 0);
      __decorate([ property(cc.Node) ], Club_MemberStripCtrl.prototype, "identity_captain", void 0);
      __decorate([ property(cc.Node) ], Club_MemberStripCtrl.prototype, "identity_manage", void 0);
      __decorate([ property(cc.Label) ], Club_MemberStripCtrl.prototype, "label_diamond", void 0);
      __decorate([ property(cc.Node) ], Club_MemberStripCtrl.prototype, "btn_clear", void 0);
      __decorate([ property(cc.Node) ], Club_MemberStripCtrl.prototype, "btn_identity", void 0);
      __decorate([ property(cc.Node) ], Club_MemberStripCtrl.prototype, "btn_kick", void 0);
      __decorate([ property(cc.Node) ], Club_MemberStripCtrl.prototype, "identity_top", void 0);
      __decorate([ property(cc.Node) ], Club_MemberStripCtrl.prototype, "identity_down", void 0);
      Club_MemberStripCtrl = __decorate([ ccclass ], Club_MemberStripCtrl);
      return Club_MemberStripCtrl;
    }(BaseCtrl_1.default);
    exports.default = Club_MemberStripCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/ClubMemberMgr": "ClubMemberMgr",
    "../../GameMgrs/ClubMgr": "ClubMgr",
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/UiMgr": "UiMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Club_RechargeCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f1283lRqTVNTZQiUSOqmKmb", "Club_RechargeCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var ClubMgr_1 = require("../../GameMgrs/ClubMgr");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.club_id = null;
        _this.user_info = null;
        _this.diamond_min = 1;
        _this.diamondCount = 0;
        _this.diamond_min = 1;
        _this.diamondCount = _this.diamond_min;
        _this.club_id = BehaviorMgr_1.default.getInstance().getClubSelectId();
        _this.user_info = UserMgr_1.default.getInstance().getMyInfo();
        return _this;
      }
      Model.prototype.getClubId = function() {
        return this.club_id;
      };
      Model.prototype.getUserDiamond = function() {
        return this.user_info.gold;
      };
      Model.prototype.getDiamond = function() {
        return this.diamondCount;
      };
      Model.prototype.setDiamond = function(data) {
        this.diamondCount = data;
      };
      Model.prototype.addDiamond = function() {
        this.diamondCount++;
        this.diamondCount = Math.min(this.diamondCount, this.getUserDiamond());
      };
      Model.prototype.minusDiamond = function() {
        this.diamondCount--;
        this.diamondCount = Math.max(this.diamondCount, this.diamond_min);
      };
      Model.prototype.maxDiamond = function() {
        this.diamondCount = this.getUserDiamond();
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_minus: null,
          btn_add: null,
          btn_max: null,
          node_edit: null,
          btn_confirm: null,
          btn_close: null,
          label_diamond: null,
          edit_club_diamond: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.btn_minus = ctrl.btn_minus;
        this.ui.btn_add = ctrl.btn_add;
        this.ui.btn_max = ctrl.btn_max;
        this.ui.node_edit = ctrl.node_edit;
        this.ui.btn_confirm = ctrl.btn_confirm;
        this.ui.btn_close = ctrl.btn_close;
        this.ui.label_diamond = ctrl.label_diamond;
        this.ui.edit_club_diamond = this.ui.node_edit.getComponent(cc.EditBox);
        this.initUiEdit();
        this.refreshDiamond();
        this.setEditString();
      };
      View.prototype.initUiEdit = function() {
        console.log(this.ui.edit_club_diamond);
        this.ui.edit_club_diamond.setFont = "Texture/Plat/setting/fzzyjt.ttf";
        this.ui.edit_club_diamond.setPlaceholderFont = "Texture/Plat/setting/fzzyjt.ttf";
      };
      View.prototype.refreshDiamond = function() {
        this.ui.label_diamond.string = this.model.getUserDiamond();
      };
      View.prototype.setEditString = function() {
        this.ui.edit_club_diamond.string = this.model.getDiamond();
      };
      return View;
    }(BaseView_1.default);
    var Club_RechargeCtrl = function(_super) {
      __extends(Club_RechargeCtrl, _super);
      function Club_RechargeCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_minus = null;
        _this.btn_add = null;
        _this.btn_max = null;
        _this.node_edit = null;
        _this.btn_confirm = null;
        _this.btn_close = null;
        _this.label_diamond = null;
        return _this;
      }
      Club_RechargeCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Club_RechargeCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqClubRecharge": this.http_reqClubRecharge
        };
      };
      Club_RechargeCtrl.prototype.defineGlobalEvents = function() {};
      Club_RechargeCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_minus, this.btn_minus_cb, "递减");
        this.connect(G_UiType.image, this.ui.btn_add, this.btn_add_cb, "递增");
        this.connect(G_UiType.image, this.ui.btn_max, this.btn_max_cb, "最大值");
        this.connect(G_UiType.image, this.ui.btn_confirm, this.btn_confirm_cb, "确定");
        this.connect(G_UiType.image, this.ui.btn_close, this.btn_close_cb, "取消");
        this.connect(G_UiType.edit, this.ui.node_edit, this.node_edit_cb, "输入监听");
      };
      Club_RechargeCtrl.prototype.start = function() {};
      Club_RechargeCtrl.prototype.http_reqClubRecharge = function(msg) {
        this.finish();
        UserMgr_1.default.getInstance().reqMyInfo();
        FrameMgr_1.default.getInstance().showMsgBox("充值成功", function() {}, "提示");
      };
      Club_RechargeCtrl.prototype.btn_minus_cb = function(node, event) {
        this.model.minusDiamond();
        this.view.setEditString();
      };
      Club_RechargeCtrl.prototype.btn_add_cb = function(node, event) {
        this.model.addDiamond();
        this.view.setEditString();
      };
      Club_RechargeCtrl.prototype.btn_max_cb = function(node, event) {
        this.model.maxDiamond();
        this.view.setEditString();
      };
      Club_RechargeCtrl.prototype.btn_confirm_cb = function(node, event) {
        0 != this.model.getDiamond() ? ClubMgr_1.default.getInstance().reqClubRecharge(this.model.getClubId(), this.model.getDiamond()) : FrameMgr_1.default.getInstance().showTips("请正确输入数字");
      };
      Club_RechargeCtrl.prototype.btn_close_cb = function(node, event) {
        this.finish();
      };
      Club_RechargeCtrl.prototype.node_edit_cb = function(str, event) {
        console.log("node_edit_cb");
        if ("editing-did-ended" == str) {
          var content = this.ui.edit_club_diamond.string;
          this.model.setDiamond(Number(content));
        }
      };
      __decorate([ property(cc.Node) ], Club_RechargeCtrl.prototype, "btn_minus", void 0);
      __decorate([ property(cc.Node) ], Club_RechargeCtrl.prototype, "btn_add", void 0);
      __decorate([ property(cc.Node) ], Club_RechargeCtrl.prototype, "btn_max", void 0);
      __decorate([ property(cc.Node) ], Club_RechargeCtrl.prototype, "node_edit", void 0);
      __decorate([ property(cc.Node) ], Club_RechargeCtrl.prototype, "btn_confirm", void 0);
      __decorate([ property(cc.Node) ], Club_RechargeCtrl.prototype, "btn_close", void 0);
      __decorate([ property(cc.Label) ], Club_RechargeCtrl.prototype, "label_diamond", void 0);
      Club_RechargeCtrl = __decorate([ ccclass ], Club_RechargeCtrl);
      return Club_RechargeCtrl;
    }(BaseCtrl_1.default);
    exports.default = Club_RechargeCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/ClubMgr": "ClubMgr",
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Club_RecordListCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "850capZ91FMPKbtkRYXp63/", "Club_RecordListCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var GameRecordMgr_1 = require("../../GameMgrs/GameRecordMgr");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var BunchInfoMgr_1 = require("../../GameMgrs/BunchInfoMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.record_list = null;
        _this.club_id = null;
        _this.record_begin = null;
        _this.record_num = null;
        _this.record_page = null;
        _this.list_record = true;
        _this.record_num = 20;
        _this.record_begin = 0;
        _this.record_page = 1;
        _this.record_list = new Array();
        _this.club_id = BehaviorMgr_1.default.getInstance().getClubSelectId();
        return _this;
      }
      Model.prototype.getRecordList = function() {
        return this.record_list;
      };
      Model.prototype.getClubId = function() {
        return this.club_id;
      };
      Model.prototype.getRecordBegin = function() {
        return this.record_begin;
      };
      Model.prototype.setRecordBegin = function(data) {
        this.record_begin = data;
      };
      Model.prototype.getRecordPage = function() {
        return this.record_page;
      };
      Model.prototype.addRecordPage = function(data) {
        this.record_page += data;
      };
      Model.prototype.setRecordPage = function(data) {
        this.record_page = data;
      };
      Model.prototype.getRecordNum = function() {
        return this.record_num;
      };
      Model.prototype.setListRecord = function(state) {
        this.list_record = state;
      };
      Model.prototype.getListRecord = function() {
        return this.list_record;
      };
      Model.prototype.refreshRecord = function() {
        this.record_list = GameRecordMgr_1.default.getInstance().getRecordList();
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_close: null,
          record_list: null,
          record_strip: null,
          node_recordView: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.btn_close = ctrl.btn_close;
        this.ui.record_list = ctrl.record_list;
        this.ui.record_strip = ctrl.record_strip;
        this.ui.node_recordView = ctrl.node_recordView;
      };
      View.prototype.addRecordStrip = function() {
        var record_node = cc.instantiate(this.ui.record_strip);
        this.ui.record_list.addChild(record_node);
      };
      View.prototype.refreshRecordList = function() {
        var count = this.ui.record_list.childrenCount, height = 0;
        if (0 != count) {
          var layout = this.ui.record_list.getComponent(cc.Layout), gapTop = layout.paddingTop, gapBottom = layout.paddingBottom, gapY = layout.spacingY, node = this.ui.record_list.children[0];
          height += gapTop;
          height += gapBottom;
          height += (count - 1) * gapY;
          height += node.height * count;
        }
        this.ui.record_list.height = height;
      };
      View.prototype.removeRecordList = function() {
        this.ui.record_list.destroyAllChildren();
      };
      return View;
    }(BaseView_1.default);
    var Club_RecordListCtrl = function(_super) {
      __extends(Club_RecordListCtrl, _super);
      function Club_RecordListCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_close = null;
        _this.record_list = null;
        _this.record_strip = null;
        _this.node_recordView = null;
        return _this;
      }
      Club_RecordListCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        GameRecordMgr_1.default.getInstance().reqGambleRecordList(1, 0, 0, this.model.getClubId());
      };
      Club_RecordListCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqGambleRecordList": this.http_reqGamebleRecordList,
          "http.onClubInfo": this.http_onClubInfo,
          "http.reqGambleRecord": this.http_reqGambleRecord
        };
      };
      Club_RecordListCtrl.prototype.defineGlobalEvents = function() {};
      Club_RecordListCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_close, this.btn_close_cb, "关闭界面");
        this.connect(G_UiType.scroll, this.ui.record_list, this.record_view_cb, "切换列表内容");
      };
      Club_RecordListCtrl.prototype.start = function() {};
      Club_RecordListCtrl.prototype.http_reqGamebleRecordList = function(msg) {
        if (1 == msg.page) {
          this.model.setRecordBegin(0);
          this.model.setRecordPage(1);
          this.view.removeRecordList();
        }
        this.model.refreshRecord();
        this.addMemberList();
      };
      Club_RecordListCtrl.prototype.http_onClubInfo = function(msg) {
        var data = msg.states;
        if (CLUB_INFO_STATE.EXIT == data.state) {
          var user_id = UserMgr_1.default.getInstance().getUid();
          data.change_id == user_id && this.model.getClubId() == data.club_id && this.finish();
        } else CLUB_INFO_STATE.DISSOVE == data.state && data.club_id == this.model.getClubId() && this.finish();
      };
      Club_RecordListCtrl.prototype.http_reqGambleRecord = function(msg) {
        BunchInfoMgr_1.default.getInstance().showFinalSettle(msg.gameid);
      };
      Club_RecordListCtrl.prototype.addMemberList = function() {
        var record_list = this.model.getRecordList(), recordBegin = this.model.getRecordBegin(), recordCount = recordBegin + this.model.getRecordNum(), list_count = null == record_list.length ? 0 : record_list.length;
        recordCount = Math.min(recordCount, list_count);
        for (var i = recordBegin; i < recordCount; i++) {
          var data = record_list[i];
          BehaviorMgr_1.default.getInstance().setClubRecordData(data);
          this.view.addRecordStrip();
        }
        this.view.refreshRecordList();
        this.model.setRecordBegin(recordCount);
        this.model.addRecordPage(1);
        recordCount != recordBegin && this.model.setListRecord(true);
      };
      Club_RecordListCtrl.prototype.btn_close_cb = function(node) {
        console.log("node_close_cb");
        this.finish();
      };
      Club_RecordListCtrl.prototype.record_view_cb = function(node, event) {
        if (event.type == cc.Node.EventType.TOUCH_MOVE) {
          var record_list = this.model.getRecordList(), itemMax = record_list.length;
          var node_height = node.height - this.ui.node_recordView.height;
          if (.25 * node_height * 4 < node.y && true == this.model.getListRecord()) {
            this.model.setListRecord(false);
            GameRecordMgr_1.default.getInstance().reqGambleRecordList(this.model.getRecordPage());
          }
        }
      };
      __decorate([ property(cc.Node) ], Club_RecordListCtrl.prototype, "btn_close", void 0);
      __decorate([ property(cc.Node) ], Club_RecordListCtrl.prototype, "record_list", void 0);
      __decorate([ property(cc.Prefab) ], Club_RecordListCtrl.prototype, "record_strip", void 0);
      __decorate([ property(cc.Node) ], Club_RecordListCtrl.prototype, "node_recordView", void 0);
      Club_RecordListCtrl = __decorate([ ccclass ], Club_RecordListCtrl);
      return Club_RecordListCtrl;
    }(BaseCtrl_1.default);
    exports.default = Club_RecordListCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../GameMgrs/GameRecordMgr": "GameRecordMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Club_RecordStripCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d8b58wHS+1Lu6D4p0QCG+Zi", "Club_RecordStripCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var BunchInfoMgr_1 = require("../../GameMgrs/BunchInfoMgr");
    var GameCateCfg_1 = require("../../CfgMgrs/GameCateCfg");
    var RECORD_PAY_NAME = {
      0: "房主支付",
      1: "AA支付",
      2: "赢家支付"
    };
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.record_data = null;
        _this.record_data = BehaviorMgr_1.default.getInstance().getClubRecordData();
        return _this;
      }
      Model.prototype.getRecordData = function() {
        return this.record_data;
      };
      Model.prototype.getRoomType = function() {
        return this.record_data.type;
      };
      Model.prototype.getStrRecordType = function() {
        console.log("getRecordDataType", this.record_data.type);
        var games = GameCateCfg_1.default.getInstance().getGameById(this.record_data.type);
        console.log(games);
        var type_name = games.name;
        return type_name;
      };
      Model.prototype.getRoomName = function() {
        var count = this.record_data.memberlist.length;
        for (var i = 0; i < count; i++) {
          var data = this.record_data.memberlist[i];
          if (1 == data.roomOwner) return data.name;
        }
        return "";
      };
      Model.prototype.getRoomPay = function() {
        var pay = RECORD_PAY_NAME[this.record_data.pay_type];
        return pay;
      };
      Model.prototype.getRoomPayCount = function() {
        return this.record_data.pay_count;
      };
      Model.prototype.getRoomTime = function() {
        return this.record_data.time;
      };
      Model.prototype.getRecordBunchid = function() {
        return this.record_data.bunchid;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          lable_type: null,
          lable_name: null,
          lable_pay: null,
          lable_pay_count: null,
          lable_time: null,
          btn_enter: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.lable_type = ctrl.lable_type;
        this.ui.lable_name = ctrl.lable_name;
        this.ui.lable_pay = ctrl.lable_pay;
        this.ui.lable_pay_count = ctrl.lable_pay_count;
        this.ui.lable_time = ctrl.lable_time;
        this.ui.btn_enter = ctrl.btn_enter;
        this.refreshType();
        this.refreshName();
        this.refreshPay();
        this.refreshPayCount();
        this.refreshTime();
      };
      View.prototype.refreshType = function() {
        this.ui.lable_type.string = this.model.getStrRecordType();
      };
      View.prototype.refreshName = function() {
        this.ui.lable_name.string = this.model.getRoomName();
      };
      View.prototype.refreshPay = function() {
        this.ui.lable_pay.string = this.model.getRoomPay();
      };
      View.prototype.refreshPayCount = function() {
        this.ui.lable_pay_count.string = "*" + this.model.getRoomPayCount();
      };
      View.prototype.refreshTime = function() {
        this.ui.lable_time.string = this.model.getRoomTime();
      };
      return View;
    }(BaseView_1.default);
    var Club_RecordStripCtrl = function(_super) {
      __extends(Club_RecordStripCtrl, _super);
      function Club_RecordStripCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.lable_type = null;
        _this.lable_name = null;
        _this.lable_pay = null;
        _this.lable_pay_count = null;
        _this.lable_time = null;
        _this.btn_enter = null;
        return _this;
      }
      Club_RecordStripCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Club_RecordStripCtrl.prototype.defineNetEvents = function() {};
      Club_RecordStripCtrl.prototype.defineGlobalEvents = function() {};
      Club_RecordStripCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_enter, this.btn_enter_cb, "进入详情");
      };
      Club_RecordStripCtrl.prototype.start = function() {};
      Club_RecordStripCtrl.prototype.btn_enter_cb = function(node, event) {
        console.log("btn_enter_cb");
        BunchInfoMgr_1.default.getInstance().reqGambleRecord(this.model.getRecordBunchid());
      };
      __decorate([ property(cc.Label) ], Club_RecordStripCtrl.prototype, "lable_type", void 0);
      __decorate([ property(cc.Label) ], Club_RecordStripCtrl.prototype, "lable_name", void 0);
      __decorate([ property(cc.Label) ], Club_RecordStripCtrl.prototype, "lable_pay", void 0);
      __decorate([ property(cc.Label) ], Club_RecordStripCtrl.prototype, "lable_pay_count", void 0);
      __decorate([ property(cc.Label) ], Club_RecordStripCtrl.prototype, "lable_time", void 0);
      __decorate([ property(cc.Node) ], Club_RecordStripCtrl.prototype, "btn_enter", void 0);
      Club_RecordStripCtrl = __decorate([ ccclass ], Club_RecordStripCtrl);
      return Club_RecordStripCtrl;
    }(BaseCtrl_1.default);
    exports.default = Club_RecordStripCtrl;
    cc._RF.pop();
  }, {
    "../../CfgMgrs/GameCateCfg": "GameCateCfg",
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Club_RoomStripCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a03e0DpjrFB1rjYw0WpWjpX", "Club_RoomStripCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var RoomMgr_1 = require("../../GameMgrs/RoomMgr");
    var GameCateCfg_1 = require("../../CfgMgrs/GameCateCfg");
    var GameResCfg_1 = require("../../CfgMgrs/GameResCfg");
    var RoomCostCfg_1 = require("../../CfgMgrs/RoomCostCfg");
    var CLUB_ROOM_PAY_SOURCE = {
      ROOM_CREATE_SELF: 1,
      ROOM_CREATE_CLUB: 2
    };
    var CLUB_ROOM_PAY_TYPE = {
      TYPE_SELF: 0,
      TYPE_AA: 1,
      TYPE_WIN: 2
    };
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.room_data = null;
        _this.game_res = null;
        _this.res_path = "Plat/Club/";
        _this.room_data = BehaviorMgr_1.default.getInstance().getClubGameRoom();
        _this.game_res = GameResCfg_1.default.getInstance().getGameResData(_this.room_data.type);
        console.log("Club_RoomStripCtrl", _this.game_res);
        return _this;
      }
      Model.prototype.getRoomId = function() {
        return this.room_data.id;
      };
      Model.prototype.getRoomName = function() {
        return this.room_data.name + "的房间";
      };
      Model.prototype.getRoomType = function() {
        var games = GameCateCfg_1.default.getInstance().getGameById(this.room_data.type);
        var type_name = games.name;
        return type_name;
      };
      Model.prototype.getRoomPay = function() {
        var type_name = this.getPayTypeName(this.room_data.payType);
        var pay_count = 0;
        if (0 == this.room_data.roundMax) pay_count = RoomCostCfg_1.default.getInstance().getRoomCost(GameCateCfg_1.default.getInstance().getGameById(this.room_data.type).code, 1, this.room_data.roundMax, this.room_data.countMax, this.room_data.type); else {
          console.log("支付的类型是什么" + this.room_data.payType);
          console.log("游戏名字" + GameCateCfg_1.default.getInstance().getGameById(this.room_data.type).code);
          pay_count = RoomCostCfg_1.default.getInstance().getRoomCost(GameCateCfg_1.default.getInstance().getGameById(this.room_data.type).code, 0, this.room_data.roundMax, this.room_data.countMax, this.room_data.payType);
        }
        return type_name + ":" + pay_count;
      };
      Model.prototype.setRoomCount = function(data) {
        this.room_data.mCount = data;
      };
      Model.prototype.getRoomCount = function() {
        return this.room_data.count + "/" + this.room_data.countMax;
      };
      Model.prototype.getRoomTime = function() {
        return this.room_data.time;
      };
      Model.prototype.getRoomRound = function() {
        if (0 == this.room_data.roundMax) return "1课";
        return this.room_data.round + "/" + this.room_data.roundMax;
      };
      Model.prototype.getClubPaySource = function() {
        return this.room_data.paySource;
      };
      Model.prototype.getPayTypeName = function(type) {
        var strName = "";
        switch (type) {
         case CLUB_ROOM_PAY_TYPE.TYPE_SELF:
          strName = "房主支付";
          break;

         case CLUB_ROOM_PAY_TYPE.TYPE_AA:
          strName = "AA制支付";
          break;

         case CLUB_ROOM_PAY_TYPE.TYPE_WIN:
          strName = "赢家支付";
        }
        return strName;
      };
      Model.prototype.getGameResData = function() {
        return this.game_res;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          label_name: null,
          label_type: null,
          label_pay: null,
          label_count: null,
          label_time: null,
          label_round: null,
          btn_room: null,
          node_club: null,
          node_bottom: null,
          node_title: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.label_name = ctrl.label_name;
        this.ui.label_type = ctrl.label_type;
        this.ui.label_pay = ctrl.label_pay;
        this.ui.label_count = ctrl.label_count;
        this.ui.label_time = ctrl.label_time;
        this.ui.label_round = ctrl.label_round;
        this.ui.btn_room = ctrl.btn_room;
        this.ui.node_club = ctrl.node_club;
        this.ui.node_bottom = ctrl.node_bottom;
        this.ui.node_title = ctrl.node_title;
        this.refreshUi();
      };
      View.prototype.refreshUi = function() {
        this.refreshRoomName();
        this.refreshRoomType();
        this.refreshRoomPay();
        this.refreshRoomCount();
        this.refreshRoomTime();
        this.refreshRoomRound();
        this.refreshRoomSource();
        this.refreshTitleBottom();
      };
      View.prototype.refreshRoomName = function() {
        this.ui.label_name.string = this.model.getRoomName();
      };
      View.prototype.refreshRoomType = function() {
        this.ui.label_type.string = this.model.getRoomType();
      };
      View.prototype.refreshRoomPay = function() {
        this.ui.label_pay.string = this.model.getRoomPay();
      };
      View.prototype.refreshRoomCount = function() {
        this.ui.label_count.string = this.model.getRoomCount();
      };
      View.prototype.refreshRoomTime = function() {
        this.ui.label_time.string = this.model.getRoomTime();
      };
      View.prototype.refreshRoomRound = function() {
        this.ui.label_round.string = this.model.getRoomRound();
      };
      View.prototype.refreshRoomSource = function() {
        2 == this.model.getClubPaySource() ? this.ui.node_club.active = true : this.ui.node_club.active = false;
      };
      View.prototype.refreshTitleBottom = function() {
        var _this = this;
        var game_res = this.model.getGameResData();
        cc.loader.loadRes(game_res.club_room_down);
        cc.loader.loadRes(this.model.res_path + game_res.club_room_down, cc.SpriteFrame, function(err, spriteFrame) {
          err ? cc.error(err) : _this.ui.node_bottom.spriteFrame = spriteFrame;
        });
        cc.loader.loadRes(this.model.res_path + game_res.club_room_title, cc.SpriteFrame, function(err, spriteFrame) {
          err ? cc.error(err) : _this.ui.node_title.spriteFrame = spriteFrame;
        });
      };
      return View;
    }(BaseView_1.default);
    var Club_RoomStripCtrl = function(_super) {
      __extends(Club_RoomStripCtrl, _super);
      function Club_RoomStripCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label_name = null;
        _this.label_type = null;
        _this.label_pay = null;
        _this.label_count = null;
        _this.label_time = null;
        _this.label_round = null;
        _this.btn_room = null;
        _this.node_club = null;
        _this.node_bottom = null;
        _this.node_title = null;
        return _this;
      }
      Club_RoomStripCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Club_RoomStripCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.onClubGame": this.http_onClubGame,
          "http.reqFangKaCfg": this.http_reqFangKaCfg
        };
      };
      Club_RoomStripCtrl.prototype.defineGlobalEvents = function() {};
      Club_RoomStripCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_room, this.btn_room_cb, "点击房间");
      };
      Club_RoomStripCtrl.prototype.start = function() {};
      Club_RoomStripCtrl.prototype.http_onClubGame = function(msg) {
        var data = msg.states;
        if (data.state == CLUB_GAME_STATE.COLSE) this.finish(); else if (data.state == CLUB_GAME_STATE.REMOVE) {
          this.model.setRoomCount(data.count);
          this.view.refreshRoomCount();
        }
      };
      Club_RoomStripCtrl.prototype.http_reqFangKaCfg = function() {};
      Club_RoomStripCtrl.prototype.btn_room_cb = function() {
        console.log("btn_room_cb" + this.model.getRoomId());
        var roomId = this.model.getRoomId();
        RoomMgr_1.default.getInstance().reqFangKaCfg(roomId);
      };
      __decorate([ property(cc.Label) ], Club_RoomStripCtrl.prototype, "label_name", void 0);
      __decorate([ property(cc.Label) ], Club_RoomStripCtrl.prototype, "label_type", void 0);
      __decorate([ property(cc.Label) ], Club_RoomStripCtrl.prototype, "label_pay", void 0);
      __decorate([ property(cc.Label) ], Club_RoomStripCtrl.prototype, "label_count", void 0);
      __decorate([ property(cc.Label) ], Club_RoomStripCtrl.prototype, "label_time", void 0);
      __decorate([ property(cc.Label) ], Club_RoomStripCtrl.prototype, "label_round", void 0);
      __decorate([ property(cc.Node) ], Club_RoomStripCtrl.prototype, "btn_room", void 0);
      __decorate([ property(cc.Node) ], Club_RoomStripCtrl.prototype, "node_club", void 0);
      __decorate([ property(cc.Sprite) ], Club_RoomStripCtrl.prototype, "node_bottom", void 0);
      __decorate([ property(cc.Sprite) ], Club_RoomStripCtrl.prototype, "node_title", void 0);
      Club_RoomStripCtrl = __decorate([ ccclass ], Club_RoomStripCtrl);
      return Club_RoomStripCtrl;
    }(BaseCtrl_1.default);
    exports.default = Club_RoomStripCtrl;
    cc._RF.pop();
  }, {
    "../../CfgMgrs/GameCateCfg": "GameCateCfg",
    "../../CfgMgrs/GameResCfg": "GameResCfg",
    "../../CfgMgrs/RoomCostCfg": "RoomCostCfg",
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/RoomMgr": "RoomMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Club_SeekListCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "37f8ehZnMhMiJlYqLLEoI4o", "Club_SeekListCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var ClubMgr_1 = require("../../GameMgrs/ClubMgr");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var SwitchMgr_1 = require("../../GameMgrs/SwitchMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.seek_name = "";
        _this.seek_list = null;
        _this.creatSwitch = null;
        _this.seek_list = new Array();
        _this.creatSwitch = SwitchMgr_1.default.getInstance().get_switch_add_club();
        return _this;
      }
      Model.prototype.setSeekName = function(str) {
        this.seek_name = str;
      };
      Model.prototype.getSeekName = function() {
        return this.seek_name;
      };
      Model.prototype.setSeekList = function(list) {
        this.seek_list = list;
      };
      Model.prototype.refreshSeekList = function() {
        this.seek_list = ClubMgr_1.default.getInstance().getSeekList();
      };
      Model.prototype.getSeekList = function() {
        return this.seek_list;
      };
      Model.prototype.updateSwitch = function(msg) {
        this.creatSwitch = msg.cfg.switch_add_club;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_close: null,
          btn_seek: null,
          node_editseek: null,
          edit_seek: null,
          club_list: null,
          club_strip: null,
          node_create: null,
          node_club_seek: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.btn_close = ctrl.btn_close;
        this.ui.btn_seek = ctrl.btn_seek;
        this.ui.node_editseek = ctrl.node_editseek;
        this.ui.edit_seek = ctrl.edit_seek;
        this.ui.club_list = ctrl.club_list;
        this.ui.club_strip = ctrl.club_strip;
        this.ui.node_create = ctrl.node_create;
        this.ui.node_club_seek = ctrl.node_club_seek;
        this.ui.node_create.active = false;
        this.showCreateBtn();
      };
      View.prototype.addClubStrip = function() {
        var club_node = cc.instantiate(this.ui.club_strip);
        this.ui.club_list.addChild(club_node);
      };
      View.prototype.removeAllClubStrip = function() {
        this.ui.club_list.destroyAllChildren();
      };
      View.prototype.refreshClubListHeight = function() {
        var count = this.ui.club_list.childrenCount, height = 0;
        if (0 != count) {
          var layout = this.ui.club_list.getComponent(cc.Layout), gapTop = layout.paddingTop, gapBottom = layout.paddingBottom, gapY = layout.spacingY, node = this.ui.club_list.children[0];
          height += gapTop;
          height += gapBottom;
          height += (count - 1) * gapY;
          height += node.height * count;
        }
        this.ui.club_list.height = height;
      };
      View.prototype.refreshClubList = function() {
        this.removeAllClubStrip();
        var club_list = this.model.getSeekList(), count = club_list.length;
        for (var i = 0; i < count; i++) {
          var data = club_list[i];
          BehaviorMgr_1.default.getInstance().setClubSeekData(data);
          this.addClubStrip();
        }
        this.refreshClubListHeight();
      };
      View.prototype.refreshSeekOff = function() {
        this.ui.node_club_seek.y = 0;
        this.ui.node_create.active = false;
        this.ui.node_create.pauseSystemEvents(true);
      };
      View.prototype.refreshSeekOn = function() {
        this.ui.node_club_seek.y = 29;
        this.ui.node_create.resumeSystemEvents(true);
      };
      View.prototype.showCreateBtn = function() {
        this.ui.node_create.active = 1 == this.model.creatSwitch;
        this.ui.node_create.active ? this.refreshSeekOn() : this.refreshSeekOff();
      };
      return View;
    }(BaseView_1.default);
    var Club_SeekListCtrl = function(_super) {
      __extends(Club_SeekListCtrl, _super);
      function Club_SeekListCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_close = null;
        _this.btn_seek = null;
        _this.node_editseek = null;
        _this.edit_seek = null;
        _this.club_list = null;
        _this.club_strip = null;
        _this.node_create = null;
        _this.node_club_seek = null;
        return _this;
      }
      Club_SeekListCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Club_SeekListCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqClubSeekList": this.http_reqClubSeekList,
          "http.reqClubApplyJoin": this.http_reqClubApplyJoin,
          "http.reqClubCreate": this.http_reqClubCreate,
          "http.reqGameSwitch": this.http_reqGameSwitch
        };
      };
      Club_SeekListCtrl.prototype.defineGlobalEvents = function() {};
      Club_SeekListCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_close, this.btn_close_cb, "关闭界面");
        this.connect(G_UiType.edit, this.ui.node_editseek, this.editbox_content_cb, "获取控件数据");
        this.connect(G_UiType.image, this.ui.btn_seek, this.btn_seek_cb, "发送搜索");
        this.connect(G_UiType.image, this.ui.node_create, this.node_create_cb, "创建茶馆");
      };
      Club_SeekListCtrl.prototype.start = function() {};
      Club_SeekListCtrl.prototype.http_reqClubSeekList = function() {
        this.model.refreshSeekList();
        this.view.refreshClubList();
      };
      Club_SeekListCtrl.prototype.http_reqClubApplyJoin = function() {
        FrameMgr_1.default.getInstance().showTips("申请成功，请耐心等待", null, 35, cc.color(0, 255, 50));
      };
      Club_SeekListCtrl.prototype.http_reqClubCreate = function() {
        var _this = this;
        FrameMgr_1.default.getInstance().showHintBox("创建茶馆成功！", function() {
          _this.start_sub_module(G_MODULE.ClubLobby);
          _this.finish();
        });
      };
      Club_SeekListCtrl.prototype.http_reqGameSwitch = function(msg) {
        this.model.updateSwitch(msg);
        this.view.showCreateBtn();
      };
      Club_SeekListCtrl.prototype.offCreate = function() {
        this.view.refreshSeekOff();
      };
      Club_SeekListCtrl.prototype.btn_close_cb = function(node) {
        console.log("node_close_cb");
        this.finish();
      };
      Club_SeekListCtrl.prototype.editbox_content_cb = function(str, event) {
        console.log("editbox_content_cb");
        if ("editing-did-ended" == str) {
          var content = this.ui.edit_seek.string;
          this.model.setSeekName(content);
        }
      };
      Club_SeekListCtrl.prototype.btn_seek_cb = function(node, event) {
        console.log("btn_seek_cb:" + this.model.getSeekName());
        var content = this.model.getSeekName();
        if ("" == content) {
          FrameMgr_1.default.getInstance().showTips("搜索内容为空");
          this.ui.node_create.active = true;
          this.view.removeAllClubStrip();
          return;
        }
        this.ui.node_create.active = false;
        ClubMgr_1.default.getInstance().reqClubSeekList(content);
      };
      Club_SeekListCtrl.prototype.node_create_cb = function(node, event) {
        this.start_sub_module(G_MODULE.ClubCreate);
      };
      __decorate([ property(cc.Node) ], Club_SeekListCtrl.prototype, "btn_close", void 0);
      __decorate([ property(cc.Node) ], Club_SeekListCtrl.prototype, "btn_seek", void 0);
      __decorate([ property(cc.Node) ], Club_SeekListCtrl.prototype, "node_editseek", void 0);
      __decorate([ property(cc.EditBox) ], Club_SeekListCtrl.prototype, "edit_seek", void 0);
      __decorate([ property(cc.Node) ], Club_SeekListCtrl.prototype, "club_list", void 0);
      __decorate([ property(cc.Prefab) ], Club_SeekListCtrl.prototype, "club_strip", void 0);
      __decorate([ property(cc.Node) ], Club_SeekListCtrl.prototype, "node_create", void 0);
      __decorate([ property(cc.Node) ], Club_SeekListCtrl.prototype, "node_club_seek", void 0);
      Club_SeekListCtrl = __decorate([ ccclass ], Club_SeekListCtrl);
      return Club_SeekListCtrl;
    }(BaseCtrl_1.default);
    exports.default = Club_SeekListCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/ClubMgr": "ClubMgr",
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/SwitchMgr": "SwitchMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Club_SeekStripCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ccffek+TUJHZ7VkgC1o1TYv", "Club_SeekStripCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var ClubMgr_1 = require("../../GameMgrs/ClubMgr");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var UiMgr_1 = require("../../GameMgrs/UiMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.ClubData = null;
        _this.node_max = 0;
        _this.name_slice = 0;
        _this.ClubData = BehaviorMgr_1.default.getInstance().getClubSeekData();
        _this.node_max = 138;
        _this.name_slice = 6;
        return _this;
      }
      Model.prototype.getClubIcon = function() {
        return this.ClubData.avater;
      };
      Model.prototype.getClubName = function() {
        return this.ClubData.name;
      };
      Model.prototype.getClubNotice = function() {
        return this.ClubData.notice;
      };
      Model.prototype.getClubCount = function() {
        return this.ClubData.mCount + "/" + this.ClubData.mMax;
      };
      Model.prototype.getClubCaptainName = function() {
        return this.ClubData.captainName;
      };
      Model.prototype.getClubId = function() {
        return this.ClubData.id;
      };
      Model.prototype.getClubShowId = function() {
        return this.ClubData.no;
      };
      Model.prototype.getClubApply = function() {
        return this.ClubData.apply;
      };
      Model.prototype.setClubApply = function(data) {
        this.ClubData.apply = data;
      };
      Model.prototype.getNodeMax = function() {
        return this.node_max;
      };
      Model.prototype.getNameSlice = function() {
        return this.name_slice;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          club_icon: null,
          club_name: null,
          club_notice: null,
          club_count: null,
          club_captain_name: null,
          club_id: null,
          club_apply: null,
          node_captain: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.club_icon = ctrl.club_icon;
        this.ui.club_name = ctrl.club_name;
        this.ui.club_notice = ctrl.club_notice;
        this.ui.club_count = ctrl.club_count;
        this.ui.club_captain_name = ctrl.club_captain_name;
        this.ui.club_id = ctrl.club_id;
        this.ui.club_apply = ctrl.club_apply;
        this.ui.node_captain = ctrl.node_captain;
        this.refreshClubStrip();
      };
      View.prototype.refreshClubStrip = function() {
        UiMgr_1.default.getInstance().setUserHead(this.ui.club_icon, 0, this.model.getClubIcon());
        this.ui.club_name.string = this.model.getClubName();
        this.ui.club_notice.string = this.CutOutChat(this.model.getClubNotice(), 18);
        this.ui.club_count.string = this.model.getClubCount();
        var name = this.model.getClubCaptainName();
        this.ui.club_captain_name.string = name;
        if (this.ui.node_captain.width >= this.model.getNodeMax()) {
          name = name.slice(0, this.model.getNameSlice()) + "...";
          this.ui.club_captain_name.string = name;
        }
        this.ui.club_id.string = this.model.getClubShowId();
      };
      return View;
    }(BaseView_1.default);
    var Club_SeekStripCtrl = function(_super) {
      __extends(Club_SeekStripCtrl, _super);
      function Club_SeekStripCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.club_icon = null;
        _this.club_name = null;
        _this.club_notice = null;
        _this.club_count = null;
        _this.club_captain_name = null;
        _this.club_id = null;
        _this.club_apply = null;
        _this.node_captain = null;
        return _this;
      }
      Club_SeekStripCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Club_SeekStripCtrl.prototype.defineNetEvents = function() {};
      Club_SeekStripCtrl.prototype.defineGlobalEvents = function() {};
      Club_SeekStripCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.club_apply, this.club_apply_cb, "点击申请");
      };
      Club_SeekStripCtrl.prototype.start = function() {};
      Club_SeekStripCtrl.prototype.club_apply_cb = function() {
        console.log("club_apply_cb:" + this.model.getClubId());
        0 == this.model.getClubApply() ? ClubMgr_1.default.getInstance().reqClubApplyJoin(this.model.getClubId()) : FrameMgr_1.default.getInstance().showTips("申请发送成功", null, 35, cc.color(0, 255, 50));
      };
      __decorate([ property(cc.Sprite) ], Club_SeekStripCtrl.prototype, "club_icon", void 0);
      __decorate([ property(cc.Label) ], Club_SeekStripCtrl.prototype, "club_name", void 0);
      __decorate([ property(cc.Label) ], Club_SeekStripCtrl.prototype, "club_notice", void 0);
      __decorate([ property(cc.Label) ], Club_SeekStripCtrl.prototype, "club_count", void 0);
      __decorate([ property(cc.Label) ], Club_SeekStripCtrl.prototype, "club_captain_name", void 0);
      __decorate([ property(cc.Label) ], Club_SeekStripCtrl.prototype, "club_id", void 0);
      __decorate([ property(cc.Node) ], Club_SeekStripCtrl.prototype, "club_apply", void 0);
      __decorate([ property(cc.Node) ], Club_SeekStripCtrl.prototype, "node_captain", void 0);
      Club_SeekStripCtrl = __decorate([ ccclass ], Club_SeekStripCtrl);
      return Club_SeekStripCtrl;
    }(BaseCtrl_1.default);
    exports.default = Club_SeekStripCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/ClubMgr": "ClubMgr",
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/UiMgr": "UiMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Common_voiceBtnCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b285ehCWHNLPK4dWsN8ZOPc", "Common_voiceBtnCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../Plat/Libs/BaseModel");
    var BaseCtrl_1 = require("../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../Plat/Libs/BaseView");
    var RoomMgr_1 = require("../Plat/GameMgrs/RoomMgr");
    var YySdk_1 = require("../Plat/SdkMgrs/YySdk");
    var LoaderMgr_1 = require("../AppStart/AppMgrs/LoaderMgr");
    var GEventDef_1 = require("../Plat/GameMgrs/GEventDef");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var VoiceState = {
      state1: 1,
      state2: 2,
      state3: 3
    };
    var WORDS = {
      1: "麦克风和收听已开启，可与其他人实时通话",
      2: "麦克风已关闭，当前只能听不能讲",
      3: "麦克风和收听已关闭，无法与其他人实时通话"
    };
    var Time_wordShow = 1.5;
    var voiceVolWhenMic = 20;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_state1: null,
          node_state2: null,
          node_state3: null,
          node_tip: null
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_state1 = ctrl.node_state1;
        this.ui.node_state2 = ctrl.node_state2;
        this.ui.node_state3 = ctrl.node_state3;
      };
      View.prototype.updateVoiceBtn = function() {
        var room = RoomMgr_1.default.getInstance();
        var state = room.getVoiceState(room.getMySeatId());
        switch (state) {
         case VoiceState.state1:
          this.ui.node_state2.active = false;
          this.ui.node_state3.active = false;
          break;

         case VoiceState.state2:
          this.ui.node_state2.active = true;
          this.ui.node_state3.active = false;
          break;

         case VoiceState.state3:
          this.ui.node_state3.active = true;
        }
        this.showTip();
      };
      View.prototype.showTip = function() {
        var _this = this;
        if (this.ui.node_tip) {
          0;
          this.updateTip();
        } else LoaderMgr_1.default.getInstance().loadRes(G_MODULE.Common_voiceTip, function(prefab) {
          _this.ui.node_tip = cc.instantiate(prefab);
          _this.ui.node_tip.parent = _this.ui.node_state1;
          _this.ui.node_tip.x = -_this.ui.node_state1.width / 2;
          _this.updateTip();
        });
      };
      View.prototype.updateTip = function() {
        this.ui.node_tip.active = true;
        var bg = this.ui.node_tip.children[0];
        var lbl_content = this.ui.node_tip.children[1].getComponent(cc.Label);
        var room = RoomMgr_1.default.getInstance();
        var state = room.getVoiceState(room.getMySeatId());
        var word = WORDS[state];
        lbl_content.string = word;
        bg.width = lbl_content.node.width + 40;
        this.doDelay();
      };
      View.prototype.doDelay = function() {
        var curNode = this.ui.node_tip;
        curNode.stopAllActions();
        var act1 = cc.delayTime(1.5);
        var act2 = cc.callFunc(function() {
          curNode.active = false;
        }, this);
        curNode.runAction(cc.sequence(act1, act2));
      };
      return View;
    }(BaseView_1.default);
    var Common_voiceBtnCtrl = function(_super) {
      __extends(Common_voiceBtnCtrl, _super);
      function Common_voiceBtnCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.node_state1 = null;
        _this.node_state2 = null;
        _this.node_state3 = null;
        return _this;
      }
      Common_voiceBtnCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Common_voiceBtnCtrl.prototype.defineNetEvents = function() {
        this.n_events["onVoiceStateChanged"] = this.onVoiceStateChanged;
        cc.sys.isNative || (this.n_events["connector.entryHandler.enterRoom"] = this.myEnterRoom);
      };
      Common_voiceBtnCtrl.prototype.defineGlobalEvents = function() {
        this.g_events[GEventDef_1.default.voice_JoinRoomOk] = this.onJoinVoiceRoom;
      };
      Common_voiceBtnCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.node_state1, this.node_state1_cb, "点击声音按钮");
      };
      Common_voiceBtnCtrl.prototype.start = function() {};
      Common_voiceBtnCtrl.prototype.onVoiceStateChanged = function(msg) {
        console.log("onVoiceStateChanged=============", msg);
        var mySeatId = RoomMgr_1.default.getInstance().getMySeatId();
        if (msg.seatid != mySeatId) return;
        this.updateVoiceState();
        this.view.updateVoiceBtn();
      };
      Common_voiceBtnCtrl.prototype.myEnterRoom = function() {
        this.updateVoiceState();
        this.view.updateVoiceBtn();
      };
      Common_voiceBtnCtrl.prototype.onJoinVoiceRoom = function() {
        this.updateVoiceState();
        this.view.updateVoiceBtn();
      };
      Common_voiceBtnCtrl.prototype.node_state1_cb = function() {
        this.switchVoiceState();
      };
      Common_voiceBtnCtrl.prototype.switchVoiceState = function() {
        var room = RoomMgr_1.default.getInstance();
        var state = room.getVoiceState(room.getMySeatId());
        var targetSate = state % 3 + 1;
        room.swithVoiceState(targetSate);
      };
      Common_voiceBtnCtrl.prototype.updateVoiceState = function() {
        var room = RoomMgr_1.default.getInstance();
        var state = room.getVoiceState(room.getMySeatId());
        switch (state) {
         case VoiceState.state1:
          console.log("Listener: js刷新语音状态state=1");
          YySdk_1.default.getInstance().micUp();
          YySdk_1.default.getInstance().speakerUp();
          break;

         case VoiceState.state2:
          console.log("Listener: js刷新语音状态state=2");
          YySdk_1.default.getInstance().micDown(1);
          YySdk_1.default.getInstance().speakerUp();
          break;

         case VoiceState.state3:
          console.log("Listener: js刷新语音状态state=3");
          YySdk_1.default.getInstance().micDown(1);
          YySdk_1.default.getInstance().speakerDown(1);
        }
      };
      Common_voiceBtnCtrl.prototype.onDestroy = function() {
        YySdk_1.default.getInstance().LeaveRoom();
        _super.prototype.onDestroy.call(this);
      };
      __decorate([ property(cc.Node) ], Common_voiceBtnCtrl.prototype, "node_state1", void 0);
      __decorate([ property(cc.Node) ], Common_voiceBtnCtrl.prototype, "node_state2", void 0);
      __decorate([ property(cc.Node) ], Common_voiceBtnCtrl.prototype, "node_state3", void 0);
      Common_voiceBtnCtrl = __decorate([ ccclass ], Common_voiceBtnCtrl);
      return Common_voiceBtnCtrl;
    }(BaseCtrl_1.default);
    exports.default = Common_voiceBtnCtrl;
    cc._RF.pop();
  }, {
    "../AppStart/AppMgrs/LoaderMgr": "LoaderMgr",
    "../Plat/GameMgrs/GEventDef": "GEventDef",
    "../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../Plat/Libs/BaseModel": "BaseModel",
    "../Plat/Libs/BaseView": "BaseView",
    "../Plat/SdkMgrs/YySdk": "YySdk"
  } ],
  CreateRoomMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dce56VYQ49AU6aSP7IHQdCW", "CreateRoomMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var LoginMgr_1 = require("./LoginMgr");
    var GameCateCfg_1 = require("../CfgMgrs/GameCateCfg");
    var RoomRuleCfg_1 = require("../CfgMgrs/RoomRuleCfg");
    var LocalStorage_1 = require("../Libs/LocalStorage");
    var CreateRoomMgr = function(_super) {
      __extends(CreateRoomMgr, _super);
      function CreateRoomMgr() {
        var _this = _super.call(this) || this;
        _this.gameId = null;
        _this.clubId = null;
        _this.paysource = null;
        _this.commonRule = {};
        _this.commonRuleName = null;
        _this.newName = null;
        _this.ruleItemIndex = null;
        _this.editItemIndex = null;
        _this.ruleItems = [];
        _this.bCommomRule = null;
        _this.DefaultRuleName = null;
        _this.games = null;
        _this.roomRuleInfoGroups = {};
        _this.roomRuleInfo = {};
        _this.commonRuleGroups = {};
        _this.commonRules = {};
        _this.routes = null;
        _this.uid = null;
        _this.gameId = 1;
        _this.games = GameCateCfg_1.default.getInstance().getGames();
        _this.clubId = 0;
        _this.paysource = 1;
        _this.bCommomRule = false;
        _this.uid = LoginMgr_1.default.getInstance().getUid();
        _this.initRoomRuleInfo();
        _this.initCommonRuleInfo();
        return _this;
      }
      CreateRoomMgr.prototype.initRoomRuleInfo = function() {
        for (var i = 0; i < this.games.length; i++) {
          var data = LocalStorage_1.default.getInstance().getRoomRuleInfoGroups(this.games[i].code);
          var index = this.games[i].id;
          this.roomRuleInfoGroups[index] = data || {};
          this.roomRuleInfo[index] = this.roomRuleInfoGroups[index][this.uid.toString()];
          this.roomRuleInfo[index] || (this.roomRuleInfo[index] = RoomRuleCfg_1.default.getInstance().getRoomRuleById(index));
        }
      };
      CreateRoomMgr.prototype.initCommonRuleInfo = function() {
        for (var i = 0; i < this.games.length; i++) {
          var data = LocalStorage_1.default.getInstance().getCommonRuleGroups(this.games[i].code);
          var index = this.games[i].id;
          this.commonRuleGroups[index] = data || {};
          this.commonRules[index] = this.commonRuleGroups[index][this.uid.toString()];
          if (!this.commonRules[index]) {
            var ruleData = {};
            ruleData.ruleInfo = {};
            this.commonRules[index] = [];
            var roomRuleInfo = RoomRuleCfg_1.default.getInstance().getRoomRuleById(index);
            for (var key in roomRuleInfo) ruleData.ruleInfo[key] = roomRuleInfo[key];
            ruleData.ruleName = "常用规则";
            this.commonRules[index].push(ruleData);
            this.commonRuleGroups[index][this.uid.toString()] = this.commonRules[index];
          }
        }
      };
      CreateRoomMgr.getInstance = function() {
        this._instance || (this._instance = new CreateRoomMgr());
        return this._instance;
      };
      CreateRoomMgr.prototype.setDefaultRuleName = function(string) {
        this.DefaultRuleName = string;
      };
      CreateRoomMgr.prototype.getDefaultRuleName = function() {
        return this.DefaultRuleName;
      };
      CreateRoomMgr.prototype.setEditItemIndex = function(index) {
        this.editItemIndex = index;
      };
      CreateRoomMgr.prototype.getEditItemIndex = function() {
        return this.editItemIndex;
      };
      CreateRoomMgr.prototype.setbCommomRule = function(bool) {
        this.bCommomRule = bool;
      };
      CreateRoomMgr.prototype.getbCommomRule = function() {
        return this.bCommomRule;
      };
      CreateRoomMgr.prototype.setProperty = function(value, PropertyName, childProName, lowerProName) {
        if (isNaN(value)) return console.log("value 不能为空");
        if (!PropertyName) return console.log("PropertyName 不能为空");
        lowerProName ? this[PropertyName][childProName][lowerProName] = value : childProName ? this[PropertyName][childProName] = value : this[PropertyName] = value;
      };
      CreateRoomMgr.prototype.setCommonRulePerItem = function(data) {
        this.commonRule = data;
      };
      CreateRoomMgr.prototype.setCommonRuleName = function(data) {
        this.commonRuleName = data;
      };
      CreateRoomMgr.prototype.setQzmjRoomRuleInfo = function(data) {
        this.qzmjRoomRuleInfo = data;
      };
      CreateRoomMgr.prototype.setNewName = function(data) {
        this.newName = data;
      };
      CreateRoomMgr.prototype.setRuleItemIndex = function(data) {
        this.ruleItemIndex = data;
      };
      CreateRoomMgr.prototype.setRuleItems = function(data) {
        this.ruleItems = data;
      };
      CreateRoomMgr.prototype.getRuleItemIndex = function() {
        return this.ruleItemIndex;
      };
      CreateRoomMgr.prototype.getRuleItems = function() {
        return this.ruleItems;
      };
      CreateRoomMgr.prototype.getNewName = function() {
        return this.newName;
      };
      CreateRoomMgr.prototype.getCommonRuleName = function() {
        return this.commonRuleName;
      };
      CreateRoomMgr.prototype.getCommonRulePerItem = function() {
        return this.commonRule;
      };
      CreateRoomMgr.prototype.getCommonRule = function(gameId) {
        return this.commonRules[gameId];
      };
      CreateRoomMgr.prototype.getClubId = function() {
        return this.clubId;
      };
      CreateRoomMgr.prototype.getClubPaysource = function() {
        return this.paysource;
      };
      CreateRoomMgr.prototype.getGameId = function() {
        return this.gameId;
      };
      CreateRoomMgr.prototype.getCommonRuleGroups = function(gameId) {
        return this.commonRuleGroups[gameId];
      };
      CreateRoomMgr.prototype.getInfoGroups = function(gameID) {
        return this.roomRuleInfoGroups[gameID];
      };
      CreateRoomMgr.prototype.getRoomRuleInfo = function(gameID) {
        return this.roomRuleInfo[gameID];
      };
      CreateRoomMgr.prototype.addCommonRuleData = function(data, gameid) {
        this.commonRules[gameid].push(data);
        G_FRAME.globalEmitter.emit("createCommonRuleData");
      };
      CreateRoomMgr.prototype.RefreshRoomUi = function(id) {
        switch (id) {
         case 1:
          G_FRAME.globalEmitter.emit("RefreshQZMJRoomUi");
          break;

         case 18:
          G_FRAME.globalEmitter.emit("RefreshZYQZRoomUi");
          break;

         case 20:
          G_FRAME.globalEmitter.emit("RefreshTBNNRoomUi");
        }
      };
      CreateRoomMgr.prototype.RefreshDefaultRuleLabel = function() {
        G_FRAME.globalEmitter.emit("RefreshDefaultRuleLabel");
      };
      CreateRoomMgr.prototype.closeDefaultRulePanel = function() {
        G_FRAME.globalEmitter.emit("closeDefaultRulePanel");
      };
      return CreateRoomMgr;
    }(BaseMgr_1.default);
    exports.default = CreateRoomMgr;
    cc._RF.pop();
  }, {
    "../CfgMgrs/GameCateCfg": "GameCateCfg",
    "../CfgMgrs/RoomRuleCfg": "RoomRuleCfg",
    "../Libs/BaseMgr": "BaseMgr",
    "../Libs/LocalStorage": "LocalStorage",
    "./LoginMgr": "LoginMgr"
  } ],
  CreateRoomOptionCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f1a55W12tFMH7SSC1K7aCKP", "CreateRoomOptionCfg");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCfg_1 = require("../Libs/BaseCfg");
    var CreateRoomOptionCfg = function(_super) {
      __extends(CreateRoomOptionCfg, _super);
      function CreateRoomOptionCfg() {
        var _this = _super.call(this) || this;
        _this.CreateRoomOptionPth = null;
        _this.data = null;
        _this.CreateRoomOptionPth = _this.getFullPath("createroomoption");
        return _this;
      }
      CreateRoomOptionCfg.getInstance = function() {
        this._instance || (this._instance = new CreateRoomOptionCfg());
        return this._instance;
      };
      CreateRoomOptionCfg.prototype.getNNOption = function(gameId) {
        return this.data[gameId];
      };
      CreateRoomOptionCfg.prototype.loadCb = function(name, data) {
        this.loaded = true;
        this.data = data;
      };
      CreateRoomOptionCfg.prototype.load = function() {
        this.loadRes(this.CreateRoomOptionPth, this.loadCb);
      };
      return CreateRoomOptionCfg;
    }(BaseCfg_1.default);
    exports.default = CreateRoomOptionCfg;
    cc._RF.pop();
  }, {
    "../Libs/BaseCfg": "BaseCfg"
  } ],
  1: [ function(require, module, exports) {
    "use strict";
    exports.byteLength = byteLength;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = "undefined" !== typeof Uint8Array ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len = b64.length;
      if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
      var validLen = b64.indexOf("=");
      -1 === validLen && (validLen = len);
      var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
      return [ validLen, placeHoldersLen ];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return 3 * (validLen + placeHoldersLen) / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return 3 * (validLen + placeHoldersLen) / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
      for (var i = 0; i < len; i += 4) {
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = 255 & tmp;
      }
      if (2 === placeHoldersLen) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = 255 & tmp;
      }
      if (1 === placeHoldersLen) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = 255 & tmp;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[63 & num];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (255 & uint8[i + 2]);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
      if (1 === extraBytes) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "==");
      } else if (2 === extraBytes) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "=");
      }
      return parts.join("");
    }
  }, {} ],
  2: [ function(require, module, exports) {
    (function(global) {
      "use strict";
      var base64 = require("base64-js");
      var ieee754 = require("ieee754");
      var isArray = require("isarray");
      exports.Buffer = Buffer;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      Buffer.TYPED_ARRAY_SUPPORT = void 0 !== global.TYPED_ARRAY_SUPPORT ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
      exports.kMaxLength = kMaxLength();
      function typedArraySupport() {
        try {
          var arr = new Uint8Array(1);
          arr.__proto__ = {
            __proto__: Uint8Array.prototype,
            foo: function() {
              return 42;
            }
          };
          return 42 === arr.foo() && "function" === typeof arr.subarray && 0 === arr.subarray(1, 1).byteLength;
        } catch (e) {
          return false;
        }
      }
      function kMaxLength() {
        return Buffer.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
      }
      function createBuffer(that, length) {
        if (kMaxLength() < length) throw new RangeError("Invalid typed array length");
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          that = new Uint8Array(length);
          that.__proto__ = Buffer.prototype;
        } else {
          null === that && (that = new Buffer(length));
          that.length = length;
        }
        return that;
      }
      function Buffer(arg, encodingOrOffset, length) {
        if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) return new Buffer(arg, encodingOrOffset, length);
        if ("number" === typeof arg) {
          if ("string" === typeof encodingOrOffset) throw new Error("If encoding is specified then the first argument must be a string");
          return allocUnsafe(this, arg);
        }
        return from(this, arg, encodingOrOffset, length);
      }
      Buffer.poolSize = 8192;
      Buffer._augment = function(arr) {
        arr.__proto__ = Buffer.prototype;
        return arr;
      };
      function from(that, value, encodingOrOffset, length) {
        if ("number" === typeof value) throw new TypeError('"value" argument must not be a number');
        if ("undefined" !== typeof ArrayBuffer && value instanceof ArrayBuffer) return fromArrayBuffer(that, value, encodingOrOffset, length);
        if ("string" === typeof value) return fromString(that, value, encodingOrOffset);
        return fromObject(that, value);
      }
      Buffer.from = function(value, encodingOrOffset, length) {
        return from(null, value, encodingOrOffset, length);
      };
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        Buffer.prototype.__proto__ = Uint8Array.prototype;
        Buffer.__proto__ = Uint8Array;
        "undefined" !== typeof Symbol && Symbol.species && Buffer[Symbol.species] === Buffer && Object.defineProperty(Buffer, Symbol.species, {
          value: null,
          configurable: true
        });
      }
      function assertSize(size) {
        if ("number" !== typeof size) throw new TypeError('"size" argument must be a number');
        if (size < 0) throw new RangeError('"size" argument must not be negative');
      }
      function alloc(that, size, fill, encoding) {
        assertSize(size);
        if (size <= 0) return createBuffer(that, size);
        if (void 0 !== fill) return "string" === typeof encoding ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
        return createBuffer(that, size);
      }
      Buffer.alloc = function(size, fill, encoding) {
        return alloc(null, size, fill, encoding);
      };
      function allocUnsafe(that, size) {
        assertSize(size);
        that = createBuffer(that, size < 0 ? 0 : 0 | checked(size));
        if (!Buffer.TYPED_ARRAY_SUPPORT) for (var i = 0; i < size; ++i) that[i] = 0;
        return that;
      }
      Buffer.allocUnsafe = function(size) {
        return allocUnsafe(null, size);
      };
      Buffer.allocUnsafeSlow = function(size) {
        return allocUnsafe(null, size);
      };
      function fromString(that, string, encoding) {
        "string" === typeof encoding && "" !== encoding || (encoding = "utf8");
        if (!Buffer.isEncoding(encoding)) throw new TypeError('"encoding" must be a valid string encoding');
        var length = 0 | byteLength(string, encoding);
        that = createBuffer(that, length);
        var actual = that.write(string, encoding);
        actual !== length && (that = that.slice(0, actual));
        return that;
      }
      function fromArrayLike(that, array) {
        var length = array.length < 0 ? 0 : 0 | checked(array.length);
        that = createBuffer(that, length);
        for (var i = 0; i < length; i += 1) that[i] = 255 & array[i];
        return that;
      }
      function fromArrayBuffer(that, array, byteOffset, length) {
        array.byteLength;
        if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError("'offset' is out of bounds");
        if (array.byteLength < byteOffset + (length || 0)) throw new RangeError("'length' is out of bounds");
        array = void 0 === byteOffset && void 0 === length ? new Uint8Array(array) : void 0 === length ? new Uint8Array(array, byteOffset) : new Uint8Array(array, byteOffset, length);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          that = array;
          that.__proto__ = Buffer.prototype;
        } else that = fromArrayLike(that, array);
        return that;
      }
      function fromObject(that, obj) {
        if (Buffer.isBuffer(obj)) {
          var len = 0 | checked(obj.length);
          that = createBuffer(that, len);
          if (0 === that.length) return that;
          obj.copy(that, 0, 0, len);
          return that;
        }
        if (obj) {
          if ("undefined" !== typeof ArrayBuffer && obj.buffer instanceof ArrayBuffer || "length" in obj) {
            if ("number" !== typeof obj.length || isnan(obj.length)) return createBuffer(that, 0);
            return fromArrayLike(that, obj);
          }
          if ("Buffer" === obj.type && isArray(obj.data)) return fromArrayLike(that, obj.data);
        }
        throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
      }
      function checked(length) {
        if (length >= kMaxLength()) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength().toString(16) + " bytes");
        return 0 | length;
      }
      function SlowBuffer(length) {
        +length != length && (length = 0);
        return Buffer.alloc(+length);
      }
      Buffer.isBuffer = function isBuffer(b) {
        return !!(null != b && b._isBuffer);
      };
      Buffer.compare = function compare(a, b) {
        if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError("Arguments must be Buffers");
        if (a === b) return 0;
        var x = a.length;
        var y = b.length;
        for (var i = 0, len = Math.min(x, y); i < len; ++i) if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };
      Buffer.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
         case "hex":
         case "utf8":
         case "utf-8":
         case "ascii":
         case "latin1":
         case "binary":
         case "base64":
         case "ucs2":
         case "ucs-2":
         case "utf16le":
         case "utf-16le":
          return true;

         default:
          return false;
        }
      };
      Buffer.concat = function concat(list, length) {
        if (!isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
        if (0 === list.length) return Buffer.alloc(0);
        var i;
        if (void 0 === length) {
          length = 0;
          for (i = 0; i < list.length; ++i) length += list[i].length;
        }
        var buffer = Buffer.allocUnsafe(length);
        var pos = 0;
        for (i = 0; i < list.length; ++i) {
          var buf = list[i];
          if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
          buf.copy(buffer, pos);
          pos += buf.length;
        }
        return buffer;
      };
      function byteLength(string, encoding) {
        if (Buffer.isBuffer(string)) return string.length;
        if ("undefined" !== typeof ArrayBuffer && "function" === typeof ArrayBuffer.isView && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) return string.byteLength;
        "string" !== typeof string && (string = "" + string);
        var len = string.length;
        if (0 === len) return 0;
        var loweredCase = false;
        for (;;) switch (encoding) {
         case "ascii":
         case "latin1":
         case "binary":
          return len;

         case "utf8":
         case "utf-8":
         case void 0:
          return utf8ToBytes(string).length;

         case "ucs2":
         case "ucs-2":
         case "utf16le":
         case "utf-16le":
          return 2 * len;

         case "hex":
          return len >>> 1;

         case "base64":
          return base64ToBytes(string).length;

         default:
          if (loweredCase) return utf8ToBytes(string).length;
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
        }
      }
      Buffer.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        var loweredCase = false;
        (void 0 === start || start < 0) && (start = 0);
        if (start > this.length) return "";
        (void 0 === end || end > this.length) && (end = this.length);
        if (end <= 0) return "";
        end >>>= 0;
        start >>>= 0;
        if (end <= start) return "";
        encoding || (encoding = "utf8");
        while (true) switch (encoding) {
         case "hex":
          return hexSlice(this, start, end);

         case "utf8":
         case "utf-8":
          return utf8Slice(this, start, end);

         case "ascii":
          return asciiSlice(this, start, end);

         case "latin1":
         case "binary":
          return latin1Slice(this, start, end);

         case "base64":
          return base64Slice(this, start, end);

         case "ucs2":
         case "ucs-2":
         case "utf16le":
         case "utf-16le":
          return utf16leSlice(this, start, end);

         default:
          if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
          encoding = (encoding + "").toLowerCase();
          loweredCase = true;
        }
      }
      Buffer.prototype._isBuffer = true;
      function swap(b, n, m) {
        var i = b[n];
        b[n] = b[m];
        b[m] = i;
      }
      Buffer.prototype.swap16 = function swap16() {
        var len = this.length;
        if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
        for (var i = 0; i < len; i += 2) swap(this, i, i + 1);
        return this;
      };
      Buffer.prototype.swap32 = function swap32() {
        var len = this.length;
        if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
        for (var i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };
      Buffer.prototype.swap64 = function swap64() {
        var len = this.length;
        if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
        for (var i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };
      Buffer.prototype.toString = function toString() {
        var length = 0 | this.length;
        if (0 === length) return "";
        if (0 === arguments.length) return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer.prototype.equals = function equals(b) {
        if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
        if (this === b) return true;
        return 0 === Buffer.compare(this, b);
      };
      Buffer.prototype.inspect = function inspect() {
        var str = "";
        var max = exports.INSPECT_MAX_BYTES;
        if (this.length > 0) {
          str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
          this.length > max && (str += " ... ");
        }
        return "<Buffer " + str + ">";
      };
      Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (!Buffer.isBuffer(target)) throw new TypeError("Argument must be a Buffer");
        void 0 === start && (start = 0);
        void 0 === end && (end = target ? target.length : 0);
        void 0 === thisStart && (thisStart = 0);
        void 0 === thisEnd && (thisEnd = this.length);
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
        if (thisStart >= thisEnd && start >= end) return 0;
        if (thisStart >= thisEnd) return -1;
        if (start >= end) return 1;
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target) return 0;
        var x = thisEnd - thisStart;
        var y = end - start;
        var len = Math.min(x, y);
        var thisCopy = this.slice(thisStart, thisEnd);
        var targetCopy = target.slice(start, end);
        for (var i = 0; i < len; ++i) if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break;
        }
        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (0 === buffer.length) return -1;
        if ("string" === typeof byteOffset) {
          encoding = byteOffset;
          byteOffset = 0;
        } else byteOffset > 2147483647 ? byteOffset = 2147483647 : byteOffset < -2147483648 && (byteOffset = -2147483648);
        byteOffset = +byteOffset;
        isNaN(byteOffset) && (byteOffset = dir ? 0 : buffer.length - 1);
        byteOffset < 0 && (byteOffset = buffer.length + byteOffset);
        if (byteOffset >= buffer.length) {
          if (dir) return -1;
          byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (!dir) return -1;
          byteOffset = 0;
        }
        "string" === typeof val && (val = Buffer.from(val, encoding));
        if (Buffer.isBuffer(val)) {
          if (0 === val.length) return -1;
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        }
        if ("number" === typeof val) {
          val &= 255;
          if (Buffer.TYPED_ARRAY_SUPPORT && "function" === typeof Uint8Array.prototype.indexOf) return dir ? Uint8Array.prototype.indexOf.call(buffer, val, byteOffset) : Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
          return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        var indexSize = 1;
        var arrLength = arr.length;
        var valLength = val.length;
        if (void 0 !== encoding) {
          encoding = String(encoding).toLowerCase();
          if ("ucs2" === encoding || "ucs-2" === encoding || "utf16le" === encoding || "utf-16le" === encoding) {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i) {
          return 1 === indexSize ? buf[i] : buf.readUInt16BE(i * indexSize);
        }
        var i;
        if (dir) {
          var foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) if (read(arr, i) === read(val, -1 === foundIndex ? 0 : i - foundIndex)) {
            -1 === foundIndex && (foundIndex = i);
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
          } else {
            -1 !== foundIndex && (i -= i - foundIndex);
            foundIndex = -1;
          }
        } else {
          byteOffset + valLength > arrLength && (byteOffset = arrLength - valLength);
          for (i = byteOffset; i >= 0; i--) {
            var found = true;
            for (var j = 0; j < valLength; j++) if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break;
            }
            if (found) return i;
          }
        }
        return -1;
      }
      Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
        return -1 !== this.indexOf(val, byteOffset, encoding);
      };
      Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        var remaining = buf.length - offset;
        if (length) {
          length = Number(length);
          length > remaining && (length = remaining);
        } else length = remaining;
        var strLen = string.length;
        if (strLen % 2 !== 0) throw new TypeError("Invalid hex string");
        length > strLen / 2 && (length = strLen / 2);
        for (var i = 0; i < length; ++i) {
          var parsed = parseInt(string.substr(2 * i, 2), 16);
          if (isNaN(parsed)) return i;
          buf[offset + i] = parsed;
        }
        return i;
      }
      function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }
      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }
      function latin1Write(buf, string, offset, length) {
        return asciiWrite(buf, string, offset, length);
      }
      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }
      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }
      Buffer.prototype.write = function write(string, offset, length, encoding) {
        if (void 0 === offset) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
        } else if (void 0 === length && "string" === typeof offset) {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else {
          if (!isFinite(offset)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
          offset |= 0;
          if (isFinite(length)) {
            length |= 0;
            void 0 === encoding && (encoding = "utf8");
          } else {
            encoding = length;
            length = void 0;
          }
        }
        var remaining = this.length - offset;
        (void 0 === length || length > remaining) && (length = remaining);
        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
        encoding || (encoding = "utf8");
        var loweredCase = false;
        for (;;) switch (encoding) {
         case "hex":
          return hexWrite(this, string, offset, length);

         case "utf8":
         case "utf-8":
          return utf8Write(this, string, offset, length);

         case "ascii":
          return asciiWrite(this, string, offset, length);

         case "latin1":
         case "binary":
          return latin1Write(this, string, offset, length);

         case "base64":
          return base64Write(this, string, offset, length);

         case "ucs2":
         case "ucs-2":
         case "utf16le":
         case "utf-16le":
          return ucs2Write(this, string, offset, length);

         default:
          if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
        }
      };
      Buffer.prototype.toJSON = function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function base64Slice(buf, start, end) {
        return 0 === start && end === buf.length ? base64.fromByteArray(buf) : base64.fromByteArray(buf.slice(start, end));
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        var res = [];
        var i = start;
        while (i < end) {
          var firstByte = buf[i];
          var codePoint = null;
          var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
             case 1:
              firstByte < 128 && (codePoint = firstByte);
              break;

             case 2:
              secondByte = buf[i + 1];
              if (128 === (192 & secondByte)) {
                tempCodePoint = (31 & firstByte) << 6 | 63 & secondByte;
                tempCodePoint > 127 && (codePoint = tempCodePoint);
              }
              break;

             case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if (128 === (192 & secondByte) && 128 === (192 & thirdByte)) {
                tempCodePoint = (15 & firstByte) << 12 | (63 & secondByte) << 6 | 63 & thirdByte;
                tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343) && (codePoint = tempCodePoint);
              }
              break;

             case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if (128 === (192 & secondByte) && 128 === (192 & thirdByte) && 128 === (192 & fourthByte)) {
                tempCodePoint = (15 & firstByte) << 18 | (63 & secondByte) << 12 | (63 & thirdByte) << 6 | 63 & fourthByte;
                tempCodePoint > 65535 && tempCodePoint < 1114112 && (codePoint = tempCodePoint);
              }
            }
          }
          if (null === codePoint) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | 1023 & codePoint;
          }
          res.push(codePoint);
          i += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      var MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        var len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints);
        var res = "";
        var i = 0;
        while (i < len) res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
        return res;
      }
      function asciiSlice(buf, start, end) {
        var ret = "";
        end = Math.min(buf.length, end);
        for (var i = start; i < end; ++i) ret += String.fromCharCode(127 & buf[i]);
        return ret;
      }
      function latin1Slice(buf, start, end) {
        var ret = "";
        end = Math.min(buf.length, end);
        for (var i = start; i < end; ++i) ret += String.fromCharCode(buf[i]);
        return ret;
      }
      function hexSlice(buf, start, end) {
        var len = buf.length;
        (!start || start < 0) && (start = 0);
        (!end || end < 0 || end > len) && (end = len);
        var out = "";
        for (var i = start; i < end; ++i) out += toHex(buf[i]);
        return out;
      }
      function utf16leSlice(buf, start, end) {
        var bytes = buf.slice(start, end);
        var res = "";
        for (var i = 0; i < bytes.length; i += 2) res += String.fromCharCode(bytes[i] + 256 * bytes[i + 1]);
        return res;
      }
      Buffer.prototype.slice = function slice(start, end) {
        var len = this.length;
        start = ~~start;
        end = void 0 === end ? len : ~~end;
        if (start < 0) {
          start += len;
          start < 0 && (start = 0);
        } else start > len && (start = len);
        if (end < 0) {
          end += len;
          end < 0 && (end = 0);
        } else end > len && (end = len);
        end < start && (end = start);
        var newBuf;
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          newBuf = this.subarray(start, end);
          newBuf.__proto__ = Buffer.prototype;
        } else {
          var sliceLen = end - start;
          newBuf = new Buffer(sliceLen, void 0);
          for (var i = 0; i < sliceLen; ++i) newBuf[i] = this[i + start];
        }
        return newBuf;
      };
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
        if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
      }
      Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
        offset |= 0;
        byteLength |= 0;
        noAssert || checkOffset(offset, byteLength, this.length);
        var val = this[offset];
        var mul = 1;
        var i = 0;
        while (++i < byteLength && (mul *= 256)) val += this[offset + i] * mul;
        return val;
      };
      Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
        offset |= 0;
        byteLength |= 0;
        noAssert || checkOffset(offset, byteLength, this.length);
        var val = this[offset + --byteLength];
        var mul = 1;
        while (byteLength > 0 && (mul *= 256)) val += this[offset + --byteLength] * mul;
        return val;
      };
      Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        noAssert || checkOffset(offset, 1, this.length);
        return this[offset];
      };
      Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        noAssert || checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };
      Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        noAssert || checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };
      Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        noAssert || checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + 16777216 * this[offset + 3];
      };
      Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        noAssert || checkOffset(offset, 4, this.length);
        return 16777216 * this[offset] + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };
      Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
        offset |= 0;
        byteLength |= 0;
        noAssert || checkOffset(offset, byteLength, this.length);
        var val = this[offset];
        var mul = 1;
        var i = 0;
        while (++i < byteLength && (mul *= 256)) val += this[offset + i] * mul;
        mul *= 128;
        val >= mul && (val -= Math.pow(2, 8 * byteLength));
        return val;
      };
      Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
        offset |= 0;
        byteLength |= 0;
        noAssert || checkOffset(offset, byteLength, this.length);
        var i = byteLength;
        var mul = 1;
        var val = this[offset + --i];
        while (i > 0 && (mul *= 256)) val += this[offset + --i] * mul;
        mul *= 128;
        val >= mul && (val -= Math.pow(2, 8 * byteLength));
        return val;
      };
      Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
        noAssert || checkOffset(offset, 1, this.length);
        if (!(128 & this[offset])) return this[offset];
        return -1 * (255 - this[offset] + 1);
      };
      Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        noAssert || checkOffset(offset, 2, this.length);
        var val = this[offset] | this[offset + 1] << 8;
        return 32768 & val ? 4294901760 | val : val;
      };
      Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        noAssert || checkOffset(offset, 2, this.length);
        var val = this[offset + 1] | this[offset] << 8;
        return 32768 & val ? 4294901760 | val : val;
      };
      Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        noAssert || checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };
      Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        noAssert || checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };
      Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        noAssert || checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };
      Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        noAssert || checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };
      Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        noAssert || checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };
      Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        noAssert || checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };
      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length) throw new RangeError("Index out of range");
      }
      Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
        value = +value;
        offset |= 0;
        byteLength |= 0;
        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength) - 1;
          checkInt(this, value, offset, byteLength, maxBytes, 0);
        }
        var mul = 1;
        var i = 0;
        this[offset] = 255 & value;
        while (++i < byteLength && (mul *= 256)) this[offset + i] = value / mul & 255;
        return offset + byteLength;
      };
      Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
        value = +value;
        offset |= 0;
        byteLength |= 0;
        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength) - 1;
          checkInt(this, value, offset, byteLength, maxBytes, 0);
        }
        var i = byteLength - 1;
        var mul = 1;
        this[offset + i] = 255 & value;
        while (--i >= 0 && (mul *= 256)) this[offset + i] = value / mul & 255;
        return offset + byteLength;
      };
      Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 1, 255, 0);
        Buffer.TYPED_ARRAY_SUPPORT || (value = Math.floor(value));
        this[offset] = 255 & value;
        return offset + 1;
      };
      function objectWriteUInt16(buf, value, offset, littleEndian) {
        value < 0 && (value = 65535 + value + 1);
        for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) buf[offset + i] = (value & 255 << 8 * (littleEndian ? i : 1 - i)) >>> 8 * (littleEndian ? i : 1 - i);
      }
      Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 2, 65535, 0);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = 255 & value;
          this[offset + 1] = value >>> 8;
        } else objectWriteUInt16(this, value, offset, true);
        return offset + 2;
      };
      Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 2, 65535, 0);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 8;
          this[offset + 1] = 255 & value;
        } else objectWriteUInt16(this, value, offset, false);
        return offset + 2;
      };
      function objectWriteUInt32(buf, value, offset, littleEndian) {
        value < 0 && (value = 4294967295 + value + 1);
        for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) buf[offset + i] = value >>> 8 * (littleEndian ? i : 3 - i) & 255;
      }
      Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 4, 4294967295, 0);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset + 3] = value >>> 24;
          this[offset + 2] = value >>> 16;
          this[offset + 1] = value >>> 8;
          this[offset] = 255 & value;
        } else objectWriteUInt32(this, value, offset, true);
        return offset + 4;
      };
      Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 4, 4294967295, 0);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = 255 & value;
        } else objectWriteUInt32(this, value, offset, false);
        return offset + 4;
      };
      Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
        value = +value;
        offset |= 0;
        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength - 1);
          checkInt(this, value, offset, byteLength, limit - 1, -limit);
        }
        var i = 0;
        var mul = 1;
        var sub = 0;
        this[offset] = 255 & value;
        while (++i < byteLength && (mul *= 256)) {
          value < 0 && 0 === sub && 0 !== this[offset + i - 1] && (sub = 1);
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength;
      };
      Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
        value = +value;
        offset |= 0;
        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength - 1);
          checkInt(this, value, offset, byteLength, limit - 1, -limit);
        }
        var i = byteLength - 1;
        var mul = 1;
        var sub = 0;
        this[offset + i] = 255 & value;
        while (--i >= 0 && (mul *= 256)) {
          value < 0 && 0 === sub && 0 !== this[offset + i + 1] && (sub = 1);
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength;
      };
      Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 1, 127, -128);
        Buffer.TYPED_ARRAY_SUPPORT || (value = Math.floor(value));
        value < 0 && (value = 255 + value + 1);
        this[offset] = 255 & value;
        return offset + 1;
      };
      Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 2, 32767, -32768);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = 255 & value;
          this[offset + 1] = value >>> 8;
        } else objectWriteUInt16(this, value, offset, true);
        return offset + 2;
      };
      Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 2, 32767, -32768);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 8;
          this[offset + 1] = 255 & value;
        } else objectWriteUInt16(this, value, offset, false);
        return offset + 2;
      };
      Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = 255 & value;
          this[offset + 1] = value >>> 8;
          this[offset + 2] = value >>> 16;
          this[offset + 3] = value >>> 24;
        } else objectWriteUInt32(this, value, offset, true);
        return offset + 4;
      };
      Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 4, 2147483647, -2147483648);
        value < 0 && (value = 4294967295 + value + 1);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = 255 & value;
        } else objectWriteUInt32(this, value, offset, false);
        return offset + 4;
      };
      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length) throw new RangeError("Index out of range");
        if (offset < 0) throw new RangeError("Index out of range");
      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        noAssert || checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }
      Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };
      Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        noAssert || checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }
      Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };
      Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      };
      Buffer.prototype.copy = function copy(target, targetStart, start, end) {
        start || (start = 0);
        end || 0 === end || (end = this.length);
        targetStart >= target.length && (targetStart = target.length);
        targetStart || (targetStart = 0);
        end > 0 && end < start && (end = start);
        if (end === start) return 0;
        if (0 === target.length || 0 === this.length) return 0;
        if (targetStart < 0) throw new RangeError("targetStart out of bounds");
        if (start < 0 || start >= this.length) throw new RangeError("sourceStart out of bounds");
        if (end < 0) throw new RangeError("sourceEnd out of bounds");
        end > this.length && (end = this.length);
        target.length - targetStart < end - start && (end = target.length - targetStart + start);
        var len = end - start;
        var i;
        if (this === target && start < targetStart && targetStart < end) for (i = len - 1; i >= 0; --i) target[i + targetStart] = this[i + start]; else if (len < 1e3 || !Buffer.TYPED_ARRAY_SUPPORT) for (i = 0; i < len; ++i) target[i + targetStart] = this[i + start]; else Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
        return len;
      };
      Buffer.prototype.fill = function fill(val, start, end, encoding) {
        if ("string" === typeof val) {
          if ("string" === typeof start) {
            encoding = start;
            start = 0;
            end = this.length;
          } else if ("string" === typeof end) {
            encoding = end;
            end = this.length;
          }
          if (1 === val.length) {
            var code = val.charCodeAt(0);
            code < 256 && (val = code);
          }
          if (void 0 !== encoding && "string" !== typeof encoding) throw new TypeError("encoding must be a string");
          if ("string" === typeof encoding && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        } else "number" === typeof val && (val &= 255);
        if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
        if (end <= start) return this;
        start >>>= 0;
        end = void 0 === end ? this.length : end >>> 0;
        val || (val = 0);
        var i;
        if ("number" === typeof val) for (i = start; i < end; ++i) this[i] = val; else {
          var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
          var len = bytes.length;
          for (i = 0; i < end - start; ++i) this[i + start] = bytes[i % len];
        }
        return this;
      };
      var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = stringtrim(str).replace(INVALID_BASE64_RE, "");
        if (str.length < 2) return "";
        while (str.length % 4 !== 0) str += "=";
        return str;
      }
      function stringtrim(str) {
        if (str.trim) return str.trim();
        return str.replace(/^\s+|\s+$/g, "");
      }
      function toHex(n) {
        if (n < 16) return "0" + n.toString(16);
        return n.toString(16);
      }
      function utf8ToBytes(string, units) {
        units = units || Infinity;
        var codePoint;
        var length = string.length;
        var leadSurrogate = null;
        var bytes = [];
        for (var i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                (units -= 3) > -1 && bytes.push(239, 191, 189);
                continue;
              }
              if (i + 1 === length) {
                (units -= 3) > -1 && bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              (units -= 3) > -1 && bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = 65536 + (leadSurrogate - 55296 << 10 | codePoint - 56320);
          } else leadSurrogate && (units -= 3) > -1 && bytes.push(239, 191, 189);
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 6 | 192, 63 & codePoint | 128);
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, 63 & codePoint | 128);
          } else {
            if (!(codePoint < 1114112)) throw new Error("Invalid code point");
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, 63 & codePoint | 128);
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        var byteArray = [];
        for (var i = 0; i < str.length; ++i) byteArray.push(255 & str.charCodeAt(i));
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        var c, hi, lo;
        var byteArray = [];
        for (var i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0) break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset, length) {
        for (var i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length) break;
          dst[i + offset] = src[i];
        }
        return i;
      }
      function isnan(val) {
        return val !== val;
      }
    }).call(this, "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {});
  }, {
    "base64-js": 1,
    ieee754: 4,
    isarray: 3
  } ],
  3: [ function(require, module, exports) {
    var toString = {}.toString;
    module.exports = Array.isArray || function(arr) {
      return "[object Array]" == toString.call(arr);
    };
  }, {} ],
  4: [ function(require, module, exports) {
    exports.read = function(buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = 8 * nBytes - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? nBytes - 1 : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];
      i += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;
      for (;nBits > 0; e = 256 * e + buffer[offset + i], i += d, nBits -= 8) ;
      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for (;nBits > 0; m = 256 * m + buffer[offset + i], i += d, nBits -= 8) ;
      if (0 === e) e = 1 - eBias; else {
        if (e === eMax) return m ? NaN : Infinity * (s ? -1 : 1);
        m += Math.pow(2, mLen);
        e -= eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    };
    exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = 8 * nBytes - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = 23 === mLen ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i = isLE ? 0 : nBytes - 1;
      var d = isLE ? 1 : -1;
      var s = value < 0 || 0 === value && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);
      if (isNaN(value) || Infinity === value) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        value += e + eBias >= 1 ? rt / c : rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
          e++;
          c /= 2;
        }
        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e += eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }
      for (;mLen >= 8; buffer[offset + i] = 255 & m, i += d, m /= 256, mLen -= 8) ;
      e = e << mLen | m;
      eLen += mLen;
      for (;eLen > 0; buffer[offset + i] = 255 & e, i += d, e /= 256, eLen -= 8) ;
      buffer[offset + i - d] |= 128 * s;
    };
  }, {} ],
  DownLoadSubGameCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "94923kighBJFIMYAsK2Tl4X", "DownLoadSubGameCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var GameCateCfg_1 = require("../../CfgMgrs/GameCateCfg");
    var SubGameMgr_1 = require("../../GameMgrs/SubGameMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.ruleName = null;
        _this.ruleData = null;
        _this.gameId = null;
        _this.game = null;
        _this.gamecode = null;
        _this.gamename = null;
        _this.state = 0;
        _this.alreadydownloadsize = 0;
        _this.totalfilesize = 0;
        _this.speed = 0;
        _this.downloaders = null;
        _this.bUpdated = null;
        return _this;
      }
      Model.prototype.updateGameId = function(gameid) {
        this.gameId = gameid;
        this.game = GameCateCfg_1.default.getInstance().getGameById(this.gameId);
        this.gamename = this.game.name;
        this.gamecode = this.game.code;
        this.downloaders = SubGameMgr_1.default.getInstance().getDownLoaders();
        this.bUpdated = SubGameMgr_1.default.getInstance().gameIsUpdated(this.gamecode);
      };
      Model.prototype.updateState = function(state) {
        this.state = state;
      };
      Model.prototype.updateProcess = function(speed, alreadydownloadsize, totalfilesize) {
        this.speed = speed;
        this.alreadydownloadsize = alreadydownloadsize;
        this.totalfilesize = totalfilesize;
      };
      Model.prototype.loadProcess = function() {
        var loader = this.downloaders[this.gamecode];
        this.speed = loader.getSpeed();
        this.alreadydownloadsize = loader.getAlreadLoadSize();
        this.totalfilesize = loader.getTotalSize();
      };
      Model.prototype.getCurDownLoader = function() {
        return this.downloaders[this.gamecode];
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.node = null;
        _this.ui = {
          btn_ok: ctrl.btn_ok,
          node_loading: ctrl.node_loading,
          lbl_statetip: ctrl.lbl_statetip,
          progress_loading: ctrl.progress_loading,
          lbl_loadingpercent: ctrl.lbl_loadingpercent,
          lbl_process: ctrl.lbl_process
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.progress_loading.progress = 0;
        this.ui.node_loading.active = false;
        this.ui.node_loading.active = false;
        this.ui.lbl_statetip.string = "";
        this.ui.btn_ok.node.active = false;
      };
      View.prototype.updateProcess = function() {
        if (this.model.totalfilesize > 0) {
          var percent = this.model.alreadydownloadsize / this.model.totalfilesize;
          this.ui.progress_loading.progress = percent;
          var m = 1048576;
          var alreadydownloadm = (this.model.alreadydownloadsize / m).toFixed(2);
          var totalfilesizem = (this.model.totalfilesize / m).toFixed(2);
          var kspeed = (this.model.speed / 1024).toFixed(2);
          var processstring = "(" + alreadydownloadm + "MB/" + totalfilesizem + "MB)";
          this.ui.lbl_process.string = processstring;
        }
      };
      View.prototype.updateState = function() {
        this.ui.node_loading.active = false;
        this.ui.lbl_statetip.string = "";
        this.ui.btn_ok.node.active = false;
        switch (this.model.state) {
         case SUBGAMEDOWNLOAD_STATE.none:
          this.ui.lbl_statetip.string = "正在加载游戏";
          break;

         case SUBGAMEDOWNLOAD_STATE.downloading:
          this.updateLoadingProcess();
          break;

         case SUBGAMEDOWNLOAD_STATE.downfailed:
          this.ui.lbl_statetip.string = "下载失败请检查你的网络状况再重试";
          this.ui.btn_ok.node.active = true;
          break;

         case SUBGAMEDOWNLOAD_STATE.ready:
          this.updateReadyInfo();
          break;

         case SUBGAMEDOWNLOAD_STATE.que:
          this.ui.lbl_statetip.string = "正在下载队列中等待";
        }
      };
      View.prototype.updateReadyInfo = function() {
        var downloader = this.model.getCurDownLoader();
        var subgamestate = SubGameMgr_1.default.getInstance().getSubGameState(this.model.gamecode);
        var gamename = this.model.gamename;
        var tipstr = "";
        var m = 1048576;
        var totalsize = (downloader.getTotalSize() / m).toFixed(2);
        switch (subgamestate) {
         case 1:
          tipstr = "【" + gamename + "】需要更新,是否马上更新(" + totalsize + "MB)?";
          break;

         case 2:
          tipstr = "您还未下载【" + gamename + "】,是否马上下载(" + totalsize + "MB)?";
        }
        this.ui.lbl_statetip.string = tipstr;
        this.ui.btn_ok.node.active = true;
      };
      View.prototype.updateLoadingProcess = function() {
        this.ui.node_loading.active = true;
        this.updateProcess();
      };
      return View;
    }(BaseView_1.default);
    var Prefab_DownLoadSubGameCtrl = function(_super) {
      __extends(Prefab_DownLoadSubGameCtrl, _super);
      function Prefab_DownLoadSubGameCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_ok = null;
        _this.node_loading = null;
        _this.lbl_statetip = null;
        _this.lbl_loadingpercent = null;
        _this.progress_loading = null;
        _this.lbl_process = null;
        _this.completeCb = null;
        return _this;
      }
      Prefab_DownLoadSubGameCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        SubGameMgr_1.default.getInstance().registerCb(this.downLoadSubGameCb.bind(this), this.processCb.bind(this));
      };
      Prefab_DownLoadSubGameCtrl.prototype.onDestroy = function() {
        SubGameMgr_1.default.getInstance().unRegisterCb();
        _super.prototype.onDestroy.call(this);
      };
      Prefab_DownLoadSubGameCtrl.prototype.defineNetEvents = function() {};
      Prefab_DownLoadSubGameCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_DownLoadSubGameCtrl.prototype.connectUi = function() {
        var self = this;
        this.ui.btn_ok.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          self.btn_ok_cb();
        }, this);
      };
      Prefab_DownLoadSubGameCtrl.prototype.start = function() {};
      Prefab_DownLoadSubGameCtrl.prototype.btn_ok_cb = function() {
        var downloader = this.model.getCurDownLoader();
        var state = downloader.getState();
        var process_state = downloader.getProcessState();
        switch (state) {
         case SUBGAMEDOWNLOAD_STATE.ready:
          downloader.startDownLoad();
          break;

         case SUBGAMEDOWNLOAD_STATE.downfailed:
          switch (process_state) {
           case SUBGAMEPROCESS_STATE.none:
            downloader.downloadSubMd5dic();
            break;

           case SUBGAMEPROCESS_STATE.loading:
            downloader.retry();
          }
        }
      };
      Prefab_DownLoadSubGameCtrl.prototype.updateGameId = function(gameId) {
        this.model.updateGameId(gameId);
        SubGameMgr_1.default.getInstance().updateGameId(this.model.gamecode);
        this.ui.node_loading.active = false;
        this.ui.lbl_statetip.string = "";
        this.ui.btn_ok.node.active = false;
        var downloader = this.model.getCurDownLoader();
        if (!downloader) return;
        var state = downloader.getState();
        var process_state = downloader.getProcessState();
        console.log("downloader=", downloader, state, process_state);
        this.setState(state);
        if (this.model.bUpdated) return;
        switch (state) {
         case SUBGAMEDOWNLOAD_STATE.downfailed:
         case SUBGAMEDOWNLOAD_STATE.que:
          break;

         default:
          switch (process_state) {
           case SUBGAMEPROCESS_STATE.none:
            downloader.downloadSubMd5dic();
            break;

           case SUBGAMEPROCESS_STATE.sizeCaled:
            this.view.updateReadyInfo();
            break;

           case SUBGAMEPROCESS_STATE.loading:
            this.view.updateLoadingProcess();
          }
        }
      };
      Prefab_DownLoadSubGameCtrl.prototype.registerCompleteCb = function(completeCb) {
        this.completeCb = completeCb;
      };
      Prefab_DownLoadSubGameCtrl.prototype.unRegisterCompleteCb = function() {
        this.completeCb = null;
      };
      Prefab_DownLoadSubGameCtrl.prototype.downLoadSubGameCb = function(gamecode, state) {
        if (this.model.gamecode != gamecode) return;
        this.setState(state);
      };
      Prefab_DownLoadSubGameCtrl.prototype.setState = function(state) {
        this.model.updateState(state);
        this.view.updateState();
        switch (this.model.state) {
         case SUBGAMEDOWNLOAD_STATE.none:
         case SUBGAMEDOWNLOAD_STATE.complete:
          this.completeCb && this.completeCb();
        }
      };
      Prefab_DownLoadSubGameCtrl.prototype.processCb = function(gamecode, speed, alreadydownloadsize, totalfilesize) {
        if (this.model.gamecode != gamecode) return;
        this.model.updateProcess(speed, alreadydownloadsize, totalfilesize);
        this.view.updateProcess();
      };
      __decorate([ property(cc.Button) ], Prefab_DownLoadSubGameCtrl.prototype, "btn_ok", void 0);
      __decorate([ property(cc.Node) ], Prefab_DownLoadSubGameCtrl.prototype, "node_loading", void 0);
      __decorate([ property(cc.Label) ], Prefab_DownLoadSubGameCtrl.prototype, "lbl_statetip", void 0);
      __decorate([ property(cc.Label) ], Prefab_DownLoadSubGameCtrl.prototype, "lbl_loadingpercent", void 0);
      __decorate([ property(cc.ProgressBar) ], Prefab_DownLoadSubGameCtrl.prototype, "progress_loading", void 0);
      __decorate([ property(cc.Label) ], Prefab_DownLoadSubGameCtrl.prototype, "lbl_process", void 0);
      Prefab_DownLoadSubGameCtrl = __decorate([ ccclass ], Prefab_DownLoadSubGameCtrl);
      return Prefab_DownLoadSubGameCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_DownLoadSubGameCtrl;
    cc._RF.pop();
  }, {
    "../../CfgMgrs/GameCateCfg": "GameCateCfg",
    "../../GameMgrs/SubGameMgr": "SubGameMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Down_infoumation: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "19bb5fC9+9EHolLQvCW67us", "Down_infoumation");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var SwitchMgr_1 = require("../../GameMgrs/SwitchMgr");
    var redPushMgr_1 = require("../../GameMgrs/redPushMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.shopSwitch = null;
        _this.welfareRed = null;
        _this.mailRed = null;
        _this.myinfo = null;
        _this.shopSwitch = SwitchMgr_1.default.getInstance().get_switch_shop();
        _this.updateRedPush();
        return _this;
      }
      Model.prototype.updateSwitch = function(msg) {
        this.shopSwitch = msg.cfg.switch_shop;
      };
      Model.prototype.updateRedPush = function() {
        this.welfareRed = redPushMgr_1.default.getInstance().getwelfareRed();
        this.mailRed = redPushMgr_1.default.getInstance().getMailRed();
      };
      Model.prototype.getMyInfo = function() {
        this.myinfo = UserMgr_1.default.getInstance().getMyInfo();
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_shop: ctrl.btn_shop,
          btn_welfare: ctrl.btn_welfare,
          btn_mail: ctrl.btn_mail,
          btn_more: ctrl.btn_more,
          welfareRed: ctrl.welfareRed,
          mailRed: ctrl.mailRed,
          btn_zhanji: ctrl.btn_zhanji,
          node_diamondTip: ctrl.node_diamondTip
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.btn_shop.active = false;
        this.showShop();
        this.updateRedState();
      };
      View.prototype.updateRedState = function() {};
      View.prototype.updateMailRed = function(bool) {};
      View.prototype.updateDailyRed = function(bool) {};
      View.prototype.showShop = function() {
        this.ui.btn_shop.active = 1 == this.model.shopSwitch;
      };
      View.prototype.hideDiamondTip = function() {
        this.ui.node_diamondTip.active = false;
      };
      View.prototype.disableBtn_welfare = function() {
        this.ui.btn_welfare._isTouchEnabledEx = false;
      };
      return View;
    }(BaseView_1.default);
    var NodeBottomCtrl = function(_super) {
      __extends(NodeBottomCtrl, _super);
      function NodeBottomCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_shop = null;
        _this.btn_welfare = null;
        _this.btn_mail = null;
        _this.btn_more = null;
        _this.btn_zhanji = null;
        _this.welfareRed = null;
        _this.node_diamondTip = null;
        _this.mailRed = null;
        return _this;
      }
      NodeBottomCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      NodeBottomCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqGameSwitch": this.http_reqGameSwitch,
          "http.reqUnread": this.http_reqUnread,
          "http.reqMyInfo": this.http_reqMyInfo
        };
      };
      NodeBottomCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          mailRedPush_update: this.mailRedPush_update,
          welfareRedPush_update: this.welfareRedPush_update,
          closBindAgent: this.closBindAgent
        };
      };
      NodeBottomCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.btn_shop, this.btn_shop_cb, "点击商城");
        this.connect(G_UiType.button, this.ui.btn_welfare, this.btn_welfare_cb, "点击福利");
        this.connect(G_UiType.button, this.ui.btn_mail, this.btn_mail_cb, "点击邮件");
        this.connect(G_UiType.button, this.ui.btn_more, this.btn_more_cb, "点击更多");
        this.connect(G_UiType.button, this.ui.btn_zhanji, this.btn_zhanjicb, "点击战绩");
      };
      NodeBottomCtrl.prototype.start = function() {};
      NodeBottomCtrl.prototype.http_reqUnread = function() {
        this.model.updateRedPush();
        this.view.updateRedState();
      };
      NodeBottomCtrl.prototype.http_reqMyInfo = function() {
        this.model.getMyInfo();
        if (this.model.myinfo.promoters_id && 0 != this.model.myinfo.promoters_id) {
          this.view.hideDiamondTip();
          this.view.disableBtn_welfare();
        }
      };
      NodeBottomCtrl.prototype.http_reqGameSwitch = function(msg) {
        this.model.updateSwitch(msg);
        this.view.showShop();
      };
      NodeBottomCtrl.prototype.mailRedPush_update = function(bool) {
        this.view.updateMailRed(bool);
      };
      NodeBottomCtrl.prototype.welfareRedPush_update = function(bool) {
        this.view.updateDailyRed(bool);
      };
      NodeBottomCtrl.prototype.closBindAgent = function() {
        this.view.hideDiamondTip();
        this.view.disableBtn_welfare();
      };
      NodeBottomCtrl.prototype.btn_shop_cb = function(event) {
        this.start_sub_module(G_MODULE.Shop);
      };
      NodeBottomCtrl.prototype.btn_welfare_cb = function(event) {
        this.start_sub_module(G_MODULE.bindAgent);
      };
      NodeBottomCtrl.prototype.btn_matchVideo_cb = function(event) {
        this.start_module(G_MODULE.MatchVideo);
      };
      NodeBottomCtrl.prototype.btn_mail_cb = function(event) {
        this.start_sub_module(G_MODULE.Announcement);
      };
      NodeBottomCtrl.prototype.btn_more_cb = function(event) {
        this.start_sub_module(G_MODULE.bingPhone);
      };
      NodeBottomCtrl.prototype.btn_goldMatch_cb = function(event) {
        this.start_sub_module(G_MODULE.Tranning);
      };
      NodeBottomCtrl.prototype.btn_zhanjicb = function(event) {
        this.start_sub_module(G_MODULE.RecordList);
      };
      __decorate([ property(cc.Node) ], NodeBottomCtrl.prototype, "btn_shop", void 0);
      __decorate([ property(cc.Node) ], NodeBottomCtrl.prototype, "btn_welfare", void 0);
      __decorate([ property(cc.Node) ], NodeBottomCtrl.prototype, "btn_mail", void 0);
      __decorate([ property(cc.Node) ], NodeBottomCtrl.prototype, "btn_more", void 0);
      __decorate([ property(cc.Node) ], NodeBottomCtrl.prototype, "btn_zhanji", void 0);
      __decorate([ property({
        tooltip: "福利红点标识",
        type: cc.Node
      }) ], NodeBottomCtrl.prototype, "welfareRed", void 0);
      __decorate([ property({
        tooltip: "送钻石提示",
        type: cc.Node
      }) ], NodeBottomCtrl.prototype, "node_diamondTip", void 0);
      __decorate([ property({
        tooltip: "邮件红点标识",
        type: cc.Node
      }) ], NodeBottomCtrl.prototype, "mailRed", void 0);
      NodeBottomCtrl = __decorate([ ccclass ], NodeBottomCtrl);
      return NodeBottomCtrl;
    }(BaseCtrl_1.default);
    exports.default = NodeBottomCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/SwitchMgr": "SwitchMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../GameMgrs/redPushMgr": "redPushMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  FirstChargeTaskMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1398ffd3J1GvaZzz+xqqiyB", "FirstChargeTaskMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var UserMgr_1 = require("./UserMgr");
    var FrameMgr_1 = require("./FrameMgr");
    var FirstChargeTaskMgr = function(_super) {
      __extends(FirstChargeTaskMgr, _super);
      function FirstChargeTaskMgr() {
        var _this = _super.call(this) || this;
        _this.routes = null;
        _this.isGetReward = null;
        _this.isGetReward = UserMgr_1.default.getInstance().getMyInfo().is_get_reward;
        _this.routes = {
          "http.reqReceiveFirstCharge": _this.http_reqReceiveFirstCharge,
          "http.reqMyInfo": _this.http_reqMyInfo
        };
        return _this;
      }
      FirstChargeTaskMgr.prototype.http_reqReceiveFirstCharge = function(msg) {
        FrameMgr_1.default.getInstance().showMsgBox("获得" + msg.itemid + msg.amount + "个");
        UserMgr_1.default.getInstance().reqMyInfo();
      };
      FirstChargeTaskMgr.prototype.http_reqMyInfo = function(msg) {
        this.isGetReward = UserMgr_1.default.getInstance().getMyInfo().is_get_reward;
      };
      FirstChargeTaskMgr.prototype.FirstCharge = function() {
        if (0 == this.isGetReward) {
          this.send_msg("http.reqReceiveFirstCharge");
          return;
        }
        FrameMgr_1.default.getInstance().showMsgBox("已经领取过奖励");
      };
      FirstChargeTaskMgr.getInstance = function() {
        this._instance || (this._instance = new FirstChargeTaskMgr());
        return this._instance;
      };
      return FirstChargeTaskMgr;
    }(BaseMgr_1.default);
    exports.default = FirstChargeTaskMgr;
    cc._RF.pop();
  }, {
    "../Libs/BaseMgr": "BaseMgr",
    "./FrameMgr": "FrameMgr",
    "./UserMgr": "UserMgr"
  } ],
  FrameMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "600d3KwOlVDHrrJySdA+VuC", "FrameMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var WM_Emitter_1 = require("../Libs/WM_Emitter");
    var ModuleMgr_1 = require("./ModuleMgr");
    var G_FRAME = {};
    G_FRAME["globalEmitter"] = new WM_Emitter_1.default("全局事件分发器");
    G_FRAME["netEmitter"] = new WM_Emitter_1.default("网络事件分发器");
    window["G_FRAME"] = G_FRAME;
    var FrameMgr = function() {
      function FrameMgr() {
        this._loadLayer = null;
      }
      FrameMgr.getInstance = function() {
        this._instance || (this._instance = new FrameMgr());
        return this._instance;
      };
      FrameMgr.prototype.showMsgBox = function(content, okcb, title) {
        ModuleMgr_1.default.getInstance().start_sub_module(G_MODULE.MsgBox, function(prefabComp) {
          prefabComp.showMsg(content, okcb, true, title);
        }, "MsgBoxCtrl");
      };
      FrameMgr.prototype.showDialog = function(content, okcb, title, offcb) {
        ModuleMgr_1.default.getInstance().start_sub_module(G_MODULE.MsgBox, function(prefabComp) {
          prefabComp.showMsg(content, okcb, false, title, offcb);
        }, "MsgBoxCtrl");
      };
      FrameMgr.prototype.showHarvest = function(itemNum, imgName, recItemNum, cb) {
        ModuleMgr_1.default.getInstance().start_sub_module(G_MODULE.HarvestFrame, function(prefabComp) {
          prefabComp.showItems(itemNum, imgName, recItemNum, cb);
        }, "HarvestCtrl");
      };
      FrameMgr.prototype.showLoadAni = function() {
        var _this = this;
        this._loadLayer && (cc.isValid(this._loadLayer) || this._loadLayer.node.parent) || cc.loader.loadRes(G_MODULE.MsgBoxLoadingAni, function(err, prefab) {
          if (err) cc.error(err); else {
            var prefabNode = cc.instantiate(prefab);
            prefabNode.parent = cc.director.getScene();
            _this._loadLayer = prefabNode.getComponent("MsgBoxLoadingAni");
            _this._loadLayer.showLoad();
          }
        });
      };
      FrameMgr.prototype.clearLoadAni = function() {
        if (this._loadLayer && cc.isValid(this._loadLayer) && this._loadLayer.node.parent) {
          this._loadLayer.clearLoad();
          this._loadLayer = null;
        }
      };
      FrameMgr.prototype.showTips = function(context, cb, fontSize, color, pos, font, delayTime, contentSize) {
        void 0 === fontSize && (fontSize = 35);
        void 0 === color && (color = new cc.Color(255, 255, 255));
        void 0 === pos && (pos = cc.p(0, 0));
        void 0 === font && (font = "Arial");
        void 0 === delayTime && (delayTime = 1e3);
        void 0 === contentSize && (contentSize = cc.p(1280, 140));
        ModuleMgr_1.default.getInstance().start_sub_module(G_MODULE.tipFrame, function(prefabComp) {
          prefabComp.showTips(context, cb, fontSize, color, pos, font, delayTime, contentSize);
        }, "TipsCtrl");
      };
      FrameMgr.prototype.showHintBox = function(content, okcb) {
        ModuleMgr_1.default.getInstance().start_sub_module(G_MODULE.HintBox, function(prefabComp) {
          prefabComp.SetContent(content, okcb);
        }, "HintsCtrl");
      };
      return FrameMgr;
    }();
    exports.default = FrameMgr;
    cc._RF.pop();
  }, {
    "../Libs/WM_Emitter": "WM_Emitter",
    "./ModuleMgr": "ModuleMgr"
  } ],
  FzmjCards: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "39940TkYFJCsZP8lA69mLju", "FzmjCards");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MahjongGeneral_1 = require("../../../GameCommon/Mahjong/MahjongGeneral");
    var MahjongCards_1 = require("../../../GameCommon/Mahjong/MahjongCards");
    var MahjongDef_1 = require("../../../GameCommon/Mahjong/MahjongDef");
    var FzmjCards = function(_super) {
      __extends(FzmjCards, _super);
      function FzmjCards(cardcount) {
        var _this = _super.call(this, cardcount) || this;
        while (1) {
          var bFind = false;
          for (var index = 0; index < _this.ting_majiang_types.length; ++index) {
            var cardvalue = _this.ting_majiang_types[index];
            if (MahjongGeneral_1.MahjongGeneral.Majiang_Type(cardvalue) == MahjongGeneral_1.MahjongGeneral.MajiangType.emMJType_Zi) {
              _this.ting_majiang_types.remove(index);
              bFind = true;
              break;
            }
          }
          if (!bFind) break;
        }
        return _this;
      }
      FzmjCards.prototype.isHua = function(cardvalue) {
        var cate = MahjongGeneral_1.MahjongGeneral.Majiang_Type(cardvalue);
        return cate == MahjongGeneral_1.MahjongGeneral.MajiangType.emMJType_Hua || cate == MahjongGeneral_1.MahjongGeneral.MajiangType.emMJType_Zi;
      };
      FzmjCards.prototype.IsQingYise = function(original_pai, yise) {
        if (null != yise && -1 == yise) return null;
        var tmpcards = original_pai.concat();
        for (var i = 0; i < tmpcards.length; ++i) {
          var card = tmpcards[i];
          MahjongGeneral_1.MahjongGeneral.isJoker(card) && (tmpcards[i] = this.jin);
        }
        null == yise && (yise = MahjongGeneral_1.MahjongGeneral.Majiang_Type(tmpcards[0]));
        for (var i = 0; i < tmpcards.length; ++i) {
          var card = tmpcards[i];
          if (MahjongGeneral_1.MahjongGeneral.Majiang_Type(card) != yise) return null;
        }
        tmpcards.sort();
        return this.IsCommonHu(tmpcards);
      };
      FzmjCards.prototype.IsHunYise = function(original_pai, yise) {
        if (null != yise && -1 == yise) return null;
        var tmpcards = original_pai.concat();
        var offset = 0;
        for (var i = 0; i < tmpcards.length; ++i) {
          var card = tmpcards[i];
          MahjongGeneral_1.MahjongGeneral.isJoker(card) && offset++;
        }
        null == yise && (yise = MahjongGeneral_1.MahjongGeneral.Majiang_Type(tmpcards[offset]));
        for (var i = offset; i < tmpcards.length; ++i) {
          var card = tmpcards[i];
          if (MahjongGeneral_1.MahjongGeneral.Majiang_Type(card) != yise) return null;
        }
        return this.IsCommonHu(tmpcards);
      };
      FzmjCards.prototype.IsHu = function(cards, yise) {
        var hucards = this.IsQingYise(cards, yise);
        if (hucards) return {
          hutype: MahjongDef_1.MahjongDef.hutype_qingyise,
          hucards: hucards
        };
        hucards = this.IsHunYise(cards, yise);
        if (hucards) return {
          hutype: MahjongDef_1.MahjongDef.hutype_hunyise,
          hucards: hucards
        };
        var nonJokerCards = [];
        var jokerCount = 0;
        for (var index = 0; index < cards.length; ++index) MahjongGeneral_1.MahjongGeneral.isJoker(cards[index]) ? jokerCount++ : nonJokerCards.push(cards[index]);
        if (jokerCount >= 3) {
          hucards = this.IsCommonHu(nonJokerCards);
          if (hucards) return {
            hutype: MahjongDef_1.MahjongDef.hutype_normal,
            hucards: hucards
          };
        }
        hucards = this.IsCommonHu(cards);
        if (hucards) return {
          hutype: MahjongDef_1.MahjongDef.hutype_normal,
          hucards: hucards
        };
        return null;
      };
      return FzmjCards;
    }(MahjongCards_1.default);
    exports.default = FzmjCards;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Mahjong/MahjongCards": "MahjongCards",
    "../../../GameCommon/Mahjong/MahjongDef": "MahjongDef",
    "../../../GameCommon/Mahjong/MahjongGeneral": "MahjongGeneral"
  } ],
  FzmjEntry: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c8cf2pZwCZJ5IwmESL3vlcL", "FzmjEntry");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ModuleMgr_1 = require("../../Plat/GameMgrs/ModuleMgr");
    var modules = {
      Settle: "SubLayer/Games/Fzmj/FzmjSettle",
      GambleRecord: "SubLayer/Games/Fzmj/FzmjGambleRecord",
      Fzmjhaidilaoyue: "SubLayer/Games/Fzmj/Fzmj_haidilaoyue"
    };
    var FzmjEntry = function() {
      function FzmjEntry() {}
      FzmjEntry.getInstance = function() {
        this._instance || (this._instance = new FzmjEntry());
        return this._instance;
      };
      FzmjEntry.prototype.registerModules = function() {
        ModuleMgr_1.default.getInstance().registerGame(modules);
      };
      return FzmjEntry;
    }();
    exports.default = FzmjEntry;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/ModuleMgr": "ModuleMgr"
  } ],
  FzmjFinalSettleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fe052pX9ahBO6zhThBTQm7J", "FzmjFinalSettleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BunchInfoMgr_1 = require("../../Plat/GameMgrs/BunchInfoMgr");
    var SwitchMgr_1 = require("../../Plat/GameMgrs/SwitchMgr");
    var LoginMgr_1 = require("../../Plat/GameMgrs/LoginMgr");
    var Green = new cc.Color(24, 221, 40), Red = new cc.Color(255, 78, 0), Yellow = new cc.Color(255, 222, 0);
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.roomOption = null;
        _this.shareSwitch = null;
        _this.roomValue = null;
        _this.roomid = null;
        _this.roundIndex = null;
        _this.shareSwitch = SwitchMgr_1.default.getInstance().get_switch_performance_sharing();
        _this.roomOption = BunchInfoMgr_1.default.getInstance().getRoomOption();
        _this.roomid = BunchInfoMgr_1.default.getInstance().getRoomId();
        _this.roundIndex = BunchInfoMgr_1.default.getInstance().getBunchInfo().roundIndex;
        _this.roomValue = BunchInfoMgr_1.default.getInstance().getBunchInfo().roomValue;
        return _this;
      }
      Model.prototype.updateSwitch = function(msg) {
        this.shareSwitch = msg.cfg.switch_performance_sharing;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_ztj: null,
          btn_mjjf: null,
          btn_share: null,
          btn_exit: null,
          node_content: null,
          prefab_FzmjRoundsSettle: null,
          prefab_FzmjStatisticsSettle: null,
          ztjNormalSprite: null,
          ztjPressSprite: null,
          mjjfNormalSprite: null,
          mjjfPressSprite: null,
          btn_close: null,
          lab_look_video: null,
          lbl_roomInfo: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.btn_ztj = ctrl.btn_ztj.getComponent(cc.Sprite);
        this.ui.btn_mjjf = ctrl.btn_mjjf.getComponent(cc.Sprite);
        this.ui.btn_share = ctrl.btn_share;
        this.ui.lab_look_video = ctrl.lab_look_video;
        this.ui.lab_look_video.node.active = false;
        this.ui.btn_exit = ctrl.btn_exit;
        this.ui.btn_exit.active = false;
        this.ui.node_content = ctrl.node_content;
        this.ui.btn_close = ctrl.btn_close;
        this.ui.btn_close.active = true;
        this.ui.lbl_roomInfo = ctrl.lbl_roomInfo;
        if (BunchInfoMgr_1.default.getInstance().getplazzaFlag()) {
          this.ui.btn_close.active = true;
          this.ui.lab_look_video.node.active = true;
        }
        this.ui.prefab_FzmjRoundsSettle = ctrl.prefab_FzmjRoundsSettle;
        this.ui.prefab_FzmjStatisticsSettle = ctrl.prefab_FzmjStatisticsSettle;
        this.ui.ztjNormalSprite = this.ui.btn_ztj.node.getChildByName("totalBtn_normalSprite");
        this.ui.ztjPressSprite = this.ui.btn_ztj.node.getChildByName("totalBtn_pressSprite");
        this.ui.mjjfNormalSprite = this.ui.btn_mjjf.node.getChildByName("detailBtn_normalSprite");
        this.ui.mjjfPressSprite = this.ui.btn_mjjf.node.getChildByName("detailBtn_pressSprite");
        this.initViewWithStatistics();
        this.showShareBtn();
        this.showroomInfo();
      };
      View.prototype.initViewWithRounds = function() {
        this.ui.node_content.removeAllChildren();
        var FzmjRounds = cc.instantiate(this.ui.prefab_FzmjRoundsSettle);
        this.ui.node_content.addChild(FzmjRounds);
        var FzmjRoundsCtrl = FzmjRounds.getComponent("FzmjRoundsSettleCtrl");
        this.ui.ztjNormalSprite.active = true;
        this.ui.ztjPressSprite.active = false;
        this.ui.mjjfNormalSprite.active = false;
        this.ui.mjjfPressSprite.active = true;
      };
      View.prototype.initViewWithStatistics = function() {
        this.ui.node_content.removeAllChildren();
        var FzmjStatistics = cc.instantiate(this.ui.prefab_FzmjStatisticsSettle);
        var FzmjStatisticsSettleCtrl = FzmjStatistics.getComponent("FzmjStatisticsSettleCtrl");
        console.log("FzmjStatistics=", FzmjStatistics, this.ui.node_content);
        this.ui.node_content.addChild(FzmjStatistics);
        this.ui.ztjNormalSprite.active = false;
        this.ui.ztjPressSprite.active = true;
        this.ui.mjjfNormalSprite.active = true;
        this.ui.mjjfPressSprite.active = false;
      };
      View.prototype.showShareBtn = function() {
        this.ui.btn_share.active = 1 == this.model.shareSwitch;
      };
      View.prototype.formatDate = function() {
        var time = new Date();
        var year = time.getFullYear();
        var month = time.getMonth() + 1;
        var date = time.getDate();
        var hour = time.getHours();
        var minute = time.getMinutes();
        var second = time.getSeconds();
        return year + "-" + month + "-" + date + " " + hour + ":" + minute + ":" + second;
      };
      View.prototype.showroomInfo = function() {
        var roomOptionDesc = this.model.roomOption.toString().replace(new RegExp(",", "g"), " ").replace(new RegExp("，", "g"), " ").replace(new RegExp("。", "g"), " ");
        var dattime = this.formatDate();
        this.ui.lbl_roomInfo.string = "房号" + this.model.roomid + "  第" + this.model.roundIndex + "/" + this.model.roomValue.v_roundcount + "局\n\n" + roomOptionDesc + "\n\n" + dattime;
      };
      return View;
    }(BaseView_1.default);
    var FzmjFinalSettleCtrl = function(_super) {
      __extends(FzmjFinalSettleCtrl, _super);
      function FzmjFinalSettleCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_content = null;
        _this.btn_ztj = null;
        _this.btn_mjjf = null;
        _this.btn_share = null;
        _this.btn_exit = null;
        _this.prefab_FzmjRoundsSettle = null;
        _this.prefab_FzmjStatisticsSettle = null;
        _this.btn_close = null;
        _this.lab_look_video = null;
        _this.lbl_roomInfo = null;
        return _this;
      }
      FzmjFinalSettleCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      FzmjFinalSettleCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqGameSwitch": this.http_reqGameSwitch
        };
      };
      FzmjFinalSettleCtrl.prototype.defineGlobalEvents = function() {};
      FzmjFinalSettleCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.btn_ztj, this.btn_ztj_cb, "总统计");
        this.connect(G_UiType.image, this.btn_mjjf, this.btn_mjjf_cb, "每局积分");
        this.connect(G_UiType.image, this.btn_share, this.btn_share_cb, "分享");
        this.connect(G_UiType.image, this.btn_exit, this.btn_exit_cb, "退出");
        this.connect(G_UiType.image, this.btn_close, this.btn_close_cb, "退出");
      };
      FzmjFinalSettleCtrl.prototype.start = function() {};
      FzmjFinalSettleCtrl.prototype.http_reqGameSwitch = function(msg) {
        this.model.updateSwitch(msg);
        this.view.showShareBtn();
      };
      FzmjFinalSettleCtrl.prototype.btn_exit_cb = function() {
        BunchInfoMgr_1.default.getInstance().clear();
        LoginMgr_1.default.getInstance().disconnectGameSvr();
      };
      FzmjFinalSettleCtrl.prototype.btn_ztj_cb = function() {
        console.log("btn_ztj_cb");
        this.view.initViewWithStatistics();
      };
      FzmjFinalSettleCtrl.prototype.btn_mjjf_cb = function() {
        console.log("btn_mjjf_cb");
        this.view.initViewWithRounds();
      };
      FzmjFinalSettleCtrl.prototype.btn_share_cb = function() {
        console.log("btn_share_cb");
        this.start_sub_module(G_MODULE.Shared);
      };
      FzmjFinalSettleCtrl.prototype.showDefaultView = function() {
        this.view.initViewWithStatistics();
      };
      FzmjFinalSettleCtrl.prototype.btn_close_cb = function() {
        BunchInfoMgr_1.default.getInstance().clear();
        this.finish();
        this.start_module(G_MODULE.Plaza);
      };
      __decorate([ property({
        tooltip: "content",
        type: cc.Node
      }) ], FzmjFinalSettleCtrl.prototype, "node_content", void 0);
      __decorate([ property({
        tooltip: "btn_ztj",
        type: cc.Node
      }) ], FzmjFinalSettleCtrl.prototype, "btn_ztj", void 0);
      __decorate([ property({
        tooltip: "btn_mjjf",
        type: cc.Node
      }) ], FzmjFinalSettleCtrl.prototype, "btn_mjjf", void 0);
      __decorate([ property({
        tooltip: "btn_share",
        type: cc.Node
      }) ], FzmjFinalSettleCtrl.prototype, "btn_share", void 0);
      __decorate([ property({
        tooltip: "btn_exit",
        type: cc.Node
      }) ], FzmjFinalSettleCtrl.prototype, "btn_exit", void 0);
      __decorate([ property({
        tooltip: "每局明细",
        type: cc.Prefab
      }) ], FzmjFinalSettleCtrl.prototype, "prefab_FzmjRoundsSettle", void 0);
      __decorate([ property({
        tooltip: "总统计",
        type: cc.Prefab
      }) ], FzmjFinalSettleCtrl.prototype, "prefab_FzmjStatisticsSettle", void 0);
      __decorate([ property({
        tooltip: "btn_close",
        type: cc.Node
      }) ], FzmjFinalSettleCtrl.prototype, "btn_close", void 0);
      __decorate([ property({
        tooltip: "录像提示",
        type: cc.Label
      }) ], FzmjFinalSettleCtrl.prototype, "lab_look_video", void 0);
      __decorate([ property({
        tooltip: "房间信息",
        type: cc.Label
      }) ], FzmjFinalSettleCtrl.prototype, "lbl_roomInfo", void 0);
      FzmjFinalSettleCtrl = __decorate([ ccclass ], FzmjFinalSettleCtrl);
      return FzmjFinalSettleCtrl;
    }(BaseCtrl_1.default);
    exports.default = FzmjFinalSettleCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../Plat/GameMgrs/LoginMgr": "LoginMgr",
    "../../Plat/GameMgrs/SwitchMgr": "SwitchMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView"
  } ],
  FzmjGambleRecordCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "84f24QvtnlJCpvV1JPkP5Nm", "FzmjGambleRecordCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var UserMgr_1 = require("../../../Plat/GameMgrs/UserMgr");
    var Green = new cc.Color(24, 221, 40), Red = new cc.Color(255, 78, 0), Yellow = new cc.Color(255, 222, 0);
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.leap = 68;
        _this.gameResultData = RoomMgr_1.default.getInstance().getBunchInfo();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_content: null,
          node_yellowBattleResult: null,
          node_yellowLightBattleResult: null,
          btn_close: null,
          node_panel: null,
          lbl_score0s: [],
          lbl_score1s: [],
          lbl_score2s: [],
          lbl_score3s: [],
          lbl_roundindexes: [],
          lbl_times: [],
          lbl_names: {},
          lbl_nameSigns: {}
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        console.log("winlog");
        this.ui.btn_close = ctrl.btn_close;
        this.ui.node_content = ctrl.node_content;
        this.ui.node_yellowBattleResult = ctrl.node_yellowBattleResult;
        this.ui.node_yellowLightBattleResult = ctrl.node_yellowLightBattleResult;
        this.ui.node_panel = ctrl.node_panel;
        if (null == this.model.gameResultData || void 0 == this.model.gameResultData) return;
        var meiju = this.model.gameResultData.meiju;
        if (null == meiju || void 0 == meiju) return;
        var prefabBarArr = [ this.ui.node_yellowBattleResult, this.ui.node_yellowLightBattleResult ];
        meiju.length > 7 && this.ui.node_content.setContentSize(this.ui.node_content.getContentSize().width, this.model.leap * meiju.length);
        for (var i = 0; i < meiju.length; i++) {
          var colorindex = i % 2;
          var prefabBar = prefabBarArr[colorindex];
          var barItem = cc.instantiate(prefabBar);
          barItem.active = true;
          barItem.setPosition(cc.v2(0, (i + 1) * -this.model.leap));
          this.ui.node_content.addChild(barItem);
          this.ui.lbl_roundindexes[i] = barItem.getChildByName("lbl_roundindex").getComponent(cc.Label);
          this.ui.lbl_times[i] = barItem.getChildByName("lbl_time").getComponent(cc.Label);
          this.ui.lbl_score0s[i] = barItem.getChildByName("lbl_score0").getComponent(cc.Label);
          this.ui.lbl_score1s[i] = barItem.getChildByName("lbl_score1").getComponent(cc.Label);
          this.ui.lbl_score2s[i] = barItem.getChildByName("lbl_score2").getComponent(cc.Label);
          this.ui.lbl_score3s[i] = barItem.getChildByName("lbl_score3").getComponent(cc.Label);
        }
        for (var logicseatid = 0; logicseatid < RoomMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
          this.ui.lbl_names[logicseatid] = this.ui.node_panel.getChildByName("lbl_name" + logicseatid).getComponent(cc.Label);
          this.ui.lbl_nameSigns[logicseatid] = this.ui.node_panel.getChildByName("lbl_nameSign" + logicseatid).getComponent(cc.Label);
        }
      };
      View.prototype.showData = function() {
        var meijuData = this.model.gameResultData.meiju;
        if (null != meijuData && void 0 != meijuData) {
          this.showDetailData(meijuData);
          this.showPlayerInfo();
        }
      };
      View.prototype.showDetailData = function(meijuData) {
        for (var i = 0; i < meijuData.length; ++i) {
          var itemData = meijuData[i];
          var myDate = new Date(itemData[0]);
          var curtime = myDate.getHours().toString() + ":" + myDate.getMinutes();
          this.ui.lbl_times[i].string = "(" + curtime + ")";
          this.ui.lbl_roundindexes[i].string = "第" + (i + 1) + "局";
          var lbl_scores = [ this.ui.lbl_score0s[i], this.ui.lbl_score1s[i], this.ui.lbl_score2s[i], this.ui.lbl_score3s[i] ];
          for (var logicseatid = 0; logicseatid < RoomMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
            var dataItem = itemData[1][logicseatid.toString()];
            var hutime = dataItem[0];
            var score = dataItem[1];
            var yikescore = dataItem[2];
            var yikescorestr = "";
            var hutimestr = "";
            var scorestr = "";
            var lbl_score = lbl_scores[logicseatid];
            lbl_score.node.active = true;
            var prefix = "";
            score > 0 && (prefix = "+");
            if (1 == this.model.gameResultData.scoretype) {
              yikescorestr = "" + yikescore;
              scorestr = "(" + prefix + score + ")";
            } else scorestr = "" + prefix + score;
            hutime && (hutimestr = "(" + hutime + ")");
            var wholescore = "" + yikescorestr + scorestr + hutimestr;
            lbl_score.string = wholescore;
            lbl_score.node.color = score >= 0 ? Red : Green;
          }
        }
      };
      View.prototype.showPlayerInfo = function() {
        var viewCalled = [ "(我)", "(下家)", "(对家)", "(上家)" ];
        for (var logicseatid = 0; logicseatid < RoomMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
          var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(logicseatid);
          this.ui.lbl_nameSigns[logicseatid].string = viewCalled[viewSeatId];
          this.ui.lbl_nameSigns[logicseatid].node.active = true;
          var uid = RoomMgr_1.default.getInstance().users[logicseatid];
          if (null == uid || void 0 == uid) continue;
          var user = UserMgr_1.default.getInstance().getUserById(uid);
          this.ui.lbl_names[logicseatid].string = user.nickname;
          this.ui.lbl_names[logicseatid].node.active = true;
        }
      };
      return View;
    }(BaseView_1.default);
    var FzmjGambleRecordCtrl = function(_super) {
      __extends(FzmjGambleRecordCtrl, _super);
      function FzmjGambleRecordCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_content = null;
        _this.node_yellowBattleResult = null;
        _this.node_yellowLightBattleResult = null;
        _this.btn_close = null;
        _this.node_panel = null;
        return _this;
      }
      FzmjGambleRecordCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        null != this.model.gameResultData && void 0 != this.model.gameResultData && this.view.showData();
      };
      FzmjGambleRecordCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onStartGame: this.onStartGame,
          onDissolutionRoom: this.onDissolutionRoom,
          onGameFinished: this.onGameFinished
        };
      };
      FzmjGambleRecordCtrl.prototype.defineGlobalEvents = function() {};
      FzmjGambleRecordCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.btn_close, this.btn_closecb, "点击关闭");
      };
      FzmjGambleRecordCtrl.prototype.start = function() {};
      FzmjGambleRecordCtrl.prototype.onStartGame = function(msg) {
        this.finish();
      };
      FzmjGambleRecordCtrl.prototype.onDissolutionRoom = function(msg) {
        msg.result && this.finish();
      };
      FzmjGambleRecordCtrl.prototype.onGameFinished = function(msg) {
        this.finish();
      };
      FzmjGambleRecordCtrl.prototype.btn_closecb = function() {
        this.finish();
      };
      __decorate([ property({
        tooltip: "滚动视图",
        type: cc.Node
      }) ], FzmjGambleRecordCtrl.prototype, "node_content", void 0);
      __decorate([ property({
        tooltip: "深色战绩记录",
        type: cc.Node
      }) ], FzmjGambleRecordCtrl.prototype, "node_yellowBattleResult", void 0);
      __decorate([ property({
        tooltip: "浅色战绩记录",
        type: cc.Node
      }) ], FzmjGambleRecordCtrl.prototype, "node_yellowLightBattleResult", void 0);
      __decorate([ property({
        tooltip: "关闭按钮",
        type: cc.Node
      }) ], FzmjGambleRecordCtrl.prototype, "btn_close", void 0);
      __decorate([ property({
        tooltip: "panel",
        type: cc.Node
      }) ], FzmjGambleRecordCtrl.prototype, "node_panel", void 0);
      FzmjGambleRecordCtrl = __decorate([ ccclass ], FzmjGambleRecordCtrl);
      return FzmjGambleRecordCtrl;
    }(BaseCtrl_1.default);
    exports.default = FzmjGambleRecordCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/GameMgrs/UserMgr": "UserMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView"
  } ],
  FzmjHaidilaoyueCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "74b4b1uIK5LxIxoKoHz3BmR", "FzmjHaidilaoyueCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var FzmjLogic_1 = require("../FzmjMgr/FzmjLogic");
    var MahjongGeneral_1 = require("../../../GameCommon/Mahjong/MahjongGeneral");
    var MahjongDef_1 = require("../../../GameCommon/Mahjong/MahjongDef");
    var Green = new cc.Color(24, 221, 40), Red = new cc.Color(255, 78, 0), Yellow = new cc.Color(255, 222, 0), White = new cc.Color(255, 255, 255);
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.haidilaoyueInfo = null;
        _this.mahjongResMgr = RoomMgr_1.default.getInstance().getResMgr();
        _this.initData();
        return _this;
      }
      Model.prototype.initData = function() {
        var qzmjLogicInstance = FzmjLogic_1.default.getInstance();
        null != qzmjLogicInstance && (this.haidilaoyueInfo = qzmjLogicInstance.haidilaoyueInfo);
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_haidilaoyue: ctrl.node_haidilaoyue,
          effect_haidilaoyue: null,
          haidilaoyueCards: []
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.effect_haidilaoyue = this.ui.node_haidilaoyue.getChildByName("effect_haidilaoyue");
        this.ui.haidilaoyueCards.push(this.ui.effect_haidilaoyue.getChildByName("card_0"));
        this.ui.haidilaoyueCards.push(this.ui.effect_haidilaoyue.getChildByName("card_1"));
        this.ui.haidilaoyueCards.push(this.ui.effect_haidilaoyue.getChildByName("card_2"));
        this.ui.haidilaoyueCards.push(this.ui.effect_haidilaoyue.getChildByName("card_3"));
        this.model.haidilaoyueInfo && this.showhaidilaoyue();
      };
      View.prototype.showhaidilaoyue = function() {
        this.ui.effect_haidilaoyue.active = true;
        for (var logicseatid = 0; logicseatid < this.model.haidilaoyueInfo.length; logicseatid++) {
          var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(logicseatid);
          var card = this.ui.haidilaoyueCards[viewSeatId];
          var value = this.model.haidilaoyueInfo[logicseatid];
          if (null != value && void 0 != value) {
            var sign = card.getChildByName("sign");
            sign.active = true;
            var frame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(value);
            sign.getComponent(cc.Sprite).spriteFrame = frame;
            card.active = true;
          } else card.active = false;
          var isJoker = MahjongGeneral_1.MahjongGeneral.isJoker(value);
          card.getChildByName("jin").active = isJoker;
          card.getChildByName("majingBg").color = isJoker ? new cc.Color(255, 255, 0) : White;
        }
      };
      return View;
    }(BaseView_1.default);
    var FzmjHaidilaoyueCtrl = function(_super) {
      __extends(FzmjHaidilaoyueCtrl, _super);
      function FzmjHaidilaoyueCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_haidilaoyue = null;
        return _this;
      }
      FzmjHaidilaoyueCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      FzmjHaidilaoyueCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onProcess: this.onProcess,
          "http.reqSettle": this.http_reqSettle
        };
      };
      FzmjHaidilaoyueCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          usersUpdated: this.usersUpdated
        };
      };
      FzmjHaidilaoyueCtrl.prototype.connectUi = function() {};
      FzmjHaidilaoyueCtrl.prototype.start = function() {};
      FzmjHaidilaoyueCtrl.prototype.usersUpdated = function() {
        this.finish();
      };
      FzmjHaidilaoyueCtrl.prototype.onProcess = function(msg) {
        msg.process == MahjongDef_1.MahjongDef.process_ready && this.process_ready();
      };
      FzmjHaidilaoyueCtrl.prototype.http_reqSettle = function() {
        this.finish();
      };
      FzmjHaidilaoyueCtrl.prototype.process_ready = function() {
        this.finish();
      };
      __decorate([ property({
        tooltip: "海底捞月",
        type: cc.Node
      }) ], FzmjHaidilaoyueCtrl.prototype, "node_haidilaoyue", void 0);
      FzmjHaidilaoyueCtrl = __decorate([ ccclass ], FzmjHaidilaoyueCtrl);
      return FzmjHaidilaoyueCtrl;
    }(BaseCtrl_1.default);
    exports.default = FzmjHaidilaoyueCtrl;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Mahjong/MahjongDef": "MahjongDef",
    "../../../GameCommon/Mahjong/MahjongGeneral": "MahjongGeneral",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../FzmjMgr/FzmjLogic": "FzmjLogic"
  } ],
  FzmjLogic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1a89bZmUalIdIjADU1GDRCx", "FzmjLogic");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var FzmjPlayer_1 = require("./FzmjPlayer");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var FzmjProp_1 = require("./FzmjProp");
    var MahjongLogic_1 = require("../../../GameCommon/Mahjong/MahjongLogic");
    var FzmjCards_1 = require("./FzmjCards");
    var MahjongAudio_1 = require("../../../GameCommon/Mahjong/MahjongAudio");
    var FzmjLogic = function(_super) {
      __extends(FzmjLogic, _super);
      function FzmjLogic() {
        return _super.call(this) || this;
      }
      FzmjLogic.getInstance = function() {
        this._instance || (this._instance = new FzmjLogic());
        return this._instance;
      };
      FzmjLogic.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        delete FzmjLogic._instance;
        FzmjLogic._instance = null;
      };
      FzmjLogic.prototype.initMahjong = function() {
        this.mahjongcards = new FzmjCards_1.default(16);
        for (var i = 0; i < this.seatcount; i++) {
          this.players[i] = new FzmjPlayer_1.default();
          this.players[i].init(i, this);
        }
        MahjongAudio_1.default.getInstance().initPlayers(this.players);
        var cfg = RoomMgr_1.default.getInstance().getFangKaCfg();
        this.prop = new FzmjProp_1.default(cfg);
        this.prop.get_b_daihuapai() || this.mahjongcards.removeHua();
      };
      return FzmjLogic;
    }(MahjongLogic_1.default);
    exports.default = FzmjLogic;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Mahjong/MahjongAudio": "MahjongAudio",
    "../../../GameCommon/Mahjong/MahjongLogic": "MahjongLogic",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "./FzmjCards": "FzmjCards",
    "./FzmjPlayer": "FzmjPlayer",
    "./FzmjProp": "FzmjProp"
  } ],
  FzmjPlayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4324dKpqm9Pl5l3Vldl/Pxm", "FzmjPlayer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MahjongPlayer_1 = require("../../../GameCommon/Mahjong/MahjongPlayer");
    var MahjongGeneral_1 = require("../../../GameCommon/Mahjong/MahjongGeneral");
    var MahjongDef_1 = require("../../../GameCommon/Mahjong/MahjongDef");
    var FzmjPlayer = function(_super) {
      __extends(FzmjPlayer, _super);
      function FzmjPlayer() {
        return _super.call(this) || this;
      }
      FzmjPlayer.prototype.checkJinXianZhi = function(event) {
        return false;
      };
      FzmjPlayer.prototype.outcardLimited = function(standcard) {
        return MahjongGeneral_1.MahjongGeneral.isJoker(standcard);
      };
      FzmjPlayer.prototype.getTingDic = function(handcard, players, mySeatId) {
        this.tingtypedic = {};
        var myself = players[mySeatId];
        var maxTingType = -1;
        for (var i = 0; i < handcard.length; i++) {
          var tmpCards = handcard.concat();
          tmpCards.remove(i);
          var isXianJin = this.checkXianJin(tmpCards);
          var card = handcard[i];
          tmpCards.sort();
          var tingarr = this.getTingArr(tmpCards);
          var tingcards = Object.keys(tingarr);
          var tingtype = -1;
          var tingTotalNums = 0;
          if (tingcards.length > 0) {
            tingtype = 0;
            tingtype > maxTingType && (maxTingType = tingtype);
          }
          var keys = [];
          for (var n = 0; n < tingcards.length; ) {
            var key = tingcards[n];
            var cardTotalNum = MahjongGeneral_1.MahjongGeneral.isJoker(parseInt(key)) ? 3 : 4;
            var checkxianjintmpCards = tmpCards.concat();
            checkxianjintmpCards.push(parseInt(key));
            checkxianjintmpCards.sort();
            checkxianjintmpCards = [];
            n++;
            var leftCardNum = cardTotalNum - myself.getLeftHandCountByValue(parseInt(key)) - myself.getLeftOpCardsCountByValue(parseInt(key)) - myself.getLeftcardpoolCountByValue(parseInt(key));
            for (var m in players) {
              var player = players[m];
              parseInt(m) != mySeatId && (leftCardNum = leftCardNum - player.getLeftOpCardsCountByValue(parseInt(key)) - player.getLeftcardpoolCountByValue(parseInt(key)));
            }
            tingTotalNums += leftCardNum;
          }
          tmpCards = [];
          this.tingtypedic[card] = {
            type: tingtype,
            cards: 0 == keys.length ? tingcards : keys,
            tingNums: tingTotalNums
          };
        }
        for (var i = 0; i < handcard.length; i++) {
          var card = handcard[i];
          this.tingtypedic[card].type < maxTingType && (this.tingtypedic[card] = {});
          if (0 != keys.length) {
            var tingTotalNums = 0;
            for (var j = 0; j < keys.length; j++) {
              var key = keys[j];
              var cardTotalNum = MahjongGeneral_1.MahjongGeneral.isJoker(parseInt(key)) ? 3 : 4;
              var leftCardNum = cardTotalNum - myself.getLeftHandCountByValue(parseInt(key)) - myself.getLeftOpCardsCountByValue(parseInt(key)) - myself.getLeftcardpoolCountByValue(parseInt(key));
              for (var m = 0; m < players.length; m++) {
                var player = players[m];
                m != mySeatId && (leftCardNum = leftCardNum - player.getLeftOpCardsCountByValue(parseInt(key)) - player.getLeftcardpoolCountByValue(parseInt(key)));
              }
              tingTotalNums += leftCardNum;
            }
            this.tingtypedic[card].cards = keys;
            this.tingtypedic[card].tingNums = tingTotalNums;
          }
        }
        return this.tingtypedic;
      };
      FzmjPlayer.prototype.getyise = function() {
        var yise = null;
        if (this.logic.prop.get_b_qinghunyise()) {
          if (this.opcards.length > 0) {
            var value = this.getOpCardByIndex(0);
            yise = MahjongGeneral_1.MahjongGeneral.Majiang_Type(value);
          }
          for (var index = 1; index < this.opcards.length; index++) {
            var value = this.getOpCardByIndex(index);
            var se = MahjongGeneral_1.MahjongGeneral.Majiang_Type(value);
            if (se != yise) {
              yise = -1;
              break;
            }
          }
        } else yise = -1;
        return yise;
      };
      FzmjPlayer.prototype.getHuType = function() {
        var hutype = null;
        var pai = this.handcard.concat();
        for (var eventIdx = this.events.length - 1; eventIdx >= 0; eventIdx--) if (this.events[eventIdx] == MahjongDef_1.MahjongDef.op_chi || this.events[eventIdx] == MahjongDef_1.MahjongDef.op_peng || this.events[eventIdx] == MahjongDef_1.MahjongDef.op_bugang || this.events[eventIdx] == MahjongDef_1.MahjongDef.op_gang) {
          pai.push(this.logic.curcard);
          break;
        }
        pai.sort();
        var yise = this.getyise();
        var huinfo = this.mahjongcards.IsHu(pai, yise);
        if (!huinfo) return null;
        return huinfo.hutype;
      };
      return FzmjPlayer;
    }(MahjongPlayer_1.default);
    exports.default = FzmjPlayer;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Mahjong/MahjongDef": "MahjongDef",
    "../../../GameCommon/Mahjong/MahjongGeneral": "MahjongGeneral",
    "../../../GameCommon/Mahjong/MahjongPlayer": "MahjongPlayer"
  } ],
  FzmjProp: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "50bf3Aa0btBHbWp2253lwsN", "FzmjProp");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var FzmjProp = function() {
      function FzmjProp(customcfg) {
        this.customcfg = null;
        this.defaultcfg = {
          v_difen: 1,
          v_huapai: 1,
          v_huagang: 6,
          v_jinpai: 1,
          v_ptangang: 3,
          v_ptminggang: 2,
          v_zhuangdifen: 1,
          t_chihu: 1,
          t_zimo: 2,
          v_tianhu: 30,
          v_qiangjin: 30,
          v_wuhuawugang: 30,
          v_yizhanghua: 15,
          v_sanjindao: 40,
          v_jinque: 60,
          v_jinlong: 120,
          v_hunyise: 120,
          v_qingyise: 240,
          v_roundcount: 8,
          v_seatcount: 4,
          v_paytype: 2,
          v_fangfu: 2,
          v_fangfei: 99,
          b_qinghunyise: 1,
          b_daihuapai: 1,
          b_jinlong: 1
        };
        this.customcfg = customcfg;
      }
      FzmjProp.prototype.get_v_difen = function() {
        if (null != this.customcfg["v_difen"]) return this.customcfg["v_difen"];
        return this.defaultcfg["v_difen"];
      };
      FzmjProp.prototype.get_v_huapai = function() {
        if (null != this.customcfg["v_huapai"]) return this.customcfg["v_huapai"];
        return this.defaultcfg["v_huapai"];
      };
      FzmjProp.prototype.get_v_huagang = function() {
        if (null != this.customcfg["v_huagang"]) return this.customcfg["v_huagang"];
        return this.defaultcfg["v_huagang"];
      };
      FzmjProp.prototype.get_v_jinpai = function() {
        if (null != this.customcfg["v_jinpai"]) return this.customcfg["v_jinpai"];
        return this.defaultcfg["v_jinpai"];
      };
      FzmjProp.prototype.get_v_ptangang = function() {
        if (null != this.customcfg["v_ptangang"]) return this.customcfg["v_ptangang"];
        return this.defaultcfg["v_ptangang"];
      };
      FzmjProp.prototype.get_v_ptminggang = function() {
        if (null != this.customcfg["v_ptminggang"]) return this.customcfg["v_ptminggang"];
        return this.defaultcfg["v_ptminggang"];
      };
      FzmjProp.prototype.get_v_zhuangdifen = function() {
        if (null != this.customcfg["v_zhuangdifen"]) return this.customcfg["v_zhuangdifen"];
        return this.defaultcfg["v_zhuangdifen"];
      };
      FzmjProp.prototype.get_t_chihu = function() {
        if (null != this.customcfg["t_chihu"]) return this.customcfg["t_chihu"];
        return this.defaultcfg["t_chihu"];
      };
      FzmjProp.prototype.get_t_zimo = function() {
        if (null != this.customcfg["t_zimo"]) return this.customcfg["t_zimo"];
        return this.defaultcfg["t_zimo"];
      };
      FzmjProp.prototype.get_v_tianhu = function() {
        if (null != this.customcfg["v_tianhu"]) return this.customcfg["v_tianhu"];
        return this.defaultcfg["v_tianhu"];
      };
      FzmjProp.prototype.get_v_qiangjin = function() {
        if (null != this.customcfg["v_qiangjin"]) return this.customcfg["v_qiangjin"];
        return this.defaultcfg["v_qiangjin"];
      };
      FzmjProp.prototype.get_v_wuhuawugang = function() {
        if (null != this.customcfg["v_wuhuawugang"]) return this.customcfg["v_wuhuawugang"];
        return this.defaultcfg["v_wuhuawugang"];
      };
      FzmjProp.prototype.get_v_yizhanghua = function() {
        if (null != this.customcfg["v_yizhanghua"]) return this.customcfg["v_yizhanghua"];
        return this.defaultcfg["v_yizhanghua"];
      };
      FzmjProp.prototype.get_v_sanjindao = function() {
        if (null != this.customcfg["v_sanjindao"]) return this.customcfg["v_sanjindao"];
        return this.defaultcfg["v_sanjindao"];
      };
      FzmjProp.prototype.get_v_jinque = function() {
        if (null != this.customcfg["v_jinque"]) return this.customcfg["v_jinque"];
        return this.defaultcfg["v_jinque"];
      };
      FzmjProp.prototype.get_v_jinlong = function() {
        if (null != this.customcfg["v_jinlong"]) return this.customcfg["v_jinlong"];
        return this.defaultcfg["v_jinlong"];
      };
      FzmjProp.prototype.get_v_hunyise = function() {
        if (null != this.customcfg["v_hunyise"]) return this.customcfg["v_hunyise"];
        return this.defaultcfg["v_hunyise"];
      };
      FzmjProp.prototype.get_v_qingyise = function() {
        if (null != this.customcfg["v_qingyise"]) return this.customcfg["v_qingyise"];
        return this.defaultcfg["v_qingyise"];
      };
      FzmjProp.prototype.get_v_roundcount = function() {
        if (null != this.customcfg["v_roundcount"]) return this.customcfg["v_roundcount"];
        return this.defaultcfg["v_roundcount"];
      };
      FzmjProp.prototype.get_v_seatcount = function() {
        if (null != this.customcfg["v_seatcount"]) return this.customcfg["v_seatcount"];
        return this.defaultcfg["v_seatcount"];
      };
      FzmjProp.prototype.get_v_paytype = function() {
        if (null != this.customcfg["v_paytype"]) return this.customcfg["v_paytype"];
        return this.defaultcfg["v_paytype"];
      };
      FzmjProp.prototype.get_v_fangfu = function() {
        if (null != this.customcfg["v_fangfu"]) return this.customcfg["v_fangfu"];
        return this.defaultcfg["v_fangfu"];
      };
      FzmjProp.prototype.get_v_fangfei = function() {
        if (null != this.customcfg["v_fangfei"]) return this.customcfg["v_fangfei"];
        return this.defaultcfg["v_fangfei"];
      };
      FzmjProp.prototype.get_b_qinghunyise = function() {
        if (null != this.customcfg["b_qinghunyise"]) return this.customcfg["b_qinghunyise"];
        return this.defaultcfg["b_qinghunyise"];
      };
      FzmjProp.prototype.get_b_daihuapai = function() {
        if (null != this.customcfg["b_daihuapai"]) return this.customcfg["b_daihuapai"];
        return this.defaultcfg["b_daihuapai"];
      };
      FzmjProp.prototype.get_b_jinlong = function() {
        if (null != this.customcfg["b_jinlong"]) return this.customcfg["b_jinlong"];
        return this.defaultcfg["b_jinlong"];
      };
      return FzmjProp;
    }();
    exports.default = FzmjProp;
    cc._RF.pop();
  }, {} ],
  FzmjRoomCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "17a80nffBxOcL6w+977xLuD", "FzmjRoomCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var FzmjLogic_1 = require("../FzmjMgr/FzmjLogic");
    var MahjongResMgr_1 = require("../../../GameCommon/Mahjong/MahjongResMgr");
    var MahjongDef_1 = require("../../../GameCommon/Mahjong/MahjongDef");
    var MahjongAudio_1 = require("../../../GameCommon/Mahjong/MahjongAudio");
    var FzmjCards_1 = require("../FzmjMgr/FzmjCards");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          mahjongRoom: null
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.showComponents = function() {
        this.ui.mahjongRoom = cc.instantiate(ctrl.MahjongRoom);
        this.node.addChild(this.ui.mahjongRoom);
      };
      View.prototype.initUi = function() {};
      return View;
    }(BaseView_1.default);
    var FzmjRoomCtrl = function(_super) {
      __extends(FzmjRoomCtrl, _super);
      function FzmjRoomCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.MahjongRoom = null;
        return _this;
      }
      FzmjRoomCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        RoomMgr_1.default.getInstance().setGameLibs(MahjongDef_1.MahjongDef, MahjongResMgr_1.default, FzmjLogic_1.default, MahjongAudio_1.default, FzmjCards_1.default);
        this.view.showComponents();
      };
      FzmjRoomCtrl.prototype.defineNetEvents = function() {};
      FzmjRoomCtrl.prototype.defineGlobalEvents = function() {};
      FzmjRoomCtrl.prototype.connectUi = function() {};
      FzmjRoomCtrl.prototype.start = function() {
        this.isIPhoneX() && this.resetDesignResolution(this.node.getComponent(cc.Canvas));
      };
      __decorate([ property(cc.Prefab) ], FzmjRoomCtrl.prototype, "MahjongRoom", void 0);
      FzmjRoomCtrl = __decorate([ ccclass ], FzmjRoomCtrl);
      return FzmjRoomCtrl;
    }(BaseCtrl_1.default);
    exports.default = FzmjRoomCtrl;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Mahjong/MahjongAudio": "MahjongAudio",
    "../../../GameCommon/Mahjong/MahjongDef": "MahjongDef",
    "../../../GameCommon/Mahjong/MahjongResMgr": "MahjongResMgr",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../FzmjMgr/FzmjCards": "FzmjCards",
    "../FzmjMgr/FzmjLogic": "FzmjLogic"
  } ],
  FzmjRoundsSettleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "061c1acbuRHto2o5/r0Xb+M", "FzmjRoundsSettleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var GameCateCfg_1 = require("../../Plat/CfgMgrs/GameCateCfg");
    var BunchInfoMgr_1 = require("../../Plat/GameMgrs/BunchInfoMgr");
    var viewLogicSeatConvertMgr_1 = require("../../Plat/GameMgrs/viewLogicSeatConvertMgr");
    var RecordMgr_1 = require("../../Plat/GameMgrs/RecordMgr");
    var Green = new cc.Color(1, 146, 7), Red = new cc.Color(255, 36, 0), Yellow = new cc.Color(255, 222, 0);
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.gameResultData = null;
        _this.leap = 90;
        return _this;
      }
      Model.prototype.setgameResultData = function(data) {
        this.gameResultData = null == data ? RoomMgr_1.default.getInstance().getBunchInfo() : data;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_ztj: null,
          btn_mjjf: null,
          btn_share: null,
          btn_exit: null,
          node_content: null,
          node_yellowBattleResult: null,
          node_yellowLightBattleResult: null,
          btn_close: null,
          node_panel: null,
          lbl_score0s: [],
          lbl_score1s: [],
          lbl_score2s: [],
          lbl_score3s: [],
          lbl_roundindexes: [],
          lbl_times: [],
          totalScores: {},
          lbl_names: {},
          lbl_nameSigns: {},
          waterMarkForWins: {},
          waterMarkForLosts: {},
          node_waterMark: null,
          lbl_totalScores: []
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_content = ctrl.node_content;
        this.ui.node_yellowBattleResult = ctrl.node_yellowBattleResult;
        this.ui.node_yellowLightBattleResult = ctrl.node_yellowLightBattleResult;
        this.ui.node_panel = ctrl.node_panel;
        this.ui.node_waterMark = ctrl.node_waterMark;
      };
      View.prototype.initUIwithData = function() {
        var meiju = this.model.gameResultData.meiju;
        var prefabBarArr = [ this.ui.node_yellowBattleResult, this.ui.node_yellowLightBattleResult ];
        meiju.length > 3 && this.ui.node_content.setContentSize(this.ui.node_content.getContentSize().width, this.model.leap * meiju.length);
        this.model.itemData = [];
        for (var i = 0; i < meiju.length; i++) {
          var colorindex = i % 2;
          var itemData = meiju[i];
          var prefabBar = prefabBarArr[colorindex];
          var barItem = cc.instantiate(prefabBar);
          this.model.itemData.push(itemData[2]);
          barItem.active = true;
          barItem.setPosition(cc.v2(0, (i + 1) * -this.model.leap));
          this.ui.node_content.addChild(barItem);
          this.ui.lbl_roundindexes[i] = barItem.getChildByName("lbl_roundindex").getComponent(cc.Label);
          this.ui.lbl_times[i] = barItem.getChildByName("lbl_time").getComponent(cc.Label);
          this.ui.lbl_score0s[i] = barItem.getChildByName("lbl_score0").getComponent(cc.Label);
          this.ui.lbl_score1s[i] = barItem.getChildByName("lbl_score1").getComponent(cc.Label);
          this.ui.lbl_score2s[i] = barItem.getChildByName("lbl_score2").getComponent(cc.Label);
          this.ui.lbl_score3s[i] = barItem.getChildByName("lbl_score3").getComponent(cc.Label);
        }
        for (var logicseatid = 0; logicseatid < BunchInfoMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
          this.ui.totalScores[logicseatid] = this.ui.node_panel.getChildByName("lbl_totalScore" + logicseatid).getComponent(cc.Label);
          this.ui.lbl_names[logicseatid] = this.ui.node_panel.getChildByName("lbl_name" + logicseatid).getComponent(cc.Label);
          this.ui.lbl_nameSigns[logicseatid] = this.ui.node_panel.getChildByName("lbl_nameSign" + logicseatid).getComponent(cc.Label);
          this.ui.waterMarkForWins[logicseatid] = this.ui.node_waterMark.getChildByName("user" + logicseatid).getChildByName("zjs_seal_win");
          this.ui.waterMarkForLosts[logicseatid] = this.ui.node_waterMark.getChildByName("user" + logicseatid).getChildByName("zjs_seal_loser");
          this.ui.lbl_totalScores[logicseatid] = this.ui.node_panel.getChildByName("lbl_totalScore" + logicseatid).getComponent(cc.Label);
        }
      };
      View.prototype.showData = function() {
        this.initUIwithData();
        var meijuData = this.model.gameResultData.meiju;
        if (null != meijuData && void 0 != meijuData) {
          this.showDetailData(meijuData);
          this.showPlayerInfo();
        }
      };
      View.prototype.showDetailData = function(meijuData) {
        for (var i = 0; i < meijuData.length; ++i) {
          var itemData = meijuData[i];
          var myDate = new Date(itemData[0]);
          var curtime = myDate.getHours().toString() + ":" + myDate.getMinutes();
          this.ui.lbl_times[i].string = "(" + curtime + ")";
          this.ui.lbl_roundindexes[i].string = "第" + (i + 1) + "局";
          var lbl_scores = [ this.ui.lbl_score0s[i], this.ui.lbl_score1s[i], this.ui.lbl_score2s[i], this.ui.lbl_score3s[i] ];
          for (var logicseatid = 0; logicseatid < BunchInfoMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
            var dataItem = itemData[1][logicseatid.toString()];
            var hutime = dataItem[0];
            var score = dataItem[1];
            var yikescore = dataItem[2];
            var yikescorestr = "";
            var hutimestr = "";
            var scorestr = "";
            var lbl_score = lbl_scores[logicseatid];
            lbl_score.node.active = true;
            var prefix = "";
            score > 0 && (prefix = "+");
            if (1 == this.model.gameResultData.scoretype) {
              yikescorestr = "" + yikescore;
              scorestr = "(" + prefix + score + ")";
            } else scorestr = "" + prefix + score;
            hutimestr = hutime && hutime.length > 0 ? "(" + hutime + ")" : "";
            var wholescore = "" + yikescorestr + scorestr + hutimestr;
            lbl_score.string = wholescore;
            lbl_score.node.color = score >= 0 ? Red : Green;
          }
        }
      };
      View.prototype.showPlayerInfo = function() {
        var leijiData = this.model.gameResultData.leiji;
        var viewCalled = [ "(我)", "(下家)", "(对家)", "(上家)" ];
        for (var logicseatid = 0; logicseatid < BunchInfoMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
          var viewSeatId = viewLogicSeatConvertMgr_1.default.getInstance().getViewSeatId(logicseatid);
          var users = BunchInfoMgr_1.default.getInstance().getMembelist();
          if (null == users) return;
          this.ui.lbl_nameSigns[logicseatid].string = viewCalled[viewSeatId];
          this.ui.lbl_nameSigns[logicseatid].node.active = true;
          this.ui.lbl_names[logicseatid].string = users[logicseatid].nickname;
          this.ui.lbl_names[logicseatid].node.active = true;
          if (1 == leijiData[logicseatid].title) {
            this.ui.waterMarkForWins[logicseatid].active = true;
            this.ui.waterMarkForLosts[logicseatid].active = false;
          } else if (2 == leijiData[logicseatid].title) {
            this.ui.waterMarkForWins[logicseatid].active = false;
            this.ui.waterMarkForLosts[logicseatid].active = true;
          }
          this.ui.lbl_totalScores[logicseatid].string = leijiData[logicseatid].zongshuying;
          this.ui.lbl_totalScores[logicseatid].node.active = true;
          leijiData[logicseatid].zongshuying >= 0 ? this.ui.lbl_totalScores[logicseatid].node.color = Red : this.ui.lbl_totalScores[logicseatid].node.color = Green;
        }
      };
      return View;
    }(BaseView_1.default);
    var FzmjRoundsSettleCtrl = function(_super) {
      __extends(FzmjRoundsSettleCtrl, _super);
      function FzmjRoundsSettleCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_content = null;
        _this.node_yellowBattleResult = null;
        _this.node_yellowLightBattleResult = null;
        _this.node_panel = null;
        _this.node_waterMark = null;
        return _this;
      }
      FzmjRoundsSettleCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        var resultData = BunchInfoMgr_1.default.getInstance().getBunchInfo();
        console.log(resultData);
        this.showView(resultData);
      };
      FzmjRoundsSettleCtrl.prototype.defineNetEvents = function() {};
      FzmjRoundsSettleCtrl.prototype.defineGlobalEvents = function() {};
      FzmjRoundsSettleCtrl.prototype.connectUi = function() {};
      FzmjRoundsSettleCtrl.prototype.start = function() {};
      FzmjRoundsSettleCtrl.prototype.bindUi = function() {
        var barList = this.ui.node_content.children;
        var self = this;
        var game = GameCateCfg_1.default.getInstance().getGameById(BunchInfoMgr_1.default.getInstance().getGameId());
        var _loop_1 = function(i) {
          barList[i].on(cc.Node.EventType.TOUCH_END, function(event) {
            RecordMgr_1.default.getInstance().reqMatchRecord(game, self.model.itemData[i]);
          }, this_1);
        };
        var this_1 = this;
        for (var i = 0; i < barList.length; i++) _loop_1(i);
      };
      FzmjRoundsSettleCtrl.prototype.showView = function(data) {
        this.model.setgameResultData(data);
        this.view.showData();
        BunchInfoMgr_1.default.getInstance().getplazzaFlag() && this.bindUi();
      };
      __decorate([ property({
        tooltip: "滚动视图",
        type: cc.Node
      }) ], FzmjRoundsSettleCtrl.prototype, "node_content", void 0);
      __decorate([ property({
        tooltip: "深色战绩记录",
        type: cc.Node
      }) ], FzmjRoundsSettleCtrl.prototype, "node_yellowBattleResult", void 0);
      __decorate([ property({
        tooltip: "浅色战绩记录",
        type: cc.Node
      }) ], FzmjRoundsSettleCtrl.prototype, "node_yellowLightBattleResult", void 0);
      __decorate([ property({
        tooltip: "panel",
        type: cc.Node
      }) ], FzmjRoundsSettleCtrl.prototype, "node_panel", void 0);
      __decorate([ property({
        tooltip: "waterMark",
        type: cc.Node
      }) ], FzmjRoundsSettleCtrl.prototype, "node_waterMark", void 0);
      FzmjRoundsSettleCtrl = __decorate([ ccclass ], FzmjRoundsSettleCtrl);
      return FzmjRoundsSettleCtrl;
    }(BaseCtrl_1.default);
    exports.default = FzmjRoundsSettleCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/CfgMgrs/GameCateCfg": "GameCateCfg",
    "../../Plat/GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../Plat/GameMgrs/RecordMgr": "RecordMgr",
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/GameMgrs/viewLogicSeatConvertMgr": "viewLogicSeatConvertMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView"
  } ],
  FzmjSettleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4bc1cDk0DZNB4CNPODW4gpx", "FzmjSettleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var FzmjLogic_1 = require("../FzmjMgr/FzmjLogic");
    var Gfun_1 = require("../../../Plat/Libs/Gfun");
    var UserMgr_1 = require("../../../Plat/GameMgrs/UserMgr");
    var SwitchMgr_1 = require("../../../Plat/GameMgrs/SwitchMgr");
    var MahjongDef_1 = require("../../../GameCommon/Mahjong/MahjongDef");
    var MahjongResMgr_1 = require("../../../GameCommon/Mahjong/MahjongResMgr");
    var Green = new cc.Color(24, 221, 40), Red = new cc.Color(255, 0, 0), Yellow = new cc.Color(255, 222, 0), Blue = new cc.Color(4, 152, 177);
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.playerSettleInfos = null;
        _this.win_seatid = 0;
        _this.seatcount = 0;
        _this.b_drawGame = false;
        _this.sharingSwitch = null;
        _this.bViewAgain = false;
        _this.curcard = null;
        _this.opcardarr = null;
        _this.handcards = null;
        _this.mahjongCards = null;
        _this.initData();
        _this.sharingSwitch = SwitchMgr_1.default.getInstance().get_switch_settlement_sharing();
        return _this;
      }
      Model.prototype.initData = function() {
        var fzmjLogicInstance = FzmjLogic_1.default.getInstance();
        if (null != fzmjLogicInstance) {
          this.win_seatid = fzmjLogicInstance.win_seatid;
          null == this.win_seatid && (this.b_drawGame = true);
          this.playerSettleInfos = fzmjLogicInstance.roundSettle.wanjiashuis;
          console.log("玩家信息：", this.playerSettleInfos);
          this.seatcount = fzmjLogicInstance.seatcount;
          this.curcard = fzmjLogicInstance.curcard;
          this.opcardarr = fzmjLogicInstance.roundSettle.opcards;
          this.handcards = Gfun_1.g_deepClone(fzmjLogicInstance.roundSettle.handcards);
          this.mahjongCards = fzmjLogicInstance.mahjongcards;
        }
      };
      Model.prototype.setAsViewAgain = function() {
        this.bViewAgain = true;
      };
      Model.prototype.updateSwitch = function(msg) {
        this.sharingSwitch = msg.cfg.switch_settlement_sharing;
      };
      Model.prototype.getHuType = function(handcard) {
        var pai = handcard.concat();
        pai.sort();
        var huinfo = this.mahjongCards.IsHu(pai);
        if (!huinfo) return null;
        return huinfo.hutype;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_drawgame: ctrl.node_drawgame,
          img_liuju: null,
          btn_share: null,
          btn_again: null,
          node_userList: null,
          clippingNode: null,
          lbl_js: null,
          lbl_hide: null,
          settletip: null,
          nodePlayer1Cards: null,
          nodePlayer2Cards: null,
          nodePlayer3Cards: null,
          nodePlayer4Cards: null,
          nodePlayer1head: null,
          nodePlayer2head: null,
          nodePlayer3head: null,
          nodePlayer4head: null,
          imgBanker: null,
          fanInfos: [],
          difans: [],
          playerNames: [],
          totalpanvalues: [],
          txtScores: [],
          lbl_winTimes: null,
          sprite_huType: null,
          node_bg: null,
          node_hutype: null,
          button_close: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.nodePlayer1Cards = ctrl.nodePlayer1Cards;
        this.ui.nodePlayer2Cards = ctrl.nodePlayer2Cards;
        this.ui.nodePlayer3Cards = ctrl.nodePlayer3Cards;
        this.ui.nodePlayer4Cards = ctrl.nodePlayer4Cards;
        this.ui.nodePlayer1head = ctrl.nodePlayer1head;
        this.ui.nodePlayer2head = ctrl.nodePlayer2head;
        this.ui.nodePlayer3head = ctrl.nodePlayer3head;
        this.ui.nodePlayer4head = ctrl.nodePlayer4head;
        this.ui.lbl_winTimes = ctrl.lbl_winTimes;
        this.ui.sprite_huType = ctrl.sprite_huType;
        this.ui.node_hutype = ctrl.node_hutype;
        this.ui.node_bg = ctrl.node_bg;
        this.ui.btn_share = ctrl.btn_share;
        this.ui.btn_again = ctrl.btn_again;
        this.ui.button_close = ctrl.button_close;
        if (FzmjLogic_1.default.getInstance().bViewMode) {
          this.ui.button_close.active = true;
          this.ui.btn_again.active = false;
        }
        this.ui.node_userList = [];
        this.ui.node_userList.push(ctrl.nodePlayer1Cards);
        this.ui.node_userList.push(ctrl.nodePlayer2Cards);
        this.ui.node_userList.push(ctrl.nodePlayer3Cards);
        this.ui.node_userList.push(ctrl.nodePlayer4Cards);
        this.ui.totalpanvalues.push(ctrl.nodePlayer1Cards.getChildByName("totalpan_value").getComponent(cc.Label));
        this.ui.totalpanvalues.push(ctrl.nodePlayer2Cards.getChildByName("totalpan_value").getComponent(cc.Label));
        this.ui.totalpanvalues.push(ctrl.nodePlayer3Cards.getChildByName("totalpan_value").getComponent(cc.Label));
        this.ui.totalpanvalues.push(ctrl.nodePlayer4Cards.getChildByName("totalpan_value").getComponent(cc.Label));
        this.ui.txtScores.push(ctrl.nodePlayer1Cards.getChildByName("txt_score").getComponent(cc.Label));
        this.ui.txtScores.push(ctrl.nodePlayer2Cards.getChildByName("txt_score").getComponent(cc.Label));
        this.ui.txtScores.push(ctrl.nodePlayer3Cards.getChildByName("txt_score").getComponent(cc.Label));
        this.ui.txtScores.push(ctrl.nodePlayer4Cards.getChildByName("txt_score").getComponent(cc.Label));
        this.ui.fanInfos.push(ctrl.nodePlayer1Cards.getChildByName("fanInfo").getComponent(cc.Label));
        this.ui.fanInfos.push(ctrl.nodePlayer2Cards.getChildByName("fanInfo").getComponent(cc.Label));
        this.ui.fanInfos.push(ctrl.nodePlayer3Cards.getChildByName("fanInfo").getComponent(cc.Label));
        this.ui.fanInfos.push(ctrl.nodePlayer4Cards.getChildByName("fanInfo").getComponent(cc.Label));
        this.ui.difans.push(ctrl.nodePlayer1head.getChildByName("difan").getComponent(cc.Label));
        this.ui.difans.push(ctrl.nodePlayer2head.getChildByName("difan").getComponent(cc.Label));
        this.ui.difans.push(ctrl.nodePlayer3head.getChildByName("difan").getComponent(cc.Label));
        this.ui.difans.push(ctrl.nodePlayer4head.getChildByName("difan").getComponent(cc.Label));
        this.ui.playerNames.push(ctrl.nodePlayer1head.getChildByName("txt_name").getComponent(cc.Label));
        this.ui.playerNames.push(ctrl.nodePlayer2head.getChildByName("txt_name").getComponent(cc.Label));
        this.ui.playerNames.push(ctrl.nodePlayer3head.getChildByName("txt_name").getComponent(cc.Label));
        this.ui.playerNames.push(ctrl.nodePlayer4head.getChildByName("txt_name").getComponent(cc.Label));
        this.ui.imgBanker = ctrl.imgBanker;
        this.ui.lbl_hide = ctrl.lbl_hide;
        this.ui.lbl_hide.node.active = false;
        this.ui.clippingNode = this.node.getChildByName("backgroudClickNode");
        this.ui.settletip = this.node.getChildByName("settletip");
        this.ui.clippingNode.active = !RoomMgr_1.default.getInstance().getVideoMode();
        this.ui.settletip.active = false;
        this.ui.node_drawgame.active = this.model.b_drawGame;
        this.ui.img_liuju = this.ui.node_drawgame.getChildByName("img_liuju").getComponent(cc.Animation);
        if (this.model.b_drawGame) {
          this.ui.img_liuju.play();
          ctrl.nodePlayer1Cards.active = false;
          ctrl.nodePlayer2Cards.active = false;
          ctrl.nodePlayer3Cards.active = false;
          ctrl.nodePlayer4Cards.active = false;
          ctrl.nodePlayer1head.active = false;
          ctrl.nodePlayer2head.active = false;
          ctrl.nodePlayer3head.active = false;
          ctrl.nodePlayer4head.active = false;
          ctrl.node_bg.active = false;
          ctrl.imgBanker.node.active = false;
          ctrl.node_hutype.active = false;
          return;
        }
        this.showUserInfo();
        this.showShareBtn();
      };
      View.prototype.updateTipLabel = function() {};
      View.prototype.showUserInfo = function() {
        for (var logicseatid in this.model.playerSettleInfos) {
          var uid = RoomMgr_1.default.getInstance().getUidBySeatId(logicseatid);
          var info = UserMgr_1.default.getInstance().getUserById(uid);
          info || (info = {
            id: uid,
            headid: 1,
            nickname: ""
          });
          this.ui.playerNames[logicseatid].string = info.nickname;
          this.showfan(logicseatid);
          this.showHandCards(logicseatid);
          this.showTotalloseWin(parseInt(logicseatid));
        }
      };
      View.prototype.showfan = function(logicseatid) {
        var playerSettleInfo = this.model.playerSettleInfos[logicseatid.toString()];
        var shui = "";
        if (playerSettleInfo.zhuangflag) {
          var userNode_1 = this.ui.node_userList[logicseatid];
          cc.loader.loadRes("GameCommon/Mahjong/Textures/settle/greenRect", cc.SpriteFrame, function(err, spriteFrame) {
            if (err) {
              cc.error(err.message || err);
              return;
            }
            userNode_1.getComponent(cc.Sprite).spriteFrame = spriteFrame;
          });
          var zhuangPos = this.ui.imgBanker.node.getPosition();
          this.ui.imgBanker.node.setPositionY(zhuangPos.y - 130 * logicseatid);
          1 == playerSettleInfo.winflag && playerSettleInfo.lianzhuang > 0 && (shui = "连庄" + Math.pow(2, playerSettleInfo.lianzhuang) + " ");
        }
        shui = shui + "花 " + playerSettleInfo.huafen + " 分  杠 " + playerSettleInfo.gangfen + " 分  金 " + playerSettleInfo.jinfen + " 分  ";
        MahjongDef_1.MahjongDef.hutypenames[playerSettleInfo.specialhutype] && (shui = shui + MahjongDef_1.MahjongDef.hutypenames[playerSettleInfo.specialhutype] + " " + playerSettleInfo.specialfen + " 分");
        this.ui.fanInfos[logicseatid].node.active = true;
        this.ui.fanInfos[logicseatid].string = shui;
        this.ui.fanInfos[logicseatid].string || (this.ui.fanInfos[logicseatid].string = "无");
        this.ui.difans[logicseatid].node.active = true;
        this.ui.difans[logicseatid].string = playerSettleInfo.difan + "底";
      };
      View.prototype.showTotalloseWin = function(logicseatid) {
        var playerSettleInfo = this.model.playerSettleInfos[logicseatid.toString()];
        var score = 0;
        this.ui.txtScores[logicseatid].node.active = true;
        this.ui.totalpanvalues[logicseatid].node.active = true;
        if (playerSettleInfo.shuyingfenshu > 0) {
          score = "+" + playerSettleInfo.shuyingfenshu;
          this.ui.txtScores[logicseatid].node.color = Red;
        } else {
          score = playerSettleInfo.shuyingfenshu;
          this.ui.txtScores[logicseatid].node.color = Blue;
        }
        this.ui.txtScores[logicseatid].string = score;
        this.ui.totalpanvalues[logicseatid].string = playerSettleInfo.zongshui;
        if (1 == playerSettleInfo.winflag) {
          this.ui.lbl_winTimes.string = "/" + playerSettleInfo.yingbeishu;
          var self_1 = this;
          var hutime = playerSettleInfo.hutime;
          cc.loader.loadRes("GameCommon/Mahjong/Textures/settle/hu" + hutime, cc.SpriteFrame, function(err, spriteFrame) {
            if (err) {
              cc.error(err.message || err);
              return;
            }
            self_1.ui.sprite_huType.spriteFrame = spriteFrame;
          });
        }
      };
      View.prototype.showShareBtn = function() {
        this.ui.btn_share.active = 1 == this.model.sharingSwitch;
      };
      View.prototype.showHandCards = function(playeridx) {
        var playerSettleInfo = this.model.playerSettleInfos[playeridx.toString()];
        var nodeleap = 10;
        var nodeNum = 1;
        var cardList = null;
        cardList = this.ui.node_userList[playeridx].getChildByName("cardList");
        for (var j = 0; j < this.model.opcardarr[playeridx].length; j++) switch (this.model.opcardarr[playeridx][j]["op"]) {
         case MahjongDef_1.MahjongDef.op_angang:
          for (var k = 1; k <= 4; k++) {
            var cardNode = cardList.getChildByName("node" + nodeNum).getChildByName("card" + k);
            cardList.getChildByName("node" + nodeNum).getChildByName("angangNode").active = true;
            cardNode.active = true;
            var spriteFrame = MahjongResMgr_1.default.getInstance().getCardSpriteFrame(this.model.opcardarr[playeridx][j]["value"]);
            cardNode.getChildByName("sprite").getComponent(cc.Sprite).spriteFrame = spriteFrame;
          }
          nodeNum++;
          break;

         case MahjongDef_1.MahjongDef.op_gang:
          for (var k = 1; k <= 4; k++) {
            var cardNode = cardList.getChildByName("node" + nodeNum).getChildByName("card" + k);
            cardNode.active = true;
            var spriteFrame = MahjongResMgr_1.default.getInstance().getCardSpriteFrame(this.model.opcardarr[playeridx][j]["value"]);
            cardNode.getChildByName("sprite").getComponent(cc.Sprite).spriteFrame = spriteFrame;
          }
          nodeNum++;
          break;

         case MahjongDef_1.MahjongDef.op_peng:
          for (var k = 1; k <= 3; k++) {
            var cardNode = cardList.getChildByName("node" + nodeNum).getChildByName("card" + k);
            cardNode.active = true;
            var spriteFrame = MahjongResMgr_1.default.getInstance().getCardSpriteFrame(this.model.opcardarr[playeridx][j]["value"]);
            cardNode.getChildByName("sprite").getComponent(cc.Sprite).spriteFrame = spriteFrame;
          }
          nodeNum++;
          break;

         case MahjongDef_1.MahjongDef.op_chi:
          for (var k = 1; k <= 3; k++) {
            var cardNode = cardList.getChildByName("node" + nodeNum).getChildByName("card" + k);
            cardNode.active = true;
            var spriteFrame = MahjongResMgr_1.default.getInstance().getCardSpriteFrame(this.model.opcardarr[playeridx][j]["value"][k - 1]);
            cardNode.getChildByName("sprite").getComponent(cc.Sprite).spriteFrame = spriteFrame;
          }
          nodeNum++;
        }
        null != this.model.curcard && playerSettleInfo.winflag && this.model.handcards[playeridx].removeByValue(this.model.curcard);
        var k = 1;
        var HandCardLoop = 0;
        for (var j = 0; j < this.model.handcards[playeridx].length; j++) {
          if (0 != j && j % 3 == 0) {
            nodeNum++;
            HandCardLoop++;
            k = 1;
            var node = cardList.getChildByName("node" + nodeNum);
            node.setPosition(cc.v2(node.getPosition().x - nodeleap * HandCardLoop, node.getPosition().y));
          }
          6 == nodeNum && 2 == k && (cardList.getChildByName("node" + nodeNum).getChildByName("hucardFrame").active = true);
          var cardNode = cardList.getChildByName("node" + nodeNum).getChildByName("card" + k);
          cardNode.active = true;
          var spriteFrame = MahjongResMgr_1.default.getInstance().getCardSpriteFrame(this.model.handcards[playeridx][j]);
          cardNode.getChildByName("sprite").getComponent(cc.Sprite).spriteFrame = spriteFrame;
          k++;
        }
        if (null != this.model.curcard && playerSettleInfo.winflag) {
          var cardNode = cardList.getChildByName("node" + nodeNum).getChildByName("card2");
          cardNode.active = true;
          cardList.getChildByName("node" + nodeNum).getChildByName("hucardFrame").active = true;
          var spriteFrame = MahjongResMgr_1.default.getInstance().getCardSpriteFrame(this.model.curcard);
          cardNode.getChildByName("sprite").getComponent(cc.Sprite).spriteFrame = spriteFrame;
        }
      };
      return View;
    }(BaseView_1.default);
    var FzmjSettleCtrl = function(_super) {
      __extends(FzmjSettleCtrl, _super);
      function FzmjSettleCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_drawgame = null;
        _this.btn_share = null;
        _this.btn_again = null;
        _this.lbl_js = null;
        _this.lbl_hide = null;
        _this.nodePlayer1Cards = null;
        _this.nodePlayer2Cards = null;
        _this.nodePlayer3Cards = null;
        _this.nodePlayer4Cards = null;
        _this.nodePlayer1head = null;
        _this.nodePlayer2head = null;
        _this.nodePlayer3head = null;
        _this.nodePlayer4head = null;
        _this.imgBanker = null;
        _this.sprite_huType = null;
        _this.lbl_winTimes = null;
        _this.node_bg = null;
        _this.node_hutype = null;
        _this.button_close = null;
        return _this;
      }
      FzmjSettleCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      FzmjSettleCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onProcess: this.onProcess,
          onSyncData: this.onSyncData
        };
      };
      FzmjSettleCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          usersUpdated: this.usersUpdated,
          "http.reqGameSwitch": this.http_reqGameSwitch
        };
      };
      FzmjSettleCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.btn_share, this.btn_share_cb, "微信分享");
        this.connect(G_UiType.image, this.btn_again, this.btn_again_cb, "再来一局");
        this.connect(G_UiType.image, this.ui.clippingNode, this.btn_again_cb, "再来一局");
        this.connect(G_UiType.button, this.ui.button_close, this.finish, "关闭福州麻将每局结算");
      };
      FzmjSettleCtrl.prototype.onSyncData = function() {
        this.finish();
      };
      FzmjSettleCtrl.prototype.start = function() {};
      FzmjSettleCtrl.prototype.usersUpdated = function() {
        this.finish();
      };
      FzmjSettleCtrl.prototype.setAsViewAgain = function() {
        this.model.setAsViewAgain();
        this.view.updateTipLabel();
      };
      FzmjSettleCtrl.prototype.http_reqGameSwitch = function(msg) {
        this.model.updateSwitch(msg);
        this.view.showShareBtn();
      };
      FzmjSettleCtrl.prototype.onProcess = function(msg) {
        msg.process == MahjongDef_1.MahjongDef.process_ready && this.process_ready();
      };
      FzmjSettleCtrl.prototype.process_ready = function() {
        this.finish();
      };
      FzmjSettleCtrl.prototype.btn_share_cb = function() {
        console.log("btn_share_cb");
        this.start_sub_module(G_MODULE.Shared);
      };
      FzmjSettleCtrl.prototype.btn_again_cb = function() {
        if (this.model.bViewAgain) this.finish(); else if (RoomMgr_1.default.getInstance().isBunchFinish()) {
          RoomMgr_1.default.getInstance().showFinalSettle();
          this.finish();
        } else RoomMgr_1.default.getInstance().nextRound();
      };
      __decorate([ property({
        tooltip: "流局",
        type: cc.Node
      }) ], FzmjSettleCtrl.prototype, "node_drawgame", void 0);
      __decorate([ property({
        tooltip: "微信分享",
        type: cc.Node
      }) ], FzmjSettleCtrl.prototype, "btn_share", void 0);
      __decorate([ property({
        tooltip: "再来一局",
        type: cc.Node
      }) ], FzmjSettleCtrl.prototype, "btn_again", void 0);
      __decorate([ property({
        tooltip: "结算提示",
        type: cc.Label
      }) ], FzmjSettleCtrl.prototype, "lbl_js", void 0);
      __decorate([ property({
        tooltip: "隐藏结算",
        type: cc.Label
      }) ], FzmjSettleCtrl.prototype, "lbl_hide", void 0);
      __decorate([ property({
        tooltip: "玩家牌数据1",
        type: cc.Node
      }) ], FzmjSettleCtrl.prototype, "nodePlayer1Cards", void 0);
      __decorate([ property({
        tooltip: "玩家牌数据2",
        type: cc.Node
      }) ], FzmjSettleCtrl.prototype, "nodePlayer2Cards", void 0);
      __decorate([ property({
        tooltip: "玩家牌数据3",
        type: cc.Node
      }) ], FzmjSettleCtrl.prototype, "nodePlayer3Cards", void 0);
      __decorate([ property({
        tooltip: "玩家牌数据4",
        type: cc.Node
      }) ], FzmjSettleCtrl.prototype, "nodePlayer4Cards", void 0);
      __decorate([ property({
        tooltip: "玩家头像1",
        type: cc.Node
      }) ], FzmjSettleCtrl.prototype, "nodePlayer1head", void 0);
      __decorate([ property({
        tooltip: "玩家头像2",
        type: cc.Node
      }) ], FzmjSettleCtrl.prototype, "nodePlayer2head", void 0);
      __decorate([ property({
        tooltip: "玩家头像3",
        type: cc.Node
      }) ], FzmjSettleCtrl.prototype, "nodePlayer3head", void 0);
      __decorate([ property({
        tooltip: "玩家头像4",
        type: cc.Node
      }) ], FzmjSettleCtrl.prototype, "nodePlayer4head", void 0);
      __decorate([ property({
        tooltip: "庄家图片",
        type: cc.Sprite
      }) ], FzmjSettleCtrl.prototype, "imgBanker", void 0);
      __decorate([ property({
        tooltip: "胡牌类型",
        type: cc.Sprite
      }) ], FzmjSettleCtrl.prototype, "sprite_huType", void 0);
      __decorate([ property({
        tooltip: "胡牌倍数",
        type: cc.Label
      }) ], FzmjSettleCtrl.prototype, "lbl_winTimes", void 0);
      __decorate([ property({
        tooltip: "背景",
        type: cc.Node
      }) ], FzmjSettleCtrl.prototype, "node_bg", void 0);
      __decorate([ property({
        tooltip: "胡节点",
        type: cc.Node
      }) ], FzmjSettleCtrl.prototype, "node_hutype", void 0);
      __decorate([ property({
        tooltip: "关闭按钮",
        type: cc.Node
      }) ], FzmjSettleCtrl.prototype, "button_close", void 0);
      FzmjSettleCtrl = __decorate([ ccclass ], FzmjSettleCtrl);
      return FzmjSettleCtrl;
    }(BaseCtrl_1.default);
    exports.default = FzmjSettleCtrl;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Mahjong/MahjongDef": "MahjongDef",
    "../../../GameCommon/Mahjong/MahjongResMgr": "MahjongResMgr",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/GameMgrs/SwitchMgr": "SwitchMgr",
    "../../../Plat/GameMgrs/UserMgr": "UserMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../../../Plat/Libs/Gfun": "Gfun",
    "../FzmjMgr/FzmjLogic": "FzmjLogic"
  } ],
  FzmjStatisticsSettleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a7795rxv51Ca5//PfL60V1L", "FzmjStatisticsSettleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var BunchInfoMgr_1 = require("../../Plat/GameMgrs/BunchInfoMgr");
    var viewLogicSeatConvertMgr_1 = require("../../Plat/GameMgrs/viewLogicSeatConvertMgr");
    var UiMgr_1 = require("../../Plat/GameMgrs/UiMgr");
    var Green = new cc.Color(1, 146, 7), Red = new cc.Color(255, 36, 0), Yellow = new cc.Color(255, 222, 0);
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.gameResultData = null;
        _this.hutypenodeLeap = 0;
        _this.hutypenodeLeap = ctrl.Int_hutypeLeap;
        return _this;
      }
      Model.prototype.setgameResultData = function(data) {
        this.gameResultData = null == data ? RoomMgr_1.default.getInstance().getBunchInfo() : data;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_panel: null,
          lbl_chihus: {},
          lbl_zimos: {},
          lbl_youjins: {},
          lbl_shuangyous: {},
          lbl_sanyous: {},
          lbl_scores: {},
          lbl_names: {},
          img_heads: [],
          lbl_IDs: {},
          waterMarkForWins: {},
          waterMarkForLosts: {},
          node_waterMark: null,
          sprite_fz: {},
          node_hutypeList: [],
          img_wu: []
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_panel = ctrl.node_panel;
        this.ui.node_waterMark = ctrl.node_waterMark;
        this.ui.node_hutypeList.push(ctrl.node_hutype0);
        ctrl.node_hutype0.active = false;
        this.ui.node_hutypeList.push(ctrl.node_hutype1);
        ctrl.node_hutype1.active = false;
        this.ui.node_hutypeList.push(ctrl.node_hutype2);
        ctrl.node_hutype2.active = false;
        this.ui.node_hutypeList.push(ctrl.node_hutype3);
        ctrl.node_hutype3.active = false;
        for (var logicseatid = 0; logicseatid < BunchInfoMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
          var playerNode = this.ui.node_panel.getChildByName("player" + logicseatid);
          playerNode.active = true;
          playerNode.getChildByName("playerInfo").active = true;
          this.ui.lbl_scores[logicseatid] = playerNode.getChildByName("txt_score").getComponent(cc.Label);
          this.ui.lbl_names[logicseatid] = playerNode.getChildByName("playerInfo").getChildByName("lbl_name").getComponent(cc.Label);
          this.ui.img_heads[logicseatid] = playerNode.getChildByName("playerInfo").getChildByName("img_rwtx").getComponent(cc.Sprite);
          this.ui.lbl_names[logicseatid].node.active = false;
          this.ui.lbl_IDs[logicseatid] = playerNode.getChildByName("playerInfo").getChildByName("lbl_ID").getComponent(cc.Label);
          this.ui.waterMarkForWins[logicseatid] = this.ui.node_waterMark.getChildByName("user" + logicseatid).getChildByName("zjs_seal_win");
          this.ui.waterMarkForLosts[logicseatid] = this.ui.node_waterMark.getChildByName("user" + logicseatid).getChildByName("zjs_seal_loser");
          this.ui.sprite_fz[logicseatid] = playerNode.getChildByName("playerInfo").getChildByName("fz").getComponent(cc.Sprite);
          this.ui.sprite_fz[logicseatid].node.active = false;
          this.ui.img_wu[logicseatid] = playerNode.getChildByName("img_wu");
          this.ui.img_wu[logicseatid].active = false;
        }
      };
      View.prototype.showPlayerInfo = function() {
        var leijiData = this.model.gameResultData.leiji;
        if (null == leijiData || void 0 == leijiData) return;
        for (var logicseatid = 0; logicseatid < BunchInfoMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
          var users = BunchInfoMgr_1.default.getInstance().getMembelist();
          if (null == users) return;
          var viewSeatId = viewLogicSeatConvertMgr_1.default.getInstance().getViewSeatId(logicseatid);
          this.ui.lbl_names[logicseatid].node.active = true;
          this.ui.lbl_names[logicseatid].string = users[logicseatid].nickname;
          parseInt(this.model.gameResultData.roomOwner) == parseInt(users[logicseatid].id) && (this.ui.sprite_fz[logicseatid].node.active = true);
          this.ui.lbl_IDs[logicseatid].string = "ID:" + users[logicseatid].logicid;
          users[logicseatid].headid, users[logicseatid].headurl ? UiMgr_1.default.getInstance().setUserHead(this.ui.img_heads[logicseatid], users[logicseatid].headid, users[logicseatid].headurl) : UiMgr_1.default.getInstance().setUserHead(this.ui.img_heads[logicseatid], users[logicseatid].id, users[logicseatid].url);
          var leijiItem = this.model.gameResultData.leiji[logicseatid];
          var leijiItemList = [];
          leijiItemList.push([ "吃胡", leijiItem.chihu ]);
          leijiItemList.push([ "自摸", leijiItem.zimo ]);
          leijiItemList.push([ "游金", leijiItem.youjin ]);
          leijiItemList.push([ "双游", leijiItem.shuangyou ]);
          leijiItemList.push([ "三游", leijiItem.sanyou ]);
          var hutypenode = this.ui.node_hutypeList[logicseatid];
          var nodeCount = 0;
          for (var i = 0; i < leijiItemList.length; i++) {
            var leijiItemCube = leijiItemList[i];
            if (leijiItemCube[1] > 0) {
              var node = cc.instantiate(hutypenode);
              node.active = true;
              var nodePos = node.getPosition();
              hutypenode.parent.addChild(node);
              node.getChildByName("lbl_hu").getComponent(cc.Label).string = leijiItemCube[0];
              node.getChildByName("hu_Num").getComponent(cc.Label).string = leijiItemCube[1];
              node.getChildByName("hu_Num").color = Red;
              node.setPosition(nodePos.x, nodePos.y - this.model.hutypenodeLeap * nodeCount);
              nodeCount++;
            }
          }
          if (1 == leijiData[logicseatid].title) {
            this.ui.waterMarkForWins[logicseatid].active = true;
            this.ui.waterMarkForLosts[logicseatid].active = false;
          } else if (2 == leijiData[logicseatid].title) {
            this.ui.waterMarkForWins[logicseatid].active = false;
            this.ui.waterMarkForLosts[logicseatid].active = true;
          }
          this.ui.lbl_scores[logicseatid].string = leijiData[logicseatid].zongshuying;
          leijiData[logicseatid].zongshuying >= 0 ? this.ui.lbl_scores[logicseatid].node.color = Red : this.ui.lbl_scores[logicseatid].node.color = Green;
        }
      };
      return View;
    }(BaseView_1.default);
    var FzmjStatisticsSettleCtrl = function(_super) {
      __extends(FzmjStatisticsSettleCtrl, _super);
      function FzmjStatisticsSettleCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_panel = null;
        _this.node_waterMark = null;
        _this.node_hutype0 = null;
        _this.node_hutype1 = null;
        _this.node_hutype2 = null;
        _this.node_hutype3 = null;
        _this.Int_hutypeLeap = 0;
        return _this;
      }
      FzmjStatisticsSettleCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        var resultData = BunchInfoMgr_1.default.getInstance().getBunchInfo();
        console.log("getBunchInfo", resultData);
        this.showView(resultData);
      };
      FzmjStatisticsSettleCtrl.prototype.defineNetEvents = function() {};
      FzmjStatisticsSettleCtrl.prototype.defineGlobalEvents = function() {};
      FzmjStatisticsSettleCtrl.prototype.connectUi = function() {};
      FzmjStatisticsSettleCtrl.prototype.start = function() {};
      FzmjStatisticsSettleCtrl.prototype.showView = function(data) {
        this.model.setgameResultData(data);
        this.view.showPlayerInfo();
      };
      __decorate([ property({
        tooltip: "panel",
        type: cc.Node
      }) ], FzmjStatisticsSettleCtrl.prototype, "node_panel", void 0);
      __decorate([ property({
        tooltip: "waterMark",
        type: cc.Node
      }) ], FzmjStatisticsSettleCtrl.prototype, "node_waterMark", void 0);
      __decorate([ property({
        tooltip: "hutype",
        type: cc.Node
      }) ], FzmjStatisticsSettleCtrl.prototype, "node_hutype0", void 0);
      __decorate([ property({
        tooltip: "hutype",
        type: cc.Node
      }) ], FzmjStatisticsSettleCtrl.prototype, "node_hutype1", void 0);
      __decorate([ property({
        tooltip: "hutype",
        type: cc.Node
      }) ], FzmjStatisticsSettleCtrl.prototype, "node_hutype2", void 0);
      __decorate([ property({
        tooltip: "hutype",
        type: cc.Node
      }) ], FzmjStatisticsSettleCtrl.prototype, "node_hutype3", void 0);
      __decorate([ property({
        tooltip: "hutype",
        type: cc.Integer
      }) ], FzmjStatisticsSettleCtrl.prototype, "Int_hutypeLeap", void 0);
      FzmjStatisticsSettleCtrl = __decorate([ ccclass ], FzmjStatisticsSettleCtrl);
      return FzmjStatisticsSettleCtrl;
    }(BaseCtrl_1.default);
    exports.default = FzmjStatisticsSettleCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/GameMgrs/UiMgr": "UiMgr",
    "../../Plat/GameMgrs/viewLogicSeatConvertMgr": "viewLogicSeatConvertMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView"
  } ],
  5: [ function(require, module, exports) {
    "use strict";
    var assign = require("./lib/utils/common").assign;
    var deflate = require("./lib/deflate");
    var inflate = require("./lib/inflate");
    var constants = require("./lib/zlib/constants");
    var pako = {};
    assign(pako, deflate, inflate, constants);
    module.exports = pako;
  }, {
    "./lib/deflate": 6,
    "./lib/inflate": 7,
    "./lib/utils/common": 8,
    "./lib/zlib/constants": 11
  } ],
  6: [ function(require, module, exports) {
    "use strict";
    var zlib_deflate = require("./zlib/deflate");
    var utils = require("./utils/common");
    var strings = require("./utils/strings");
    var msg = require("./zlib/messages");
    var ZStream = require("./zlib/zstream");
    var toString = Object.prototype.toString;
    var Z_NO_FLUSH = 0;
    var Z_FINISH = 4;
    var Z_OK = 0;
    var Z_STREAM_END = 1;
    var Z_SYNC_FLUSH = 2;
    var Z_DEFAULT_COMPRESSION = -1;
    var Z_DEFAULT_STRATEGY = 0;
    var Z_DEFLATED = 8;
    function Deflate(options) {
      if (!(this instanceof Deflate)) return new Deflate(options);
      this.options = utils.assign({
        level: Z_DEFAULT_COMPRESSION,
        method: Z_DEFLATED,
        chunkSize: 16384,
        windowBits: 15,
        memLevel: 8,
        strategy: Z_DEFAULT_STRATEGY,
        to: ""
      }, options || {});
      var opt = this.options;
      opt.raw && opt.windowBits > 0 ? opt.windowBits = -opt.windowBits : opt.gzip && opt.windowBits > 0 && opt.windowBits < 16 && (opt.windowBits += 16);
      this.err = 0;
      this.msg = "";
      this.ended = false;
      this.chunks = [];
      this.strm = new ZStream();
      this.strm.avail_out = 0;
      var status = zlib_deflate.deflateInit2(this.strm, opt.level, opt.method, opt.windowBits, opt.memLevel, opt.strategy);
      if (status !== Z_OK) throw new Error(msg[status]);
      opt.header && zlib_deflate.deflateSetHeader(this.strm, opt.header);
      if (opt.dictionary) {
        var dict;
        dict = "string" === typeof opt.dictionary ? strings.string2buf(opt.dictionary) : "[object ArrayBuffer]" === toString.call(opt.dictionary) ? new Uint8Array(opt.dictionary) : opt.dictionary;
        status = zlib_deflate.deflateSetDictionary(this.strm, dict);
        if (status !== Z_OK) throw new Error(msg[status]);
        this._dict_set = true;
      }
    }
    Deflate.prototype.push = function(data, mode) {
      var strm = this.strm;
      var chunkSize = this.options.chunkSize;
      var status, _mode;
      if (this.ended) return false;
      _mode = mode === ~~mode ? mode : true === mode ? Z_FINISH : Z_NO_FLUSH;
      "string" === typeof data ? strm.input = strings.string2buf(data) : "[object ArrayBuffer]" === toString.call(data) ? strm.input = new Uint8Array(data) : strm.input = data;
      strm.next_in = 0;
      strm.avail_in = strm.input.length;
      do {
        if (0 === strm.avail_out) {
          strm.output = new utils.Buf8(chunkSize);
          strm.next_out = 0;
          strm.avail_out = chunkSize;
        }
        status = zlib_deflate.deflate(strm, _mode);
        if (status !== Z_STREAM_END && status !== Z_OK) {
          this.onEnd(status);
          this.ended = true;
          return false;
        }
        0 !== strm.avail_out && (0 !== strm.avail_in || _mode !== Z_FINISH && _mode !== Z_SYNC_FLUSH) || ("string" === this.options.to ? this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out))) : this.onData(utils.shrinkBuf(strm.output, strm.next_out)));
      } while ((strm.avail_in > 0 || 0 === strm.avail_out) && status !== Z_STREAM_END);
      if (_mode === Z_FINISH) {
        status = zlib_deflate.deflateEnd(this.strm);
        this.onEnd(status);
        this.ended = true;
        return status === Z_OK;
      }
      if (_mode === Z_SYNC_FLUSH) {
        this.onEnd(Z_OK);
        strm.avail_out = 0;
        return true;
      }
      return true;
    };
    Deflate.prototype.onData = function(chunk) {
      this.chunks.push(chunk);
    };
    Deflate.prototype.onEnd = function(status) {
      status === Z_OK && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = utils.flattenChunks(this.chunks));
      this.chunks = [];
      this.err = status;
      this.msg = this.strm.msg;
    };
    function deflate(input, options) {
      var deflator = new Deflate(options);
      deflator.push(input, true);
      if (deflator.err) throw deflator.msg || msg[deflator.err];
      return deflator.result;
    }
    function deflateRaw(input, options) {
      options = options || {};
      options.raw = true;
      return deflate(input, options);
    }
    function gzip(input, options) {
      options = options || {};
      options.gzip = true;
      return deflate(input, options);
    }
    exports.Deflate = Deflate;
    exports.deflate = deflate;
    exports.deflateRaw = deflateRaw;
    exports.gzip = gzip;
  }, {
    "./utils/common": 8,
    "./utils/strings": 9,
    "./zlib/deflate": 13,
    "./zlib/messages": 18,
    "./zlib/zstream": 20
  } ],
  7: [ function(require, module, exports) {
    "use strict";
    var zlib_inflate = require("./zlib/inflate");
    var utils = require("./utils/common");
    var strings = require("./utils/strings");
    var c = require("./zlib/constants");
    var msg = require("./zlib/messages");
    var ZStream = require("./zlib/zstream");
    var GZheader = require("./zlib/gzheader");
    var toString = Object.prototype.toString;
    function Inflate(options) {
      if (!(this instanceof Inflate)) return new Inflate(options);
      this.options = utils.assign({
        chunkSize: 16384,
        windowBits: 0,
        to: ""
      }, options || {});
      var opt = this.options;
      if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {
        opt.windowBits = -opt.windowBits;
        0 === opt.windowBits && (opt.windowBits = -15);
      }
      opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits) && (opt.windowBits += 32);
      opt.windowBits > 15 && opt.windowBits < 48 && 0 === (15 & opt.windowBits) && (opt.windowBits |= 15);
      this.err = 0;
      this.msg = "";
      this.ended = false;
      this.chunks = [];
      this.strm = new ZStream();
      this.strm.avail_out = 0;
      var status = zlib_inflate.inflateInit2(this.strm, opt.windowBits);
      if (status !== c.Z_OK) throw new Error(msg[status]);
      this.header = new GZheader();
      zlib_inflate.inflateGetHeader(this.strm, this.header);
    }
    Inflate.prototype.push = function(data, mode) {
      var strm = this.strm;
      var chunkSize = this.options.chunkSize;
      var dictionary = this.options.dictionary;
      var status, _mode;
      var next_out_utf8, tail, utf8str;
      var dict;
      var allowBufError = false;
      if (this.ended) return false;
      _mode = mode === ~~mode ? mode : true === mode ? c.Z_FINISH : c.Z_NO_FLUSH;
      "string" === typeof data ? strm.input = strings.binstring2buf(data) : "[object ArrayBuffer]" === toString.call(data) ? strm.input = new Uint8Array(data) : strm.input = data;
      strm.next_in = 0;
      strm.avail_in = strm.input.length;
      do {
        if (0 === strm.avail_out) {
          strm.output = new utils.Buf8(chunkSize);
          strm.next_out = 0;
          strm.avail_out = chunkSize;
        }
        status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);
        if (status === c.Z_NEED_DICT && dictionary) {
          dict = "string" === typeof dictionary ? strings.string2buf(dictionary) : "[object ArrayBuffer]" === toString.call(dictionary) ? new Uint8Array(dictionary) : dictionary;
          status = zlib_inflate.inflateSetDictionary(this.strm, dict);
        }
        if (status === c.Z_BUF_ERROR && true === allowBufError) {
          status = c.Z_OK;
          allowBufError = false;
        }
        if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
          this.onEnd(status);
          this.ended = true;
          return false;
        }
        if (strm.next_out && (0 === strm.avail_out || status === c.Z_STREAM_END || 0 === strm.avail_in && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) if ("string" === this.options.to) {
          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);
          tail = strm.next_out - next_out_utf8;
          utf8str = strings.buf2string(strm.output, next_out_utf8);
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          tail && utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0);
          this.onData(utf8str);
        } else this.onData(utils.shrinkBuf(strm.output, strm.next_out));
        0 === strm.avail_in && 0 === strm.avail_out && (allowBufError = true);
      } while ((strm.avail_in > 0 || 0 === strm.avail_out) && status !== c.Z_STREAM_END);
      status === c.Z_STREAM_END && (_mode = c.Z_FINISH);
      if (_mode === c.Z_FINISH) {
        status = zlib_inflate.inflateEnd(this.strm);
        this.onEnd(status);
        this.ended = true;
        return status === c.Z_OK;
      }
      if (_mode === c.Z_SYNC_FLUSH) {
        this.onEnd(c.Z_OK);
        strm.avail_out = 0;
        return true;
      }
      return true;
    };
    Inflate.prototype.onData = function(chunk) {
      this.chunks.push(chunk);
    };
    Inflate.prototype.onEnd = function(status) {
      status === c.Z_OK && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = utils.flattenChunks(this.chunks));
      this.chunks = [];
      this.err = status;
      this.msg = this.strm.msg;
    };
    function inflate(input, options) {
      var inflator = new Inflate(options);
      inflator.push(input, true);
      if (inflator.err) throw inflator.msg || msg[inflator.err];
      return inflator.result;
    }
    function inflateRaw(input, options) {
      options = options || {};
      options.raw = true;
      return inflate(input, options);
    }
    exports.Inflate = Inflate;
    exports.inflate = inflate;
    exports.inflateRaw = inflateRaw;
    exports.ungzip = inflate;
  }, {
    "./utils/common": 8,
    "./utils/strings": 9,
    "./zlib/constants": 11,
    "./zlib/gzheader": 14,
    "./zlib/inflate": 16,
    "./zlib/messages": 18,
    "./zlib/zstream": 20
  } ],
  8: [ function(require, module, exports) {
    "use strict";
    var TYPED_OK = "undefined" !== typeof Uint8Array && "undefined" !== typeof Uint16Array && "undefined" !== typeof Int32Array;
    function _has(obj, key) {
      return Object.prototype.hasOwnProperty.call(obj, key);
    }
    exports.assign = function(obj) {
      var sources = Array.prototype.slice.call(arguments, 1);
      while (sources.length) {
        var source = sources.shift();
        if (!source) continue;
        if ("object" !== typeof source) throw new TypeError(source + "must be non-object");
        for (var p in source) _has(source, p) && (obj[p] = source[p]);
      }
      return obj;
    };
    exports.shrinkBuf = function(buf, size) {
      if (buf.length === size) return buf;
      if (buf.subarray) return buf.subarray(0, size);
      buf.length = size;
      return buf;
    };
    var fnTyped = {
      arraySet: function(dest, src, src_offs, len, dest_offs) {
        if (src.subarray && dest.subarray) {
          dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
          return;
        }
        for (var i = 0; i < len; i++) dest[dest_offs + i] = src[src_offs + i];
      },
      flattenChunks: function(chunks) {
        var i, l, len, pos, chunk, result;
        len = 0;
        for (i = 0, l = chunks.length; i < l; i++) len += chunks[i].length;
        result = new Uint8Array(len);
        pos = 0;
        for (i = 0, l = chunks.length; i < l; i++) {
          chunk = chunks[i];
          result.set(chunk, pos);
          pos += chunk.length;
        }
        return result;
      }
    };
    var fnUntyped = {
      arraySet: function(dest, src, src_offs, len, dest_offs) {
        for (var i = 0; i < len; i++) dest[dest_offs + i] = src[src_offs + i];
      },
      flattenChunks: function(chunks) {
        return [].concat.apply([], chunks);
      }
    };
    exports.setTyped = function(on) {
      if (on) {
        exports.Buf8 = Uint8Array;
        exports.Buf16 = Uint16Array;
        exports.Buf32 = Int32Array;
        exports.assign(exports, fnTyped);
      } else {
        exports.Buf8 = Array;
        exports.Buf16 = Array;
        exports.Buf32 = Array;
        exports.assign(exports, fnUntyped);
      }
    };
    exports.setTyped(TYPED_OK);
  }, {} ],
  9: [ function(require, module, exports) {
    "use strict";
    var utils = require("./common");
    var STR_APPLY_OK = true;
    var STR_APPLY_UIA_OK = true;
    try {
      String.fromCharCode.apply(null, [ 0 ]);
    } catch (__) {
      STR_APPLY_OK = false;
    }
    try {
      String.fromCharCode.apply(null, new Uint8Array(1));
    } catch (__) {
      STR_APPLY_UIA_OK = false;
    }
    var _utf8len = new utils.Buf8(256);
    for (var q = 0; q < 256; q++) _utf8len[q] = q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1;
    _utf8len[254] = _utf8len[254] = 1;
    exports.string2buf = function(str) {
      var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;
      for (m_pos = 0; m_pos < str_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if (55296 === (64512 & c) && m_pos + 1 < str_len) {
          c2 = str.charCodeAt(m_pos + 1);
          if (56320 === (64512 & c2)) {
            c = 65536 + (c - 55296 << 10) + (c2 - 56320);
            m_pos++;
          }
        }
        buf_len += c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : 4;
      }
      buf = new utils.Buf8(buf_len);
      for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if (55296 === (64512 & c) && m_pos + 1 < str_len) {
          c2 = str.charCodeAt(m_pos + 1);
          if (56320 === (64512 & c2)) {
            c = 65536 + (c - 55296 << 10) + (c2 - 56320);
            m_pos++;
          }
        }
        if (c < 128) buf[i++] = c; else if (c < 2048) {
          buf[i++] = 192 | c >>> 6;
          buf[i++] = 128 | 63 & c;
        } else if (c < 65536) {
          buf[i++] = 224 | c >>> 12;
          buf[i++] = 128 | c >>> 6 & 63;
          buf[i++] = 128 | 63 & c;
        } else {
          buf[i++] = 240 | c >>> 18;
          buf[i++] = 128 | c >>> 12 & 63;
          buf[i++] = 128 | c >>> 6 & 63;
          buf[i++] = 128 | 63 & c;
        }
      }
      return buf;
    };
    function buf2binstring(buf, len) {
      if (len < 65537 && (buf.subarray && STR_APPLY_UIA_OK || !buf.subarray && STR_APPLY_OK)) return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
      var result = "";
      for (var i = 0; i < len; i++) result += String.fromCharCode(buf[i]);
      return result;
    }
    exports.buf2binstring = function(buf) {
      return buf2binstring(buf, buf.length);
    };
    exports.binstring2buf = function(str) {
      var buf = new utils.Buf8(str.length);
      for (var i = 0, len = buf.length; i < len; i++) buf[i] = str.charCodeAt(i);
      return buf;
    };
    exports.buf2string = function(buf, max) {
      var i, out, c, c_len;
      var len = max || buf.length;
      var utf16buf = new Array(2 * len);
      for (out = 0, i = 0; i < len; ) {
        c = buf[i++];
        if (c < 128) {
          utf16buf[out++] = c;
          continue;
        }
        c_len = _utf8len[c];
        if (c_len > 4) {
          utf16buf[out++] = 65533;
          i += c_len - 1;
          continue;
        }
        c &= 2 === c_len ? 31 : 3 === c_len ? 15 : 7;
        while (c_len > 1 && i < len) {
          c = c << 6 | 63 & buf[i++];
          c_len--;
        }
        if (c_len > 1) {
          utf16buf[out++] = 65533;
          continue;
        }
        if (c < 65536) utf16buf[out++] = c; else {
          c -= 65536;
          utf16buf[out++] = 55296 | c >> 10 & 1023;
          utf16buf[out++] = 56320 | 1023 & c;
        }
      }
      return buf2binstring(utf16buf, out);
    };
    exports.utf8border = function(buf, max) {
      var pos;
      max = max || buf.length;
      max > buf.length && (max = buf.length);
      pos = max - 1;
      while (pos >= 0 && 128 === (192 & buf[pos])) pos--;
      if (pos < 0) return max;
      if (0 === pos) return max;
      return pos + _utf8len[buf[pos]] > max ? pos : max;
    };
  }, {
    "./common": 8
  } ],
  10: [ function(require, module, exports) {
    "use strict";
    function adler32(adler, buf, len, pos) {
      var s1 = 65535 & adler | 0, s2 = adler >>> 16 & 65535 | 0, n = 0;
      while (0 !== len) {
        n = len > 2e3 ? 2e3 : len;
        len -= n;
        do {
          s1 = s1 + buf[pos++] | 0;
          s2 = s2 + s1 | 0;
        } while (--n);
        s1 %= 65521;
        s2 %= 65521;
      }
      return s1 | s2 << 16 | 0;
    }
    module.exports = adler32;
  }, {} ],
  11: [ function(require, module, exports) {
    "use strict";
    module.exports = {
      Z_NO_FLUSH: 0,
      Z_PARTIAL_FLUSH: 1,
      Z_SYNC_FLUSH: 2,
      Z_FULL_FLUSH: 3,
      Z_FINISH: 4,
      Z_BLOCK: 5,
      Z_TREES: 6,
      Z_OK: 0,
      Z_STREAM_END: 1,
      Z_NEED_DICT: 2,
      Z_ERRNO: -1,
      Z_STREAM_ERROR: -2,
      Z_DATA_ERROR: -3,
      Z_BUF_ERROR: -5,
      Z_NO_COMPRESSION: 0,
      Z_BEST_SPEED: 1,
      Z_BEST_COMPRESSION: 9,
      Z_DEFAULT_COMPRESSION: -1,
      Z_FILTERED: 1,
      Z_HUFFMAN_ONLY: 2,
      Z_RLE: 3,
      Z_FIXED: 4,
      Z_DEFAULT_STRATEGY: 0,
      Z_BINARY: 0,
      Z_TEXT: 1,
      Z_UNKNOWN: 2,
      Z_DEFLATED: 8
    };
  }, {} ],
  12: [ function(require, module, exports) {
    "use strict";
    function makeTable() {
      var c, table = [];
      for (var n = 0; n < 256; n++) {
        c = n;
        for (var k = 0; k < 8; k++) c = 1 & c ? 3988292384 ^ c >>> 1 : c >>> 1;
        table[n] = c;
      }
      return table;
    }
    var crcTable = makeTable();
    function crc32(crc, buf, len, pos) {
      var t = crcTable, end = pos + len;
      crc ^= -1;
      for (var i = pos; i < end; i++) crc = crc >>> 8 ^ t[255 & (crc ^ buf[i])];
      return -1 ^ crc;
    }
    module.exports = crc32;
  }, {} ],
  13: [ function(require, module, exports) {
    "use strict";
    var utils = require("../utils/common");
    var trees = require("./trees");
    var adler32 = require("./adler32");
    var crc32 = require("./crc32");
    var msg = require("./messages");
    var Z_NO_FLUSH = 0;
    var Z_PARTIAL_FLUSH = 1;
    var Z_FULL_FLUSH = 3;
    var Z_FINISH = 4;
    var Z_BLOCK = 5;
    var Z_OK = 0;
    var Z_STREAM_END = 1;
    var Z_STREAM_ERROR = -2;
    var Z_DATA_ERROR = -3;
    var Z_BUF_ERROR = -5;
    var Z_DEFAULT_COMPRESSION = -1;
    var Z_FILTERED = 1;
    var Z_HUFFMAN_ONLY = 2;
    var Z_RLE = 3;
    var Z_FIXED = 4;
    var Z_DEFAULT_STRATEGY = 0;
    var Z_UNKNOWN = 2;
    var Z_DEFLATED = 8;
    var MAX_MEM_LEVEL = 9;
    var MAX_WBITS = 15;
    var DEF_MEM_LEVEL = 8;
    var LENGTH_CODES = 29;
    var LITERALS = 256;
    var L_CODES = LITERALS + 1 + LENGTH_CODES;
    var D_CODES = 30;
    var BL_CODES = 19;
    var HEAP_SIZE = 2 * L_CODES + 1;
    var MAX_BITS = 15;
    var MIN_MATCH = 3;
    var MAX_MATCH = 258;
    var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;
    var PRESET_DICT = 32;
    var INIT_STATE = 42;
    var EXTRA_STATE = 69;
    var NAME_STATE = 73;
    var COMMENT_STATE = 91;
    var HCRC_STATE = 103;
    var BUSY_STATE = 113;
    var FINISH_STATE = 666;
    var BS_NEED_MORE = 1;
    var BS_BLOCK_DONE = 2;
    var BS_FINISH_STARTED = 3;
    var BS_FINISH_DONE = 4;
    var OS_CODE = 3;
    function err(strm, errorCode) {
      strm.msg = msg[errorCode];
      return errorCode;
    }
    function rank(f) {
      return (f << 1) - (f > 4 ? 9 : 0);
    }
    function zero(buf) {
      var len = buf.length;
      while (--len >= 0) buf[len] = 0;
    }
    function flush_pending(strm) {
      var s = strm.state;
      var len = s.pending;
      len > strm.avail_out && (len = strm.avail_out);
      if (0 === len) return;
      utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
      strm.next_out += len;
      s.pending_out += len;
      strm.total_out += len;
      strm.avail_out -= len;
      s.pending -= len;
      0 === s.pending && (s.pending_out = 0);
    }
    function flush_block_only(s, last) {
      trees._tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);
      s.block_start = s.strstart;
      flush_pending(s.strm);
    }
    function put_byte(s, b) {
      s.pending_buf[s.pending++] = b;
    }
    function putShortMSB(s, b) {
      s.pending_buf[s.pending++] = b >>> 8 & 255;
      s.pending_buf[s.pending++] = 255 & b;
    }
    function read_buf(strm, buf, start, size) {
      var len = strm.avail_in;
      len > size && (len = size);
      if (0 === len) return 0;
      strm.avail_in -= len;
      utils.arraySet(buf, strm.input, strm.next_in, len, start);
      1 === strm.state.wrap ? strm.adler = adler32(strm.adler, buf, len, start) : 2 === strm.state.wrap && (strm.adler = crc32(strm.adler, buf, len, start));
      strm.next_in += len;
      strm.total_in += len;
      return len;
    }
    function longest_match(s, cur_match) {
      var chain_length = s.max_chain_length;
      var scan = s.strstart;
      var match;
      var len;
      var best_len = s.prev_length;
      var nice_match = s.nice_match;
      var limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0;
      var _win = s.window;
      var wmask = s.w_mask;
      var prev = s.prev;
      var strend = s.strstart + MAX_MATCH;
      var scan_end1 = _win[scan + best_len - 1];
      var scan_end = _win[scan + best_len];
      s.prev_length >= s.good_match && (chain_length >>= 2);
      nice_match > s.lookahead && (nice_match = s.lookahead);
      do {
        match = cur_match;
        if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) continue;
        scan += 2;
        match++;
        do {} while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);
        len = MAX_MATCH - (strend - scan);
        scan = strend - MAX_MATCH;
        if (len > best_len) {
          s.match_start = cur_match;
          best_len = len;
          if (len >= nice_match) break;
          scan_end1 = _win[scan + best_len - 1];
          scan_end = _win[scan + best_len];
        }
      } while ((cur_match = prev[cur_match & wmask]) > limit && 0 !== --chain_length);
      if (best_len <= s.lookahead) return best_len;
      return s.lookahead;
    }
    function fill_window(s) {
      var _w_size = s.w_size;
      var p, n, m, more, str;
      do {
        more = s.window_size - s.lookahead - s.strstart;
        if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
          utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
          s.match_start -= _w_size;
          s.strstart -= _w_size;
          s.block_start -= _w_size;
          n = s.hash_size;
          p = n;
          do {
            m = s.head[--p];
            s.head[p] = m >= _w_size ? m - _w_size : 0;
          } while (--n);
          n = _w_size;
          p = n;
          do {
            m = s.prev[--p];
            s.prev[p] = m >= _w_size ? m - _w_size : 0;
          } while (--n);
          more += _w_size;
        }
        if (0 === s.strm.avail_in) break;
        n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
        s.lookahead += n;
        if (s.lookahead + s.insert >= MIN_MATCH) {
          str = s.strstart - s.insert;
          s.ins_h = s.window[str];
          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 1]) & s.hash_mask;
          while (s.insert) {
            s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
            s.prev[str & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = str;
            str++;
            s.insert--;
            if (s.lookahead + s.insert < MIN_MATCH) break;
          }
        }
      } while (s.lookahead < MIN_LOOKAHEAD && 0 !== s.strm.avail_in);
    }
    function deflate_stored(s, flush) {
      var max_block_size = 65535;
      max_block_size > s.pending_buf_size - 5 && (max_block_size = s.pending_buf_size - 5);
      for (;;) {
        if (s.lookahead <= 1) {
          fill_window(s);
          if (0 === s.lookahead && flush === Z_NO_FLUSH) return BS_NEED_MORE;
          if (0 === s.lookahead) break;
        }
        s.strstart += s.lookahead;
        s.lookahead = 0;
        var max_start = s.block_start + max_block_size;
        if (0 === s.strstart || s.strstart >= max_start) {
          s.lookahead = s.strstart - max_start;
          s.strstart = max_start;
          flush_block_only(s, false);
          if (0 === s.strm.avail_out) return BS_NEED_MORE;
        }
        if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD) {
          flush_block_only(s, false);
          if (0 === s.strm.avail_out) return BS_NEED_MORE;
        }
      }
      s.insert = 0;
      if (flush === Z_FINISH) {
        flush_block_only(s, true);
        if (0 === s.strm.avail_out) return BS_FINISH_STARTED;
        return BS_FINISH_DONE;
      }
      if (s.strstart > s.block_start) {
        flush_block_only(s, false);
        if (0 === s.strm.avail_out) return BS_NEED_MORE;
      }
      return BS_NEED_MORE;
    }
    function deflate_fast(s, flush) {
      var hash_head;
      var bflush;
      for (;;) {
        if (s.lookahead < MIN_LOOKAHEAD) {
          fill_window(s);
          if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) return BS_NEED_MORE;
          if (0 === s.lookahead) break;
        }
        hash_head = 0;
        if (s.lookahead >= MIN_MATCH) {
          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
        }
        0 !== hash_head && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD && (s.match_length = longest_match(s, hash_head));
        if (s.match_length >= MIN_MATCH) {
          bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);
          s.lookahead -= s.match_length;
          if (s.match_length <= s.max_lazy_match && s.lookahead >= MIN_MATCH) {
            s.match_length--;
            do {
              s.strstart++;
              s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
              hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
              s.head[s.ins_h] = s.strstart;
            } while (0 !== --s.match_length);
            s.strstart++;
          } else {
            s.strstart += s.match_length;
            s.match_length = 0;
            s.ins_h = s.window[s.strstart];
            s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 1]) & s.hash_mask;
          }
        } else {
          bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
          s.lookahead--;
          s.strstart++;
        }
        if (bflush) {
          flush_block_only(s, false);
          if (0 === s.strm.avail_out) return BS_NEED_MORE;
        }
      }
      s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
      if (flush === Z_FINISH) {
        flush_block_only(s, true);
        if (0 === s.strm.avail_out) return BS_FINISH_STARTED;
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        flush_block_only(s, false);
        if (0 === s.strm.avail_out) return BS_NEED_MORE;
      }
      return BS_BLOCK_DONE;
    }
    function deflate_slow(s, flush) {
      var hash_head;
      var bflush;
      var max_insert;
      for (;;) {
        if (s.lookahead < MIN_LOOKAHEAD) {
          fill_window(s);
          if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) return BS_NEED_MORE;
          if (0 === s.lookahead) break;
        }
        hash_head = 0;
        if (s.lookahead >= MIN_MATCH) {
          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
        }
        s.prev_length = s.match_length;
        s.prev_match = s.match_start;
        s.match_length = MIN_MATCH - 1;
        if (0 !== hash_head && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
          s.match_length = longest_match(s, hash_head);
          s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096) && (s.match_length = MIN_MATCH - 1);
        }
        if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
          max_insert = s.strstart + s.lookahead - MIN_MATCH;
          bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
          s.lookahead -= s.prev_length - 1;
          s.prev_length -= 2;
          do {
            if (++s.strstart <= max_insert) {
              s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
              hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
              s.head[s.ins_h] = s.strstart;
            }
          } while (0 !== --s.prev_length);
          s.match_available = 0;
          s.match_length = MIN_MATCH - 1;
          s.strstart++;
          if (bflush) {
            flush_block_only(s, false);
            if (0 === s.strm.avail_out) return BS_NEED_MORE;
          }
        } else if (s.match_available) {
          bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
          bflush && flush_block_only(s, false);
          s.strstart++;
          s.lookahead--;
          if (0 === s.strm.avail_out) return BS_NEED_MORE;
        } else {
          s.match_available = 1;
          s.strstart++;
          s.lookahead--;
        }
      }
      if (s.match_available) {
        bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
        s.match_available = 0;
      }
      s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
      if (flush === Z_FINISH) {
        flush_block_only(s, true);
        if (0 === s.strm.avail_out) return BS_FINISH_STARTED;
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        flush_block_only(s, false);
        if (0 === s.strm.avail_out) return BS_NEED_MORE;
      }
      return BS_BLOCK_DONE;
    }
    function deflate_rle(s, flush) {
      var bflush;
      var prev;
      var scan, strend;
      var _win = s.window;
      for (;;) {
        if (s.lookahead <= MAX_MATCH) {
          fill_window(s);
          if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) return BS_NEED_MORE;
          if (0 === s.lookahead) break;
        }
        s.match_length = 0;
        if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
          scan = s.strstart - 1;
          prev = _win[scan];
          if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
            strend = s.strstart + MAX_MATCH;
            do {} while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);
            s.match_length = MAX_MATCH - (strend - scan);
            s.match_length > s.lookahead && (s.match_length = s.lookahead);
          }
        }
        if (s.match_length >= MIN_MATCH) {
          bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);
          s.lookahead -= s.match_length;
          s.strstart += s.match_length;
          s.match_length = 0;
        } else {
          bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
          s.lookahead--;
          s.strstart++;
        }
        if (bflush) {
          flush_block_only(s, false);
          if (0 === s.strm.avail_out) return BS_NEED_MORE;
        }
      }
      s.insert = 0;
      if (flush === Z_FINISH) {
        flush_block_only(s, true);
        if (0 === s.strm.avail_out) return BS_FINISH_STARTED;
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        flush_block_only(s, false);
        if (0 === s.strm.avail_out) return BS_NEED_MORE;
      }
      return BS_BLOCK_DONE;
    }
    function deflate_huff(s, flush) {
      var bflush;
      for (;;) {
        if (0 === s.lookahead) {
          fill_window(s);
          if (0 === s.lookahead) {
            if (flush === Z_NO_FLUSH) return BS_NEED_MORE;
            break;
          }
        }
        s.match_length = 0;
        bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
        s.lookahead--;
        s.strstart++;
        if (bflush) {
          flush_block_only(s, false);
          if (0 === s.strm.avail_out) return BS_NEED_MORE;
        }
      }
      s.insert = 0;
      if (flush === Z_FINISH) {
        flush_block_only(s, true);
        if (0 === s.strm.avail_out) return BS_FINISH_STARTED;
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        flush_block_only(s, false);
        if (0 === s.strm.avail_out) return BS_NEED_MORE;
      }
      return BS_BLOCK_DONE;
    }
    function Config(good_length, max_lazy, nice_length, max_chain, func) {
      this.good_length = good_length;
      this.max_lazy = max_lazy;
      this.nice_length = nice_length;
      this.max_chain = max_chain;
      this.func = func;
    }
    var configuration_table;
    configuration_table = [ new Config(0, 0, 0, 0, deflate_stored), new Config(4, 4, 8, 4, deflate_fast), new Config(4, 5, 16, 8, deflate_fast), new Config(4, 6, 32, 32, deflate_fast), new Config(4, 4, 16, 16, deflate_slow), new Config(8, 16, 32, 32, deflate_slow), new Config(8, 16, 128, 128, deflate_slow), new Config(8, 32, 128, 256, deflate_slow), new Config(32, 128, 258, 1024, deflate_slow), new Config(32, 258, 258, 4096, deflate_slow) ];
    function lm_init(s) {
      s.window_size = 2 * s.w_size;
      zero(s.head);
      s.max_lazy_match = configuration_table[s.level].max_lazy;
      s.good_match = configuration_table[s.level].good_length;
      s.nice_match = configuration_table[s.level].nice_length;
      s.max_chain_length = configuration_table[s.level].max_chain;
      s.strstart = 0;
      s.block_start = 0;
      s.lookahead = 0;
      s.insert = 0;
      s.match_length = s.prev_length = MIN_MATCH - 1;
      s.match_available = 0;
      s.ins_h = 0;
    }
    function DeflateState() {
      this.strm = null;
      this.status = 0;
      this.pending_buf = null;
      this.pending_buf_size = 0;
      this.pending_out = 0;
      this.pending = 0;
      this.wrap = 0;
      this.gzhead = null;
      this.gzindex = 0;
      this.method = Z_DEFLATED;
      this.last_flush = -1;
      this.w_size = 0;
      this.w_bits = 0;
      this.w_mask = 0;
      this.window = null;
      this.window_size = 0;
      this.prev = null;
      this.head = null;
      this.ins_h = 0;
      this.hash_size = 0;
      this.hash_bits = 0;
      this.hash_mask = 0;
      this.hash_shift = 0;
      this.block_start = 0;
      this.match_length = 0;
      this.prev_match = 0;
      this.match_available = 0;
      this.strstart = 0;
      this.match_start = 0;
      this.lookahead = 0;
      this.prev_length = 0;
      this.max_chain_length = 0;
      this.max_lazy_match = 0;
      this.level = 0;
      this.strategy = 0;
      this.good_match = 0;
      this.nice_match = 0;
      this.dyn_ltree = new utils.Buf16(2 * HEAP_SIZE);
      this.dyn_dtree = new utils.Buf16(2 * (2 * D_CODES + 1));
      this.bl_tree = new utils.Buf16(2 * (2 * BL_CODES + 1));
      zero(this.dyn_ltree);
      zero(this.dyn_dtree);
      zero(this.bl_tree);
      this.l_desc = null;
      this.d_desc = null;
      this.bl_desc = null;
      this.bl_count = new utils.Buf16(MAX_BITS + 1);
      this.heap = new utils.Buf16(2 * L_CODES + 1);
      zero(this.heap);
      this.heap_len = 0;
      this.heap_max = 0;
      this.depth = new utils.Buf16(2 * L_CODES + 1);
      zero(this.depth);
      this.l_buf = 0;
      this.lit_bufsize = 0;
      this.last_lit = 0;
      this.d_buf = 0;
      this.opt_len = 0;
      this.static_len = 0;
      this.matches = 0;
      this.insert = 0;
      this.bi_buf = 0;
      this.bi_valid = 0;
    }
    function deflateResetKeep(strm) {
      var s;
      if (!strm || !strm.state) return err(strm, Z_STREAM_ERROR);
      strm.total_in = strm.total_out = 0;
      strm.data_type = Z_UNKNOWN;
      s = strm.state;
      s.pending = 0;
      s.pending_out = 0;
      s.wrap < 0 && (s.wrap = -s.wrap);
      s.status = s.wrap ? INIT_STATE : BUSY_STATE;
      strm.adler = 2 === s.wrap ? 0 : 1;
      s.last_flush = Z_NO_FLUSH;
      trees._tr_init(s);
      return Z_OK;
    }
    function deflateReset(strm) {
      var ret = deflateResetKeep(strm);
      ret === Z_OK && lm_init(strm.state);
      return ret;
    }
    function deflateSetHeader(strm, head) {
      if (!strm || !strm.state) return Z_STREAM_ERROR;
      if (2 !== strm.state.wrap) return Z_STREAM_ERROR;
      strm.state.gzhead = head;
      return Z_OK;
    }
    function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
      if (!strm) return Z_STREAM_ERROR;
      var wrap = 1;
      level === Z_DEFAULT_COMPRESSION && (level = 6);
      if (windowBits < 0) {
        wrap = 0;
        windowBits = -windowBits;
      } else if (windowBits > 15) {
        wrap = 2;
        windowBits -= 16;
      }
      if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) return err(strm, Z_STREAM_ERROR);
      8 === windowBits && (windowBits = 9);
      var s = new DeflateState();
      strm.state = s;
      s.strm = strm;
      s.wrap = wrap;
      s.gzhead = null;
      s.w_bits = windowBits;
      s.w_size = 1 << s.w_bits;
      s.w_mask = s.w_size - 1;
      s.hash_bits = memLevel + 7;
      s.hash_size = 1 << s.hash_bits;
      s.hash_mask = s.hash_size - 1;
      s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
      s.window = new utils.Buf8(2 * s.w_size);
      s.head = new utils.Buf16(s.hash_size);
      s.prev = new utils.Buf16(s.w_size);
      s.lit_bufsize = 1 << memLevel + 6;
      s.pending_buf_size = 4 * s.lit_bufsize;
      s.pending_buf = new utils.Buf8(s.pending_buf_size);
      s.d_buf = 1 * s.lit_bufsize;
      s.l_buf = 3 * s.lit_bufsize;
      s.level = level;
      s.strategy = strategy;
      s.method = method;
      return deflateReset(strm);
    }
    function deflateInit(strm, level) {
      return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
    }
    function deflate(strm, flush) {
      var old_flush, s;
      var beg, val;
      if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
      s = strm.state;
      if (!strm.output || !strm.input && 0 !== strm.avail_in || s.status === FINISH_STATE && flush !== Z_FINISH) return err(strm, 0 === strm.avail_out ? Z_BUF_ERROR : Z_STREAM_ERROR);
      s.strm = strm;
      old_flush = s.last_flush;
      s.last_flush = flush;
      if (s.status === INIT_STATE) if (2 === s.wrap) {
        strm.adler = 0;
        put_byte(s, 31);
        put_byte(s, 139);
        put_byte(s, 8);
        if (s.gzhead) {
          put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (s.gzhead.extra ? 4 : 0) + (s.gzhead.name ? 8 : 0) + (s.gzhead.comment ? 16 : 0));
          put_byte(s, 255 & s.gzhead.time);
          put_byte(s, s.gzhead.time >> 8 & 255);
          put_byte(s, s.gzhead.time >> 16 & 255);
          put_byte(s, s.gzhead.time >> 24 & 255);
          put_byte(s, 9 === s.level ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
          put_byte(s, 255 & s.gzhead.os);
          if (s.gzhead.extra && s.gzhead.extra.length) {
            put_byte(s, 255 & s.gzhead.extra.length);
            put_byte(s, s.gzhead.extra.length >> 8 & 255);
          }
          s.gzhead.hcrc && (strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0));
          s.gzindex = 0;
          s.status = EXTRA_STATE;
        } else {
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 9 === s.level ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
          put_byte(s, OS_CODE);
          s.status = BUSY_STATE;
        }
      } else {
        var header = Z_DEFLATED + (s.w_bits - 8 << 4) << 8;
        var level_flags = -1;
        level_flags = s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 0 : s.level < 6 ? 1 : 6 === s.level ? 2 : 3;
        header |= level_flags << 6;
        0 !== s.strstart && (header |= PRESET_DICT);
        header += 31 - header % 31;
        s.status = BUSY_STATE;
        putShortMSB(s, header);
        if (0 !== s.strstart) {
          putShortMSB(s, strm.adler >>> 16);
          putShortMSB(s, 65535 & strm.adler);
        }
        strm.adler = 1;
      }
      if (s.status === EXTRA_STATE) if (s.gzhead.extra) {
        beg = s.pending;
        while (s.gzindex < (65535 & s.gzhead.extra.length)) {
          if (s.pending === s.pending_buf_size) {
            s.gzhead.hcrc && s.pending > beg && (strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg));
            flush_pending(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) break;
          }
          put_byte(s, 255 & s.gzhead.extra[s.gzindex]);
          s.gzindex++;
        }
        s.gzhead.hcrc && s.pending > beg && (strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg));
        if (s.gzindex === s.gzhead.extra.length) {
          s.gzindex = 0;
          s.status = NAME_STATE;
        }
      } else s.status = NAME_STATE;
      if (s.status === NAME_STATE) if (s.gzhead.name) {
        beg = s.pending;
        do {
          if (s.pending === s.pending_buf_size) {
            s.gzhead.hcrc && s.pending > beg && (strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg));
            flush_pending(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              val = 1;
              break;
            }
          }
          val = s.gzindex < s.gzhead.name.length ? 255 & s.gzhead.name.charCodeAt(s.gzindex++) : 0;
          put_byte(s, val);
        } while (0 !== val);
        s.gzhead.hcrc && s.pending > beg && (strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg));
        if (0 === val) {
          s.gzindex = 0;
          s.status = COMMENT_STATE;
        }
      } else s.status = COMMENT_STATE;
      if (s.status === COMMENT_STATE) if (s.gzhead.comment) {
        beg = s.pending;
        do {
          if (s.pending === s.pending_buf_size) {
            s.gzhead.hcrc && s.pending > beg && (strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg));
            flush_pending(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              val = 1;
              break;
            }
          }
          val = s.gzindex < s.gzhead.comment.length ? 255 & s.gzhead.comment.charCodeAt(s.gzindex++) : 0;
          put_byte(s, val);
        } while (0 !== val);
        s.gzhead.hcrc && s.pending > beg && (strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg));
        0 === val && (s.status = HCRC_STATE);
      } else s.status = HCRC_STATE;
      if (s.status === HCRC_STATE) if (s.gzhead.hcrc) {
        s.pending + 2 > s.pending_buf_size && flush_pending(strm);
        if (s.pending + 2 <= s.pending_buf_size) {
          put_byte(s, 255 & strm.adler);
          put_byte(s, strm.adler >> 8 & 255);
          strm.adler = 0;
          s.status = BUSY_STATE;
        }
      } else s.status = BUSY_STATE;
      if (0 !== s.pending) {
        flush_pending(strm);
        if (0 === strm.avail_out) {
          s.last_flush = -1;
          return Z_OK;
        }
      } else if (0 === strm.avail_in && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) return err(strm, Z_BUF_ERROR);
      if (s.status === FINISH_STATE && 0 !== strm.avail_in) return err(strm, Z_BUF_ERROR);
      if (0 !== strm.avail_in || 0 !== s.lookahead || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {
        var bstate = s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);
        bstate !== BS_FINISH_STARTED && bstate !== BS_FINISH_DONE || (s.status = FINISH_STATE);
        if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
          0 === strm.avail_out && (s.last_flush = -1);
          return Z_OK;
        }
        if (bstate === BS_BLOCK_DONE) {
          if (flush === Z_PARTIAL_FLUSH) trees._tr_align(s); else if (flush !== Z_BLOCK) {
            trees._tr_stored_block(s, 0, 0, false);
            if (flush === Z_FULL_FLUSH) {
              zero(s.head);
              if (0 === s.lookahead) {
                s.strstart = 0;
                s.block_start = 0;
                s.insert = 0;
              }
            }
          }
          flush_pending(strm);
          if (0 === strm.avail_out) {
            s.last_flush = -1;
            return Z_OK;
          }
        }
      }
      if (flush !== Z_FINISH) return Z_OK;
      if (s.wrap <= 0) return Z_STREAM_END;
      if (2 === s.wrap) {
        put_byte(s, 255 & strm.adler);
        put_byte(s, strm.adler >> 8 & 255);
        put_byte(s, strm.adler >> 16 & 255);
        put_byte(s, strm.adler >> 24 & 255);
        put_byte(s, 255 & strm.total_in);
        put_byte(s, strm.total_in >> 8 & 255);
        put_byte(s, strm.total_in >> 16 & 255);
        put_byte(s, strm.total_in >> 24 & 255);
      } else {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, 65535 & strm.adler);
      }
      flush_pending(strm);
      s.wrap > 0 && (s.wrap = -s.wrap);
      return 0 !== s.pending ? Z_OK : Z_STREAM_END;
    }
    function deflateEnd(strm) {
      var status;
      if (!strm || !strm.state) return Z_STREAM_ERROR;
      status = strm.state.status;
      if (status !== INIT_STATE && status !== EXTRA_STATE && status !== NAME_STATE && status !== COMMENT_STATE && status !== HCRC_STATE && status !== BUSY_STATE && status !== FINISH_STATE) return err(strm, Z_STREAM_ERROR);
      strm.state = null;
      return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
    }
    function deflateSetDictionary(strm, dictionary) {
      var dictLength = dictionary.length;
      var s;
      var str, n;
      var wrap;
      var avail;
      var next;
      var input;
      var tmpDict;
      if (!strm || !strm.state) return Z_STREAM_ERROR;
      s = strm.state;
      wrap = s.wrap;
      if (2 === wrap || 1 === wrap && s.status !== INIT_STATE || s.lookahead) return Z_STREAM_ERROR;
      1 === wrap && (strm.adler = adler32(strm.adler, dictionary, dictLength, 0));
      s.wrap = 0;
      if (dictLength >= s.w_size) {
        if (0 === wrap) {
          zero(s.head);
          s.strstart = 0;
          s.block_start = 0;
          s.insert = 0;
        }
        tmpDict = new utils.Buf8(s.w_size);
        utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
        dictionary = tmpDict;
        dictLength = s.w_size;
      }
      avail = strm.avail_in;
      next = strm.next_in;
      input = strm.input;
      strm.avail_in = dictLength;
      strm.next_in = 0;
      strm.input = dictionary;
      fill_window(s);
      while (s.lookahead >= MIN_MATCH) {
        str = s.strstart;
        n = s.lookahead - (MIN_MATCH - 1);
        do {
          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
          s.prev[str & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = str;
          str++;
        } while (--n);
        s.strstart = str;
        s.lookahead = MIN_MATCH - 1;
        fill_window(s);
      }
      s.strstart += s.lookahead;
      s.block_start = s.strstart;
      s.insert = s.lookahead;
      s.lookahead = 0;
      s.match_length = s.prev_length = MIN_MATCH - 1;
      s.match_available = 0;
      strm.next_in = next;
      strm.input = input;
      strm.avail_in = avail;
      s.wrap = wrap;
      return Z_OK;
    }
    exports.deflateInit = deflateInit;
    exports.deflateInit2 = deflateInit2;
    exports.deflateReset = deflateReset;
    exports.deflateResetKeep = deflateResetKeep;
    exports.deflateSetHeader = deflateSetHeader;
    exports.deflate = deflate;
    exports.deflateEnd = deflateEnd;
    exports.deflateSetDictionary = deflateSetDictionary;
    exports.deflateInfo = "pako deflate (from Nodeca project)";
  }, {
    "../utils/common": 8,
    "./adler32": 10,
    "./crc32": 12,
    "./messages": 18,
    "./trees": 19
  } ],
  14: [ function(require, module, exports) {
    "use strict";
    function GZheader() {
      this.text = 0;
      this.time = 0;
      this.xflags = 0;
      this.os = 0;
      this.extra = null;
      this.extra_len = 0;
      this.name = "";
      this.comment = "";
      this.hcrc = 0;
      this.done = false;
    }
    module.exports = GZheader;
  }, {} ],
  15: [ function(require, module, exports) {
    "use strict";
    var BAD = 30;
    var TYPE = 12;
    module.exports = function inflate_fast(strm, start) {
      var state;
      var _in;
      var last;
      var _out;
      var beg;
      var end;
      var dmax;
      var wsize;
      var whave;
      var wnext;
      var s_window;
      var hold;
      var bits;
      var lcode;
      var dcode;
      var lmask;
      var dmask;
      var here;
      var op;
      var len;
      var dist;
      var from;
      var from_source;
      var input, output;
      state = strm.state;
      _in = strm.next_in;
      input = strm.input;
      last = _in + (strm.avail_in - 5);
      _out = strm.next_out;
      output = strm.output;
      beg = _out - (start - strm.avail_out);
      end = _out + (strm.avail_out - 257);
      dmax = state.dmax;
      wsize = state.wsize;
      whave = state.whave;
      wnext = state.wnext;
      s_window = state.window;
      hold = state.hold;
      bits = state.bits;
      lcode = state.lencode;
      dcode = state.distcode;
      lmask = (1 << state.lenbits) - 1;
      dmask = (1 << state.distbits) - 1;
      top: do {
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = lcode[hold & lmask];
        dolen: for (;;) {
          op = here >>> 24;
          hold >>>= op;
          bits -= op;
          op = here >>> 16 & 255;
          if (0 === op) output[_out++] = 65535 & here; else {
            if (!(16 & op)) {
              if (0 === (64 & op)) {
                here = lcode[(65535 & here) + (hold & (1 << op) - 1)];
                continue dolen;
              }
              if (32 & op) {
                state.mode = TYPE;
                break top;
              }
              strm.msg = "invalid literal/length code";
              state.mode = BAD;
              break top;
            }
            len = 65535 & here;
            op &= 15;
            if (op) {
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
              len += hold & (1 << op) - 1;
              hold >>>= op;
              bits -= op;
            }
            if (bits < 15) {
              hold += input[_in++] << bits;
              bits += 8;
              hold += input[_in++] << bits;
              bits += 8;
            }
            here = dcode[hold & dmask];
            dodist: for (;;) {
              op = here >>> 24;
              hold >>>= op;
              bits -= op;
              op = here >>> 16 & 255;
              if (!(16 & op)) {
                if (0 === (64 & op)) {
                  here = dcode[(65535 & here) + (hold & (1 << op) - 1)];
                  continue dodist;
                }
                strm.msg = "invalid distance code";
                state.mode = BAD;
                break top;
              }
              dist = 65535 & here;
              op &= 15;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
                if (bits < op) {
                  hold += input[_in++] << bits;
                  bits += 8;
                }
              }
              dist += hold & (1 << op) - 1;
              if (dist > dmax) {
                strm.msg = "invalid distance too far back";
                state.mode = BAD;
                break top;
              }
              hold >>>= op;
              bits -= op;
              op = _out - beg;
              if (dist > op) {
                op = dist - op;
                if (op > whave && state.sane) {
                  strm.msg = "invalid distance too far back";
                  state.mode = BAD;
                  break top;
                }
                from = 0;
                from_source = s_window;
                if (0 === wnext) {
                  from += wsize - op;
                  if (op < len) {
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;
                    from_source = output;
                  }
                } else if (wnext < op) {
                  from += wsize + wnext - op;
                  op -= wnext;
                  if (op < len) {
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = 0;
                    if (wnext < len) {
                      op = wnext;
                      len -= op;
                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);
                      from = _out - dist;
                      from_source = output;
                    }
                  }
                } else {
                  from += wnext - op;
                  if (op < len) {
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;
                    from_source = output;
                  }
                }
                while (len > 2) {
                  output[_out++] = from_source[from++];
                  output[_out++] = from_source[from++];
                  output[_out++] = from_source[from++];
                  len -= 3;
                }
                if (len) {
                  output[_out++] = from_source[from++];
                  len > 1 && (output[_out++] = from_source[from++]);
                }
              } else {
                from = _out - dist;
                do {
                  output[_out++] = output[from++];
                  output[_out++] = output[from++];
                  output[_out++] = output[from++];
                  len -= 3;
                } while (len > 2);
                if (len) {
                  output[_out++] = output[from++];
                  len > 1 && (output[_out++] = output[from++]);
                }
              }
              break;
            }
          }
          break;
        }
      } while (_in < last && _out < end);
      len = bits >> 3;
      _in -= len;
      bits -= len << 3;
      hold &= (1 << bits) - 1;
      strm.next_in = _in;
      strm.next_out = _out;
      strm.avail_in = _in < last ? last - _in + 5 : 5 - (_in - last);
      strm.avail_out = _out < end ? end - _out + 257 : 257 - (_out - end);
      state.hold = hold;
      state.bits = bits;
      return;
    };
  }, {} ],
  16: [ function(require, module, exports) {
    "use strict";
    var utils = require("../utils/common");
    var adler32 = require("./adler32");
    var crc32 = require("./crc32");
    var inflate_fast = require("./inffast");
    var inflate_table = require("./inftrees");
    var CODES = 0;
    var LENS = 1;
    var DISTS = 2;
    var Z_FINISH = 4;
    var Z_BLOCK = 5;
    var Z_TREES = 6;
    var Z_OK = 0;
    var Z_STREAM_END = 1;
    var Z_NEED_DICT = 2;
    var Z_STREAM_ERROR = -2;
    var Z_DATA_ERROR = -3;
    var Z_MEM_ERROR = -4;
    var Z_BUF_ERROR = -5;
    var Z_DEFLATED = 8;
    var HEAD = 1;
    var FLAGS = 2;
    var TIME = 3;
    var OS = 4;
    var EXLEN = 5;
    var EXTRA = 6;
    var NAME = 7;
    var COMMENT = 8;
    var HCRC = 9;
    var DICTID = 10;
    var DICT = 11;
    var TYPE = 12;
    var TYPEDO = 13;
    var STORED = 14;
    var COPY_ = 15;
    var COPY = 16;
    var TABLE = 17;
    var LENLENS = 18;
    var CODELENS = 19;
    var LEN_ = 20;
    var LEN = 21;
    var LENEXT = 22;
    var DIST = 23;
    var DISTEXT = 24;
    var MATCH = 25;
    var LIT = 26;
    var CHECK = 27;
    var LENGTH = 28;
    var DONE = 29;
    var BAD = 30;
    var MEM = 31;
    var SYNC = 32;
    var ENOUGH_LENS = 852;
    var ENOUGH_DISTS = 592;
    var MAX_WBITS = 15;
    var DEF_WBITS = MAX_WBITS;
    function zswap32(q) {
      return (q >>> 24 & 255) + (q >>> 8 & 65280) + ((65280 & q) << 8) + ((255 & q) << 24);
    }
    function InflateState() {
      this.mode = 0;
      this.last = false;
      this.wrap = 0;
      this.havedict = false;
      this.flags = 0;
      this.dmax = 0;
      this.check = 0;
      this.total = 0;
      this.head = null;
      this.wbits = 0;
      this.wsize = 0;
      this.whave = 0;
      this.wnext = 0;
      this.window = null;
      this.hold = 0;
      this.bits = 0;
      this.length = 0;
      this.offset = 0;
      this.extra = 0;
      this.lencode = null;
      this.distcode = null;
      this.lenbits = 0;
      this.distbits = 0;
      this.ncode = 0;
      this.nlen = 0;
      this.ndist = 0;
      this.have = 0;
      this.next = null;
      this.lens = new utils.Buf16(320);
      this.work = new utils.Buf16(288);
      this.lendyn = null;
      this.distdyn = null;
      this.sane = 0;
      this.back = 0;
      this.was = 0;
    }
    function inflateResetKeep(strm) {
      var state;
      if (!strm || !strm.state) return Z_STREAM_ERROR;
      state = strm.state;
      strm.total_in = strm.total_out = state.total = 0;
      strm.msg = "";
      state.wrap && (strm.adler = 1 & state.wrap);
      state.mode = HEAD;
      state.last = 0;
      state.havedict = 0;
      state.dmax = 32768;
      state.head = null;
      state.hold = 0;
      state.bits = 0;
      state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
      state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);
      state.sane = 1;
      state.back = -1;
      return Z_OK;
    }
    function inflateReset(strm) {
      var state;
      if (!strm || !strm.state) return Z_STREAM_ERROR;
      state = strm.state;
      state.wsize = 0;
      state.whave = 0;
      state.wnext = 0;
      return inflateResetKeep(strm);
    }
    function inflateReset2(strm, windowBits) {
      var wrap;
      var state;
      if (!strm || !strm.state) return Z_STREAM_ERROR;
      state = strm.state;
      if (windowBits < 0) {
        wrap = 0;
        windowBits = -windowBits;
      } else {
        wrap = 1 + (windowBits >> 4);
        windowBits < 48 && (windowBits &= 15);
      }
      if (windowBits && (windowBits < 8 || windowBits > 15)) return Z_STREAM_ERROR;
      null !== state.window && state.wbits !== windowBits && (state.window = null);
      state.wrap = wrap;
      state.wbits = windowBits;
      return inflateReset(strm);
    }
    function inflateInit2(strm, windowBits) {
      var ret;
      var state;
      if (!strm) return Z_STREAM_ERROR;
      state = new InflateState();
      strm.state = state;
      state.window = null;
      ret = inflateReset2(strm, windowBits);
      ret !== Z_OK && (strm.state = null);
      return ret;
    }
    function inflateInit(strm) {
      return inflateInit2(strm, DEF_WBITS);
    }
    var virgin = true;
    var lenfix, distfix;
    function fixedtables(state) {
      if (virgin) {
        var sym;
        lenfix = new utils.Buf32(512);
        distfix = new utils.Buf32(32);
        sym = 0;
        while (sym < 144) state.lens[sym++] = 8;
        while (sym < 256) state.lens[sym++] = 9;
        while (sym < 280) state.lens[sym++] = 7;
        while (sym < 288) state.lens[sym++] = 8;
        inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, {
          bits: 9
        });
        sym = 0;
        while (sym < 32) state.lens[sym++] = 5;
        inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, {
          bits: 5
        });
        virgin = false;
      }
      state.lencode = lenfix;
      state.lenbits = 9;
      state.distcode = distfix;
      state.distbits = 5;
    }
    function updatewindow(strm, src, end, copy) {
      var dist;
      var state = strm.state;
      if (null === state.window) {
        state.wsize = 1 << state.wbits;
        state.wnext = 0;
        state.whave = 0;
        state.window = new utils.Buf8(state.wsize);
      }
      if (copy >= state.wsize) {
        utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
        state.wnext = 0;
        state.whave = state.wsize;
      } else {
        dist = state.wsize - state.wnext;
        dist > copy && (dist = copy);
        utils.arraySet(state.window, src, end - copy, dist, state.wnext);
        copy -= dist;
        if (copy) {
          utils.arraySet(state.window, src, end - copy, copy, 0);
          state.wnext = copy;
          state.whave = state.wsize;
        } else {
          state.wnext += dist;
          state.wnext === state.wsize && (state.wnext = 0);
          state.whave < state.wsize && (state.whave += dist);
        }
      }
      return 0;
    }
    function inflate(strm, flush) {
      var state;
      var input, output;
      var next;
      var put;
      var have, left;
      var hold;
      var bits;
      var _in, _out;
      var copy;
      var from;
      var from_source;
      var here = 0;
      var here_bits, here_op, here_val;
      var last_bits, last_op, last_val;
      var len;
      var ret;
      var hbuf = new utils.Buf8(4);
      var opts;
      var n;
      var order = [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];
      if (!strm || !strm.state || !strm.output || !strm.input && 0 !== strm.avail_in) return Z_STREAM_ERROR;
      state = strm.state;
      state.mode === TYPE && (state.mode = TYPEDO);
      put = strm.next_out;
      output = strm.output;
      left = strm.avail_out;
      next = strm.next_in;
      input = strm.input;
      have = strm.avail_in;
      hold = state.hold;
      bits = state.bits;
      _in = have;
      _out = left;
      ret = Z_OK;
      inf_leave: for (;;) switch (state.mode) {
       case HEAD:
        if (0 === state.wrap) {
          state.mode = TYPEDO;
          break;
        }
        while (bits < 16) {
          if (0 === have) break inf_leave;
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        if (2 & state.wrap && 35615 === hold) {
          state.check = 0;
          hbuf[0] = 255 & hold;
          hbuf[1] = hold >>> 8 & 255;
          state.check = crc32(state.check, hbuf, 2, 0);
          hold = 0;
          bits = 0;
          state.mode = FLAGS;
          break;
        }
        state.flags = 0;
        state.head && (state.head.done = false);
        if (!(1 & state.wrap) || (((255 & hold) << 8) + (hold >> 8)) % 31) {
          strm.msg = "incorrect header check";
          state.mode = BAD;
          break;
        }
        if ((15 & hold) !== Z_DEFLATED) {
          strm.msg = "unknown compression method";
          state.mode = BAD;
          break;
        }
        hold >>>= 4;
        bits -= 4;
        len = 8 + (15 & hold);
        if (0 === state.wbits) state.wbits = len; else if (len > state.wbits) {
          strm.msg = "invalid window size";
          state.mode = BAD;
          break;
        }
        state.dmax = 1 << len;
        strm.adler = state.check = 1;
        state.mode = 512 & hold ? DICTID : TYPE;
        hold = 0;
        bits = 0;
        break;

       case FLAGS:
        while (bits < 16) {
          if (0 === have) break inf_leave;
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        state.flags = hold;
        if ((255 & state.flags) !== Z_DEFLATED) {
          strm.msg = "unknown compression method";
          state.mode = BAD;
          break;
        }
        if (57344 & state.flags) {
          strm.msg = "unknown header flags set";
          state.mode = BAD;
          break;
        }
        state.head && (state.head.text = hold >> 8 & 1);
        if (512 & state.flags) {
          hbuf[0] = 255 & hold;
          hbuf[1] = hold >>> 8 & 255;
          state.check = crc32(state.check, hbuf, 2, 0);
        }
        hold = 0;
        bits = 0;
        state.mode = TIME;

       case TIME:
        while (bits < 32) {
          if (0 === have) break inf_leave;
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        state.head && (state.head.time = hold);
        if (512 & state.flags) {
          hbuf[0] = 255 & hold;
          hbuf[1] = hold >>> 8 & 255;
          hbuf[2] = hold >>> 16 & 255;
          hbuf[3] = hold >>> 24 & 255;
          state.check = crc32(state.check, hbuf, 4, 0);
        }
        hold = 0;
        bits = 0;
        state.mode = OS;

       case OS:
        while (bits < 16) {
          if (0 === have) break inf_leave;
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        if (state.head) {
          state.head.xflags = 255 & hold;
          state.head.os = hold >> 8;
        }
        if (512 & state.flags) {
          hbuf[0] = 255 & hold;
          hbuf[1] = hold >>> 8 & 255;
          state.check = crc32(state.check, hbuf, 2, 0);
        }
        hold = 0;
        bits = 0;
        state.mode = EXLEN;

       case EXLEN:
        if (1024 & state.flags) {
          while (bits < 16) {
            if (0 === have) break inf_leave;
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.length = hold;
          state.head && (state.head.extra_len = hold);
          if (512 & state.flags) {
            hbuf[0] = 255 & hold;
            hbuf[1] = hold >>> 8 & 255;
            state.check = crc32(state.check, hbuf, 2, 0);
          }
          hold = 0;
          bits = 0;
        } else state.head && (state.head.extra = null);
        state.mode = EXTRA;

       case EXTRA:
        if (1024 & state.flags) {
          copy = state.length;
          copy > have && (copy = have);
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              state.head.extra || (state.head.extra = new Array(state.head.extra_len));
              utils.arraySet(state.head.extra, input, next, copy, len);
            }
            512 & state.flags && (state.check = crc32(state.check, input, copy, next));
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) break inf_leave;
        }
        state.length = 0;
        state.mode = NAME;

       case NAME:
        if (2048 & state.flags) {
          if (0 === have) break inf_leave;
          copy = 0;
          do {
            len = input[next + copy++];
            state.head && len && state.length < 65536 && (state.head.name += String.fromCharCode(len));
          } while (len && copy < have);
          512 & state.flags && (state.check = crc32(state.check, input, copy, next));
          have -= copy;
          next += copy;
          if (len) break inf_leave;
        } else state.head && (state.head.name = null);
        state.length = 0;
        state.mode = COMMENT;

       case COMMENT:
        if (4096 & state.flags) {
          if (0 === have) break inf_leave;
          copy = 0;
          do {
            len = input[next + copy++];
            state.head && len && state.length < 65536 && (state.head.comment += String.fromCharCode(len));
          } while (len && copy < have);
          512 & state.flags && (state.check = crc32(state.check, input, copy, next));
          have -= copy;
          next += copy;
          if (len) break inf_leave;
        } else state.head && (state.head.comment = null);
        state.mode = HCRC;

       case HCRC:
        if (512 & state.flags) {
          while (bits < 16) {
            if (0 === have) break inf_leave;
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (hold !== (65535 & state.check)) {
            strm.msg = "header crc mismatch";
            state.mode = BAD;
            break;
          }
          hold = 0;
          bits = 0;
        }
        if (state.head) {
          state.head.hcrc = state.flags >> 9 & 1;
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE;
        break;

       case DICTID:
        while (bits < 32) {
          if (0 === have) break inf_leave;
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        strm.adler = state.check = zswap32(hold);
        hold = 0;
        bits = 0;
        state.mode = DICT;

       case DICT:
        if (0 === state.havedict) {
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          return Z_NEED_DICT;
        }
        strm.adler = state.check = 1;
        state.mode = TYPE;

       case TYPE:
        if (flush === Z_BLOCK || flush === Z_TREES) break inf_leave;

       case TYPEDO:
        if (state.last) {
          hold >>>= 7 & bits;
          bits -= 7 & bits;
          state.mode = CHECK;
          break;
        }
        while (bits < 3) {
          if (0 === have) break inf_leave;
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        state.last = 1 & hold;
        hold >>>= 1;
        bits -= 1;
        switch (3 & hold) {
         case 0:
          state.mode = STORED;
          break;

         case 1:
          fixedtables(state);
          state.mode = LEN_;
          if (flush === Z_TREES) {
            hold >>>= 2;
            bits -= 2;
            break inf_leave;
          }
          break;

         case 2:
          state.mode = TABLE;
          break;

         case 3:
          strm.msg = "invalid block type";
          state.mode = BAD;
        }
        hold >>>= 2;
        bits -= 2;
        break;

       case STORED:
        hold >>>= 7 & bits;
        bits -= 7 & bits;
        while (bits < 32) {
          if (0 === have) break inf_leave;
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        if ((65535 & hold) !== (hold >>> 16 ^ 65535)) {
          strm.msg = "invalid stored block lengths";
          state.mode = BAD;
          break;
        }
        state.length = 65535 & hold;
        hold = 0;
        bits = 0;
        state.mode = COPY_;
        if (flush === Z_TREES) break inf_leave;

       case COPY_:
        state.mode = COPY;

       case COPY:
        copy = state.length;
        if (copy) {
          copy > have && (copy = have);
          copy > left && (copy = left);
          if (0 === copy) break inf_leave;
          utils.arraySet(output, input, next, copy, put);
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        state.mode = TYPE;
        break;

       case TABLE:
        while (bits < 14) {
          if (0 === have) break inf_leave;
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        state.nlen = 257 + (31 & hold);
        hold >>>= 5;
        bits -= 5;
        state.ndist = 1 + (31 & hold);
        hold >>>= 5;
        bits -= 5;
        state.ncode = 4 + (15 & hold);
        hold >>>= 4;
        bits -= 4;
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = "too many length or distance symbols";
          state.mode = BAD;
          break;
        }
        state.have = 0;
        state.mode = LENLENS;

       case LENLENS:
        while (state.have < state.ncode) {
          while (bits < 3) {
            if (0 === have) break inf_leave;
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.lens[order[state.have++]] = 7 & hold;
          hold >>>= 3;
          bits -= 3;
        }
        while (state.have < 19) state.lens[order[state.have++]] = 0;
        state.lencode = state.lendyn;
        state.lenbits = 7;
        opts = {
          bits: state.lenbits
        };
        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;
        if (ret) {
          strm.msg = "invalid code lengths set";
          state.mode = BAD;
          break;
        }
        state.have = 0;
        state.mode = CODELENS;

       case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & (1 << state.lenbits) - 1];
            here_bits = here >>> 24;
            here_op = here >>> 16 & 255;
            here_val = 65535 & here;
            if (here_bits <= bits) break;
            if (0 === have) break inf_leave;
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (here_val < 16) {
            hold >>>= here_bits;
            bits -= here_bits;
            state.lens[state.have++] = here_val;
          } else {
            if (16 === here_val) {
              n = here_bits + 2;
              while (bits < n) {
                if (0 === have) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              hold >>>= here_bits;
              bits -= here_bits;
              if (0 === state.have) {
                strm.msg = "invalid bit length repeat";
                state.mode = BAD;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (3 & hold);
              hold >>>= 2;
              bits -= 2;
            } else if (17 === here_val) {
              n = here_bits + 3;
              while (bits < n) {
                if (0 === have) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              hold >>>= here_bits;
              bits -= here_bits;
              len = 0;
              copy = 3 + (7 & hold);
              hold >>>= 3;
              bits -= 3;
            } else {
              n = here_bits + 7;
              while (bits < n) {
                if (0 === have) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              hold >>>= here_bits;
              bits -= here_bits;
              len = 0;
              copy = 11 + (127 & hold);
              hold >>>= 7;
              bits -= 7;
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = "invalid bit length repeat";
              state.mode = BAD;
              break;
            }
            while (copy--) state.lens[state.have++] = len;
          }
        }
        if (state.mode === BAD) break;
        if (0 === state.lens[256]) {
          strm.msg = "invalid code -- missing end-of-block";
          state.mode = BAD;
          break;
        }
        state.lenbits = 9;
        opts = {
          bits: state.lenbits
        };
        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;
        if (ret) {
          strm.msg = "invalid literal/lengths set";
          state.mode = BAD;
          break;
        }
        state.distbits = 6;
        state.distcode = state.distdyn;
        opts = {
          bits: state.distbits
        };
        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        state.distbits = opts.bits;
        if (ret) {
          strm.msg = "invalid distances set";
          state.mode = BAD;
          break;
        }
        state.mode = LEN_;
        if (flush === Z_TREES) break inf_leave;

       case LEN_:
        state.mode = LEN;

       case LEN:
        if (have >= 6 && left >= 258) {
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          inflate_fast(strm, _out);
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          state.mode === TYPE && (state.back = -1);
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & (1 << state.lenbits) - 1];
          here_bits = here >>> 24;
          here_op = here >>> 16 & 255;
          here_val = 65535 & here;
          if (here_bits <= bits) break;
          if (0 === have) break inf_leave;
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        if (here_op && 0 === (240 & here_op)) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
            here_bits = here >>> 24;
            here_op = here >>> 16 & 255;
            here_val = 65535 & here;
            if (last_bits + here_bits <= bits) break;
            if (0 === have) break inf_leave;
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          hold >>>= last_bits;
          bits -= last_bits;
          state.back += last_bits;
        }
        hold >>>= here_bits;
        bits -= here_bits;
        state.back += here_bits;
        state.length = here_val;
        if (0 === here_op) {
          state.mode = LIT;
          break;
        }
        if (32 & here_op) {
          state.back = -1;
          state.mode = TYPE;
          break;
        }
        if (64 & here_op) {
          strm.msg = "invalid literal/length code";
          state.mode = BAD;
          break;
        }
        state.extra = 15 & here_op;
        state.mode = LENEXT;

       case LENEXT:
        if (state.extra) {
          n = state.extra;
          while (bits < n) {
            if (0 === have) break inf_leave;
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.length += hold & (1 << state.extra) - 1;
          hold >>>= state.extra;
          bits -= state.extra;
          state.back += state.extra;
        }
        state.was = state.length;
        state.mode = DIST;

       case DIST:
        for (;;) {
          here = state.distcode[hold & (1 << state.distbits) - 1];
          here_bits = here >>> 24;
          here_op = here >>> 16 & 255;
          here_val = 65535 & here;
          if (here_bits <= bits) break;
          if (0 === have) break inf_leave;
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        if (0 === (240 & here_op)) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
            here_bits = here >>> 24;
            here_op = here >>> 16 & 255;
            here_val = 65535 & here;
            if (last_bits + here_bits <= bits) break;
            if (0 === have) break inf_leave;
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          hold >>>= last_bits;
          bits -= last_bits;
          state.back += last_bits;
        }
        hold >>>= here_bits;
        bits -= here_bits;
        state.back += here_bits;
        if (64 & here_op) {
          strm.msg = "invalid distance code";
          state.mode = BAD;
          break;
        }
        state.offset = here_val;
        state.extra = 15 & here_op;
        state.mode = DISTEXT;

       case DISTEXT:
        if (state.extra) {
          n = state.extra;
          while (bits < n) {
            if (0 === have) break inf_leave;
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.offset += hold & (1 << state.extra) - 1;
          hold >>>= state.extra;
          bits -= state.extra;
          state.back += state.extra;
        }
        if (state.offset > state.dmax) {
          strm.msg = "invalid distance too far back";
          state.mode = BAD;
          break;
        }
        state.mode = MATCH;

       case MATCH:
        if (0 === left) break inf_leave;
        copy = _out - left;
        if (state.offset > copy) {
          copy = state.offset - copy;
          if (copy > state.whave && state.sane) {
            strm.msg = "invalid distance too far back";
            state.mode = BAD;
            break;
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          } else from = state.wnext - copy;
          copy > state.length && (copy = state.length);
          from_source = state.window;
        } else {
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        copy > left && (copy = left);
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        0 === state.length && (state.mode = LEN);
        break;

       case LIT:
        if (0 === left) break inf_leave;
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;

       case CHECK:
        if (state.wrap) {
          while (bits < 32) {
            if (0 === have) break inf_leave;
            have--;
            hold |= input[next++] << bits;
            bits += 8;
          }
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          _out && (strm.adler = state.check = state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));
          _out = left;
          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = "incorrect data check";
            state.mode = BAD;
            break;
          }
          hold = 0;
          bits = 0;
        }
        state.mode = LENGTH;

       case LENGTH:
        if (state.wrap && state.flags) {
          while (bits < 32) {
            if (0 === have) break inf_leave;
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (hold !== (4294967295 & state.total)) {
            strm.msg = "incorrect length check";
            state.mode = BAD;
            break;
          }
          hold = 0;
          bits = 0;
        }
        state.mode = DONE;

       case DONE:
        ret = Z_STREAM_END;
        break inf_leave;

       case BAD:
        ret = Z_DATA_ERROR;
        break inf_leave;

       case MEM:
        return Z_MEM_ERROR;

       case SYNC:
       default:
        return Z_STREAM_ERROR;
      }
      strm.next_out = put;
      strm.avail_out = left;
      strm.next_in = next;
      strm.avail_in = have;
      state.hold = hold;
      state.bits = bits;
      if ((state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH)) && updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
        state.mode = MEM;
        return Z_MEM_ERROR;
      }
      _in -= strm.avail_in;
      _out -= strm.avail_out;
      strm.total_in += _in;
      strm.total_out += _out;
      state.total += _out;
      state.wrap && _out && (strm.adler = state.check = state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
      strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
      (0 === _in && 0 === _out || flush === Z_FINISH) && ret === Z_OK && (ret = Z_BUF_ERROR);
      return ret;
    }
    function inflateEnd(strm) {
      if (!strm || !strm.state) return Z_STREAM_ERROR;
      var state = strm.state;
      state.window && (state.window = null);
      strm.state = null;
      return Z_OK;
    }
    function inflateGetHeader(strm, head) {
      var state;
      if (!strm || !strm.state) return Z_STREAM_ERROR;
      state = strm.state;
      if (0 === (2 & state.wrap)) return Z_STREAM_ERROR;
      state.head = head;
      head.done = false;
      return Z_OK;
    }
    function inflateSetDictionary(strm, dictionary) {
      var dictLength = dictionary.length;
      var state;
      var dictid;
      var ret;
      if (!strm || !strm.state) return Z_STREAM_ERROR;
      state = strm.state;
      if (0 !== state.wrap && state.mode !== DICT) return Z_STREAM_ERROR;
      if (state.mode === DICT) {
        dictid = 1;
        dictid = adler32(dictid, dictionary, dictLength, 0);
        if (dictid !== state.check) return Z_DATA_ERROR;
      }
      ret = updatewindow(strm, dictionary, dictLength, dictLength);
      if (ret) {
        state.mode = MEM;
        return Z_MEM_ERROR;
      }
      state.havedict = 1;
      return Z_OK;
    }
    exports.inflateReset = inflateReset;
    exports.inflateReset2 = inflateReset2;
    exports.inflateResetKeep = inflateResetKeep;
    exports.inflateInit = inflateInit;
    exports.inflateInit2 = inflateInit2;
    exports.inflate = inflate;
    exports.inflateEnd = inflateEnd;
    exports.inflateGetHeader = inflateGetHeader;
    exports.inflateSetDictionary = inflateSetDictionary;
    exports.inflateInfo = "pako inflate (from Nodeca project)";
  }, {
    "../utils/common": 8,
    "./adler32": 10,
    "./crc32": 12,
    "./inffast": 15,
    "./inftrees": 17
  } ],
  17: [ function(require, module, exports) {
    "use strict";
    var utils = require("../utils/common");
    var MAXBITS = 15;
    var ENOUGH_LENS = 852;
    var ENOUGH_DISTS = 592;
    var CODES = 0;
    var LENS = 1;
    var DISTS = 2;
    var lbase = [ 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0 ];
    var lext = [ 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78 ];
    var dbase = [ 1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0 ];
    var dext = [ 16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64 ];
    module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
      var bits = opts.bits;
      var len = 0;
      var sym = 0;
      var min = 0, max = 0;
      var root = 0;
      var curr = 0;
      var drop = 0;
      var left = 0;
      var used = 0;
      var huff = 0;
      var incr;
      var fill;
      var low;
      var mask;
      var next;
      var base = null;
      var base_index = 0;
      var end;
      var count = new utils.Buf16(MAXBITS + 1);
      var offs = new utils.Buf16(MAXBITS + 1);
      var extra = null;
      var extra_index = 0;
      var here_bits, here_op, here_val;
      for (len = 0; len <= MAXBITS; len++) count[len] = 0;
      for (sym = 0; sym < codes; sym++) count[lens[lens_index + sym]]++;
      root = bits;
      for (max = MAXBITS; max >= 1; max--) if (0 !== count[max]) break;
      root > max && (root = max);
      if (0 === max) {
        table[table_index++] = 20971520;
        table[table_index++] = 20971520;
        opts.bits = 1;
        return 0;
      }
      for (min = 1; min < max; min++) if (0 !== count[min]) break;
      root < min && (root = min);
      left = 1;
      for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
        if (left < 0) return -1;
      }
      if (left > 0 && (type === CODES || 1 !== max)) return -1;
      offs[1] = 0;
      for (len = 1; len < MAXBITS; len++) offs[len + 1] = offs[len] + count[len];
      for (sym = 0; sym < codes; sym++) 0 !== lens[lens_index + sym] && (work[offs[lens[lens_index + sym]]++] = sym);
      if (type === CODES) {
        base = extra = work;
        end = 19;
      } else if (type === LENS) {
        base = lbase;
        base_index -= 257;
        extra = lext;
        extra_index -= 257;
        end = 256;
      } else {
        base = dbase;
        extra = dext;
        end = -1;
      }
      huff = 0;
      sym = 0;
      len = min;
      next = table_index;
      curr = root;
      drop = 0;
      low = -1;
      used = 1 << root;
      mask = used - 1;
      if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) return 1;
      for (;;) {
        here_bits = len - drop;
        if (work[sym] < end) {
          here_op = 0;
          here_val = work[sym];
        } else if (work[sym] > end) {
          here_op = extra[extra_index + work[sym]];
          here_val = base[base_index + work[sym]];
        } else {
          here_op = 96;
          here_val = 0;
        }
        incr = 1 << len - drop;
        fill = 1 << curr;
        min = fill;
        do {
          fill -= incr;
          table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
        } while (0 !== fill);
        incr = 1 << len - 1;
        while (huff & incr) incr >>= 1;
        if (0 !== incr) {
          huff &= incr - 1;
          huff += incr;
        } else huff = 0;
        sym++;
        if (0 === --count[len]) {
          if (len === max) break;
          len = lens[lens_index + work[sym]];
        }
        if (len > root && (huff & mask) !== low) {
          0 === drop && (drop = root);
          next += min;
          curr = len - drop;
          left = 1 << curr;
          while (curr + drop < max) {
            left -= count[curr + drop];
            if (left <= 0) break;
            curr++;
            left <<= 1;
          }
          used += 1 << curr;
          if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) return 1;
          low = huff & mask;
          table[low] = root << 24 | curr << 16 | next - table_index | 0;
        }
      }
      0 !== huff && (table[next + huff] = len - drop << 24 | 64 << 16 | 0);
      opts.bits = root;
      return 0;
    };
  }, {
    "../utils/common": 8
  } ],
  18: [ function(require, module, exports) {
    "use strict";
    module.exports = {
      2: "need dictionary",
      1: "stream end",
      0: "",
      "-1": "file error",
      "-2": "stream error",
      "-3": "data error",
      "-4": "insufficient memory",
      "-5": "buffer error",
      "-6": "incompatible version"
    };
  }, {} ],
  19: [ function(require, module, exports) {
    "use strict";
    var utils = require("../utils/common");
    var Z_FIXED = 4;
    var Z_BINARY = 0;
    var Z_TEXT = 1;
    var Z_UNKNOWN = 2;
    function zero(buf) {
      var len = buf.length;
      while (--len >= 0) buf[len] = 0;
    }
    var STORED_BLOCK = 0;
    var STATIC_TREES = 1;
    var DYN_TREES = 2;
    var MIN_MATCH = 3;
    var MAX_MATCH = 258;
    var LENGTH_CODES = 29;
    var LITERALS = 256;
    var L_CODES = LITERALS + 1 + LENGTH_CODES;
    var D_CODES = 30;
    var BL_CODES = 19;
    var HEAP_SIZE = 2 * L_CODES + 1;
    var MAX_BITS = 15;
    var Buf_size = 16;
    var MAX_BL_BITS = 7;
    var END_BLOCK = 256;
    var REP_3_6 = 16;
    var REPZ_3_10 = 17;
    var REPZ_11_138 = 18;
    var extra_lbits = [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0 ];
    var extra_dbits = [ 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13 ];
    var extra_blbits = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7 ];
    var bl_order = [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];
    var DIST_CODE_LEN = 512;
    var static_ltree = new Array(2 * (L_CODES + 2));
    zero(static_ltree);
    var static_dtree = new Array(2 * D_CODES);
    zero(static_dtree);
    var _dist_code = new Array(DIST_CODE_LEN);
    zero(_dist_code);
    var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);
    zero(_length_code);
    var base_length = new Array(LENGTH_CODES);
    zero(base_length);
    var base_dist = new Array(D_CODES);
    zero(base_dist);
    function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
      this.static_tree = static_tree;
      this.extra_bits = extra_bits;
      this.extra_base = extra_base;
      this.elems = elems;
      this.max_length = max_length;
      this.has_stree = static_tree && static_tree.length;
    }
    var static_l_desc;
    var static_d_desc;
    var static_bl_desc;
    function TreeDesc(dyn_tree, stat_desc) {
      this.dyn_tree = dyn_tree;
      this.max_code = 0;
      this.stat_desc = stat_desc;
    }
    function d_code(dist) {
      return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
    }
    function put_short(s, w) {
      s.pending_buf[s.pending++] = 255 & w;
      s.pending_buf[s.pending++] = w >>> 8 & 255;
    }
    function send_bits(s, value, length) {
      if (s.bi_valid > Buf_size - length) {
        s.bi_buf |= value << s.bi_valid & 65535;
        put_short(s, s.bi_buf);
        s.bi_buf = value >> Buf_size - s.bi_valid;
        s.bi_valid += length - Buf_size;
      } else {
        s.bi_buf |= value << s.bi_valid & 65535;
        s.bi_valid += length;
      }
    }
    function send_code(s, c, tree) {
      send_bits(s, tree[2 * c], tree[2 * c + 1]);
    }
    function bi_reverse(code, len) {
      var res = 0;
      do {
        res |= 1 & code;
        code >>>= 1;
        res <<= 1;
      } while (--len > 0);
      return res >>> 1;
    }
    function bi_flush(s) {
      if (16 === s.bi_valid) {
        put_short(s, s.bi_buf);
        s.bi_buf = 0;
        s.bi_valid = 0;
      } else if (s.bi_valid >= 8) {
        s.pending_buf[s.pending++] = 255 & s.bi_buf;
        s.bi_buf >>= 8;
        s.bi_valid -= 8;
      }
    }
    function gen_bitlen(s, desc) {
      var tree = desc.dyn_tree;
      var max_code = desc.max_code;
      var stree = desc.stat_desc.static_tree;
      var has_stree = desc.stat_desc.has_stree;
      var extra = desc.stat_desc.extra_bits;
      var base = desc.stat_desc.extra_base;
      var max_length = desc.stat_desc.max_length;
      var h;
      var n, m;
      var bits;
      var xbits;
      var f;
      var overflow = 0;
      for (bits = 0; bits <= MAX_BITS; bits++) s.bl_count[bits] = 0;
      tree[2 * s.heap[s.heap_max] + 1] = 0;
      for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
        n = s.heap[h];
        bits = tree[2 * tree[2 * n + 1] + 1] + 1;
        if (bits > max_length) {
          bits = max_length;
          overflow++;
        }
        tree[2 * n + 1] = bits;
        if (n > max_code) continue;
        s.bl_count[bits]++;
        xbits = 0;
        n >= base && (xbits = extra[n - base]);
        f = tree[2 * n];
        s.opt_len += f * (bits + xbits);
        has_stree && (s.static_len += f * (stree[2 * n + 1] + xbits));
      }
      if (0 === overflow) return;
      do {
        bits = max_length - 1;
        while (0 === s.bl_count[bits]) bits--;
        s.bl_count[bits]--;
        s.bl_count[bits + 1] += 2;
        s.bl_count[max_length]--;
        overflow -= 2;
      } while (overflow > 0);
      for (bits = max_length; 0 !== bits; bits--) {
        n = s.bl_count[bits];
        while (0 !== n) {
          m = s.heap[--h];
          if (m > max_code) continue;
          if (tree[2 * m + 1] !== bits) {
            s.opt_len += (bits - tree[2 * m + 1]) * tree[2 * m];
            tree[2 * m + 1] = bits;
          }
          n--;
        }
      }
    }
    function gen_codes(tree, max_code, bl_count) {
      var next_code = new Array(MAX_BITS + 1);
      var code = 0;
      var bits;
      var n;
      for (bits = 1; bits <= MAX_BITS; bits++) next_code[bits] = code = code + bl_count[bits - 1] << 1;
      for (n = 0; n <= max_code; n++) {
        var len = tree[2 * n + 1];
        if (0 === len) continue;
        tree[2 * n] = bi_reverse(next_code[len]++, len);
      }
    }
    function tr_static_init() {
      var n;
      var bits;
      var length;
      var code;
      var dist;
      var bl_count = new Array(MAX_BITS + 1);
      length = 0;
      for (code = 0; code < LENGTH_CODES - 1; code++) {
        base_length[code] = length;
        for (n = 0; n < 1 << extra_lbits[code]; n++) _length_code[length++] = code;
      }
      _length_code[length - 1] = code;
      dist = 0;
      for (code = 0; code < 16; code++) {
        base_dist[code] = dist;
        for (n = 0; n < 1 << extra_dbits[code]; n++) _dist_code[dist++] = code;
      }
      dist >>= 7;
      for (;code < D_CODES; code++) {
        base_dist[code] = dist << 7;
        for (n = 0; n < 1 << extra_dbits[code] - 7; n++) _dist_code[256 + dist++] = code;
      }
      for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
      n = 0;
      while (n <= 143) {
        static_ltree[2 * n + 1] = 8;
        n++;
        bl_count[8]++;
      }
      while (n <= 255) {
        static_ltree[2 * n + 1] = 9;
        n++;
        bl_count[9]++;
      }
      while (n <= 279) {
        static_ltree[2 * n + 1] = 7;
        n++;
        bl_count[7]++;
      }
      while (n <= 287) {
        static_ltree[2 * n + 1] = 8;
        n++;
        bl_count[8]++;
      }
      gen_codes(static_ltree, L_CODES + 1, bl_count);
      for (n = 0; n < D_CODES; n++) {
        static_dtree[2 * n + 1] = 5;
        static_dtree[2 * n] = bi_reverse(n, 5);
      }
      static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
      static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
      static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS);
    }
    function init_block(s) {
      var n;
      for (n = 0; n < L_CODES; n++) s.dyn_ltree[2 * n] = 0;
      for (n = 0; n < D_CODES; n++) s.dyn_dtree[2 * n] = 0;
      for (n = 0; n < BL_CODES; n++) s.bl_tree[2 * n] = 0;
      s.dyn_ltree[2 * END_BLOCK] = 1;
      s.opt_len = s.static_len = 0;
      s.last_lit = s.matches = 0;
    }
    function bi_windup(s) {
      s.bi_valid > 8 ? put_short(s, s.bi_buf) : s.bi_valid > 0 && (s.pending_buf[s.pending++] = s.bi_buf);
      s.bi_buf = 0;
      s.bi_valid = 0;
    }
    function copy_block(s, buf, len, header) {
      bi_windup(s);
      if (header) {
        put_short(s, len);
        put_short(s, ~len);
      }
      utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
      s.pending += len;
    }
    function smaller(tree, n, m, depth) {
      var _n2 = 2 * n;
      var _m2 = 2 * m;
      return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n] <= depth[m];
    }
    function pqdownheap(s, tree, k) {
      var v = s.heap[k];
      var j = k << 1;
      while (j <= s.heap_len) {
        j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth) && j++;
        if (smaller(tree, v, s.heap[j], s.depth)) break;
        s.heap[k] = s.heap[j];
        k = j;
        j <<= 1;
      }
      s.heap[k] = v;
    }
    function compress_block(s, ltree, dtree) {
      var dist;
      var lc;
      var lx = 0;
      var code;
      var extra;
      if (0 !== s.last_lit) do {
        dist = s.pending_buf[s.d_buf + 2 * lx] << 8 | s.pending_buf[s.d_buf + 2 * lx + 1];
        lc = s.pending_buf[s.l_buf + lx];
        lx++;
        if (0 === dist) send_code(s, lc, ltree); else {
          code = _length_code[lc];
          send_code(s, code + LITERALS + 1, ltree);
          extra = extra_lbits[code];
          if (0 !== extra) {
            lc -= base_length[code];
            send_bits(s, lc, extra);
          }
          dist--;
          code = d_code(dist);
          send_code(s, code, dtree);
          extra = extra_dbits[code];
          if (0 !== extra) {
            dist -= base_dist[code];
            send_bits(s, dist, extra);
          }
        }
      } while (lx < s.last_lit);
      send_code(s, END_BLOCK, ltree);
    }
    function build_tree(s, desc) {
      var tree = desc.dyn_tree;
      var stree = desc.stat_desc.static_tree;
      var has_stree = desc.stat_desc.has_stree;
      var elems = desc.stat_desc.elems;
      var n, m;
      var max_code = -1;
      var node;
      s.heap_len = 0;
      s.heap_max = HEAP_SIZE;
      for (n = 0; n < elems; n++) if (0 !== tree[2 * n]) {
        s.heap[++s.heap_len] = max_code = n;
        s.depth[n] = 0;
      } else tree[2 * n + 1] = 0;
      while (s.heap_len < 2) {
        node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
        tree[2 * node] = 1;
        s.depth[node] = 0;
        s.opt_len--;
        has_stree && (s.static_len -= stree[2 * node + 1]);
      }
      desc.max_code = max_code;
      for (n = s.heap_len >> 1; n >= 1; n--) pqdownheap(s, tree, n);
      node = elems;
      do {
        n = s.heap[1];
        s.heap[1] = s.heap[s.heap_len--];
        pqdownheap(s, tree, 1);
        m = s.heap[1];
        s.heap[--s.heap_max] = n;
        s.heap[--s.heap_max] = m;
        tree[2 * node] = tree[2 * n] + tree[2 * m];
        s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
        tree[2 * n + 1] = tree[2 * m + 1] = node;
        s.heap[1] = node++;
        pqdownheap(s, tree, 1);
      } while (s.heap_len >= 2);
      s.heap[--s.heap_max] = s.heap[1];
      gen_bitlen(s, desc);
      gen_codes(tree, max_code, s.bl_count);
    }
    function scan_tree(s, tree, max_code) {
      var n;
      var prevlen = -1;
      var curlen;
      var nextlen = tree[1];
      var count = 0;
      var max_count = 7;
      var min_count = 4;
      if (0 === nextlen) {
        max_count = 138;
        min_count = 3;
      }
      tree[2 * (max_code + 1) + 1] = 65535;
      for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[2 * (n + 1) + 1];
        if (++count < max_count && curlen === nextlen) continue;
        if (count < min_count) s.bl_tree[2 * curlen] += count; else if (0 !== curlen) {
          curlen !== prevlen && s.bl_tree[2 * curlen]++;
          s.bl_tree[2 * REP_3_6]++;
        } else count <= 10 ? s.bl_tree[2 * REPZ_3_10]++ : s.bl_tree[2 * REPZ_11_138]++;
        count = 0;
        prevlen = curlen;
        if (0 === nextlen) {
          max_count = 138;
          min_count = 3;
        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;
        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    }
    function send_tree(s, tree, max_code) {
      var n;
      var prevlen = -1;
      var curlen;
      var nextlen = tree[1];
      var count = 0;
      var max_count = 7;
      var min_count = 4;
      if (0 === nextlen) {
        max_count = 138;
        min_count = 3;
      }
      for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[2 * (n + 1) + 1];
        if (++count < max_count && curlen === nextlen) continue;
        if (count < min_count) do {
          send_code(s, curlen, s.bl_tree);
        } while (0 !== --count); else if (0 !== curlen) {
          if (curlen !== prevlen) {
            send_code(s, curlen, s.bl_tree);
            count--;
          }
          send_code(s, REP_3_6, s.bl_tree);
          send_bits(s, count - 3, 2);
        } else if (count <= 10) {
          send_code(s, REPZ_3_10, s.bl_tree);
          send_bits(s, count - 3, 3);
        } else {
          send_code(s, REPZ_11_138, s.bl_tree);
          send_bits(s, count - 11, 7);
        }
        count = 0;
        prevlen = curlen;
        if (0 === nextlen) {
          max_count = 138;
          min_count = 3;
        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;
        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    }
    function build_bl_tree(s) {
      var max_blindex;
      scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
      scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
      build_tree(s, s.bl_desc);
      for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) if (0 !== s.bl_tree[2 * bl_order[max_blindex] + 1]) break;
      s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
      return max_blindex;
    }
    function send_all_trees(s, lcodes, dcodes, blcodes) {
      var rank;
      send_bits(s, lcodes - 257, 5);
      send_bits(s, dcodes - 1, 5);
      send_bits(s, blcodes - 4, 4);
      for (rank = 0; rank < blcodes; rank++) send_bits(s, s.bl_tree[2 * bl_order[rank] + 1], 3);
      send_tree(s, s.dyn_ltree, lcodes - 1);
      send_tree(s, s.dyn_dtree, dcodes - 1);
    }
    function detect_data_type(s) {
      var black_mask = 4093624447;
      var n;
      for (n = 0; n <= 31; n++, black_mask >>>= 1) if (1 & black_mask && 0 !== s.dyn_ltree[2 * n]) return Z_BINARY;
      if (0 !== s.dyn_ltree[18] || 0 !== s.dyn_ltree[20] || 0 !== s.dyn_ltree[26]) return Z_TEXT;
      for (n = 32; n < LITERALS; n++) if (0 !== s.dyn_ltree[2 * n]) return Z_TEXT;
      return Z_BINARY;
    }
    var static_init_done = false;
    function _tr_init(s) {
      if (!static_init_done) {
        tr_static_init();
        static_init_done = true;
      }
      s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
      s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
      s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
      s.bi_buf = 0;
      s.bi_valid = 0;
      init_block(s);
    }
    function _tr_stored_block(s, buf, stored_len, last) {
      send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
      copy_block(s, buf, stored_len, true);
    }
    function _tr_align(s) {
      send_bits(s, STATIC_TREES << 1, 3);
      send_code(s, END_BLOCK, static_ltree);
      bi_flush(s);
    }
    function _tr_flush_block(s, buf, stored_len, last) {
      var opt_lenb, static_lenb;
      var max_blindex = 0;
      if (s.level > 0) {
        s.strm.data_type === Z_UNKNOWN && (s.strm.data_type = detect_data_type(s));
        build_tree(s, s.l_desc);
        build_tree(s, s.d_desc);
        max_blindex = build_bl_tree(s);
        opt_lenb = s.opt_len + 3 + 7 >>> 3;
        static_lenb = s.static_len + 3 + 7 >>> 3;
        static_lenb <= opt_lenb && (opt_lenb = static_lenb);
      } else opt_lenb = static_lenb = stored_len + 5;
      if (stored_len + 4 <= opt_lenb && -1 !== buf) _tr_stored_block(s, buf, stored_len, last); else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {
        send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
        compress_block(s, static_ltree, static_dtree);
      } else {
        send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
        send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
        compress_block(s, s.dyn_ltree, s.dyn_dtree);
      }
      init_block(s);
      last && bi_windup(s);
    }
    function _tr_tally(s, dist, lc) {
      s.pending_buf[s.d_buf + 2 * s.last_lit] = dist >>> 8 & 255;
      s.pending_buf[s.d_buf + 2 * s.last_lit + 1] = 255 & dist;
      s.pending_buf[s.l_buf + s.last_lit] = 255 & lc;
      s.last_lit++;
      if (0 === dist) s.dyn_ltree[2 * lc]++; else {
        s.matches++;
        dist--;
        s.dyn_ltree[2 * (_length_code[lc] + LITERALS + 1)]++;
        s.dyn_dtree[2 * d_code(dist)]++;
      }
      return s.last_lit === s.lit_bufsize - 1;
    }
    exports._tr_init = _tr_init;
    exports._tr_stored_block = _tr_stored_block;
    exports._tr_flush_block = _tr_flush_block;
    exports._tr_tally = _tr_tally;
    exports._tr_align = _tr_align;
  }, {
    "../utils/common": 8
  } ],
  20: [ function(require, module, exports) {
    "use strict";
    function ZStream() {
      this.input = null;
      this.next_in = 0;
      this.avail_in = 0;
      this.total_in = 0;
      this.output = null;
      this.next_out = 0;
      this.avail_out = 0;
      this.total_out = 0;
      this.msg = "";
      this.state = null;
      this.data_type = 2;
      this.adler = 0;
    }
    module.exports = ZStream;
  }, {} ],
  GEventDef: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "26d4fgHbztL2bmm6TMpMnl8", "GEventDef");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = {
      usersUpdated: "usersUpdated",
      closeActivityModule: "closeActivityModule",
      createCommonRuleData: "createCommonRuleData",
      closeDefaultRulePanel: "closeDefaultRulePanel",
      bull_showResultType: "modules_showResultType",
      bull_giveCardEnd: "modules_giveCardsEnd",
      bull_flyGold: "modules_flyGold",
      bull_flyGoldEnd: "modules_flyGoldEnd",
      bull_cuopai: "modules_cuopai",
      bull_cuopaiEnd: "modules_cuopaiEnd",
      bull_setAllTableLaebl: "setAllTableLaebl",
      bull_setRoomInfoFont: "setRoomInfoFont",
      room_closesetting: "room_closesetting",
      sss_startBipai: "sss_startBipai",
      sss_startDaqiang: "sss_startDaqiang",
      sss_specialCard: "sss_specialCard",
      sss_quanleida: "sss_quanleida",
      sss_roundEnd: "sss_roundEnd",
      sss_changeCardBg: "sss_changeCardBg",
      sss_changeTableBg: "sss_changeTableBg",
      mj_chosecard: "mj_chosecard",
      voice_JoinRoomOk: "voice_JoinRoomOk",
      loopChanged: "loopChanged"
    };
    cc._RF.pop();
  }, {} ],
  GameAudioCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9cc89lJCtNGW4XULCqirNxP", "GameAudioCfg");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCfg_1 = require("../Libs/BaseCfg");
    var GameCateCfg_1 = require("./GameCateCfg");
    var SettingMgr_1 = require("../GameMgrs/SettingMgr");
    var GameAudioCfg = function(_super) {
      __extends(GameAudioCfg, _super);
      function GameAudioCfg() {
        var _this = _super.call(this) || this;
        _this.gameaudioData = null;
        _this.gameaudioPath = null;
        _this.gamecode = null;
        _this.sexmap = {
          1: 0,
          2: 1,
          3: 1
        };
        _this.language = 0;
        _this.curCfg = null;
        _this.gameaudiodic = null;
        _this.quickaudiodic = null;
        _this.processaudio = null;
        _this.bgmaudio = null;
        _this.path = null;
        _this.backgroundMusicId = null;
        _this.gameaudioPath = _this.getFullPath("gameaudio");
        return _this;
      }
      GameAudioCfg.getInstance = function() {
        this._instance || (this._instance = new GameAudioCfg());
        return this._instance;
      };
      GameAudioCfg.prototype.loadCb = function(name, data) {
        this.loaded = true;
        this.gameaudioData = data;
      };
      GameAudioCfg.prototype.getData = function() {
        return this.gameaudioData;
      };
      GameAudioCfg.prototype.load = function() {
        this.loadRes(this.gameaudioPath, this.loadCb);
      };
      GameAudioCfg.prototype.setGameId = function(gameid) {
        var game = GameCateCfg_1.default.getInstance().getGameById(gameid);
        this.gamecode = game.code;
        console.log("音效字典", this.gamecode, this.gameaudioData);
        this.curCfg = this.gameaudioData[this.gamecode];
        this.updateCfg();
      };
      GameAudioCfg.prototype.setLanguage = function(language) {
        this.language = language;
        this.updateCfg();
      };
      GameAudioCfg.prototype.getQuickAudioDic = function() {
        return this.quickaudiodic;
      };
      GameAudioCfg.prototype.updateCfg = function() {
        this.gameaudiodic = {};
        this.quickaudiodic = {};
        this.processaudio = {};
        this.bgmaudio = {};
        var cfglines = this.curCfg;
        if (!cfglines) {
          console.log("没有此类游戏的音频配置");
          return;
        }
        console.log("当前音效配置", cfglines);
        for (var i = 0; i < cfglines.length; i++) {
          var line = cfglines[i];
          var name = line.name;
          var sex = line.sex;
          var localism = line.localism;
          switch (line.type) {
           case 0:
            this.gameaudiodic[name] || (this.gameaudiodic[name] = [ [ [], [] ], [ [], [] ] ]);
            this.gameaudiodic[name][sex][localism].push(line.file);
            break;

           case 1:
            this.quickaudiodic[name] || (this.quickaudiodic[name] = [ [], [] ]);
            this.quickaudiodic[name][sex].push(line.file);
            break;

           case 3:
            this.processaudio[name] || (this.processaudio[name] = []);
            this.processaudio[name].push(line.file);
            break;

           case 4:
            this.bgmaudio[name] || (this.bgmaudio[name] = []);
            this.bgmaudio[name].push(line.file);
            break;

           default:
            console.warn("GameAudioCfg.updateCfg() -> line.type 的值不在预期中, 不做处理! 请检查合理性!");
          }
        }
      };
      GameAudioCfg.prototype.play = function(name, sex) {
        var sextype = this.sexmap[sex];
        var cfgbyname = this.gameaudiodic[name];
        if (!cfgbyname) return console.error("找不到" + name + "的音频资源");
        var cfgbysex = cfgbyname[sextype];
        if (!cfgbysex) {
          console.log(cfgbyname);
          return console.error("找不到" + name + "的性别" + sex + "音频资源");
        }
        var rootPath = "resources/audio/Games/" + this.gamecode;
        var index = 0;
        SettingMgr_1.default.getInstance().musicInfo.bTopolectSwitch && (index = 1);
        var randomindex = parseInt(Math.random() * cfgbysex[index].length);
        var filename = rootPath + "/" + cfgbysex[index][randomindex] + ".mp3";
        console.log("游戏内声音路径", filename);
        var volume = SettingMgr_1.default.getInstance().getMusicInfo().yyVolume / 100;
        SettingMgr_1.default.getInstance().getMusicInfo().bYySwitch || (volume = 0);
        cc.loader.load(cc.url.raw(filename), function(err, data) {
          if (err) {
            index = index ? 0 : 1;
            filename = rootPath + "/" + cfgbysex[index][randomindex] + ".mp3";
            cc.loader.load(cc.url.raw(filename), function(err, data) {
              if (err) return;
              cc.audioEngine.play(cc.url.raw(filename), false, volume);
            }.bind(this));
            return;
          }
          cc.audioEngine.play(cc.url.raw(filename), false, volume);
        }.bind(this));
      };
      GameAudioCfg.prototype.playGameProcessAudio = function(name, flag) {
        var audioNameArr = this.processaudio[name];
        if (!audioNameArr) return console.error("找不到" + name + "的音频资源");
        var index = parseInt(Math.random() * audioNameArr.length);
        var rootPath = "resources/audio/Games/" + this.gamecode + "/" + audioNameArr[index] + ".mp3";
        var url = cc.url.raw(rootPath);
        var volume = SettingMgr_1.default.getInstance().getMusicInfo().effectVolume / 100;
        SettingMgr_1.default.getInstance().getMusicInfo().bEffectSwitch || (volume = 0);
        cc.audioEngine.play(url, flag, volume);
      };
      GameAudioCfg.prototype.playBGM = function(name) {
        var audioNameArr = this.bgmaudio[name];
        if (!audioNameArr) return console.error("找不到" + name + "的音频资源");
        var index = parseInt(Math.random() * audioNameArr.length);
        var rootPath = "resources/audio/Games/" + this.gamecode + "/" + audioNameArr[index] + ".mp3";
        var url = cc.url.raw(rootPath);
        var volume = SettingMgr_1.default.getInstance().getMusicInfo().musicVolume / 100;
        SettingMgr_1.default.getInstance().getMusicInfo().bMusicSwitch || (volume = 0);
        cc.audioEngine.stopAll();
        this.backgroundMusicId = cc.audioEngine.play(url, true, volume);
      };
      GameAudioCfg.prototype.stopbackgroudMusic = function() {
        this.backgroundMusicId ? cc.audioEngine.stop(this.backgroundMusicId) : this.backgroundMusicId = null;
      };
      GameAudioCfg.prototype.pausebackgroudMusic = function() {
        this.backgroundMusicId ? cc.audioEngine.pause(this.backgroundMusicId) : this.backgroundMusicId = null;
      };
      GameAudioCfg.prototype.resumebackgroudMusic = function() {
        var volume = SettingMgr_1.default.getInstance().getMusicInfo().musicVolume / 100;
        SettingMgr_1.default.getInstance().getMusicInfo().bMusicSwitch || (volume = 0);
        if (this.backgroundMusicId) {
          cc.audioEngine.setVolume(this.backgroundMusicId, volume);
          cc.audioEngine.resume(this.backgroundMusicId);
        } else this.backgroundMusicId = null;
      };
      return GameAudioCfg;
    }(BaseCfg_1.default);
    exports.default = GameAudioCfg;
    cc._RF.pop();
  }, {
    "../GameMgrs/SettingMgr": "SettingMgr",
    "../Libs/BaseCfg": "BaseCfg",
    "./GameCateCfg": "GameCateCfg"
  } ],
  GameCateCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cb581YEcQROPoaLRC6im/SG", "GameCateCfg");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCfg_1 = require("../Libs/BaseCfg");
    var ProductSettingCfg_1 = require("./ProductSettingCfg");
    var GameCateCfg = function(_super) {
      __extends(GameCateCfg, _super);
      function GameCateCfg() {
        var _this = _super.call(this) || this;
        _this.gamecatePath = null;
        _this.games = null;
        _this.gamecatePath = _this.getFullPath("gamecate");
        return _this;
      }
      GameCateCfg.getInstance = function() {
        this._instance || (this._instance = new GameCateCfg());
        return this._instance;
      };
      GameCateCfg.prototype.loadCb = function(name, data) {
        this.loaded = true;
        this.games = [];
        for (var i = 0; i < data.length; ++i) 1 == data[i].exist && this.games.push(data[i]);
      };
      GameCateCfg.prototype.refreshGames = function() {
        var newlist = [];
        for (var i = 0; i < this.games.length; ++i) {
          var item = this.games[i];
          ProductSettingCfg_1.default.getInstance().isContainGame(item.code) && newlist.push(item);
        }
        this.games = newlist;
      };
      GameCateCfg.prototype.getGames = function() {
        return this.games;
      };
      GameCateCfg.prototype.getGameIndex = function(id) {
        for (var i = 0; i < this.games.length; ++i) {
          var item = this.games[i];
          if (item.id == id) return i;
        }
        return 0;
      };
      GameCateCfg.prototype.getGameById = function(id) {
        for (var i = 0; i < this.games.length; ++i) {
          var item = this.games[i];
          if (item.id == id) return item;
        }
        return null;
      };
      GameCateCfg.prototype.load = function() {
        this.loadRes(this.gamecatePath, this.loadCb);
      };
      return GameCateCfg;
    }(BaseCfg_1.default);
    exports.default = GameCateCfg;
    cc._RF.pop();
  }, {
    "../Libs/BaseCfg": "BaseCfg",
    "./ProductSettingCfg": "ProductSettingCfg"
  } ],
  GameFreeMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "75be1f8gllBD57Qk62W9bJ6", "GameFreeMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var GameFreeMgr = function(_super) {
      __extends(GameFreeMgr, _super);
      function GameFreeMgr() {
        var _this = _super.call(this) || this;
        _this.routes = null;
        _this.marqueeText = null;
        _this.FreeList = [];
        _this.FreeGameList = [];
        _this.routes = {
          "http.reqGameFreeList": _this.http_reqGameFreeList
        };
        _this.reqGameFreeList();
        return _this;
      }
      GameFreeMgr.prototype.reqGameFreeList = function() {
        this.send_msg("http.reqGameFreeList");
      };
      GameFreeMgr.prototype.http_reqGameFreeList = function(msg) {
        this.FreeGameList = [];
        var list = msg.result;
        if (!list) {
          console.log("限免列表为空");
          return;
        }
        for (var i = 0; i < list.length; i++) {
          var name = list[i].name;
          var game_id = list[i].game_id.split(",");
          var start_time = list[i].start_time;
          var end_time = list[i].end_time;
          var status = list[i].status;
          if (1 == status) for (var i_1 = 0; i_1 < game_id.length; i_1++) this.FreeGameList.push({
            gameID: parseInt(game_id[i_1]),
            name: name,
            start: start_time,
            end: end_time
          });
        }
        console.log(this.FreeGameList);
      };
      GameFreeMgr.prototype.formatDate = function(time) {
        time = new Date(1e3 * time);
        var year = time.getFullYear();
        var month = time.getMonth() + 1;
        var date = time.getDate();
        var hour = time.getHours();
        var minute = time.getMinutes();
        var second = time.getSeconds();
        return month + "月" + date + "日" + hour + "时" + minute + "分";
      };
      GameFreeMgr.prototype.isFree = function(gameid) {
        var temList = this.getFreeDetial(gameid);
        var nowDate = this.getNowDate();
        for (var i = 0; i < temList.length; i++) if (temList[i].start < nowDate && temList[i].end > nowDate) return true;
        return false;
      };
      GameFreeMgr.prototype.getFreeDetial = function(gameid) {
        var temList = [];
        var nowDate = this.getNowDate();
        for (var i = 0; i < this.FreeGameList.length; i++) this.FreeGameList[i].gameID == gameid && temList.push(this.FreeGameList[i]);
        return temList;
      };
      GameFreeMgr.prototype.getFreeList = function() {
        return this.FreeGameList;
      };
      GameFreeMgr.prototype.getNowDate = function() {
        var nowDate = new Date().getTime().toString();
        nowDate = nowDate.substr(0, 10);
        return nowDate;
      };
      GameFreeMgr.getInstance = function() {
        this._instance || (this._instance = new GameFreeMgr());
        return this._instance;
      };
      return GameFreeMgr;
    }(BaseMgr_1.default);
    exports.default = GameFreeMgr;
    cc._RF.pop();
  }, {
    "../Libs/BaseMgr": "BaseMgr"
  } ],
  GameHelpCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7109cIYIRJLXYvBC8u4LfTE", "GameHelpCfg");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCfg_1 = require("../Libs/BaseCfg");
    var GameHelpCfg = function(_super) {
      __extends(GameHelpCfg, _super);
      function GameHelpCfg() {
        var _this = _super.call(this) || this;
        _this.gamehelpPath = null;
        _this.gamehelpCfg = null;
        _this.gamehelpPath = _this.getFullPath("gamehelp");
        return _this;
      }
      GameHelpCfg.getInstance = function() {
        this._instance || (this._instance = new GameHelpCfg());
        return this._instance;
      };
      GameHelpCfg.prototype.loadCb = function(name, data) {
        this.loaded = true;
        this.gamehelpCfg = data;
      };
      GameHelpCfg.prototype.getCfg = function() {
        return this.gamehelpCfg;
      };
      GameHelpCfg.prototype.getCfgByGameCode = function(gamecode) {
        return this.gamehelpCfg[gamecode];
      };
      GameHelpCfg.prototype.load = function() {
        this.loadRes(this.gamehelpPath, this.loadCb);
      };
      return GameHelpCfg;
    }(BaseCfg_1.default);
    exports.default = GameHelpCfg;
    cc._RF.pop();
  }, {
    "../Libs/BaseCfg": "BaseCfg"
  } ],
  GameNet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "18d36RqG2xJNpUKLxWHI08v", "GameNet");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var NetCode_1 = require("./NetCode");
    var NetNotify_1 = require("./NetNotify");
    var SocketNet_1 = require("./SocketNet");
    var FrameMgr_1 = require("../GameMgrs/FrameMgr");
    var NetMgr_1 = require("./NetMgr");
    var NetErrMgr_1 = require("../GameMgrs/NetErrMgr");
    var GameNet = function() {
      function GameNet() {
        this.logenable = true;
        this.netIsConnect = false;
      }
      GameNet.getInstance = function() {
        null == GameNet._instance && (GameNet._instance = new GameNet());
        return GameNet._instance;
      };
      GameNet.prototype.setWebHost = function(webhost) {
        this.webhost = webhost;
      };
      GameNet.prototype.emit = function(route, msg) {
        G_FRAME.netEmitter.emit(route, msg);
        return true;
      };
      GameNet.prototype.send_msg = function(route, msg) {
        null != msg && "undefined" != msg || (msg = {});
        var info = NetMgr_1.default.getInstance().convertMsg(route, msg);
        if (!info) return 0;
        var serverType = info.serverType;
        var newmsg = info.msg;
        switch (serverType) {
         case G_NETTYPE.httpPost:
          this.webPostReq(route, newmsg);
          break;

         case G_NETTYPE.ws:
          this.websocket(route, newmsg);
          break;

         case G_NETTYPE.httpGet:
          this.webGetReq(route, newmsg);
          break;

         case G_NETTYPE.pomelo:
          this.pomeloReq(route, newmsg);
        }
        return serverType;
      };
      GameNet.prototype.reSendMsgs = function(records) {
        for (var i = 0; i < records.length; ++i) {
          var record = records[i];
          var serverType = record.serverType;
          var route = record.route;
          var msg = record.msg;
          switch (serverType) {
           case G_NETTYPE.httpPost:
            this.webPostReq(route, msg);
            break;

           case G_NETTYPE.ws:
            this.websocket(route, msg);
            break;

           case G_NETTYPE.httpGet:
            this.webGetReq(route, msg);
            break;

           case G_NETTYPE.pomelo:
            this.pomeloReq(route, msg);
          }
        }
      };
      GameNet.prototype.pomeloReq = function(route, msg) {
        pomelo.request(route, msg);
      };
      GameNet.prototype.msgcb = function(route, code, data) {
        NetMgr_1.default.getInstance().doneWithRoute(route, code);
        if ("http.queResult" == route) {
          console.log("收到了http.queResult");
          return;
        }
        console.log("收到了服务器的回复=", route, data);
        if (data && null != data.coolingtime) {
          FrameMgr_1.default.getInstance().showTips("操作太过频繁,请等待" + data.coolingtime + "秒再试", null, 35, cc.color(255, 0, 0), cc.p(0, 0), "Arial", 1e3);
          return;
        }
        null != code && (code = parseInt(code));
        var errmsg = NetCode_1.default.getInstance().check(code);
        if (null != errmsg) {
          FrameMgr_1.default.getInstance().showTips("" + errmsg, null, 35, cc.color(255, 0, 0), cc.p(0, 0), "Arial", 1e3);
          NetErrMgr_1.default.getInstance().dealWithError(code);
          return;
        }
        NetNotify_1.default.getInstance().dealResp(route, data);
        this.emit(route, data);
      };
      GameNet.prototype.webPostReq = function(route, msg) {
        var xhr = cc.loader.getXMLHttpRequest();
        var self = this;
        xhr.onreadystatechange = function() {
          if (4 === xhr.readyState && xhr.status >= 200 && xhr.status < 300) {
            var respone = xhr.responseText;
            var resp = JSON.parse(respone);
            var head = resp.head;
            var body = resp.body;
            self.msgcb(head.route, head.code, body);
          }
        };
        xhr.timeout = 5e3;
        xhr.onerror = function(error) {
          console.log("客户端出错啦webPostReq");
        };
        console.log("发哦送了数据===", route, msg);
        xhr.open("POST", this.webhost, true);
        xhr.setRequestHeader("Content-Type", "application/json;charset=utf-8");
        xhr.send(JSON.stringify(msg));
      };
      GameNet.prototype.connect = function(host, port, connectcb) {
        var cfg = {
          host: host,
          port: port,
          debug: true,
          msgcb: this.msgcb.bind(this),
          connectcb: connectcb
        };
        console.log("连接配置=", JSON.stringify(cfg));
        pomelo.init(cfg);
        NetMgr_1.default.getInstance().pomeloConnecting();
      };
      GameNet.prototype.disconnect = function() {
        pomelo.disconnect();
      };
      GameNet.prototype.websocket = function(route, msg) {
        SocketNet_1.default.getInstance().send_msg(route, msg);
      };
      GameNet.prototype.initWebSocket = function(url) {
        return SocketNet_1.default.getInstance().initWebSocket(url);
      };
      GameNet.prototype.closeWebSocket = function(url) {
        SocketNet_1.default.getInstance().closeWebSocket(url);
      };
      GameNet.prototype.webGetReq = function(route, msg) {
        var xhr = cc.loader.getXMLHttpRequest();
        xhr.onreadystatechange = function() {
          if (4 === xhr.readyState && xhr.status >= 200 && xhr.status < 300) {
            var httpStatus = xhr.statusText;
            var response = xhr.responseText;
            console.log("Status: Got GET response! " + httpStatus);
          } else console.log("Status: fail GET response! " + httpStatus);
        };
        xhr.timeout = 5e3;
        xhr.onerror = function(error) {
          console.log("客户端出错啦webGetReq");
        };
        xhr.open("POST", msg);
        xhr.send();
        console.log("发送=", route, msg);
      };
      GameNet._instance = null;
      return GameNet;
    }();
    exports.default = GameNet;
    cc._RF.pop();
  }, {
    "../GameMgrs/FrameMgr": "FrameMgr",
    "../GameMgrs/NetErrMgr": "NetErrMgr",
    "./NetCode": "NetCode",
    "./NetMgr": "NetMgr",
    "./NetNotify": "NetNotify",
    "./SocketNet": "SocketNet"
  } ],
  GameRecordMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6bfbeFgVbtOIY2vN0AaVvQE", "GameRecordMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var UserMgr_1 = require("./UserMgr");
    var GameRecordMgr = function(_super) {
      __extends(GameRecordMgr, _super);
      function GameRecordMgr() {
        var _this = _super.call(this) || this;
        _this.record_list = {};
        _this.record_type = 0;
        _this.game_type = 0;
        _this.record_club = 0;
        _this.record_max = 100;
        _this.routes = null;
        _this.record_type = 0;
        _this.game_type = 0;
        _this.record_club = 0;
        _this.record_max = 100;
        var uid = UserMgr_1.default.getInstance().getUid();
        _this.record_list = {};
        _this.routes = {
          "http.reqGambleRecordList": _this.http_reqGambleRecordList
        };
        return _this;
      }
      GameRecordMgr.prototype.http_reqGambleRecordList = function(msg) {
        console.log("http_reqGambleRecordList", msg);
        if (1 == msg.page) {
          this.record_list = null;
          this.record_list = {};
          this.record_type = msg.r_type;
          this.game_type = msg.g_type;
          this.record_club = msg.club;
        }
        null == this.record_list.length || 0 == this.record_list.length ? this.record_list = msg.list : this.record_list = this.record_list.concat(msg.list);
      };
      GameRecordMgr.prototype.getRecordType = function() {
        return this.record_type;
      };
      GameRecordMgr.prototype.getGameType = function() {
        return this.game_type;
      };
      GameRecordMgr.prototype.getRecordClub = function() {
        return this.record_club;
      };
      GameRecordMgr.prototype.getRecordMax = function() {
        return this.record_max;
      };
      GameRecordMgr.prototype.getRecordList = function() {
        return this.record_list;
      };
      GameRecordMgr.prototype.reqGambleRecordList = function(page, r_type, g_type, club_id) {
        void 0 === r_type && (r_type = this.record_type);
        void 0 === g_type && (g_type = this.game_type);
        void 0 === club_id && (club_id = this.record_club);
        var info = {
          page: page,
          r_type: r_type,
          g_type: g_type,
          club: club_id
        };
        this.send_msg("http.reqGambleRecordList", info);
      };
      GameRecordMgr.getInstance = function() {
        this._instance || (this._instance = new GameRecordMgr());
        return this._instance;
      };
      return GameRecordMgr;
    }(BaseMgr_1.default);
    exports.default = GameRecordMgr;
    cc._RF.pop();
  }, {
    "../Libs/BaseMgr": "BaseMgr",
    "./UserMgr": "UserMgr"
  } ],
  GameResCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6f643RJJR1A2KQhuTi7EiHm", "GameResCfg");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCfg_1 = require("../Libs/BaseCfg");
    var GameResCfg = function(_super) {
      __extends(GameResCfg, _super);
      function GameResCfg() {
        var _this = _super.call(this) || this;
        _this.gameresPath = null;
        _this.gameResList = null;
        _this.gameresPath = _this.getFullPath("gameres");
        return _this;
      }
      GameResCfg.getInstance = function() {
        this._instance || (this._instance = new GameResCfg());
        return this._instance;
      };
      GameResCfg.prototype.loadCb = function(name, data) {
        this.loaded = true;
        this.gameResList = data.clubres;
        console.log("GameResCfg", this.gameResList);
      };
      GameResCfg.prototype.load = function() {
        this.loadRes(this.gameresPath, this.loadCb);
      };
      GameResCfg.prototype.getGameResList = function() {
        return this.gameResList;
      };
      GameResCfg.prototype.getGameResData = function(id) {
        var count = this.gameResList.length;
        console.log("GameResCfg", count);
        if (count) for (var i = 0; i < count; i++) {
          var data = this.gameResList[i];
          if (data.id == id) return data;
        }
        return null;
      };
      return GameResCfg;
    }(BaseCfg_1.default);
    exports.default = GameResCfg;
    cc._RF.pop();
  }, {
    "../Libs/BaseCfg": "BaseCfg"
  } ],
  GameVideoCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3c3be9vjrtJxr5lffWPC2kC", "GameVideoCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var ServerMgr_1 = require("../../../AppStart/AppMgrs/ServerMgr");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.gamename = null;
        _this.recordcode = null;
        _this.loadurl = null;
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_share_video: null,
          btn_exit: null,
          video_view: null
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.addGrayLayer();
        this.ui.btn_share_video = ctrl.btn_share_video;
        this.ui.btn_exit = ctrl.btn_exit;
        this.ui.video_view = ctrl.video_view;
      };
      return View;
    }(BaseView_1.default);
    var GameVideoCtrl = function(_super) {
      __extends(GameVideoCtrl, _super);
      function GameVideoCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_share_video = null;
        _this.btn_exit = null;
        _this.video_view = null;
        return _this;
      }
      GameVideoCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      GameVideoCtrl.prototype.defineNetEvents = function() {};
      GameVideoCtrl.prototype.defineGlobalEvents = function() {};
      GameVideoCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_share_video, this.btn_share_video_cb, "点击分享录像");
        this.connect(G_UiType.image, this.ui.btn_exit, this.btn_exit_cb, "点击关闭");
      };
      GameVideoCtrl.prototype.start = function() {};
      GameVideoCtrl.prototype.setRecordInfo = function(game, recordcode) {
        var url = ServerMgr_1.default.getInstance().getGameVideoUrl(game.code, recordcode);
        console.log("url=", url);
        this.ui.video_view.url = url;
        this.model.gamename = game.name;
        this.model.recordcode = recordcode;
        this.model.loadurl = url;
      };
      GameVideoCtrl.prototype.btn_share_video_cb = function(node) {
        console.log("btn_share_video_cb");
        if (cc.sys.isNative) {
          var userinfo = UserMgr_1.default.getInstance().getMyInfo();
          G_PLATFORM.wxShareContent(0, userinfo.nickname + "分享了" + this.model.gamename + "录像", "录像编号：" + this.model.recordcode, this.model.loadurl);
        }
      };
      GameVideoCtrl.prototype.btn_exit_cb = function(node) {
        console.log("btn_exit_cb");
        this.finish();
      };
      __decorate([ property(cc.Node) ], GameVideoCtrl.prototype, "btn_share_video", void 0);
      __decorate([ property(cc.Node) ], GameVideoCtrl.prototype, "btn_exit", void 0);
      __decorate([ property(cc.WebView) ], GameVideoCtrl.prototype, "video_view", void 0);
      GameVideoCtrl = __decorate([ ccclass ], GameVideoCtrl);
      return GameVideoCtrl;
    }(BaseCtrl_1.default);
    exports.default = GameVideoCtrl;
    cc._RF.pop();
  }, {
    "../../../AppStart/AppMgrs/ServerMgr": "ServerMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Gfun: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5a947tLEQdAK5zt8mTbREqY", "Gfun");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function g_deepClone(data) {
      var str = JSON.stringify(data);
      var obj = JSON.parse(str);
      return obj;
    }
    exports.g_deepClone = g_deepClone;
    Array.prototype.removeByValue = function(value) {
      var idx = this.findIdx(value);
      -1 != idx && this.splice(idx, 1);
    };
    Array.prototype.findIdx = function(value) {
      for (var j = 0; j < this.length; j++) if (this[j] == value) return j;
      return -1;
    };
    Array.prototype.remove = function(index) {
      if (this.length <= 0) return;
      for (var j = index; j < this.length - 1; j++) this[j] = this[j + 1];
      this.length = this.length - 1;
    };
    Array.prototype.erase = function(from, to) {
      to || (to = from + 1);
      var count = to - from;
      for (var j = from; j < to; j++) this.remove(from);
      return this;
    };
    Array.prototype.front = function(from, to) {
      return this[0];
    };
    Array.prototype.back = function(from, to) {
      return this[this.length - 1];
    };
    Array.prototype.insert = function(index, item) {
      this.splice(index, 0, item);
    };
    Array.prototype.empty = function() {
      return 0 == this.length;
    };
    Array.prototype.size = function() {
      return this.length;
    };
    Array.prototype.begin = function() {
      return 0;
    };
    Array.prototype.end = function() {
      return this.length;
    };
    Array.prototype.contain = function(value) {
      for (var j = 0; j < this.length; j++) if (this[j] == value) return true;
      return false;
    };
    cc._RF.pop();
  }, {} ],
  Global_defines: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f6eb4qd5d5BpK3o3MlEU5np", "Global_defines");
    "use strict";
    window.G_MODULE = window.G_MODULE || null;
    window.G_FRAME = window.G_FRAME || null;
    window.G_UiType = window.G_UiType || null;
    cc._RF.pop();
  }, {} ],
  GoodsCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a7a00oxyKpFZ61Tb6RzoGrp", "GoodsCfg");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCfg_1 = require("../Libs/BaseCfg");
    var GoodsCfg = function(_super) {
      __extends(GoodsCfg, _super);
      function GoodsCfg() {
        var _this = _super.call(this) || this;
        _this.goodsPath = null;
        _this.shopItemData = null;
        _this.gold = new Array();
        _this.exchange = new Array();
        _this.money = new Array();
        _this.calls = new Array();
        _this.goodsPath = _this.getFullPath("goods");
        return _this;
      }
      GoodsCfg.getInstance = function() {
        this._instance || (this._instance = new GoodsCfg());
        return this._instance;
      };
      GoodsCfg.prototype.loadCb = function(name, data) {
        this.loaded = true;
        this.shopItemData = data;
        this.setShop(this.shopItemData);
      };
      GoodsCfg.prototype.load = function() {
        this.loadRes(this.goodsPath, this.loadCb);
      };
      GoodsCfg.prototype.getCoinCfg = function() {};
      GoodsCfg.prototype.getFangKaCfg = function() {};
      GoodsCfg.prototype.getGoldCfg = function() {
        return this.gold;
      };
      GoodsCfg.prototype.setShop = function(data) {
        for (var i = 0; i < data.length; i++) {
          var cate = data[i].cate;
          var soldable = data[i].soldable;
          1 == cate && 1 == soldable ? this.gold.push(data[i]) : 2 == cate && 1 == soldable ? this.exchange.push(data[i]) : 3 == cate && 1 == soldable ? this.money.push(data[i]) : 4 == cate && 1 == soldable && this.calls.push(data[i]);
        }
      };
      return GoodsCfg;
    }(BaseCfg_1.default);
    exports.default = GoodsCfg;
    cc._RF.pop();
  }, {
    "../Libs/BaseCfg": "BaseCfg"
  } ],
  GpsSdk: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c80a257rf5B45a5/Ml2BuzU", "GpsSdk");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var UserMgr_1 = require("../GameMgrs/UserMgr");
    var GpsSdkMgr = function() {
      function GpsSdkMgr() {
        this.GpsInfo = "";
      }
      GpsSdkMgr.getInstance = function() {
        this._GpsCtor || (this._GpsCtor = new GpsSdkMgr());
        return this._GpsCtor;
      };
      GpsSdkMgr.prototype.getAddress = function() {
        if (cc.sys.isNative) {
          if (!this.GpsInfo) return "";
          console.log("获取高德地址", this.GpsInfo[0], this.GpsInfo[1]);
          return this.GpsInfo[0] + this.GpsInfo[1];
        }
        return "";
      };
      GpsSdkMgr.prototype.sendGpsInfo = function() {
        if (!cc.sys.isBrowser) if (cc.sys.os == cc.sys.OS_ANDROID) {
          var StringInfo = jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "getAddress", "()Ljava/lang/String;");
          console.log(StringInfo);
          if (!StringInfo) {
            console.log("sendGpsInfo error");
            return;
          }
          this.GpsInfo = StringInfo.split("/");
          var msg = {
            city: this.GpsInfo[0],
            sub_city: this.GpsInfo[1],
            long: this.GpsInfo[2],
            lat: this.GpsInfo[3]
          };
          UserMgr_1.default.getInstance().sendGpsInfo(msg);
        } else if (cc.sys.os == cc.sys.OS_IOS) {
          var StringInfo = jsb.reflection.callStaticMethod("AppController", "getAddress");
          console.log("sendGpsInfo", StringInfo);
          if (!StringInfo) {
            console.log("sendGpsInfo error");
            return;
          }
          this.GpsInfo = StringInfo.split("/");
          var msg = {
            city: this.GpsInfo[0],
            sub_city: this.GpsInfo[1],
            long: this.GpsInfo[3],
            lat: this.GpsInfo[2]
          };
          UserMgr_1.default.getInstance().sendGpsInfo(msg);
        }
      };
      return GpsSdkMgr;
    }();
    exports.default = GpsSdkMgr;
    cc._RF.pop();
  }, {
    "../GameMgrs/UserMgr": "UserMgr"
  } ],
  GroupMaJiang3DCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dd81cfdljdPNaQ4OFF5+B6J", "GroupMaJiang3DCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var MahjongDef_1 = require("./MahjongDef");
    var Gray = new cc.Color(156, 189, 228), White = new cc.Color(255, 255, 255);
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.seatid = null;
        _this.logicseatid = null;
        _this.player = null;
        _this.mySeatID = null;
        _this.curOpedSeatID = null;
        _this.chiindex = null;
        _this.chosencardsindexes = [];
        _this.mahjongResMgr = RoomMgr_1.default.getInstance().getResMgr();
        _this.mahjongLogic = RoomMgr_1.default.getInstance().getLogic();
        _this.mahjongDef = RoomMgr_1.default.getInstance().getDef();
        _this.mahjongAudio = RoomMgr_1.default.getInstance().getAudio();
        return _this;
      }
      Model.prototype.initSeat = function(seatid) {
        this.seatid = seatid;
      };
      Model.prototype.updateLogicId = function() {
        this.logicseatid = RoomMgr_1.default.getInstance().getLogicSeatId(this.seatid);
        if (null == this.logicseatid) return;
        this.player = this.mahjongLogic.getInstance().players[this.logicseatid];
        this.mySeatID = RoomMgr_1.default.getInstance().getMySeatId();
      };
      Model.prototype.recover = function() {};
      Model.prototype.clear = function() {};
      Model.prototype.updateSelFlag = function(cardvalue) {
        this.chosencardsindexes = [];
        var opcards = this.player.opcards;
        for (var index = 0; index < opcards.length; ++index) {
          var opcard = opcards[index];
          var value = opcard.value;
          var startindex = 4 * index;
          switch (opcard.op) {
           case this.mahjongDef.op_chi:
            for (var j = 0; j < value.length; ++j) value[j] == cardvalue && this.chosencardsindexes.push(startindex + j);
            break;

           case this.mahjongDef.op_peng:
            if (value == cardvalue) for (var j = 0; j < 4; ++j) this.chosencardsindexes.push(startindex + j);
          }
        }
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          cardGroups: [],
          majiangBgs: [],
          angangBgs: [],
          majiangSigns: [],
          majiangCards: [],
          node_effectList: []
        };
        _this.node = null;
        _this.debug = false;
        _this.node = ctrl.node;
        _this.debug = false;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        var count = 5;
        for (var i = 0; i < count; ++i) {
          var group = this.node.getChildByName("DoorMaJiang_" + i);
          this.ui.cardGroups.push(group);
          var majiangbgs = [];
          var angangbgs = [];
          var majiangSigns = [];
          var majiangCards = [];
          for (var j = 0; j < 4; ++j) {
            var card = group.getChildByName("MaJiang_" + j);
            majiangCards.push(card);
            var sign = card.getChildByName("sign");
            majiangSigns.push(sign);
            var majiangbg = card.getChildByName("majingBg");
            majiangbgs.push(majiangbg);
            majiangbg.setTag("mjbg_" + i + "_" + j);
            var angangbg = card.getChildByName("angangBg");
            angangbg.setTag("agbg_" + i + "_" + j);
            angangbgs.push(angangbg);
          }
          this.ui.node_effectList.push(group.getChildByName("effect"));
          this.ui.majiangCards.push(majiangCards);
          this.ui.majiangSigns.push(majiangSigns);
          this.ui.majiangBgs.push(majiangbgs);
          this.ui.angangBgs.push(angangbgs);
        }
        this.clear();
      };
      View.prototype.recover = function() {
        this.clear();
        for (var i = 0; i < this.model.player.opcards.length; ++i) this.addDoorCard(i);
      };
      View.prototype.updateBuGang = function(card) {
        for (var index = 0; index < this.model.player.opcards.length; ++index) {
          var opcard = this.model.player.opcards[index];
          var majiangCards = this.ui.majiangCards[index];
          var majiangSigns = this.ui.majiangSigns[index];
          var majiangbgs = this.ui.majiangBgs[index];
          var angangbgs = this.ui.angangBgs[index];
          if (opcard.op == MahjongDef_1.MahjongDef.op_bugang && opcard.value == card) {
            var value = opcard.value;
            for (var i = 0; i < 4; i++) {
              var card_1 = majiangCards[i];
              card_1.active = true;
              var sign = majiangSigns[i];
              var majingBg = majiangbgs[i];
              var angangBg = angangbgs[i];
              angangBg.active = false;
              majingBg.active = true;
              sign.getComponent(cc.Sprite).spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(value);
              sign.active = true;
            }
            break;
          }
        }
      };
      View.prototype.hidejiantou = function(card) {
        for (var seatid = 0; seatid < 4; seatid++) {
          var viewid = RoomMgr_1.default.getInstance().getViewSeatId(seatid);
          var jiantou = card.getChildByName("jiantou" + viewid);
          null != jiantou && void 0 != jiantou && (jiantou.active = false);
        }
      };
      View.prototype.addDoorCard = function(index) {
        console.log("添加了吃碰类型=", index, this.model.player.opcards);
        var opcard = this.model.player.opcards[index];
        var group = this.ui.cardGroups[index];
        var majiangCards = this.ui.majiangCards[index];
        var majiangbgs = this.ui.majiangBgs[index];
        var angangbgs = this.ui.angangBgs[index];
        var majiangSigns = this.ui.majiangSigns[index];
        var viewID = RoomMgr_1.default.getInstance().getViewSeatId(this.model.curOpedSeatID);
        group.active = true;
        this.ui.node_effectList[index].getComponent(cc.Animation).play();
        if (opcard.op == MahjongDef_1.MahjongDef.op_chi) {
          for (var i = 0; i < 3; ++i) {
            var value = opcard.value[i];
            var card_2 = majiangCards[i];
            card_2.active = true;
            var sign = majiangSigns[i];
            sign.getComponent(cc.Sprite).spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(value);
            console.log("addDoorCard", this.model.chiindex, this.model.curOpedSeatID, viewID);
            this.hidejiantou(card_2);
            i != this.model.chiindex || null == viewID && void 0 == viewID || (card_2.getChildByName("jiantou" + viewID).active = true);
            var majingBg = majiangbgs[i];
            var angangBg = angangbgs[i];
            angangBg.active = false;
            majingBg.active = true;
            sign.active = true;
          }
          var card = majiangCards[3];
          card.active = false;
        } else if (opcard.op == MahjongDef_1.MahjongDef.op_peng) {
          var value = opcard.value;
          for (var i = 0; i < 3; ++i) {
            var card_3 = majiangCards[i];
            card_3.active = true;
            var sign = majiangSigns[i];
            sign.getComponent(cc.Sprite).spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(value);
            console.log("addDoorCard", this.model.chiindex, this.model.curOpedSeatID, viewID);
            this.hidejiantou(card_3);
            0 != i || null == viewID && void 0 == viewID || (card_3.getChildByName("jiantou" + viewID).active = true);
            var majingBg = majiangbgs[i];
            var angangBg = angangbgs[i];
            angangBg.active = false;
            majingBg.active = true;
            sign.active = true;
          }
          var card = majiangCards[3];
          card.active = false;
        } else if (opcard.op == MahjongDef_1.MahjongDef.op_gang) {
          var value = opcard.value;
          for (var i = 0; i < 4; i++) {
            var card = majiangCards[i];
            card.active = true;
            var sign = majiangSigns[i];
            sign.getComponent(cc.Sprite).spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(value);
            this.hidejiantou(card);
            0 != i || null == viewID && void 0 == viewID || (card.getChildByName("jiantou" + viewID).active = true);
            var majingBg = majiangbgs[i];
            var angangBg = angangbgs[i];
            angangBg.active = false;
            majingBg.active = true;
            sign.active = true;
          }
        } else if (opcard.op == MahjongDef_1.MahjongDef.op_bugang) {
          var value = opcard.value;
          for (var i = 0; i < 4; i++) {
            var card = majiangCards[i];
            card.active = true;
            var sign = majiangSigns[i];
            sign.getComponent(cc.Sprite).spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(value);
            var majingBg = majiangbgs[i];
            var angangBg = angangbgs[i];
            angangBg.active = false;
            majingBg.active = true;
            sign.active = true;
            console.log("这边补杠了");
          }
        } else if (opcard.op == MahjongDef_1.MahjongDef.op_angang) {
          var value = opcard.value;
          for (var i = 0; i < 4; ++i) {
            var card = majiangCards[i];
            this.hidejiantou(card);
            card.active = true;
            var sign = majiangSigns[i];
            var majingBg = majiangbgs[i];
            var angangBg = angangbgs[i];
            var flag = 3 == i && this.model.logicseatid == this.model.mySeatID || RoomMgr_1.default.getInstance().getVideoMode();
            angangBg.active = !flag;
            majingBg.active = flag;
            sign.active = flag;
            sign.getComponent(cc.Sprite).spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(value);
          }
        }
      };
      View.prototype.recoverPeng = function(card) {
        for (var index = 0; index < this.model.player.opcards.length; ++index) {
          var opcard = this.model.player.opcards[index];
          var majiangCards = this.ui.majiangCards[index];
          if (opcard.op == MahjongDef_1.MahjongDef.op_peng && opcard.value == card) {
            var value = opcard.value;
            var card_4 = majiangCards[3];
            card_4.active = false;
            break;
          }
        }
      };
      View.prototype.updateCards = function(msg) {
        if (msg.event == MahjongDef_1.MahjongDef.event_bugang) this.updateBuGang(msg.card); else if (msg.event == MahjongDef_1.MahjongDef.event_qianggang_hu) this.recoverPeng(msg.bugangCard); else {
          console.log("updateCards", msg, this.model.curSeatID);
          var index = this.model.player.opcards.length - 1;
          this.addDoorCard(index);
        }
      };
      View.prototype.clear = function() {
        for (var i = 0; i < this.ui.cardGroups.length; ++i) this.ui.cardGroups[i].active = false;
      };
      View.prototype.updateSelFlag = function() {
        for (var i = 0; i < this.model.chosencardsindexes.length; ++i) {
          var index = this.model.chosencardsindexes[i];
          var row = Math.floor(index / 4);
          var col = index % 4;
          var bg = this.ui.majiangBgs[row][col];
          bg.color = Gray;
        }
      };
      View.prototype.resetSelFlag = function() {
        for (var i = 0; i < this.ui.majiangBgs.length; ++i) {
          var bgs = this.ui.majiangBgs[i];
          for (var j = 0; j < bgs.length; ++j) bgs[j].color = White;
        }
      };
      return View;
    }(BaseView_1.default);
    var GroupMaJiang3DCtrl = function(_super) {
      __extends(GroupMaJiang3DCtrl, _super);
      function GroupMaJiang3DCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.seatId = 0;
        return _this;
      }
      GroupMaJiang3DCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.model.initSeat(this.seatId);
      };
      GroupMaJiang3DCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onProcess: this.onProcess,
          onOp: this.onOp,
          onSyncData: this.onSyncData
        };
      };
      GroupMaJiang3DCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          usersUpdated: this.usersUpdated,
          mj_chosecard: this.mj_chosecard
        };
      };
      GroupMaJiang3DCtrl.prototype.mj_chosecard = function(cardvalue) {
        if (null == this.model.logicseatid) return;
        this.model.updateSelFlag(cardvalue);
        this.view.resetSelFlag();
        this.view.updateSelFlag();
      };
      GroupMaJiang3DCtrl.prototype.connectUi = function() {};
      GroupMaJiang3DCtrl.prototype.start = function() {};
      GroupMaJiang3DCtrl.prototype.onSyncData = function() {
        if (null == this.model.logicseatid) return;
        this.model.recover();
        this.view.recover();
      };
      GroupMaJiang3DCtrl.prototype.usersUpdated = function() {
        this.model.clear();
        this.view.clear();
        this.model.updateLogicId();
      };
      GroupMaJiang3DCtrl.prototype.onOp = function(msg) {
        if (null == this.model.logicseatid) return;
        this.view.resetSelFlag();
        var op = MahjongDef_1.MahjongDef.op_cfg[msg.event];
        if (op == MahjongDef_1.MahjongDef.op_qianggang_hu) {
          if (this.model.logicseatid != msg.bugangSeatId) return;
          this.view.updateCards(msg);
          return;
        }
        if (this.model.logicseatid != msg.opseatid) return;
        var leagleOps = [ MahjongDef_1.MahjongDef.op_chi, MahjongDef_1.MahjongDef.op_peng, MahjongDef_1.MahjongDef.op_gang, MahjongDef_1.MahjongDef.op_angang, MahjongDef_1.MahjongDef.op_bugang ];
        for (var i = 0; i < leagleOps.length; ++i) if (leagleOps[i] == op) {
          null != msg.curseat || void 0 != msg.curseat ? this.model.curOpedSeatID = msg.curseat : this.model.curOpedSeatID = null;
          null != msg.chiindex || void 0 != msg.chiindex ? this.model.chiindex = msg.chiindex : this.model.chiindex = null;
          this.view.updateCards(msg);
          break;
        }
      };
      GroupMaJiang3DCtrl.prototype.onProcess = function(msg) {
        if (null == this.model.logicseatid) return;
        msg.process == MahjongDef_1.MahjongDef.process_ready && this.process_ready(msg);
      };
      GroupMaJiang3DCtrl.prototype.process_ready = function(msg) {
        this.view.clear();
      };
      __decorate([ property ], GroupMaJiang3DCtrl.prototype, "seatId", void 0);
      GroupMaJiang3DCtrl = __decorate([ ccclass ], GroupMaJiang3DCtrl);
      return GroupMaJiang3DCtrl;
    }(BaseCtrl_1.default);
    exports.default = GroupMaJiang3DCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "./MahjongDef": "MahjongDef"
  } ],
  HandMaJiang3DCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e8d479ZphlMTa4IBu1BFmyw", "HandMaJiang3DCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var MahjongGeneral_1 = require("./MahjongGeneral");
    var MahjongDef_1 = require("./MahjongDef");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Green = new cc.Color(24, 221, 40), Red = new cc.Color(255, 78, 0), Yellow = new cc.Color(255, 222, 0), White = new cc.Color(255, 255, 255);
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.logicseatid = null;
        _this.seatid = null;
        _this.player = null;
        _this.offset = 0;
        _this.jinRed = 255;
        _this.jinGreen = 255;
        _this.jinBlue = 255;
        _this.jinColor = White;
        _this.mahjongResMgr = RoomMgr_1.default.getInstance().getResMgr();
        _this.mahjongLogic = RoomMgr_1.default.getInstance().getLogic();
        _this.mahjongDef = RoomMgr_1.default.getInstance().getDef();
        _this.mahjongAudio = RoomMgr_1.default.getInstance().getAudio();
        _this.mahjongCards = _this.mahjongLogic.getInstance().getMahjongCards();
        _this.logicseatid = null;
        _this.clear();
        return _this;
      }
      Model.prototype.updateOffset = function() {
        this.offset = 3 * this.player.opcards.length;
      };
      Model.prototype.initSeat = function(seatid) {
        this.seatid = seatid;
      };
      Model.prototype.updateLogicId = function() {
        this.logicseatid = RoomMgr_1.default.getInstance().getLogicSeatId(this.seatid);
        if (null == this.logicseatid) return;
        this.player = this.mahjongLogic.getInstance().players[this.logicseatid];
      };
      Model.prototype.recover = function() {
        this.clear();
        this.player = this.mahjongLogic.getInstance().players[this.logicseatid];
      };
      Model.prototype.clear = function() {
        this.offset = 0;
      };
      Model.prototype.setJinColor = function(colorR, colorG, colorB) {
        this.jinRed = colorR;
        this.jinGreen = colorG;
        this.jinBlue = colorB;
        this.jinColor = new cc.Color(this.jinRed, this.jinGreen, this.jinBlue);
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          cards_laydown: null,
          cards_stand: null,
          cards_layup: null,
          standcards: null,
          layupcards: null,
          laydowncards: null,
          fapaigroup: []
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.cards_laydown = this.node.getChildByName("cards_laydown");
        this.ui.cards_stand = this.node.getChildByName("cards_stand");
        this.ui.cards_layup = this.node.getChildByName("cards_layup");
        this.ui.standcards = [];
        this.ui.layupcards = [];
        this.ui.laydowncards = [];
        for (var i = 0; i < this.model.mahjongCards.getCardCount() + 1; ++i) {
          var standcard = this.ui.cards_stand.getChildByName("card_" + i);
          this.ui.standcards.push(standcard);
          var layupcard = this.ui.cards_layup.getChildByName("card_" + i);
          this.ui.layupcards.push(layupcard);
          var laydowncard = this.ui.cards_laydown.getChildByName("card_" + i);
          this.ui.laydowncards.push(laydowncard);
        }
        this.clear();
      };
      View.prototype.recover = function() {
        this.clear();
        this.updateCards();
      };
      View.prototype.updateCards = function() {
        RoomMgr_1.default.getInstance().getVideoMode() ? this.updateVideoCards() : this.updateHandCards();
      };
      View.prototype.updateVideoCards = function() {
        for (var i = 0; i < this.model.offset; ++i) {
          var card = this.ui.layupcards[i];
          card.active = false;
        }
        for (var i = this.model.offset; i < this.ui.layupcards.length; ++i) {
          var card_1 = this.ui.layupcards[i];
          var cardIndex = i - this.model.offset;
          var value = this.model.player.handcard[i - this.model.offset];
          if (null != value && void 0 != value) {
            var sign = card_1.getChildByName("sign");
            sign.active = true;
            sign.getComponent(cc.Sprite).spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(value);
            card_1.active = true;
          } else card_1.active = false;
          card_1.getChildByName("jin").active = !value;
          card_1.getChildByName("majingBg").color = 0 == value ? new cc.Color(234, 219, 151) : White;
        }
      };
      View.prototype.clear = function() {
        this.ui.fapaigroup = [];
        for (var i = 0; i < this.model.mahjongCards.getCardCount() + 1; ++i) {
          this.ui.standcards[i].active = false;
          this.ui.layupcards[i].active = false;
          this.ui.laydowncards[i].active = false;
        }
        if (!RoomMgr_1.default.getInstance().getVideoMode()) {
          this.ui.cards_layup.active = false;
          this.ui.cards_laydown.active = false;
        }
      };
      View.prototype.initFaPai = function() {
        if (RoomMgr_1.default.getInstance().getVideoMode()) {
          this.ui.cards_layup.active = true;
          this.ui.cards_stand.active = false;
          for (var i = 0; i < this.ui.layupcards.length; ++i) {
            var card = this.ui.layupcards[i];
            card.active = false;
          }
          for (var i = 0; i < 5; ++i) {
            var count = 4;
            var group = [];
            for (var j = 0; j < count; ++j) {
              var index = i * count + j;
              var card = this.ui.layupcards[index];
              index < this.model.player.handcard.length && group.push(card);
            }
            this.ui.fapaigroup.push(group);
          }
          for (var i = 0; i < this.ui.layupcards.length; ++i) {
            var card = this.ui.layupcards[i];
            card.getChildByName("jin").active = false;
            card.getChildByName("majingBg").color = White;
          }
          for (var i = 0; i < this.ui.layupcards.length; ++i) {
            var card = this.ui.layupcards[i];
            var pos = card.position;
            card.position = cc.p(pos.x, 0);
            var value = this.model.player.handcard[i];
            if (null != value && void 0 != value) {
              var sign = card.getChildByName("sign");
              sign.active = true;
              sign.getComponent(cc.Sprite).spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(value);
            }
          }
        } else {
          for (var i = 0; i < this.ui.standcards.length; ++i) {
            var card = this.ui.standcards[i];
            card.active = false;
          }
          for (var i = 0; i < 5; ++i) {
            var count = 4;
            var group = [];
            for (var j = 0; j < count; ++j) {
              var index = i * count + j;
              var card = this.ui.standcards[index];
              if (index < this.model.player.handcard.length) {
                this.ui.laydowncards[index].active = true;
                group.push(card);
              }
            }
            this.ui.fapaigroup.push(group);
          }
        }
      };
      View.prototype.stepFaPai = function(step) {
        var group = this.ui.fapaigroup[step];
        for (var i = 0; i < group.length; ++i) {
          var card = group[i];
          card.active = true;
        }
      };
      View.prototype.updateHandCards = function() {
        for (var i = 0; i < this.model.offset; ++i) {
          var card = this.ui.standcards[i];
          card.active = false;
        }
        for (var i = this.model.offset; i < this.ui.standcards.length; ++i) {
          var value = this.model.player.handcard[i - this.model.offset];
          var card = this.ui.standcards[i];
          card.active = null != value && void 0 != value;
        }
      };
      View.prototype.showLayupCards = function() {
        this.ui.cards_layup.active = true;
        for (var i = 0; i < this.model.offset; ++i) {
          var card = this.ui.layupcards[i];
          card.active = false;
        }
        for (var i = this.model.offset; i < this.ui.layupcards.length; ++i) {
          var value = this.model.player.handcard[i - this.model.offset];
          var cardNode = this.ui.layupcards[i];
          var active = null != value && void 0 != value;
          cardNode.active = active;
          if (active) {
            var sign = cardNode.getChildByName("sign");
            sign.getComponent(cc.Sprite).spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(value);
            var isJoker = MahjongGeneral_1.MahjongGeneral.isJoker(value);
            cardNode.getChildByName("jin").active = isJoker;
            cardNode.getChildByName("majingBg").color = isJoker ? this.model.jinColor : White;
          }
        }
      };
      View.prototype.layDown = function() {
        this.ui.cards_stand.active = false;
        this.ui.cards_laydown.active = true;
      };
      View.prototype.showStand = function() {
        this.ui.cards_stand.active = true;
        this.ui.cards_laydown.active = false;
      };
      return View;
    }(BaseView_1.default);
    var QzmjHandCardCtrl = function(_super) {
      __extends(QzmjHandCardCtrl, _super);
      function QzmjHandCardCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.seatId = 0;
        _this.fapaitimer = null;
        _this.fapaiStep = 0;
        _this.tidytimer = null;
        _this.tidystep = 0;
        _this.jinRed = 0;
        _this.jinGreen = 0;
        _this.jinBlue = 0;
        return _this;
      }
      QzmjHandCardCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.model.initSeat(this.seatId);
        this.model.setJinColor(this.jinRed, this.jinGreen, this.jinBlue);
      };
      QzmjHandCardCtrl.prototype.onDestroy = function() {
        this.clearFaPaiTimer();
        this.clearTidyTimer();
        _super.prototype.onDestroy.call(this);
      };
      QzmjHandCardCtrl.prototype.clearTidyTimer = function() {
        if (null != this.tidytimer) {
          clearInterval(this.tidytimer);
          this.tidytimer = null;
        }
      };
      QzmjHandCardCtrl.prototype.clearFaPaiTimer = function() {
        if (null != this.fapaitimer) {
          clearInterval(this.fapaitimer);
          this.fapaitimer = null;
        }
      };
      QzmjHandCardCtrl.prototype.stepFaPai = function() {
        switch (this.fapaiStep) {
         case 0:
          this.view.stepFaPai(0);
          break;

         case 1:
          this.view.stepFaPai(1);
          break;

         case 2:
          this.view.stepFaPai(2);
          break;

         case 3:
          this.view.stepFaPai(3);
          break;

         case 4:
          this.view.stepFaPai(4);
          break;

         case 5:
          this.clearFaPaiTimer();
        }
        this.fapaiStep++;
      };
      QzmjHandCardCtrl.prototype.stepTidy = function() {
        switch (this.tidystep) {
         case 2:
          this.view.layDown();
          break;

         case 3:
          this.view.showStand();
          break;

         case 4:
          this.clearTidyTimer();
        }
      };
      QzmjHandCardCtrl.prototype.startTidyTimer = function() {
        this.tidytimer = setInterval(this.stepTidy.bind(this), 500);
      };
      QzmjHandCardCtrl.prototype.process_kaijin = function() {
        if (RoomMgr_1.default.getInstance().getVideoMode()) this.view.updateCards(); else {
          this.tidystep = 0;
          this.startTidyTimer();
        }
      };
      QzmjHandCardCtrl.prototype.startFaPaiTimer = function() {
        this.fapaitimer = setInterval(this.stepFaPai.bind(this), 300);
      };
      QzmjHandCardCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onProcess: this.onProcess,
          onOp: this.onOp,
          onSeatChange: this.onSeatChange,
          onSyncData: this.onSyncData,
          "http.reqSettle": this.http_reqSettle
        };
      };
      QzmjHandCardCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          usersUpdated: this.usersUpdated
        };
      };
      QzmjHandCardCtrl.prototype.connectUi = function() {};
      QzmjHandCardCtrl.prototype.start = function() {};
      QzmjHandCardCtrl.prototype.onSyncData = function() {
        if (0 == this.model.seatid) return;
        if (null == this.model.logicseatid) return;
        this.model.recover();
        this.model.updateOffset();
        this.view.recover();
      };
      QzmjHandCardCtrl.prototype.usersUpdated = function() {
        this.model.clear();
        this.view.clear();
        this.model.updateLogicId();
      };
      QzmjHandCardCtrl.prototype.onOp = function(msg) {
        if (msg.opseatid != this.model.logicseatid) return;
        this.model.updateOffset();
        if (RoomMgr_1.default.getInstance().getVideoMode()) {
          console.log("更新其他人的牌");
          this.view.updateCards();
        } else {
          var op = MahjongDef_1.MahjongDef.op_cfg[msg.event];
          switch (op) {
           case MahjongDef_1.MahjongDef.op_chupai:
            this.op_chupai(msg);
            break;

           case MahjongDef_1.MahjongDef.op_gaipai:
            this.op_gaipai(msg);
            break;

           case MahjongDef_1.MahjongDef.op_hu:
            this.op_hu(msg);
            break;

           case MahjongDef_1.MahjongDef.op_qianggang_hu:
            this.op_qianggang_hu(msg);
            break;

           case MahjongDef_1.MahjongDef.op_sanjindao:
           case MahjongDef_1.MahjongDef.op_danyou:
           case MahjongDef_1.MahjongDef.op_sanyou:
           case MahjongDef_1.MahjongDef.op_shuangyou:
           case MahjongDef_1.MahjongDef.op_bazhanghua:
            if (null == this.model.logicseatid) return;
            this.view.updateCards();
            this.view.clear();
            this.view.showLayupCards();
          }
        }
      };
      QzmjHandCardCtrl.prototype.op_hu = function(msg) {
        this.view.updateCards();
      };
      QzmjHandCardCtrl.prototype.op_qianggang_hu = function(msg) {
        this.view.updateCards();
      };
      QzmjHandCardCtrl.prototype.onSeatChange = function(msg) {
        if (this.model.logicseatid != this.model.mahjongLogic.getInstance().curseat) return;
        this.view.updateCards();
      };
      QzmjHandCardCtrl.prototype.op_gaipai = function(msg) {
        this.view.updateCards();
      };
      QzmjHandCardCtrl.prototype.onProcess = function(msg) {
        if (0 == this.model.seatid) return;
        if (null == this.model.logicseatid) return;
        msg.process == MahjongDef_1.MahjongDef.process_fapai ? this.process_fapai() : msg.process == MahjongDef_1.MahjongDef.process_buhua ? this.process_buhua(msg) : msg.process == MahjongDef_1.MahjongDef.process_ready ? this.process_ready() : msg.process == MahjongDef_1.MahjongDef.process_kaijin && this.process_kaijin();
      };
      QzmjHandCardCtrl.prototype.http_reqSettle = function(msg) {
        if (null == this.model.logicseatid) return;
        this.view.clear();
        RoomMgr_1.default.getInstance().getVideoMode() ? this.view.updateCards() : this.view.showLayupCards();
      };
      QzmjHandCardCtrl.prototype.process_ready = function() {
        this.model.clear();
        this.view.clear();
      };
      QzmjHandCardCtrl.prototype.process_buhua = function(msg) {
        this.view.updateCards();
      };
      QzmjHandCardCtrl.prototype.op_chupai = function(msg) {
        this.view.updateCards();
      };
      QzmjHandCardCtrl.prototype.process_fapai = function() {
        this.fapaiStep = 0;
        this.view.initFaPai();
        this.startFaPaiTimer();
      };
      __decorate([ property ], QzmjHandCardCtrl.prototype, "seatId", void 0);
      __decorate([ property ], QzmjHandCardCtrl.prototype, "jinRed", void 0);
      __decorate([ property ], QzmjHandCardCtrl.prototype, "jinGreen", void 0);
      __decorate([ property ], QzmjHandCardCtrl.prototype, "jinBlue", void 0);
      QzmjHandCardCtrl = __decorate([ ccclass ], QzmjHandCardCtrl);
      return QzmjHandCardCtrl;
    }(BaseCtrl_1.default);
    exports.default = QzmjHandCardCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "./MahjongDef": "MahjongDef",
    "./MahjongGeneral": "MahjongGeneral"
  } ],
  HarvestCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "30a6blPm1lNObQuUvtN7UD+", "HarvestCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.lineNum = null;
        _this.config_lineScale = null;
        _this.itemOffX = null;
        _this.itemOffY = null;
        _this.baseUrl = null;
        _this.lineNum = 4;
        _this.config_lineScale = {
          1: 1,
          2: 1,
          3: .8,
          4: .5,
          5: .3,
          6: .3,
          7: .3
        };
        _this.itemOffX = 50;
        _this.itemOffY = 50;
        _this.baseUrl = "Icons/";
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          spriteFrame_item: null,
          node_items: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_items = ctrl.node_items;
        this.ui.spriteFrame_item = ctrl.spriteFrame_item;
      };
      View.prototype.showItems = function(itemNum, imgName, recItemNum) {
        var _this = this;
        var imgUrl = this.model.baseUrl + imgName;
        this._loadPic(imgUrl, function() {
          _this._showItems(itemNum, recItemNum);
        });
      };
      View.prototype._showItems = function(itemNum, recItemNum) {
        if (1 == itemNum) this._addOneItem(0, 0, 1, recItemNum); else {
          var oneLineNum = this.model.lineNum, curLine = Math.ceil(itemNum / oneLineNum), curScale = this.model.config_lineScale[curLine], lastLineNum = itemNum % oneLineNum;
          var curNode = void 0, itemSize = void 0, startPosX = -this.ui.node_items.width / 2, startPosY = this.ui.node_items.height / 2, leaveNum = void 0;
          curNode = new cc.Node();
          curNode.addComponent(cc.Sprite).spriteFrame = this.ui.spriteFrame_item;
          itemSize = curNode.getContentSize();
          curNode.destroy();
          itemSize.width *= curScale;
          itemSize.height *= curScale;
          for (var lineIndex = 1; lineIndex <= curLine; lineIndex++) {
            leaveNum = lineIndex < curLine ? oneLineNum : itemNum - (lineIndex - 1) * oneLineNum;
            for (var i = 0; i < leaveNum; i++) {
              var posX = startPosX + (i + 1) * (itemSize.width + this.model.itemOffX);
              var posY = startPosY - (itemSize.height / 2 + (lineIndex - 1) * (this.model.itemOffY + itemSize.height));
              this._addOneItem(posX, posY, curScale, recItemNum);
            }
          }
        }
      };
      View.prototype._addOneItem = function(posX, posY, scale, recItemNum) {
        void 0 === posX && (posX = 0);
        void 0 === posY && (posY = 0);
        var curNode = new cc.Node();
        curNode.addComponent(cc.Sprite).spriteFrame = this.ui.spriteFrame_item;
        curNode.parent = this.ui.node_items;
        curNode.x = posX;
        curNode.y = posY;
        curNode.scale = scale;
        var labNode = new cc.Node();
        labNode.addComponent(cc.Label).string = recItemNum + "";
        labNode.parent = curNode;
        labNode.y = -(curNode.height / 2 + labNode.height / 2);
      };
      View.prototype._loadPic = function(imgName, cb) {
        var _this = this;
        cc.loader.loadRes(imgName, cc.SpriteFrame, function(err, spriteFrame) {
          if (err) cc.error(err); else {
            _this.ui.spriteFrame_item = spriteFrame;
            if (cb) {
              cb();
              cb = null;
            }
          }
        });
      };
      return View;
    }(BaseView_1.default);
    var Prefab_harvestCtrl = function(_super) {
      __extends(Prefab_harvestCtrl, _super);
      function Prefab_harvestCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_bg = null;
        _this.node_items = null;
        _this.spriteFrame_item = null;
        _this._rec_cb = null;
        return _this;
      }
      Prefab_harvestCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_harvestCtrl.prototype.defineNetEvents = function() {};
      Prefab_harvestCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_harvestCtrl.prototype.connectUi = function() {
        this.node_bg.on(cc.Node.EventType.TOUCH_START, this.node_bg_cb, this);
      };
      Prefab_harvestCtrl.prototype.start = function() {};
      Prefab_harvestCtrl.prototype.node_bg_cb = function() {
        console.log("node_bg_cb");
        if (this._rec_cb) {
          this._rec_cb();
          this._rec_cb = null;
        }
        this.finish();
      };
      Prefab_harvestCtrl.prototype.showItems = function(itemNum, imgName, recItemNum, cb) {
        this._rec_cb = cb;
        this.view.showItems(itemNum, imgName, recItemNum);
      };
      __decorate([ property(cc.Node) ], Prefab_harvestCtrl.prototype, "node_bg", void 0);
      __decorate([ property(cc.Node) ], Prefab_harvestCtrl.prototype, "node_items", void 0);
      __decorate([ property(cc.SpriteFrame) ], Prefab_harvestCtrl.prototype, "spriteFrame_item", void 0);
      Prefab_harvestCtrl = __decorate([ ccclass ], Prefab_harvestCtrl);
      return Prefab_harvestCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_harvestCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  HintsCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5dea5+GWQRFOa6JLizr/MSr", "HintsCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.hint_content = null;
        _this.hintCall = null;
        _this.hint_content = "";
        return _this;
      }
      Model.prototype.setHintContent = function(data) {
        this.hint_content = data;
      };
      Model.prototype.getHintContent = function() {
        return this.hint_content;
      };
      Model.prototype.getHintCall = function() {
        return this.hintCall;
      };
      Model.prototype.setHintCall = function(call) {
        this.hintCall = call;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          label_content: null,
          node_confirm: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.label_content = ctrl.label_content;
        this.ui.node_confirm = ctrl.node_confirm;
      };
      View.prototype.refreshContent = function() {
        this.ui.label_content.string = this.model.getHintContent();
      };
      return View;
    }(BaseView_1.default);
    var Prefab_HintBoxCtrl = function(_super) {
      __extends(Prefab_HintBoxCtrl, _super);
      function Prefab_HintBoxCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label_content = null;
        _this.node_confirm = null;
        return _this;
      }
      Prefab_HintBoxCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_HintBoxCtrl.prototype.defineNetEvents = function() {};
      Prefab_HintBoxCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_HintBoxCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.node_confirm, this.node_confirm_cb, "点击确定按钮");
      };
      Prefab_HintBoxCtrl.prototype.start = function() {};
      Prefab_HintBoxCtrl.prototype.SetContent = function(content, call) {
        this.model.setHintContent(content);
        this.model.setHintCall(call);
        this.view.refreshContent();
      };
      Prefab_HintBoxCtrl.prototype.node_confirm_cb = function(node, event) {
        console.log("node_confirm_cb");
        var call = this.model.getHintCall();
        null != call && call();
        this.finish();
      };
      __decorate([ property(cc.Label) ], Prefab_HintBoxCtrl.prototype, "label_content", void 0);
      __decorate([ property(cc.Node) ], Prefab_HintBoxCtrl.prototype, "node_confirm", void 0);
      Prefab_HintBoxCtrl = __decorate([ ccclass ], Prefab_HintBoxCtrl);
      return Prefab_HintBoxCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_HintBoxCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  HuaCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "84553QeRwVMcqHnP66k1b35", "HuaCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var MahjongDef_1 = require("./MahjongDef");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.seatid = null;
        _this.logicseatid = null;
        _this.hucount = 0;
        _this.player = null;
        _this.mahjongResMgr = RoomMgr_1.default.getInstance().getResMgr();
        _this.mahjongLogic = RoomMgr_1.default.getInstance().getLogic();
        _this.mahjongDef = RoomMgr_1.default.getInstance().getDef();
        _this.mahjongAudio = RoomMgr_1.default.getInstance().getAudio();
        return _this;
      }
      Model.prototype.initSeat = function(id) {
        this.seatid = id;
      };
      Model.prototype.clear = function() {};
      Model.prototype.updateLogicId = function() {
        this.logicseatid = RoomMgr_1.default.getInstance().getLogicSeatId(this.seatid);
        if (null == this.logicseatid) return;
        this.player = this.mahjongLogic.getInstance().players[this.logicseatid];
      };
      Model.prototype.recover = function() {};
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          huaarr: [],
          huaCount: []
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        console.log("初始化ui");
        for (var i = 0; i < this.node.children.length; ++i) {
          var huanode = this.node.getChildByName("hua_" + i);
          var huaCount = huanode.getChildByName("huaCount");
          huaCount && this.ui.huaCount.push(huaCount);
          this.ui.huaarr.push(huanode);
        }
        this.clear();
      };
      View.prototype.clear = function() {
        for (var i = 0; i < this.ui.huaarr.length; ++i) {
          this.ui.huaarr[i].active = false;
          this.ui.huaCount[i] && (this.ui.huaCount[i].active = false);
        }
      };
      View.prototype.updateHua = function() {
        this.clear();
        var index = 0;
        console.log("显示花牌=", this.model.player.huapais);
        for (var hua in this.model.player.huapais) {
          var huanode = this.ui.huaarr[index];
          var frame = this.model.mahjongResMgr.getInstance().getHuaIconTexture(hua);
          huanode.getComponent(cc.Sprite).spriteFrame = frame;
          huanode.active = true;
          var huacount = this.model.player.huapais[hua];
          if (huacount > 1) {
            this.ui.huaCount[index].active = true;
            var sprite = this.model.mahjongResMgr.getInstance().getSpriteFrame("BuhuaStatus_count_" + huacount);
            this.ui.huaCount[index].getComponent(cc.Sprite).spriteFrame = sprite;
          }
          index++;
        }
      };
      return View;
    }(BaseView_1.default);
    var QzmjHuaCtrl = function(_super) {
      __extends(QzmjHuaCtrl, _super);
      function QzmjHuaCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.seatId = 0;
        return _this;
      }
      QzmjHuaCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.model.initSeat(this.seatId);
      };
      QzmjHuaCtrl.prototype.defineNetEvents = function() {
        console.log("huactrl注册了网络监听=", this.seatId);
        this.n_events = {
          onLeaveRoom: this.onLeaveRoom,
          onSyncData: this.onSyncData,
          onSeatChange: this.onSeatChange,
          onProcess: this.onProcess
        };
      };
      QzmjHuaCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          usersUpdated: this.usersUpdated
        };
      };
      QzmjHuaCtrl.prototype.connectUi = function() {};
      QzmjHuaCtrl.prototype.start = function() {};
      QzmjHuaCtrl.prototype.onSyncData = function(msg) {
        if (null == this.model.logicseatid) return;
        this.model.recover();
        this.view.updateHua();
      };
      QzmjHuaCtrl.prototype.onProcess = function(msg) {
        if (null == this.model.logicseatid) return;
        msg.process == MahjongDef_1.MahjongDef.process_buhua && this.process_buhua();
      };
      QzmjHuaCtrl.prototype.onSeatChange = function(msg) {
        if (null == this.model.logicseatid) return;
        if (this.model.logicseatid != msg.curseat) return;
        msg.needbupai && msg.huaarr.length > 0 && this.view.updateHua();
      };
      QzmjHuaCtrl.prototype.process_buhua = function() {
        this.view.updateHua();
      };
      QzmjHuaCtrl.prototype.usersUpdated = function() {
        this.model.updateLogicId();
        this.view.clear();
      };
      QzmjHuaCtrl.prototype.onLeaveRoom = function(msg) {
        if (this.model.logicseatid == msg.seatid) {
          this.model.clear();
          this.view.clear();
        }
      };
      __decorate([ property ], QzmjHuaCtrl.prototype, "seatId", void 0);
      QzmjHuaCtrl = __decorate([ ccclass ], QzmjHuaCtrl);
      return QzmjHuaCtrl;
    }(BaseCtrl_1.default);
    exports.default = QzmjHuaCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "./MahjongDef": "MahjongDef"
  } ],
  JbcCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8c93bjIei1GO5ve+hOgcvSl", "JbcCfg");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCfg_1 = require("../Libs/BaseCfg");
    var JbcCfg = function(_super) {
      __extends(JbcCfg, _super);
      function JbcCfg() {
        var _this = _super.call(this) || this;
        _this.jbccfgPath = null;
        _this.jbcCfg = null;
        _this.jbccfgPath = _this.getFullPath("jbccfg");
        return _this;
      }
      JbcCfg.getInstance = function() {
        this._instance || (this._instance = new JbcCfg());
        return this._instance;
      };
      JbcCfg.prototype.loadCb = function(name, data) {
        this.loaded = true;
        this.jbcCfg = data;
      };
      JbcCfg.prototype.getCfgByGameCode = function(gamecode) {
        return this.jbcCfg[gamecode];
      };
      JbcCfg.prototype.getCfgByGameCodeAndBetType = function(gamecode, bettype) {
        var items = this.jbcCfg[gamecode];
        for (var i = 0; i < items.length; ++i) if (items[i].bettype == bettype) return items[i];
        return null;
      };
      JbcCfg.prototype.load = function() {
        this.loadRes(this.jbccfgPath, this.loadCb);
      };
      return JbcCfg;
    }(BaseCfg_1.default);
    exports.default = JbcCfg;
    cc._RF.pop();
  }, {
    "../Libs/BaseCfg": "BaseCfg"
  } ],
  LaunchCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6bac1dozmhHSrQsh2OK4Rwk", "LaunchCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ServerMgr_1 = require("../../AppMgrs/ServerMgr");
    var VersionMgr_1 = require("../../AppMgrs/VersionMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function() {
      function Model() {
        this.num = null;
        this.state = 0;
        this.alreadydownloadsize = 0;
        this.totalfilesize = 0;
        this.bBackFromHotupdate = false;
        this.speed = 0;
        this.bBackFromHotupdate = VersionMgr_1.default.getInstance().isBackFromHotupdate();
        console.log("是否是从重启中会来=", this.bBackFromHotupdate);
        VersionMgr_1.default.getInstance().resetBackFromHotupdate();
      }
      Model.prototype.updateState = function(state) {
        this.state = state;
      };
      Model.prototype.updateProcess = function(speed, alreadydownloadsize, totalfilesize) {
        this.speed = speed;
        this.alreadydownloadsize = alreadydownloadsize;
        this.totalfilesize = totalfilesize;
      };
      return Model;
    }();
    var View = function() {
      function View(model) {
        this.ui = {
          loading_jinduguang: null,
          loading_jdtpercent: null,
          lbl_statetip: null,
          lbl_info: null,
          node_loading: null,
          panel_tip: null,
          btn_ok: null,
          lbl_sizeprocess: null,
          panel_fixdlg: null,
          btn_agree: null,
          btn_refuse: null,
          lbl_fixclient: null,
          progress_loading: ctrl.progress_loading
        };
        this.guangbiaostartx = -450;
        this.node = null;
        this.model = null;
        this.maxwidth = 920;
        this.model = model;
        this.node = ctrl.node;
        this.initUi();
      }
      View.prototype.initUi = function() {
        this.ui.panel_fixdlg = ctrl.panel_fixdlg;
        this.ui.lbl_fixclient = ctrl.lbl_fixclient;
        this.ui.lbl_fixclient.node.active = false;
        this.ui.btn_agree = ctrl.btn_agree;
        this.ui.btn_refuse = ctrl.btn_refuse;
        this.ui.btn_ok = ctrl.btn_ok;
        this.ui.lbl_sizeprocess = ctrl.lbl_sizeprocess;
        this.ui.panel_tip = ctrl.panel_tip;
        this.ui.lbl_info = ctrl.lbl_info;
        this.ui.node_loading = ctrl.node_loading;
        this.ui.lbl_statetip = ctrl.lbl_statetip;
        this.ui.loading_jinduguang = ctrl.loading_jinduguang;
        this.ui.loading_jdtpercent = ctrl.loading_jdtpercent;
        this.ui.lbl_statetip.string = "正在获取配置";
        this.ui.loading_jdtpercent.string = "";
        this.ui.node_loading.active = false;
        this.ui.panel_tip.active = false;
        this.ui.loading_jinduguang.x = this.guangbiaostartx;
        this.ui.progress_loading.progress = 0;
        if (this.model.bBackFromHotupdate) {
          this.ui.lbl_statetip.string = "更新完毕";
          this.ui.loading_jdtpercent.string = "100%";
          this.ui.progress_loading.progress = 1;
        }
      };
      View.prototype.updateProcess = function() {
        if (this.model.totalfilesize > 0) {
          var percent = this.model.alreadydownloadsize / this.model.totalfilesize;
          var process = Math.floor(100 * percent);
          var processwidth = this.maxwidth * percent;
          this.ui.loading_jinduguang.x = this.guangbiaostartx + processwidth;
          this.ui.progress_loading.progress = percent;
          this.ui.loading_jdtpercent.string = process + "%";
          var m = 1048576;
          var alreadydownloadm = (this.model.alreadydownloadsize / m).toFixed(2);
          var totalfilesizem = (this.model.totalfilesize / m).toFixed(2);
          var kspeed = (this.model.speed / 1024).toFixed(2);
          this.ui.lbl_sizeprocess.string = "(" + alreadydownloadm + "M/" + totalfilesizem + "M) (" + kspeed + "k/s)";
        } else this.ui.loading_jdtpercent.string = "";
      };
      View.prototype.updateState = function() {
        this.ui.node_loading.active = false;
        this.ui.panel_tip.active = false;
        this.ui.lbl_statetip.string = "";
        switch (this.model.state) {
         case ASSETDOWNLOAD_STATE.none:
          this.ui.lbl_statetip.string = "正在加载游戏";
          break;

         case ASSETDOWNLOAD_STATE.checking:
          this.ui.lbl_statetip.string = "正在检测版本";
          break;

         case ASSETDOWNLOAD_STATE.downloading:
          this.ui.node_loading.active = true;
          this.ui.lbl_sizeprocess.string = "...";
          break;

         case ASSETDOWNLOAD_STATE.complete:
          this.ui.node_loading.active = true;
          this.ui.lbl_statetip.string = "更新完毕";
          break;

         case ASSETDOWNLOAD_STATE.downfailed:
         case ASSETDOWNLOAD_STATE.neterr:
          this.ui.lbl_info.string = "下载失败请检查你的网络状况再重试";
          this.ui.panel_tip.active = true;
          break;

         case ASSETDOWNLOAD_STATE.loadproducterr:
          this.ui.lbl_info.string = "获取失败请检查你的网络状况再重试";
          this.ui.panel_tip.active = true;
          break;

         case ASSETDOWNLOAD_STATE.loadingproduct:
          this.ui.lbl_statetip.string = "正在获取配置";
          break;

         case ASSETDOWNLOAD_STATE.loadremotemd5:
          this.ui.lbl_statetip.string = "正在获取远程版本列表";
          break;

         case ASSETDOWNLOAD_STATE.needdownloadnewverison:
          this.ui.lbl_info.string = "发现新版本,点击确定前往下载";
          this.ui.panel_tip.active = true;
        }
      };
      return View;
    }();
    var LaunchCtrl = function(_super) {
      __extends(LaunchCtrl, _super);
      function LaunchCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_loading = null;
        _this.loading_jinduguang = null;
        _this.loading_jdtpercent = null;
        _this.lbl_statetip = null;
        _this.panel_tip = null;
        _this.panel_fixdlg = null;
        _this.btn_agree = null;
        _this.btn_refuse = null;
        _this.lbl_info = null;
        _this.btn_ok = null;
        _this.lbl_sizeprocess = null;
        _this.progress_loading = null;
        _this.lbl_fixclient = null;
        _this.model = null;
        _this.view = null;
        _this.ui = null;
        return _this;
      }
      LaunchCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.model = new Model();
        this.view = new View(this.model);
        this.ui = this.view.ui;
        this.connectUi();
        ServerMgr_1.default.getInstance().loadLoacalSetting(this.loadDataCb.bind(this));
        this.setState(ASSETDOWNLOAD_STATE.loadingproduct);
      };
      LaunchCtrl.prototype.isIPhoneX = function() {
        var size = cc.view.getFrameSize();
        console.log("设备 size", size);
        if (cc.sys.isNative && cc.sys.platform == cc.sys.IPHONE && (2436 == size.width && 1125 == size.height || 1125 == size.width && 2436 == size.height)) return true;
        return false;
      };
      LaunchCtrl.prototype.resetDesignResolution = function(canvas) {
        var height = 720;
        var size = cc.view.getFrameSize();
        var proportion = size.width / size.height;
        var width = height * proportion;
        canvas.designResolution = new cc.Size(width, height);
        canvas.fitHeight = true;
        canvas.fitWidth = true;
      };
      LaunchCtrl.prototype.connectUi = function() {
        var self = this;
        this.ui.btn_ok.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          self.btn_ok_cb();
        }, this);
        this.ui.btn_refuse.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          self.btn_refuse_cb();
        }, this);
        this.ui.btn_agree.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          self.btn_agree_cb();
        }, this);
        this.ui.lbl_fixclient.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          self.lbl_fixclient_cb();
        }, this);
      };
      LaunchCtrl.prototype.start = function() {
        this.isIPhoneX() && this.resetDesignResolution(this.node.getComponent(cc.Canvas));
        cc.director.setDisplayStats(false);
      };
      LaunchCtrl.prototype.lbl_fixclient_cb = function() {
        this.ui.panel_fixdlg.active = true;
      };
      LaunchCtrl.prototype.btn_agree_cb = function() {
        VersionMgr_1.default.getInstance().clearHotUpdate();
      };
      LaunchCtrl.prototype.btn_refuse_cb = function() {
        this.ui.panel_fixdlg.active = false;
      };
      LaunchCtrl.prototype.btn_ok_cb = function() {
        switch (this.model.state) {
         case ASSETDOWNLOAD_STATE.downfailed:
          VersionMgr_1.default.getInstance().retryFiles();
          this.ui.panel_tip.active = false;
          this.ui.node_loading.active = true;
          break;

         case ASSETDOWNLOAD_STATE.neterr:
          VersionMgr_1.default.getInstance().retryVersion();
          this.ui.panel_tip.active = false;
          this.ui.node_loading.active = true;
          break;

         case ASSETDOWNLOAD_STATE.loadproducterr:
          ServerMgr_1.default.getInstance().loadLoacalSetting(this.loadDataCb.bind(this));
          this.setState(ASSETDOWNLOAD_STATE.loadingproduct);
          break;

         case ASSETDOWNLOAD_STATE.needdownloadnewverison:
          cc.sys.openURL(ServerMgr_1.default.getInstance().getDownLoadPage());
        }
      };
      LaunchCtrl.prototype.update = function(dt) {};
      LaunchCtrl.prototype.gotoLogin = function() {
        var cb = function() {
          cc.loader.loadRes("SubLayer/Plat/MsgBox/MsgBoxLoadingAni", function(err, prefab) {
            if (err) cc.error(err); else {
              var prefabNode = cc.instantiate(prefab);
              prefabNode.parent = cc.director.getScene();
              prefabNode.position = cc.p(640, 360);
            }
          });
        };
        cc.director.loadScene("Login", cb.bind(this));
      };
      LaunchCtrl.prototype.checkVersionCb = function(state) {
        this.setState(state);
      };
      LaunchCtrl.prototype.setState = function(state) {
        this.model.updateState(state);
        this.view.updateState();
        console.log("回调回来了");
        switch (this.model.state) {
         case ASSETDOWNLOAD_STATE.none:
          this.gotoLogin();
        }
      };
      LaunchCtrl.prototype.processCb = function(speed, alreadydownloadsize, totalfilesize) {
        this.model.updateProcess(speed, alreadydownloadsize, totalfilesize);
        this.view.updateProcess();
      };
      LaunchCtrl.prototype.checkVersion = function() {
        console.log("判断是否是从游戏重启中会来=", this.model.bBackFromHotupdate);
        if (this.model.bBackFromHotupdate) {
          VersionMgr_1.default.getInstance().initDirs();
          VersionMgr_1.default.getInstance().readLoaclVersionInfo();
          this.gotoLogin();
          return;
        }
        if (ServerMgr_1.default.getInstance().isEnableHotUpdate()) {
          VersionMgr_1.default.getInstance().initDirs();
          VersionMgr_1.default.getInstance().checkVersion(this.checkVersionCb.bind(this), this.processCb.bind(this));
        } else this.gotoLogin();
      };
      LaunchCtrl.prototype.loadDataCb = function(code) {
        0 == code ? this.checkVersion() : this.setState(ASSETDOWNLOAD_STATE.loadproducterr);
      };
      __decorate([ property(cc.Node) ], LaunchCtrl.prototype, "node_loading", void 0);
      __decorate([ property(cc.Node) ], LaunchCtrl.prototype, "loading_jinduguang", void 0);
      __decorate([ property(cc.Label) ], LaunchCtrl.prototype, "loading_jdtpercent", void 0);
      __decorate([ property(cc.Label) ], LaunchCtrl.prototype, "lbl_statetip", void 0);
      __decorate([ property(cc.Node) ], LaunchCtrl.prototype, "panel_tip", void 0);
      __decorate([ property(cc.Node) ], LaunchCtrl.prototype, "panel_fixdlg", void 0);
      __decorate([ property(cc.Button) ], LaunchCtrl.prototype, "btn_agree", void 0);
      __decorate([ property(cc.Button) ], LaunchCtrl.prototype, "btn_refuse", void 0);
      __decorate([ property(cc.Label) ], LaunchCtrl.prototype, "lbl_info", void 0);
      __decorate([ property(cc.Button) ], LaunchCtrl.prototype, "btn_ok", void 0);
      __decorate([ property(cc.Label) ], LaunchCtrl.prototype, "lbl_sizeprocess", void 0);
      __decorate([ property(cc.ProgressBar) ], LaunchCtrl.prototype, "progress_loading", void 0);
      __decorate([ property(cc.Button) ], LaunchCtrl.prototype, "lbl_fixclient", void 0);
      LaunchCtrl = __decorate([ ccclass ], LaunchCtrl);
      return LaunchCtrl;
    }(cc.Component);
    exports.default = LaunchCtrl;
    cc._RF.pop();
  }, {
    "../../AppMgrs/ServerMgr": "ServerMgr",
    "../../AppMgrs/VersionMgr": "VersionMgr"
  } ],
  LoaderMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f0c9eMl+gdDrYlLWmZua72V", "LoaderMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LoaderMgr = function() {
      function LoaderMgr() {}
      LoaderMgr.prototype.playEffect = function(path, volume) {
        if (!path || !volume) {
          cc.error("playMusic path= ", path, ", volume= ", volume);
          return;
        }
        path = cc.url.raw("resources/" + path);
        var audioID = cc.audioEngine.play(path, false, volume);
        cc.audioEngine.setFinishCallback(audioID, function(ss, ss11) {
          cc.loader.release(cc.loader["_cache"][ss.target.src].url);
        });
        return audioID;
      };
      LoaderMgr.prototype.playMusic = function(path, loop, volume) {
        if (!path || !volume) {
          cc.error("playMusic path= ", path, ", volume= ", volume);
          return;
        }
        var audioID = cc.audioEngine.play(path, loop, volume);
        cc.audioEngine.setFinishCallback(audioID, function(ss, ss11) {
          cc.loader.release(cc.loader["_cache"][ss.target.src].url);
        });
        return audioID;
      };
      LoaderMgr.prototype.loadRes = function(url, cb) {
        cc.loader.loadRes(url, function(err, assert) {
          if (err) {
            if (cb) {
              cb(null);
              cb = null;
            }
            cc.error("load url= ", url, ", err=", err);
          } else if (cb) {
            cb(assert);
            cb = null;
          }
        });
      };
      LoaderMgr.prototype.getRes = function(url) {
        return cc.loader.getRes(cc.url.raw("resources/" + url));
      };
      LoaderMgr.prototype.releaseAll = function() {};
      LoaderMgr.prototype.releaseUrlRes = function(url) {
        cc.loader.release(url);
      };
      LoaderMgr.prototype.forceReleaseAll = function() {
        cc.loader.releaseAll();
      };
      LoaderMgr.prototype.releaseAllImportRes = function() {
        var sign = "res/import/";
        var dict_cache = cc.loader["_cache"];
        for (var key in dict_cache) -1 != key.indexOf(sign) && cc.loader.release(key);
      };
      LoaderMgr.prototype.releaseAllTexture = function() {
        var sign = "res/raw-assets/Texture";
        var dict_cache = cc.loader["_cache"];
        for (var key in dict_cache) -1 != key.indexOf(sign) && cc.loader.release(key);
      };
      LoaderMgr.prototype.releasePrefab = function(loadUrl) {
        var deps = cc.loader.getDependsRecursively(loadUrl);
        cc.loader.release(deps);
      };
      LoaderMgr.prototype.releaseTables = function() {
        var sign = "res/raw-assets/resources/Tables";
        var dict_cache = cc.loader["_cache"];
        for (var key in dict_cache) -1 != key.indexOf(sign) && cc.loader.release(key);
      };
      LoaderMgr.getInstance = function() {
        this._instance || (this._instance = new LoaderMgr());
        return this._instance;
      };
      return LoaderMgr;
    }();
    exports.default = LoaderMgr;
    cc._RF.pop();
  }, {} ],
  LoadingGameCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "533c80Lz8hOGrLp9myz2X5I", "LoadingGameCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var QzmjEntry_1 = require("../../../Games/Qzmj/QzmjEntry");
    var QgmjEntry_1 = require("../../../Games/Qgmj/QgmjEntry");
    var BetMgr_1 = require("../../GameMgrs/BetMgr");
    var GameCateCfg_1 = require("../../CfgMgrs/GameCateCfg");
    var SssEntry_1 = require("../../../Games/Sss/SssEntry");
    var RoomMgr_1 = require("../../GameMgrs/RoomMgr");
    var QznnEntry_1 = require("../../../Games/Qznn/QznnEntry");
    var TbnnEntry_1 = require("../../../Games/Tbnn/TbnnEntry");
    var MpnnEntry_1 = require("../../../Games/Mpnn/MpnnEntry");
    var QuickAudioCfg_1 = require("../../CfgMgrs/QuickAudioCfg");
    var GameAudioCfg_1 = require("../../CfgMgrs/GameAudioCfg");
    var LymjEntry_1 = require("../../../Games/Lymj/LymjEntry");
    var FzmjEntry_1 = require("../../../Games/Fzmj/FzmjEntry");
    var gameEntrys = {
      qzmj: QzmjEntry_1.default,
      tbnn: TbnnEntry_1.default,
      qgmj: QgmjEntry_1.default,
      sss: SssEntry_1.default,
      qznn: QznnEntry_1.default,
      mpnn: MpnnEntry_1.default,
      lymj: LymjEntry_1.default,
      fzmj: FzmjEntry_1.default
    };
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.game = null;
        _this.maxloadcount = 0;
        _this.loadindex = 0;
        _this.gameid = null;
        _this.bVideoMode = false;
        _this.bVideoMode = RoomMgr_1.default.getInstance().getVideoMode();
        _this.gameid = BetMgr_1.default.getInstance().getGameId();
        _this.game = GameCateCfg_1.default.getInstance().getGameById(_this.gameid);
        GameAudioCfg_1.default.getInstance().setGameId(_this.gameid);
        QuickAudioCfg_1.default.getInstance().setGameId(_this.gameid);
        _this.gameCode = _this.game.code;
        _this.gameDir = _this.game.code.substring(0, 1).toUpperCase() + _this.game.code.substring(1);
        _this.gameModuleName = _this.gameDir + "Room";
        return _this;
      }
      Model.prototype.isVideoMode = function() {
        return this.bVideoMode;
      };
      Model.prototype.initLoadCount = function(loadcount) {
        this.maxloadcount = loadcount;
        this.loadindex = 0;
      };
      Model.prototype.upgradeProcess = function() {
        this.loadindex++;
      };
      Model.prototype.isCompleted = function() {
        return this.loadindex == this.maxloadcount;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          lbl_progress: null
        };
        _this.node = null;
        _this.progressH = 0;
        _this.progressH2 = 0;
        _this.guangbiaostartx = -460;
        _this.maxwidth = 920;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.lbl_progress = ctrl.lbl_progress;
      };
      View.prototype.updateProgress = function() {
        var percent = this.model.loadindex / this.model.maxloadcount;
        var process = Math.floor(100 * percent);
        this.ui.lbl_progress.string = process + "%";
      };
      return View;
    }(BaseView_1.default);
    var LoadingGameCtrl = function(_super) {
      __extends(LoadingGameCtrl, _super);
      function LoadingGameCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.lbl_progress = null;
        _this.funarr = [];
        return _this;
      }
      LoadingGameCtrl.prototype.onLoad = function() {
        RoomMgr_1.default.getInstance().setLoadingGame(true);
        this.node.name = "Prefab_LoadingGame";
        ctrl = this;
        this.initMvc(Model, View);
      };
      LoadingGameCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqRoomInfo": this.http_reqRoomInfo,
          "http.reqFangKaCfg": this.http_reqFangKaCfg,
          "http.reqMyRoomState": this.http_reqMyRoomState
        };
      };
      LoadingGameCtrl.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        RoomMgr_1.default.getInstance().setLoadingGame(false);
      };
      LoadingGameCtrl.prototype.defineGlobalEvents = function() {};
      LoadingGameCtrl.prototype.connectUi = function() {};
      LoadingGameCtrl.prototype.http_reqFangKaCfg = function() {
        this.loadRes();
      };
      LoadingGameCtrl.prototype.http_reqMyRoomState = function(msg) {
        var bRoomValid = msg.roomUserInfo && msg.roomUserInfo.rid > 0;
        bRoomValid || this.finish();
      };
      LoadingGameCtrl.prototype.http_reqRoomInfo = function(msg) {
        1 == msg.roominfo.roomtype ? this._oneCompleted() : RoomMgr_1.default.getInstance().reqFangKaCfg(msg.roominfo.password);
      };
      LoadingGameCtrl.prototype.loadRes = function() {
        var _this = this;
        var self = this;
        cc.director.preloadScene(this.model.gameModuleName, function(err) {
          if (err) cc.error(err); else {
            _this._oneCompleted();
            for (var index = 0; index < self.funarr.length; ++index) self.funarr[index]();
          }
        });
      };
      LoadingGameCtrl.prototype.start = function() {
        this.isIPhoneX() && this.resetDesignResolution(this.node.getComponent(cc.Canvas));
        this.view.updateProgress();
        var self = this;
        self.funarr = [];
        var extralLoadCount = 1;
        if (!cc.sys.isNative) {
          self.funarr.push(function() {
            cc.loader.loadResDir("Games/" + self.model.gameDir, function(err, assets) {
              self._oneCompleted();
            });
          });
          self.funarr.push(function() {
            var audioUrl = "audio/Games/" + self.model.gameDir;
            cc.loader.loadResDir(audioUrl, function(err, assets) {
              self._oneCompleted();
            });
          });
          var mahjongcommonfunc = function() {
            cc.loader.loadResDir("GameCommon/Mahjong/Textures", function(err, assets) {
              self._oneCompleted();
            });
          };
          switch (this.model.game.cate) {
           case 1:
            self.funarr.push(mahjongcommonfunc);
          }
          this.model.isVideoMode() && (extralLoadCount = 0);
        }
        this.model.initLoadCount(self.funarr.length + extralLoadCount);
        this.model.isVideoMode() ? this.loadRes() : RoomMgr_1.default.getInstance().reqRoomInfo();
        this.view.updateProgress();
      };
      LoadingGameCtrl.prototype._oneCompleted = function() {
        this.model.upgradeProcess();
        this.view.updateProgress();
        this.model.isCompleted() && this._loadDone();
      };
      LoadingGameCtrl.prototype._loadDone = function() {
        gameEntrys[this.model.gameCode].getInstance().registerModules();
        this.start_module(this.model.gameModuleName);
      };
      __decorate([ property(cc.Label) ], LoadingGameCtrl.prototype, "lbl_progress", void 0);
      LoadingGameCtrl = __decorate([ ccclass ], LoadingGameCtrl);
      return LoadingGameCtrl;
    }(BaseCtrl_1.default);
    exports.default = LoadingGameCtrl;
    cc._RF.pop();
  }, {
    "../../../Games/Fzmj/FzmjEntry": "FzmjEntry",
    "../../../Games/Lymj/LymjEntry": "LymjEntry",
    "../../../Games/Mpnn/MpnnEntry": "MpnnEntry",
    "../../../Games/Qgmj/QgmjEntry": "QgmjEntry",
    "../../../Games/Qzmj/QzmjEntry": "QzmjEntry",
    "../../../Games/Qznn/QznnEntry": "QznnEntry",
    "../../../Games/Sss/SssEntry": "SssEntry",
    "../../../Games/Tbnn/TbnnEntry": "TbnnEntry",
    "../../CfgMgrs/GameAudioCfg": "GameAudioCfg",
    "../../CfgMgrs/GameCateCfg": "GameCateCfg",
    "../../CfgMgrs/QuickAudioCfg": "QuickAudioCfg",
    "../../GameMgrs/BetMgr": "BetMgr",
    "../../GameMgrs/RoomMgr": "RoomMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  LoadingPlatCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7583aEFkopNDbx0GQAD1kLL", "LoadingPlatCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var PlatMgr_1 = require("../../GameMgrs/PlatMgr");
    var LoaderMgr_1 = require("../../../AppStart/AppMgrs/LoaderMgr");
    var GameCateCfg_1 = require("../../CfgMgrs/GameCateCfg");
    var ServerMgr_1 = require("../../../AppStart/AppMgrs/ServerMgr");
    var SubGameMgr_1 = require("../../GameMgrs/SubGameMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this._curProgress = null;
        _this._maxProgress = null;
        _this._oneResProgress = null;
        _this._curLoadingNum = null;
        _this._baseStr = null;
        _this._baseStr = "load res: ";
        return _this;
      }
      Model.prototype.initLoading = function() {
        this._curLoadingNum = 0;
      };
      Model.prototype.startProgress = function() {
        this._curProgress = 0;
        this._maxProgress = 100;
        this._oneResProgress = Math.floor(this._maxProgress / this._curLoadingNum);
      };
      Model.prototype.addResNum = function(resNum) {
        void 0 === resNum && (resNum = 1);
        this._curLoadingNum += resNum;
      };
      Model.prototype.doneLoadResNum = function(resNum) {
        void 0 === resNum && (resNum = 1);
        console.log(this._curLoadingNum);
        this._curLoadingNum -= resNum;
        this._curProgress += this._oneResProgress;
        if (this._curLoadingNum < 1) {
          this._curProgress = this._maxProgress;
          return true;
        }
        return false;
      };
      Model.prototype.getOneResProgress = function() {
        return this._oneResProgress;
      };
      Model.prototype.addProgress = function(addValue) {
        this._curProgress += addValue;
        this._curProgress = Math.min(this._curProgress, this._maxProgress);
      };
      Model.prototype.getCurProgress = function() {
        return this._curProgress;
      };
      Model.prototype.getBaseStr = function() {
        return this._baseStr;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          lab_progress: null,
          loading_jdt: null,
          loading_jinduguang: null,
          loading_jdtpercent: null,
          btn_ok: null,
          panel_tip: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.loading_jdt = ctrl.loading_jdt;
        this.ui.loading_jinduguang = ctrl.loading_jinduguang;
        this.ui.loading_jdtpercent = ctrl.loading_jdtpercent;
        this.ui.btn_ok = ctrl.btn_ok;
        this.ui.panel_tip = ctrl.panel_tip;
      };
      View.prototype.updateProgress = function() {
        this.ui.loading_jinduguang.x = 430;
        this.ui.loading_jdt.width = 920;
        this.ui.loading_jdtpercent.string = "100%";
      };
      View.prototype.showGamesPackErr = function() {
        this.ui.panel_tip.active = true;
      };
      return View;
    }(BaseView_1.default);
    var LoadingPlatCtrl = function(_super) {
      __extends(LoadingPlatCtrl, _super);
      function LoadingPlatCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.loading_jdt = null;
        _this.loading_jinduguang = null;
        _this.loading_jdtpercent = null;
        _this.panel_tip = null;
        _this.btn_ok = null;
        _this.loadFinished = false;
        return _this;
      }
      LoadingPlatCtrl.prototype.onLoad = function() {
        LoaderMgr_1.default.getInstance().releaseAll();
        ctrl = this;
        this.initMvc(Model, View);
      };
      LoadingPlatCtrl.prototype.defineNetEvents = function() {};
      LoadingPlatCtrl.prototype.defineGlobalEvents = function() {};
      LoadingPlatCtrl.prototype.btn_ok_cb = function() {
        this.reqRemoteGamesPackInfo();
      };
      LoadingPlatCtrl.prototype.connectUi = function() {
        var self = this;
        this.ui.btn_ok.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          self.btn_ok_cb();
        }, this);
      };
      LoadingPlatCtrl.prototype.start = function() {
        PlatMgr_1.default.getInstance().loadCfgs();
        this.isIPhoneX() && this.resetDesignResolution(this.node.getComponent(cc.Canvas));
      };
      LoadingPlatCtrl.prototype.reqRemoteGamesPackCb = function(ret) {
        0 == ret ? this.start_module(G_MODULE.Plaza) : this.view.showGamesPackErr();
      };
      LoadingPlatCtrl.prototype.reqRemoteGamesPackInfo = function() {
        this.ui.panel_tip.active = false;
        SubGameMgr_1.default.getInstance().getRemoteGamesPackInfo(this.reqRemoteGamesPackCb.bind(this));
      };
      LoadingPlatCtrl.prototype.update = function() {
        if (PlatMgr_1.default.getInstance().allCfgLoaded() && !this.loadFinished) {
          GameCateCfg_1.default.getInstance().refreshGames();
          this.view.updateProgress();
          this.loadFinished = true;
          ServerMgr_1.default.getInstance().isEnableHotUpdate() ? this.reqRemoteGamesPackInfo() : this.start_module(G_MODULE.Plaza);
        }
      };
      __decorate([ property(cc.Node) ], LoadingPlatCtrl.prototype, "loading_jdt", void 0);
      __decorate([ property(cc.Node) ], LoadingPlatCtrl.prototype, "loading_jinduguang", void 0);
      __decorate([ property(cc.Label) ], LoadingPlatCtrl.prototype, "loading_jdtpercent", void 0);
      __decorate([ property(cc.Node) ], LoadingPlatCtrl.prototype, "panel_tip", void 0);
      __decorate([ property(cc.Button) ], LoadingPlatCtrl.prototype, "btn_ok", void 0);
      LoadingPlatCtrl = __decorate([ ccclass ], LoadingPlatCtrl);
      return LoadingPlatCtrl;
    }(BaseCtrl_1.default);
    exports.default = LoadingPlatCtrl;
    cc._RF.pop();
  }, {
    "../../../AppStart/AppMgrs/LoaderMgr": "LoaderMgr",
    "../../../AppStart/AppMgrs/ServerMgr": "ServerMgr",
    "../../CfgMgrs/GameCateCfg": "GameCateCfg",
    "../../GameMgrs/PlatMgr": "PlatMgr",
    "../../GameMgrs/SubGameMgr": "SubGameMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  LocalStorage: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9b9d3Ibq0xG+Kq6jjiuWd5u", "LocalStorage");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LocalStorage = function() {
      function LocalStorage() {}
      LocalStorage.prototype.setCreateRoomInfoCfg = function(data) {
        this.setItem("createRoomInfo", data);
      };
      LocalStorage.prototype.getCreateRoomInfoCfg = function() {
        return this.getItem("createRoomInfo");
      };
      LocalStorage.prototype.setControlInfoCfg = function(data) {
        this.setItem("controlInfo", data);
      };
      LocalStorage.prototype.getControlInfoCfg = function() {
        return this.getItem("controlInfo");
      };
      LocalStorage.prototype.setVoicestateCfg = function(data) {
        this.setItem("voicestate", data);
      };
      LocalStorage.prototype.getVoicestateCfg = function() {
        return this.getItem("voicestate");
      };
      LocalStorage.prototype.setBullRoomBGCfg = function(data) {
        this.setItem("BullRoomBGCfg", data);
      };
      LocalStorage.prototype.getBullRoomBGCfg = function() {
        return this.getItem("BullRoomBGCfg");
      };
      LocalStorage.prototype.setBullCardBGCfg = function(data) {
        this.setItem("BullCardBGCfg", data);
      };
      LocalStorage.prototype.getBullCardBGCfg = function() {
        return this.getItem("BullCardBGCfg");
      };
      LocalStorage.prototype.setSssRoomBGCfg = function(data) {
        this.setItem("SssRoomBGCfg", data);
      };
      LocalStorage.prototype.getSssRoomBGCfg = function() {
        return this.getItem("SssRoomBGCfg");
      };
      LocalStorage.prototype.setSssCardBGCfg = function(data) {
        this.setItem("SssCardBGCfg", data);
      };
      LocalStorage.prototype.getSssCardBGCfg = function() {
        return this.getItem("SssCardBGCfg");
      };
      LocalStorage.prototype.setCommonRuleGroups = function(gameCode, data) {
        this.setItem(gameCode + "CommonRuleGroups", data);
      };
      LocalStorage.prototype.getCommonRuleGroups = function(gameCode) {
        return this.getItem(gameCode + "CommonRuleGroups");
      };
      LocalStorage.prototype.setWeChatToken = function(data) {
        this.setItem("WeChatToken", data);
      };
      LocalStorage.prototype.getWeChatToken = function() {
        return this.getItem("WeChatToken");
      };
      LocalStorage.prototype.removeWeChatToken = function() {
        cc.sys.localStorage.removeItem("WeChatToken");
      };
      LocalStorage.prototype.setRoomRuleInfoGroups = function(gameCode, data) {
        this.setItem(gameCode + "RoomRuleInfoGroups", data);
      };
      LocalStorage.prototype.getRoomRuleInfoGroups = function(gameCode) {
        return this.getItem(gameCode + "RoomRuleInfoGroups");
      };
      LocalStorage.prototype.setClubList = function(data) {
        this.setItem("clublist", data);
      };
      LocalStorage.prototype.getClubList = function() {
        return this.getItem("clublist");
      };
      LocalStorage.prototype.setSssControlCustom = function(data) {
        this.setItem("SssControlCustom", data);
      };
      LocalStorage.prototype.getSssControlCustom = function() {
        return this.getItem("SssControlCustom");
      };
      LocalStorage.prototype.getItem = function(key) {
        var data = cc.sys.localStorage.getItem(key);
        if (data) return JSON.parse(data);
        return null;
      };
      LocalStorage.prototype.setItem = function(key, data) {
        return cc.sys.localStorage.setItem(key, JSON.stringify(data));
      };
      LocalStorage.prototype.clearAll = function() {
        cc.sys.localStorage.clear();
      };
      LocalStorage.prototype.setData = function(key, value) {
        var data = JSON.stringify(value);
        cc.log("存入数据", data);
        cc.sys.localStorage.setItem(key, data);
      };
      LocalStorage.prototype.getData = function(key) {
        var data = cc.sys.localStorage.getItem(key);
        cc.log("获取数据", data);
        return JSON.parse(data);
      };
      LocalStorage.prototype.removeDataByKey = function(key) {
        cc.sys.localStorage.removeItem(key);
      };
      LocalStorage.getInstance = function() {
        this._instance || (this._instance = new LocalStorage());
        return this._instance;
      };
      return LocalStorage;
    }();
    exports.default = LocalStorage;
    cc._RF.pop();
  }, {} ],
  LogMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e284eQz7EROoIQWXdqXa7Cn", "LogMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LogMgr = function() {
      function LogMgr() {
        this.oplist = [];
      }
      LogMgr.prototype.addOpreation = function(op) {
        this.oplist.push(op);
      };
      LogMgr.prototype.showModule = function(sceneName) {
        this.oplist.push("跳转场景:" + sceneName);
      };
      LogMgr.prototype.showSubModule = function(prefabName) {
        this.oplist.push("显示预制体:" + prefabName);
      };
      LogMgr.getInstance = function() {
        this._instance || (this._instance = new LogMgr());
        return this._instance;
      };
      return LogMgr;
    }();
    exports.default = LogMgr;
    cc._RF.pop();
  }, {} ],
  LoginCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d11c9zS3DlBJb6KLc/9OPv2", "LoginCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var LoginMgr_1 = require("../../GameMgrs/LoginMgr");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var platform_1 = require("../../GameMgrs/Platform/platform");
    var SwitchMgr_1 = require("../../GameMgrs/SwitchMgr");
    var VersionMgr_1 = require("../../../AppStart/AppMgrs/VersionMgr");
    var ServerMgr_1 = require("../../../AppStart/AppMgrs/ServerMgr");
    var PointMgr_1 = require("../../GameMgrs/PointMgr");
    var LocalStorage_1 = require("../../Libs/LocalStorage");
    var SwitchSettingCfg_1 = require("../../CfgMgrs/SwitchSettingCfg");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.username = "";
        _this.password = "";
        _this.visitorSwitch = null;
        _this.wxSwitch = null;
        _this.kefuSwtich = null;
        _this.agreementSwitch = null;
        _this.versioninfo = null;
        _this.backgroudMusicID = null;
        _this.visitorSwitch = SwitchMgr_1.default.getInstance().get_switch_visitors_login();
        _this.wxSwitch = SwitchMgr_1.default.getInstance().get_switch_wechat_login();
        _this.kefuSwtich = SwitchMgr_1.default.getInstance().get_switch_customer_service();
        _this.agreementSwitch = SwitchMgr_1.default.getInstance().get_switch_wechat_agreement();
        _this.versioninfo = VersionMgr_1.default.getInstance().getVersionInfo();
        _this.initClubList();
        return _this;
      }
      Model.prototype.updateSwitch = function(msg) {
        this.visitorSwitch = msg.cfg.switch_visitors_login;
        this.wxSwitch = msg.cfg.switch_wechat_login;
        this.kefuSwtich = msg.cfg.switch_customer_service;
        this.agreementSwitch = msg.cfg.switch_wechat_agreement;
      };
      Model.prototype.initClubList = function() {
        LocalStorage_1.default.getInstance().getClubList() && LocalStorage_1.default.getInstance().removeDataByKey("clublist");
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_phone_login: null,
          btn_visitor_login: null,
          btn_tiaokuan: null,
          btn_zhengce: null,
          btn_kefu: null,
          testBtns: [],
          toggle_tiaokuan: null,
          lbl_version: null
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.lbl_version = ctrl.lbl_version;
        this.ui.btn_phone_login = ctrl.btn_phone_login;
        this.ui.btn_visitor_login = ctrl.btn_visitor_login;
        this.ui.btn_tiaokuan = ctrl.btn_tiaokuan;
        this.ui.btn_zhengce = ctrl.btn_zhengce;
        this.ui.btn_kefu = ctrl.btn_kefu;
        this.ui.btn_visitor_login.active = false;
        this.ui.btn_phone_login.active = false;
        this.ui.btn_kefu.active = false;
        this.ui.toggle_tiaokuan = ctrl.toggle_tiaokuan;
        this.ui.toggle_tiaokuan.node.active = false;
        this.ui.btn_tiaokuan.active = false;
        this.ui.btn_zhengce.active = false;
        this.showTestBtns();
        var bEnableHotUpdate = ServerMgr_1.default.getInstance().isEnableHotUpdate();
        this.ui.lbl_version.node.active = bEnableHotUpdate;
        var versioninfo = this.model.versioninfo;
        if (bEnableHotUpdate && versioninfo) {
          var versionstr = "app V" + versioninfo.versionstr + " RES_" + versioninfo.versioncode + "_" + versioninfo.svn;
          this.ui.lbl_version.string = versionstr;
        }
      };
      View.prototype.showTestBtns = function() {
        var startx = -400;
        var starty = 100;
        var interX = 140;
        var interY = 60;
        var linecount = 6;
        for (var i = 0; i < 10; ++i) {
          var curNode = new cc.Node();
          var curLab = curNode.addComponent(cc.Label);
          curLab.string = "test" + (i + 1);
          curNode.parent = this.node;
          curNode.active = !cc.sys.isMobile;
          curNode.position = cc.p(startx + i % linecount * interX, starty - interY * Math.floor(i / linecount));
          this.ui.testBtns.push(curNode);
        }
      };
      View.prototype.showLoginButtons = function() {
        this.ui.btn_visitor_login.active = 1 == this.model.visitorSwitch;
        this.ui.btn_phone_login.active = 1 == this.model.wxSwitch;
      };
      View.prototype.showKefuBtn = function() {
        this.ui.btn_kefu.active = 1 == this.model.kefuSwtich;
      };
      View.prototype.hideXieyi = function() {
        this.ui.toggle_tiaokuan.node.active = false;
        this.ui.btn_tiaokuan.active = false;
        this.ui.btn_zhengce.active = false;
      };
      View.prototype.showXieyiBtn = function() {
        var bool = 1 == this.model.agreementSwitch;
        this.ui.btn_tiaokuan.active = bool;
        this.ui.btn_zhengce.active = bool;
        this.ui.toggle_tiaokuan.node.active = bool;
      };
      return View;
    }(BaseView_1.default);
    var LoginCtrl = function(_super) {
      __extends(LoginCtrl, _super);
      function LoginCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_visitor_login = null;
        _this.btn_phone_login = null;
        _this.btn_tiaokuan = null;
        _this.btn_zhengce = null;
        _this.btn_kefu = null;
        _this.lbl_version = null;
        _this.toggle_tiaokuan = null;
        _this.bShowExitDlg = false;
        return _this;
      }
      LoginCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        FrameMgr_1.default.getInstance();
        platform_1.default.getInstance();
        this.model.backgroudMusicID = cc.audioEngine.play(cc.url.raw("/resources/audio/plat/bgm_1.mp3"), true, 1);
      };
      LoginCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "connector.entryHandler.enterPlat": this.connector_entryHandler_enterPlat,
          "http.reqGameSwitch": this.http_reqGameSwitch
        };
      };
      LoginCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          weChat_empowerment_success: this.weChat_empowerment_success,
          backPressed: this.backPressed
        };
      };
      LoginCtrl.prototype.exitGameCb = function() {
        cc.game.end();
      };
      LoginCtrl.prototype.cancelExitCb = function() {
        this.bShowExitDlg = false;
      };
      LoginCtrl.prototype.backPressed = function() {
        if (this.bShowExitDlg) return;
        FrameMgr_1.default.getInstance().showDialog("确定离开", this.exitGameCb.bind(this), "系统提示", this.cancelExitCb.bind(this));
        this.bShowExitDlg = true;
      };
      LoginCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_visitor_login, this.btn_visitor_login_cb, "点击游客登录");
        this.connect(G_UiType.image, this.ui.btn_phone_login, this.btn_phone_login_cb, "点击手机登录");
        this.connect(G_UiType.image, this.ui.btn_tiaokuan, this.btn_tiaokuan_cb, "点击同意服务条款");
        this.connect(G_UiType.image, this.ui.btn_zhengce, this.btn_zhengce_cb, "点击同意隐私政策");
        this.connect(G_UiType.image, this.ui.btn_kefu, this.btn_kefu_cb, "点击客服按钮");
        var _loop_1 = function(i) {
          item = this_1.ui.testBtns[i];
          item.on(cc.Node.EventType.TOUCH_END, function(event) {
            var msg = {
              username: "test" + (i + 1),
              password: "test" + (i + 1)
            };
            console.log("msg=", msg);
            LoginMgr_1.default.getInstance().reqLogin(msg);
          }, this_1);
        };
        var this_1 = this, item;
        for (var i = 0; i < this.ui.testBtns.length; ++i) _loop_1(i);
      };
      LoginCtrl.prototype.http_reqGameSwitch = function(msg) {
        this.model.updateSwitch(msg);
        this.view.showKefuBtn();
        var weChatLoginCache = LoginMgr_1.default.getInstance().getWeChatLoginCache();
        if (weChatLoginCache) {
          true == this.ui.toggle_tiaokuan.getComponent(cc.Toggle).isChecked;
          this.view.hideXieyi();
          LoginMgr_1.default.getInstance().setLoginCache(weChatLoginCache);
          LoginMgr_1.default.getInstance().weChatAutoLogin();
          PointMgr_1.default.getInstance().wxLoginPoint();
        } else {
          this.view.showXieyiBtn();
          this.view.showLoginButtons();
        }
      };
      LoginCtrl.prototype.start = function() {
        this.isIPhoneX() && this.resetDesignResolution(this.node.getComponent(cc.Canvas));
        LoginMgr_1.default.getInstance();
        PointMgr_1.default.getInstance().lunchPoint();
        this.loadSwitchSetting();
      };
      LoginCtrl.prototype.loadSwitchSettingCb = function() {
        SwitchMgr_1.default.getInstance().reqGameSwitch();
      };
      LoginCtrl.prototype.loadSwitchSetting = function() {
        SwitchSettingCfg_1.default.getInstance().load(this.loadSwitchSettingCb.bind(this));
      };
      LoginCtrl.prototype.connector_entryHandler_enterPlat = function(msg) {
        this.start_module(G_MODULE.LoadingPlat);
      };
      LoginCtrl.prototype.weChat_empowerment_success = function(msg) {
        LoginMgr_1.default.getInstance().weChatLogin(msg);
      };
      LoginCtrl.prototype.btn_visitor_login_cb = function(node, event) {
        if (true == this.ui.toggle_tiaokuan.getComponent(cc.Toggle).isChecked) {
          var getRandomArea = function(downNum, upNum) {
            return parseInt(Math.random() * (upNum - downNum + 1) + downNum + "");
          };
          var msg = {
            username: getRandomArea(100, 1e6),
            password: getRandomArea(100, 1e6)
          };
          LoginMgr_1.default.getInstance().reqRegister(msg);
          cc.audioEngine.stop(this.model.backgroudMusicID);
        } else FrameMgr_1.default.getInstance().showTips("请勾选同意下方的服务条款、隐私政策，即可进入游戏哦", null, 35, cc.color(220, 24, 63), cc.p(0, 0), "Arial", 1e3);
      };
      LoginCtrl.prototype.btn_phone_login_cb = function(node, event) {
        if (true == this.ui.toggle_tiaokuan.getComponent(cc.Toggle).isChecked) {
          if (cc.sys.isNative) {
            console.log("weChatLogin");
            G_PLATFORM.weChatLogin();
            PointMgr_1.default.getInstance().wxLoginPoint();
          } else {
            var json = {
              openid: "oMeCa0VwuvOxKotgroWiSldj1OLcw",
              nickname: ";",
              sex: 1,
              language: "zh_CN",
              city: "Xiamen",
              province: "Fujian",
              country: "CN",
              headimgurl: "http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLRLdXHaicsXMNRX4sjktuu4libiahmJku1HUiaeAcvO7Gv3IurWXO7wic9pKXu8bT1jV5RUaAyGszKWcA/132",
              privilege: [],
              unionid: "od5wi0ugoxn4FfwuWXWE76mBz-Ec"
            };
            var msg = {
              nickname: json.nickname,
              headurl: json.headimgurl,
              sex: json.sex,
              username: json.unionid,
              plat: 2,
              phoneType: "4.4.2_MI NOTE LTE_Xiaomi"
            };
            G_FRAME.globalEmitter.emit("weChat_empowerment_success", msg);
          }
          cc.audioEngine.stop(this.model.backgroudMusicID);
        } else FrameMgr_1.default.getInstance().showTips("请勾选同意下方的服务条款、隐私政策，即可进入游戏哦", null, 35, cc.color(220, 24, 63), cc.p(0, 0), "Arial", 1e3);
      };
      LoginCtrl.prototype.btn_tiaokuan_cb = function() {
        console.log("btn_tiaokuang_cb");
        this.start_sub_module(G_MODULE.Web_xieyi, function(prefabComp, prefabNode) {
          prefabComp.showxieyi(0);
        }, "Prefab_Web_xieyiCtrl");
      };
      LoginCtrl.prototype.btn_zhengce_cb = function() {
        console.log("btn_zhengce_cb");
        this.start_sub_module(G_MODULE.Web_xieyi, function(prefabComp, prefabNode) {
          prefabComp.showxieyi(1);
        }, "Prefab_Web_xieyiCtrl");
      };
      LoginCtrl.prototype.btn_kefu_cb = function() {
        console.log("btn_kefu_cb");
        this.start_sub_module(G_MODULE.CustomService);
      };
      __decorate([ property({
        tooltip: "游客登录",
        type: cc.Node
      }) ], LoginCtrl.prototype, "btn_visitor_login", void 0);
      __decorate([ property({
        tooltip: "微信登录",
        type: cc.Node
      }) ], LoginCtrl.prototype, "btn_phone_login", void 0);
      __decorate([ property({
        tooltip: "服务条款",
        type: cc.Node
      }) ], LoginCtrl.prototype, "btn_tiaokuan", void 0);
      __decorate([ property({
        tooltip: "隐私政策",
        type: cc.Node
      }) ], LoginCtrl.prototype, "btn_zhengce", void 0);
      __decorate([ property({
        tooltip: "客服",
        type: cc.Node
      }) ], LoginCtrl.prototype, "btn_kefu", void 0);
      __decorate([ property({
        tooltip: "版本号",
        type: cc.Label
      }) ], LoginCtrl.prototype, "lbl_version", void 0);
      __decorate([ property({
        tooltip: "条款协议",
        type: cc.Toggle
      }) ], LoginCtrl.prototype, "toggle_tiaokuan", void 0);
      LoginCtrl = __decorate([ ccclass ], LoginCtrl);
      return LoginCtrl;
    }(BaseCtrl_1.default);
    exports.default = LoginCtrl;
    cc._RF.pop();
  }, {
    "../../../AppStart/AppMgrs/ServerMgr": "ServerMgr",
    "../../../AppStart/AppMgrs/VersionMgr": "VersionMgr",
    "../../CfgMgrs/SwitchSettingCfg": "SwitchSettingCfg",
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/LoginMgr": "LoginMgr",
    "../../GameMgrs/Platform/platform": "platform",
    "../../GameMgrs/PointMgr": "PointMgr",
    "../../GameMgrs/SwitchMgr": "SwitchMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView",
    "../../Libs/LocalStorage": "LocalStorage"
  } ],
  LoginMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5e3a8u2ffZEMLdweesdXDOo", "LoginMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var GameNet_1 = require("../NetCenter/GameNet");
    var PlatMgr_1 = require("./PlatMgr");
    var ServerMgr_1 = require("../../AppStart/AppMgrs/ServerMgr");
    var NetMgr_1 = require("../NetCenter/NetMgr");
    var LocalStorage_1 = require("../Libs/LocalStorage");
    var FrameMgr_1 = require("./FrameMgr");
    var BetMgr_1 = require("./BetMgr");
    var GameCateCfg_1 = require("../CfgMgrs/GameCateCfg");
    var ClubChatMgr_1 = require("./ClubChatMgr");
    var ServerType;
    (function(ServerType) {
      ServerType[ServerType["server_gate"] = 1] = "server_gate";
      ServerType[ServerType["server_connector"] = 2] = "server_connector";
    })(ServerType || (ServerType = {}));
    var PlatState;
    (function(PlatState) {
      PlatState[PlatState["state_gate"] = 1] = "state_gate";
      PlatState[PlatState["state_connector"] = 2] = "state_connector";
      PlatState[PlatState["state_plat"] = 3] = "state_plat";
      PlatState[PlatState["state_game"] = 4] = "state_game";
    })(PlatState || (PlatState = {}));
    var LoginMgr = function(_super) {
      __extends(LoginMgr, _super);
      function LoginMgr() {
        var _this = _super.call(this) || this;
        _this.connector_host = null;
        _this.connector_port = null;
        _this.gate_host = null;
        _this.gate_port = null;
        _this.m_servertype = ServerType.server_gate;
        _this._uid = null;
        _this.serverCfg = null;
        _this.plat_state = PlatState.state_gate;
        _this.routes = null;
        _this.b_switchAccount = false;
        _this.b_prepareSwitchToGameSvr = false;
        _this.b_prepareSwitchToDatingSvr = false;
        _this.b_inDaTing = true;
        _this.routes = {
          "http.reqRegister": _this.http_reqRegister,
          "http.reqLogin": _this.http_reqLogin,
          "gate.entry.req": _this.gate_entry_req
        };
        _this.serverCfg = ServerMgr_1.default.getInstance().getServerCfg();
        _this.serverCfg.platSvrHost.indexOf(".com") >= 0 ? _this._webRootUrl = _this.serverCfg.platSvrHost : _this._webRootUrl = "http://" + _this.serverCfg.platSvrHost + ":" + _this.serverCfg.platSvrPort;
        GameNet_1.default.getInstance().setWebHost("" + _this._webRootUrl);
        cc.sys.os == cc.sys.OS_ANDROID && cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, _this.onKeyDown.bind(_this), window);
        cc.game.on(cc.game.EVENT_HIDE, function() {
          G_FRAME.globalEmitter.emit("EnterBackground");
        });
        cc.game.on(cc.game.EVENT_SHOW, function() {
          G_FRAME.globalEmitter.emit("EnterForeground");
        });
        return _this;
      }
      LoginMgr.prototype.logout = function() {
        this.b_switchAccount = true;
        this.send_msg("connector.entryHandler.logout");
      };
      LoginMgr.prototype.logOut = function() {
        ClubChatMgr_1.default.getInstance().closeSocket();
        LocalStorage_1.default.getInstance().removeWeChatToken();
        this.destroy();
        NetMgr_1.default.getInstance().destroy();
        pomelo.clearListener();
      };
      LoginMgr.prototype.destroy = function() {
        console.log("LoginMgr清空了自己");
        _super.prototype.destroy.call(this);
        delete LoginMgr._instance;
        LoginMgr._instance = null;
      };
      LoginMgr.prototype.setState = function(plat_state) {
        this.plat_state = plat_state;
      };
      LoginMgr.prototype.onKeyDown = function(event) {
        switch (event.keyCode) {
         case cc.KEY.back:
          this.gemit("backPressed");
          break;

         default:
          console.log("啥瘠薄key, 不处理");
        }
      };
      LoginMgr.prototype.getWetRootUrl = function() {
        return this._webRootUrl;
      };
      LoginMgr.prototype.getUid = function() {
        return this._uid;
      };
      LoginMgr.prototype.restartGame = function() {
        cc.audioEngine.stopAll();
        cc.game.restart();
      };
      LoginMgr.prototype.kicked = function() {
        LoginMgr.getInstance().logOut();
        this.b_switchAccount ? this.restartGame() : FrameMgr_1.default.getInstance().showMsgBox("重复进入服务器,可能是网络状况不佳或在别处登录此账号,请重新尝试", this.ok_cb.bind(this), "断开连接");
      };
      LoginMgr.prototype.ok_cb = function(event) {
        this.restartGame();
      };
      LoginMgr.prototype.connectConnector = function(event_type, event) {
        switch (event_type) {
         case "connect":
          NetMgr_1.default.getInstance().pomeloConnected();
          NetMgr_1.default.getInstance().clearPomeloReqs();
          console.log("连接上了", this.plat_state);
          switch (this.plat_state) {
           case PlatState.state_connector:
            if (this.b_inDaTing) {
              this.setState(PlatState.state_plat);
              PlatMgr_1.default.getInstance().enterPlat();
            } else {
              this.setState(PlatState.state_game);
              PlatMgr_1.default.getInstance().enterGameSvr();
            }
            break;

           case PlatState.state_plat:
            PlatMgr_1.default.getInstance().enterPlat();
            break;

           case PlatState.state_game:
            PlatMgr_1.default.getInstance().enterGameSvr();
          }
          break;

         case "disconnect":
          if (this.b_inDaTing) if (this.b_prepareSwitchToGameSvr) {
            this.b_inDaTing = false;
            this.plat_state = PlatState.state_gate;
            this.b_prepareSwitchToGameSvr = false;
            this.loginPomelo();
          } else {
            NetMgr_1.default.getInstance().pomeloDisconnected();
            GameNet_1.default.getInstance().connect(this.connector_host, this.connector_port, this.connectcb.bind(this));
          } else if (this.b_prepareSwitchToDatingSvr) {
            this.b_inDaTing = true;
            this.plat_state = PlatState.state_gate;
            this.b_prepareSwitchToDatingSvr = false;
            this.start_module(G_MODULE.Plaza);
            this.loginPomelo();
          } else {
            NetMgr_1.default.getInstance().pomeloDisconnected();
            GameNet_1.default.getInstance().connect(this.connector_host, this.connector_port, this.connectcb.bind(this));
          }
          break;

         case "onKick":
          this.kicked();
        }
      };
      LoginMgr.prototype.gateConnectCb = function(event_type, event) {
        switch (event_type) {
         case "connect":
          NetMgr_1.default.getInstance().pomeloConnected();
          NetMgr_1.default.getInstance().clearPomeloReqs();
          this.queryEntry();
          break;

         case "disconnect":
          console.log("断开了gate");
          NetMgr_1.default.getInstance().pomeloDisconnected();
          switch (this.plat_state) {
           case PlatState.state_connector:
            this.m_servertype = ServerType.server_connector;
            GameNet_1.default.getInstance().connect(this.connector_host, this.connector_port, this.connectcb.bind(this));
            break;

           case PlatState.state_gate:
            GameNet_1.default.getInstance().connect(this.gate_host, this.gate_port, this.connectcb.bind(this));
          }
          break;

         case "onKick":
          this.kicked();
        }
      };
      LoginMgr.prototype.connectcb = function(event_type, event) {
        switch (this.m_servertype) {
         case ServerType.server_gate:
          this.gateConnectCb(event_type, event);
          break;

         case ServerType.server_connector:
          this.connectConnector(event_type, event);
        }
      };
      LoginMgr.prototype.queryEntry = function() {
        console.log("去获取连接服ip和端口");
        var route = "gate.entry.req";
        var msg = {
          token: this._token
        };
        GameNet_1.default.getInstance().send_msg(route, msg);
      };
      LoginMgr.prototype.gate_entry_req = function(msg) {
        console.log("获取连接服成功后去断开gate");
        this.connector_host = msg.host;
        this.connector_port = msg.port;
        this.setState(PlatState.state_connector);
        GameNet_1.default.getInstance().disconnect();
      };
      LoginMgr.prototype.loginPomelo = function(msg) {
        void 0 === msg && (msg = null);
        this.m_servertype = ServerType.server_gate;
        if (msg) {
          this._uid = msg.uid;
          this._token = msg.token;
          NetMgr_1.default.getInstance().setLoginInfo(this._uid, this._token);
        }
        if (this.b_inDaTing) {
          var servercfg = ServerMgr_1.default.getInstance().getServerCfg();
          this.gate_host = servercfg.gameSvrHost;
          this.gate_port = servercfg.gameSvrPort;
          var cache = this.getWeChatLoginCache() || {};
          if (2 == cache.plat) {
            cache.uid = this._uid;
            cache.token = this._token;
            cache.gate_host = this.gate_host;
            cache.gate_port = this.gate_port;
            console.log("cachexxxxxxxxxxxxxxxxxxxxxxxxxxxxx=", cache);
            this.setWeChatLoginCache(cache);
          }
        } else {
          var gameid = BetMgr_1.default.getInstance().getGameId();
          var game = GameCateCfg_1.default.getInstance().getGameById(gameid);
          var cfg = ServerMgr_1.default.getInstance().getSubGameCfg(game.code);
          this.gate_host = cfg.host;
          this.gate_port = cfg.port;
        }
        GameNet_1.default.getInstance().connect(this.gate_host, this.gate_port, this.connectcb.bind(this));
      };
      LoginMgr.prototype.setLoginCache = function(data) {
        this._uid = data.uid;
        this._token = data.token;
        NetMgr_1.default.getInstance().setLoginInfo(data.uid, data.token);
        console.log("token=", data.token);
        this.gate_host = data.gate_host;
        this.gate_port = data.gate_port;
      };
      LoginMgr.prototype.weChatAutoLogin = function() {
        this.m_servertype = ServerType.server_gate;
        GameNet_1.default.getInstance().connect(this.gate_host, this.gate_port, this.connectcb.bind(this));
      };
      LoginMgr.prototype.weChatLogin = function(msg) {
        this.setWeChatLoginCache(msg);
        this.reqLogin(msg);
      };
      LoginMgr.prototype.disconnectDaTing = function() {
        console.log("哈哈哈=disconnectDaTing");
        this.b_prepareSwitchToGameSvr = true;
        GameNet_1.default.getInstance().disconnect();
      };
      LoginMgr.prototype.disconnectGameSvr = function() {
        console.log("哈哈哈=disconnectGameSvr");
        this.b_prepareSwitchToDatingSvr = true;
        GameNet_1.default.getInstance().disconnect();
      };
      LoginMgr.prototype.http_reqLogin = function(msg) {
        this.loginPomelo(msg);
      };
      LoginMgr.prototype.http_reqRegister = function(msg) {
        this.loginPomelo(msg);
      };
      LoginMgr.prototype.reqLogin = function(msg) {
        msg.gameSvrTag = this.serverCfg.gameSvrTag;
        this.send_msg("http.reqLogin", msg);
      };
      LoginMgr.prototype.reqRegister = function(msg) {
        msg.gameSvrTag = this.serverCfg.gameSvrTag;
        this.send_msg("http.reqRegister", msg);
      };
      LoginMgr.prototype.getToken = function() {
        return this._token;
      };
      LoginMgr.prototype.getHost = function() {
        return this.gate_host;
      };
      LoginMgr.prototype.getPort = function() {
        return this.gate_port;
      };
      LoginMgr.prototype.setWeChatLoginCache = function(data) {
        LocalStorage_1.default.getInstance().setWeChatToken(data);
      };
      LoginMgr.prototype.getWeChatLoginCache = function() {
        return LocalStorage_1.default.getInstance().getWeChatToken();
      };
      LoginMgr.getInstance = function() {
        this._instance || (this._instance = new LoginMgr());
        return this._instance;
      };
      return LoginMgr;
    }(BaseMgr_1.default);
    exports.default = LoginMgr;
    cc._RF.pop();
  }, {
    "../../AppStart/AppMgrs/ServerMgr": "ServerMgr",
    "../CfgMgrs/GameCateCfg": "GameCateCfg",
    "../Libs/BaseMgr": "BaseMgr",
    "../Libs/LocalStorage": "LocalStorage",
    "../NetCenter/GameNet": "GameNet",
    "../NetCenter/NetMgr": "NetMgr",
    "./BetMgr": "BetMgr",
    "./ClubChatMgr": "ClubChatMgr",
    "./FrameMgr": "FrameMgr",
    "./PlatMgr": "PlatMgr"
  } ],
  LuckDrawMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b9c1etuMX5OLrxlIRzPoarj", "LuckDrawMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var LuckDrawMgr = function(_super) {
      __extends(LuckDrawMgr, _super);
      function LuckDrawMgr() {
        var _this = _super.call(this) || this;
        _this.awardListInfo = [];
        _this.drawResult = {};
        _this.uid = null;
        _this.bDraw = null;
        _this.wechatNum = null;
        _this.record = null;
        _this.routes = {};
        _this.wechatNum;
        "dzwp01", _this.routes = {
          "http.reqTrunTable": _this.http_reqTrunTable,
          "http.reqTrunTableLottery": _this.http_reqTrunTableLottery,
          "http.reqTrunTableDetails": _this.http_reqTrunTableDetails
        };
        _this.reqTrunTable();
        return _this;
      }
      LuckDrawMgr.prototype.getAwardList = function() {
        return this.awardListInfo;
      };
      LuckDrawMgr.prototype.getDrawed = function() {
        return this.bDraw;
      };
      LuckDrawMgr.prototype.getWechatNum = function() {
        return this.wechatNum;
      };
      LuckDrawMgr.prototype.getDrawResult = function() {
        return this.drawResult;
      };
      LuckDrawMgr.prototype.getDrawRecord = function() {
        return this.record;
      };
      LuckDrawMgr.prototype.reqTrunTable = function() {
        this.send_msg("http.reqTrunTable");
      };
      LuckDrawMgr.prototype.http_reqTrunTable = function(msg) {
        this.awardListInfo = msg.award;
        this.bDraw = msg.is_lottery;
        console.log(this.awardListInfo, this.bDraw);
      };
      LuckDrawMgr.prototype.reqTrunTableLottery = function() {
        this.send_msg("http.reqTrunTableLottery");
      };
      LuckDrawMgr.prototype.http_reqTrunTableLottery = function(msg) {
        console.log("抽奖结果", msg);
        this.drawResult = msg;
      };
      LuckDrawMgr.prototype.reqTrunTableDetails = function() {
        this.send_msg("http.reqTrunTableDetails");
      };
      LuckDrawMgr.prototype.http_reqTrunTableDetails = function(msg) {
        this.record = msg.list[0];
        console.log("抽奖记录", this.record, msg);
      };
      LuckDrawMgr.getInstance = function() {
        this._instance || (this._instance = new LuckDrawMgr());
        return this._instance;
      };
      return LuckDrawMgr;
    }(BaseMgr_1.default);
    exports.default = LuckDrawMgr;
    cc._RF.pop();
  }, {
    "../Libs/BaseMgr": "BaseMgr"
  } ],
  LymjCards: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0265d/HkvZPq7oGyNlae/KC", "LymjCards");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MahjongGeneral_1 = require("../../../GameCommon/Mahjong/MahjongGeneral");
    var MahjongCards_1 = require("../../../GameCommon/Mahjong/MahjongCards");
    var MahjongDef_1 = require("../../../GameCommon/Mahjong/MahjongDef");
    var LymjCards = function(_super) {
      __extends(LymjCards, _super);
      function LymjCards(cardcount) {
        var _this = _super.call(this, cardcount) || this;
        _this.pattern131 = null;
        _this.pattern131 = [ MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_1Wan, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_9Wan, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_1Tiao, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_9Tiao, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_1Tong, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_9Tong, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_DongFeng, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_NanFeng, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_XiFeng, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_BeiFeng, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_HongZhong, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_FaCai, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_BaiBan ];
        return _this;
      }
      LymjCards.prototype.getHuCards = function(original_pai, jinjiangtype) {
        var jiang_location = 0;
        var pai;
        var hucards = null;
        while (true) {
          hucards = [];
          var i = jiang_location + 1;
          if (i >= original_pai.size()) return null;
          pai = original_pai.concat();
          var lastjiangpos = i;
          if (0 != jiang_location && pai[lastjiangpos] == pai[jiang_location]) {
            i = lastjiangpos;
            lastjiangpos++;
          }
          jiang_location = 0;
          switch (jinjiangtype) {
           case 2:
            for (;i < pai.size(); ++i) {
              if (!MahjongGeneral_1.MahjongGeneral.isJoker(pai[i])) continue;
              if (pai[i] == pai[i - 1] || MahjongGeneral_1.MahjongGeneral.isJoker(pai[i]) && MahjongGeneral_1.MahjongGeneral.isJoker(pai[i - 1])) {
                hucards.push({
                  type: 0,
                  jincount: 2
                });
                jiang_location = i;
                pai.erase(pai.begin() + i - 1, pai.begin() + i + 1);
                break;
              }
            }
            break;

           case 1:
            for (;i < pai.size(); ++i) if (!MahjongGeneral_1.MahjongGeneral.isJoker(pai[i]) && MahjongGeneral_1.MahjongGeneral.isJoker(pai[0])) {
              hucards.push({
                type: 0,
                jincount: 1,
                cards: [ pai[i] ]
              });
              jiang_location = i;
              pai.erase(pai.begin() + i, pai.begin() + i + 1);
              pai.erase(pai.begin());
              break;
            }
            break;

           case 0:
            for (;i < pai.size(); ++i) {
              if (MahjongGeneral_1.MahjongGeneral.isJoker(pai[i])) continue;
              if (pai[i] == pai[i - 1]) {
                hucards.push({
                  type: 0,
                  cards: [ pai[i] ]
                });
                jiang_location = i;
                pai.erase(pai.begin() + i - 1, pai.begin() + i + 1);
                break;
              }
            }
          }
          if (0 == jiang_location) return null;
          var joker_end = pai.begin();
          while (joker_end != pai.end() && MahjongGeneral_1.MahjongGeneral.isJoker(pai[joker_end])) ++joker_end;
          var joker_count = joker_end - pai.begin();
          var baiban_start = -1;
          var baiban_end = -1;
          var tmpbaiban_start = -1;
          for (var bindex = 0; bindex < pai.length; ++bindex) if (MahjongGeneral_1.MahjongGeneral.isBaiBan(pai[bindex])) {
            if (baiban_start < 0) {
              baiban_start = bindex;
              tmpbaiban_start = baiban_start;
            }
            baiban_end = ++tmpbaiban_start;
          }
          var baiban_count = baiban_end - baiban_start;
          if (joker_count > 0) {
            pai.erase(pai.begin(), joker_end);
            baiban_count > 0 && pai.erase(baiban_start - joker_count, baiban_end - joker_count);
            var resolveInfo = {
              joker_count: joker_count,
              baiban_count: baiban_count
            };
            if (this.ResolvePai(pai, resolveInfo, hucards)) break;
          } else if (baiban_count > 0) {
            pai.erase(baiban_start, baiban_end);
            var resolveInfo = {
              joker_count: 0,
              baiban_count: baiban_count
            };
            if (this.ResolvePai(pai, resolveInfo, hucards)) break;
          } else {
            while (pai.size() >= 3) if (pai[0] == pai[2]) {
              hucards.push({
                type: 1,
                cards: [ pai[0] ]
              });
              pai.erase(pai.begin(), pai.begin() + 3);
            } else {
              if (!(MahjongGeneral_1.MahjongGeneral.Majiang_Type(pai[0]) < MahjongGeneral_1.MahjongGeneral.MajiangType.emMJType_Zi)) break;
              var it1 = this.Find_In_Sorted(pai, pai.begin() + 1, pai.end(), pai[0] + 1);
              if (it1 == pai.end()) break;
              var it2 = this.Find_In_Sorted(pai, it1 + 1, pai.end(), pai[0] + 2);
              if (it2 == pai.end()) break;
              hucards.push({
                type: 2,
                cards: [ pai[0] ]
              });
              pai.erase(it2);
              pai.erase(it1);
              pai.erase(pai.begin());
            }
            if (pai.empty()) break;
          }
        }
        pai = [];
        return hucards;
      };
      LymjCards.prototype.isBaiBanFillOneAtBoths = function(cardvalue1, cardvalue2) {
        if (this.jin == cardvalue1 - 1) return [ this.jin, cardvalue1, cardvalue2 ];
        if (this.jin == cardvalue2 + 1) return [ cardvalue1, cardvalue2, this.jin ];
        if (this.jin2 == cardvalue1 - 1) return [ this.jin2, cardvalue1, cardvalue2 ];
        if (this.jin2 == cardvalue2 + 1) return [ cardvalue1, cardvalue2, this.jin2 ];
        return null;
      };
      LymjCards.prototype.isBaiBanReplace = function(cardvalue) {
        return this.jin == cardvalue || this.jin2 == cardvalue || MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_BaiBan == cardvalue;
      };
      LymjCards.prototype.isBaiBanNumber = function() {
        return MahjongGeneral_1.MahjongGeneral.isNumberCard(this.jin) || MahjongGeneral_1.MahjongGeneral.isNumberCard(this.jin2);
      };
      LymjCards.prototype.isBaiBanFillTwo = function(cardvalue) {
        if (this.jin == cardvalue - 2 && this.jin2 == cardvalue - 1) return [ this.jin, this.jin2, cardvalue ];
        if (this.jin == cardvalue - 1 && this.jin2 == cardvalue + 1) return [ this.jin, cardvalue, this.jin2 ];
        if (this.jin == cardvalue + 1 && this.jin2 == cardvalue + 2) return [ cardvalue, this.jin, this.jin2 ];
        if (this.jin2 == cardvalue - 2 && this.jin == cardvalue - 1) return [ this.jin2, this.jin, cardvalue ];
        if (this.jin2 == cardvalue - 1 && this.jin == cardvalue + 1) return [ this.jin2, cardvalue, this.jin ];
        if (this.jin2 == cardvalue + 1 && this.jin == cardvalue + 2) return [ cardvalue, this.jin2, this.jin ];
        return null;
      };
      LymjCards.prototype.isBaiBanFillMid = function(cardvalue) {
        if (this.jin == cardvalue + 1) return [ cardvalue, this.jin, cardvalue + 2 ];
        if (this.jin2 == cardvalue + 1) return [ cardvalue, this.jin2, cardvalue + 2 ];
        return null;
      };
      LymjCards.prototype.isBaiBanFillBeforeOrAfter = function(cardvalue) {
        if (this.jin == cardvalue + 1) return [ cardvalue, this.jin ];
        if (this.jin2 == cardvalue + 1) return [ cardvalue, this.jin2 ];
        if (this.jin == cardvalue - 1) return [ this.jin, cardvalue ];
        if (this.jin2 == cardvalue - 1) return [ this.jin2, cardvalue ];
        return null;
      };
      LymjCards.prototype.ResolvePai = function(pai, resolveInfo, hucards) {
        if (pai.empty() && (resolveInfo.joker_count + resolveInfo.baiban_count) % 3 == 0) return true;
        if (pai.size() + (resolveInfo.joker_count + resolveInfo.baiban_count) < 3) return false;
        var jokerFillKeFirst = true;
        if (resolveInfo.joker_count > 0) {
          var keNeedJokerCount = 0;
          pai.size() >= 3 && pai[0] == pai[2] ? keNeedJokerCount = 0 : pai.size() >= 2 && pai[0] == pai[1] ? keNeedJokerCount = 1 : pai.size() >= 1 && (keNeedJokerCount = 2);
          var shunNeedJokerCount = 0;
          if (MahjongGeneral_1.MahjongGeneral.Majiang_Type(pai[0]) < MahjongGeneral_1.MahjongGeneral.MajiangType.emMJType_Zi) {
            var it1 = this.Find_In_Sorted(pai, pai.begin() + 1, pai.end(), pai[0] + 1);
            if (it1 != pai.end()) if (resolveInfo.baiban_count >= 1 && this.isBaiBanFillOneAtBoths(pai[0], pai[it1])) ; else {
              var it2 = this.Find_In_Sorted(pai, it1 + 1, pai.end(), pai[0] + 2);
              it2 != pai.end() ? shunNeedJokerCount = 0 : resolveInfo.baiban_count >= 1 && this.isBaiBanFillOneAtBoths(pai[0], pai[it1]) || (shunNeedJokerCount = 1);
            } else {
              var it2 = this.Find_In_Sorted(pai, pai.begin() + 1, pai.end(), pai[0] + 2);
              it2 != pai.end() ? resolveInfo.baiban_count >= 1 && this.isBaiBanFillMid(pai[0]) || (shunNeedJokerCount = 1) : resolveInfo.baiban_count >= 2 && this.isBaiBanFillTwo(pai[0]) || (shunNeedJokerCount = resolveInfo.baiban_count >= 1 && this.isBaiBanFillBeforeOrAfter(pai[0]) ? 1 : 2);
            }
          }
          jokerFillKeFirst = shunNeedJokerCount >= keNeedJokerCount;
        }
        var cardsWithBaiban = null;
        if (jokerFillKeFirst) {
          if (pai.size() >= 3 && pai[0] == pai[2]) {
            hucards.push({
              type: 1,
              cards: [ pai[0] ]
            });
            pai.erase(pai.begin(), pai.begin() + 3);
            if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
          } else if (pai.size() >= 2 && pai[0] == pai[1] && resolveInfo.joker_count >= 1) {
            --resolveInfo.joker_count;
            hucards.push({
              type: 1,
              jincount: 1,
              cards: [ pai[0], pai[1] ]
            });
            pai.erase(pai.begin(), pai.begin() + 2);
            if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
          } else if (pai.size() >= 1 && resolveInfo.joker_count >= 2) {
            resolveInfo.joker_count -= 2;
            hucards.push({
              type: 1,
              jincount: 2,
              cards: [ pai[0] ]
            });
            pai.erase(pai.begin(), pai.begin() + 1);
            if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
          }
          if (MahjongGeneral_1.MahjongGeneral.Majiang_Type(pai[0]) < MahjongGeneral_1.MahjongGeneral.MajiangType.emMJType_Zi) {
            var it1 = this.Find_In_Sorted(pai, pai.begin() + 1, pai.end(), pai[0] + 1);
            if (it1 != pai.end()) if (resolveInfo.baiban_count >= 1 && this.isBaiBanFillOneAtBoths(pai[0], pai[it1])) {
              --resolveInfo.baiban_count;
              hucards.push({
                type: 2,
                baibancount: 1,
                cards: [ pai[0], pai[it1] ]
              });
              pai.erase(it1);
              pai.erase(pai.begin());
              if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
            } else {
              var it2 = this.Find_In_Sorted(pai, it1 + 1, pai.end(), pai[0] + 2);
              if (it2 != pai.end()) {
                hucards.push({
                  type: 2,
                  cards: [ pai[0] ]
                });
                pai.erase(it2);
                pai.erase(it1);
                pai.erase(pai.begin());
                if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
              } else if (resolveInfo.baiban_count >= 1 && (cardsWithBaiban = this.isBaiBanFillOneAtBoths(pai[0], pai[it1]))) {
                --resolveInfo.baiban_count;
                hucards.push({
                  type: 2,
                  baibancount: 1,
                  cards: cardsWithBaiban
                });
                pai.erase(it1);
                pai.erase(pai.begin());
                if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
              } else if (resolveInfo.joker_count >= 1) {
                --resolveInfo.joker_count;
                hucards.push({
                  type: 2,
                  jincount: 1,
                  cards: [ pai[0], pai[it1] ]
                });
                pai.erase(it1);
                pai.erase(pai.begin());
                if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
              }
            } else {
              var it2 = this.Find_In_Sorted(pai, pai.begin() + 1, pai.end(), pai[0] + 2);
              if (it2 != pai.end()) {
                if (resolveInfo.baiban_count >= 1 && (cardsWithBaiban = this.isBaiBanFillMid(pai[0]))) {
                  --resolveInfo.baiban_count;
                  hucards.push({
                    type: 2,
                    baibancount: 1,
                    cards: cardsWithBaiban
                  });
                  pai.erase(it2);
                  pai.erase(pai.begin());
                  if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
                } else if (resolveInfo.joker_count >= 1) {
                  --resolveInfo.joker_count;
                  hucards.push({
                    type: 2,
                    jincount: 1,
                    cards: [ pai[0], pai[it2] ]
                  });
                  pai.erase(it2);
                  pai.erase(pai.begin());
                  if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
                }
              } else if (resolveInfo.baiban_count >= 2 && (cardsWithBaiban = this.isBaiBanFillTwo(pai[0]))) {
                resolveInfo.baiban_count -= 2;
                hucards.push({
                  type: 2,
                  baibancount: 2,
                  cards: cardsWithBaiban
                });
                pai.erase(pai.begin());
                if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
              } else if (resolveInfo.baiban_count >= 1 && (cardsWithBaiban = this.isBaiBanFillBeforeOrAfter(pai[0])) && resolveInfo.joker_count >= 1) {
                --resolveInfo.baiban_count;
                --resolveInfo.joker_count;
                var mincardvalue = cardsWithBaiban[0] - 1;
                var maxcardvalue = cardsWithBaiban[1] + 1;
                this.isCard(mincardvalue) ? cardsWithBaiban.insert(0, mincardvalue) : this.isCard(maxcardvalue) && cardsWithBaiban.push(maxcardvalue);
                hucards.push({
                  type: 2,
                  baibancount: 1,
                  jincount: 1,
                  cards: cardsWithBaiban
                });
                pai.erase(pai.begin());
                if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
              } else if (resolveInfo.joker_count >= 2) {
                resolveInfo.joker_count -= 2;
                hucards.push({
                  type: 2,
                  jincount: 2,
                  cards: [ pai[0] ]
                });
                pai.erase(pai.begin());
                if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
              }
            }
          }
        } else {
          if (MahjongGeneral_1.MahjongGeneral.Majiang_Type(pai[0]) < MahjongGeneral_1.MahjongGeneral.MajiangType.emMJType_Zi) {
            var it1 = this.Find_In_Sorted(pai, pai.begin() + 1, pai.end(), pai[0] + 1);
            if (it1 != pai.end()) if (resolveInfo.baiban_count >= 1 && this.isBaiBanFillOneAtBoths(pai[0], pai[it1])) {
              --resolveInfo.baiban_count;
              hucards.push({
                type: 2,
                baibancount: 1,
                cards: [ pai[0], pai[it1] ]
              });
              pai.erase(it1);
              pai.erase(pai.begin());
              if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
            } else {
              var it2 = this.Find_In_Sorted(pai, it1 + 1, pai.end(), pai[0] + 2);
              if (it2 != pai.end()) {
                hucards.push({
                  type: 2,
                  cards: [ pai[0] ]
                });
                pai.erase(it2);
                pai.erase(it1);
                pai.erase(pai.begin());
                if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
              } else if (resolveInfo.baiban_count >= 1 && (cardsWithBaiban = this.isBaiBanFillOneAtBoths(pai[0], pai[it1]))) {
                --resolveInfo.baiban_count;
                hucards.push({
                  type: 2,
                  baibancount: 1,
                  cards: cardsWithBaiban
                });
                pai.erase(it1);
                pai.erase(pai.begin());
                if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
              } else if (resolveInfo.joker_count >= 1) {
                --resolveInfo.joker_count;
                hucards.push({
                  type: 2,
                  jincount: 1,
                  cards: [ pai[0], pai[it1] ]
                });
                pai.erase(it1);
                pai.erase(pai.begin());
                if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
              }
            } else {
              var it2 = this.Find_In_Sorted(pai, pai.begin() + 1, pai.end(), pai[0] + 2);
              if (it2 != pai.end()) {
                if (resolveInfo.baiban_count >= 1 && (cardsWithBaiban = this.isBaiBanFillMid(pai[0]))) {
                  --resolveInfo.baiban_count;
                  hucards.push({
                    type: 2,
                    baibancount: 1,
                    cards: cardsWithBaiban
                  });
                  pai.erase(it2);
                  pai.erase(pai.begin());
                  if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
                } else if (resolveInfo.joker_count >= 1) {
                  --resolveInfo.joker_count;
                  hucards.push({
                    type: 2,
                    jincount: 1,
                    cards: [ pai[0], pai[it2] ]
                  });
                  pai.erase(it2);
                  pai.erase(pai.begin());
                  if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
                }
              } else if (resolveInfo.baiban_count >= 2 && (cardsWithBaiban = this.isBaiBanFillTwo(pai[0]))) {
                resolveInfo.baiban_count -= 2;
                hucards.push({
                  type: 2,
                  baibancount: 2,
                  cards: cardsWithBaiban
                });
                pai.erase(pai.begin());
                if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
              } else if (resolveInfo.baiban_count >= 1 && (cardsWithBaiban = this.isBaiBanFillBeforeOrAfter(pai[0])) && resolveInfo.joker_count >= 1) {
                --resolveInfo.baiban_count;
                --resolveInfo.joker_count;
                var mincardvalue = cardsWithBaiban[0] - 1;
                var maxcardvalue = cardsWithBaiban[1] + 1;
                this.isCard(mincardvalue) ? cardsWithBaiban.insert(0, mincardvalue) : this.isCard(maxcardvalue) && cardsWithBaiban.push(maxcardvalue);
                hucards.push({
                  type: 2,
                  baibancount: 1,
                  jincount: 1,
                  cards: cardsWithBaiban
                });
                pai.erase(pai.begin());
                if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
              } else if (resolveInfo.joker_count >= 2) {
                resolveInfo.joker_count -= 2;
                hucards.push({
                  type: 2,
                  jincount: 2,
                  cards: [ pai[0] ]
                });
                pai.erase(pai.begin());
                if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
              }
            }
          }
          if (pai.size() >= 3 && pai[0] == pai[2]) {
            hucards.push({
              type: 1,
              cards: [ pai[0] ]
            });
            pai.erase(pai.begin(), pai.begin() + 3);
            if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
          } else if (pai.size() >= 2 && pai[0] == pai[1] && resolveInfo.joker_count >= 1) {
            --resolveInfo.joker_count;
            hucards.push({
              type: 1,
              jincount: 1,
              cards: [ pai[0], pai[1] ]
            });
            pai.erase(pai.begin(), pai.begin() + 2);
            if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
          } else if (pai.size() >= 1 && resolveInfo.joker_count >= 2) {
            resolveInfo.joker_count -= 2;
            hucards.push({
              type: 1,
              jincount: 2,
              cards: [ pai[0] ]
            });
            pai.erase(pai.begin(), pai.begin() + 1);
            if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
          }
        }
        return false;
      };
      LymjCards.prototype.Is131 = function(original_pai) {
        if (original_pai.size() != this.pattern131.size() + 1) return null;
        var pai = original_pai.concat();
        var joker_end = pai.begin();
        while (joker_end != pai.end() && MahjongGeneral_1.MahjongGeneral.isJoker(pai[joker_end])) ++joker_end;
        var joker_count = joker_end - pai.begin();
        var baiban_start = -1;
        var baiban_end = -1;
        var tmpbaiban_start = -1;
        for (var bindex = 0; bindex < pai.length; ++bindex) if (MahjongGeneral_1.MahjongGeneral.isBaiBan(pai[bindex])) {
          if (baiban_start < 0) {
            baiban_start = bindex;
            tmpbaiban_start = baiban_start;
          }
          baiban_end = ++tmpbaiban_start;
        }
        var baiban_count = baiban_end - baiban_start;
        joker_count > 0 && pai.erase(pai.begin(), joker_end);
        baiban_count > 0 && pai.erase(baiban_start - joker_count, baiban_end - joker_count);
        var specialcardarr = [];
        for (var i = 1; i < pai.length; ++i) if (pai[i - 1] == pai[i]) specialcardarr.push(i); else {
          specialcardarr.contain(i - 1) || this.pattern131.contain(pai[i - 1]) || specialcardarr.push(i - 1);
          specialcardarr.contain(i) || this.pattern131.contain(pai[i]) || specialcardarr.push(i);
        }
        var specialcardvalue = null;
        if (specialcardarr.length > 1) return null;
        if (specialcardarr.length > 0) {
          var index = specialcardarr[0];
          specialcardvalue = pai[index];
          pai.erase(index);
        }
        var cards131 = [];
        var paiindex = 0;
        var patternindex = 0;
        while (patternindex < this.pattern131.size()) {
          var paivalue = null;
          var patternvalue = this.pattern131[patternindex];
          if (paiindex >= pai.size()) {
            if (baiban_count >= 1 && this.isBaiBanReplace(patternvalue)) {
              --baiban_count;
              ++patternindex;
              cards131.push({
                type: 0,
                baibancount: 1,
                cards: [ patternvalue ]
              });
              continue;
            }
            if (joker_count >= 1) {
              --joker_count;
              ++patternindex;
              cards131.push({
                type: 0,
                jincount: 1,
                cards: [ patternvalue ]
              });
              continue;
            }
            return null;
          }
          paivalue = pai[paiindex];
          if (paivalue == patternvalue) {
            ++paiindex;
            ++patternindex;
            cards131.push({
              type: 0,
              cards: [ patternvalue ]
            });
            continue;
          }
          if (baiban_count > 0 && this.isBaiBanReplace(patternvalue)) {
            --baiban_count;
            ++patternindex;
            cards131.push({
              type: 0,
              baibancount: 1,
              cards: [ patternvalue ]
            });
            continue;
          }
          if (joker_count > 0) {
            --joker_count;
            ++patternindex;
            cards131.push({
              type: 0,
              jincount: 1,
              cards: [ patternvalue ]
            });
            continue;
          }
          return null;
        }
        if (null != specialcardvalue) {
          var precards = [];
          for (var i = 0; i < cards131.length; ++i) {
            var item = cards131[i];
            item.cards && precards.push(item.cards[0]);
          }
          if (precards.contain(specialcardvalue)) {
            cards131.push({
              type: 1,
              cards: [ specialcardvalue ]
            });
            return cards131;
          }
        } else {
          if (baiban_count >= 1) {
            cards131.push({
              type: 1,
              baibancount: 1
            });
            return cards131;
          }
          if (joker_count >= 1) {
            cards131.push({
              type: 1,
              jincount: 1
            });
            return cards131;
          }
        }
        pai = [];
        console.log("patternindex3=", patternindex);
        return null;
      };
      LymjCards.prototype.Is7pairs = function(original_pai) {
        if (14 != original_pai.size()) return null;
        var pai = original_pai.concat();
        var joker_end = pai.begin();
        while (joker_end != pai.end() && MahjongGeneral_1.MahjongGeneral.isJoker(pai[joker_end])) ++joker_end;
        var joker_count = joker_end - pai.begin();
        joker_count > 0 && pai.erase(pai.begin(), joker_end);
        var cards7pairs = [];
        var paiindex = 0;
        var singlelist = [];
        while (pai.size() > 0) {
          if (pai.size() <= 1) {
            singlelist.push(pai[0]);
            pai.remove(0);
          }
          for (var i = 1; i < pai.size(); i++) {
            if (pai[0] == pai[i]) {
              cards7pairs.push({
                type: 0,
                cards: [ pai[0] ]
              });
              pai.remove(0);
              pai.remove(0);
              break;
            }
            singlelist.push(pai[0]);
            pai.remove(0);
            break;
          }
        }
        if (singlelist.length > joker_count) return null;
        for (var i = 0; i < singlelist.length; ++i) {
          var card = singlelist[i];
          joker_count--;
          cards7pairs.push({
            type: 0,
            jincount: 1,
            cards: [ card ]
          });
        }
        while (joker_count >= 2) {
          cards7pairs.push({
            type: 0,
            jincount: 2
          });
          joker_count -= 2;
        }
        pai = [];
        return cards7pairs;
      };
      LymjCards.prototype.IsHu = function(cards) {
        var hucards = this.Is131(cards);
        if (hucards) return {
          hutype: MahjongDef_1.MahjongDef.hutype_131,
          hucards: hucards
        };
        hucards = this.Is7pairs(cards);
        if (hucards) return {
          hutype: MahjongDef_1.MahjongDef.hutype_7pairs,
          hucards: hucards
        };
        hucards = this.IsCommonHu(cards);
        if (hucards) return {
          hutype: MahjongDef_1.MahjongDef.hutype_normal,
          hucards: hucards
        };
        return null;
      };
      LymjCards.prototype.getTingArr = function(pai) {
        console.log("服务器开始检查听牌长度=", pai.length);
        var ting_pai = {};
        for (var k = 0; k < this.ting_majiang_types.length; ++k) {
          var i = this.ting_majiang_types[k];
          i == this.jin && (i = 0);
          i == this.jin2 && (i = 1);
          var temp = pai.concat();
          var range = this.equal_range(temp, temp.begin(), temp.end(), i);
          if (4 == this.distance(range.first, range.second)) continue;
          temp.insert(range.second, i);
          var huinfo = this.IsHu(temp);
          temp = [];
          if (huinfo) {
            ting_pai[i] = huinfo;
            continue;
          }
        }
        return ting_pai;
      };
      LymjCards.prototype.checkXianJin = function(handcard) {
        var tmpCards = handcard.concat();
        tmpCards.push(MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_TEST);
        tmpCards.sort(function(a, b) {
          return a - b;
        });
        var huinfo = this.IsHu(tmpCards);
        if (!huinfo) {
          console.log("checkXianJin不能胡");
          return false;
        }
        var tmpHuCards = huinfo.hucards;
        for (var i = 0; i < tmpHuCards.length; i++) {
          var item = tmpHuCards[i];
          if (0 == item.type && 1 == item.jincount && item.cards[0] == MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_TEST) return true;
        }
        tmpCards = [];
        return false;
      };
      LymjCards.prototype.getJinJiang = function(handcard) {
        var huinfo = this.IsHu(handcard);
        if (!huinfo) return null;
        var tmpHuCards = huinfo.hucards;
        for (var i = 0; i < tmpHuCards.length; i++) {
          var item = tmpHuCards[i];
          if (0 == item.type && 2 == item.jincount) return huinfo;
        }
        return null;
      };
      LymjCards.prototype.getXianJin = function(handcard) {
        var huinfo = this.IsHu(handcard);
        if (!huinfo) return null;
        var tmpHuCards = huinfo.hucards;
        console.log("判断是否是闲金", tmpHuCards);
        for (var i = 0; i < tmpHuCards.length; i++) {
          var item = tmpHuCards[i];
          if (0 == item.type && item.jincount >= 1) return huinfo;
        }
        return null;
      };
      return LymjCards;
    }(MahjongCards_1.default);
    exports.default = LymjCards;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Mahjong/MahjongCards": "MahjongCards",
    "../../../GameCommon/Mahjong/MahjongDef": "MahjongDef",
    "../../../GameCommon/Mahjong/MahjongGeneral": "MahjongGeneral"
  } ],
  LymjEntry: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c32a74oyD9EB5Wp1EB1WBhU", "LymjEntry");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ModuleMgr_1 = require("../../Plat/GameMgrs/ModuleMgr");
    var modules = {
      Settle: "SubLayer/Games/Lymj/LymjSettle",
      GambleRecord: "SubLayer/Games/Lymj/LymjGambleRecord"
    };
    var LymjEntry = function() {
      function LymjEntry() {}
      LymjEntry.getInstance = function() {
        this._instance || (this._instance = new LymjEntry());
        return this._instance;
      };
      LymjEntry.prototype.registerModules = function() {
        ModuleMgr_1.default.getInstance().registerGame(modules);
      };
      return LymjEntry;
    }();
    exports.default = LymjEntry;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/ModuleMgr": "ModuleMgr"
  } ],
  LymjFinalSettleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "36299u1oIxAGpBDCweNj2CN", "LymjFinalSettleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BunchInfoMgr_1 = require("../../Plat/GameMgrs/BunchInfoMgr");
    var SwitchMgr_1 = require("../../Plat/GameMgrs/SwitchMgr");
    var LoginMgr_1 = require("../../Plat/GameMgrs/LoginMgr");
    var Green = new cc.Color(24, 221, 40), Red = new cc.Color(255, 78, 0), Yellow = new cc.Color(255, 222, 0);
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.roomOption = null;
        _this.shareSwitch = null;
        _this.roomValue = null;
        _this.roomid = null;
        _this.roundIndex = null;
        _this.shareSwitch = SwitchMgr_1.default.getInstance().get_switch_performance_sharing();
        _this.roomOption = BunchInfoMgr_1.default.getInstance().getRoomOption();
        _this.roomid = BunchInfoMgr_1.default.getInstance().getRoomId();
        _this.roundIndex = BunchInfoMgr_1.default.getInstance().getBunchInfo().roundIndex;
        _this.roomValue = BunchInfoMgr_1.default.getInstance().getBunchInfo().roomValue;
        return _this;
      }
      Model.prototype.updateSwitch = function(msg) {
        this.shareSwitch = msg.cfg.switch_performance_sharing;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_ztj: null,
          btn_mjjf: null,
          btn_share: null,
          btn_exit: null,
          node_content: null,
          prefab_LymjRoundsSettle: null,
          prefab_LymjStatisticsSettle: null,
          ztjNormalSprite: null,
          ztjPressSprite: null,
          mjjfNormalSprite: null,
          mjjfPressSprite: null,
          btn_close: null,
          lab_look_video: null,
          lbl_roomInfo: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.addGrayLayer();
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.btn_ztj = ctrl.btn_ztj.getComponent(cc.Sprite);
        this.ui.btn_mjjf = ctrl.btn_mjjf.getComponent(cc.Sprite);
        this.ui.btn_share = ctrl.btn_share;
        this.ui.lab_look_video = ctrl.lab_look_video;
        this.ui.lab_look_video.node.active = false;
        this.ui.btn_exit = ctrl.btn_exit;
        this.ui.btn_exit.active = false;
        this.ui.node_content = ctrl.node_content;
        this.ui.btn_close = ctrl.btn_close;
        this.ui.btn_close.active = true;
        this.ui.lbl_roomInfo = ctrl.lbl_roomInfo;
        if (BunchInfoMgr_1.default.getInstance().getplazzaFlag()) {
          this.ui.btn_close.active = true;
          this.ui.lab_look_video.node.active = true;
        }
        this.ui.prefab_LymjRoundsSettle = ctrl.prefab_LymjRoundsSettle;
        this.ui.prefab_LymjStatisticsSettle = ctrl.prefab_LymjStatisticsSettle;
        this.ui.ztjNormalSprite = this.ui.btn_ztj.node.getChildByName("totalBtn_normalSprite");
        this.ui.ztjPressSprite = this.ui.btn_ztj.node.getChildByName("totalBtn_pressSprite");
        this.ui.mjjfNormalSprite = this.ui.btn_mjjf.node.getChildByName("detailBtn_normalSprite");
        this.ui.mjjfPressSprite = this.ui.btn_mjjf.node.getChildByName("detailBtn_pressSprite");
        this.initViewWithStatistics();
        this.showShareBtn();
        this.showroomInfo();
      };
      View.prototype.initViewWithRounds = function() {
        this.ui.node_content.removeAllChildren();
        var LymjRounds = cc.instantiate(this.ui.prefab_LymjRoundsSettle);
        this.ui.node_content.addChild(LymjRounds);
        var LymjRoundsCtrl = LymjRounds.getComponent("LymjRoundsSettleCtrl");
        this.ui.ztjNormalSprite.active = true;
        this.ui.ztjPressSprite.active = false;
        this.ui.mjjfNormalSprite.active = false;
        this.ui.mjjfPressSprite.active = true;
      };
      View.prototype.initViewWithStatistics = function() {
        this.ui.node_content.removeAllChildren();
        var LymjStatistics = cc.instantiate(this.ui.prefab_LymjStatisticsSettle);
        var LymjStatisticsSettleCtrl = LymjStatistics.getComponent("LymjStatisticsSettleCtrl");
        console.log("LymjStatistics=", LymjStatistics, this.ui.node_content);
        this.ui.node_content.active = true;
        this.ui.node_content.addChild(LymjStatistics);
        this.ui.ztjNormalSprite.active = false;
        this.ui.ztjPressSprite.active = true;
        this.ui.mjjfNormalSprite.active = true;
        this.ui.mjjfPressSprite.active = false;
      };
      View.prototype.showShareBtn = function() {
        this.ui.btn_share.active = 1 == this.model.shareSwitch;
      };
      View.prototype.formatDate = function() {
        var time = new Date();
        var year = time.getFullYear();
        var month = time.getMonth() + 1;
        var date = time.getDate();
        var hour = time.getHours();
        var minute = time.getMinutes();
        var second = time.getSeconds();
        return year + "-" + month + "-" + date + " " + hour + ":" + minute + ":" + second;
      };
      View.prototype.showroomInfo = function() {
        var roomOptionDesc = this.model.roomOption.toString().replace(new RegExp(",", "g"), " ").replace(new RegExp("，", "g"), " ").replace(new RegExp("。", "g"), " ");
        var dattime = this.formatDate();
        this.ui.lbl_roomInfo.string = "房号" + this.model.roomid + "  第" + this.model.roundIndex + "/" + this.model.roomValue.v_roundcount + "局\n\n" + roomOptionDesc + "\n\n" + dattime;
      };
      return View;
    }(BaseView_1.default);
    var LymjFinalSettleCtrl = function(_super) {
      __extends(LymjFinalSettleCtrl, _super);
      function LymjFinalSettleCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_content = null;
        _this.btn_ztj = null;
        _this.btn_mjjf = null;
        _this.btn_share = null;
        _this.btn_exit = null;
        _this.prefab_LymjRoundsSettle = null;
        _this.prefab_LymjStatisticsSettle = null;
        _this.btn_close = null;
        _this.lab_look_video = null;
        _this.lbl_roomInfo = null;
        return _this;
      }
      LymjFinalSettleCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      LymjFinalSettleCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqGameSwitch": this.http_reqGameSwitch
        };
      };
      LymjFinalSettleCtrl.prototype.defineGlobalEvents = function() {};
      LymjFinalSettleCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.btn_ztj, this.btn_ztj_cb, "总统计");
        this.connect(G_UiType.image, this.btn_mjjf, this.btn_mjjf_cb, "每局积分");
        this.connect(G_UiType.image, this.btn_share, this.btn_share_cb, "分享");
        this.connect(G_UiType.image, this.btn_exit, this.btn_exit_cb, "退出");
        this.connect(G_UiType.image, this.btn_close, this.btn_close_cb, "退出");
      };
      LymjFinalSettleCtrl.prototype.start = function() {};
      LymjFinalSettleCtrl.prototype.http_reqGameSwitch = function(msg) {
        this.model.updateSwitch(msg);
        this.view.showShareBtn();
      };
      LymjFinalSettleCtrl.prototype.btn_exit_cb = function() {
        BunchInfoMgr_1.default.getInstance().clear();
        LoginMgr_1.default.getInstance().disconnectGameSvr();
      };
      LymjFinalSettleCtrl.prototype.btn_ztj_cb = function() {
        console.log("btn_ztj_cb");
        this.view.initViewWithStatistics();
      };
      LymjFinalSettleCtrl.prototype.btn_mjjf_cb = function() {
        console.log("btn_mjjf_cb");
        this.view.initViewWithRounds();
      };
      LymjFinalSettleCtrl.prototype.btn_share_cb = function() {
        console.log("btn_share_cb");
        this.start_sub_module(G_MODULE.Shared);
      };
      LymjFinalSettleCtrl.prototype.showDefaultView = function() {
        this.view.initViewWithStatistics();
      };
      LymjFinalSettleCtrl.prototype.btn_close_cb = function() {
        BunchInfoMgr_1.default.getInstance().clear();
        this.finish();
        this.start_module(G_MODULE.Plaza);
      };
      __decorate([ property({
        tooltip: "content",
        type: cc.Node
      }) ], LymjFinalSettleCtrl.prototype, "node_content", void 0);
      __decorate([ property({
        tooltip: "btn_ztj",
        type: cc.Node
      }) ], LymjFinalSettleCtrl.prototype, "btn_ztj", void 0);
      __decorate([ property({
        tooltip: "btn_mjjf",
        type: cc.Node
      }) ], LymjFinalSettleCtrl.prototype, "btn_mjjf", void 0);
      __decorate([ property({
        tooltip: "btn_share",
        type: cc.Node
      }) ], LymjFinalSettleCtrl.prototype, "btn_share", void 0);
      __decorate([ property({
        tooltip: "btn_exit",
        type: cc.Node
      }) ], LymjFinalSettleCtrl.prototype, "btn_exit", void 0);
      __decorate([ property({
        tooltip: "每局明细",
        type: cc.Prefab
      }) ], LymjFinalSettleCtrl.prototype, "prefab_LymjRoundsSettle", void 0);
      __decorate([ property({
        tooltip: "总统计",
        type: cc.Prefab
      }) ], LymjFinalSettleCtrl.prototype, "prefab_LymjStatisticsSettle", void 0);
      __decorate([ property({
        tooltip: "btn_close",
        type: cc.Node
      }) ], LymjFinalSettleCtrl.prototype, "btn_close", void 0);
      __decorate([ property({
        tooltip: "录像提示",
        type: cc.Label
      }) ], LymjFinalSettleCtrl.prototype, "lab_look_video", void 0);
      __decorate([ property({
        tooltip: "房间信息",
        type: cc.Label
      }) ], LymjFinalSettleCtrl.prototype, "lbl_roomInfo", void 0);
      LymjFinalSettleCtrl = __decorate([ ccclass ], LymjFinalSettleCtrl);
      return LymjFinalSettleCtrl;
    }(BaseCtrl_1.default);
    exports.default = LymjFinalSettleCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../Plat/GameMgrs/LoginMgr": "LoginMgr",
    "../../Plat/GameMgrs/SwitchMgr": "SwitchMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView"
  } ],
  LymjGambleRecordCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ae992nPmrlERJRnWbZmPEH+", "LymjGambleRecordCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var UserMgr_1 = require("../../../Plat/GameMgrs/UserMgr");
    var Green = new cc.Color(24, 221, 40), Red = new cc.Color(255, 78, 0), Yellow = new cc.Color(255, 222, 0);
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.leap = 68;
        _this.gameResultData = RoomMgr_1.default.getInstance().getBunchInfo();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_content: null,
          node_yellowBattleResult: null,
          node_yellowLightBattleResult: null,
          btn_close: null,
          node_panel: null,
          lbl_score0s: [],
          lbl_score1s: [],
          lbl_score2s: [],
          lbl_score3s: [],
          lbl_roundindexes: [],
          lbl_times: [],
          lbl_names: {},
          lbl_nameSigns: {}
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        console.log("winlog");
        this.ui.btn_close = ctrl.btn_close;
        this.ui.node_content = ctrl.node_content;
        this.ui.node_yellowBattleResult = ctrl.node_yellowBattleResult;
        this.ui.node_yellowLightBattleResult = ctrl.node_yellowLightBattleResult;
        this.ui.node_panel = ctrl.node_panel;
        if (null == this.model.gameResultData || void 0 == this.model.gameResultData) return;
        var meiju = this.model.gameResultData.meiju;
        if (null == meiju || void 0 == meiju) return;
        var prefabBarArr = [ this.ui.node_yellowBattleResult, this.ui.node_yellowLightBattleResult ];
        meiju.length > 7 && this.ui.node_content.setContentSize(this.ui.node_content.getContentSize().width, this.model.leap * meiju.length);
        for (var i = 0; i < meiju.length; i++) {
          var colorindex = i % 2;
          var prefabBar = prefabBarArr[colorindex];
          var barItem = cc.instantiate(prefabBar);
          barItem.active = true;
          barItem.setPosition(cc.v2(0, (i + 1) * -this.model.leap));
          this.ui.node_content.addChild(barItem);
          this.ui.lbl_roundindexes[i] = barItem.getChildByName("lbl_roundindex").getComponent(cc.Label);
          this.ui.lbl_times[i] = barItem.getChildByName("lbl_time").getComponent(cc.Label);
          this.ui.lbl_score0s[i] = barItem.getChildByName("lbl_score0").getComponent(cc.Label);
          this.ui.lbl_score1s[i] = barItem.getChildByName("lbl_score1").getComponent(cc.Label);
          this.ui.lbl_score2s[i] = barItem.getChildByName("lbl_score2").getComponent(cc.Label);
          this.ui.lbl_score3s[i] = barItem.getChildByName("lbl_score3").getComponent(cc.Label);
        }
        for (var logicseatid = 0; logicseatid < RoomMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
          this.ui.lbl_names[logicseatid] = this.ui.node_panel.getChildByName("lbl_name" + logicseatid).getComponent(cc.Label);
          this.ui.lbl_nameSigns[logicseatid] = this.ui.node_panel.getChildByName("lbl_nameSign" + logicseatid).getComponent(cc.Label);
        }
      };
      View.prototype.showData = function() {
        var meijuData = this.model.gameResultData.meiju;
        if (null != meijuData && void 0 != meijuData) {
          this.showDetailData(meijuData);
          this.showPlayerInfo();
        }
      };
      View.prototype.showDetailData = function(meijuData) {
        for (var i = 0; i < meijuData.length; ++i) {
          var itemData = meijuData[i];
          var myDate = new Date(itemData[0]);
          var curtime = myDate.getHours().toString() + ":" + myDate.getMinutes();
          this.ui.lbl_times[i].string = "(" + curtime + ")";
          this.ui.lbl_roundindexes[i].string = "第" + (i + 1) + "局";
          var lbl_scores = [ this.ui.lbl_score0s[i], this.ui.lbl_score1s[i], this.ui.lbl_score2s[i], this.ui.lbl_score3s[i] ];
          for (var logicseatid = 0; logicseatid < RoomMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
            var dataItem = itemData[1][logicseatid.toString()];
            var hutime = dataItem[0];
            var score = dataItem[1];
            var yikescore = dataItem[2];
            var yikescorestr = "";
            var hutimestr = "";
            var scorestr = "";
            var lbl_score = lbl_scores[logicseatid];
            lbl_score.node.active = true;
            var prefix = "";
            score > 0 && (prefix = "+");
            if (1 == this.model.gameResultData.scoretype) {
              yikescorestr = "" + yikescore;
              scorestr = "(" + prefix + score + ")";
            } else scorestr = "" + prefix + score;
            hutime && (hutimestr = "(" + hutime + ")");
            var wholescore = "" + yikescorestr + scorestr + hutimestr;
            lbl_score.string = wholescore;
            lbl_score.node.color = score >= 0 ? Red : Green;
          }
        }
      };
      View.prototype.showPlayerInfo = function() {
        var viewCalled = [ "(我)", "(下家)", "(对家)", "(上家)" ];
        for (var logicseatid = 0; logicseatid < RoomMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
          var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(logicseatid);
          this.ui.lbl_nameSigns[logicseatid].string = viewCalled[viewSeatId];
          this.ui.lbl_nameSigns[logicseatid].node.active = true;
          var uid = RoomMgr_1.default.getInstance().users[logicseatid];
          if (null == uid || void 0 == uid) continue;
          var user = UserMgr_1.default.getInstance().getUserById(uid);
          this.ui.lbl_names[logicseatid].string = user.nickname;
          this.ui.lbl_names[logicseatid].node.active = true;
        }
      };
      return View;
    }(BaseView_1.default);
    var LymjGambleRecordCtrl = function(_super) {
      __extends(LymjGambleRecordCtrl, _super);
      function LymjGambleRecordCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_content = null;
        _this.node_yellowBattleResult = null;
        _this.node_yellowLightBattleResult = null;
        _this.btn_close = null;
        _this.node_panel = null;
        return _this;
      }
      LymjGambleRecordCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        null != this.model.gameResultData && void 0 != this.model.gameResultData && this.view.showData();
      };
      LymjGambleRecordCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onStartGame: this.onStartGame,
          onDissolutionRoom: this.onDissolutionRoom,
          onGameFinished: this.onGameFinished
        };
      };
      LymjGambleRecordCtrl.prototype.defineGlobalEvents = function() {};
      LymjGambleRecordCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.btn_close, this.btn_closecb, "点击关闭");
      };
      LymjGambleRecordCtrl.prototype.start = function() {};
      LymjGambleRecordCtrl.prototype.onStartGame = function(msg) {
        this.finish();
      };
      LymjGambleRecordCtrl.prototype.onDissolutionRoom = function(msg) {
        msg.result && this.finish();
      };
      LymjGambleRecordCtrl.prototype.onGameFinished = function(msg) {
        this.finish();
      };
      LymjGambleRecordCtrl.prototype.btn_closecb = function() {
        this.finish();
      };
      __decorate([ property({
        tooltip: "滚动视图",
        type: cc.Node
      }) ], LymjGambleRecordCtrl.prototype, "node_content", void 0);
      __decorate([ property({
        tooltip: "深色战绩记录",
        type: cc.Node
      }) ], LymjGambleRecordCtrl.prototype, "node_yellowBattleResult", void 0);
      __decorate([ property({
        tooltip: "浅色战绩记录",
        type: cc.Node
      }) ], LymjGambleRecordCtrl.prototype, "node_yellowLightBattleResult", void 0);
      __decorate([ property({
        tooltip: "关闭按钮",
        type: cc.Node
      }) ], LymjGambleRecordCtrl.prototype, "btn_close", void 0);
      __decorate([ property({
        tooltip: "panel",
        type: cc.Node
      }) ], LymjGambleRecordCtrl.prototype, "node_panel", void 0);
      LymjGambleRecordCtrl = __decorate([ ccclass ], LymjGambleRecordCtrl);
      return LymjGambleRecordCtrl;
    }(BaseCtrl_1.default);
    exports.default = LymjGambleRecordCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/GameMgrs/UserMgr": "UserMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView"
  } ],
  LymjLogic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ef657+lOvJP4K522f5UNSMT", "LymjLogic");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LymjPlayer_1 = require("./LymjPlayer");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var LymjProp_1 = require("./LymjProp");
    var MahjongLogic_1 = require("../../../GameCommon/Mahjong/MahjongLogic");
    var LymjCards_1 = require("./LymjCards");
    var LymjLogic = function(_super) {
      __extends(LymjLogic, _super);
      function LymjLogic() {
        return _super.call(this) || this;
      }
      LymjLogic.getInstance = function() {
        this._instance || (this._instance = new LymjLogic());
        return this._instance;
      };
      LymjLogic.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        delete LymjLogic._instance;
        LymjLogic._instance = null;
      };
      LymjLogic.prototype.initMahjong = function() {
        this.mahjongcards = new LymjCards_1.default(13);
        for (var i = 0; i < this.seatcount; i++) {
          this.players[i] = new LymjPlayer_1.default();
          this.players[i].init(i, this);
        }
        var cfg = RoomMgr_1.default.getInstance().getFangKaCfg();
        this.prop = new LymjProp_1.default(cfg);
        this.isQuanZiDong = 1 == this.prop.get_b_quanzimo();
      };
      return LymjLogic;
    }(MahjongLogic_1.default);
    exports.default = LymjLogic;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Mahjong/MahjongLogic": "MahjongLogic",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "./LymjCards": "LymjCards",
    "./LymjPlayer": "LymjPlayer",
    "./LymjProp": "LymjProp"
  } ],
  LymjPlayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "74a05aeWldFgLmbnGiAQT5O", "LymjPlayer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MahjongPlayer_1 = require("../../../GameCommon/Mahjong/MahjongPlayer");
    var MahjongGeneral_1 = require("../../../GameCommon/Mahjong/MahjongGeneral");
    var MahjongDef_1 = require("../../../GameCommon/Mahjong/MahjongDef");
    var LymjPlayer = function(_super) {
      __extends(LymjPlayer, _super);
      function LymjPlayer() {
        return _super.call(this) || this;
      }
      LymjPlayer.prototype.sortCard = function() {
        var tmpHandCard = this.handcard.concat();
        tmpHandCard.sort();
        var baibanCount = 0;
        var firstBaiBanPos = -1;
        var lastBaiBanReplacePos = 0;
        var jokercount = 0;
        for (var i = 0; i < tmpHandCard.length; ++i) {
          var cardvalue = tmpHandCard[i];
          if (MahjongGeneral_1.MahjongGeneral.isBaiBan(cardvalue)) {
            baibanCount++;
            firstBaiBanPos < 0 && (firstBaiBanPos = i);
          } else MahjongGeneral_1.MahjongGeneral.isJoker(cardvalue) && jokercount++;
          this.logic.isQuanZiDong || cardvalue < this.logic.jin && (lastBaiBanReplacePos = i + 1);
        }
        for (var i = 0; i < baibanCount; ++i) tmpHandCard.remove(firstBaiBanPos);
        if (this.logic.isQuanZiDong) for (var i = 0; i < baibanCount; ++i) tmpHandCard.insert(jokercount, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_BaiBan); else for (var i = 0; i < baibanCount; ++i) tmpHandCard.insert(lastBaiBanReplacePos, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_BaiBan);
        this.handcard = tmpHandCard;
        tmpHandCard = [];
      };
      LymjPlayer.prototype.outcardLimited = function(standcard) {
        if (this.isShuangYou() && !MahjongGeneral_1.MahjongGeneral.isJoker(standcard)) return true;
        return false;
      };
      LymjPlayer.prototype.checkJinXianZhi = function(event) {
        var jincount = this.getJinCount();
        if (jincount <= 0) return false;
        switch (event) {
         case MahjongDef_1.MahjongDef.event_zimo:
          var huinfo = this.mahjongcards.IsHu(this.handcard);
          if (huinfo && huinfo.hutype == MahjongDef_1.MahjongDef.hutype_131) return false;
        }
        var jinxianzhi = this.logic.prop.get_b_jinxianzhi();
        switch (event) {
         case MahjongDef_1.MahjongDef.event_hu:
          switch (jinxianzhi) {
           case 0:
            return false;

           case 1:
            if (jincount < 2) return false;
          }
          break;

         case MahjongDef_1.MahjongDef.event_zimo:
         case MahjongDef_1.MahjongDef.event_qianggang_hu:
          switch (jinxianzhi) {
           case 0:
            return false;

           case 1:
           case 2:
            if (jincount < 2) return false;
          }
          break;

         default:
          return false;
        }
        return true;
      };
      LymjPlayer.prototype.getTingDic = function(handcard, players, mySeatId) {
        this.tingtypedic = {};
        var myself = players[mySeatId];
        var maxTingType = -1;
        for (var i = 0; i < handcard.length; i++) {
          var tmpCards = handcard.concat();
          tmpCards.remove(i);
          var isXianJin = this.checkXianJin(tmpCards);
          var card = handcard[i];
          tmpCards.sort();
          var tingarr = this.getTingArr(tmpCards);
          var tingcards = Object.keys(tingarr);
          var tingtype = -1;
          var tingTotalNums = 0;
          if (isXianJin) if (MahjongGeneral_1.MahjongGeneral.isJoker(card)) {
            tingtype = 2;
            tingtype > maxTingType && (maxTingType = tingtype);
          } else {
            tingtype = 1;
            tingtype > maxTingType && (maxTingType = tingtype);
          } else if (tingcards.length > 0) {
            tingtype = 0;
            tingtype > maxTingType && (maxTingType = tingtype);
          }
          var keys = [];
          for (var n = 0; n < tingcards.length; ) {
            var key = tingcards[n];
            var cardTotalNum = MahjongGeneral_1.MahjongGeneral.isJoker(parseInt(key)) ? 3 : 4;
            var checkxianjintmpCards = tmpCards.concat();
            checkxianjintmpCards.push(parseInt(key));
            checkxianjintmpCards.sort();
            if (MahjongGeneral_1.MahjongGeneral.isJoker(parseInt(key)) && myself.checkTmpJinXianZhi(checkxianjintmpCards, MahjongDef_1.MahjongDef.event_zimo) && myself.checkTmpJinXianZhi(checkxianjintmpCards, MahjongDef_1.MahjongDef.event_hu)) {
              tingcards.removeByValue(parseInt(key));
              continue;
            }
            checkxianjintmpCards = [];
            n++;
            var leftCardNum = cardTotalNum - myself.getLeftHandCountByValue(parseInt(key)) - myself.getLeftOpCardsCountByValue(parseInt(key)) - myself.getLeftcardpoolCountByValue(parseInt(key));
            for (var m in players) {
              var player = players[m];
              parseInt(m) != mySeatId && (leftCardNum = leftCardNum - player.getLeftOpCardsCountByValue(parseInt(key)) - player.getLeftcardpoolCountByValue(parseInt(key)));
            }
            tingTotalNums += leftCardNum;
          }
          tmpCards = [];
          this.tingtypedic[card] = {
            type: tingtype,
            cards: 0 == keys.length ? tingcards : keys,
            tingNums: tingTotalNums
          };
        }
        for (var i = 0; i < handcard.length; i++) {
          var card = handcard[i];
          this.tingtypedic[card].type < maxTingType && (this.tingtypedic[card] = {});
          var keys = [];
          if (1 == this.tingtypedic[card].type || 2 == this.tingtypedic[card].type) {
            var tmphandcards = this.handcard.concat();
            tmphandcards.removeByValue(card);
            for (var cardidx = 0; cardidx < this.mahjongcards.all_majiang_types.length; ++cardidx) {
              var cardvalue = this.mahjongcards.all_majiang_types[cardidx];
              var tmphandcardsCopy = tmphandcards.concat();
              parseInt(cardvalue) != this.logic.jin && parseInt(cardvalue) != this.logic.jin2 || (cardvalue = 0);
              tmphandcardsCopy.push(cardvalue);
              tmphandcardsCopy.sort();
              var huinfo = this.mahjongcards.IsHu(tmphandcardsCopy);
              tmphandcardsCopy = [];
              if (!huinfo) continue;
              keys.contain(0) || keys.push(0);
              this.logic.isQuanZiDong && (keys.contain(1) || keys.push(1));
              for (var index = 0; index < huinfo.hucards.length; ++index) 0 == huinfo.hucards[index].type && 2 == huinfo.hucards[index].jincount && (keys.contain(cardvalue) || keys.push(cardvalue));
            }
            tmphandcards = [];
          }
          if (0 != keys.length) {
            var tingTotalNums = 0;
            for (var j = 0; j < keys.length; j++) {
              var key = keys[j];
              var cardTotalNum = MahjongGeneral_1.MahjongGeneral.isJoker(parseInt(key)) ? 3 : 4;
              var leftCardNum = cardTotalNum - myself.getLeftHandCountByValue(parseInt(key)) - myself.getLeftOpCardsCountByValue(parseInt(key)) - myself.getLeftcardpoolCountByValue(parseInt(key));
              for (var m = 0; m < players.length; m++) {
                var player = players[m];
                m != mySeatId && (leftCardNum = leftCardNum - player.getLeftOpCardsCountByValue(parseInt(key)) - player.getLeftcardpoolCountByValue(parseInt(key)));
              }
              tingTotalNums += leftCardNum;
            }
            this.tingtypedic[card].cards = keys;
            this.tingtypedic[card].tingNums = tingTotalNums;
          }
          if (myself.checkJinXianZhi(MahjongDef_1.MahjongDef.event_zimo) && myself.checkJinXianZhi(MahjongDef_1.MahjongDef.event_hu) && 0 == this.tingtypedic[card].type) {
            var hucard131 = null;
            var temphandcard = handcard.concat();
            temphandcard.removeByValue(card);
            temphandcard.push(this.tingtypedic[card].cards[0]);
            temphandcard.sort();
            hucard131 = this.mahjongcards.Is131(temphandcard);
            temphandcard = [];
            if (hucard131) continue;
            this.tingtypedic[card] = {};
          }
        }
        return this.tingtypedic;
      };
      LymjPlayer.prototype.getCardsCanBuGang = function() {
        var cardsCanBuGang = [];
        for (var index = 0; index < this.handcard.length; index++) {
          var cardValue = this.handcard[index];
          for (var i = 0; i < this.opcards.length; i++) {
            var opinfo = this.opcards[i];
            opinfo.op == MahjongDef_1.MahjongDef.op_peng && opinfo.value == cardValue && cardsCanBuGang.push(cardValue);
          }
        }
        return cardsCanBuGang;
      };
      LymjPlayer.prototype.getCardsCanAnGang = function() {
        var cardsCanAnGang = [];
        var curcard = this.logic.curcard;
        var cardcountmap = {};
        for (var i = 0; i < this.handcard.length; ++i) {
          var card = this.handcard[i];
          cardcountmap[card] ? cardcountmap[card] = cardcountmap[card] + 1 : cardcountmap[card] = 1;
        }
        for (var cardvalue in cardcountmap) {
          var count = cardcountmap[cardvalue];
          if (4 == count) {
            console.log("LymjPlayer:getCardsCanAnGang", cardvalue);
            cardsCanAnGang.push(cardvalue);
          }
        }
        return cardsCanAnGang;
      };
      return LymjPlayer;
    }(MahjongPlayer_1.default);
    exports.default = LymjPlayer;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Mahjong/MahjongDef": "MahjongDef",
    "../../../GameCommon/Mahjong/MahjongGeneral": "MahjongGeneral",
    "../../../GameCommon/Mahjong/MahjongPlayer": "MahjongPlayer"
  } ],
  LymjProp: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7d0dc3u3/hO8YYGoxzFGacK", "LymjProp");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LymjProp = function() {
      function LymjProp(customcfg) {
        this.customcfg = null;
        this.defaultcfg = {
          v_difen: 1,
          v_huagang: 1,
          v_angang: 2,
          v_minggang: 1,
          t_zhuangfanbei: 2,
          t_zimo: 2,
          t_qiangganghu: 2,
          t_sanjindao: 4,
          t_sijindao: 4,
          t_wujindao: 4,
          t_liujindao: 4,
          t_youjin: 4,
          t_shuangyou: 8,
          t_sanyou: 16,
          t_tianhu: 4,
          t_gaibaoqiangjin: 8,
          t_shisanyao: 8,
          v_roundcount: 8,
          v_seatcount: 4,
          v_paytype: 1,
          v_youjintype: 0,
          b_jinxianzhi: 2,
          b_quanzimo: 0,
          v_fangfei: 99,
          v_genzhuang: 1
        };
        this.customcfg = customcfg;
      }
      LymjProp.prototype.get_v_difen = function() {
        if (null != this.customcfg["v_difen"]) return this.customcfg["v_difen"];
        return this.defaultcfg["v_difen"];
      };
      LymjProp.prototype.get_v_huagang = function() {
        if (null != this.customcfg["v_huagang"]) return this.customcfg["v_huagang"];
        return this.defaultcfg["v_huagang"];
      };
      LymjProp.prototype.get_v_angang = function() {
        if (null != this.customcfg["v_angang"]) return this.customcfg["v_angang"];
        return this.defaultcfg["v_angang"];
      };
      LymjProp.prototype.get_v_minggang = function() {
        if (null != this.customcfg["v_minggang"]) return this.customcfg["v_minggang"];
        return this.defaultcfg["v_minggang"];
      };
      LymjProp.prototype.get_t_zhuangfanbei = function() {
        if (null != this.customcfg["t_zhuangfanbei"]) return this.customcfg["t_zhuangfanbei"];
        return this.defaultcfg["t_zhuangfanbei"];
      };
      LymjProp.prototype.get_t_zimo = function() {
        if (null != this.customcfg["t_zimo"]) return this.customcfg["t_zimo"];
        return this.defaultcfg["t_zimo"];
      };
      LymjProp.prototype.get_t_qiangganghu = function() {
        if (null != this.customcfg["t_qiangganghu"]) return this.customcfg["t_qiangganghu"];
        return this.defaultcfg["t_qiangganghu"];
      };
      LymjProp.prototype.get_t_sanjindao = function() {
        if (null != this.customcfg["t_sanjindao"]) return this.customcfg["t_sanjindao"];
        return this.defaultcfg["t_sanjindao"];
      };
      LymjProp.prototype.get_t_sijindao = function() {
        if (null != this.customcfg["t_sijindao"]) return this.customcfg["t_sijindao"];
        return this.defaultcfg["t_sijindao"];
      };
      LymjProp.prototype.get_t_wujindao = function() {
        if (null != this.customcfg["t_wujindao"]) return this.customcfg["t_wujindao"];
        return this.defaultcfg["t_wujindao"];
      };
      LymjProp.prototype.get_t_liujindao = function() {
        if (null != this.customcfg["t_liujindao"]) return this.customcfg["t_liujindao"];
        return this.defaultcfg["t_liujindao"];
      };
      LymjProp.prototype.get_t_youjin = function() {
        if (null != this.customcfg["t_youjin"]) return this.customcfg["t_youjin"];
        return this.defaultcfg["t_youjin"];
      };
      LymjProp.prototype.get_t_shuangyou = function() {
        if (null != this.customcfg["t_shuangyou"]) return this.customcfg["t_shuangyou"];
        return this.defaultcfg["t_shuangyou"];
      };
      LymjProp.prototype.get_t_sanyou = function() {
        if (null != this.customcfg["t_sanyou"]) return this.customcfg["t_sanyou"];
        return this.defaultcfg["t_sanyou"];
      };
      LymjProp.prototype.get_t_tianhu = function() {
        if (null != this.customcfg["t_tianhu"]) return this.customcfg["t_tianhu"];
        return this.defaultcfg["t_tianhu"];
      };
      LymjProp.prototype.get_t_gaibaoqiangjin = function() {
        if (null != this.customcfg["t_gaibaoqiangjin"]) return this.customcfg["t_gaibaoqiangjin"];
        return this.defaultcfg["t_gaibaoqiangjin"];
      };
      LymjProp.prototype.get_t_shisanyao = function() {
        if (null != this.customcfg["t_shisanyao"]) return this.customcfg["t_shisanyao"];
        return this.defaultcfg["t_shisanyao"];
      };
      LymjProp.prototype.get_v_roundcount = function() {
        if (null != this.customcfg["v_roundcount"]) return this.customcfg["v_roundcount"];
        return this.defaultcfg["v_roundcount"];
      };
      LymjProp.prototype.get_v_seatcount = function() {
        if (null != this.customcfg["v_seatcount"]) return this.customcfg["v_seatcount"];
        return this.defaultcfg["v_seatcount"];
      };
      LymjProp.prototype.get_v_paytype = function() {
        if (null != this.customcfg["v_paytype"]) return this.customcfg["v_paytype"];
        return this.defaultcfg["v_paytype"];
      };
      LymjProp.prototype.get_v_youjintype = function() {
        if (null != this.customcfg["v_youjintype"]) return this.customcfg["v_youjintype"];
        return this.defaultcfg["v_youjintype"];
      };
      LymjProp.prototype.get_b_jinxianzhi = function() {
        if (null != this.customcfg["b_jinxianzhi"]) return this.customcfg["b_jinxianzhi"];
        return this.defaultcfg["b_jinxianzhi"];
      };
      LymjProp.prototype.get_b_quanzimo = function() {
        if (null != this.customcfg["b_quanzimo"]) return this.customcfg["b_quanzimo"];
        return this.defaultcfg["b_quanzimo"];
      };
      LymjProp.prototype.get_v_fangfei = function() {
        if (null != this.customcfg["v_fangfei"]) return this.customcfg["v_fangfei"];
        return this.defaultcfg["v_fangfei"];
      };
      LymjProp.prototype.get_v_genzhuang = function() {
        if (null != this.customcfg["v_genzhuang"]) return this.customcfg["v_genzhuang"];
        return this.defaultcfg["v_genzhuang"];
      };
      return LymjProp;
    }();
    exports.default = LymjProp;
    cc._RF.pop();
  }, {} ],
  LymjRoomCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "529e2mF2rtL9Yis1xS1U8pd", "LymjRoomCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var LymjLogic_1 = require("../LymjMgr/LymjLogic");
    var MahjongResMgr_1 = require("../../../GameCommon/Mahjong/MahjongResMgr");
    var MahjongDef_1 = require("../../../GameCommon/Mahjong/MahjongDef");
    var MahjongAudio_1 = require("../../../GameCommon/Mahjong/MahjongAudio");
    var LymjCards_1 = require("../LymjMgr/LymjCards");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          mahjongRoom: null
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.showComponents = function() {
        this.ui.mahjongRoom = cc.instantiate(ctrl.MahjongRoom);
        this.node.addChild(this.ui.mahjongRoom);
      };
      View.prototype.initUi = function() {};
      return View;
    }(BaseView_1.default);
    var LymjRoomCtrl = function(_super) {
      __extends(LymjRoomCtrl, _super);
      function LymjRoomCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.MahjongRoom = null;
        return _this;
      }
      LymjRoomCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        RoomMgr_1.default.getInstance().setGameLibs(MahjongDef_1.MahjongDef, MahjongResMgr_1.default, LymjLogic_1.default, MahjongAudio_1.default, LymjCards_1.default);
        this.view.showComponents();
      };
      LymjRoomCtrl.prototype.defineNetEvents = function() {};
      LymjRoomCtrl.prototype.defineGlobalEvents = function() {};
      LymjRoomCtrl.prototype.connectUi = function() {};
      LymjRoomCtrl.prototype.start = function() {
        this.isIPhoneX() && this.resetDesignResolution(this.node.getComponent(cc.Canvas));
      };
      __decorate([ property(cc.Prefab) ], LymjRoomCtrl.prototype, "MahjongRoom", void 0);
      LymjRoomCtrl = __decorate([ ccclass ], LymjRoomCtrl);
      return LymjRoomCtrl;
    }(BaseCtrl_1.default);
    exports.default = LymjRoomCtrl;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Mahjong/MahjongAudio": "MahjongAudio",
    "../../../GameCommon/Mahjong/MahjongDef": "MahjongDef",
    "../../../GameCommon/Mahjong/MahjongResMgr": "MahjongResMgr",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../LymjMgr/LymjCards": "LymjCards",
    "../LymjMgr/LymjLogic": "LymjLogic"
  } ],
  LymjRoundsSettleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "464234CfZxCDZ2nkpAz99dY", "LymjRoundsSettleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var GameCateCfg_1 = require("../../Plat/CfgMgrs/GameCateCfg");
    var BunchInfoMgr_1 = require("../../Plat/GameMgrs/BunchInfoMgr");
    var viewLogicSeatConvertMgr_1 = require("../../Plat/GameMgrs/viewLogicSeatConvertMgr");
    var RecordMgr_1 = require("../../Plat/GameMgrs/RecordMgr");
    var Green = new cc.Color(1, 146, 7), Red = new cc.Color(255, 36, 0), Yellow = new cc.Color(255, 222, 0);
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.gameResultData = null;
        _this.leap = 90;
        return _this;
      }
      Model.prototype.setgameResultData = function(data) {
        this.gameResultData = null == data ? RoomMgr_1.default.getInstance().getBunchInfo() : data;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_ztj: null,
          btn_mjjf: null,
          btn_share: null,
          btn_exit: null,
          node_content: null,
          node_yellowBattleResult: null,
          node_yellowLightBattleResult: null,
          btn_close: null,
          node_panel: null,
          lbl_score0s: [],
          lbl_score1s: [],
          lbl_score2s: [],
          lbl_score3s: [],
          lbl_roundindexes: [],
          lbl_times: [],
          totalScores: {},
          lbl_names: {},
          lbl_nameSigns: {},
          waterMarkForWins: {},
          waterMarkForLosts: {},
          node_waterMark: null,
          lbl_totalScores: []
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_content = ctrl.node_content;
        this.ui.node_yellowBattleResult = ctrl.node_yellowBattleResult;
        this.ui.node_yellowLightBattleResult = ctrl.node_yellowLightBattleResult;
        this.ui.node_panel = ctrl.node_panel;
        this.ui.node_waterMark = ctrl.node_waterMark;
      };
      View.prototype.initUIwithData = function() {
        var meiju = this.model.gameResultData.meiju;
        var prefabBarArr = [ this.ui.node_yellowBattleResult, this.ui.node_yellowLightBattleResult ];
        meiju.length > 3 && this.ui.node_content.setContentSize(this.ui.node_content.getContentSize().width, this.model.leap * meiju.length);
        this.model.itemData = [];
        for (var i = 0; i < meiju.length; i++) {
          var colorindex = i % 2;
          var itemData = meiju[i];
          var prefabBar = prefabBarArr[colorindex];
          var barItem = cc.instantiate(prefabBar);
          this.model.itemData.push(itemData[2]);
          barItem.active = true;
          barItem.setPosition(cc.v2(0, (i + 1) * -this.model.leap));
          this.ui.node_content.addChild(barItem);
          this.ui.lbl_roundindexes[i] = barItem.getChildByName("lbl_roundindex").getComponent(cc.Label);
          this.ui.lbl_times[i] = barItem.getChildByName("lbl_time").getComponent(cc.Label);
          this.ui.lbl_score0s[i] = barItem.getChildByName("lbl_score0").getComponent(cc.Label);
          this.ui.lbl_score1s[i] = barItem.getChildByName("lbl_score1").getComponent(cc.Label);
          this.ui.lbl_score2s[i] = barItem.getChildByName("lbl_score2").getComponent(cc.Label);
          this.ui.lbl_score3s[i] = barItem.getChildByName("lbl_score3").getComponent(cc.Label);
        }
        for (var logicseatid = 0; logicseatid < BunchInfoMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
          this.ui.totalScores[logicseatid] = this.ui.node_panel.getChildByName("lbl_totalScore" + logicseatid).getComponent(cc.Label);
          this.ui.lbl_names[logicseatid] = this.ui.node_panel.getChildByName("lbl_name" + logicseatid).getComponent(cc.Label);
          this.ui.lbl_nameSigns[logicseatid] = this.ui.node_panel.getChildByName("lbl_nameSign" + logicseatid).getComponent(cc.Label);
          this.ui.waterMarkForWins[logicseatid] = this.ui.node_waterMark.getChildByName("user" + logicseatid).getChildByName("zjs_seal_win");
          this.ui.waterMarkForLosts[logicseatid] = this.ui.node_waterMark.getChildByName("user" + logicseatid).getChildByName("zjs_seal_loser");
          this.ui.lbl_totalScores[logicseatid] = this.ui.node_panel.getChildByName("lbl_totalScore" + logicseatid).getComponent(cc.Label);
        }
      };
      View.prototype.showData = function() {
        this.initUIwithData();
        var meijuData = this.model.gameResultData.meiju;
        if (null != meijuData && void 0 != meijuData) {
          this.showDetailData(meijuData);
          this.showPlayerInfo();
        }
      };
      View.prototype.showDetailData = function(meijuData) {
        for (var i = 0; i < meijuData.length; ++i) {
          var itemData = meijuData[i];
          var myDate = new Date(itemData[0]);
          var curtime = myDate.getHours().toString() + ":" + myDate.getMinutes();
          this.ui.lbl_times[i].string = "(" + curtime + ")";
          this.ui.lbl_roundindexes[i].string = "第" + (i + 1) + "局";
          var lbl_scores = [ this.ui.lbl_score0s[i], this.ui.lbl_score1s[i], this.ui.lbl_score2s[i], this.ui.lbl_score3s[i] ];
          for (var logicseatid = 0; logicseatid < BunchInfoMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
            var dataItem = itemData[1][logicseatid.toString()];
            var hutime = dataItem[0];
            var score = dataItem[1];
            var yikescore = dataItem[2];
            var yikescorestr = "";
            var hutimestr = "";
            var scorestr = "";
            var lbl_score = lbl_scores[logicseatid];
            lbl_score.node.active = true;
            var prefix = "";
            score > 0 && (prefix = "+");
            if (1 == this.model.gameResultData.scoretype) {
              yikescorestr = "" + yikescore;
              scorestr = "(" + prefix + score + ")";
            } else scorestr = "" + prefix + score;
            null != hutime && (hutimestr = "(" + hutime + ")");
            var wholescore = "" + yikescorestr + scorestr + hutimestr;
            lbl_score.string = wholescore;
            lbl_score.node.color = score >= 0 ? Red : Green;
          }
        }
      };
      View.prototype.showPlayerInfo = function() {
        var leijiData = this.model.gameResultData.leiji;
        var viewCalled = [ "(我)", "(下家)", "(对家)", "(上家)" ];
        for (var logicseatid = 0; logicseatid < BunchInfoMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
          var viewSeatId = viewLogicSeatConvertMgr_1.default.getInstance().getViewSeatId(logicseatid);
          var users = BunchInfoMgr_1.default.getInstance().getMembelist();
          if (null == users) return;
          this.ui.lbl_nameSigns[logicseatid].string = viewCalled[viewSeatId];
          this.ui.lbl_nameSigns[logicseatid].node.active = true;
          this.ui.lbl_names[logicseatid].string = users[logicseatid].nickname;
          this.ui.lbl_names[logicseatid].node.active = true;
          if (1 == leijiData[logicseatid].title) {
            this.ui.waterMarkForWins[logicseatid].active = true;
            this.ui.waterMarkForLosts[logicseatid].active = false;
          } else if (2 == leijiData[logicseatid].title) {
            this.ui.waterMarkForWins[logicseatid].active = false;
            this.ui.waterMarkForLosts[logicseatid].active = true;
          }
          this.ui.lbl_totalScores[logicseatid].string = leijiData[logicseatid].zongshuying;
          this.ui.lbl_totalScores[logicseatid].node.active = true;
          leijiData[logicseatid].zongshuying >= 0 ? this.ui.lbl_totalScores[logicseatid].node.color = Red : this.ui.lbl_totalScores[logicseatid].node.color = Green;
        }
      };
      return View;
    }(BaseView_1.default);
    var LymjRoundsSettleCtrl = function(_super) {
      __extends(LymjRoundsSettleCtrl, _super);
      function LymjRoundsSettleCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_content = null;
        _this.node_yellowBattleResult = null;
        _this.node_yellowLightBattleResult = null;
        _this.node_panel = null;
        _this.node_waterMark = null;
        return _this;
      }
      LymjRoundsSettleCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        var resultData = BunchInfoMgr_1.default.getInstance().getBunchInfo();
        console.log(resultData);
        this.showView(resultData);
      };
      LymjRoundsSettleCtrl.prototype.defineNetEvents = function() {};
      LymjRoundsSettleCtrl.prototype.defineGlobalEvents = function() {};
      LymjRoundsSettleCtrl.prototype.connectUi = function() {};
      LymjRoundsSettleCtrl.prototype.start = function() {};
      LymjRoundsSettleCtrl.prototype.bindUi = function() {
        var barList = this.ui.node_content.children;
        var self = this;
        var game = GameCateCfg_1.default.getInstance().getGameById(BunchInfoMgr_1.default.getInstance().getGameId());
        var _loop_1 = function(i) {
          barList[i].on(cc.Node.EventType.TOUCH_END, function(event) {
            RecordMgr_1.default.getInstance().reqMatchRecord(game, self.model.itemData[i]);
          }, this_1);
        };
        var this_1 = this;
        for (var i = 0; i < barList.length; i++) _loop_1(i);
      };
      LymjRoundsSettleCtrl.prototype.showView = function(data) {
        this.model.setgameResultData(data);
        this.view.showData();
        BunchInfoMgr_1.default.getInstance().getplazzaFlag() && this.bindUi();
      };
      __decorate([ property({
        tooltip: "滚动视图",
        type: cc.Node
      }) ], LymjRoundsSettleCtrl.prototype, "node_content", void 0);
      __decorate([ property({
        tooltip: "深色战绩记录",
        type: cc.Node
      }) ], LymjRoundsSettleCtrl.prototype, "node_yellowBattleResult", void 0);
      __decorate([ property({
        tooltip: "浅色战绩记录",
        type: cc.Node
      }) ], LymjRoundsSettleCtrl.prototype, "node_yellowLightBattleResult", void 0);
      __decorate([ property({
        tooltip: "panel",
        type: cc.Node
      }) ], LymjRoundsSettleCtrl.prototype, "node_panel", void 0);
      __decorate([ property({
        tooltip: "waterMark",
        type: cc.Node
      }) ], LymjRoundsSettleCtrl.prototype, "node_waterMark", void 0);
      LymjRoundsSettleCtrl = __decorate([ ccclass ], LymjRoundsSettleCtrl);
      return LymjRoundsSettleCtrl;
    }(BaseCtrl_1.default);
    exports.default = LymjRoundsSettleCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/CfgMgrs/GameCateCfg": "GameCateCfg",
    "../../Plat/GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../Plat/GameMgrs/RecordMgr": "RecordMgr",
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/GameMgrs/viewLogicSeatConvertMgr": "viewLogicSeatConvertMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView"
  } ],
  LymjSettleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "efb4f0ZV0VCRZ7w4//Urfa8", "LymjSettleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var LymjLogic_1 = require("../LymjMgr/LymjLogic");
    var Gfun_1 = require("../../../Plat/Libs/Gfun");
    var UserMgr_1 = require("../../../Plat/GameMgrs/UserMgr");
    var SwitchMgr_1 = require("../../../Plat/GameMgrs/SwitchMgr");
    var MahjongDef_1 = require("../../../GameCommon/Mahjong/MahjongDef");
    var MahjongResMgr_1 = require("../../../GameCommon/Mahjong/MahjongResMgr");
    var Green = new cc.Color(24, 221, 40), Red = new cc.Color(255, 0, 0), Yellow = new cc.Color(255, 222, 0), Blue = new cc.Color(4, 152, 177);
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.playerSettleInfos = null;
        _this.win_seatid = 0;
        _this.seatcount = 0;
        _this.b_drawGame = false;
        _this.sharingSwitch = null;
        _this.bViewAgain = false;
        _this.curcard = null;
        _this.opcardarr = null;
        _this.handcards = null;
        _this.mahjongCards = null;
        _this.initData();
        _this.sharingSwitch = SwitchMgr_1.default.getInstance().get_switch_settlement_sharing();
        return _this;
      }
      Model.prototype.initData = function() {
        var lymjLogicInstance = LymjLogic_1.default.getInstance();
        if (null != lymjLogicInstance) {
          this.win_seatid = lymjLogicInstance.win_seatid;
          null == this.win_seatid && (this.b_drawGame = true);
          this.playerSettleInfos = lymjLogicInstance.roundSettle.wanjiashuis;
          console.log("玩家信息：", this.playerSettleInfos);
          this.seatcount = lymjLogicInstance.seatcount;
          this.curcard = lymjLogicInstance.curcard;
          this.opcardarr = lymjLogicInstance.roundSettle.opcards;
          this.handcards = Gfun_1.g_deepClone(lymjLogicInstance.roundSettle.handcards);
          this.mahjongCards = lymjLogicInstance.mahjongcards;
        }
      };
      Model.prototype.setAsViewAgain = function() {
        this.bViewAgain = true;
      };
      Model.prototype.updateSwitch = function(msg) {
        this.sharingSwitch = msg.cfg.switch_settlement_sharing;
      };
      Model.prototype.getHuType = function(handcard) {
        var pai = handcard.concat();
        pai.sort();
        var huinfo = this.mahjongCards.IsHu(pai);
        if (!huinfo) return null;
        return huinfo.hutype;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_drawgame: ctrl.node_drawgame,
          img_liuju: null,
          btn_share: null,
          btn_again: null,
          node_userList: null,
          clippingNode: null,
          lbl_js: null,
          lbl_hide: null,
          settletip: null,
          nodePlayer1Cards: null,
          nodePlayer2Cards: null,
          nodePlayer3Cards: null,
          nodePlayer4Cards: null,
          nodePlayer1head: null,
          nodePlayer2head: null,
          nodePlayer3head: null,
          nodePlayer4head: null,
          imgBanker: null,
          fanInfos: [],
          difans: [],
          playerNames: [],
          totalpanvalues: [],
          txtScores: [],
          lbl_winTimes: null,
          sprite_huType: null,
          node_bg: null,
          node_hutype: null,
          button_close: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.nodePlayer1Cards = ctrl.nodePlayer1Cards;
        this.ui.nodePlayer2Cards = ctrl.nodePlayer2Cards;
        this.ui.nodePlayer3Cards = ctrl.nodePlayer3Cards;
        this.ui.nodePlayer4Cards = ctrl.nodePlayer4Cards;
        this.ui.nodePlayer1head = ctrl.nodePlayer1head;
        this.ui.nodePlayer2head = ctrl.nodePlayer2head;
        this.ui.nodePlayer3head = ctrl.nodePlayer3head;
        this.ui.nodePlayer4head = ctrl.nodePlayer4head;
        this.ui.lbl_winTimes = ctrl.lbl_winTimes;
        this.ui.sprite_huType = ctrl.sprite_huType;
        this.ui.node_hutype = ctrl.node_hutype;
        this.ui.node_bg = ctrl.node_bg;
        this.ui.btn_share = ctrl.btn_share;
        this.ui.btn_again = ctrl.btn_again;
        this.ui.button_close = ctrl.button_close;
        if (LymjLogic_1.default.getInstance().bViewMode) {
          this.ui.button_close.active = true;
          this.ui.btn_again.active = false;
        }
        this.ui.node_userList = [];
        this.ui.node_userList.push(ctrl.nodePlayer1Cards);
        this.ui.node_userList.push(ctrl.nodePlayer2Cards);
        this.ui.node_userList.push(ctrl.nodePlayer3Cards);
        this.ui.node_userList.push(ctrl.nodePlayer4Cards);
        this.ui.totalpanvalues.push(ctrl.nodePlayer1Cards.getChildByName("totalpan_value").getComponent(cc.Label));
        this.ui.totalpanvalues.push(ctrl.nodePlayer2Cards.getChildByName("totalpan_value").getComponent(cc.Label));
        this.ui.totalpanvalues.push(ctrl.nodePlayer3Cards.getChildByName("totalpan_value").getComponent(cc.Label));
        this.ui.totalpanvalues.push(ctrl.nodePlayer4Cards.getChildByName("totalpan_value").getComponent(cc.Label));
        this.ui.txtScores.push(ctrl.nodePlayer1Cards.getChildByName("txt_score").getComponent(cc.Label));
        this.ui.txtScores.push(ctrl.nodePlayer2Cards.getChildByName("txt_score").getComponent(cc.Label));
        this.ui.txtScores.push(ctrl.nodePlayer3Cards.getChildByName("txt_score").getComponent(cc.Label));
        this.ui.txtScores.push(ctrl.nodePlayer4Cards.getChildByName("txt_score").getComponent(cc.Label));
        this.ui.fanInfos.push(ctrl.nodePlayer1Cards.getChildByName("fanInfo").getComponent(cc.Label));
        this.ui.fanInfos.push(ctrl.nodePlayer2Cards.getChildByName("fanInfo").getComponent(cc.Label));
        this.ui.fanInfos.push(ctrl.nodePlayer3Cards.getChildByName("fanInfo").getComponent(cc.Label));
        this.ui.fanInfos.push(ctrl.nodePlayer4Cards.getChildByName("fanInfo").getComponent(cc.Label));
        this.ui.difans.push(ctrl.nodePlayer1head.getChildByName("difan").getComponent(cc.Label));
        this.ui.difans.push(ctrl.nodePlayer2head.getChildByName("difan").getComponent(cc.Label));
        this.ui.difans.push(ctrl.nodePlayer3head.getChildByName("difan").getComponent(cc.Label));
        this.ui.difans.push(ctrl.nodePlayer4head.getChildByName("difan").getComponent(cc.Label));
        this.ui.playerNames.push(ctrl.nodePlayer1head.getChildByName("txt_name").getComponent(cc.Label));
        this.ui.playerNames.push(ctrl.nodePlayer2head.getChildByName("txt_name").getComponent(cc.Label));
        this.ui.playerNames.push(ctrl.nodePlayer3head.getChildByName("txt_name").getComponent(cc.Label));
        this.ui.playerNames.push(ctrl.nodePlayer4head.getChildByName("txt_name").getComponent(cc.Label));
        this.ui.imgBanker = ctrl.imgBanker;
        this.ui.lbl_hide = ctrl.lbl_hide;
        this.ui.lbl_hide.node.active = false;
        this.ui.clippingNode = this.node.getChildByName("backgroudClickNode");
        this.ui.settletip = this.node.getChildByName("settletip");
        this.ui.clippingNode.active = !RoomMgr_1.default.getInstance().getVideoMode();
        this.ui.settletip.active = false;
        this.ui.node_drawgame.active = this.model.b_drawGame;
        this.ui.img_liuju = this.ui.node_drawgame.getChildByName("img_liuju").getComponent(cc.Animation);
        if (this.model.b_drawGame) {
          this.ui.img_liuju.play();
          ctrl.nodePlayer1Cards.active = false;
          ctrl.nodePlayer2Cards.active = false;
          ctrl.nodePlayer3Cards.active = false;
          ctrl.nodePlayer4Cards.active = false;
          ctrl.nodePlayer1head.active = false;
          ctrl.nodePlayer2head.active = false;
          ctrl.nodePlayer3head.active = false;
          ctrl.nodePlayer4head.active = false;
          ctrl.node_bg.active = false;
          ctrl.imgBanker.node.active = false;
          ctrl.node_hutype.active = false;
          return;
        }
        this.showUserInfo();
        this.showShareBtn();
      };
      View.prototype.updateTipLabel = function() {};
      View.prototype.showUserInfo = function() {
        for (var logicseatid in this.model.playerSettleInfos) {
          var uid = RoomMgr_1.default.getInstance().getUidBySeatId(logicseatid);
          var info = UserMgr_1.default.getInstance().getUserById(uid);
          info || (info = {
            id: uid,
            headid: 1,
            nickname: ""
          });
          this.ui.playerNames[logicseatid].string = info.nickname;
          this.showfan(logicseatid);
          this.showHandCards(logicseatid);
          this.showTotalloseWin(parseInt(logicseatid));
        }
      };
      View.prototype.showfan = function(logicseatid) {
        var playerSettleInfo = this.model.playerSettleInfos[logicseatid.toString()];
        var shui = "";
        if (playerSettleInfo.zhuangflag) {
          var userNode_1 = this.ui.node_userList[logicseatid];
          cc.loader.loadRes("GameCommon/Mahjong/Textures/settle/greenRect", cc.SpriteFrame, function(err, spriteFrame) {
            if (err) {
              cc.error(err.message || err);
              return;
            }
            userNode_1.getComponent(cc.Sprite).spriteFrame = spriteFrame;
          });
          var zhuangPos = this.ui.imgBanker.node.getPosition();
          this.ui.imgBanker.node.setPositionY(zhuangPos.y - 130 * logicseatid);
        }
        shui = shui + "杠分" + playerSettleInfo.zongGangScore + "  花杠" + playerSettleInfo.zongHuaGang + "  分饼" + playerSettleInfo.gengzhuang;
        this.ui.fanInfos[logicseatid].node.active = true;
        this.ui.fanInfos[logicseatid].string = shui;
        this.ui.fanInfos[logicseatid].string || (this.ui.fanInfos[logicseatid].string = "无");
        this.ui.difans[logicseatid].node.active = true;
        this.ui.difans[logicseatid].string = playerSettleInfo.difan + "底";
      };
      View.prototype.showTotalloseWin = function(logicseatid) {
        var playerSettleInfo = this.model.playerSettleInfos[logicseatid.toString()];
        var score = null;
        this.ui.txtScores[logicseatid].node.active = true;
        this.ui.totalpanvalues[logicseatid].node.active = true;
        if (playerSettleInfo.shuyingfenshu > 0) {
          score = "+" + playerSettleInfo.shuyingfenshu;
          this.ui.txtScores[logicseatid].node.color = Red;
        } else {
          score = playerSettleInfo.shuyingfenshu;
          this.ui.txtScores[logicseatid].node.color = Blue;
        }
        this.ui.txtScores[logicseatid].string = score;
        this.ui.totalpanvalues[logicseatid].string = playerSettleInfo.zongshui;
        if (1 == playerSettleInfo.winflag) {
          this.ui.lbl_winTimes.string = "/" + playerSettleInfo.yingbeishu;
          var self_1 = this;
          var hutime = playerSettleInfo.hutime;
          if (playerSettleInfo.hutime == MahjongDef_1.MahjongDef.hutime_zimo) {
            var hutype = this.model.getHuType(this.model.handcards[logicseatid]);
            switch (hutype) {
             case MahjongDef_1.MahjongDef.hutype_131:
              hutime = 1;
              break;

             case MahjongDef_1.MahjongDef.hutype_7pairs:
              hutime = 2;
            }
          }
          cc.loader.loadRes("GameCommon/Mahjong/Textures/settle/hu" + hutime, cc.SpriteFrame, function(err, spriteFrame) {
            if (err) {
              cc.error(err.message || err);
              return;
            }
            self_1.ui.sprite_huType.spriteFrame = spriteFrame;
          });
        }
      };
      View.prototype.showShareBtn = function() {
        this.ui.btn_share.active = 1 == this.model.sharingSwitch;
      };
      View.prototype.showHandCards = function(playeridx) {
        var playerSettleInfo = this.model.playerSettleInfos[playeridx.toString()];
        var nodeleap = 10;
        var nodeNum = 1;
        var cardList = null;
        cardList = this.ui.node_userList[playeridx].getChildByName("cardList");
        for (var j = 0; j < this.model.opcardarr[playeridx].length; j++) switch (this.model.opcardarr[playeridx][j]["op"]) {
         case MahjongDef_1.MahjongDef.op_angang:
          for (var k = 1; k <= 4; k++) {
            var cardNode = cardList.getChildByName("node" + nodeNum).getChildByName("card" + k);
            cardList.getChildByName("node" + nodeNum).getChildByName("angangNode").active = true;
            cardNode.active = true;
            var spriteFrame = MahjongResMgr_1.default.getInstance().getCardSpriteFrame(this.model.opcardarr[playeridx][j]["value"]);
            cardNode.getChildByName("sprite").getComponent(cc.Sprite).spriteFrame = spriteFrame;
          }
          nodeNum++;
          break;

         case MahjongDef_1.MahjongDef.op_gang:
          for (var k = 1; k <= 4; k++) {
            var cardNode = cardList.getChildByName("node" + nodeNum).getChildByName("card" + k);
            cardNode.active = true;
            var spriteFrame = MahjongResMgr_1.default.getInstance().getCardSpriteFrame(this.model.opcardarr[playeridx][j]["value"]);
            cardNode.getChildByName("sprite").getComponent(cc.Sprite).spriteFrame = spriteFrame;
          }
          nodeNum++;
          break;

         case MahjongDef_1.MahjongDef.op_peng:
          for (var k = 1; k <= 3; k++) {
            var cardNode = cardList.getChildByName("node" + nodeNum).getChildByName("card" + k);
            cardNode.active = true;
            var spriteFrame = MahjongResMgr_1.default.getInstance().getCardSpriteFrame(this.model.opcardarr[playeridx][j]["value"]);
            cardNode.getChildByName("sprite").getComponent(cc.Sprite).spriteFrame = spriteFrame;
          }
          nodeNum++;
          break;

         case MahjongDef_1.MahjongDef.op_chi:
          for (var k = 1; k <= 3; k++) {
            var cardNode = cardList.getChildByName("node" + nodeNum).getChildByName("card" + k);
            cardNode.active = true;
            var spriteFrame = MahjongResMgr_1.default.getInstance().getCardSpriteFrame(this.model.opcardarr[playeridx][j]["value"][k - 1]);
            cardNode.getChildByName("sprite").getComponent(cc.Sprite).spriteFrame = spriteFrame;
          }
          nodeNum++;
        }
        null != this.model.curcard && playerSettleInfo.winflag && this.model.handcards[playeridx].removeByValue(this.model.curcard);
        var k = 1;
        var HandCardLoop = 0;
        for (var j = 0; j < this.model.handcards[playeridx].length; j++) {
          if (0 != j && j % 3 == 0) {
            nodeNum++;
            HandCardLoop++;
            k = 1;
            var node = cardList.getChildByName("node" + nodeNum);
            node.setPosition(cc.v2(node.getPosition().x - nodeleap * HandCardLoop, node.getPosition().y));
          }
          6 == nodeNum && 2 == k && (cardList.getChildByName("node" + nodeNum).getChildByName("hucardFrame").active = true);
          var cardNode = cardList.getChildByName("node" + nodeNum).getChildByName("card" + k);
          cardNode.active = true;
          var spriteFrame = MahjongResMgr_1.default.getInstance().getCardSpriteFrame(this.model.handcards[playeridx][j]);
          cardNode.getChildByName("sprite").getComponent(cc.Sprite).spriteFrame = spriteFrame;
          k++;
        }
        if (null != this.model.curcard && playerSettleInfo.winflag && 6 == nodeNum) {
          var cardNode = cardList.getChildByName("node" + nodeNum).getChildByName("card2");
          cardNode.active = true;
          cardList.getChildByName("node" + nodeNum).getChildByName("hucardFrame").active = true;
          var spriteFrame = MahjongResMgr_1.default.getInstance().getCardSpriteFrame(this.model.curcard);
          cardNode.getChildByName("sprite").getComponent(cc.Sprite).spriteFrame = spriteFrame;
        }
      };
      return View;
    }(BaseView_1.default);
    var LymjSettleCtrl = function(_super) {
      __extends(LymjSettleCtrl, _super);
      function LymjSettleCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_drawgame = null;
        _this.btn_share = null;
        _this.btn_again = null;
        _this.lbl_js = null;
        _this.lbl_hide = null;
        _this.nodePlayer1Cards = null;
        _this.nodePlayer2Cards = null;
        _this.nodePlayer3Cards = null;
        _this.nodePlayer4Cards = null;
        _this.nodePlayer1head = null;
        _this.nodePlayer2head = null;
        _this.nodePlayer3head = null;
        _this.nodePlayer4head = null;
        _this.imgBanker = null;
        _this.sprite_huType = null;
        _this.lbl_winTimes = null;
        _this.node_bg = null;
        _this.node_hutype = null;
        _this.button_close = null;
        return _this;
      }
      LymjSettleCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      LymjSettleCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onProcess: this.onProcess,
          onSyncData: this.onSyncData
        };
      };
      LymjSettleCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          usersUpdated: this.usersUpdated,
          "http.reqGameSwitch": this.http_reqGameSwitch
        };
      };
      LymjSettleCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.btn_share, this.btn_share_cb, "微信分享");
        this.connect(G_UiType.image, this.btn_again, this.btn_again_cb, "再来一局");
        this.connect(G_UiType.image, this.ui.clippingNode, this.btn_again_cb, "再来一局");
        this.connect(G_UiType.button, this.ui.button_close, this.finish, "关闭龙岩麻将每局结算");
      };
      LymjSettleCtrl.prototype.onSyncData = function() {
        this.finish();
      };
      LymjSettleCtrl.prototype.start = function() {};
      LymjSettleCtrl.prototype.usersUpdated = function() {
        this.finish();
      };
      LymjSettleCtrl.prototype.setAsViewAgain = function() {
        this.model.setAsViewAgain();
        this.view.updateTipLabel();
      };
      LymjSettleCtrl.prototype.http_reqGameSwitch = function(msg) {
        this.model.updateSwitch(msg);
        this.view.showShareBtn();
      };
      LymjSettleCtrl.prototype.onProcess = function(msg) {
        msg.process == MahjongDef_1.MahjongDef.process_ready && this.process_ready();
      };
      LymjSettleCtrl.prototype.process_ready = function() {
        this.finish();
      };
      LymjSettleCtrl.prototype.btn_share_cb = function() {
        console.log("btn_share_cb");
        this.start_sub_module(G_MODULE.Shared);
      };
      LymjSettleCtrl.prototype.btn_again_cb = function() {
        if (this.model.bViewAgain) this.finish(); else if (RoomMgr_1.default.getInstance().isBunchFinish()) {
          RoomMgr_1.default.getInstance().showFinalSettle();
          this.finish();
        } else RoomMgr_1.default.getInstance().nextRound();
      };
      __decorate([ property({
        tooltip: "流局",
        type: cc.Node
      }) ], LymjSettleCtrl.prototype, "node_drawgame", void 0);
      __decorate([ property({
        tooltip: "微信分享",
        type: cc.Node
      }) ], LymjSettleCtrl.prototype, "btn_share", void 0);
      __decorate([ property({
        tooltip: "再来一局",
        type: cc.Node
      }) ], LymjSettleCtrl.prototype, "btn_again", void 0);
      __decorate([ property({
        tooltip: "结算提示",
        type: cc.Label
      }) ], LymjSettleCtrl.prototype, "lbl_js", void 0);
      __decorate([ property({
        tooltip: "隐藏结算",
        type: cc.Label
      }) ], LymjSettleCtrl.prototype, "lbl_hide", void 0);
      __decorate([ property({
        tooltip: "玩家牌数据1",
        type: cc.Node
      }) ], LymjSettleCtrl.prototype, "nodePlayer1Cards", void 0);
      __decorate([ property({
        tooltip: "玩家牌数据2",
        type: cc.Node
      }) ], LymjSettleCtrl.prototype, "nodePlayer2Cards", void 0);
      __decorate([ property({
        tooltip: "玩家牌数据3",
        type: cc.Node
      }) ], LymjSettleCtrl.prototype, "nodePlayer3Cards", void 0);
      __decorate([ property({
        tooltip: "玩家牌数据4",
        type: cc.Node
      }) ], LymjSettleCtrl.prototype, "nodePlayer4Cards", void 0);
      __decorate([ property({
        tooltip: "玩家头像1",
        type: cc.Node
      }) ], LymjSettleCtrl.prototype, "nodePlayer1head", void 0);
      __decorate([ property({
        tooltip: "玩家头像2",
        type: cc.Node
      }) ], LymjSettleCtrl.prototype, "nodePlayer2head", void 0);
      __decorate([ property({
        tooltip: "玩家头像3",
        type: cc.Node
      }) ], LymjSettleCtrl.prototype, "nodePlayer3head", void 0);
      __decorate([ property({
        tooltip: "玩家头像4",
        type: cc.Node
      }) ], LymjSettleCtrl.prototype, "nodePlayer4head", void 0);
      __decorate([ property({
        tooltip: "庄家图片",
        type: cc.Sprite
      }) ], LymjSettleCtrl.prototype, "imgBanker", void 0);
      __decorate([ property({
        tooltip: "胡牌类型",
        type: cc.Sprite
      }) ], LymjSettleCtrl.prototype, "sprite_huType", void 0);
      __decorate([ property({
        tooltip: "胡牌倍数",
        type: cc.Label
      }) ], LymjSettleCtrl.prototype, "lbl_winTimes", void 0);
      __decorate([ property({
        tooltip: "背景",
        type: cc.Node
      }) ], LymjSettleCtrl.prototype, "node_bg", void 0);
      __decorate([ property({
        tooltip: "胡节点",
        type: cc.Node
      }) ], LymjSettleCtrl.prototype, "node_hutype", void 0);
      __decorate([ property({
        tooltip: "关闭按钮",
        type: cc.Node
      }) ], LymjSettleCtrl.prototype, "button_close", void 0);
      LymjSettleCtrl = __decorate([ ccclass ], LymjSettleCtrl);
      return LymjSettleCtrl;
    }(BaseCtrl_1.default);
    exports.default = LymjSettleCtrl;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Mahjong/MahjongDef": "MahjongDef",
    "../../../GameCommon/Mahjong/MahjongResMgr": "MahjongResMgr",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/GameMgrs/SwitchMgr": "SwitchMgr",
    "../../../Plat/GameMgrs/UserMgr": "UserMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../../../Plat/Libs/Gfun": "Gfun",
    "../LymjMgr/LymjLogic": "LymjLogic"
  } ],
  LymjStatisticsSettleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "22fcahsFMJN0o4u0Fh92tOh", "LymjStatisticsSettleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var BunchInfoMgr_1 = require("../../Plat/GameMgrs/BunchInfoMgr");
    var viewLogicSeatConvertMgr_1 = require("../../Plat/GameMgrs/viewLogicSeatConvertMgr");
    var UiMgr_1 = require("../../Plat/GameMgrs/UiMgr");
    var Green = new cc.Color(1, 146, 7), Red = new cc.Color(255, 36, 0), Yellow = new cc.Color(255, 222, 0);
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.gameResultData = null;
        _this.hutypenodeLeap = 0;
        _this.hutypenodeLeap = ctrl.Int_hutypeLeap;
        return _this;
      }
      Model.prototype.setgameResultData = function(data) {
        this.gameResultData = null == data ? RoomMgr_1.default.getInstance().getBunchInfo() : data;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_panel: null,
          lbl_chihus: {},
          lbl_zimos: {},
          lbl_youjins: {},
          lbl_shuangyous: {},
          lbl_sanyous: {},
          lbl_scores: {},
          lbl_names: {},
          img_heads: [],
          lbl_IDs: {},
          waterMarkForWins: {},
          waterMarkForLosts: {},
          node_waterMark: null,
          sprite_fz: {},
          node_hutypeList: [],
          img_wu: []
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_panel = ctrl.node_panel;
        this.ui.node_waterMark = ctrl.node_waterMark;
        this.ui.node_hutypeList.push(ctrl.node_hutype0);
        ctrl.node_hutype0.active = false;
        this.ui.node_hutypeList.push(ctrl.node_hutype1);
        ctrl.node_hutype1.active = false;
        this.ui.node_hutypeList.push(ctrl.node_hutype2);
        ctrl.node_hutype2.active = false;
        this.ui.node_hutypeList.push(ctrl.node_hutype3);
        ctrl.node_hutype3.active = false;
        for (var logicseatid = 0; logicseatid < BunchInfoMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
          var playerNode = this.ui.node_panel.getChildByName("player" + logicseatid);
          playerNode.active = true;
          playerNode.getChildByName("playerInfo").active = true;
          this.ui.lbl_scores[logicseatid] = playerNode.getChildByName("txt_score").getComponent(cc.Label);
          this.ui.lbl_names[logicseatid] = playerNode.getChildByName("playerInfo").getChildByName("lbl_name").getComponent(cc.Label);
          this.ui.img_heads[logicseatid] = playerNode.getChildByName("playerInfo").getChildByName("img_rwtx").getComponent(cc.Sprite);
          this.ui.lbl_names[logicseatid].node.active = false;
          this.ui.lbl_IDs[logicseatid] = playerNode.getChildByName("playerInfo").getChildByName("lbl_ID").getComponent(cc.Label);
          this.ui.waterMarkForWins[logicseatid] = this.ui.node_waterMark.getChildByName("user" + logicseatid).getChildByName("zjs_seal_win");
          this.ui.waterMarkForLosts[logicseatid] = this.ui.node_waterMark.getChildByName("user" + logicseatid).getChildByName("zjs_seal_loser");
          this.ui.sprite_fz[logicseatid] = playerNode.getChildByName("playerInfo").getChildByName("fz").getComponent(cc.Sprite);
          this.ui.sprite_fz[logicseatid].node.active = false;
          this.ui.img_wu[logicseatid] = playerNode.getChildByName("img_wu");
          this.ui.img_wu[logicseatid].active = false;
        }
      };
      View.prototype.showPlayerInfo = function() {
        var leijiData = this.model.gameResultData.leiji;
        if (null == leijiData || void 0 == leijiData) return;
        for (var logicseatid = 0; logicseatid < BunchInfoMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
          var users = BunchInfoMgr_1.default.getInstance().getMembelist();
          if (null == users) return;
          var viewSeatId = viewLogicSeatConvertMgr_1.default.getInstance().getViewSeatId(logicseatid);
          this.ui.lbl_names[logicseatid].node.active = true;
          this.ui.lbl_names[logicseatid].string = users[logicseatid].nickname;
          parseInt(this.model.gameResultData.roomOwner) == parseInt(users[logicseatid].id) && (this.ui.sprite_fz[logicseatid].node.active = true);
          this.ui.lbl_IDs[logicseatid].string = "ID:" + users[logicseatid].logicid;
          users[logicseatid].headid, users[logicseatid].headurl ? UiMgr_1.default.getInstance().setUserHead(this.ui.img_heads[logicseatid], users[logicseatid].headid, users[logicseatid].headurl) : UiMgr_1.default.getInstance().setUserHead(this.ui.img_heads[logicseatid], users[logicseatid].id, users[logicseatid].url);
          var leijiItem = this.model.gameResultData.leiji[logicseatid];
          var leijiItemList = [];
          leijiItemList.push([ "吃胡", leijiItem.chihu ]);
          leijiItemList.push([ "自摸", leijiItem.zimo ]);
          leijiItemList.push([ "游金", leijiItem.youjin ]);
          leijiItemList.push([ "双游", leijiItem.shuangyou ]);
          leijiItemList.push([ "三游", leijiItem.sanyou ]);
          var hutypenode = this.ui.node_hutypeList[logicseatid];
          var nodeCount = 0;
          for (var i = 0; i < leijiItemList.length; i++) {
            var leijiItemCube = leijiItemList[i];
            if (leijiItemCube[1] > 0) {
              var node = cc.instantiate(hutypenode);
              node.active = true;
              var nodePos = node.getPosition();
              hutypenode.parent.addChild(node);
              node.getChildByName("lbl_hu").getComponent(cc.Label).string = leijiItemCube[0];
              node.getChildByName("hu_Num").getComponent(cc.Label).string = leijiItemCube[1];
              node.getChildByName("hu_Num").color = Red;
              node.setPosition(nodePos.x, nodePos.y - this.model.hutypenodeLeap * nodeCount);
              nodeCount++;
            }
          }
          if (1 == leijiData[logicseatid].title) {
            this.ui.waterMarkForWins[logicseatid].active = true;
            this.ui.waterMarkForLosts[logicseatid].active = false;
          } else if (2 == leijiData[logicseatid].title) {
            this.ui.waterMarkForWins[logicseatid].active = false;
            this.ui.waterMarkForLosts[logicseatid].active = true;
          }
          this.ui.lbl_scores[logicseatid].string = leijiData[logicseatid].zongshuying;
          leijiData[logicseatid].zongshuying >= 0 ? this.ui.lbl_scores[logicseatid].node.color = Red : this.ui.lbl_scores[logicseatid].node.color = Green;
        }
      };
      return View;
    }(BaseView_1.default);
    var LymjStatisticsSettleCtrl = function(_super) {
      __extends(LymjStatisticsSettleCtrl, _super);
      function LymjStatisticsSettleCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_panel = null;
        _this.node_waterMark = null;
        _this.node_hutype0 = null;
        _this.node_hutype1 = null;
        _this.node_hutype2 = null;
        _this.node_hutype3 = null;
        _this.Int_hutypeLeap = 0;
        return _this;
      }
      LymjStatisticsSettleCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        var resultData = BunchInfoMgr_1.default.getInstance().getBunchInfo();
        console.log("getBunchInfo", resultData);
        this.showView(resultData);
      };
      LymjStatisticsSettleCtrl.prototype.defineNetEvents = function() {};
      LymjStatisticsSettleCtrl.prototype.defineGlobalEvents = function() {};
      LymjStatisticsSettleCtrl.prototype.connectUi = function() {};
      LymjStatisticsSettleCtrl.prototype.start = function() {};
      LymjStatisticsSettleCtrl.prototype.showView = function(data) {
        this.model.setgameResultData(data);
        this.view.showPlayerInfo();
      };
      __decorate([ property({
        tooltip: "panel",
        type: cc.Node
      }) ], LymjStatisticsSettleCtrl.prototype, "node_panel", void 0);
      __decorate([ property({
        tooltip: "waterMark",
        type: cc.Node
      }) ], LymjStatisticsSettleCtrl.prototype, "node_waterMark", void 0);
      __decorate([ property({
        tooltip: "hutype",
        type: cc.Node
      }) ], LymjStatisticsSettleCtrl.prototype, "node_hutype0", void 0);
      __decorate([ property({
        tooltip: "hutype",
        type: cc.Node
      }) ], LymjStatisticsSettleCtrl.prototype, "node_hutype1", void 0);
      __decorate([ property({
        tooltip: "hutype",
        type: cc.Node
      }) ], LymjStatisticsSettleCtrl.prototype, "node_hutype2", void 0);
      __decorate([ property({
        tooltip: "hutype",
        type: cc.Node
      }) ], LymjStatisticsSettleCtrl.prototype, "node_hutype3", void 0);
      __decorate([ property({
        tooltip: "hutype",
        type: cc.Integer
      }) ], LymjStatisticsSettleCtrl.prototype, "Int_hutypeLeap", void 0);
      LymjStatisticsSettleCtrl = __decorate([ ccclass ], LymjStatisticsSettleCtrl);
      return LymjStatisticsSettleCtrl;
    }(BaseCtrl_1.default);
    exports.default = LymjStatisticsSettleCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/GameMgrs/UiMgr": "UiMgr",
    "../../Plat/GameMgrs/viewLogicSeatConvertMgr": "viewLogicSeatConvertMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView"
  } ],
  MahjongAudio: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4a43fXEdhZPNb4pGpgotVqw", "MahjongAudio");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../../Plat/Libs/BaseMgr");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var UserMgr_1 = require("../../Plat/GameMgrs/UserMgr");
    var GameAudioCfg_1 = require("../../Plat/CfgMgrs/GameAudioCfg");
    var MahjongDef_1 = require("./MahjongDef");
    var cardaudiodic = {
      17: "yiwan",
      18: "erwan",
      19: "sanwan",
      20: "siwan",
      21: "wuwan",
      22: "liuwan",
      23: "qiwan",
      24: "bawan",
      25: "jiuwan",
      33: "yitiao",
      34: "ertiao",
      35: "santiao",
      36: "sitiao",
      37: "wutiao",
      38: "liutiao",
      39: "qitiao",
      40: "batiao",
      41: "jiutiao",
      49: "yitong",
      50: "ertong",
      51: "santong",
      52: "sitong",
      53: "wutong",
      54: "liutong",
      55: "qitong",
      56: "batong",
      57: "jiutong",
      65: "dongfeng",
      67: "nanfeng",
      69: "xifeng",
      71: "beifeng",
      73: "hongzhong",
      75: "facai",
      77: "baiban"
    };
    var opaudiodic = {};
    opaudiodic[MahjongDef_1.MahjongDef.op_hu] = "pinghu";
    opaudiodic[MahjongDef_1.MahjongDef.op_angang] = "angang";
    opaudiodic[MahjongDef_1.MahjongDef.op_gang] = "gang";
    opaudiodic[MahjongDef_1.MahjongDef.event_bugang] = "gang";
    opaudiodic[MahjongDef_1.MahjongDef.op_peng] = "peng";
    opaudiodic[MahjongDef_1.MahjongDef.op_chi] = "chi";
    opaudiodic[MahjongDef_1.MahjongDef.op_zimo] = "zimo";
    opaudiodic[MahjongDef_1.MahjongDef.op_sanjindao] = "sanjindao";
    opaudiodic[MahjongDef_1.MahjongDef.op_qianggang_hu] = "qiangganghu";
    opaudiodic[MahjongDef_1.MahjongDef.op_danyou] = "youjin";
    opaudiodic[MahjongDef_1.MahjongDef.op_shuangyou] = "shuangyou";
    opaudiodic[MahjongDef_1.MahjongDef.op_bazhanghua] = "bazhanghua";
    opaudiodic[MahjongDef_1.MahjongDef.op_sanyou] = "sanyou";
    opaudiodic[MahjongDef_1.MahjongDef.op_tianhu] = "tianhu";
    opaudiodic[MahjongDef_1.MahjongDef.op_qiangjinhu] = "youjin";
    opaudiodic[MahjongDef_1.MahjongDef.op_sijindao] = "youjin";
    opaudiodic[MahjongDef_1.MahjongDef.op_wujindao] = "youjin";
    opaudiodic[MahjongDef_1.MahjongDef.op_liujindao] = "youjin";
    opaudiodic[MahjongDef_1.MahjongDef.op_gaibaoqiangjin] = "shuangyou";
    var processaudiodic = {};
    processaudiodic[MahjongDef_1.MahjongDef.process_ready] = "duijukaishi";
    processaudiodic[MahjongDef_1.MahjongDef.process_buhua] = "buhua";
    processaudiodic[MahjongDef_1.MahjongDef.process_kaijin] = "kaijin";
    var BGMName = "yxbg";
    var Clock = "Clock";
    var Dice = "dice";
    var Down = "down";
    var CardHover = "card_hover";
    var MahjongAudio = function(_super) {
      __extends(MahjongAudio, _super);
      function MahjongAudio() {
        var _this = _super.call(this) || this;
        _this.players = null;
        _this.seatID = null;
        _this.routes = {
          onProcess: _this.onProcess,
          onOp: _this.onOp,
          onSeatChange: _this.onSeatChange
        };
        return _this;
      }
      MahjongAudio.getInstance = function() {
        this._instance || (this._instance = new MahjongAudio());
        return this._instance;
      };
      MahjongAudio.prototype.destroy = function() {
        GameAudioCfg_1.default.getInstance().stopbackgroudMusic();
        _super.prototype.destroy.call(this);
        MahjongAudio._instance = null;
        delete MahjongAudio._instance;
      };
      MahjongAudio.prototype.onOp = function(msg) {
        var event = msg.event;
        var op = MahjongDef_1.MahjongDef.op_cfg[event];
        var opdic = {};
        var uid = RoomMgr_1.default.getInstance().getUidBySeatId(msg.opseatid);
        this.seatID = msg.opseatid;
        var userinfo = UserMgr_1.default.getInstance().getUserById(uid);
        var sex = userinfo.sex;
        switch (op) {
         case MahjongDef_1.MahjongDef.op_chupai:
         case MahjongDef_1.MahjongDef.op_gaipai:
          this.playChuPaiAudio(sex, msg.card);
          this.playDown();
          break;

         case MahjongDef_1.MahjongDef.op_chi:
         case MahjongDef_1.MahjongDef.op_peng:
         case MahjongDef_1.MahjongDef.op_gang:
         case MahjongDef_1.MahjongDef.op_angang:
         case MahjongDef_1.MahjongDef.op_bugang:
          this.playOpAudio(sex, op);
          this.playDown();
          break;

         default:
          this.playOpAudio(sex, op);
        }
      };
      MahjongAudio.prototype.initPlayers = function(players) {
        this.players = players;
      };
      MahjongAudio.prototype.uncacheAll = function() {};
      MahjongAudio.prototype.playOpAudio = function(sex, op) {
        var audiotag = opaudiodic[op];
        if (this.players && (op == MahjongDef_1.MahjongDef.op_hu || op == MahjongDef_1.MahjongDef.op_zimo)) {
          var hutype = this.players[this.seatID].getHuType();
          console.log("hutypeAudio", hutype);
          var name = null;
          switch (hutype) {
           case MahjongDef_1.MahjongDef.hutype_hunyise:
            name = "hunyise";
            break;

           case MahjongDef_1.MahjongDef.hutype_qingyise:
            name = "qingyise";
            break;

           case MahjongDef_1.MahjongDef.hutype_jinque:
            name = "jinque";
            break;

           case MahjongDef_1.MahjongDef.hutype_jinlong:
            name = "jinlong";
            break;

           default:
            console.log("hutype不存在", hutype);
          }
          if (name) {
            GameAudioCfg_1.default.getInstance().play(name, sex);
            return;
          }
        }
        GameAudioCfg_1.default.getInstance().play(audiotag, sex);
      };
      MahjongAudio.prototype.playChuPaiAudio = function(sex, card) {
        console.log("playChuPaiAudio", sex, card);
        0 == card ? card = RoomMgr_1.default.getInstance().getLogic().getInstance().jin : 1 == card && (card = RoomMgr_1.default.getInstance().getLogic().getInstance().jin2);
        console.log("playChuPaiAudio", sex, card);
        var audiotag = cardaudiodic[card];
        GameAudioCfg_1.default.getInstance().play(audiotag, sex);
      };
      MahjongAudio.prototype.playDown = function() {
        GameAudioCfg_1.default.getInstance().play(Down, 1);
      };
      MahjongAudio.prototype.playBGM = function() {
        GameAudioCfg_1.default.getInstance().playBGM(BGMName);
      };
      MahjongAudio.prototype.playClock = function() {
        GameAudioCfg_1.default.getInstance().playGameProcessAudio(Clock, false);
      };
      MahjongAudio.prototype.playDice = function() {
        GameAudioCfg_1.default.getInstance().playGameProcessAudio(Dice, false);
      };
      MahjongAudio.prototype.playCardHover = function() {
        GameAudioCfg_1.default.getInstance().playGameProcessAudio(CardHover, false);
      };
      MahjongAudio.prototype.onProcess = function(msg) {
        var process = msg.process;
        console.log("process", process);
        if (process == MahjongDef_1.MahjongDef.process_buhua) {
          GameAudioCfg_1.default.getInstance().play("buhua", UserMgr_1.default.getInstance().getMySex());
          return;
        }
        var audiotag = processaudiodic[process];
        console.log("audiotag", audiotag);
        audiotag && GameAudioCfg_1.default.getInstance().playGameProcessAudio(audiotag, false);
      };
      MahjongAudio.prototype.onSeatChange = function(msg) {
        msg.needbupai && msg.huaarr.length > 0 && GameAudioCfg_1.default.getInstance().play("buhua", UserMgr_1.default.getInstance().getMySex());
      };
      return MahjongAudio;
    }(BaseMgr_1.default);
    exports.default = MahjongAudio;
    cc._RF.pop();
  }, {
    "../../Plat/CfgMgrs/GameAudioCfg": "GameAudioCfg",
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/GameMgrs/UserMgr": "UserMgr",
    "../../Plat/Libs/BaseMgr": "BaseMgr",
    "./MahjongDef": "MahjongDef"
  } ],
  MahjongCards: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1b7fblHicZHiq6mamciYvwT", "MahjongCards");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MahjongGeneral_1 = require("./MahjongGeneral");
    var MahjongDef_1 = require("./MahjongDef");
    var MahjongCards = function() {
      function MahjongCards(cardcount) {
        this.cardcount = null;
        this.jin = null;
        this.jin2 = null;
        this.bazhanghua = null;
        this.all_majiang_types = null;
        this.ting_majiang_types = null;
        this.cardcount = cardcount;
        this.bazhanghua = [ MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_Mei, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_Lan, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_Ju, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_Zhu, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_Chun, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_Xia, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_Qiu, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_Dong ];
        this.all_majiang_types = [ MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_1Wan, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_2Wan, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_3Wan, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_4Wan, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_5Wan, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_6Wan, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_7Wan, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_8Wan, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_9Wan, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_1Tiao, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_2Tiao, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_3Tiao, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_4Tiao, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_5Tiao, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_6Tiao, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_7Tiao, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_8Tiao, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_9Tiao, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_1Tong, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_2Tong, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_3Tong, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_4Tong, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_5Tong, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_6Tong, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_7Tong, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_8Tong, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_9Tong, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_Mei, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_Lan, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_Ju, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_Zhu, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_Chun, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_Xia, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_Qiu, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_Dong, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_DongFeng, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_NanFeng, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_XiFeng, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_BeiFeng, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_HongZhong, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_FaCai, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_BaiBan ];
        this.ting_majiang_types = [ MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_1Wan, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_2Wan, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_3Wan, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_4Wan, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_5Wan, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_6Wan, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_7Wan, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_8Wan, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_9Wan, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_1Tiao, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_2Tiao, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_3Tiao, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_4Tiao, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_5Tiao, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_6Tiao, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_7Tiao, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_8Tiao, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_9Tiao, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_1Tong, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_2Tong, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_3Tong, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_4Tong, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_5Tong, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_6Tong, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_7Tong, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_8Tong, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_9Tong, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_DongFeng, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_NanFeng, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_XiFeng, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_BeiFeng, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_HongZhong, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_FaCai, MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_BaiBan ];
      }
      MahjongCards.prototype.removeHua = function() {
        while (1) {
          var bFind = false;
          for (var index = 0; index < this.all_majiang_types.length; ++index) {
            var cardvalue = this.all_majiang_types[index];
            if (MahjongGeneral_1.MahjongGeneral.Majiang_Type(cardvalue) == MahjongGeneral_1.MahjongGeneral.MajiangType.emMJType_Hua) {
              this.all_majiang_types.remove(index);
              bFind = true;
              break;
            }
          }
          if (!bFind) break;
        }
      };
      MahjongCards.prototype.getTingAllCard = function() {
        return this.ting_majiang_types.length;
      };
      MahjongCards.prototype.getCardCount = function() {
        return this.cardcount;
      };
      MahjongCards.prototype.equal_range = function(arr, from, to, value) {
        var dat = {};
        dat.first = -1;
        dat.second = -1;
        for (var i = from; i < to; i++) if (arr[i] == value) dat.first < 0 && (dat.first = i); else if (dat.first >= 0) {
          dat.second = i;
          break;
        }
        if (dat.second < 0) for (var i = from; i < to; i++) if (value < arr[i]) {
          dat.second = i;
          break;
        }
        dat.second < 0 && (dat.second = to);
        dat.first < 0 && (dat.first = dat.second);
        return dat;
      };
      MahjongCards.prototype.binary_search = function(arr, from, to, key) {
        var mid, front = from, back = to - 1;
        while (front <= back) {
          mid = Math.floor((front + back) / 2);
          if (arr[mid] == key) return mid;
          arr[mid] < key ? front = mid + 1 : back = mid - 1;
        }
        return -1;
      };
      MahjongCards.prototype.find_if = function(arr, first, last, cb) {
        while (first != last && !cb(arr[first])) ++first;
        return first;
      };
      MahjongCards.prototype.distance = function(src, dest) {
        return dest - src;
      };
      MahjongCards.prototype.Find_In_Sorted = function(arr, begin, end, v) {
        var it = begin;
        while (it != end) {
          if (arr[it] == v) break;
          if (arr[it] > v) {
            it = end;
            break;
          }
          ++it;
        }
        return it;
      };
      MahjongCards.prototype.setJin = function(jin, jin2) {
        this.jin = jin;
        this.jin2 = jin2;
      };
      MahjongCards.prototype.ResolvePai = function(pai, resolveInfo, hucards) {
        if (pai.empty() && resolveInfo.joker_count % 3 == 0) return true;
        if (pai.size() + resolveInfo.joker_count < 3) return false;
        var jokerFillKeFirst = true;
        if (resolveInfo.joker_count > 0) {
          var keNeedJokerCount = 0;
          pai.size() >= 3 && pai[0] == pai[2] ? keNeedJokerCount = 0 : pai.size() >= 2 && pai[0] == pai[1] ? keNeedJokerCount = 1 : pai.size() >= 1 && (keNeedJokerCount = 2);
          var shunNeedJokerCount = 0;
          if (MahjongGeneral_1.MahjongGeneral.Majiang_Type(pai[0]) < MahjongGeneral_1.MahjongGeneral.MajiangType.emMJType_Zi) {
            var it1 = this.Find_In_Sorted(pai, pai.begin() + 1, pai.end(), pai[0] + 1);
            if (it1 != pai.end()) {
              var it2 = this.Find_In_Sorted(pai, it1 + 1, pai.end(), pai[0] + 2);
              shunNeedJokerCount = it2 != pai.end() ? 0 : 1;
            } else {
              var it2 = this.Find_In_Sorted(pai, pai.begin() + 1, pai.end(), pai[0] + 2);
              shunNeedJokerCount = it2 != pai.end() ? 1 : 2;
            }
          }
          jokerFillKeFirst = shunNeedJokerCount >= keNeedJokerCount;
        }
        if (jokerFillKeFirst) {
          if (pai.size() >= 3 && pai[0] == pai[2]) {
            hucards.push({
              type: 1,
              cards: [ pai[0] ]
            });
            pai.erase(pai.begin(), pai.begin() + 3);
            if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
          } else if (pai.size() >= 2 && pai[0] == pai[1] && resolveInfo.joker_count >= 1) {
            --resolveInfo.joker_count;
            hucards.push({
              type: 1,
              jincount: 1,
              cards: [ pai[0], pai[1] ]
            });
            pai.erase(pai.begin(), pai.begin() + 2);
            if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
          } else if (pai.size() >= 1 && resolveInfo.joker_count >= 2) {
            resolveInfo.joker_count -= 2;
            hucards.push({
              type: 1,
              jincount: 2,
              cards: [ pai[0] ]
            });
            pai.erase(pai.begin(), pai.begin() + 1);
            if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
          }
          if (MahjongGeneral_1.MahjongGeneral.Majiang_Type(pai[0]) < MahjongGeneral_1.MahjongGeneral.MajiangType.emMJType_Zi) {
            var it1 = this.Find_In_Sorted(pai, pai.begin() + 1, pai.end(), pai[0] + 1);
            if (it1 != pai.end()) {
              var it2 = this.Find_In_Sorted(pai, it1 + 1, pai.end(), pai[0] + 2);
              if (it2 != pai.end()) {
                hucards.push({
                  type: 2,
                  cards: [ pai[0] ]
                });
                pai.erase(it2);
                pai.erase(it1);
                pai.erase(pai.begin());
                if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
              } else if (resolveInfo.joker_count >= 1) {
                --resolveInfo.joker_count;
                hucards.push({
                  type: 2,
                  jincount: 1,
                  cards: [ pai[0], pai[it1] ]
                });
                pai.erase(it1);
                pai.erase(pai.begin());
                if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
              }
            } else if (resolveInfo.joker_count >= 1) {
              var it2 = this.Find_In_Sorted(pai, pai.begin() + 1, pai.end(), pai[0] + 2);
              if (it2 != pai.end()) {
                --resolveInfo.joker_count;
                hucards.push({
                  type: 2,
                  jincount: 1,
                  cards: [ pai[0], pai[it2] ]
                });
                pai.erase(it2);
                pai.erase(pai.begin());
                if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
              } else if (resolveInfo.joker_count >= 2) {
                resolveInfo.joker_count -= 2;
                hucards.push({
                  type: 2,
                  jincount: 2,
                  cards: [ pai[0] ]
                });
                pai.erase(pai.begin());
                if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
              }
            }
          }
        } else {
          if (MahjongGeneral_1.MahjongGeneral.Majiang_Type(pai[0]) < MahjongGeneral_1.MahjongGeneral.MajiangType.emMJType_Zi) {
            var it1 = this.Find_In_Sorted(pai, pai.begin() + 1, pai.end(), pai[0] + 1);
            if (it1 != pai.end()) {
              var it2 = this.Find_In_Sorted(pai, it1 + 1, pai.end(), pai[0] + 2);
              if (it2 != pai.end()) {
                hucards.push({
                  type: 2,
                  cards: [ pai[0] ]
                });
                pai.erase(it2);
                pai.erase(it1);
                pai.erase(pai.begin());
                if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
              } else if (resolveInfo.joker_count >= 1) {
                --resolveInfo.joker_count;
                hucards.push({
                  type: 2,
                  jincount: 1,
                  cards: [ pai[0], pai[it1] ]
                });
                pai.erase(it1);
                pai.erase(pai.begin());
                if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
              }
            } else if (resolveInfo.joker_count >= 1) {
              var it2 = this.Find_In_Sorted(pai, pai.begin() + 1, pai.end(), pai[0] + 2);
              if (it2 != pai.end()) {
                --resolveInfo.joker_count;
                hucards.push({
                  type: 2,
                  jincount: 1,
                  cards: [ pai[0], pai[it2] ]
                });
                pai.erase(it2);
                pai.erase(pai.begin());
                if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
              } else if (resolveInfo.joker_count >= 2) {
                resolveInfo.joker_count -= 2;
                hucards.push({
                  type: 2,
                  jincount: 2,
                  cards: [ pai[0] ]
                });
                pai.erase(pai.begin());
                if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
              }
            }
          }
          if (pai.size() >= 3 && pai[0] == pai[2]) {
            hucards.push({
              type: 1,
              cards: [ pai[0] ]
            });
            pai.erase(pai.begin(), pai.begin() + 3);
            if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
          } else if (pai.size() >= 2 && pai[0] == pai[1] && resolveInfo.joker_count >= 1) {
            --resolveInfo.joker_count;
            hucards.push({
              type: 1,
              jincount: 1,
              cards: [ pai[0], pai[1] ]
            });
            pai.erase(pai.begin(), pai.begin() + 2);
            if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
          } else if (pai.size() >= 1 && resolveInfo.joker_count >= 2) {
            resolveInfo.joker_count -= 2;
            hucards.push({
              type: 1,
              jincount: 2,
              cards: [ pai[0] ]
            });
            pai.erase(pai.begin(), pai.begin() + 1);
            if (this.ResolvePai(pai, resolveInfo, hucards)) return true;
          }
        }
        return false;
      };
      MahjongCards.prototype.IsCommonHu = function(original_pai) {
        var joker_end = original_pai.begin();
        while (joker_end != original_pai.end() && MahjongGeneral_1.MahjongGeneral.isJoker(original_pai[joker_end])) ++joker_end;
        var joker_count = joker_end - original_pai.begin();
        var jiangtypelist = null;
        jiangtypelist = joker_count >= 2 ? [ 2, 1, 0 ] : 1 == joker_count ? [ 1, 0 ] : [ 0 ];
        var len = jiangtypelist.length;
        for (var i = 0; i < len; ++i) {
          var jinjiangtype = jiangtypelist[i];
          var hucards = this.getHuCards(original_pai, jinjiangtype);
          if (hucards) return hucards;
        }
        return null;
      };
      MahjongCards.prototype.getHuCards = function(original_pai, jinjiangtype) {
        var jiang_location = 0;
        var pai;
        var hucards = null;
        while (true) {
          hucards = [];
          var i = jiang_location + 1;
          if (i >= original_pai.size()) return null;
          pai = original_pai.concat();
          var lastjiangpos = i;
          if (0 != jiang_location && pai[lastjiangpos] == pai[jiang_location]) {
            i = lastjiangpos;
            lastjiangpos++;
          }
          jiang_location = 0;
          switch (jinjiangtype) {
           case 2:
            for (;i < pai.size(); ++i) {
              if (!MahjongGeneral_1.MahjongGeneral.isJoker(pai[i])) continue;
              if (pai[i] == pai[i - 1]) {
                hucards.push({
                  type: 0,
                  jincount: 2
                });
                jiang_location = i;
                pai.erase(pai.begin() + i - 1, pai.begin() + i + 1);
                break;
              }
            }
            break;

           case 1:
            for (;i < pai.size(); ++i) if (!MahjongGeneral_1.MahjongGeneral.isJoker(pai[i]) && MahjongGeneral_1.MahjongGeneral.isJoker(pai[0])) {
              hucards.push({
                type: 0,
                jincount: 1,
                cards: [ pai[i] ]
              });
              jiang_location = i;
              pai.erase(pai.begin() + i, pai.begin() + i + 1);
              pai.erase(pai.begin());
              break;
            }
            break;

           case 0:
            for (;i < pai.size(); ++i) {
              if (MahjongGeneral_1.MahjongGeneral.isJoker(pai[i])) continue;
              if (pai[i] == pai[i - 1]) {
                hucards.push({
                  type: 0,
                  cards: [ pai[i] ]
                });
                jiang_location = i;
                pai.erase(pai.begin() + i - 1, pai.begin() + i + 1);
                break;
              }
            }
          }
          if (0 == jiang_location) return null;
          var joker_end = pai.begin();
          while (joker_end != pai.end() && MahjongGeneral_1.MahjongGeneral.isJoker(pai[joker_end])) ++joker_end;
          var joker_count = joker_end - pai.begin();
          if (joker_count > 0) {
            pai.erase(pai.begin(), joker_end);
            var resolveInfo = {
              joker_count: joker_count
            };
            if (this.ResolvePai(pai, resolveInfo, hucards)) break;
          } else {
            while (pai.size() >= 3) if (pai[0] == pai[2]) {
              hucards.push({
                type: 1,
                cards: [ pai[0] ]
              });
              pai.erase(pai.begin(), pai.begin() + 3);
            } else {
              if (!(MahjongGeneral_1.MahjongGeneral.Majiang_Type(pai[0]) < MahjongGeneral_1.MahjongGeneral.MajiangType.emMJType_Zi)) break;
              var it1 = this.Find_In_Sorted(pai, pai.begin() + 1, pai.end(), pai[0] + 1);
              if (it1 == pai.end()) break;
              var it2 = this.Find_In_Sorted(pai, it1 + 1, pai.end(), pai[0] + 2);
              if (it2 == pai.end()) break;
              hucards.push({
                type: 2,
                cards: [ pai[0] ]
              });
              pai.erase(it2);
              pai.erase(it1);
              pai.erase(pai.begin());
            }
            if (pai.empty()) break;
          }
        }
        pai = [];
        return hucards;
      };
      MahjongCards.prototype.randomArray = function(length) {
        var i, index, temp, arr = [ length ];
        length = "undefined" === typeof length ? 9 : length;
        for (i = 0; i < length; i++) arr[i] = i;
        for (i = 0; i < length; i++) {
          index = Math.floor(Math.random() * (length - i)) + i;
          if (index != i) {
            temp = arr[i];
            arr[i] = arr[index];
            arr[index] = temp;
          }
        }
        return arr;
      };
      MahjongCards.prototype.isHua = function(cardvalue) {
        var cate = MahjongGeneral_1.MahjongGeneral.Majiang_Type(cardvalue);
        return cate == MahjongGeneral_1.MahjongGeneral.MajiangType.emMJType_Hua;
      };
      MahjongCards.prototype.isZi = function(cardvalue) {
        var cate = MahjongGeneral_1.MahjongGeneral.Majiang_Type(cardvalue);
        return cate == MahjongGeneral_1.MahjongGeneral.MajiangType.emMJType_Zi;
      };
      MahjongCards.prototype.xiPai = function() {
        var totalcards = [];
        for (var i = 0; i < this.all_majiang_types.length; i++) {
          var card = this.all_majiang_types[i];
          if (MahjongGeneral_1.MahjongGeneral.Majiang_Type(card) == MahjongGeneral_1.MahjongGeneral.MajiangType.emMJType_Hua) totalcards.push(card); else for (var j = 0; j < 4; j++) totalcards.push(card);
        }
        var randomarr = this.randomArray(totalcards.length);
        var xipaiarr = [];
        for (var i = 0; i < randomarr.length; i++) {
          var cardindex = randomarr[i];
          xipaiarr.push(totalcards[cardindex]);
        }
        return xipaiarr;
      };
      MahjongCards.prototype.getTingArr = function(pai) {
        var ting_pai = {};
        var joker_end = pai.cbegin();
        while (joker_end != pai.cend() && MahjongGeneral_1.MahjongGeneral.isJoker(pai[joker_end])) ++joker_end;
        var jocker_count = joker_end - pai.cbegin();
        var _loop_1 = function(k) {
          var i = this_1.ting_majiang_types[k];
          if (i == this_1.jin || i == this_1.jin2) {
            i = 0;
            jocker_count++;
          }
          if (0 == jocker_count) {
            if (pai.front() - i > 1 || i - pai.back() > 1) return "continue";
            if (MahjongGeneral_1.MahjongGeneral.Majiang_Type(i) >= MahjongGeneral_1.MahjongGeneral.MajiangType.emMJType_Zi) {
              if (this_1.binary_search(pai, pai.cbegin(), pai.cend(), i) < 0) return "continue";
            } else {
              var it = this_1.find_if(pai, pai.cbegin(), pai.cend(), function(c) {
                return Math.abs(c - i) <= 1;
              });
              if (it == pai.cend()) return "continue";
            }
          }
          var temp = pai.concat();
          var range = this_1.equal_range(temp, temp.begin(), temp.end(), i);
          if (4 == this_1.distance(range.first, range.second)) return "continue";
          temp.insert(range.second, i);
          var huinfo = this_1.IsHu(temp);
          temp = [];
          huinfo && (ting_pai[i] = huinfo);
        };
        var this_1 = this;
        for (var k = 0; k < this.ting_majiang_types.length; ++k) _loop_1(k);
        return ting_pai;
      };
      MahjongCards.prototype.checkXianJin = function(handcard) {
        if (1 == handcard.length && MahjongGeneral_1.MahjongGeneral.isJoker(handcard[0])) return true;
        var tmpCards = handcard.concat();
        tmpCards.push(MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_TEST);
        tmpCards.sort(function(a, b) {
          return a - b;
        });
        var huinfo = this.IsHu(tmpCards);
        tmpCards = [];
        if (!huinfo) {
          console.log("checkXianJin不能胡");
          return false;
        }
        var tmpHuCards = huinfo.hucards;
        for (var i = 0; i < tmpHuCards.length; i++) {
          var item = tmpHuCards[i];
          if (0 == item.type) {
            console.log("checkXianJin item", item, tmpHuCards);
            if (1 == item.jincount && item.cards[0] == MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_TEST) return true;
            return false;
          }
        }
        return false;
      };
      MahjongCards.prototype.getDanPaiFromJiang = function(huinfo) {
        var hucards = huinfo.hucards;
        for (var i = 0; i < hucards.length; i++) {
          var item = hucards[i];
          if (0 == item.type) {
            if (null != item.jincount && item.jincount >= 1) return item.cards ? item.cards[0] : 0;
            return null;
          }
        }
        return null;
      };
      MahjongCards.prototype.getJinJiang = function(handcard) {
        var huinfo = this.IsHu(handcard);
        if (!huinfo) return null;
        var tmpHuCards = huinfo.hucards;
        for (var i = 0; i < tmpHuCards.length; i++) {
          var item = tmpHuCards[i];
          if (0 == item.type) {
            if (2 == item.jincount) return huinfo;
            return null;
          }
        }
        return null;
      };
      MahjongCards.prototype.getXianJin = function(handcard) {
        var huinfo = this.IsHu(handcard);
        if (!huinfo) return null;
        var tmpHuCards = huinfo.hucards;
        console.log("判断是否是闲金", tmpHuCards);
        for (var i = 0; i < tmpHuCards.length; i++) {
          var item = tmpHuCards[i];
          if (0 == item.type) {
            if (item.jincount >= 1) return huinfo;
            return null;
          }
        }
        return null;
      };
      MahjongCards.prototype.getOptionCardsFromJiang = function(handcard) {
        var optionCards = [];
        var key = {};
        for (var i = 0; i < handcard.length; i++) {
          var card = handcard[i];
          if (MahjongGeneral_1.MahjongGeneral.isJoker(card)) continue;
          if (null != key[card]) continue;
          var tmpCards = handcard.concat();
          tmpCards.remove(i);
          key[card] = true;
          this.checkXianJin(tmpCards) && optionCards.push(card);
          tmpCards = [];
        }
        return optionCards;
      };
      MahjongCards.prototype.isCard = function(card) {
        return this.ting_majiang_types.contain(card);
      };
      MahjongCards.prototype.IsHu = function(cards, yise) {
        void 0 === yise && (yise = null);
        var hucards = this.IsCommonHu(cards);
        if (hucards) return {
          hutype: MahjongDef_1.MahjongDef.hutype_normal,
          hucards: hucards
        };
        return null;
      };
      return MahjongCards;
    }();
    exports.default = MahjongCards;
    cc._RF.pop();
  }, {
    "./MahjongDef": "MahjongDef",
    "./MahjongGeneral": "MahjongGeneral"
  } ],
  MahjongClock3DCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "69056j7IiBKO7tQnVrm0Fsi", "MahjongClock3DCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var MahjongDef_1 = require("./MahjongDef");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.step = null;
        _this.state = null;
        _this.starttime = null;
        _this.curtime = null;
        _this.curseat = null;
        _this.dirid = null;
        _this.mySeatId = null;
        _this.mahjongResMgr = RoomMgr_1.default.getInstance().getResMgr();
        _this.mahjongLogic = RoomMgr_1.default.getInstance().getLogic();
        _this.mahjongDef = RoomMgr_1.default.getInstance().getDef();
        _this.mahjongAudio = RoomMgr_1.default.getInstance().getAudio();
        _this.dirs = null;
        _this.dirs = [];
        var seatcount = RoomMgr_1.default.getInstance().getSeatCount();
        var viewSeatCount = 4;
        if (seatcount <= viewSeatCount / 2) for (var index = 0; index < viewSeatCount; ++index) index % 2 == 0 && _this.dirs.push(index); else for (var index = 0; index < viewSeatCount; ++index) _this.dirs.push(index);
        _this.step = 0;
        _this.state = 0;
        _this.starttime = 0;
        _this.curtime = 0;
        return _this;
      }
      Model.prototype.setState = function(state) {
        this.state = state;
        this.step = 0;
      };
      Model.prototype.resetTime = function() {
        this.starttime = Date.now();
        this.curtime = this.mahjongLogic.getInstance().maxoptime;
      };
      Model.prototype.recover = function() {
        this.updateSeatId();
      };
      Model.prototype.updateSeatId = function() {
        this.mySeatId = RoomMgr_1.default.getInstance().getMySeatId();
        console.log("updateSeatIdthis.mySeatId=", this.mySeatId);
        this.curseat = this.mahjongLogic.getInstance().curseat;
        console.log("updateSeatIdthis.curseat=", this.curseat);
        this.dirid = RoomMgr_1.default.getInstance().getViewSeatId(this.curseat);
        console.log("updateSeatIdthis.dirid=", this.dirid);
        this.dirid < 0 && (this.dirid = this.dirid + 4);
      };
      Model.prototype.runTo = function(steps) {
        this.step = this.step + 1;
        if (this.step >= steps) return false;
        return true;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          sprite_gamedirection: null
        };
        _this.tiparr = null;
        _this.lbl_time = null;
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.lbl_time = ctrl.lbl_time;
        this.tiparr = [ ctrl.tip_0, ctrl.tip_1, ctrl.tip_2, ctrl.tip_3 ];
        this.node.active = false;
        this.ui.sprite_gamedirection = this.node.getChildByName("directionBg").getChildByName("game_direction").getComponent(cc.Sprite);
      };
      View.prototype.tick = function() {
        this.lbl_time.active = true;
        this.lbl_time.color = this.model.curtime <= 3 ? cc.Color.RED : cc.Color.WHITE;
        this.lbl_time.getComponent(cc.Label).string = this.model.curtime;
        var opseatid = this.model.mahjongLogic.getInstance().curseat;
      };
      View.prototype.clear = function() {
        for (var i = 0; i < this.tiparr.length; ++i) {
          var sp = this.tiparr[i];
          sp.active = false;
        }
        this.hideTime();
      };
      View.prototype.updateDir = function() {};
      View.prototype.initDirectionBg = function() {
        var realid = this.model.dirs[this.model.mySeatId];
        var self = this;
        self.ui.sprite_gamedirection.spriteFrame = this.model.mahjongResMgr.getInstance().getSpriteFrame("game_direction_" + realid);
        console.log("realid", realid, this.model.mahjongResMgr.getInstance().getSpriteFrame("game_direction_" + realid));
        self.node.active = true;
      };
      View.prototype.showDirection = function() {
        this.node.active = true;
      };
      View.prototype.dirChange = function() {
        for (var i = 0; i < this.tiparr.length; ++i) {
          var sp = this.tiparr[i];
          sp.active = false;
        }
        var realid = this.model.dirs[this.model.mySeatId];
        console.log("this.model.dirid=", this.model.dirid);
        var frame = this.model.mahjongResMgr.getInstance().getSpriteFrame("game_direction_" + realid + "_" + this.model.dirid);
        this.tiparr[this.model.dirid].getComponent(cc.Sprite).spriteFrame = frame;
        this.tiparr[this.model.dirid].active = true;
      };
      View.prototype.hideTime = function() {
        this.lbl_time.active = false;
      };
      View.prototype.setNum = function(index, num) {};
      return View;
    }(BaseView_1.default);
    var MahjongClock3DCtrl = function(_super) {
      __extends(MahjongClock3DCtrl, _super);
      function MahjongClock3DCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.lbl_time = null;
        _this.tip_0 = null;
        _this.tip_1 = null;
        _this.tip_2 = null;
        _this.tip_3 = null;
        _this.timer = null;
        return _this;
      }
      MahjongClock3DCtrl.prototype.onLoad = function() {
        ctrl = this;
        console.log("时钟进来了");
        this.initMvc(Model, View);
      };
      MahjongClock3DCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onProcess: this.onProcess,
          onSeatChange: this.onSeatChange,
          onSyncData: this.onSyncData,
          onEvent: this.onEvent,
          onOp: this.onOp,
          onPrepare: this.onPrepare,
          onGameFinished: this.onGameFinished,
          "connector.entryHandler.enterRoom": this.connector_entryHandler_enterRoom
        };
      };
      MahjongClock3DCtrl.prototype.onPrepare = function(msg) {
        console.log("时钟收到了准备");
        msg.seatid == RoomMgr_1.default.getInstance().getMySeatId() && this.view.showDirection();
      };
      MahjongClock3DCtrl.prototype.connector_entryHandler_enterRoom = function() {
        this.model.updateSeatId();
        this.view.initDirectionBg();
      };
      MahjongClock3DCtrl.prototype.onDestroy = function() {
        this.stopTick();
        _super.prototype.onDestroy.call(this);
      };
      MahjongClock3DCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          usersUpdated: this.usersUpdated
        };
      };
      MahjongClock3DCtrl.prototype.connectUi = function() {};
      MahjongClock3DCtrl.prototype.start = function() {};
      MahjongClock3DCtrl.prototype.onOp = function(msg) {
        var opseatid = msg.opseatid;
        msg.event == MahjongDef_1.MahjongDef.event_chupai && (opseatid = this.model.mahjongLogic.getInstance().curseat);
        opseatid == RoomMgr_1.default.getInstance().getMySeatId() && this.stopTick();
      };
      MahjongClock3DCtrl.prototype.tick = function() {
        var elapse = Date.now() - this.model.starttime;
        elapse = parseInt(elapse / 1e3);
        this.model.curtime = this.model.mahjongLogic.getInstance().maxoptime - elapse;
        this.model.curtime < 0 && (this.model.curtime = 0);
        if (this.model.curtime > 0 && this.model.curtime < 4) {
          console.log("当前时钟", this.model.curtime);
          this.model.mahjongAudio.getInstance().playClock();
        }
        this.view.tick();
        var opseatid = this.model.mahjongLogic.getInstance().curseat;
      };
      MahjongClock3DCtrl.prototype.startTick = function() {
        if (RoomMgr_1.default.getInstance().getVideoMode()) return;
        this.view.hideTime();
        this.model.resetTime();
        this.stopTick();
        this.timer = window.setInterval(this.tick.bind(this), 1e3);
        this.view.tick();
      };
      MahjongClock3DCtrl.prototype.stopTick = function() {
        if (this.timer) {
          window.clearInterval(this.timer);
          this.timer = null;
        }
      };
      MahjongClock3DCtrl.prototype.onEvent = function() {
        this.startTick();
        this.model.resetTime();
        this.view.tick();
      };
      MahjongClock3DCtrl.prototype.onSyncData = function(msg) {
        if (!RoomMgr_1.default.getInstance().isGameStarted()) return;
        this.model.recover();
        this.view.dirChange();
        this.model.state = 1;
        this.view.updateDir();
        var player = this.model.mahjongLogic.getInstance().players[RoomMgr_1.default.getInstance().getMySeatId()];
        if (player.events.length > 0) {
          this.stopTick();
          this.model.curtime = this.model.mahjongLogic.getInstance().maxoptime - this.model.mahjongLogic.getInstance().op_tick;
        }
      };
      MahjongClock3DCtrl.prototype.usersUpdated = function() {
        this.view.clear();
      };
      MahjongClock3DCtrl.prototype.onProcess = function(msg) {
        msg.process == MahjongDef_1.MahjongDef.process_dingzhuang ? this.process_dingzhuang(msg) : msg.process == MahjongDef_1.MahjongDef.process_ready ? this.process_ready() : msg.process == MahjongDef_1.MahjongDef.process_loop ? this.process_loop() : msg.process == MahjongDef_1.MahjongDef.process_fapai && this.view.showDirection();
      };
      MahjongClock3DCtrl.prototype.process_loop = function() {
        this.startTick();
      };
      MahjongClock3DCtrl.prototype.onGameFinished = function() {
        this.stopTick();
      };
      MahjongClock3DCtrl.prototype.process_ready = function() {
        this.model.mySeatId = RoomMgr_1.default.getInstance().getMySeatId();
        this.stopTick();
        this.view.clear();
        if (!RoomMgr_1.default.getInstance().isFirstRound()) {
          this.model.updateSeatId();
          this.view.dirChange();
        }
      };
      MahjongClock3DCtrl.prototype.process_buhua = function() {};
      MahjongClock3DCtrl.prototype.onSeatChange = function(msg) {
        this.startTick();
        this.model.updateSeatId();
        this.view.dirChange();
      };
      MahjongClock3DCtrl.prototype.process_dingzhuang = function(msg) {
        this.model.updateSeatId();
        this.view.dirChange();
      };
      __decorate([ property(cc.Node) ], MahjongClock3DCtrl.prototype, "lbl_time", void 0);
      __decorate([ property(cc.Node) ], MahjongClock3DCtrl.prototype, "tip_0", void 0);
      __decorate([ property(cc.Node) ], MahjongClock3DCtrl.prototype, "tip_1", void 0);
      __decorate([ property(cc.Node) ], MahjongClock3DCtrl.prototype, "tip_2", void 0);
      __decorate([ property(cc.Node) ], MahjongClock3DCtrl.prototype, "tip_3", void 0);
      MahjongClock3DCtrl = __decorate([ ccclass ], MahjongClock3DCtrl);
      return MahjongClock3DCtrl;
    }(BaseCtrl_1.default);
    exports.default = MahjongClock3DCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "./MahjongDef": "MahjongDef"
  } ],
  MahjongDef: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "31dcaQq4zlCf4rDEKPEc8fa", "MahjongDef");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MahjongDef = {};
    MahjongDef.looprc_op = 1;
    MahjongDef.looprc_seatchange = 2;
    MahjongDef.looprc_event = 3;
    MahjongDef.gmop_changecard = 1;
    MahjongDef.gmop_changewallorder = 2;
    MahjongDef.gmreq_cards = 1;
    MahjongDef.youjinstate_null = 0;
    MahjongDef.youjinstate_danyou = 1;
    MahjongDef.youjinstate_shuangyou = 2;
    MahjongDef.youjinstate_sanyou = 3;
    MahjongDef.state_idle = 1;
    MahjongDef.state_chupai = 2;
    MahjongDef.state_event = 3;
    MahjongDef.state_gaipai = 4;
    MahjongDef.process_ready = 1;
    MahjongDef.process_cheatcheck = 2;
    MahjongDef.process_dingzhuang = 3;
    MahjongDef.process_fapai = 4;
    MahjongDef.process_buhua = 5;
    MahjongDef.process_kaijin = 6;
    MahjongDef.process_loop = 7;
    MahjongDef.process_haidilaoyue = 8;
    MahjongDef.process_gamesettle = 9;
    MahjongDef.event_chupai = 1;
    MahjongDef.event_gaipai = 2;
    MahjongDef.event_chi = 3;
    MahjongDef.event_peng = 4;
    MahjongDef.event_gang = 5;
    MahjongDef.event_angang = 6;
    MahjongDef.event_bugang = 7;
    MahjongDef.event_zimo = 8;
    MahjongDef.event_sanjindao = 9;
    MahjongDef.event_hu = 10;
    MahjongDef.event_qianggang_hu = 11;
    MahjongDef.event_danyou = 12;
    MahjongDef.event_shuangyou = 13;
    MahjongDef.event_sanyou = 14;
    MahjongDef.event_bazhanghua = 15;
    MahjongDef.event_qiangjinhu = 16;
    MahjongDef.event_sijindao = 17;
    MahjongDef.event_wujindao = 18;
    MahjongDef.event_liujindao = 19;
    MahjongDef.event_tianhu = 20;
    MahjongDef.event_gaibaoqiangjin = 21;
    MahjongDef.op_hu = 1;
    MahjongDef.op_angang = 2;
    MahjongDef.op_gang = 3;
    MahjongDef.op_peng = 4;
    MahjongDef.op_chi = 5;
    MahjongDef.op_chupai = 6;
    MahjongDef.op_bugang = 7;
    MahjongDef.op_zimo = 9;
    MahjongDef.op_sanjindao = 11;
    MahjongDef.op_qianggang_hu = 12;
    MahjongDef.op_danyou = 13;
    MahjongDef.op_shuangyou = 14;
    MahjongDef.op_sanyou = 15;
    MahjongDef.op_bazhanghua = 16;
    MahjongDef.op_cancel = 20;
    MahjongDef.op_gaipai = 21;
    MahjongDef.op_qiangjinhu = 22;
    MahjongDef.op_sijindao = 23;
    MahjongDef.op_wujindao = 24;
    MahjongDef.op_liujindao = 25;
    MahjongDef.op_tianhu = 26;
    MahjongDef.op_gaibaoqiangjin = 27;
    MahjongDef.onOp = "onOp";
    MahjongDef.onSeatChange = "onSeatChange";
    MahjongDef.onEvent = "onEvent";
    MahjongDef.onProcess = "onProcess";
    MahjongDef.onSyncData = "onSyncData";
    MahjongDef.onDeposit = "onDeposit";
    MahjongDef.onGmOp = "onGmOp";
    MahjongDef.op_cfg = {};
    MahjongDef.op_cfg[MahjongDef.event_hu] = MahjongDef.op_hu;
    MahjongDef.op_cfg[MahjongDef.event_angang] = MahjongDef.op_angang;
    MahjongDef.op_cfg[MahjongDef.event_bugang] = MahjongDef.op_bugang;
    MahjongDef.op_cfg[MahjongDef.event_gang] = MahjongDef.op_gang;
    MahjongDef.op_cfg[MahjongDef.event_peng] = MahjongDef.op_peng;
    MahjongDef.op_cfg[MahjongDef.event_chi] = MahjongDef.op_chi;
    MahjongDef.op_cfg[MahjongDef.event_zimo] = MahjongDef.op_zimo;
    MahjongDef.op_cfg[MahjongDef.event_chupai] = MahjongDef.op_chupai;
    MahjongDef.op_cfg[MahjongDef.event_sanjindao] = MahjongDef.op_sanjindao;
    MahjongDef.op_cfg[MahjongDef.event_qianggang_hu] = MahjongDef.op_qianggang_hu;
    MahjongDef.op_cfg[MahjongDef.event_danyou] = MahjongDef.op_danyou;
    MahjongDef.op_cfg[MahjongDef.event_shuangyou] = MahjongDef.op_shuangyou;
    MahjongDef.op_cfg[MahjongDef.event_sanyou] = MahjongDef.op_sanyou;
    MahjongDef.op_cfg[MahjongDef.event_bazhanghua] = MahjongDef.op_bazhanghua;
    MahjongDef.op_cfg[MahjongDef.event_gaipai] = MahjongDef.op_gaipai;
    MahjongDef.op_cfg[MahjongDef.event_qiangjinhu] = MahjongDef.op_qiangjinhu;
    MahjongDef.op_cfg[MahjongDef.event_sijindao] = MahjongDef.op_sijindao;
    MahjongDef.op_cfg[MahjongDef.event_wujindao] = MahjongDef.op_wujindao;
    MahjongDef.op_cfg[MahjongDef.event_liujindao] = MahjongDef.op_liujindao;
    MahjongDef.op_cfg[MahjongDef.event_tianhu] = MahjongDef.op_tianhu;
    MahjongDef.op_cfg[MahjongDef.event_gaibaoqiangjin] = MahjongDef.op_gaibaoqiangjin;
    MahjongDef.hutime_zimo = 5;
    MahjongDef.hutime_danyou = 6;
    MahjongDef.hutime_shuangyou = 7;
    MahjongDef.hutime_sanyou = 8;
    MahjongDef.hutime_bazhanghua = 9;
    MahjongDef.hutime_dianpao = 10;
    MahjongDef.hutime_sanjindao = 11;
    MahjongDef.hutime_qiangganghu = 12;
    MahjongDef.hutime_qiangjinhu = 13;
    MahjongDef.hutime_sijindao = 14;
    MahjongDef.hutime_wujindao = 15;
    MahjongDef.hutime_liujindao = 16;
    MahjongDef.hutime_tianhu = 17;
    MahjongDef.hutime_gaibaoqiangjin = 18;
    MahjongDef.hutimenames = {};
    MahjongDef.hutimenames[MahjongDef.hutime_zimo] = "自摸";
    MahjongDef.hutimenames[MahjongDef.hutime_danyou] = "游金";
    MahjongDef.hutimenames[MahjongDef.hutime_shuangyou] = "双游";
    MahjongDef.hutimenames[MahjongDef.hutime_sanyou] = "三游";
    MahjongDef.hutimenames[MahjongDef.hutime_bazhanghua] = "八张花";
    MahjongDef.hutimenames[MahjongDef.hutime_dianpao] = "吃胡";
    MahjongDef.hutimenames[MahjongDef.hutime_sanjindao] = "三金倒";
    MahjongDef.hutimenames[MahjongDef.hutime_qiangganghu] = "抢杠胡";
    MahjongDef.hutimenames[MahjongDef.hutime_qiangjinhu] = "抢金胡";
    MahjongDef.hutimenames[MahjongDef.hutime_sijindao] = "四金倒";
    MahjongDef.hutimenames[MahjongDef.hutime_wujindao] = "五金倒";
    MahjongDef.hutimenames[MahjongDef.hutime_liujindao] = "六金倒";
    MahjongDef.hutimenames[MahjongDef.hutime_tianhu] = "天胡";
    MahjongDef.hutimenames[MahjongDef.hutime_gaibaoqiangjin] = "盖宝抢金";
    MahjongDef.hutype_normal = 0;
    MahjongDef.hutype_131 = 1;
    MahjongDef.hutype_7pairs = 2;
    MahjongDef.hutype_qingyise = 3;
    MahjongDef.hutype_hunyise = 4;
    MahjongDef.hutype_wuhuawugang = 5;
    MahjongDef.hutype_yizhanghua = 6;
    MahjongDef.hutype_jinque = 7;
    MahjongDef.hutype_jinlong = 8;
    MahjongDef.hutype_jinkan = 9;
    MahjongDef.hutypenames = {};
    MahjongDef.hutypenames[MahjongDef.hutype_normal] = "";
    MahjongDef.hutypenames[MahjongDef.hutype_131] = "十三幺";
    MahjongDef.hutypenames[MahjongDef.hutype_7pairs] = "7小对";
    MahjongDef.hutypenames[MahjongDef.hutype_qingyise] = "清一色";
    MahjongDef.hutypenames[MahjongDef.hutype_hunyise] = "混一色";
    MahjongDef.hutypenames[MahjongDef.hutype_wuhuawugang] = "无花无杠";
    MahjongDef.hutypenames[MahjongDef.hutype_yizhanghua] = "一张花";
    MahjongDef.hutypenames[MahjongDef.hutype_jinque] = "金雀";
    MahjongDef.hutypenames[MahjongDef.hutype_jinlong] = "金龙";
    MahjongDef.hutypenames[MahjongDef.hutype_jinkan] = "金坎";
    MahjongDef.card_hua = 1;
    MahjongDef.card_jin = 2;
    MahjongDef.card_ziangang = 3;
    MahjongDef.card_ptangang = 4;
    MahjongDef.card_zigang = 5;
    MahjongDef.card_ptgang = 6;
    MahjongDef.card_zianke = 7;
    MahjongDef.card_ptanke = 8;
    MahjongDef.card_zike = 9;
    MahjongDef.card_ptke = 10;
    MahjongDef.card_anGang = 11;
    MahjongDef.card_mingGang = 12;
    MahjongDef.gangkenames = {};
    MahjongDef.gangkenames[MahjongDef.card_hua] = "花牌";
    MahjongDef.gangkenames[MahjongDef.card_jin] = "金牌";
    MahjongDef.gangkenames[MahjongDef.card_ziangang] = "字暗杠";
    MahjongDef.gangkenames[MahjongDef.card_ptangang] = "暗杠";
    MahjongDef.gangkenames[MahjongDef.card_zigang] = "字明杠";
    MahjongDef.gangkenames[MahjongDef.card_ptgang] = "明杠";
    MahjongDef.gangkenames[MahjongDef.card_zianke] = "字暗刻";
    MahjongDef.gangkenames[MahjongDef.card_ptanke] = "暗刻";
    MahjongDef.gangkenames[MahjongDef.card_zike] = "字明刻";
    MahjongDef.gangkenames[MahjongDef.card_ptke] = "明刻";
    MahjongDef.scoretype_nomal = 0;
    MahjongDef.scoretype_yike = 1;
    MahjongDef.chiarr = [ [ 1, 2 ], [ -1, 1 ], [ -2, -1 ] ];
    exports.MahjongDef = MahjongDef;
    cc._RF.pop();
  }, {} ],
  MahjongDiceCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "96647IILJlB+LtB5PAYxVM5", "MahjongDiceCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var MahjongDef_1 = require("./MahjongDef");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.list = null;
        _this.step = null;
        _this.dice1Value = null;
        _this.dice2Value = null;
        _this.mahjongResMgr = RoomMgr_1.default.getInstance().getResMgr();
        _this.mahjongLogic = RoomMgr_1.default.getInstance().getLogic();
        _this.mahjongDef = RoomMgr_1.default.getInstance().getDef();
        _this.mahjongAudio = RoomMgr_1.default.getInstance().getAudio();
        _this.clear();
        return _this;
      }
      Model.prototype.initRandom = function(finalpoint) {
        this.step = 1;
        var pool = {};
        this.list.push(finalpoint);
      };
      Model.prototype.initDices = function(data) {
        this.dice1Value = Number(data.touzi1);
        this.dice2Value = Number(data.touzi2);
      };
      Model.prototype.clear = function() {
        this.list = [];
        this.step = 1;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          DiceAnim: null,
          Dice1: null,
          Dice2: null,
          DingZhuang: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.Dice1 = ctrl.Dice1;
        this.ui.Dice2 = ctrl.Dice2;
        this.ui.DiceAnim = ctrl.DiceAnim;
        this.ui.DingZhuang = ctrl.DingZhuang;
        this.ui.DingZhuang.active = false;
        this.node.active = false;
        this.ui.DiceAnim.getComponent("cc.Animation").on("finished", this.onDiceFinished, this);
      };
      View.prototype.runDice = function() {
        this.ui.DingZhuang.active = true;
        this.ui.DingZhuang.getComponent("cc.Animation").play();
        this.node.active = true;
        this.ui.DiceAnim.getComponent("cc.Animation").play();
        this.model.mahjongAudio.getInstance().playDice();
      };
      View.prototype.clear = function() {
        this.ui.DingZhuang.getComponent("cc.Animation").stop();
        this.ui.DiceAnim.getComponent("cc.Animation").stop();
      };
      View.prototype.onDiceFinished = function() {
        this.ui.Dice1.getComponent(cc.Sprite).spriteFrame = this.model.mahjongResMgr.getInstance().getSpriteFrame("dice1-ysz_" + this.model.dice1Value);
        this.ui.Dice2.getComponent(cc.Sprite).spriteFrame = this.model.mahjongResMgr.getInstance().getSpriteFrame("dice2-ysz2_" + this.model.dice2Value);
        this.ui.DiceAnim.active = false;
        this.ui.Dice1.active = true;
        this.ui.Dice2.active = true;
        console.log("dice1Finish", this.model.mahjongResMgr.getInstance().getSpriteFrame("dice1-ysz_" + this.model.dice1Value));
        console.log("dice1Finish", this.model.mahjongResMgr.getInstance().getSpriteFrame("dice2-ysz2_" + this.model.dice2Value));
      };
      View.prototype.hideDice = function() {
        this.node.active = false;
      };
      return View;
    }(BaseView_1.default);
    var MahjongDiceCtrl = function(_super) {
      __extends(MahjongDiceCtrl, _super);
      function MahjongDiceCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.DiceAnim = null;
        _this.Dice1 = null;
        _this.Dice2 = null;
        _this.DingZhuang = null;
        return _this;
      }
      MahjongDiceCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      MahjongDiceCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onProcess: this.onProcess
        };
      };
      MahjongDiceCtrl.prototype.defineGlobalEvents = function() {};
      MahjongDiceCtrl.prototype.connectUi = function() {};
      MahjongDiceCtrl.prototype.start = function() {};
      MahjongDiceCtrl.prototype.onProcess = function(msg) {
        msg.process == MahjongDef_1.MahjongDef.process_ready ? this.process_ready() : msg.process == MahjongDef_1.MahjongDef.process_dingzhuang ? this.process_dingzhuang(msg) : msg.process == MahjongDef_1.MahjongDef.process_fapai && this.process_fapai(msg);
      };
      MahjongDiceCtrl.prototype.process_ready = function() {
        this.model.clear();
        this.view.clear();
      };
      MahjongDiceCtrl.prototype.process_dingzhuang = function(msg) {
        this.model.initDices(msg);
        this.view.runDice();
      };
      MahjongDiceCtrl.prototype.process_fapai = function(msg) {
        this.view.hideDice();
      };
      __decorate([ property({
        tooltip: "骰子动画",
        type: cc.Node
      }) ], MahjongDiceCtrl.prototype, "DiceAnim", void 0);
      __decorate([ property({
        tooltip: "左边骰子",
        type: cc.Node
      }) ], MahjongDiceCtrl.prototype, "Dice1", void 0);
      __decorate([ property({
        tooltip: "右边骰子",
        type: cc.Node
      }) ], MahjongDiceCtrl.prototype, "Dice2", void 0);
      __decorate([ property(cc.Node) ], MahjongDiceCtrl.prototype, "DingZhuang", void 0);
      MahjongDiceCtrl = __decorate([ ccclass ], MahjongDiceCtrl);
      return MahjongDiceCtrl;
    }(BaseCtrl_1.default);
    exports.default = MahjongDiceCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "./MahjongDef": "MahjongDef"
  } ],
  MahjongEventCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9a373HoOf9MUJVzP5diizSj", "MahjongEventCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var MahjongDef_1 = require("./MahjongDef");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.carddatas = null;
        _this.curEvent = null;
        _this.myself = null;
        _this.mahjongResMgr = RoomMgr_1.default.getInstance().getResMgr();
        _this.mahjongLogic = RoomMgr_1.default.getInstance().getLogic();
        _this.mahjongDef = RoomMgr_1.default.getInstance().getDef();
        _this.mahjongAudio = RoomMgr_1.default.getInstance().getAudio();
        _this.mahjongCards = RoomMgr_1.default.getInstance().getCards();
        _this.roomValue = RoomMgr_1.default.getInstance().getFangKaCfg();
        _this.disablepass = false;
        _this.int_chipaiHeightLeap = 0;
        _this.animcfg = {};
        _this.clear();
        _this.animcfg[_this.mahjongDef.event_hu] = "Btnhu";
        _this.animcfg[_this.mahjongDef.event_qianggang_hu] = "Btnqiangganghu";
        _this.animcfg[_this.mahjongDef.event_angang] = "Btngang";
        _this.animcfg[_this.mahjongDef.event_bugang] = "Btngang";
        _this.animcfg[_this.mahjongDef.event_gang] = "Btngang";
        _this.animcfg[_this.mahjongDef.event_peng] = "Btnpeng";
        _this.animcfg[_this.mahjongDef.event_chi] = "Btnchi";
        _this.animcfg[_this.mahjongDef.event_zimo] = "Btnzimo";
        _this.animcfg[_this.mahjongDef.event_sanjindao] = "Btnsanjindao";
        _this.animcfg[_this.mahjongDef.event_danyou] = "Btnyoujin";
        _this.animcfg[_this.mahjongDef.event_shuangyou] = "Btnshuangyou";
        _this.animcfg[_this.mahjongDef.event_sanyou] = "Btnsanyou";
        _this.animcfg[_this.mahjongDef.event_bazhanghua] = "Btnbazhanghua";
        _this.animcfg[_this.mahjongDef.event_qiangjinhu] = "Btnqiangjinhu";
        _this.animcfg[_this.mahjongDef.event_sijindao] = "Btnsijindao";
        _this.animcfg[_this.mahjongDef.event_wujindao] = "Btnwujindao";
        _this.animcfg[_this.mahjongDef.event_liujindao] = "Btnliujindao";
        _this.animcfg[_this.mahjongDef.event_tianhu] = "Btntianhu";
        _this.animcfg[_this.mahjongDef.event_gaibaoqiangjin] = "Btngaibaoqiangjin";
        _this.int_chipaiHeightLeap = ctrl.int_chipaiHeightLeap;
        return _this;
      }
      Model.prototype.updateData = function(msg) {
        this.disablepass = msg.disablepass;
      };
      Model.prototype.updateMySelf = function() {
        var seatid = RoomMgr_1.default.getInstance().getMySeatId();
        this.myself = this.mahjongLogic.getInstance().players[seatid];
        this.mahjongCards = this.mahjongLogic.getInstance().getMahjongCards();
      };
      Model.prototype.setCurEventIndex = function(index) {
        this.curEvent = this.myself.events[index];
        var cur_op = this.mahjongDef.op_cfg[this.curEvent];
        this.carddatas = null;
        console.log("setCurEventIndex=", cur_op);
        if (cur_op == this.mahjongDef.op_chi) this.carddatas = this.myself.getCardsCandChi(); else if (cur_op == this.mahjongDef.op_angang) {
          this.carddatas = this.myself.getCardsCanAnGang();
          console.log("获取可以暗杠的牌=", this.carddatas);
        } else cur_op == this.mahjongDef.op_bugang && (this.carddatas = this.myself.getCardsCanBuGang());
      };
      Model.prototype.clear = function() {
        this.disablepass = false;
        this.curEvent = null;
      };
      Model.prototype.recover = function() {
        var seatid = RoomMgr_1.default.getInstance().getMySeatId();
        this.myself = this.mahjongLogic.getInstance().players[seatid];
      };
      Model.prototype.getHuType = function() {
        return this.myself.getHuType();
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btnOpArr: null,
          btn_cancel: null,
          three: null,
          four: null,
          hunode: null,
          threecardpanels: null,
          fourcardpanels: null,
          hucards: [],
          node_empty: null
        };
        _this.threecardfaces = {};
        _this.fourcardfaces = {};
        _this.fourcardbacks = {};
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.node.active = false;
        this.ui.btnOpArr = [ ctrl.btn_0, ctrl.btn_1, ctrl.btn_2, ctrl.btn_3 ];
        this.ui.btn_cancel = ctrl.btn_cancel;
        this.ui.three = ctrl.three;
        this.ui.four = ctrl.four;
        this.ui.hunode = ctrl.hunode;
        this.ui.threecardpanels = [];
        this.ui.fourcardpanels = [];
        this.threecardfaces = [];
        this.fourcardfaces = [];
        this.fourcardbacks = [];
        this.ui.node_empty = ctrl.node_empty;
        for (var i_1 = 0; i_1 < 3; ++i_1) {
          var cardpanel = this.ui.three.getChildByName("panel_" + i_1);
          console.log("name=", "panel_" + i_1);
          this.ui.threecardpanels.push(cardpanel);
          cardpanel.active = false;
          cardpanel.tag = i_1;
          var faces = [];
          for (var j = 0; j < 3; ++j) {
            var cardnode = cardpanel.getChildByName("card_" + j);
            var face = cardnode.getChildByName("face");
            faces.push(face);
          }
          this.threecardfaces.push(faces);
        }
        for (var i_2 = 0; i_2 < 4; ++i_2) {
          var cardpanel = this.ui.four.getChildByName("panel_" + i_2);
          this.ui.fourcardpanels.push(cardpanel);
          cardpanel.active = false;
          cardpanel.tag = i_2;
          var faces = [];
          var backs = [];
          for (var j = 0; j < 4; ++j) {
            var cardnode = cardpanel.getChildByName("card_" + j);
            var face = cardnode.getChildByName("face");
            faces.push(face);
            j < 3 && backs.push(cardnode.parent.getChildByName("backcard_" + j));
          }
          this.fourcardbacks.push(backs);
          this.fourcardfaces.push(faces);
        }
        for (var i = 0; i < 14; ++i) {
          var card = this.ui.hunode.getChildByName("card_" + i);
          this.ui.hucards.push(card);
        }
      };
      View.prototype.recover = function() {
        this.clear();
        if (this.model.myself.state != MahjongDef_1.MahjongDef.state_event) return;
        this.show();
      };
      View.prototype.clear = function() {
        this.node.active = false;
        this.ui.hunode.active = false;
        for (var i = 0; i < this.ui.threecardpanels.length; ++i) this.ui.threecardpanels[i].active = false;
        for (var i_3 = 0; i_3 < this.threecardfaces.length; ++i_3) {
          var cardFace = this.threecardfaces[i_3];
          for (var j = 0; j < cardFace.length; ++j) {
            var cardNodPos = cardFace[j].parent.getPosition();
            cardFace[j].parent.setPosition(cc.p(cardNodPos.x, 0));
            cardFace[j].parent.color = new cc.Color(255, 255, 255);
          }
        }
        for (var i = 0; i < this.ui.fourcardpanels.length; ++i) this.ui.fourcardpanels[i].active = false;
      };
      View.prototype.show = function() {
        this.node.active = true;
        this.ui.btn_cancel.active = true;
        this.ui.btn_cancel.getComponent(cc.Animation).play("Btnguo");
        for (var i = 0; i < this.ui.btnOpArr.length; ++i) {
          var btnDo = this.ui.btnOpArr[i];
          var eventLength = this.model.myself.events.length;
          if (i < eventLength) {
            var event = this.model.myself.events[eventLength - 1 - i];
            this.model.disablepass && (this.ui.btn_cancel.active = false);
            console.log("eventnumber", event, this.model.mahjongCards.getCardCount());
            event == MahjongDef_1.MahjongDef.event_shuangyou && 13 != this.model.mahjongCards.getCardCount() && (this.ui.btn_cancel.active = false);
            btnDo.active = true;
            var name = this.model.animcfg[event];
            console.log("name=", name);
            if (event == MahjongDef_1.MahjongDef.event_zimo) {
              var hutype = this.model.getHuType();
              switch (hutype) {
               case MahjongDef_1.MahjongDef.hutype_131:
                name = "Btnshisanyao";
                break;

               case MahjongDef_1.MahjongDef.hutype_hunyise:
                name = "Btnhunyise";
                break;

               case MahjongDef_1.MahjongDef.hutype_qingyise:
                name = "Btnqingyise";
              }
            }
            if (event == MahjongDef_1.MahjongDef.event_hu) {
              var hutype = this.model.getHuType();
              switch (hutype) {
               case MahjongDef_1.MahjongDef.hutype_hunyise:
                name = "Btnhunyise";
                break;

               case MahjongDef_1.MahjongDef.hutype_qingyise:
                name = "Btnqingyise";
              }
            }
            btnDo.getComponent(cc.Animation).play(name);
          } else btnDo.active = false;
        }
      };
      View.prototype.showSubSel = function() {
        var event = this.model.curEvent;
        var cur_op = MahjongDef_1.MahjongDef.op_cfg[event];
        cur_op == MahjongDef_1.MahjongDef.op_chi ? this.updateChi() : cur_op == MahjongDef_1.MahjongDef.op_angang ? this.updateAnGang() : cur_op == MahjongDef_1.MahjongDef.op_bugang && this.updateBuGang();
      };
      View.prototype.updateHu = function() {
        var cardpairs = this.model.carddatas.cardpairs;
        this.ui.hunode.active = true;
        for (var i = 0; i < this.ui.hucards.length; ++i) this.ui.hucards[i].active = false;
        var index = 0;
        for (var i = 0; i < cardpairs.length; ++i) {
          var cardarr = cardpairs[i];
          for (var k = 0; k < cardarr.length; ++k) {
            var mjnode = this.ui.hucards[index];
            mjnode.active = true;
            index++;
            var face = mjnode.getChildByName("face");
            var cardvalue = cardarr[k];
            console.log("cardvalue=", cardvalue);
            face.getComponent(cc.Sprite).spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(cardvalue);
          }
        }
      };
      View.prototype.updateChi = function() {
        this.ui.btn_cancel.active = true;
        this.ui.btn_cancel.getComponent(cc.Animation).play("Btnguo");
        for (var i = 0; i < this.model.carddatas.length; ++i) {
          var chiinfo = this.model.carddatas[i];
          var cards = chiinfo.cards;
          var cardpanel = this.ui.threecardpanels[i];
          cardpanel.active = true;
          var cardface = this.threecardfaces[i];
          for (var j = 0; j < cards.length; ++j) {
            var cardvalue = cards[j];
            var face = cardface[j];
            if (chiinfo.index == j) {
              var cardNodePosition = face.parent.getPosition();
              face.parent.setPosition(cc.p(cardNodePosition.x, cardNodePosition.y + this.model.int_chipaiHeightLeap));
              face.parent.color = new cc.Color(167, 244, 164);
            }
            face.getComponent(cc.Sprite).spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(cardvalue);
          }
        }
      };
      View.prototype.hideAllSelection = function() {
        if (!this.model.carddatas) return;
        for (var i = 0; i < this.model.carddatas.length; ++i) {
          var threecardpanel = this.ui.threecardpanels[i];
          if (true == threecardpanel.active) {
            threecardpanel.active = false;
            var chiinfo = this.model.carddatas[i];
            var cards = chiinfo.cards;
            var cardface = this.threecardfaces[i];
            for (var j = 0; j < cards.length; ++j) {
              var face = cardface[j];
              if (chiinfo.index == j) {
                var cardNodePosition = face.parent.getPosition();
                face.parent.setPosition(cc.p(cardNodePosition.x, 0));
              }
            }
          }
        }
        for (var i = 0; i < this.model.carddatas.length; ++i) {
          var fourcardpanel = this.ui.fourcardpanels[i];
          true == fourcardpanel.active && (fourcardpanel.active = false);
        }
      };
      View.prototype.updatePeng = function() {
        var cardpanel = this.ui.threecardpanels[0];
        cardpanel.active = true;
        var cardface = this.threecardfaces[0];
        var cardvalue = this.model.mahjongLogic.getInstance().curcard;
        for (var j = 0; j < 3; ++j) {
          var face = cardface[j];
          face.getComponent(cc.Sprite).spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(cardvalue);
        }
      };
      View.prototype.updateGang = function() {
        var cardpanel = this.ui.fourcardpanels[0];
        cardpanel.active = true;
        var cardface = this.fourcardfaces[0];
        var cardvalue = this.model.mahjongLogic.getInstance().curcard;
        for (var j = 0; j < 4; ++j) {
          var face = cardface[j];
          face.getComponent(cc.Sprite).spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(cardvalue);
        }
      };
      View.prototype.updateAnGang = function() {
        for (var i = 0; i < this.model.carddatas.length; ++i) {
          var cardvalue = this.model.carddatas[i];
          var cardpanel = this.ui.fourcardpanels[i];
          cardpanel.active = true;
          var cardface = this.fourcardfaces[i];
          var cardback = this.fourcardbacks[i];
          for (var j = 0; j < 4; ++j) {
            var face = cardface[j];
            if (j < 3) {
              face.parent.active = false;
              cardback[j].active = true;
              continue;
            }
            face.getComponent(cc.Sprite).spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(cardvalue);
          }
        }
      };
      View.prototype.updateBuGang = function() {
        for (var i = 0; i < this.model.carddatas.length; ++i) {
          var cardvalue = this.model.carddatas[i];
          var cardpanel = this.ui.fourcardpanels[i];
          cardpanel.active = true;
          var cardface = this.fourcardfaces[i];
          for (var j = 0; j < 4; ++j) {
            var face = cardface[j];
            face.parent.active = true;
            face.getComponent(cc.Sprite).spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(cardvalue);
          }
        }
      };
      View.prototype.hideAllOpBtns = function() {
        for (var i = 0; i < this.ui.btnOpArr.length; ++i) this.ui.btnOpArr[i].active = false;
        this.ui.btn_cancel.active = false;
      };
      return View;
    }(BaseView_1.default);
    var MahjongEventCtrl = function(_super) {
      __extends(MahjongEventCtrl, _super);
      function MahjongEventCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_0 = null;
        _this.btn_1 = null;
        _this.btn_2 = null;
        _this.btn_3 = null;
        _this.btn_cancel = null;
        _this.three = null;
        _this.four = null;
        _this.hunode = null;
        _this.card_0 = null;
        _this.card_1 = null;
        _this.card_2 = null;
        _this.card_3 = null;
        _this.card_4 = null;
        _this.card_5 = null;
        _this.card_6 = null;
        _this.card_7 = null;
        _this.card_8 = null;
        _this.card_9 = null;
        _this.card_10 = null;
        _this.card_11 = null;
        _this.card_12 = null;
        _this.card_13 = null;
        _this.int_chipaiHeightLeap = 0;
        _this.node_empty = null;
        return _this;
      }
      MahjongEventCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      MahjongEventCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onEvent: this.onEvent,
          onProcess: this.onProcess,
          onOp: this.onOp,
          onSyncData: this.onSyncData
        };
      };
      MahjongEventCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          usersUpdated: this.usersUpdated
        };
      };
      MahjongEventCtrl.prototype.usersUpdated = function() {
        this.model.updateMySelf();
      };
      MahjongEventCtrl.prototype.clickEvent = function(index) {
        console.log("clickEvent");
        var eventLength = this.model.myself.events.length;
        this.model.setCurEventIndex(eventLength - 1 - index);
        var event = this.model.curEvent;
        if (this.model.carddatas && this.model.carddatas.length > 1) {
          this.view.hideAllOpBtns();
          this.view.showSubSel();
          return;
        }
        this.playerOp(0);
      };
      MahjongEventCtrl.prototype.connectUi = function() {
        var _loop_1 = function(i) {
          btnOp = this_1.ui.btnOpArr[i];
          cb = function() {
            this.clickEvent(i);
          };
          cancelcb = function() {
            console.log("cancelcb");
          };
          this_1.connect(G_UiType.button, btnOp, {
            startCallBack: null,
            moveCallBack: null,
            endCallBack: cb.bind(this_1),
            cancelCallBack: cancelcb.bind(this_1)
          }, "操作" + i);
        };
        var this_1 = this, btnOp, cb, cancelcb;
        for (var i = 0; i < this.ui.btnOpArr.length; ++i) _loop_1(i);
        this.connect(G_UiType.button, this.ui.btn_cancel, {
          startCallBack: null,
          moveCallBack: null,
          endCallBack: this.btn_cancel_cb,
          cancelCallBack: cancelcb.bind(this)
        }, "取消事件");
        var _loop_2 = function(i) {
          cardpanel = this_2.ui.threecardpanels[i];
          cardpanel.on(cc.Node.EventType.TOUCH_END, function(event) {
            this.touchPanel(i);
          }, this_2);
        };
        var this_2 = this, cardpanel;
        for (var i = 0; i < this.ui.threecardpanels.length; ++i) _loop_2(i);
        var _loop_3 = function(i) {
          cardpanel = this_3.ui.fourcardpanels[i];
          cardpanel.on(cc.Node.EventType.TOUCH_END, function(event) {
            this.touchPanel(i);
          }, this_3);
        };
        var this_3 = this, cardpanel;
        for (var i = 0; i < this.ui.fourcardpanels.length; ++i) _loop_3(i);
        this.connect(G_UiType.image, this.ui.node_empty, this.node_emptycb, "点击背景");
      };
      MahjongEventCtrl.prototype.start = function() {};
      MahjongEventCtrl.prototype.onSyncData = function() {
        this.ui.hunode.active = false;
        this.model.recover();
        this.view.recover();
      };
      MahjongEventCtrl.prototype.onOp = function() {
        this.model.clear();
        this.view.clear();
      };
      MahjongEventCtrl.prototype.onEvent = function(msg) {
        if (this.model.myself.state != MahjongDef_1.MahjongDef.state_event) return;
        console.log("收到了事件=", msg);
        this.model.clear();
        this.model.updateData(msg);
        this.view.clear();
        this.view.show();
      };
      MahjongEventCtrl.prototype.process_ready = function(msg) {
        this.model.clear();
        this.view.clear();
      };
      MahjongEventCtrl.prototype.onProcess = function(msg) {
        msg.process == MahjongDef_1.MahjongDef.process_ready && this.process_ready(msg);
      };
      MahjongEventCtrl.prototype.btn_cancel_cb = function() {
        this.model.mahjongLogic.getInstance().playerCancel();
        this.view.clear();
      };
      MahjongEventCtrl.prototype.playerOp = function(id) {
        if (this.model.curEvent == MahjongDef_1.MahjongDef.event_chi) {
          var chiinfo = this.model.carddatas[id];
          var index = chiinfo.index;
          this.model.mahjongLogic.getInstance().playerOp(this.model.curEvent, index);
        } else if (this.model.curEvent == MahjongDef_1.MahjongDef.event_angang || this.model.curEvent == MahjongDef_1.MahjongDef.event_bugang) {
          var card = this.model.carddatas[id];
          this.model.mahjongLogic.getInstance().playerOp(this.model.curEvent, card);
        } else this.model.mahjongLogic.getInstance().playerOp(this.model.curEvent);
        this.view.clear();
      };
      MahjongEventCtrl.prototype.touchPanel = function(index) {
        console.log("touchPanel");
        this.playerOp(index);
      };
      MahjongEventCtrl.prototype.node_emptycb = function(node, event) {
        if (this.model.disablepass) return;
        this.view.hideAllSelection();
        this.view.show();
      };
      __decorate([ property(cc.Node) ], MahjongEventCtrl.prototype, "btn_0", void 0);
      __decorate([ property(cc.Node) ], MahjongEventCtrl.prototype, "btn_1", void 0);
      __decorate([ property(cc.Node) ], MahjongEventCtrl.prototype, "btn_2", void 0);
      __decorate([ property(cc.Node) ], MahjongEventCtrl.prototype, "btn_3", void 0);
      __decorate([ property(cc.Node) ], MahjongEventCtrl.prototype, "btn_cancel", void 0);
      __decorate([ property(cc.Node) ], MahjongEventCtrl.prototype, "three", void 0);
      __decorate([ property(cc.Node) ], MahjongEventCtrl.prototype, "four", void 0);
      __decorate([ property(cc.Node) ], MahjongEventCtrl.prototype, "hunode", void 0);
      __decorate([ property(cc.Node) ], MahjongEventCtrl.prototype, "card_0", void 0);
      __decorate([ property(cc.Node) ], MahjongEventCtrl.prototype, "card_1", void 0);
      __decorate([ property(cc.Node) ], MahjongEventCtrl.prototype, "card_2", void 0);
      __decorate([ property(cc.Node) ], MahjongEventCtrl.prototype, "card_3", void 0);
      __decorate([ property(cc.Node) ], MahjongEventCtrl.prototype, "card_4", void 0);
      __decorate([ property(cc.Node) ], MahjongEventCtrl.prototype, "card_5", void 0);
      __decorate([ property(cc.Node) ], MahjongEventCtrl.prototype, "card_6", void 0);
      __decorate([ property(cc.Node) ], MahjongEventCtrl.prototype, "card_7", void 0);
      __decorate([ property(cc.Node) ], MahjongEventCtrl.prototype, "card_8", void 0);
      __decorate([ property(cc.Node) ], MahjongEventCtrl.prototype, "card_9", void 0);
      __decorate([ property(cc.Node) ], MahjongEventCtrl.prototype, "card_10", void 0);
      __decorate([ property(cc.Node) ], MahjongEventCtrl.prototype, "card_11", void 0);
      __decorate([ property(cc.Node) ], MahjongEventCtrl.prototype, "card_12", void 0);
      __decorate([ property(cc.Node) ], MahjongEventCtrl.prototype, "card_13", void 0);
      __decorate([ property({
        tooltip: "麻将吃牌增高长度",
        type: cc.Integer
      }) ], MahjongEventCtrl.prototype, "int_chipaiHeightLeap", void 0);
      __decorate([ property(cc.Node) ], MahjongEventCtrl.prototype, "node_empty", void 0);
      MahjongEventCtrl = __decorate([ ccclass ], MahjongEventCtrl);
      return MahjongEventCtrl;
    }(BaseCtrl_1.default);
    exports.default = MahjongEventCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "./MahjongDef": "MahjongDef"
  } ],
  MahjongFaPaiGmCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "05493hwsV1L3JOzGMiLzB3w", "MahjongFaPaiGmCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var MahjongDef_1 = require("./MahjongDef");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.mahjongResMgr = RoomMgr_1.default.getInstance().getResMgr();
        _this.mahjongLogic = RoomMgr_1.default.getInstance().getLogic();
        _this.mahjongDef = RoomMgr_1.default.getInstance().getDef();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          prefab_MahjongItem: null,
          node_Mahjong: null,
          node_Close: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_Mahjong = ctrl.Node_Mahjong;
        this.ui.node_Close = ctrl.Node_Close;
        this.ui.prefab_MahjongItem = ctrl.Prefab_MahjongItem;
        this.ui.node_Mahjong.removeAllChildren();
      };
      View.prototype.createMahjong = function(id, parent) {
        var node = cc.instantiate(this.ui.prefab_MahjongItem);
        var face = node.getChildByName("MaJiang");
        face.getComponent(cc.Sprite).spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(id);
        parent.addChild(node);
        return node;
      };
      return View;
    }(BaseView_1.default);
    var QzmjFaPaiGmCtrl = function(_super) {
      __extends(QzmjFaPaiGmCtrl, _super);
      function QzmjFaPaiGmCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.Prefab_MahjongItem = null;
        _this.Node_Close = null;
        _this.Node_Mahjong = null;
        return _this;
      }
      QzmjFaPaiGmCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      QzmjFaPaiGmCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "room.roomHandler.gmReq": this.room_roomHandler_gmReq.bind(this),
          onGmOp: this.onGmOp
        };
      };
      QzmjFaPaiGmCtrl.prototype.defineGlobalEvents = function() {};
      QzmjFaPaiGmCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.node_Close, this.finish, "点击了关闭");
        var nodes = this.ui.node_Mahjong.children || [];
        for (var i = 0; i < nodes.length; i++) this.connect(G_UiType.image, nodes[i], this.touchCards.bind(this, i), "点击了麻将下标" + i);
      };
      QzmjFaPaiGmCtrl.prototype.start = function() {
        var msg = {
          reqtype: MahjongDef_1.MahjongDef.gmreq_cards,
          data: {}
        };
        this.model.mahjongLogic.getInstance().gmReq(msg);
      };
      QzmjFaPaiGmCtrl.prototype.onGmOp = function(msg) {
        this.finish();
      };
      QzmjFaPaiGmCtrl.prototype.room_roomHandler_gmReq = function(msg) {
        this.model.roomCards = msg.data.cards;
        var cards = msg.data.cards;
        for (var i = 0; i < cards.length; i++) var node = this.view.createMahjong(cards[i], this.ui.node_Mahjong);
        this.connectUi();
      };
      QzmjFaPaiGmCtrl.prototype.touchCards = function(index) {
        if (null == this.model.changeIndex) this.model.changeIndex = index; else {
          this.model.changePurpose = index;
          if (this.model.changeIndex >= 0 && this.model.changePurpose >= 0) {
            console.log("第一个点击的", this.model.changeIndex);
            console.log("第二个点击的", this.model.changePurpose);
            if (this.model.changeIndex != this.model.changePurpose) {
              var msg = {
                optype: MahjongDef_1.MahjongDef.gmop_changewallorder,
                data: {
                  src: this.model.changeIndex,
                  dest: this.model.changePurpose
                }
              };
              this.model.mahjongLogic.getInstance().gmOp(msg);
            } else console.log("两次相同，不做改变");
          }
        }
        this.touchEffect(this.view.ui.node_Mahjong.children, .8);
        this.view.ui.node_Mahjong.children[index].setScale(new cc.Vec2(1, 1));
      };
      QzmjFaPaiGmCtrl.prototype.touchEffect = function(nodes, scale) {
        for (var i = 0; i < nodes.length; i++) nodes[i].setScale(new cc.Vec2(scale, scale));
      };
      __decorate([ property({
        tooltip: "麻将预制资源",
        type: cc.Prefab
      }) ], QzmjFaPaiGmCtrl.prototype, "Prefab_MahjongItem", void 0);
      __decorate([ property({
        tooltip: "关闭",
        type: cc.Node
      }) ], QzmjFaPaiGmCtrl.prototype, "Node_Close", void 0);
      __decorate([ property({
        tooltip: "麻将位置",
        type: cc.Node
      }) ], QzmjFaPaiGmCtrl.prototype, "Node_Mahjong", void 0);
      QzmjFaPaiGmCtrl = __decorate([ ccclass ], QzmjFaPaiGmCtrl);
      return QzmjFaPaiGmCtrl;
    }(BaseCtrl_1.default);
    exports.default = QzmjFaPaiGmCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "./MahjongDef": "MahjongDef"
  } ],
  MahjongGeneral: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fd305m8jWtC1KSs7rfZxtu8", "MahjongGeneral");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MahjongGeneral = {};
    var MajiangType = {};
    MajiangType.emMJType_Wan = 1;
    MajiangType.emMJType_Tiao = 2;
    MajiangType.emMJType_Tong = 3;
    MajiangType.emMJType_Zi = 4;
    MajiangType.emMJType_Hua = 5;
    var COB = function(m, n) {
      return m << 4 | 15 & n;
    };
    var Majiang_Type = function(m) {
      return m >> 4;
    };
    var Majiang_Value = function(m) {
      return 15 & m;
    };
    var emMJ = {};
    emMJ.emMJ_Joker = 0;
    emMJ.emMJ_Joker2 = 1;
    emMJ.emMJ_1Wan = COB(MajiangType.emMJType_Wan, 1);
    emMJ.emMJ_2Wan = COB(MajiangType.emMJType_Wan, 2);
    emMJ.emMJ_3Wan = COB(MajiangType.emMJType_Wan, 3);
    emMJ.emMJ_4Wan = COB(MajiangType.emMJType_Wan, 4);
    emMJ.emMJ_5Wan = COB(MajiangType.emMJType_Wan, 5);
    emMJ.emMJ_6Wan = COB(MajiangType.emMJType_Wan, 6);
    emMJ.emMJ_7Wan = COB(MajiangType.emMJType_Wan, 7);
    emMJ.emMJ_8Wan = COB(MajiangType.emMJType_Wan, 8);
    emMJ.emMJ_9Wan = COB(MajiangType.emMJType_Wan, 9);
    emMJ.emMJ_1Tiao = COB(MajiangType.emMJType_Tiao, 1);
    emMJ.emMJ_2Tiao = COB(MajiangType.emMJType_Tiao, 2);
    emMJ.emMJ_3Tiao = COB(MajiangType.emMJType_Tiao, 3);
    emMJ.emMJ_4Tiao = COB(MajiangType.emMJType_Tiao, 4);
    emMJ.emMJ_5Tiao = COB(MajiangType.emMJType_Tiao, 5);
    emMJ.emMJ_6Tiao = COB(MajiangType.emMJType_Tiao, 6);
    emMJ.emMJ_7Tiao = COB(MajiangType.emMJType_Tiao, 7);
    emMJ.emMJ_8Tiao = COB(MajiangType.emMJType_Tiao, 8);
    emMJ.emMJ_9Tiao = COB(MajiangType.emMJType_Tiao, 9);
    emMJ.emMJ_1Tong = COB(MajiangType.emMJType_Tong, 1);
    emMJ.emMJ_2Tong = COB(MajiangType.emMJType_Tong, 2);
    emMJ.emMJ_3Tong = COB(MajiangType.emMJType_Tong, 3);
    emMJ.emMJ_4Tong = COB(MajiangType.emMJType_Tong, 4);
    emMJ.emMJ_5Tong = COB(MajiangType.emMJType_Tong, 5);
    emMJ.emMJ_6Tong = COB(MajiangType.emMJType_Tong, 6);
    emMJ.emMJ_7Tong = COB(MajiangType.emMJType_Tong, 7);
    emMJ.emMJ_8Tong = COB(MajiangType.emMJType_Tong, 8);
    emMJ.emMJ_9Tong = COB(MajiangType.emMJType_Tong, 9);
    emMJ.emMJ_DongFeng = COB(MajiangType.emMJType_Zi, 1);
    emMJ.emMJ_NanFeng = COB(MajiangType.emMJType_Zi, 3);
    emMJ.emMJ_XiFeng = COB(MajiangType.emMJType_Zi, 5);
    emMJ.emMJ_BeiFeng = COB(MajiangType.emMJType_Zi, 7);
    emMJ.emMJ_HongZhong = COB(MajiangType.emMJType_Zi, 9);
    emMJ.emMJ_FaCai = COB(MajiangType.emMJType_Zi, 11);
    emMJ.emMJ_BaiBan = COB(MajiangType.emMJType_Zi, 13);
    emMJ.emMJ_Mei = COB(MajiangType.emMJType_Hua, 1);
    emMJ.emMJ_Lan = COB(MajiangType.emMJType_Hua, 3);
    emMJ.emMJ_Ju = COB(MajiangType.emMJType_Hua, 5);
    emMJ.emMJ_Zhu = COB(MajiangType.emMJType_Hua, 7);
    emMJ.emMJ_Chun = COB(MajiangType.emMJType_Hua, 9);
    emMJ.emMJ_Xia = COB(MajiangType.emMJType_Hua, 11);
    emMJ.emMJ_Qiu = COB(MajiangType.emMJType_Hua, 13);
    emMJ.emMJ_Dong = COB(MajiangType.emMJType_Hua, 15);
    emMJ.emMJ_TEST = 3;
    MahjongGeneral.MajiangType = MajiangType;
    MahjongGeneral.emMJ = emMJ;
    MahjongGeneral.Majiang_Type = Majiang_Type;
    MahjongGeneral.isJoker = function(cardvalue) {
      return cardvalue == emMJ.emMJ_Joker || cardvalue == emMJ.emMJ_Joker2;
    };
    MahjongGeneral.isBaiBan = function(cardvalue) {
      return cardvalue == emMJ.emMJ_BaiBan;
    };
    MahjongGeneral.isNumberCard = function(cardvalue) {
      return Majiang_Type(cardvalue) < MajiangType.emMJType_Zi;
    };
    exports.MahjongGeneral = MahjongGeneral;
    cc._RF.pop();
  }, {} ],
  MahjongJinCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "905cdDFtuFBZqTBY0nVHj23", "MahjongJinCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.jin = null;
        _this.mahjongResMgr = RoomMgr_1.default.getInstance().getResMgr();
        _this.mahjongAudio = RoomMgr_1.default.getInstance().getAudio();
        return _this;
      }
      Model.prototype.clear = function() {};
      Model.prototype.updateJin = function(jinValue) {
        this.jin = jinValue;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          panel_jin: null,
          kaijinEffect: null
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.panel_jin = ctrl.panel_jin;
        this.ui.kaijinEffect = ctrl.panel_jin.getChildByName("kaijin_anim").getComponent(cc.Animation);
        this.clear();
      };
      View.prototype.clear = function() {
        this.ui.panel_jin.active = false;
      };
      View.prototype.updateJin = function() {
        this.ui.panel_jin.active = true;
        var sign = this.ui.panel_jin.getChildByName("sign");
        sign.getComponent(cc.Sprite).spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(this.model.jin);
      };
      View.prototype.showJinAnim = function(x, y) {
        this.ui.panel_jin.active = false;
        var jinOriginPos = this.ui.panel_jin.getPosition();
        this.ui.panel_jin.setPosition(cc.v2(x, y));
        setTimeout(function() {
          var _this = this;
          this.ui.panel_jin.active = true;
          this.ui.kaijinEffect.play();
          this.ui.panel_jin.runAction(cc.sequence(cc.delayTime(.6), cc.moveTo(.25, jinOriginPos), cc.callFunc(function() {
            _this.model.mahjongAudio.getInstance().playDown();
          })));
        }.bind(this), 1e3);
      };
      View.prototype.initPosition = function(x, y) {
        this.ui.panel_jin.setPosition(cc.v2(x, y));
      };
      return View;
    }(BaseView_1.default);
    var MahjongJinCtrl = function(_super) {
      __extends(MahjongJinCtrl, _super);
      function MahjongJinCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.panel_jin = null;
        _this.posX = 0;
        _this.posY = 0;
        return _this;
      }
      MahjongJinCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      MahjongJinCtrl.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
      };
      MahjongJinCtrl.prototype.defineGlobalEvents = function() {};
      MahjongJinCtrl.prototype.connectUi = function() {};
      MahjongJinCtrl.prototype.start = function() {};
      MahjongJinCtrl.prototype.initPosition = function(x, y) {
        this.posX = x;
        this.posY = y;
        this.view.initPosition(x, y);
      };
      __decorate([ property(cc.Node) ], MahjongJinCtrl.prototype, "panel_jin", void 0);
      MahjongJinCtrl = __decorate([ ccclass ], MahjongJinCtrl);
      return MahjongJinCtrl;
    }(BaseCtrl_1.default);
    exports.default = MahjongJinCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView"
  } ],
  MahjongJinMgrCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6a1efgZ961BvqIa9b2JDwPN", "MahjongJinMgrCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var MahjongDef_1 = require("./MahjongDef");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.jin = null;
        _this.jin2 = null;
        _this.jincount = 2;
        _this.mahjongLogic = RoomMgr_1.default.getInstance().getLogic();
        _this.mahjongDef = RoomMgr_1.default.getInstance().getDef();
        return _this;
      }
      Model.prototype.clear = function() {};
      Model.prototype.recover = function() {
        this.clear();
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          panel_jin: null,
          jinList: null
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.jinList = [];
        this.ui.panel_jin = ctrl.panel_jin;
        this.clear();
        for (var i = 0; i < this.model.jincount; i++) {
          var jinprefab = cc.instantiate(this.ui.panel_jin);
          jinprefab.active = true;
          this.ui.jinList.push(jinprefab);
          this.node.addChild(jinprefab);
        }
      };
      View.prototype.recover = function() {
        this.clear();
        this.initWithJin();
      };
      View.prototype.initWithJin = function() {
        this.node.active = true;
        var jinValue = null;
        for (var i = 0; i < this.ui.jinList.length; i++) {
          var jinposx = 0;
          var jinposy = 0;
          if (0 == i) {
            jinposx = ctrl.jin1PositionX;
            jinposy = ctrl.jin1PositionY;
            jinValue = this.model.jin;
          } else {
            jinposx = ctrl.jin2PositionX;
            jinposy = ctrl.jin2PositionY;
            jinValue = this.model.jin2;
          }
          this.ui.jinList[i].getComponent("MahjongJinCtrl").model.updateJin(jinValue);
          this.ui.jinList[i].getComponent("MahjongJinCtrl").initPosition(jinposx, jinposy);
          this.ui.jinList[i].getComponent("MahjongJinCtrl").view.updateJin();
        }
        null != this.model.jin2 && void 0 != this.model.jin2 || (this.ui.jinList[1].active = false);
      };
      View.prototype.showJinAnim = function() {
        for (var i = 0; i < this.ui.jinList.length; i++) {
          if (1 == i && (null == this.model.jin2 || void 0 == this.model.jin2)) continue;
          this.ui.jinList[i].getComponent("MahjongJinCtrl").view.showJinAnim(-54 * i, 0);
        }
      };
      View.prototype.clear = function() {
        this.node.active = false;
      };
      return View;
    }(BaseView_1.default);
    var MahjongJinMgrCtrl = function(_super) {
      __extends(MahjongJinMgrCtrl, _super);
      function MahjongJinMgrCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.panel_jin = null;
        _this.jin1PositionX = 0;
        _this.jin1PositionY = 0;
        _this.jin2PositionX = 0;
        _this.jin2PositionY = 0;
        return _this;
      }
      MahjongJinMgrCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      MahjongJinMgrCtrl.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
      };
      MahjongJinMgrCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onSyncData: this.onSyncData,
          onProcess: this.onProcess,
          "connector.entryHandler.enterRoom": this.connector_entryHandler_enterRoom,
          "room.roomHandler.nextRound": this.room_roomHandler_nextRound
        };
      };
      MahjongJinMgrCtrl.prototype.defineGlobalEvents = function() {};
      MahjongJinMgrCtrl.prototype.connectUi = function() {};
      MahjongJinMgrCtrl.prototype.start = function() {};
      MahjongJinMgrCtrl.prototype.onSyncData = function() {
        this.model.recover();
        this.view.recover();
        this.model.jin = this.model.mahjongLogic.getInstance().jin;
        this.model.jin2 = this.model.mahjongLogic.getInstance().jin2;
        null != this.model.jin && this.view.initWithJin();
      };
      MahjongJinMgrCtrl.prototype.onProcess = function(msg) {
        if (msg.process == MahjongDef_1.MahjongDef.process_kaijin) {
          this.model.jin = msg.jin;
          this.model.jin2 = msg.jin2;
          this.view.initWithJin();
          this.view.showJinAnim();
        } else msg.process == MahjongDef_1.MahjongDef.process_ready && this.process_ready();
      };
      MahjongJinMgrCtrl.prototype.process_ready = function() {
        this.model.clear();
        this.view.clear();
      };
      MahjongJinMgrCtrl.prototype.connector_entryHandler_enterRoom = function() {
        this.model.clear();
        this.view.clear();
      };
      MahjongJinMgrCtrl.prototype.room_roomHandler_nextRound = function() {
        this.model.clear();
        this.view.clear();
      };
      __decorate([ property(cc.Node) ], MahjongJinMgrCtrl.prototype, "panel_jin", void 0);
      __decorate([ property ], MahjongJinMgrCtrl.prototype, "jin1PositionX", void 0);
      __decorate([ property ], MahjongJinMgrCtrl.prototype, "jin1PositionY", void 0);
      __decorate([ property ], MahjongJinMgrCtrl.prototype, "jin2PositionX", void 0);
      __decorate([ property ], MahjongJinMgrCtrl.prototype, "jin2PositionY", void 0);
      MahjongJinMgrCtrl = __decorate([ ccclass ], MahjongJinMgrCtrl);
      return MahjongJinMgrCtrl;
    }(BaseCtrl_1.default);
    exports.default = MahjongJinMgrCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "./MahjongDef": "MahjongDef"
  } ],
  MahjongLogic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "596bc4aQbdD/o5Xxmb/MpB0", "MahjongLogic");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MahjongResMgr_1 = require("./MahjongResMgr");
    var MahjongDef_1 = require("./MahjongDef");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var BaseMgr_1 = require("../../Plat/Libs/BaseMgr");
    var MahjongLogic = function(_super) {
      __extends(MahjongLogic, _super);
      function MahjongLogic() {
        var _this = _super.call(this) || this;
        _this.opcardarr = null;
        _this.handcards = null;
        _this.huinfo = null;
        _this.maxoptime = 12;
        _this.players = {};
        _this.seatcount = null;
        _this.routes = null;
        _this.cardwallindex = null;
        _this.gameid = null;
        _this.jin = null;
        _this.jin2 = null;
        _this.process = null;
        _this.cardstate = null;
        _this.curseat = null;
        _this.zhuangseat = null;
        _this.touzi1 = null;
        _this.touzi2 = null;
        _this.curcard = null;
        _this.op_tick = null;
        _this.curplayer = null;
        _this.bunchFinish = false;
        _this.win_seatid = null;
        _this.chicards = {};
        _this.cardcount = 0;
        _this.needtongbu = false;
        _this.mahjongcards = null;
        _this.checklevel = 0;
        _this.eventseat = 0;
        _this.cur_opseatid = null;
        _this.servertime = null;
        _this.myself = null;
        _this.roundSettle = null;
        _this.bSanYou = false;
        _this.bShuangYou = false;
        _this.bDanYou = false;
        _this.isMingYou = false;
        _this.isQuanZiDong = false;
        _this.prop = null;
        _this.haidilaoyueInfo = null;
        _this.bViewMode = false;
        _this.lianzhuang = 0;
        _this.maxoptime = 12;
        _this.players = {};
        _this.seatcount = RoomMgr_1.default.getInstance().getRoomInfo().seatcount;
        _this.routes = {
          onProcess: _this.onProcess,
          onEvent: _this.onEvent,
          onSeatChange: _this.onSeatChange,
          onOp: _this.onOp,
          onSyncData: _this.onSyncData,
          "http.reqSettle": _this.http_reqSettle,
          onGmOp: _this.onGmOp
        };
        _this.bViewMode = RoomMgr_1.default.getInstance().getVideoMode();
        _this.initMahjong();
        _this.resetData();
        return _this;
      }
      MahjongLogic.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      MahjongLogic.prototype.initMahjong = function() {};
      MahjongLogic.prototype.getMahjongCards = function() {
        return this.mahjongcards;
      };
      MahjongLogic.prototype.isDanYou = function() {
        return this.bDanYou;
      };
      MahjongLogic.prototype.isShuangYou = function() {
        return this.bShuangYou;
      };
      MahjongLogic.prototype.getLeftCardCount = function() {
        return this.cardcount - this.cardwallindex;
      };
      MahjongLogic.prototype.onSyncData = function(msg) {
        RoomMgr_1.default.getInstance().getVideoMode() || this.resetData();
        this.cardcount = msg.cardcount;
        this.process = msg.process;
        this.curseat = msg.curseat;
        this.curcard = msg.curcard;
        this.op_tick = msg.op_tick;
        this.curplayer = this.players[this.curseat];
        this.cardwallindex = msg.cardwallindex;
        if (RoomMgr_1.default.getInstance().getVideoMode()) for (var seatid = 0; seatid < this.seatcount; ++seatid) {
          this.players[seatid].initHandCard(msg.handcards[seatid]);
          this.players[seatid].cardpool = msg.cardpools[seatid];
          var huapai = msg.huapais[seatid];
          var tmphuapai = {};
          for (var value in huapai) {
            var count = huapai[value];
            tmphuapai[parseInt(value)] = count;
          }
          this.players[seatid].huapais = tmphuapai;
          this.players[seatid].opcards = msg.opcards[seatid];
        } else {
          var myseatid = RoomMgr_1.default.getInstance().getMySeatId();
          this.myself = this.players[myseatid];
          this.jin = msg.jin;
          this.jin2 = msg.jin2;
          this.cardstate = msg.cardstate;
          this.zhuangseat = msg.zhuangseat;
          this.touzi1 = msg.touzi1;
          this.touzi2 = msg.touzi2;
          this.bShuangYou = msg.bShuangYou;
          this.bDanYou = msg.bDanYou;
          this.myself.youjinstate = msg.youjinstate;
          this.myself.enableYouJin = msg.enableYouJin;
          this.myself.b_finishYouJin = msg.b_finishYouJin;
          for (var seatid = 0; seatid < this.seatcount; ++seatid) {
            if (seatid == myseatid) this.players[seatid].initHandCard(msg.handcard); else {
              var len = msg.others["" + seatid];
              this.players[seatid].fillOthersCard(len);
            }
            this.players[seatid].cardpool = msg.cardpools[seatid];
            var huapai = msg.huapais[seatid];
            var tmphuapai = {};
            for (var value in huapai) {
              var count = huapai[value];
              tmphuapai[parseInt(value)] = count;
            }
            this.players[seatid].huapais = tmphuapai;
            this.players[seatid].opcards = msg.opcards[seatid];
          }
          MahjongResMgr_1.default.getInstance().clear();
          this.myself.setEvents(msg.events);
          this.myself.replaceJin();
          MahjongResMgr_1.default.getInstance().setJin(this.jin, this.jin2);
        }
      };
      MahjongLogic.prototype.tuoGuan = function(bvalue) {
        var msg = {
          deposit: bvalue
        };
        this.send_msg("room.roomHandler.deposit", msg);
      };
      MahjongLogic.prototype.resetData = function() {
        this.bSanYou = false;
        this.bShuangYou = false;
        this.bDanYou = false;
        this.win_seatid = null;
        this.op_tick = 0;
        this.cardstate = 0;
        this.chicards = {};
        this.cardwallindex = 1;
        this.touzi1 = 0;
        this.touzi2 = 0;
        this.curseat = 0;
        this.jin = 0;
        this.jin2 = 0;
        this.curcard = null;
        this.needtongbu = false;
        this.curplayer = null;
        this.zhuangseat = 0;
        this.eventseat = 0;
        this.cur_opseatid = null;
        for (var i = 0; i < this.seatcount; ++i) this.players[i].resetData();
        this.process = MahjongDef_1.MahjongDef.process_ready;
      };
      MahjongLogic.prototype.onOp = function(msg) {
        this.myself.clearEvent();
        var event = msg.event;
        var op = MahjongDef_1.MahjongDef.op_cfg[event];
        this.cur_opseatid = msg.opseatid;
        var opdic = {};
        opdic[MahjongDef_1.MahjongDef.op_chupai] = this.op_chupai;
        opdic[MahjongDef_1.MahjongDef.op_hu] = this.op_hu;
        opdic[MahjongDef_1.MahjongDef.op_qianggang_hu] = this.op_qianggang_hu;
        opdic[MahjongDef_1.MahjongDef.op_peng] = this.op_peng;
        opdic[MahjongDef_1.MahjongDef.op_gang] = this.op_gang;
        opdic[MahjongDef_1.MahjongDef.op_angang] = this.op_angang;
        opdic[MahjongDef_1.MahjongDef.op_chi] = this.op_chi;
        opdic[MahjongDef_1.MahjongDef.op_zimo] = this.op_zimo;
        opdic[MahjongDef_1.MahjongDef.op_bugang] = this.op_bugang;
        opdic[MahjongDef_1.MahjongDef.op_gaipai] = this.op_gaipai;
        opdic[MahjongDef_1.MahjongDef.op_qiangjinhu] = this.op_qiangjinhu;
        opdic[MahjongDef_1.MahjongDef.op_sijindao] = this.op_sijindao;
        opdic[MahjongDef_1.MahjongDef.op_wujindao] = this.op_wujindao;
        opdic[MahjongDef_1.MahjongDef.op_liujindao] = this.op_liujindao;
        opdic[MahjongDef_1.MahjongDef.op_tianhu] = this.op_tianhu;
        opdic[MahjongDef_1.MahjongDef.op_gaibaoqiangjin] = this.op_gaibaoqiangjin;
        var func = opdic[op];
        var hudic = [];
        hudic.push(MahjongDef_1.MahjongDef.op_sanjindao);
        hudic.push(MahjongDef_1.MahjongDef.op_danyou);
        hudic.push(MahjongDef_1.MahjongDef.op_shuangyou);
        hudic.push(MahjongDef_1.MahjongDef.op_sanyou);
        hudic.push(MahjongDef_1.MahjongDef.op_bazhanghua);
        hudic.push(MahjongDef_1.MahjongDef.op_hu);
        hudic.push(MahjongDef_1.MahjongDef.op_zimo);
        console.log("onOp=", msg);
        func && opdic[op].bind(this)(msg);
        if (hudic.contain(op)) for (var k in msg.handcards) {
          var handcard = msg.handcards[k];
          var seatid = parseInt(k);
          this.players[seatid].updateHandCard(handcard);
        }
      };
      MahjongLogic.prototype.op_qiangjinhu = function(msg) {};
      MahjongLogic.prototype.op_sijindao = function(msg) {};
      MahjongLogic.prototype.op_wujindao = function(msg) {};
      MahjongLogic.prototype.op_liujindao = function(msg) {};
      MahjongLogic.prototype.op_tianhu = function(msg) {};
      MahjongLogic.prototype.op_gaibaoqiangjin = function(msg) {};
      MahjongLogic.prototype.op_gaipai = function(msg) {
        var player = this.players[msg.opseatid];
        this.myself.clearEvent();
        player.removeCard(msg.card);
        player.putInPool(msg.card);
        player.sortCard();
        switch (msg.youjinstate) {
         case MahjongDef_1.MahjongDef.youjinstate_shuangyou:
          console.log("全局双游");
          this.bShuangYou = true;
          break;

         case MahjongDef_1.MahjongDef.youjinstate_danyou:
          console.log("全局单游");
          this.bDanYou = true;
        }
      };
      MahjongLogic.prototype.op_hu = function(msg) {
        var opplayer = this.players[msg.opseatid];
        opplayer.pushCard(this.curcard);
        this.curcard = null;
      };
      MahjongLogic.prototype.op_qianggang_hu = function(msg) {
        var opplayer = this.players[msg.opseatid];
        opplayer.pushCard(msg.bugangCard);
        this.curcard = null;
        console.log("抢杠胡了");
        var bugangPlayer = this.players[msg.bugangSeatId];
        bugangPlayer.recoverPeng(msg.bugangCard);
        bugangPlayer.sortCard();
      };
      MahjongLogic.prototype.op_zimo = function(msg) {
        var player = this.players[msg.opseatid];
      };
      MahjongLogic.prototype.op_gang = function(msg) {
        var player = this.players[msg.opseatid];
        this.curplayer.removeCardFromPool();
        player.removeCardByCount(this.curcard, 3);
        player.pushGang(this.curcard);
        this.curcard = null;
      };
      MahjongLogic.prototype.op_bugang = function(msg) {
        console.log("补杠了");
        var player = this.players[msg.opseatid];
        player.removeCardByCount(msg.card, 1);
        player.pushBuGang(msg.card);
        this.curcard = null;
      };
      MahjongLogic.prototype.op_angang = function(msg) {
        console.log("暗杠了");
        var player = this.players[msg.opseatid];
        player.removeCardByCount(msg.card, 4);
        player.pushAnGang(msg.card);
        this.curcard = null;
      };
      MahjongLogic.prototype.op_peng = function(msg) {
        var player = this.players[msg.opseatid];
        player.removeCardByCount(this.curcard, 2);
        this.curplayer.removeCardFromPool();
        player.pushPeng(this.curcard);
        this.curcard = null;
      };
      MahjongLogic.prototype.op_chi = function(msg) {
        console.log(msg);
        var player = this.players[msg.opseatid];
        this.curplayer.removeCardFromPool();
        var cards = player.getChiCards(msg.chiindex);
        player.removeCards(cards);
        player.pushChi(msg.chiindex, cards);
        this.curcard = null;
      };
      MahjongLogic.prototype.op_chupai = function(msg) {
        this.curcard = msg.card;
        this.curplayer.putInPool(msg.card);
        this.curplayer.removeCard(msg.card);
        this.curplayer.sortCard();
        switch (msg.youjinstate) {
         case MahjongDef_1.MahjongDef.youjinstate_shuangyou:
          this.curplayer.setYouJinState(MahjongDef_1.MahjongDef.youjinstate_shuangyou);
          this.bShuangYou = true;
          break;

         case MahjongDef_1.MahjongDef.youjinstate_sanyou:
          this.curplayer.setYouJinState(MahjongDef_1.MahjongDef.youjinstate_sanyou);
          this.bSanYou = true;
        }
      };
      MahjongLogic.prototype.onEvent = function(msg) {
        console.log("收到事件消息=", msg);
        this.myself.setEvents(msg.events);
      };
      MahjongLogic.prototype.onProcess = function(msg) {
        console.log("收到process=", msg);
        this.process = msg.process;
        this.process == MahjongDef_1.MahjongDef.process_dingzhuang ? this.process_dingzhuang(msg) : this.process == MahjongDef_1.MahjongDef.process_fapai ? this.process_fapai(msg) : this.process == MahjongDef_1.MahjongDef.process_buhua ? this.process_buhua(msg) : this.process == MahjongDef_1.MahjongDef.process_kaijin ? this.process_kaijin(msg) : this.process == MahjongDef_1.MahjongDef.process_ready ? this.process_ready(msg) : this.process == MahjongDef_1.MahjongDef.process_loop ? this.process_loop() : this.process == MahjongDef_1.MahjongDef.process_haidilaoyue && this.process_haidilaoyue(msg);
      };
      MahjongLogic.prototype.process_haidilaoyue = function(msg) {
        this.haidilaoyueInfo = msg.haidilaoyueInfo;
        console.log("this.haidilaoyueInfo", msg);
      };
      MahjongLogic.prototype.process_loop = function() {
        this.myself.sortCard();
      };
      MahjongLogic.prototype.http_reqSettle = function(msg) {
        var settle = JSON.parse(msg.settle);
        this.win_seatid = settle.win_seatid;
        for (var k in settle.handcards) {
          var handcard = settle.handcards[k];
          var seatid = parseInt(k);
          this.players[seatid].updateHandCard(handcard);
        }
        console.log("settle=", msg.settle);
        this.roundSettle = settle;
      };
      MahjongLogic.prototype.process_ready = function(msg) {
        this.resetData();
        if (!RoomMgr_1.default.getInstance().isFirstRound()) {
          this.myself = this.players[RoomMgr_1.default.getInstance().myseatid];
          MahjongResMgr_1.default.getInstance().clear();
          this.resetData();
          var bunchInfo = RoomMgr_1.default.getInstance().getBunchInfo();
          this.zhuangseat = bunchInfo.zhuangseat;
          this.curseat = this.zhuangseat;
          this.curplayer = this.players[this.curseat];
          console.log("第二局了=", this.zhuangseat, this.curseat, this.curplayer);
        }
      };
      MahjongLogic.prototype.process_dingzhuang = function(msg) {
        this.myself = this.players[RoomMgr_1.default.getInstance().myseatid];
        MahjongResMgr_1.default.getInstance().clear();
        this.resetData();
        this.touzi1 = msg.touzi1;
        this.touzi2 = msg.touzi2;
        this.zhuangseat = msg.zhuangseat;
        this.curseat = msg.zhuangseat;
        this.curplayer = this.players[this.curseat];
      };
      MahjongLogic.prototype.process_fapai = function(msg) {
        this.cardwallindex = msg.cardwallindex;
        this.cardcount = msg.cardcount;
        var myseatid = RoomMgr_1.default.getInstance().getMySeatId();
        if (this.bViewMode) {
          this.myself = this.players[myseatid];
          this.zhuangseat = msg.zhuangseat;
          this.curseat = msg.zhuangseat;
          this.curplayer = this.players[this.curseat];
          this.lianzhuang = msg.lianzhuang;
          this.cardcount = msg.cardcount;
          for (var seatid = 0; seatid < this.seatcount; ++seatid) this.players[seatid].initHandCard(msg.handcards[seatid]);
        } else for (var seatid = 0; seatid < this.seatcount; ++seatid) if (seatid == myseatid) this.players[seatid].initHandCard(msg.handcard); else {
          var len = msg.others["" + seatid];
          this.players[seatid].fillOthersCard(len);
        }
      };
      MahjongLogic.prototype.process_buhua = function(msg) {
        this.cardwallindex = msg.cardwallindex;
        console.log("补花");
        for (var seatid = 0; seatid < msg.huapaiarr.length; ++seatid) this.players[seatid].buHua(msg.huapaiarr[seatid], msg.bupaiarr[seatid]);
      };
      MahjongLogic.prototype.onSeatChange = function(msg) {
        this.curseat = msg.curseat;
        this.curcard = msg.card;
        this.curplayer = this.players[this.curseat];
        if (msg.needbupai) {
          if (msg.huaarr) for (var i = 0; i < msg.huaarr.length; ++i) this.curplayer.putInHua(msg.huaarr[i]);
          this.cardwallindex = msg.cardwallindex;
          this.curplayer.pushCard(msg.card);
        }
      };
      MahjongLogic.prototype.process_kaijin = function(msg) {
        this.cardwallindex = msg.cardwallindex;
        this.jin = msg.jin;
        this.jin2 = msg.jin2;
        this.mahjongcards.setJin(this.jin, this.jin2);
        this.myself.sortCard();
        this.myself.replaceJin();
        console.log("哈哈哈=", this.jin, this.jin2);
        MahjongResMgr_1.default.getInstance().setJin(this.jin, this.jin2);
      };
      MahjongLogic.prototype.playerOp = function(event, data) {
        console.log("send playerOp event=", event, data);
        console.log("this.curplayer=", this.curplayer, "this.curseat=", this.curseat);
        var msg = {
          event: event
        };
        var op = MahjongDef_1.MahjongDef.op_cfg[event];
        op == MahjongDef_1.MahjongDef.op_chupai && (msg["data"] = this.curplayer.getCard(data));
        op == MahjongDef_1.MahjongDef.op_gaipai ? msg["data"] = this.curplayer.getCard(data) : op == MahjongDef_1.MahjongDef.op_chi ? msg["data"] = data : op == MahjongDef_1.MahjongDef.op_angang ? msg["data"] = data : op == MahjongDef_1.MahjongDef.op_bugang && (msg["data"] = data);
        this.send_msg("room.roomHandler.playerOp", msg);
      };
      MahjongLogic.prototype.playerCancel = function() {
        this.send_msg("room.roomHandler.playerCancel", {});
      };
      MahjongLogic.prototype.checkCardState = function(msg) {
        var cardchanged = msg.cardchanged;
        var cardstate = msg.cardstate;
        if (cardchanged) {
          if (cardstate - this.cardstate != 1) {
            console.log("牌状态错位");
            return false;
          }
        } else if (cardstate != this.cardstate) {
          console.log("牌状态错位");
          return false;
        }
        this.cardstate = cardstate;
        return true;
      };
      MahjongLogic.prototype.gmOp = function(msg) {
        this.send_msg("room.roomHandler.gmOp", msg);
      };
      MahjongLogic.prototype.gmReq = function(msg) {
        this.send_msg("room.roomHandler.gmReq", msg);
      };
      MahjongLogic.prototype.onGmOp = function(msg) {
        if (!msg) return;
        var optype = msg.optype;
        var opseatid = msg.opseatid;
        var data = msg.data;
        var src = data.src;
        var dest = data.dest;
        var target = data.target;
        console.log("logic onGmOp msg=", msg);
        switch (optype) {
         case MahjongDef_1.MahjongDef.gmop_changecard:
          opseatid == RoomMgr_1.default.getInstance().getMySeatId() && this.players[opseatid].switchCard(src, dest);
          target == RoomMgr_1.default.getInstance().getMySeatId() && this.players[target].switchCard(dest, src);
        }
      };
      MahjongLogic.prototype.getRecordFrag = function() {
        var handcards = [];
        var opcards = [];
        var huapais = [];
        var cardpools = [];
        for (var seatId = 0; seatId < this.seatcount; ++seatId) {
          handcards[seatId] = this.players[seatId].handcard;
          opcards[seatId] = this.players[seatId].opcards;
          huapais[seatId] = this.players[seatId].huapais;
          cardpools[seatId] = this.players[seatId].cardpool;
        }
        var fragData = {
          handcards: handcards,
          opcards: opcards,
          huapais: huapais,
          cardpools: cardpools,
          curseat: this.curseat,
          cardcount: this.cardcount,
          cardwallindex: this.cardwallindex,
          op_tick: this.op_tick,
          curcard: this.curcard
        };
        return JSON.stringify(fragData);
      };
      return MahjongLogic;
    }(BaseMgr_1.default);
    exports.default = MahjongLogic;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseMgr": "BaseMgr",
    "./MahjongDef": "MahjongDef",
    "./MahjongResMgr": "MahjongResMgr"
  } ],
  MahjongMyStateTipCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3dc6eTTSxtEwKZwMrbTlsHy", "MahjongMyStateTipCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var MahjongDef_1 = require("./MahjongDef");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.seatid = 0;
        _this.logicseatid = null;
        _this.mySeatId = null;
        _this.myself = null;
        _this.mahjongResMgr = RoomMgr_1.default.getInstance().getResMgr();
        _this.mahjongLogic = RoomMgr_1.default.getInstance().getLogic();
        _this.mahjongDef = RoomMgr_1.default.getInstance().getDef();
        _this.mahjongAudio = RoomMgr_1.default.getInstance().getAudio();
        _this.mahjongCards = _this.mahjongLogic.getInstance().getMahjongCards();
        return _this;
      }
      Model.prototype.clear = function() {};
      Model.prototype.updateLogicId = function() {
        this.logicseatid = RoomMgr_1.default.getInstance().getLogicSeatId(this.seatid);
        if (null == this.logicseatid) return;
        this.mySeatId = RoomMgr_1.default.getInstance().getMySeatId();
        this.myself = this.mahjongLogic.getInstance().players[this.logicseatid];
      };
      Model.prototype.recover = function() {};
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          panel_tip: null,
          lbl_tip: null,
          panel_youjinzhong: null,
          panel_shuangyouzhong: null,
          img_readyyoujin: null,
          img_readyshuangyou: null,
          panel_genzhuang: null,
          lbl_genzhuangtip: null,
          img_guo: null,
          panel_sanyouzhong: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.panel_tip = ctrl.panel_tip;
        this.ui.lbl_tip = ctrl.lbl_tip;
        this.ui.panel_youjinzhong = ctrl.panel_youjinzhong;
        this.ui.panel_shuangyouzhong = ctrl.panel_shuangyouzhong;
        this.ui.img_readyyoujin = ctrl.img_readyyoujin;
        this.ui.img_readyshuangyou = ctrl.img_readyshuangyou;
        this.ui.panel_genzhuang = ctrl.panel_genzhuang;
        this.ui.lbl_genzhuangtip = ctrl.lbl_genzhuangtip;
        this.ui.img_guo = ctrl.img_guo;
        this.ui.panel_sanyouzhong = ctrl.panel_sanyouzhong;
        this.clear();
      };
      View.prototype.clear = function() {
        console.log("全部隐藏了");
        this.ui.panel_tip.active = false;
        this.ui.panel_youjinzhong.active = false;
        this.ui.panel_shuangyouzhong.active = false;
        this.ui.img_readyyoujin.active = false;
        this.ui.img_readyshuangyou.active = false;
        this.ui.panel_genzhuang.active = false;
        this.ui.img_guo.active = false;
        this.ui.panel_sanyouzhong.active = false;
      };
      View.prototype.showOtherShuangYou = function() {
        this.ui.panel_genzhuang.active = true;
        this.ui.panel_genzhuang.getComponent(cc.Animation).playOnLoad = false;
        this.ui.lbl_genzhuangtip.string = "有人要双游了,请摸最后一张牌";
      };
      View.prototype.showOtherDanYou = function() {
        this.ui.panel_genzhuang.active = true;
        this.ui.panel_genzhuang.getComponent(cc.Animation).playOnLoad = false;
        this.ui.lbl_genzhuangtip.string = "有人要单游了,请摸最后一张牌";
      };
      View.prototype.showShuangYouZhong = function() {
        this.ui.panel_shuangyouzhong.active = true;
      };
      View.prototype.showSanYouZhong = function() {
        this.ui.panel_sanyouzhong.active = true;
      };
      View.prototype.showDanYouZhong = function() {
        this.ui.panel_youjinzhong.active = true;
      };
      View.prototype.showReadyYouJing = function() {
        this.ui.img_readyyoujin.active = true;
        this.ui.img_readyyoujin.getChildByName("effect").getComponent("cc.Animation").on("finished", this.onReadyYoujinFinished, this);
      };
      View.prototype.onReadyYoujinFinished = function() {
        this.ui.img_readyyoujin.getChildByName("effect_xh").getComponent("cc.Animation").play();
      };
      View.prototype.showReadyShuangYou = function() {
        this.ui.img_readyshuangyou.active = true;
        this.ui.img_readyshuangyou.getChildByName("effect").getComponent("cc.Animation").on("finished", this.onReadyShuangyouFinished, this);
      };
      View.prototype.onReadyShuangyouFinished = function() {
        this.ui.img_readyshuangyou.getChildByName("effect_xh").getComponent("cc.Animation").play();
      };
      View.prototype.showQingChuPai = function() {
        this.ui.panel_tip.active = true;
        this.ui.lbl_tip.string = "轮到你打牌了";
      };
      View.prototype.showGuo = function() {
        this.ui.img_guo.active = true;
      };
      View.prototype.showGenZhuang = function(data) {
        this.ui.panel_genzhuang.active = true;
        var showStr = "";
        var difan = data.shui * data.count;
        console.log("showGenZhuang", data);
        showStr = 1 == data.count ? data.count + "跟庄,庄家赔付其他三家各" + difan + "底" : data.count + "连跟庄,庄家赔付其他三家各" + difan + "底";
        13 == this.model.mahjongCards.getCardCount() && (showStr = data.count + "分饼：庄家赔付闲家每位" + data.score + "分");
        this.ui.lbl_genzhuangtip.string = showStr;
        this.ui.panel_genzhuang.getComponent(cc.Animation).play();
      };
      View.prototype.vibratePhone = function() {
        cc.sys.isNative && G_PLATFORM.moblieVibrator();
      };
      return View;
    }(BaseView_1.default);
    var MahjongMyStateTipCtrl = function(_super) {
      __extends(MahjongMyStateTipCtrl, _super);
      function MahjongMyStateTipCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.panel_tip = null;
        _this.img_readyyoujin = null;
        _this.img_readyshuangyou = null;
        _this.lbl_tip = null;
        _this.panel_youjinzhong = null;
        _this.panel_shuangyouzhong = null;
        _this.panel_sanyouzhong = null;
        _this.lbl_genzhuangtip = null;
        _this.panel_genzhuang = null;
        _this.img_guo = null;
        _this.timer_delay = null;
        return _this;
      }
      MahjongMyStateTipCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      MahjongMyStateTipCtrl.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        this.clearLaterChuPaiTimer();
      };
      MahjongMyStateTipCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onEnterRoom: this.onEnterRoom,
          onLeaveRoom: this.onLeaveRoom,
          onSyncData: this.onSyncData,
          onProcess: this.onProcess,
          onOp: this.onOp,
          onSeatChange: this.onSeatChange,
          onEvent: this.onEvent,
          onGameFinished: this.onGameFinished
        };
      };
      MahjongMyStateTipCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          usersUpdated: this.usersUpdated
        };
      };
      MahjongMyStateTipCtrl.prototype.connectUi = function() {};
      MahjongMyStateTipCtrl.prototype.onSeatChange = function(msg) {
        if (null == this.model.logicseatid) return;
        this.clearLaterChuPaiTimer();
        if (this.model.mySeatId != this.model.mahjongLogic.getInstance().curseat) return;
        if (null != msg.needpass) {
          console.log("进入全局什么游了", this.model.mahjongLogic.getInstance().isShuangYou(), this.model.mahjongLogic.getInstance().isDanYou());
          if (this.model.mahjongLogic.getInstance().isShuangYou() && 13 != this.model.mahjongCards.getCardCount()) {
            this.view.clear();
            this.view.showOtherShuangYou();
            this.view.showGuo();
          } else if (this.model.mahjongLogic.getInstance().isDanYou()) {
            this.view.clear();
            this.view.showOtherDanYou();
            this.view.showGuo();
          }
        }
      };
      MahjongMyStateTipCtrl.prototype.onOp = function(msg) {
        if (null == this.model.logicseatid) return;
        this.clearLaterChuPaiTimer();
        if (msg.opseatid != this.model.logicseatid) {
          if (msg.genzhuang) {
            console.log("showGenZhuang1", msg);
            this.view.showGenZhuang(msg.genzhuang);
          }
          return;
        }
        var op = MahjongDef_1.MahjongDef.op_cfg[msg.event];
        switch (op) {
         case MahjongDef_1.MahjongDef.op_chupai:
          this.op_chupai(msg);
          break;

         case MahjongDef_1.MahjongDef.op_gaipai:
          this.op_gapai(msg);
          break;

         case MahjongDef_1.MahjongDef.op_danyou:
         case MahjongDef_1.MahjongDef.op_shuangyou:
         case MahjongDef_1.MahjongDef.op_sanyou:
          this.view.clear();
        }
      };
      MahjongMyStateTipCtrl.prototype.op_chupai = function(msg) {
        if (null == this.model.logicseatid) return;
        this.view.clear();
        msg.genzhuang && this.view.showGenZhuang(msg.genzhuang);
        switch (msg.youjinstate) {
         case MahjongDef_1.MahjongDef.youjinstate_sanyou:
          this.view.showSanYouZhong();
          break;

         case MahjongDef_1.MahjongDef.youjinstate_shuangyou:
          this.view.showShuangYouZhong();
          break;

         case MahjongDef_1.MahjongDef.youjinstate_danyou:
          this.view.showDanYouZhong();
        }
      };
      MahjongMyStateTipCtrl.prototype.onGameFinished = function() {
        this.view.clear();
      };
      MahjongMyStateTipCtrl.prototype.clearLaterChuPaiTimer = function() {
        if (null != this.timer_delay) {
          clearTimeout(this.timer_delay);
          this.timer_delay = null;
        }
      };
      MahjongMyStateTipCtrl.prototype.timeout = function() {
        this.view.showQingChuPai();
        this.view.vibratePhone();
      };
      MahjongMyStateTipCtrl.prototype.laterShowQingChuPai = function() {
        this.timer_delay = setTimeout(this.timeout.bind(this), 1e4);
      };
      MahjongMyStateTipCtrl.prototype.onEvent = function(msg) {
        if (null == this.model.logicseatid) return;
        this.clearLaterChuPaiTimer();
        console.log("this.model.myself.state=", this.model.myself.state);
        switch (this.model.myself.state) {
         case MahjongDef_1.MahjongDef.state_chupai:
          this.view.clear();
          this.laterShowQingChuPai();
          break;

         case MahjongDef_1.MahjongDef.state_gaipai:
          if (this.model.myself.readyForShuangYou()) {
            this.view.clear();
            this.view.showReadyShuangYou();
          } else if (this.model.myself.readyForDanYou()) {
            this.view.clear();
            this.view.showReadyYouJing();
          }
        }
      };
      MahjongMyStateTipCtrl.prototype.op_gapai = function(msg) {
        if (msg.opseatid != this.model.logicseatid) return;
        if (this.model.mahjongLogic.getInstance().bSanYou) {
          this.view.clear();
          this.view.showSanYouZhong();
        } else if (this.model.mahjongLogic.getInstance().isShuangYou()) {
          this.view.clear();
          this.view.showShuangYouZhong();
        } else if (this.model.mahjongLogic.getInstance().isDanYou()) {
          this.view.clear();
          this.view.showDanYouZhong();
        }
      };
      MahjongMyStateTipCtrl.prototype.start = function() {};
      MahjongMyStateTipCtrl.prototype.onEnterRoom = function() {};
      MahjongMyStateTipCtrl.prototype.onLeaveRoom = function() {};
      MahjongMyStateTipCtrl.prototype.onSyncData = function(msg) {
        if (null == this.model.logicseatid) return;
        this.model.recover();
        this.onEvent(null);
      };
      MahjongMyStateTipCtrl.prototype.onProcess = function(msg) {
        if (null == this.model.logicseatid) return;
      };
      MahjongMyStateTipCtrl.prototype.usersUpdated = function() {
        this.model.clear();
        this.view.clear();
        this.model.updateLogicId();
      };
      __decorate([ property({
        tooltip: "其他人游金",
        type: cc.Node
      }) ], MahjongMyStateTipCtrl.prototype, "panel_tip", void 0);
      __decorate([ property({
        tooltip: "准备单游",
        type: cc.Node
      }) ], MahjongMyStateTipCtrl.prototype, "img_readyyoujin", void 0);
      __decorate([ property({
        tooltip: "准备双游",
        type: cc.Node
      }) ], MahjongMyStateTipCtrl.prototype, "img_readyshuangyou", void 0);
      __decorate([ property({
        tooltip: "游金提示文字",
        type: cc.Label
      }) ], MahjongMyStateTipCtrl.prototype, "lbl_tip", void 0);
      __decorate([ property({
        tooltip: "准备游金",
        type: cc.Node
      }) ], MahjongMyStateTipCtrl.prototype, "panel_youjinzhong", void 0);
      __decorate([ property({
        tooltip: "准备双游",
        type: cc.Node
      }) ], MahjongMyStateTipCtrl.prototype, "panel_shuangyouzhong", void 0);
      __decorate([ property({
        tooltip: "准备三游",
        type: cc.Node
      }) ], MahjongMyStateTipCtrl.prototype, "panel_sanyouzhong", void 0);
      __decorate([ property({
        tooltip: "跟庄提示文字",
        type: cc.Label
      }) ], MahjongMyStateTipCtrl.prototype, "lbl_genzhuangtip", void 0);
      __decorate([ property({
        tooltip: "跟庄",
        type: cc.Node
      }) ], MahjongMyStateTipCtrl.prototype, "panel_genzhuang", void 0);
      __decorate([ property({
        tooltip: "过",
        type: cc.Node
      }) ], MahjongMyStateTipCtrl.prototype, "img_guo", void 0);
      MahjongMyStateTipCtrl = __decorate([ ccclass ], MahjongMyStateTipCtrl);
      return MahjongMyStateTipCtrl;
    }(BaseCtrl_1.default);
    exports.default = MahjongMyStateTipCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "./MahjongDef": "MahjongDef"
  } ],
  MahjongOpAniCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6b10dJHHAdC9ZBHOImGsd+6", "MahjongOpAniCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var MahjongDef_1 = require("./MahjongDef");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.mahjongResMgr = RoomMgr_1.default.getInstance().getResMgr();
        _this.mahjongLogic = RoomMgr_1.default.getInstance().getLogic();
        _this.mahjongDef = RoomMgr_1.default.getInstance().getDef();
        _this.mahjongAudio = RoomMgr_1.default.getInstance().getAudio();
        _this.mahjongCards = _this.mahjongLogic.getInstance().getMahjongCards();
        return _this;
      }
      Model.prototype.getHuType = function(seatId) {
        var hutype = null;
        var player = this.mahjongLogic.getInstance().players[seatId];
        var pai = player.handcard.concat();
        pai.sort();
        var yise = player.getyise();
        var huinfo = this.mahjongCards.IsHu(pai, yise);
        if (!huinfo) return null;
        return huinfo.hutype;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.node_bg = null;
        _this.node_anim = null;
        _this.ui = {
          ligtnEffects: [],
          hubaozhaeffect: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        if (this.node.getChildByName("bg") && this.node.getChildByName("bg").getChildByName("sysy")) {
          this.ui.ligtnEffects.push(this.node.getChildByName("bg").getChildByName("sysy").getChildByName("effect0"));
          this.ui.ligtnEffects.push(this.node.getChildByName("bg").getChildByName("sysy").getChildByName("effect1"));
          this.ui.ligtnEffects.push(this.node.getChildByName("bg").getChildByName("sysy").getChildByName("effect2"));
          this.ui.ligtnEffects.push(this.node.getChildByName("bg").getChildByName("sysy").getChildByName("effect3"));
        }
        if (13 == this.model.mahjongCards.getCardCount() && this.node.getChildByName("bg") && this.node.getChildByName("bg").getChildByName("hubaozha")) {
          this.ui.hubaozhaeffect = this.node.getChildByName("bg").getChildByName("hubaozha");
          var hubaozhaPos = this.ui.hubaozhaeffect.getPosition();
          this.ui.hubaozhaeffect.setPosition(cc.p(hubaozhaPos.x - 100, hubaozhaPos.y));
        }
      };
      View.prototype.runAnimByIndex = function(index) {
        var _this = this;
        console.log("runAnimByIndex");
        var anim = this.node.getComponent(cc.Animation).getClips()[index];
        this.node.getComponent(cc.Animation).play(anim.name);
        this.node.getComponent(cc.Animation).on("play", function() {
          _this.node.active = true;
        }, this);
        this.node.getComponent(cc.Animation).on("finished", function() {
          _this.node.active = false;
        }, this);
      };
      View.prototype.runChuPai = function(seatId) {
        if (0 == seatId) return;
      };
      return View;
    }(BaseView_1.default);
    var MahjongOpAniCtrl = function(_super) {
      __extends(MahjongOpAniCtrl, _super);
      function MahjongOpAniCtrl() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      MahjongOpAniCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      MahjongOpAniCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onOp: this.onOp,
          onSeatChange: this.onSeatChange,
          onProcess: this.onProcess
        };
      };
      MahjongOpAniCtrl.prototype.defineGlobalEvents = function() {};
      MahjongOpAniCtrl.prototype.connectUi = function() {};
      MahjongOpAniCtrl.prototype.start = function() {};
      MahjongOpAniCtrl.prototype.onOp = function(msg) {
        var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(msg.opseatid);
        MahjongDef_1.MahjongDef.op_cfg[msg.event] == MahjongDef_1.MahjongDef.op_chupai && this.view.runChuPai(viewSeatId);
        if (this.node.name != "op_anim" + viewSeatId) return;
        console.log(this.node.name + "==op_anim" + viewSeatId);
        var op = MahjongDef_1.MahjongDef.op_cfg[msg.event];
        console.log("hutime", msg.event);
        console.log("hutime", op);
        var index = 0;
        switch (op) {
         case MahjongDef_1.MahjongDef.op_chi:
          index = 0;
          this.view.runAnimByIndex(index);
          break;

         case MahjongDef_1.MahjongDef.op_peng:
          index = 1;
          this.view.runAnimByIndex(index);
          break;

         case MahjongDef_1.MahjongDef.op_gang:
         case MahjongDef_1.MahjongDef.op_angang:
          index = 2;
          this.view.runAnimByIndex(index);
          break;

         case MahjongDef_1.MahjongDef.op_hu:
          index = 3;
          var hutype = this.model.getHuType(msg.opseatid);
          switch (hutype) {
           case MahjongDef_1.MahjongDef.hutype_hunyise:
            index = 21;
            break;

           case MahjongDef_1.MahjongDef.hutype_qingyise:
            index = 20;
          }
          this.view.runAnimByIndex(index);
          break;

         case MahjongDef_1.MahjongDef.op_zimo:
          var hutype = this.model.getHuType(msg.opseatid);
          switch (hutype) {
           case MahjongDef_1.MahjongDef.hutype_131:
            index = 15;
            break;

           case MahjongDef_1.MahjongDef.hutype_hunyise:
            index = 21;
            break;

           case MahjongDef_1.MahjongDef.hutype_qingyise:
            index = 20;
            break;

           default:
            index = 4;
          }
          this.view.runAnimByIndex(index);
          break;

         case MahjongDef_1.MahjongDef.op_sanjindao:
          this.showCertainNumEffect(msg);
          index = 5;
          this.view.runAnimByIndex(index);
          break;

         case MahjongDef_1.MahjongDef.op_qianggang_hu:
          index = 6;
          this.view.runAnimByIndex(index);
          break;

         case MahjongDef_1.MahjongDef.op_danyou:
          this.showCertainNumEffect(msg);
          index = 7;
          this.view.runAnimByIndex(index);
          break;

         case MahjongDef_1.MahjongDef.op_shuangyou:
          this.showCertainNumEffect(msg);
          index = 8;
          this.view.runAnimByIndex(index);
          break;

         case MahjongDef_1.MahjongDef.op_sanyou:
          this.showCertainNumEffect(msg);
          index = 9;
          this.view.runAnimByIndex(index);
          break;

         case MahjongDef_1.MahjongDef.op_bazhanghua:
          this.showCertainNumEffect(msg);
          index = 10;
          this.view.runAnimByIndex(index);
          break;

         case MahjongDef_1.MahjongDef.op_gaibaoqiangjin:
          index = 13;
          this.view.runAnimByIndex(index);
          break;

         case MahjongDef_1.MahjongDef.op_qiangjinhu:
          index = 14;
          this.view.runAnimByIndex(index);
          break;

         case MahjongDef_1.MahjongDef.op_tianhu:
          index = 16;
          this.view.runAnimByIndex(index);
          break;

         case MahjongDef_1.MahjongDef.op_sijindao:
          this.showCertainNumEffect(msg);
          index = 17;
          this.view.runAnimByIndex(index);
          break;

         case MahjongDef_1.MahjongDef.op_wujindao:
          this.showCertainNumEffect(msg);
          index = 18;
          this.view.runAnimByIndex(index);
          break;

         case MahjongDef_1.MahjongDef.op_liujindao:
          this.showCertainNumEffect(msg);
          index = 19;
          this.view.runAnimByIndex(index);
          break;

         default:
          console.log("#error op_anim op is error");
        }
      };
      MahjongOpAniCtrl.prototype.showCertainNumEffect = function(msg) {
        console.log("mahjongOpani", msg, Math.ceil(this.model.mahjongLogic.getInstance().players[msg.opseatid].handcard.length / 5));
        var maxGroupNum = this.model.mahjongLogic.getInstance().players[msg.opseatid].handcard.length / 5;
        for (var i = 0; i < 4; ++i) this.ui.ligtnEffects[i].active = i <= maxGroupNum;
      };
      MahjongOpAniCtrl.prototype.onSeatChange = function(msg) {
        console.log("onSeatChange", msg);
        var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(msg.curseat);
        if (this.node.name != "op_anim" + viewSeatId) return;
        console.log("onProcess", msg.process, MahjongDef_1.MahjongDef.process_buhua);
        msg.needbupai && msg.huaarr.length > 0 && this.view.runAnimByIndex(11);
      };
      MahjongOpAniCtrl.prototype.onProcess = function(msg) {
        if (msg.process == MahjongDef_1.MahjongDef.process_buhua) {
          var viewSeatId = this.node.name.substring(this.node.name.length - 1, this.node.name.length);
          var logicseatId = RoomMgr_1.default.getInstance().getLogicSeatId(viewSeatId);
          if (void 0 == logicseatId || null == logicseatId) return;
          console.log("logicseatId", viewSeatId, logicseatId, this.node.name);
          msg.huapaiarr[parseInt(logicseatId)].length > 0 && this.view.runAnimByIndex(11);
        }
      };
      MahjongOpAniCtrl = __decorate([ ccclass ], MahjongOpAniCtrl);
      return MahjongOpAniCtrl;
    }(BaseCtrl_1.default);
    exports.default = MahjongOpAniCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "./MahjongDef": "MahjongDef"
  } ],
  MahjongOtherStateTipCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "79b16hELxBH7pEnJS1/SZl/", "MahjongOtherStateTipCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var MahjongDef_1 = require("./MahjongDef");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.seatid = null;
        _this.logicseatid = null;
        _this.player = null;
        _this.mahjongResMgr = RoomMgr_1.default.getInstance().getResMgr();
        _this.mahjongLogic = RoomMgr_1.default.getInstance().getLogic();
        _this.mahjongDef = RoomMgr_1.default.getInstance().getDef();
        _this.mahjongAudio = RoomMgr_1.default.getInstance().getAudio();
        _this.mahjongCards = _this.mahjongLogic.getInstance().getMahjongCards();
        return _this;
      }
      Model.prototype.initSeat = function(id) {
        this.seatid = id;
      };
      Model.prototype.clear = function() {};
      Model.prototype.updateLogicId = function() {
        this.logicseatid = RoomMgr_1.default.getInstance().getLogicSeatId(this.seatid);
        if (null == this.logicseatid) return;
        this.player = this.mahjongLogic.getInstance().players[this.logicseatid];
      };
      Model.prototype.recover = function() {};
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          img_readyyoujin: ctrl.img_readyyoujin,
          img_readyshuangyou: ctrl.img_readyshuangyou,
          img_guo: ctrl.img_guo
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.clear();
      };
      View.prototype.clear = function() {
        this.ui.img_readyyoujin.active = false;
        this.ui.img_readyshuangyou.active = false;
        this.ui.img_guo.active = false;
      };
      View.prototype.showShuangYou = function() {
        this.ui.img_readyshuangyou.active = true;
        this.ui.img_readyshuangyou.getChildByName("effect").getComponent("cc.Animation").on("finished", this.onReadyShuangyouFinished, this);
      };
      View.prototype.onReadyShuangyouFinished = function() {
        this.ui.img_readyshuangyou.getChildByName("effect_xh").getComponent("cc.Animation").play();
      };
      View.prototype.showDanYou = function() {
        console.log("显示单游");
        this.ui.img_readyyoujin.active = true;
        this.ui.img_readyyoujin.getChildByName("effect").getComponent("cc.Animation").on("finished", this.onReadyYoujinFinished, this);
      };
      View.prototype.onReadyYoujinFinished = function() {
        this.ui.img_readyyoujin.getChildByName("effect_xh").getComponent("cc.Animation").play();
      };
      View.prototype.showGuo = function() {
        this.ui.img_guo.active = true;
      };
      return View;
    }(BaseView_1.default);
    var MahjongOtherStateTipCtrl = function(_super) {
      __extends(MahjongOtherStateTipCtrl, _super);
      function MahjongOtherStateTipCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.img_readyyoujin = null;
        _this.img_readyshuangyou = null;
        _this.img_guo = null;
        _this.seatId = 0;
        _this.timer_delay = null;
        return _this;
      }
      MahjongOtherStateTipCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.model.initSeat(this.seatId);
      };
      MahjongOtherStateTipCtrl.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        this.clearTimer();
      };
      MahjongOtherStateTipCtrl.prototype.clearTimer = function() {
        if (null != this.timer_delay) {
          clearTimeout(this.timer_delay);
          this.timer_delay = null;
        }
      };
      MahjongOtherStateTipCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onEnterRoom: this.onEnterRoom,
          onLeaveRoom: this.onLeaveRoom,
          onSyncData: this.onSyncData,
          onProcess: this.onProcess,
          onOp: this.onOp,
          onGameFinished: this.onGameFinished,
          onSeatChange: this.onSeatChange
        };
      };
      MahjongOtherStateTipCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          usersUpdated: this.usersUpdated
        };
      };
      MahjongOtherStateTipCtrl.prototype.onGameFinished = function() {
        this.view.clear();
      };
      MahjongOtherStateTipCtrl.prototype.onSeatChange = function(msg) {
        if (this.model.logicseatid != this.model.mahjongLogic.getInstance().curseat) return;
        null != msg.needpass && this.view.showGuo();
      };
      MahjongOtherStateTipCtrl.prototype.timeout = function() {
        this.view.showGuo();
      };
      MahjongOtherStateTipCtrl.prototype.delayShowGuo = function() {
        this.timer_delay = setTimeout(this.timeout.bind(this), 1);
      };
      MahjongOtherStateTipCtrl.prototype.connectUi = function() {};
      MahjongOtherStateTipCtrl.prototype.start = function() {};
      MahjongOtherStateTipCtrl.prototype.onEnterRoom = function() {};
      MahjongOtherStateTipCtrl.prototype.onLeaveRoom = function() {
        this.model.clear();
        this.view.clear();
      };
      MahjongOtherStateTipCtrl.prototype.onSyncData = function(msg) {
        if (null == this.model.logicseatid) return;
        this.model.recover();
      };
      MahjongOtherStateTipCtrl.prototype.onOp = function(msg) {
        if (msg.opseatid != this.model.logicseatid) return;
        var op = MahjongDef_1.MahjongDef.op_cfg[msg.event];
        switch (op) {
         case MahjongDef_1.MahjongDef.op_gaipai:
          this.op_gaipai(msg);
          break;

         case MahjongDef_1.MahjongDef.op_danyou:
         case MahjongDef_1.MahjongDef.op_shuangyou:
         case MahjongDef_1.MahjongDef.op_sanyou:
          this.view.clear();
          break;

         case MahjongDef_1.MahjongDef.op_chupai:
          this.view.clear();
          this.op_chupai(msg);
        }
      };
      MahjongOtherStateTipCtrl.prototype.op_chupai = function(msg) {
        if (this.model.mahjongLogic.getInstance().isShuangYou() && 13 != this.model.mahjongCards.getCardCount()) {
          this.view.clear();
          console.log("othter准备双游");
          this.view.showShuangYou();
        }
      };
      MahjongOtherStateTipCtrl.prototype.op_gaipai = function(msg) {
        console.log("其他人盖牌了");
        if (this.model.mahjongLogic.getInstance().isShuangYou() && 13 != this.model.mahjongCards.getCardCount()) {
          this.view.clear();
          console.log("othter准备双游");
          this.view.showShuangYou();
        } else if (this.model.mahjongLogic.getInstance().isDanYou()) {
          this.view.clear();
          console.log("othter准备单游");
          this.view.showDanYou();
        }
      };
      MahjongOtherStateTipCtrl.prototype.onProcess = function(msg) {
        if (null == this.model.logicseatid) return;
      };
      MahjongOtherStateTipCtrl.prototype.usersUpdated = function() {
        this.model.clear();
        this.view.clear();
        this.model.updateLogicId();
      };
      __decorate([ property({
        tooltip: "准备游金",
        type: cc.Node
      }) ], MahjongOtherStateTipCtrl.prototype, "img_readyyoujin", void 0);
      __decorate([ property({
        tooltip: "准备双游",
        type: cc.Node
      }) ], MahjongOtherStateTipCtrl.prototype, "img_readyshuangyou", void 0);
      __decorate([ property({
        tooltip: "过的图片",
        type: cc.Node
      }) ], MahjongOtherStateTipCtrl.prototype, "img_guo", void 0);
      __decorate([ property ], MahjongOtherStateTipCtrl.prototype, "seatId", void 0);
      MahjongOtherStateTipCtrl = __decorate([ ccclass ], MahjongOtherStateTipCtrl);
      return MahjongOtherStateTipCtrl;
    }(BaseCtrl_1.default);
    exports.default = MahjongOtherStateTipCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "./MahjongDef": "MahjongDef"
  } ],
  MahjongPlayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9ed00fT6yJNoJMy94HdrfA0", "MahjongPlayer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MahjongDef_1 = require("./MahjongDef");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var MahjongGeneral_1 = require("./MahjongGeneral");
    var MahjongPlayer = function() {
      function MahjongPlayer() {
        this.deposit = false;
        this.tingarr = [];
        this.handcard = [];
        this.frontHandCard = [];
        this.cardpool = [];
        this.huapais = {};
        this.opcards = [];
        this.uid = null;
        this.seatid = null;
        this.logic = null;
        this.mahjongcards = null;
        this.events = [];
        this.state = MahjongDef_1.MahjongDef.state_idle;
        this.youjinstate = null;
        this.enableYouJin = null;
        this.b_finishYouJin = null;
        this.tingtypedic = null;
        this.hasEvent = function(target) {
          for (var i = 0; i < this.events.length; i++) {
            var event = this.events[i];
            if (event == target) return true;
          }
          return false;
        };
        this.uid = null;
        this.seatid = null;
      }
      MahjongPlayer.prototype.clearEvent = function() {
        this.events = [];
        this.state = MahjongDef_1.MahjongDef.state_idle;
      };
      MahjongPlayer.prototype.pushEvent = function(event) {
        this.events.push(event);
        this.state = MahjongDef_1.MahjongDef.state_idle;
        switch (event) {
         case MahjongDef_1.MahjongDef.event_chupai:
          this.state = MahjongDef_1.MahjongDef.state_chupai;
          break;

         case MahjongDef_1.MahjongDef.event_gaipai:
          this.state = MahjongDef_1.MahjongDef.state_gaipai;
          break;

         default:
          this.state = MahjongDef_1.MahjongDef.state_event;
        }
      };
      MahjongPlayer.prototype.readyForShuangYou = function() {
        var optioncars = this.mahjongcards.getOptionCardsFromJiang(this.handcard);
        for (var i = 0; i < optioncars.length; ++i) if (0 == optioncars[i]) return true;
        return false;
      };
      MahjongPlayer.prototype.readyForDanYou = function() {
        var optioncars = this.mahjongcards.getOptionCardsFromJiang(this.handcard);
        return optioncars.length > 0;
      };
      MahjongPlayer.prototype.setEvents = function(events) {
        this.events = [];
        for (var i = 0; i < events.length; ++i) this.pushEvent(events[i]);
      };
      MahjongPlayer.prototype.getHuaCount = function() {
        var huacount = 0;
        for (var cardvalue in this.huapais) {
          var count = this.huapais[cardvalue];
          huacount += count;
        }
        return huacount;
      };
      MahjongPlayer.prototype.getJinCount = function() {
        var jincount = 0;
        for (var i = 0; i < this.handcard.length; ++i) MahjongGeneral_1.MahjongGeneral.isJoker(this.handcard[i]) && (jincount += 1);
        return jincount;
      };
      MahjongPlayer.prototype.getLeftHandCountByValue = function(value) {
        var count = 0;
        for (var i = 0; i < this.handcard.length; ++i) this.handcard[i] == value && (count += 1);
        return count;
      };
      MahjongPlayer.prototype.getLeftOpCardsCountByValue = function(value) {
        var count = 0;
        for (var i = 0; i < this.opcards.length; i++) {
          var opinfo = this.opcards[i];
          if (opinfo.op == MahjongDef_1.MahjongDef.op_chi) for (var j = 0; j < opinfo.value.length; ++j) opinfo.value[j] == value && count++; else opinfo.op == MahjongDef_1.MahjongDef.op_peng ? opinfo.value == value && (count += 3) : opinfo.op == MahjongDef_1.MahjongDef.op_gang ? opinfo.value == value && (count += 4) : opinfo.op == MahjongDef_1.MahjongDef.op_angang && opinfo.value == value && (count += 4);
        }
        return count;
      };
      MahjongPlayer.prototype.getLeftcardpoolCountByValue = function(value) {
        var count = 0;
        for (var i = 0; i < this.cardpool.length; i++) this.cardpool[i] == value && count++;
        return count;
      };
      MahjongPlayer.prototype.checkJinXianZhi = function(event) {
        var jincount = this.getJinCount();
        if (jincount <= 0) return false;
        var jinxianzhi = this.logic.prop.get_b_jinxianzhi();
        switch (event) {
         case MahjongDef_1.MahjongDef.event_hu:
          switch (jinxianzhi) {
           case 0:
            break;

           case 1:
            if (jincount < 2) return false;
          }
          break;

         default:
          return false;
        }
        return true;
      };
      MahjongPlayer.prototype.resetData = function() {
        this.deposit = false;
        this.tingarr = [];
        this.handcard = [];
        this.frontHandCard = [];
        this.cardpool = [];
        this.huapais = {};
        this.opcards = [];
        this.events = [];
        this.state = MahjongDef_1.MahjongDef.state_idle;
        this.youjinstate = MahjongDef_1.MahjongDef.youjinstate_null;
      };
      MahjongPlayer.prototype.replaceJin = function() {
        for (var i = 0; i < this.handcard.length; ++i) this.handcard[i] == this.logic.jin ? this.handcard[i] = MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_Joker : this.handcard[i] == this.logic.jin2 && (this.handcard[i] = MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_Joker2);
        this.sortCard();
      };
      MahjongPlayer.prototype.updateHandCard = function(handcard) {
        this.handcard = handcard;
      };
      MahjongPlayer.prototype.getCard = function(index) {
        return this.handcard[index];
      };
      MahjongPlayer.prototype.pushCard = function(card) {
        card ? this.handcard.push(card) : this.handcard.push(0);
      };
      MahjongPlayer.prototype.putInPool = function(card) {
        this.cardpool.push(card);
      };
      MahjongPlayer.prototype.removeCardFromPool = function() {
        this.cardpool.remove(this.cardpool.length - 1);
      };
      MahjongPlayer.prototype.getChiCards = function(index) {
        var curcard = this.logic.curcard;
        var arr = MahjongDef_1.MahjongDef.chiarr[index];
        var card1 = curcard + arr[0];
        var card2 = curcard + arr[1];
        var cards = [ card1, card2 ];
        return cards;
      };
      MahjongPlayer.prototype.removeCardByCount = function(card, count) {
        for (var i = 0; i < count; ++i) this.removeCard(card);
      };
      MahjongPlayer.prototype.pushChi = function(index, cards) {
        var chicards = cards;
        chicards.insert(index, this.logic.curcard);
        var opinfo = {
          index: index,
          op: MahjongDef_1.MahjongDef.op_chi,
          value: chicards
        };
        this.opcards.push(opinfo);
      };
      MahjongPlayer.prototype.getOpCardByIndex = function(index) {
        var opinfo = this.opcards[index];
        var op = opinfo.op;
        var value = null;
        switch (op) {
         case MahjongDef_1.MahjongDef.op_chi:
          value = opinfo.value[0];
          break;

         default:
          value = opinfo.value;
        }
        return value;
      };
      MahjongPlayer.prototype.pushPeng = function(card) {
        var opinfo = {
          op: MahjongDef_1.MahjongDef.op_peng,
          value: card
        };
        this.opcards.push(opinfo);
      };
      MahjongPlayer.prototype.recoverPeng = function(card) {
        for (var i = 0; i < this.opcards.length; i++) {
          var opinfo = this.opcards[i];
          opinfo.op == MahjongDef_1.MahjongDef.op_bugang && opinfo.value == card && (opinfo.op = MahjongDef_1.MahjongDef.op_peng);
        }
      };
      MahjongPlayer.prototype.pushBuGang = function(card) {
        for (var i = 0; i < this.opcards.length; i++) {
          var opinfo = this.opcards[i];
          opinfo.op == MahjongDef_1.MahjongDef.op_peng && opinfo.value == card && (opinfo.op = MahjongDef_1.MahjongDef.op_bugang);
        }
      };
      MahjongPlayer.prototype.pushGang = function(card) {
        var opinfo = {
          op: MahjongDef_1.MahjongDef.op_gang,
          value: card
        };
        this.opcards.push(opinfo);
      };
      MahjongPlayer.prototype.pushAnGang = function(card) {
        var opinfo = {
          op: MahjongDef_1.MahjongDef.op_angang,
          value: card
        };
        this.opcards.push(opinfo);
      };
      MahjongPlayer.prototype.removeCards = function(cards) {
        for (var i = 0; i < cards.length; ++i) this.removeCard(cards[i]);
      };
      MahjongPlayer.prototype.removeCard = function(card) {
        if (this.seatid == RoomMgr_1.default.getInstance().getMySeatId()) for (var i = 0; i < this.handcard.length; ++i) {
          var value = this.handcard[i];
          if (value == card) {
            console.log("移除了牌");
            this.handcard.remove(i);
            break;
          }
        } else this.handcard.remove(0);
      };
      MahjongPlayer.prototype.init = function(seatid, logic) {
        this.seatid = seatid;
        this.logic = logic;
        this.mahjongcards = logic.mahjongcards;
      };
      MahjongPlayer.prototype.initHandCard = function(handcard) {
        this.handcard = handcard;
      };
      MahjongPlayer.prototype.fillOthersCard = function(len) {
        this.handcard = [];
        for (var i = 0; i < len; ++i) this.handcard.push(0);
      };
      MahjongPlayer.prototype.buHua = function(huapaiarr, paiarr) {
        for (var i_1 = 0; i_1 < this.handcard.length; i_1++) this.frontHandCard.push(this.handcard[i_1]);
        for (var i = 0; i < huapaiarr.length; ++i) this.putInHua(huapaiarr[i]);
        if (!RoomMgr_1.default.getInstance().getVideoMode() && this.seatid != RoomMgr_1.default.getInstance().myseatid) return;
        for (var i = 0; i < huapaiarr.length; ++i) for (var j = 0; j < this.handcard.length; ++j) if (this.handcard[j] == huapaiarr[i]) {
          this.handcard.remove(j);
          break;
        }
        for (var i = 0; i < paiarr.length; ++i) this.handcard.push(paiarr[i]);
      };
      MahjongPlayer.prototype.sortCard = function() {
        this.handcard.sort(function(a, b) {
          return a - b;
        });
      };
      MahjongPlayer.prototype.putInHua = function(hua) {
        this.huapais[hua] ? this.huapais[hua] = this.huapais[hua] + 1 : this.huapais[hua] = 1;
      };
      MahjongPlayer.prototype.findCard = function(value) {
        for (var i = 0; i < this.handcard.length; ++i) if (value == this.handcard[i]) return true;
        return false;
      };
      MahjongPlayer.prototype.getCardsCandChi = function() {
        var cardsCanChi = [];
        var curcard = this.logic.curcard;
        for (var index = 0; index < MahjongDef_1.MahjongDef.chiarr.length; ++index) {
          var arr = MahjongDef_1.MahjongDef.chiarr[index];
          var card1 = curcard + arr[0];
          var card2 = curcard + arr[1];
          if (this.findCard(card1) && this.findCard(card2)) {
            var cards = [ card1, card2 ];
            cards.insert(index, curcard);
            var chiinfo = {
              index: index,
              cards: cards
            };
            cardsCanChi.push(chiinfo);
          }
        }
        return cardsCanChi;
      };
      MahjongPlayer.prototype.isShuangYou = function() {
        return this.youjinstate == MahjongDef_1.MahjongDef.youjinstate_shuangyou;
      };
      MahjongPlayer.prototype.getCardsCanAnGang = function() {
        var cardsCanAnGang = [];
        var curcard = this.logic.curcard;
        var cardcountmap = {};
        for (var i = 0; i < this.handcard.length; ++i) {
          var card = this.handcard[i];
          cardcountmap[card] ? cardcountmap[card] = cardcountmap[card] + 1 : cardcountmap[card] = 1;
        }
        var onlyMoPaiAnGang = false;
        this.logic.isMingYou ? (this.logic.isDanYou() || this.logic.isShuangYou()) && (onlyMoPaiAnGang = true) : this.logic.isShuangYou() && (onlyMoPaiAnGang = true);
        for (var cardvalue in cardcountmap) {
          var count = cardcountmap[cardvalue];
          if (onlyMoPaiAnGang && cardvalue != curcard) continue;
          if (4 == count) {
            console.log("QzmjPlayer:getCardsCanAnGang", cardvalue);
            cardsCanAnGang.push(cardvalue);
          }
        }
        return cardsCanAnGang;
      };
      MahjongPlayer.prototype.getCardsCanBuGang = function() {
        var onlyMoPaiBuGang = false;
        var curcard = this.logic.curcard;
        this.logic.isMingYou ? (this.logic.isDanYou() || this.logic.isShuangYou()) && (onlyMoPaiBuGang = true) : this.logic.isShuangYou() && (onlyMoPaiBuGang = true);
        var cardsCanBuGang = [];
        for (var index = 0; index < this.handcard.length; index++) {
          var cardValue = this.handcard[index];
          if (onlyMoPaiBuGang && cardValue != curcard) continue;
          for (var i = 0; i < this.opcards.length; i++) {
            var opinfo = this.opcards[i];
            opinfo.op == MahjongDef_1.MahjongDef.op_peng && opinfo.value == cardValue && cardsCanBuGang.push(cardValue);
          }
        }
        return cardsCanBuGang;
      };
      MahjongPlayer.prototype.getHandcardsGangCount = function() {
        var gangCount = 0;
        var curcard = this.logic.curcard;
        var cardcountmap = {};
        for (var i = 0; i < this.handcard.length; ++i) {
          var card = this.handcard[i];
          cardcountmap[card] ? cardcountmap[card] = cardcountmap[card] + 1 : cardcountmap[card] = 1;
        }
        for (var cardvalue in cardcountmap) {
          var count = cardcountmap[cardvalue];
          4 == count && gangCount++;
        }
        return gangCount;
      };
      MahjongPlayer.prototype.switchCard = function(src, dest) {
        console.log("换牌前=", this.handcard);
        for (var i = 0; i < this.handcard.length; i++) {
          var cardValue = this.handcard[i];
          if (cardValue == src) {
            this.handcard[i] = dest;
            console.log("换牌后=", this.handcard);
            this.sortCard();
            return;
          }
        }
      };
      MahjongPlayer.prototype.checkXianJin = function(handcard) {
        return this.mahjongcards.checkXianJin(handcard);
      };
      MahjongPlayer.prototype.getTingArr = function(tmpPai) {
        return this.mahjongcards.getTingArr(tmpPai);
      };
      MahjongPlayer.prototype.checkTmpJinXianZhi = function(cards, event) {
        var jincount = 0;
        for (var i = 0; i < cards.length; ++i) MahjongGeneral_1.MahjongGeneral.isJoker(cards[i]) && (jincount += 1);
        if (jincount <= 0) return false;
        switch (event) {
         case MahjongDef_1.MahjongDef.event_zimo:
         case MahjongDef_1.MahjongDef.event_hu:
         case MahjongDef_1.MahjongDef.event_qianggang_hu:
          var huinfo = this.mahjongcards.IsHu(cards);
          if (huinfo && huinfo.hutype == MahjongDef_1.MahjongDef.hutype_131) return false;
        }
        var jinxianzhi = this.logic.prop.get_b_jinxianzhi();
        switch (event) {
         case MahjongDef_1.MahjongDef.event_hu:
          switch (jinxianzhi) {
           case 0:
            return false;

           case 1:
            if (jincount < 2) return false;
            break;

           case 2:
            if (jincount < 1) return false;
            break;

           case 3:
            break;

           case 4:
            if (jincount < 2) return false;
            break;

           case 5:
            return false;
          }
          break;

         case MahjongDef_1.MahjongDef.event_zimo:
         case MahjongDef_1.MahjongDef.event_qianggang_hu:
          switch (jinxianzhi) {
           case 0:
           case 1:
            return false;

           case 2:
            if (jincount < 2) return false;
            break;

           case 3:
            break;

           case 4:
            if (jincount < 2) return false;
            break;

           case 5:
            return false;
          }
          break;

         default:
          return false;
        }
        return true;
      };
      MahjongPlayer.prototype.getTingDic = function(handcard, players, mySeatId) {
        this.tingtypedic = {};
        var myself = players[mySeatId];
        var maxTingType = -1;
        for (var i = 0; i < handcard.length; i++) {
          var tmpCards = handcard.concat();
          tmpCards.remove(i);
          var isXianJin = this.checkXianJin(tmpCards);
          var card = handcard[i];
          tmpCards.sort();
          var tingarr = this.getTingArr(tmpCards);
          var tingcards = Object.keys(tingarr);
          var tingtype = -1;
          var tingTotalNums = 0;
          if (isXianJin) if (MahjongGeneral_1.MahjongGeneral.isJoker(card)) {
            tingtype = 2;
            tingtype > maxTingType && (maxTingType = tingtype);
          } else {
            tingtype = 1;
            tingtype > maxTingType && (maxTingType = tingtype);
          } else if (tingcards.length > 0) {
            tingtype = 0;
            tingtype > maxTingType && (maxTingType = tingtype);
          }
          var keys = [];
          for (var n = 0; n < tingcards.length; ) {
            var key = tingcards[n];
            var cardTotalNum = MahjongGeneral_1.MahjongGeneral.isJoker(parseInt(key)) ? 3 : 4;
            var checkxianjintmpCards = tmpCards.concat();
            checkxianjintmpCards.push(parseInt(key));
            checkxianjintmpCards.sort();
            if (MahjongGeneral_1.MahjongGeneral.isJoker(parseInt(key)) && myself.checkTmpJinXianZhi(checkxianjintmpCards, MahjongDef_1.MahjongDef.event_zimo) && myself.checkTmpJinXianZhi(checkxianjintmpCards, MahjongDef_1.MahjongDef.event_hu)) {
              tingcards.removeByValue(parseInt(key));
              continue;
            }
            checkxianjintmpCards = [];
            n++;
            var leftCardNum = cardTotalNum - myself.getLeftHandCountByValue(parseInt(key)) - myself.getLeftOpCardsCountByValue(parseInt(key)) - myself.getLeftcardpoolCountByValue(parseInt(key));
            for (var m in players) {
              var player = players[m];
              parseInt(m) != mySeatId && (leftCardNum = leftCardNum - player.getLeftOpCardsCountByValue(parseInt(key)) - player.getLeftcardpoolCountByValue(parseInt(key)));
            }
            tingTotalNums += leftCardNum;
          }
          tmpCards = [];
          this.tingtypedic[card] = {
            type: tingtype,
            cards: 0 == keys.length ? tingcards : keys,
            tingNums: tingTotalNums
          };
        }
        for (var i = 0; i < handcard.length; i++) {
          var card = handcard[i];
          this.tingtypedic[card].type < maxTingType && (this.tingtypedic[card] = {});
          var keys = [];
          if (1 == this.tingtypedic[card].type || 2 == this.tingtypedic[card].type) {
            var tmphandcards = this.handcard.concat();
            tmphandcards.removeByValue(card);
            for (var cardidx = 0; cardidx < this.mahjongcards.all_majiang_types.length; ++cardidx) {
              var cardvalue = this.mahjongcards.all_majiang_types[cardidx];
              var tmphandcardsCopy = tmphandcards.concat();
              parseInt(cardvalue) != this.logic.jin && parseInt(cardvalue) != this.logic.jin2 || (cardvalue = 0);
              tmphandcardsCopy.push(cardvalue);
              tmphandcardsCopy.sort();
              var huinfo = this.mahjongcards.IsHu(tmphandcardsCopy);
              tmphandcardsCopy = [];
              if (!huinfo) continue;
              keys.contain(0) || keys.push(0);
              this.logic.isQuanZiDong && (keys.contain(1) || keys.push(1));
              for (var index = 0; index < huinfo.hucards.length; ++index) 0 == huinfo.hucards[index].type && 2 == huinfo.hucards[index].jincount && (keys.contain(cardvalue) || keys.push(cardvalue));
            }
            tmphandcards = [];
          }
          if (0 != keys.length) {
            var tingTotalNums = 0;
            for (var j = 0; j < keys.length; j++) {
              var key = keys[j];
              var cardTotalNum = MahjongGeneral_1.MahjongGeneral.isJoker(parseInt(key)) ? 3 : 4;
              var leftCardNum = cardTotalNum - myself.getLeftHandCountByValue(parseInt(key)) - myself.getLeftOpCardsCountByValue(parseInt(key)) - myself.getLeftcardpoolCountByValue(parseInt(key));
              for (var m = 0; m < players.length; m++) {
                var player = players[m];
                m != mySeatId && (leftCardNum = leftCardNum - player.getLeftOpCardsCountByValue(parseInt(key)) - player.getLeftcardpoolCountByValue(parseInt(key)));
              }
              tingTotalNums += leftCardNum;
            }
            this.tingtypedic[card].cards = keys;
            this.tingtypedic[card].tingNums = tingTotalNums;
          }
        }
        return this.tingtypedic;
      };
      MahjongPlayer.prototype.outcardLimited = function(standcard) {
        var tingdata = this.tingtypedic[standcard];
        if (tingdata) {
          var tingtype = tingdata.type;
          if ((tingtype < 2 || void 0 == tingtype) && 0 == standcard) return true;
        }
        return false;
      };
      MahjongPlayer.prototype.setYouJinState = function(youjinstate) {
        this.youjinstate = youjinstate;
      };
      MahjongPlayer.prototype.getyise = function() {
        return -1;
      };
      MahjongPlayer.prototype.getHuType = function() {
        var hutype = null;
        var pai = this.handcard.concat();
        pai.sort();
        var huinfo = this.mahjongcards.IsHu(pai);
        if (!huinfo) return null;
        return huinfo.hutype;
      };
      return MahjongPlayer;
    }();
    exports.default = MahjongPlayer;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "./MahjongDef": "MahjongDef",
    "./MahjongGeneral": "MahjongGeneral"
  } ],
  MahjongResMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "05bf5ue4CtP5aAdZJbSV2k7", "MahjongResMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MahjongGeneral_1 = require("./MahjongGeneral");
    var cardpngs = {
      17: "1",
      18: "2",
      19: "3",
      20: "4",
      21: "5",
      22: "6",
      23: "7",
      24: "8",
      25: "9",
      33: "21",
      34: "22",
      35: "23",
      36: "24",
      37: "25",
      38: "26",
      39: "27",
      40: "28",
      41: "29",
      49: "11",
      50: "12",
      51: "13",
      52: "14",
      53: "15",
      54: "16",
      55: "17",
      56: "18",
      57: "19",
      65: "31",
      67: "32",
      69: "33",
      71: "34",
      73: "35",
      75: "36",
      77: "37",
      81: "38",
      83: "39",
      85: "41",
      87: "42",
      89: "43",
      91: "44",
      93: "45",
      95: "46"
    };
    var huanames = {
      65: "东",
      67: "南",
      69: "西",
      71: "北",
      73: "中",
      75: "发",
      77: "白",
      81: "梅",
      83: "兰",
      85: "竹",
      87: "菊",
      89: "春",
      91: "夏",
      93: "秋",
      95: "东"
    };
    var huaIcons = {
      89: 0,
      91: 1,
      93: 2,
      95: 3,
      81: 4,
      83: 5,
      85: 6,
      87: 7,
      65: 8,
      67: 9,
      69: 10,
      71: 11,
      73: 12,
      75: 13,
      77: 14
    };
    var MahjongResMgr = function() {
      function MahjongResMgr() {
        this.jin = null;
        this.jin2 = null;
        this.tableAtlas = null;
        this.jin = null;
      }
      MahjongResMgr.prototype.clear = function() {};
      MahjongResMgr.getInstance = function() {
        this._instance || (this._instance = new MahjongResMgr());
        return this._instance;
      };
      MahjongResMgr.prototype.setJin = function(jin, jin2) {
        console.log("两个金11=", jin, jin2);
        this.jin = jin;
        this.jin2 = jin2;
        console.log("两个金=", this.jin, this.jin2);
      };
      MahjongResMgr.prototype.getHuaIconTexture = function(value) {
        var index = MahjongResMgr.huaIcons[value];
        var frame = this.tableAtlas.getSpriteFrame("BuhuaStatus_" + index);
        return frame;
      };
      MahjongResMgr.prototype.setTableAtlas = function(tableAtlas) {
        this.tableAtlas = tableAtlas;
      };
      MahjongResMgr.prototype.getCardSpriteFrame = function(value) {
        value == MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_Joker ? value = this.jin : value == MahjongGeneral_1.MahjongGeneral.emMJ.emMJ_Joker2 && (value = this.jin2);
        console.log("value=", this.jin, this.jin2, value);
        var cardName = MahjongResMgr.cardpngs[value];
        var frame = this.tableAtlas.getSpriteFrame(cardName);
        return frame;
      };
      MahjongResMgr.prototype.getSpriteFrame = function(plistKey) {
        var frame = this.tableAtlas.getSpriteFrame(plistKey);
        return frame;
      };
      MahjongResMgr.cardpngs = cardpngs;
      MahjongResMgr.huanames = huanames;
      MahjongResMgr.huaIcons = huaIcons;
      return MahjongResMgr;
    }();
    exports.default = MahjongResMgr;
    cc._RF.pop();
  }, {
    "./MahjongGeneral": "MahjongGeneral"
  } ],
  MahjongRoomCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cf5ecr4pdZJyamCcjBurbY1", "MahjongRoomCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var RecordMgr_1 = require("../../Plat/GameMgrs/RecordMgr");
    var MahjongDef_1 = require("./MahjongDef");
    var AppInfoMgr_1 = require("../../AppStart/AppMgrs/AppInfoMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.mySeatId = null;
        _this.myPrepared = null;
        _this.myself = null;
        _this.jin = null;
        _this.roominfo = null;
        _this.roomvalue = null;
        _this.roundcount = 0;
        _this.mahjongResMgr = RoomMgr_1.default.getInstance().getResMgr();
        _this.mahjongLogic = RoomMgr_1.default.getInstance().getLogic();
        _this.mahjongDef = RoomMgr_1.default.getInstance().getDef();
        _this.mahjongAudio = RoomMgr_1.default.getInstance().getAudio();
        _this.mahjongCards = _this.mahjongLogic.getInstance().getMahjongCards();
        _this.paytypeList = [ "房主支付", "AA支付", "赢家支付" ];
        _this.roominfo = RoomMgr_1.default.getInstance().roominfo;
        2 != _this.roominfo.roomtype && 3 != _this.roominfo.roomtype || (_this.roomvalue = RoomMgr_1.default.getInstance().getFangKaCfg());
        return _this;
      }
      Model.prototype.updateMyInfo = function() {
        this.mySeatId = RoomMgr_1.default.getInstance().getMySeatId();
        this.myPrepared = RoomMgr_1.default.getInstance().preparemap[this.mySeatId];
        this.myself = this.mahjongLogic.getInstance().players[this.mySeatId];
      };
      Model.prototype.updateMyPrepared = function() {
        this.myPrepared = RoomMgr_1.default.getInstance().preparemap[this.mySeatId];
        console.log("收到回复 usersUpdated mahjongRoom=", RoomMgr_1.default.getInstance().preparemap);
      };
      Model.prototype.clear = function() {};
      Model.prototype.recover = function() {
        this.clear();
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_prepare: null,
          btn_cancelprepare: null,
          btn_invite: null,
          lbl_cardcount: null,
          panel_jin: null,
          panel_cardcount: null,
          btn_zhanji: null,
          node_majiangs: null,
          btn_fapaiGm: null,
          btn_setting: null,
          btn_switchCardWithWall: null,
          btn_chat: null,
          btn_gameRule: null,
          node_effects: null,
          btn_maikefen: null,
          img_grayLayer: null,
          btn_lastSettle: null,
          Prefab_Mystatetip: null,
          Node_myseat: null,
          panel_videoPlay: null
        };
        _this.node = ctrl.node;
        _this.ui.Node_myseat = ctrl.Node_myseat;
        if (13 == _this.model.mahjongCards.getCardCount()) {
          var myseatPos = _this.ui.Node_myseat.getPosition();
          _this.ui.Node_myseat.setPosition(myseatPos.x, myseatPos.y - 40);
        }
        _this.initUi();
        _this.addMahjongPrefabs();
        return _this;
      }
      View.prototype.addMahjongPrefabs = function() {
        var handcard_0 = ctrl.Prefab_HandMaJiang3D_0;
        var handcard_1 = ctrl.Prefab_HandMaJiang3D_1;
        var handcard_2 = ctrl.Prefab_HandMaJiang3D_2;
        var handcard_3 = ctrl.Prefab_HandMaJiang3D_3;
        if (13 == this.model.mahjongCards.getCardCount()) {
          handcard_0 = ctrl.Prefab_HandMaJiang3D_13_0;
          handcard_1 = ctrl.Prefab_HandMaJiang3D_13_1;
          handcard_2 = ctrl.Prefab_HandMaJiang3D_13_2;
          handcard_3 = ctrl.Prefab_HandMaJiang3D_13_3;
        }
        var prefamahjongbarr = [ ctrl.Prefab_Clock, ctrl.Prefab_Dice, ctrl.Prefab_GroupMaJiang3D_0, ctrl.Prefab_GroupMaJiang3D_1, ctrl.Prefab_GroupMaJiang3D_2, ctrl.Prefab_GroupMaJiang3D_3, handcard_3, handcard_2, handcard_1, ctrl.Prefab_PoolMaJiang3D_2, ctrl.Prefab_PoolMaJiang3D_1, ctrl.Prefab_PoolMaJiang3D_3, ctrl.Prefab_PoolMaJiang3D_0, ctrl.Prefab_Hua_0, ctrl.Prefab_Hua_1, ctrl.Prefab_Hua_2, ctrl.Prefab_Hua_3, ctrl.Prefab_Mystatetip, ctrl.panel_jin, handcard_0, ctrl.Prefab_MahjongEvent, ctrl.Prefab_deposit ];
        RoomMgr_1.default.getInstance().getVideoMode() || prefamahjongbarr.insert(0, ctrl.Prefab_MahjongRoomRule);
        for (var i = 0; i < prefamahjongbarr.length; ++i) {
          var prefab = prefamahjongbarr[i];
          var prefabNode = cc.instantiate(prefab);
          this.ui.node_majiangs.addChild(prefabNode);
        }
      };
      View.prototype.updateInviteBtn = function() {
        RoomMgr_1.default.getInstance().isFirstRound() && (this.ui.btn_invite.active = !RoomMgr_1.default.getInstance().isRoomFull());
      };
      View.prototype.initUi = function() {
        this.ui.btn_prepare = ctrl.btn_prepare;
        this.ui.btn_cancelprepare = ctrl.btn_cancelprepare;
        this.ui.btn_invite = ctrl.btn_invite;
        this.ui.btn_prepare.active = false;
        this.ui.btn_invite.active = false;
        this.ui.btn_cancelprepare.active = false;
        this.ui.btn_setting = ctrl.btn_setting;
        this.ui.btn_chat = ctrl.btn_chat;
        this.ui.btn_switchCardWithWall = ctrl.btn_switchCardWithWall;
        this.ui.btn_fapaiGm = ctrl.btn_fapaiGm;
        this.ui.lbl_cardcount = ctrl.lbl_cardcount;
        this.ui.panel_cardcount = ctrl.panel_cardcount;
        this.ui.btn_zhanji = ctrl.btn_zhanji;
        this.ui.node_majiangs = ctrl.node_majiangs;
        this.ui.btn_gameRule = ctrl.btn_gamerule;
        this.ui.node_effects = ctrl.node_effects;
        this.ui.btn_maikefen = ctrl.btn_maikefen;
        this.ui.img_grayLayer = ctrl.img_grayLayer;
        this.ui.btn_lastSettle = ctrl.btn_lastSettle;
        this.ui.btn_lastSettle.active = false;
        this.ui.btn_prepare.active = !this.model.myPrepared;
        this.ui.btn_cancelprepare.active = this.model.myPrepared;
        if (cc.sys.isNative) {
          this.ui.btn_switchCardWithWall.active = false;
          this.ui.btn_fapaiGm.active = false;
        }
        this.ui.node_effects.getComponent("cc.Animation").on("finished", this.onnodeeffectsFinished, this);
      };
      View.prototype.onnodeeffectsFinished = function() {
        this.ui.img_grayLayer.opacity = 0;
      };
      View.prototype.updateLeftCardCount = function() {
        this.ui.lbl_cardcount.string = this.model.mahjongLogic.getInstance().getLeftCardCount();
      };
      View.prototype.recover = function() {
        this.clear();
      };
      View.prototype.clear = function() {
        this.ui.lbl_cardcount.node.active = false;
        this.ui.panel_cardcount.active = false;
        this.ui.btn_lastSettle.active = false;
      };
      View.prototype.showCardCount = function() {
        this.ui.lbl_cardcount.node.active = true;
        this.ui.panel_cardcount.active = true;
      };
      View.prototype.showMahjongPrefabs = function() {};
      View.prototype.hideInviteAndPrepare = function() {
        this.ui.btn_cancelprepare.active = false;
        this.ui.btn_prepare.active = false;
        this.ui.btn_invite.active = false;
      };
      View.prototype.updatelastSettle = function(flag) {
        this.ui.btn_lastSettle.active = flag;
      };
      View.prototype.addVideoPlay = function() {
        this.ui.panel_videoPlay = cc.instantiate(ctrl.Prefab_videoPlay);
        this.node.addChild(this.ui.panel_videoPlay);
      };
      return View;
    }(BaseView_1.default);
    var MahjongRoomCtrl = function(_super) {
      __extends(MahjongRoomCtrl, _super);
      function MahjongRoomCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.Prefab_MahjongRoomRule = null;
        _this.Atlas_table = null;
        _this.Prefab_GroupMaJiang3D_0 = null;
        _this.Prefab_GroupMaJiang3D_1 = null;
        _this.Prefab_GroupMaJiang3D_2 = null;
        _this.Prefab_GroupMaJiang3D_3 = null;
        _this.Prefab_HandMaJiang3D_0 = null;
        _this.Prefab_HandMaJiang3D_1 = null;
        _this.Prefab_HandMaJiang3D_2 = null;
        _this.Prefab_HandMaJiang3D_3 = null;
        _this.Prefab_HandMaJiang3D_13_0 = null;
        _this.Prefab_HandMaJiang3D_13_1 = null;
        _this.Prefab_HandMaJiang3D_13_2 = null;
        _this.Prefab_HandMaJiang3D_13_3 = null;
        _this.Prefab_PoolMaJiang3D_0 = null;
        _this.Prefab_PoolMaJiang3D_1 = null;
        _this.Prefab_PoolMaJiang3D_2 = null;
        _this.Prefab_PoolMaJiang3D_3 = null;
        _this.Prefab_Hua_0 = null;
        _this.Prefab_Hua_1 = null;
        _this.Prefab_Hua_2 = null;
        _this.Prefab_Hua_3 = null;
        _this.node_majiangs = null;
        _this.btn_prepare = null;
        _this.lbl_cardcount = null;
        _this.panel_jin = null;
        _this.panel_cardcount = null;
        _this.btn_chat = null;
        _this.btn_gamerule = null;
        _this.btn_cancelprepare = null;
        _this.btn_invite = null;
        _this.btn_setting = null;
        _this.btn_switchCardWithWall = null;
        _this.btn_fapaiGm = null;
        _this.Prefab_Clock = null;
        _this.Prefab_deposit = null;
        _this.Prefab_Dice = null;
        _this.Prefab_MahjongEvent = null;
        _this.btn_zhanji = null;
        _this.node_effects = null;
        _this.btn_maikefen = null;
        _this.Def = null;
        _this.ResMgr = null;
        _this.Logic = null;
        _this.Node_battery = null;
        _this.Node_network = null;
        _this.Label_curTime = null;
        _this.img_grayLayer = null;
        _this.btn_lastSettle = null;
        _this.Prefab_Mystatetip = null;
        _this.Node_myseat = null;
        _this.node_ctrls = null;
        _this.Prefab_videoPlay = null;
        return _this;
      }
      MahjongRoomCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        if (cc.sys.isNative) {
          G_PLATFORM.getCurNetWorkData();
          G_PLATFORM.getBatteryPercent();
        }
        this.schedule(this.updateCurDate.bind(this), 1);
        if (RoomMgr_1.default.getInstance().getVideoMode()) {
          this.node_ctrls.active = false;
          this.view.addVideoPlay();
        } else RoomMgr_1.default.getInstance().enterRoom();
        this.model.mahjongResMgr.getInstance().setTableAtlas(this.Atlas_table);
      };
      MahjongRoomCtrl.prototype.updateCurDate = function() {
        var curDate = new Date();
        var hours = curDate.getHours();
        var minutes = curDate.getMinutes();
        this.Label_curTime.string = (hours < 10 ? "0" + hours : hours) + ":" + (minutes < 10 ? "0" + minutes : minutes);
      };
      MahjongRoomCtrl.prototype.onDestroy = function() {
        this.unschedule(this.updateCurDate);
        RoomMgr_1.default.getInstance().destroy();
        _super.prototype.onDestroy.call(this);
      };
      MahjongRoomCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onLeaveRoom: this.onLeaveRoom,
          onEnterRoom: this.onEnterRoom,
          onSeatChange: this.onSeatChange,
          onSyncData: this.onSyncData,
          onProcess: this.onProcess,
          onPrepare: this.onPrepare,
          onCancelPrepare: this.onCancelPrepare,
          "http.reqSettle": this.http_reqSettle,
          onStartGame: this.onStartGame,
          "connector.entryHandler.enterRoom": this.connector_entryHandler_enterRoom,
          "room.roomHandler.nextRound": this.room_roomHandler_nextRound
        };
      };
      MahjongRoomCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          usersUpdated: this.usersUpdated,
          batteryChange: this.onBatteryChange,
          networkChange: this.onNetWorkChange
        };
      };
      MahjongRoomCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_prepare, this.btn_prepare_cb, "点击准备");
        this.connect(G_UiType.image, this.ui.btn_cancelprepare, this.btn_cancelprepare_cb, "取消准备");
        this.connect(G_UiType.image, this.ui.btn_invite, this.btn_invite_cb, "点击邀请");
        this.connect(G_UiType.image, this.ui.btn_setting, this.btn_setting_cb, "点击设置");
        this.connect(G_UiType.image, this.ui.btn_switchCardWithWall, this.btn_switchCardWithWall_cb, "点击换底牌按钮");
        this.connect(G_UiType.image, this.ui.btn_fapaiGm, this.btn_fapaiGm_cb, "点击改变发牌顺序");
        this.connect(G_UiType.image, this.ui.btn_zhanji, this.btn_zhanji_cb, "点击战绩");
        this.connect(G_UiType.image, this.ui.btn_chat, this.btn_chat_cb, "点击聊天");
        this.connect(G_UiType.image, this.ui.btn_gameRule, this.btn_gameRule_cb, "点击房间规则");
        this.connect(G_UiType.button, this.ui.btn_lastSettle, this.btn_lastSettle_cb, "点击上局详情");
      };
      MahjongRoomCtrl.prototype.room_roomHandler_nextRound = function() {
        this.model.clear();
        this.view.clear();
        this.view.updatelastSettle(true);
        this.updateMyPrepared();
      };
      MahjongRoomCtrl.prototype.connector_entryHandler_enterRoom = function(msg) {
        console.log("connector_entryHandler_enterRoom");
        msg.gamestarted || RoomMgr_1.default.getInstance().prepare();
        this.model.clear();
        this.view.clear();
        this.view.updateInviteBtn();
      };
      MahjongRoomCtrl.prototype.onStartGame = function() {
        this.view.hideInviteAndPrepare();
        this.model.roundcount > 0 && RoomMgr_1.default.getInstance().reqCheating();
      };
      MahjongRoomCtrl.prototype.start = function() {
        RoomMgr_1.default.getInstance().getVideoMode() && RecordMgr_1.default.getInstance().startPlaying();
      };
      MahjongRoomCtrl.prototype.btn_cancelprepare_cb = function() {
        RoomMgr_1.default.getInstance().cancelprepare();
      };
      MahjongRoomCtrl.prototype.btn_invite_cb = function() {
        console.log(RoomMgr_1.default.getInstance().getGameName());
        var roomvalue = RoomMgr_1.default.getInstance().getFangKaCfg();
        if (cc.sys.isNative) {
          var appname = AppInfoMgr_1.default.getInstance().getAppName();
          G_PLATFORM.wxShareRoom(G_PLATFORM.WX_SHARE_TYPE.WXSceneSession, appname + "好友房间邀请", RoomMgr_1.default.getInstance().getGameName() + " 房间号:" + this.model.roominfo.password + " 局数：" + roomvalue.v_roundcount + "局 人数：" + roomvalue.v_seatcount + "人 " + this.model.paytypeList[roomvalue.v_paytype], this.model.roominfo.password);
        }
      };
      MahjongRoomCtrl.prototype.onCancelPrepare = function(msg) {
        var viewseatid = RoomMgr_1.default.getInstance().getViewSeatId(msg.seatid);
        msg.seatid == this.model.mySeatId && this.updateMyPrepared();
      };
      MahjongRoomCtrl.prototype.onSyncData = function() {
        this.model.recover();
        this.view.recover();
        this.model.updateMyInfo();
        this.ui.lbl_cardcount.node.active = true;
        this.ui.panel_cardcount.active = true;
        this.view.updateLeftCardCount();
        this.view.hideInviteAndPrepare();
      };
      MahjongRoomCtrl.prototype.onSeatChange = function(msg) {
        this.view.updateLeftCardCount();
      };
      MahjongRoomCtrl.prototype.usersUpdated = function() {
        this.model.updateMyInfo();
        this.view.initUi();
        this.updateMyPrepared();
      };
      MahjongRoomCtrl.prototype.onBatteryChange = function(msg) {
        var _this = this;
        cc.log("电量变化？？", msg);
        var proportion = parseInt(msg / 10);
        var imageName = "";
        imageName = 6 <= proportion ? "dl_1" : 3 <= proportion ? "dl_2" : "dl_3";
        cc.loader.loadRes("Icons/" + imageName, cc.SpriteFrame, function(err, sprite) {
          if (err) return cc.error("no find Icons/" + imageName);
          var childrens = _this.Node_battery.children;
          for (var i = 0; i < childrens.length; i++) {
            childrens[i].active = i < proportion;
            i < proportion && (childrens[i].getComponent(cc.Sprite).spriteFrame = sprite);
          }
        });
      };
      MahjongRoomCtrl.prototype.onNetWorkChange = function(msg) {
        var _this = this;
        cc.log("网络变化？？", msg);
        var imageName = msg.type + "_" + msg.level;
        cc.loader.loadRes("Icons/" + imageName, cc.SpriteFrame, function(err, sprite) {
          if (err) return cc.error("no find Icons/" + imageName);
          _this.Node_network.getComponent(cc.Sprite).spriteFrame = sprite;
        });
      };
      MahjongRoomCtrl.prototype.updateMyPrepared = function() {
        this.model.updateMyPrepared();
        console.log("游戏开始了没有=", RoomMgr_1.default.getInstance().isGameStarted());
        if (RoomMgr_1.default.getInstance().isGameStarted()) {
          this.ui.btn_prepare.active = false;
          this.ui.btn_cancelprepare.active = false;
        } else {
          this.ui.btn_prepare.active = !this.model.myPrepared;
          this.ui.btn_cancelprepare.active = this.model.myPrepared;
        }
      };
      MahjongRoomCtrl.prototype.onPrepare = function(msg) {
        var viewseatid = RoomMgr_1.default.getInstance().getViewSeatId(msg.seatid);
        msg.seatid == this.model.mySeatId && this.updateMyPrepared();
      };
      MahjongRoomCtrl.prototype.http_reqSettle = function() {
        this.start_sub_module(G_MODULE.Settle);
      };
      MahjongRoomCtrl.prototype.drawGame = function() {};
      MahjongRoomCtrl.prototype.onProcess = function(msg) {
        this.view.updateLeftCardCount();
        if (msg.process == MahjongDef_1.MahjongDef.process_kaijin) this.process_kaijin(); else if (msg.process == MahjongDef_1.MahjongDef.process_fapai) {
          this.view.showCardCount();
          this.view.updateLeftCardCount();
        } else msg.process == MahjongDef_1.MahjongDef.process_ready ? this.process_ready() : msg.process == MahjongDef_1.MahjongDef.process_dingzhuang ? this.process_dingzhuang() : msg.process == MahjongDef_1.MahjongDef.process_cheatcheck ? this.process_cheatcheck() : msg.process == MahjongDef_1.MahjongDef.process_buhua ? this.process_buhua(msg) : msg.process == MahjongDef_1.MahjongDef.process_haidilaoyue && this.process_haidilaoyue(msg);
      };
      MahjongRoomCtrl.prototype.process_kaijin = function() {
        this.ui.node_effects.play("MahjongProcess_kaijin");
      };
      MahjongRoomCtrl.prototype.process_buhua = function(msg) {
        console.log("process_buhua", msg);
      };
      MahjongRoomCtrl.prototype.process_haidilaoyue = function(msg) {
        this.start_sub_module(G_MODULE.Fzmjhaidilaoyue);
      };
      MahjongRoomCtrl.prototype.process_cheatcheck = function() {
        this.start_sub_module(G_MODULE.RoomPreventionCheating);
      };
      MahjongRoomCtrl.prototype.process_dingzhuang = function() {};
      MahjongRoomCtrl.prototype.process_ready = function() {
        var curDate = new Date();
        console.log("process_ready", curDate.getTime());
        this.model.clear();
        this.view.clear();
        this.ui.img_grayLayer.opacity = 120;
        this.ui.node_effects.play();
      };
      MahjongRoomCtrl.prototype.onLeaveRoom = function(msg) {
        RoomMgr_1.default.getInstance().isFirstRound() && this.view.updateInviteBtn();
      };
      MahjongRoomCtrl.prototype.onEnterRoom = function(msg) {
        RoomMgr_1.default.getInstance().isFirstRound() && this.view.updateInviteBtn();
      };
      MahjongRoomCtrl.prototype.btn_setting_cb = function() {
        this.start_sub_module(G_MODULE.RoomSetting);
      };
      MahjongRoomCtrl.prototype.btn_switchCardWithWall_cb = function(event) {
        this.start_sub_module(G_MODULE.SwitchCardWithWallGm);
      };
      MahjongRoomCtrl.prototype.btn_fapaiGm_cb = function(event) {
        this.start_sub_module(G_MODULE.FaPaiGm);
      };
      MahjongRoomCtrl.prototype.btn_prepare_cb = function() {
        RoomMgr_1.default.getInstance().prepare();
      };
      MahjongRoomCtrl.prototype.btn_help_cb = function() {
        this.start_sub_module(G_MODULE.RoomRule);
      };
      MahjongRoomCtrl.prototype.btn_chat_cb = function() {
        this.start_sub_module(G_MODULE.RoomChat);
      };
      MahjongRoomCtrl.prototype.btn_zhanji_cb = function() {
        this.start_sub_module(G_MODULE.GambleRecord);
      };
      MahjongRoomCtrl.prototype.initWithLibs = function(Def, ResMgr, Logic) {
        this.Def = Def;
        this.ResMgr = ResMgr;
        this.Logic = Logic;
      };
      MahjongRoomCtrl.prototype.btn_gameRule_cb = function(event) {
        this.start_sub_module(G_MODULE.GameRule);
      };
      MahjongRoomCtrl.prototype.btn_lastSettle_cb = function() {
        var lastindexslash = G_MODULE.Settle.lastIndexOf("/");
        var scriptName = G_MODULE.Settle.substring(lastindexslash + 1, G_MODULE.Settle.length) + "Ctrl";
        this.start_sub_module(G_MODULE.Settle, function(settleCtrl) {
          settleCtrl.setAsViewAgain();
        }, scriptName);
      };
      __decorate([ property({
        tooltip: "房间规则",
        type: cc.Prefab
      }) ], MahjongRoomCtrl.prototype, "Prefab_MahjongRoomRule", void 0);
      __decorate([ property(cc.SpriteAtlas) ], MahjongRoomCtrl.prototype, "Atlas_table", void 0);
      __decorate([ property(cc.Prefab) ], MahjongRoomCtrl.prototype, "Prefab_GroupMaJiang3D_0", void 0);
      __decorate([ property(cc.Prefab) ], MahjongRoomCtrl.prototype, "Prefab_GroupMaJiang3D_1", void 0);
      __decorate([ property(cc.Prefab) ], MahjongRoomCtrl.prototype, "Prefab_GroupMaJiang3D_2", void 0);
      __decorate([ property(cc.Prefab) ], MahjongRoomCtrl.prototype, "Prefab_GroupMaJiang3D_3", void 0);
      __decorate([ property(cc.Prefab) ], MahjongRoomCtrl.prototype, "Prefab_HandMaJiang3D_0", void 0);
      __decorate([ property(cc.Prefab) ], MahjongRoomCtrl.prototype, "Prefab_HandMaJiang3D_1", void 0);
      __decorate([ property(cc.Prefab) ], MahjongRoomCtrl.prototype, "Prefab_HandMaJiang3D_2", void 0);
      __decorate([ property(cc.Prefab) ], MahjongRoomCtrl.prototype, "Prefab_HandMaJiang3D_3", void 0);
      __decorate([ property(cc.Prefab) ], MahjongRoomCtrl.prototype, "Prefab_HandMaJiang3D_13_0", void 0);
      __decorate([ property(cc.Prefab) ], MahjongRoomCtrl.prototype, "Prefab_HandMaJiang3D_13_1", void 0);
      __decorate([ property(cc.Prefab) ], MahjongRoomCtrl.prototype, "Prefab_HandMaJiang3D_13_2", void 0);
      __decorate([ property(cc.Prefab) ], MahjongRoomCtrl.prototype, "Prefab_HandMaJiang3D_13_3", void 0);
      __decorate([ property(cc.Prefab) ], MahjongRoomCtrl.prototype, "Prefab_PoolMaJiang3D_0", void 0);
      __decorate([ property(cc.Prefab) ], MahjongRoomCtrl.prototype, "Prefab_PoolMaJiang3D_1", void 0);
      __decorate([ property(cc.Prefab) ], MahjongRoomCtrl.prototype, "Prefab_PoolMaJiang3D_2", void 0);
      __decorate([ property(cc.Prefab) ], MahjongRoomCtrl.prototype, "Prefab_PoolMaJiang3D_3", void 0);
      __decorate([ property(cc.Prefab) ], MahjongRoomCtrl.prototype, "Prefab_Hua_0", void 0);
      __decorate([ property(cc.Prefab) ], MahjongRoomCtrl.prototype, "Prefab_Hua_1", void 0);
      __decorate([ property(cc.Prefab) ], MahjongRoomCtrl.prototype, "Prefab_Hua_2", void 0);
      __decorate([ property(cc.Prefab) ], MahjongRoomCtrl.prototype, "Prefab_Hua_3", void 0);
      __decorate([ property(cc.Node) ], MahjongRoomCtrl.prototype, "node_majiangs", void 0);
      __decorate([ property(cc.Node) ], MahjongRoomCtrl.prototype, "btn_prepare", void 0);
      __decorate([ property(cc.Label) ], MahjongRoomCtrl.prototype, "lbl_cardcount", void 0);
      __decorate([ property(cc.Prefab) ], MahjongRoomCtrl.prototype, "panel_jin", void 0);
      __decorate([ property(cc.Node) ], MahjongRoomCtrl.prototype, "panel_cardcount", void 0);
      __decorate([ property(cc.Node) ], MahjongRoomCtrl.prototype, "btn_chat", void 0);
      __decorate([ property(cc.Node) ], MahjongRoomCtrl.prototype, "btn_gamerule", void 0);
      __decorate([ property(cc.Node) ], MahjongRoomCtrl.prototype, "btn_cancelprepare", void 0);
      __decorate([ property(cc.Node) ], MahjongRoomCtrl.prototype, "btn_invite", void 0);
      __decorate([ property({
        tooltip: "麻将界面设置按钮",
        type: cc.Node
      }) ], MahjongRoomCtrl.prototype, "btn_setting", void 0);
      __decorate([ property({
        tooltip: "麻将界面换底牌按钮",
        type: cc.Node
      }) ], MahjongRoomCtrl.prototype, "btn_switchCardWithWall", void 0);
      __decorate([ property({
        tooltip: "麻将界面换底牌顺序按钮",
        type: cc.Node
      }) ], MahjongRoomCtrl.prototype, "btn_fapaiGm", void 0);
      __decorate([ property(cc.Prefab) ], MahjongRoomCtrl.prototype, "Prefab_Clock", void 0);
      __decorate([ property(cc.Prefab) ], MahjongRoomCtrl.prototype, "Prefab_deposit", void 0);
      __decorate([ property(cc.Prefab) ], MahjongRoomCtrl.prototype, "Prefab_Dice", void 0);
      __decorate([ property(cc.Prefab) ], MahjongRoomCtrl.prototype, "Prefab_MahjongEvent", void 0);
      __decorate([ property(cc.Node) ], MahjongRoomCtrl.prototype, "btn_zhanji", void 0);
      __decorate([ property(cc.Animation) ], MahjongRoomCtrl.prototype, "node_effects", void 0);
      __decorate([ property(cc.Node) ], MahjongRoomCtrl.prototype, "btn_maikefen", void 0);
      __decorate([ property(cc.Node) ], MahjongRoomCtrl.prototype, "Node_battery", void 0);
      __decorate([ property(cc.Node) ], MahjongRoomCtrl.prototype, "Node_network", void 0);
      __decorate([ property(cc.Label) ], MahjongRoomCtrl.prototype, "Label_curTime", void 0);
      __decorate([ property(cc.Node) ], MahjongRoomCtrl.prototype, "img_grayLayer", void 0);
      __decorate([ property({
        tooltip: "上局详情",
        type: cc.Node
      }) ], MahjongRoomCtrl.prototype, "btn_lastSettle", void 0);
      __decorate([ property({
        tooltip: "mystatetip",
        type: cc.Prefab
      }) ], MahjongRoomCtrl.prototype, "Prefab_Mystatetip", void 0);
      __decorate([ property(cc.Node) ], MahjongRoomCtrl.prototype, "Node_myseat", void 0);
      __decorate([ property({
        tooltip: "功能操作集合",
        type: cc.Node
      }) ], MahjongRoomCtrl.prototype, "node_ctrls", void 0);
      __decorate([ property({
        tooltip: "录像控制",
        type: cc.Prefab
      }) ], MahjongRoomCtrl.prototype, "Prefab_videoPlay", void 0);
      MahjongRoomCtrl = __decorate([ ccclass ], MahjongRoomCtrl);
      return MahjongRoomCtrl;
    }(BaseCtrl_1.default);
    exports.default = MahjongRoomCtrl;
    cc._RF.pop();
  }, {
    "../../AppStart/AppMgrs/AppInfoMgr": "AppInfoMgr",
    "../../Plat/GameMgrs/RecordMgr": "RecordMgr",
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "./MahjongDef": "MahjongDef"
  } ],
  MahjongRoomRuleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a4c43yv6uFLMrwU3j9h3xrj", "MahjongRoomRuleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var BetMgr_1 = require("../../Plat/GameMgrs/BetMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.roominfo = null;
        _this.roomvalue = null;
        _this.roomindex = null;
        _this.roominfo = RoomMgr_1.default.getInstance().roominfo;
        _this.roomindex = RoomMgr_1.default.getInstance().getRoundIndex() + 1;
        2 != _this.roominfo.roomtype && 3 != _this.roominfo.roomtype || (_this.roomvalue = RoomMgr_1.default.getInstance().getFangKaCfg());
        return _this;
      }
      Model.prototype.clear = function() {};
      Model.prototype.recover = function() {
        this.clear();
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          panel_rule: null,
          lbl_title: null,
          lbl_rule: null,
          panel_round: null,
          lbl_di: null,
          lbl_roundindex: null,
          panel_roomid: null,
          lbl_roomID: null,
          panel_gl: null,
          lbl_gl_title: null,
          lbl_gl_rule: null,
          lbl_gl_roomID: null,
          lbl_gl_di: null,
          lbl_gl_roundindex: null
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.panel_rule = ctrl.panel_rule;
        this.ui.lbl_title = ctrl.panel_rule.getChildByName("lbl_title").getComponent(cc.Label);
        this.ui.lbl_rule = ctrl.panel_rule.getChildByName("lbl_rule").getComponent(cc.Label);
        this.ui.panel_round = ctrl.panel_round;
        this.ui.lbl_di = ctrl.panel_round.getChildByName("lbl_di").getComponent(cc.Label);
        this.ui.lbl_roundindex = ctrl.panel_round.getChildByName("lbl_roundindex").getComponent(cc.Label);
        this.ui.panel_roomid = ctrl.panel_roomid;
        this.ui.lbl_roomID = ctrl.panel_roomid.getChildByName("lbl_roomID").getComponent(cc.Label);
        this.ui.panel_gl = ctrl.panel_gl;
        this.ui.lbl_gl_title = ctrl.panel_gl.getChildByName("lbl_gl_title").getComponent(cc.Label);
        this.ui.lbl_gl_rule = ctrl.panel_gl.getChildByName("lbl_gl_rule").getComponent(cc.Label);
        this.ui.lbl_gl_roomID = ctrl.panel_gl.getChildByName("lbl_gl_roomID").getComponent(cc.Label);
        this.ui.lbl_gl_di = ctrl.panel_gl.getChildByName("lbl_gl_di").getComponent(cc.Label);
        this.ui.lbl_gl_roundindex = ctrl.panel_gl.getChildByName("lbl_gl_roundindex").getComponent(cc.Label);
        this.clear();
        this.initRoundInfo();
        this.initRoomId();
      };
      View.prototype.initRoundInfo = function() {
        this.updateRoundInfo();
        switch (this.model.roominfo.roomtype) {
         case 1:
          this.ui.panel_round.active = false;
          this.ui.panel_rule.active = false;
          break;

         case 2:
         case 3:
          this.ui.panel_round.active = true;
          this.ui.panel_rule.active = true;
          this.model.roomvalue.b_yike > 0;
        }
      };
      View.prototype.updateRoundInfo = function() {
        var gameName = BetMgr_1.default.getInstance().getGameName();
        var gameid = BetMgr_1.default.getInstance().getGameId();
        console.log("gameid", gameid);
        if (this.model.roomvalue.b_yike > 0) {
          this.ui.lbl_title.string = gameName + "-一课";
          this.ui.lbl_gl_title.string = gameName + "-一课";
        } else {
          this.ui.lbl_title.string = gameName + "-" + this.model.roomvalue.v_roundcount + "局";
          this.ui.lbl_gl_title.string = gameName + "-" + this.model.roomvalue.v_roundcount + "局";
        }
        if (1 == gameid) {
          var index = "游金" + this.model.roomvalue.t_youjin + "倍  底分" + this.model.roomvalue.v_difen + "水";
          this.ui.lbl_rule.string = 1 == this.model.roomvalue.v_youjintype ? "明游  " + index : "暗游  " + index;
          this.ui.lbl_gl_rule.string = 1 == this.model.roomvalue.v_youjintype ? "明游  " + index : "暗游  " + index;
        } else if (5 == gameid) {
          var fanghu = "";
          0 == this.model.roomvalue.v_fangfu ? fanghu = "放胡双倍单赔  " : 1 == this.model.roomvalue.v_fangfu ? fanghu = "放胡单赔  " : 2 == this.model.roomvalue.v_fangfu && (fanghu = "放胡全赔  ");
          this.ui.lbl_rule.string = fanghu + (1 == this.model.roomvalue.b_qinghunyise ? "清混一色  " : "") + (1 == this.model.roomvalue.b_daihuapai ? "带花牌  " : "") + (1 == this.model.roomvalue.b_jinlong ? "金龙  " : "");
          this.ui.lbl_gl_rule.string = fanghu + (1 == this.model.roomvalue.b_qinghunyise ? "清混一色  " : "") + (1 == this.model.roomvalue.b_daihuapai ? "带花牌  " : "") + (1 == this.model.roomvalue.b_jinlong ? "金龙  " : "");
        } else if (6 == gameid) {
          this.ui.lbl_rule.string = (0 == this.model.roomvalue.b_quanzimo ? "半自摸玩法  " : "全自摸玩法  ") + (2 == this.model.roomvalue.t_zhuangfanbei ? "庄家翻倍  " : "庄家不翻倍  ") + "游金" + this.model.roomvalue.t_youjin + "倍";
          this.ui.lbl_gl_rule.string = (0 == this.model.roomvalue.b_quanzimo ? "半自摸玩法  " : "全自摸玩法  ") + (2 == this.model.roomvalue.t_zhuangfanbei ? "庄家翻倍  " : "庄家不翻倍  ") + "游金" + this.model.roomvalue.t_youjin + "倍";
        }
        this.ui.lbl_roundindex.string = this.model.roomindex;
        this.ui.lbl_gl_roundindex.string = this.model.roomindex;
      };
      View.prototype.initRoomId = function() {
        switch (this.model.roominfo.roomtype) {
         case 1:
          this.ui.panel_roomid.active = false;
          break;

         case 2:
         case 3:
          console.log("调用了这里i", this.model.roominfo.roomtype);
          this.ui.panel_roomid.active = true;
          this.ui.lbl_roomID.string = "" + this.model.roominfo.password;
          this.ui.lbl_gl_roomID.string = "" + this.model.roominfo.password;
        }
      };
      View.prototype.recover = function() {
        this.clear();
      };
      View.prototype.clear = function() {};
      return View;
    }(BaseView_1.default);
    var MahjongRoomRuleCtrl = function(_super) {
      __extends(MahjongRoomRuleCtrl, _super);
      function MahjongRoomRuleCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.panel_rule = null;
        _this.panel_roomid = null;
        _this.panel_round = null;
        _this.panel_gl = null;
        return _this;
      }
      MahjongRoomRuleCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      MahjongRoomRuleCtrl.prototype.start = function() {};
      MahjongRoomRuleCtrl.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
      };
      MahjongRoomRuleCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onStartGame: this.onStartGame,
          onSyncData: this.onSyncData,
          "connector.entryHandler.enterRoom": this.connector_entryHandler_enterRoom,
          "room.roomHandler.nextRound": this.room_roomHandler_nextRound
        };
      };
      MahjongRoomRuleCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {};
      };
      MahjongRoomRuleCtrl.prototype.connectUi = function() {};
      MahjongRoomRuleCtrl.prototype.room_roomHandler_nextRound = function() {
        this.model.clear();
        this.view.clear();
        this.view.initRoundInfo();
      };
      MahjongRoomRuleCtrl.prototype.connector_entryHandler_enterRoom = function() {
        this.model.clear();
        this.view.clear();
        this.view.initRoundInfo();
      };
      MahjongRoomRuleCtrl.prototype.onStartGame = function() {
        this.view.ui.panel_gl.active = false;
        this.view.updateRoundInfo();
        this.model.roomindex++;
      };
      MahjongRoomRuleCtrl.prototype.onSyncData = function() {
        RoomMgr_1.default.getInstance().isGameStarted() && (this.view.ui.panel_gl.active = false);
      };
      __decorate([ property({
        tooltip: "房间规则",
        type: cc.Node
      }) ], MahjongRoomRuleCtrl.prototype, "panel_rule", void 0);
      __decorate([ property({
        tooltip: "房间号",
        type: cc.Node
      }) ], MahjongRoomRuleCtrl.prototype, "panel_roomid", void 0);
      __decorate([ property({
        tooltip: "第几局",
        type: cc.Node
      }) ], MahjongRoomRuleCtrl.prototype, "panel_round", void 0);
      __decorate([ property({
        tooltip: "准备前高亮数字",
        type: cc.Node
      }) ], MahjongRoomRuleCtrl.prototype, "panel_gl", void 0);
      MahjongRoomRuleCtrl = __decorate([ ccclass ], MahjongRoomRuleCtrl);
      return MahjongRoomRuleCtrl;
    }(BaseCtrl_1.default);
    exports.default = MahjongRoomRuleCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/BetMgr": "BetMgr",
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView"
  } ],
  MahjongSeatCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6d14dbVAiROO5JGEx6gZrZG", "MahjongSeatCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var UiMgr_1 = require("../../Plat/GameMgrs/UiMgr");
    var QuickAudioCfg_1 = require("../../Plat/CfgMgrs/QuickAudioCfg");
    var UserMgr_1 = require("../../Plat/GameMgrs/UserMgr");
    var MahjongDef_1 = require("./MahjongDef");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.seatid = null;
        _this.uid = null;
        _this.logicseatid = null;
        _this.userinfo = null;
        _this.hucount = 0;
        _this.player = null;
        _this.isZhuangJia = false;
        _this.lianzhuang = 0;
        _this.voiceState = null;
        _this.score = 0;
        _this.cheatList = [ false, false, false ];
        _this.mahjongResMgr = RoomMgr_1.default.getInstance().getResMgr();
        _this.mahjongLogic = RoomMgr_1.default.getInstance().getLogic();
        _this.mahjongDef = RoomMgr_1.default.getInstance().getDef();
        _this.mahjongAudio = RoomMgr_1.default.getInstance().getAudio();
        _this.ipWarnning = false;
        _this.distWarnning = false;
        _this.waiguaWarnning = false;
        _this.prepared = false;
        return _this;
      }
      Model.prototype.updatePrepared = function() {
        this.prepared = RoomMgr_1.default.getInstance().preparemap[this.logicseatid];
      };
      Model.prototype.initSeat = function(id) {
        this.seatid = id;
      };
      Model.prototype.clear = function() {
        this.uid = null;
      };
      Model.prototype.updateCheatInfo = function() {
        this.ipWarnning = RoomMgr_1.default.getInstance().getIpWarnningBySeatId(this.logicseatid);
        this.distWarnning = RoomMgr_1.default.getInstance().getDistWarnningBySeatId(this.logicseatid);
      };
      Model.prototype.updateVoiceState = function() {
        this.voiceState = RoomMgr_1.default.getInstance().getVoiceState(this.logicseatid);
      };
      Model.prototype.updateLogicId = function() {
        this.logicseatid = RoomMgr_1.default.getInstance().getLogicSeatId(this.seatid);
        if (null == this.logicseatid) return;
        this.player = this.mahjongLogic.getInstance().players[this.logicseatid];
        this.uid = RoomMgr_1.default.getInstance().users[this.logicseatid];
        console.log("this.logicseatid=", this.logicseatid, "this.uid=", this.uid);
        this.voiceState = RoomMgr_1.default.getInstance().getVoiceState(this.logicseatid);
      };
      Model.prototype.updateUserInfo = function() {
        this.userinfo = UserMgr_1.default.getInstance().getUserById(this.uid);
        console.log("this.userinfo=", this.userinfo, "this.uid=", this.uid);
      };
      Model.prototype.updateScore = function() {
        var roomvalue = RoomMgr_1.default.getInstance().getFangKaCfg();
        var bunchInfo = RoomMgr_1.default.getInstance().getBunchInfo();
        if (null == bunchInfo) roomvalue.b_yike ? this.score = bunchInfo.scores[this.logicseatid] : this.score = 0; else if (roomvalue.b_yike) this.score = bunchInfo.scores[this.logicseatid]; else {
          console.log("重新获取玩家的信息", bunchInfo);
          var leijiItem = bunchInfo.leiji[this.logicseatid];
          this.score = leijiItem.zongshuying;
        }
      };
      Model.prototype.updateZhuang = function() {
        this.isZhuangJia = this.mahjongLogic.getInstance().zhuangseat == this.logicseatid;
        this.lianzhuang = 0;
        this.isZhuangJia && (RoomMgr_1.default.getInstance().isFirstRound() ? this.lianzhuang = 0 : this.lianzhuang = RoomMgr_1.default.getInstance().getBunchInfo().lianzhuang);
      };
      Model.prototype.recover = function() {
        this.updateZhuang();
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          img_frame: null,
          img_head: null,
          lbl_score: null,
          img_zhuang: null,
          img_gps: null,
          img_ip: null,
          img_cheat: null,
          img_voicestate: null,
          lbl_lianzhuang: null,
          node_lianzhuang: null,
          node_prepared: null,
          node_chat: null,
          bg_chat: null,
          img_exp: null,
          lab_chat: null,
          ExpressionAtlas: null
        };
        _this.zhuang_originpos = null;
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_prepared = ctrl.node_prepared;
        this.ui.img_frame = ctrl.img_frame;
        this.ui.img_head = ctrl.img_head;
        this.ui.lbl_score = ctrl.lbl_score;
        this.ui.img_zhuang = ctrl.img_zhuang;
        this.ui.img_gps = ctrl.img_gps;
        this.ui.img_ip = ctrl.img_ip;
        this.ui.img_cheat = ctrl.img_cheat;
        this.ui.img_voicestate = ctrl.img_voicestate;
        this.ui.lbl_lianzhuang = ctrl.lbl_lianzhuang;
        this.ui.node_lianzhuang = ctrl.node_lianzhuang;
        this.ui.lbl_score.string = this.model.score;
        this.ui.lbl_lianzhuang.string = this.model.lianzhuang;
        this.ui.node_chat = ctrl.node_chat;
        this.ui.img_exp = ctrl.img_exp;
        this.ui.lab_chat = ctrl.lab_chat;
        this.ui.ExpressionAtlas = ctrl.ExpressionAtlas;
        this.ui.node_chat.active = false;
        this.ui.node_prepared.active = false;
        this.ui.bg_chat = this.ui.node_chat.getChildByName("chat_background").getChildByName("background");
        this.zhuang_originpos = this.ui.img_zhuang.getPosition();
        this.clear();
      };
      View.prototype.updatePrepared = function() {
        this.ui.node_prepared.active = this.model.prepared;
      };
      View.prototype.clear = function() {
        this.node.active = false;
        this.ui.img_zhuang.active = false;
        this.ui.img_zhuang.position = this.zhuang_originpos;
        this.ui.img_voicestate.active = false;
        this.ui.lbl_score.string = "";
        this.ui.img_ip.active = false;
        this.ui.img_gps.active = false;
        this.ui.img_cheat.active = false;
        this.ui.node_lianzhuang.active = false;
      };
      View.prototype.updateZhuang = function() {
        this.ui.img_zhuang.active = this.model.isZhuangJia;
        this.ui.node_lianzhuang.active = this.model.lianzhuang > 0;
        this.ui.lbl_lianzhuang.string = this.model.lianzhuang;
      };
      View.prototype.moveZhuang = function() {
        var _this = this;
        var pos = this.ui.img_zhuang.getPosition();
        var worldPos = this.ui.img_zhuang.parent.convertToNodeSpace(cc.v2(640, 400));
        this.ui.img_zhuang.setPosition(worldPos);
        this.ui.img_zhuang.runAction(cc.moveTo(.5, pos), cc.callFunc(function() {
          _this.ui.img_zhuang.setPosition(pos);
        }));
      };
      View.prototype.updateInfo = function() {
        this.node.active = true;
        var userinfo = this.model.userinfo;
        console.log("更新头像id=", userinfo);
        UiMgr_1.default.getInstance().setUserHead(this.ui.img_head, userinfo.headid, userinfo.headurl);
      };
      View.prototype.updateScore = function() {
        this.ui.lbl_score.string = this.model.score;
      };
      View.prototype.updateVoiceState = function() {
        var _this = this;
        var statepic = {
          1: "img_shuohua",
          2: "img_bofang",
          3: "img_voice_close"
        };
        var pic = statepic[this.model.voiceState];
        pic ? cc.loader.loadRes("Plat/GameRoomCommon/RoomUi/" + pic, cc.SpriteFrame, function(err, sprite) {
          if (err) return cc.error("no find Icons/" + pic);
          _this.ui.img_voicestate.active = true;
          0 == _this.model.seatid && (_this.ui.img_voicestate.active = false);
          _this.ui.img_voicestate.getComponent(cc.Sprite).spriteFrame = sprite;
        }) : this.ui.img_voicestate.active = false;
      };
      View.prototype.updateCheat = function() {
        this.model.ipWarnning && (this.ui.img_ip.active = true);
        this.model.distWarnning && (this.ui.img_gps.active = true);
      };
      View.prototype.hidePrepareFlag = function() {
        this.ui.node_prepared.active = false;
      };
      View.prototype.addChatMsg = function() {};
      return View;
    }(BaseView_1.default);
    var MahjongSeatCtrl = function(_super) {
      __extends(MahjongSeatCtrl, _super);
      function MahjongSeatCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.seatId = 0;
        _this.img_frame = null;
        _this.img_head = null;
        _this.lbl_score = null;
        _this.img_zhuang = null;
        _this.img_gps = null;
        _this.img_ip = null;
        _this.img_cheat = null;
        _this.img_voicestate = null;
        _this.lbl_lianzhuang = null;
        _this.node_lianzhuang = null;
        _this.node_prepared = null;
        _this.node_chat = null;
        _this.img_exp = null;
        _this.lab_chat = null;
        _this.ExpressionAtlas = null;
        _this.delay_time = null;
        return _this;
      }
      MahjongSeatCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.model.initSeat(this.seatId);
      };
      MahjongSeatCtrl.prototype.clearTimer = function() {
        null != this.delay_time && clearTimeout(this.delay_time);
        this.delay_time = null;
      };
      MahjongSeatCtrl.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
      };
      MahjongSeatCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onEnterRoom: this.onEnterRoom,
          onLeaveRoom: this.onLeaveRoom,
          onSyncData: this.onSyncData,
          onStartGame: this.onStartGame,
          onProcess: this.onProcess,
          onPrepare: this.onPrepare,
          onCancelPrepare: this.onCancelPrepare,
          "http.reqUsers": this.http_reqUsers,
          "http.reqCheating": this.http_reqCheating,
          onVoiceStateChanged: this.onVoiceStateChanged,
          "http.reqSettle": this.http_reqSettle,
          onReEnterRoom: this.onReEnterRoom,
          "room.roomHandler.nextRound": this.room_roomHandler_nextRound,
          onRoomChat: this.onRoomChat
        };
      };
      MahjongSeatCtrl.prototype.onReEnterRoom = function(msg) {
        if (null == this.model.logicseatid) return;
        this.model.updatePrepared();
        this.view.updatePrepared();
      };
      MahjongSeatCtrl.prototype.room_roomHandler_nextRound = function(msg) {
        if (this.model.logicseatid != RoomMgr_1.default.getInstance().getMySeatId()) return;
        this.model.updatePrepared();
        this.view.updatePrepared();
      };
      MahjongSeatCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          usersUpdated: this.usersUpdated
        };
      };
      MahjongSeatCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.img_head, this.showUserDetail, "点击显示用户详情");
      };
      MahjongSeatCtrl.prototype.start = function() {};
      MahjongSeatCtrl.prototype.onStartGame = function(msg) {
        if (null == this.model.logicseatid) return;
        this.view.hidePrepareFlag();
      };
      MahjongSeatCtrl.prototype.onCancelPrepare = function(msg) {
        if (null == this.model.logicseatid) return;
        this.model.updatePrepared();
        this.view.updatePrepared();
      };
      MahjongSeatCtrl.prototype.onPrepare = function(msg) {
        if (null == this.model.logicseatid) return;
        this.model.updatePrepared();
        this.view.updatePrepared();
      };
      MahjongSeatCtrl.prototype.http_reqSettle = function() {
        if (null == this.model.logicseatid) return;
        this.model.updateScore();
        this.view.updateScore();
      };
      MahjongSeatCtrl.prototype.onSyncData = function(msg) {
        if (null == this.model.logicseatid) return;
        this.model.recover();
        this.view.updateZhuang();
      };
      MahjongSeatCtrl.prototype.onProcess = function(msg) {
        if (null == this.model.logicseatid) return;
        msg.process == MahjongDef_1.MahjongDef.process_dingzhuang ? this.process_dingzhuang(msg) : msg.process == MahjongDef_1.MahjongDef.process_ready ? this.process_ready(msg) : msg.process == MahjongDef_1.MahjongDef.process_fapai && RoomMgr_1.default.getInstance().getVideoMode() && this.process_dingzhuang(msg);
      };
      MahjongSeatCtrl.prototype.process_ready = function(msg) {
        if (null == this.model.logicseatid) return;
        if (!RoomMgr_1.default.getInstance().isFirstRound()) {
          this.model.updateZhuang();
          this.view.updateZhuang();
        }
      };
      MahjongSeatCtrl.prototype.onVoiceStateChanged = function(msg) {
        if (this.model.logicseatid != msg.seatid) return;
        console.log("更改了声音显示=", msg);
        this.model.updateVoiceState();
        this.view.updateVoiceState();
      };
      MahjongSeatCtrl.prototype.usersUpdated = function(msg) {
        console.log("收到全聚德usersUpdated");
        this.model.updateLogicId();
        this.view.clear();
        if (null == this.model.logicseatid) return;
        this.model.updateVoiceState();
        this.view.updateVoiceState();
      };
      MahjongSeatCtrl.prototype.process_dingzhuang = function(msg) {
        if (null == this.model.logicseatid) return;
        this.model.updateZhuang();
        this.view.updateZhuang();
        this.view.moveZhuang();
      };
      MahjongSeatCtrl.prototype.onLeaveRoom = function(msg) {
        if (this.model.logicseatid != msg.seatid) return;
        this.model.clear();
        this.view.clear();
      };
      MahjongSeatCtrl.prototype.onEnterRoom = function(msg) {
        if (this.model.logicseatid != msg.seatid) return;
        this.model.uid = msg.user;
        this.model.updateVoiceState();
        this.view.updateVoiceState();
      };
      MahjongSeatCtrl.prototype.http_reqCheating = function(msg) {
        if (null == this.model.logicseatid) return;
        if (this.model.logicseatid == RoomMgr_1.default.getInstance().getMySeatId()) return;
        this.model.updateCheatInfo();
        this.view.updateCheat();
      };
      MahjongSeatCtrl.prototype.onRoomChat = function(msg) {
        var _this = this;
        var id = msg.id;
        var seatId = msg.seatid;
        var type = msg.type;
        if (seatId != this.model.logicseatid) return;
        this.ui.node_chat.active = true;
        if (1 == type) {
          this.ui.img_exp.node.active = false;
          this.ui.lab_chat.node.active = true;
          var list = QuickAudioCfg_1.default.getInstance().getCfg();
          var value = list[id - 1].text;
          this.ui.lab_chat.string = value;
          this.ui.bg_chat.width = this.ui.lab_chat.node.width + 30;
          var sex = this.model.userinfo.sex;
          QuickAudioCfg_1.default.getInstance().play(id, sex);
        } else if (2 == type) {
          this.ui.lab_chat.node.active = false;
          this.ui.img_exp.node.active = true;
          this.ui.img_exp.spriteFrame = this.ui.ExpressionAtlas.getSpriteFrame(id);
          this.ui.bg_chat.width = 50;
        }
        this.clearTimer();
        this.delay_time = setTimeout(function() {
          clearTimeout(_this.delay_time);
          _this.node_chat.active = false;
        }, 2e3);
      };
      MahjongSeatCtrl.prototype.http_reqUsers = function() {
        console.log("获取了用户=", this.model.uid);
        if (null == this.model.uid) return;
        this.model.updateUserInfo();
        this.view.updateInfo();
        this.model.updateScore();
        this.view.updateScore();
      };
      MahjongSeatCtrl.prototype.showUserDetail = function() {
        var _this = this;
        if (null != this.model.uid) var ctrl = this.start_sub_module(G_MODULE.RoomUserInfo, function(uiCtrl) {
          uiCtrl.setUid(_this.model.uid);
        }, "RoomUserInfoCtrl");
      };
      __decorate([ property ], MahjongSeatCtrl.prototype, "seatId", void 0);
      __decorate([ property(cc.Node) ], MahjongSeatCtrl.prototype, "img_frame", void 0);
      __decorate([ property(cc.Node) ], MahjongSeatCtrl.prototype, "img_head", void 0);
      __decorate([ property(cc.Label) ], MahjongSeatCtrl.prototype, "lbl_score", void 0);
      __decorate([ property(cc.Node) ], MahjongSeatCtrl.prototype, "img_zhuang", void 0);
      __decorate([ property(cc.Node) ], MahjongSeatCtrl.prototype, "img_gps", void 0);
      __decorate([ property(cc.Node) ], MahjongSeatCtrl.prototype, "img_ip", void 0);
      __decorate([ property(cc.Node) ], MahjongSeatCtrl.prototype, "img_cheat", void 0);
      __decorate([ property(cc.Node) ], MahjongSeatCtrl.prototype, "img_voicestate", void 0);
      __decorate([ property(cc.Label) ], MahjongSeatCtrl.prototype, "lbl_lianzhuang", void 0);
      __decorate([ property(cc.Node) ], MahjongSeatCtrl.prototype, "node_lianzhuang", void 0);
      __decorate([ property(cc.Node) ], MahjongSeatCtrl.prototype, "node_prepared", void 0);
      __decorate([ property(cc.Node) ], MahjongSeatCtrl.prototype, "node_chat", void 0);
      __decorate([ property(cc.Sprite) ], MahjongSeatCtrl.prototype, "img_exp", void 0);
      __decorate([ property(cc.Label) ], MahjongSeatCtrl.prototype, "lab_chat", void 0);
      __decorate([ property({
        tooltip: "表情图集",
        type: cc.SpriteAtlas
      }) ], MahjongSeatCtrl.prototype, "ExpressionAtlas", void 0);
      MahjongSeatCtrl = __decorate([ ccclass ], MahjongSeatCtrl);
      return MahjongSeatCtrl;
    }(BaseCtrl_1.default);
    exports.default = MahjongSeatCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/CfgMgrs/QuickAudioCfg": "QuickAudioCfg",
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/GameMgrs/UiMgr": "UiMgr",
    "../../Plat/GameMgrs/UserMgr": "UserMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "./MahjongDef": "MahjongDef"
  } ],
  MahjongSwitchCardWithPlayerGmCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8d097pyA1ZAOooSr7r8vMnK", "MahjongSwitchCardWithPlayerGmCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var MahjongDef_1 = require("./MahjongDef");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.roomCards = [];
        _this.handCard = null;
        _this.oppositeCard = null;
        _this.cardsArr = [];
        _this.targetSeatId = null;
        _this.mahjongResMgr = RoomMgr_1.default.getInstance().getResMgr();
        _this.mahjongLogic = RoomMgr_1.default.getInstance().getLogic();
        _this.mahjongDef = RoomMgr_1.default.getInstance().getDef();
        return _this;
      }
      Model.prototype.setTargetSeatId = function(seatId) {
        this.targetSeatId = seatId;
      };
      Model.prototype.getMyCards = function() {
        var seatId = RoomMgr_1.default.getInstance().getMySeatId();
        var players = this.mahjongLogic.getInstance().players;
        var player = players[seatId];
        return player.handcard;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          prefab_MahjongItem: null,
          node_MyCards: null,
          node_OppositeMahjong: null,
          node_Close: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_OppositeMahjong = ctrl.Node_OppositeMahjong;
        this.ui.node_MyCards = ctrl.Node_MyMahjong;
        this.ui.node_Close = ctrl.Node_Close;
        this.ui.prefab_MahjongItem = ctrl.Prefab_MahjongItem;
        this.ui.node_MyCards.removeAllChildren();
        this.ui.node_OppositeMahjong.removeAllChildren();
      };
      View.prototype.createMahjong = function(id, parent) {
        var node = cc.instantiate(this.ui.prefab_MahjongItem);
        var face = node.getChildByName("MaJiang");
        face.getComponent(cc.Sprite).spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(id);
        parent.addChild(node);
        return node;
      };
      return View;
    }(BaseView_1.default);
    var QzmjSwitchCardWithPlayerGmCtrl = function(_super) {
      __extends(QzmjSwitchCardWithPlayerGmCtrl, _super);
      function QzmjSwitchCardWithPlayerGmCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.Node_MyMahjong = null;
        _this.Node_OppositeMahjong = null;
        _this.Prefab_MahjongItem = null;
        _this.Node_Close = null;
        return _this;
      }
      QzmjSwitchCardWithPlayerGmCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.initMyMahjong();
      };
      QzmjSwitchCardWithPlayerGmCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "room.roomHandler.gmReq": this.room_roomHandler_gmReq.bind(this),
          onGmOp: this.onGmOp
        };
      };
      QzmjSwitchCardWithPlayerGmCtrl.prototype.defineGlobalEvents = function() {};
      QzmjSwitchCardWithPlayerGmCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.node_Close, this.Node_Close_cb, "点击了关闭");
        var nodes = this.ui.node_MyCards.children || [];
        for (var i = 0; i < nodes.length; i++) this.connect(G_UiType.image, nodes[i], this.touchMeCards.bind(this, i), "点击了我的麻将" + this.model.getMyCards()[i]);
        nodes = this.ui.node_OppositeMahjong.children || [];
        for (var i = 0; i < nodes.length; i++) this.connect(G_UiType.image, nodes[i], this.touchOtherCards.bind(this, i), "点击了别的麻将" + this.model.roomCards[i]);
      };
      QzmjSwitchCardWithPlayerGmCtrl.prototype.start = function() {};
      QzmjSwitchCardWithPlayerGmCtrl.prototype.setTargetSeatId = function(seatId) {
        this.model.setTargetSeatId(seatId);
        var msg = {
          reqtype: MahjongDef_1.MahjongDef.gmreq_cards,
          data: {
            target: seatId
          }
        };
        this.model.mahjongLogic.getInstance().gmReq(msg);
      };
      QzmjSwitchCardWithPlayerGmCtrl.prototype.room_roomHandler_gmReq = function(msg) {
        console.log(msg);
        this.model.roomCards = msg.data.cards;
        var cards = msg.data.cards;
        for (var i = 0; i < cards.length; i++) var node = this.view.createMahjong(cards[i], this.ui.node_OppositeMahjong);
        this.connectUi();
      };
      QzmjSwitchCardWithPlayerGmCtrl.prototype.onGmOp = function(msg) {
        console.log(msg);
        this.finish();
      };
      QzmjSwitchCardWithPlayerGmCtrl.prototype.Node_Close_cb = function() {
        this.finish();
      };
      QzmjSwitchCardWithPlayerGmCtrl.prototype.emitChangeCard = function() {
        if (null != this.model.handCard && null != this.model.oppositeCard) {
          var msg = {
            optype: MahjongDef_1.MahjongDef.gmop_changecard,
            data: {
              src: this.model.handCard,
              dest: this.model.oppositeCard,
              seatId: this.model.targetSeatId
            }
          };
          this.model.mahjongLogic.getInstance().gmOp(msg);
          this.model.handCard = null;
          this.model.oppositeCard = null;
        }
      };
      QzmjSwitchCardWithPlayerGmCtrl.prototype.touchMeCards = function(id) {
        this.model.handCard = this.model.getMyCards()[id];
        var node = this.ui.node_MyCards.children[id];
        this.touchEffect(this.ui.node_MyCards.children, .8);
        node.setScale(new cc.Vec2(1, 1));
        this.emitChangeCard();
      };
      QzmjSwitchCardWithPlayerGmCtrl.prototype.touchOtherCards = function(id) {
        this.model.oppositeCard = this.model.roomCards[id];
        var node = this.ui.node_OppositeMahjong.children[id];
        this.touchEffect(this.ui.node_OppositeMahjong.children, .8);
        node.setScale(new cc.Vec2(1, 1));
        this.emitChangeCard();
      };
      QzmjSwitchCardWithPlayerGmCtrl.prototype.touchEffect = function(nodes, scale) {
        for (var i = 0; i < nodes.length; i++) nodes[i].setScale(new cc.Vec2(scale, scale));
      };
      QzmjSwitchCardWithPlayerGmCtrl.prototype.initMyMahjong = function() {
        var cards = this.model.getMyCards();
        for (var i = 0; i < cards.length; i++) var node = this.view.createMahjong(cards[i], this.ui.node_MyCards);
        this.connectUi();
      };
      __decorate([ property({
        tooltip: "我方的麻将位置",
        type: cc.Node
      }) ], QzmjSwitchCardWithPlayerGmCtrl.prototype, "Node_MyMahjong", void 0);
      __decorate([ property({
        tooltip: "对方的麻将位置",
        type: cc.Node
      }) ], QzmjSwitchCardWithPlayerGmCtrl.prototype, "Node_OppositeMahjong", void 0);
      __decorate([ property({
        tooltip: "麻将预制资源",
        type: cc.Prefab
      }) ], QzmjSwitchCardWithPlayerGmCtrl.prototype, "Prefab_MahjongItem", void 0);
      __decorate([ property({
        tooltip: "关闭",
        type: cc.Node
      }) ], QzmjSwitchCardWithPlayerGmCtrl.prototype, "Node_Close", void 0);
      QzmjSwitchCardWithPlayerGmCtrl = __decorate([ ccclass ], QzmjSwitchCardWithPlayerGmCtrl);
      return QzmjSwitchCardWithPlayerGmCtrl;
    }(BaseCtrl_1.default);
    exports.default = QzmjSwitchCardWithPlayerGmCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "./MahjongDef": "MahjongDef"
  } ],
  MahjongSwitchCardWithWallGmCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9bb4ef6N/lIgYS9DdfGtni6", "MahjongSwitchCardWithWallGmCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var MahjongDef_1 = require("./MahjongDef");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.roomCards = [];
        _this.handCard = null;
        _this.oppositeCard = null;
        _this.cardsArr = [];
        _this.mahjongResMgr = RoomMgr_1.default.getInstance().getResMgr();
        _this.mahjongLogic = RoomMgr_1.default.getInstance().getLogic();
        _this.mahjongDef = RoomMgr_1.default.getInstance().getDef();
        return _this;
      }
      Model.prototype.getMyCards = function() {
        var seatId = RoomMgr_1.default.getInstance().getMySeatId();
        var players = this.mahjongLogic.getInstance().players;
        var player = players[seatId];
        return player.handcard;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          prefab_MahjongItem: null,
          node_MyCards: null,
          node_OppositeMahjong: null,
          node_Close: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_OppositeMahjong = ctrl.Node_OppositeMahjong;
        this.ui.node_MyCards = ctrl.Node_MyMahjong;
        this.ui.node_Close = ctrl.Node_Close;
        this.ui.prefab_MahjongItem = ctrl.Prefab_MahjongItem;
        this.ui.node_MyCards.removeAllChildren();
        this.ui.node_OppositeMahjong.removeAllChildren();
      };
      View.prototype.createMahjong = function(id, parent) {
        var node = cc.instantiate(this.ui.prefab_MahjongItem);
        var face = node.getChildByName("MaJiang");
        face.getComponent(cc.Sprite).spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(id);
        parent.addChild(node);
        return node;
      };
      return View;
    }(BaseView_1.default);
    var QzmjSwitchCardWithWallGmCtrl = function(_super) {
      __extends(QzmjSwitchCardWithWallGmCtrl, _super);
      function QzmjSwitchCardWithWallGmCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.Node_MyMahjong = null;
        _this.Node_OppositeMahjong = null;
        _this.Prefab_MahjongItem = null;
        _this.Node_Close = null;
        return _this;
      }
      QzmjSwitchCardWithWallGmCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.initMyMahjong();
      };
      QzmjSwitchCardWithWallGmCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "room.roomHandler.gmReq": this.room_roomHandler_gmReq.bind(this),
          onGmOp: this.onGmOp
        };
      };
      QzmjSwitchCardWithWallGmCtrl.prototype.defineGlobalEvents = function() {};
      QzmjSwitchCardWithWallGmCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.node_Close, this.Node_Close_cb, "点击了关闭");
        var nodes = this.ui.node_MyCards.children || [];
        for (var i = 0; i < nodes.length; i++) this.connect(G_UiType.image, nodes[i], this.touchMeCards.bind(this, i), "点击了我的麻将" + this.model.getMyCards()[i]);
        nodes = this.ui.node_OppositeMahjong.children || [];
        for (var i = 0; i < nodes.length; i++) this.connect(G_UiType.image, nodes[i], this.touchOtherCards.bind(this, i), "点击了别的麻将" + this.model.roomCards[i]);
      };
      QzmjSwitchCardWithWallGmCtrl.prototype.start = function() {
        var msg = {
          reqtype: MahjongDef_1.MahjongDef.gmreq_cards,
          data: {}
        };
        this.model.mahjongLogic.getInstance().gmReq(msg);
      };
      QzmjSwitchCardWithWallGmCtrl.prototype.room_roomHandler_gmReq = function(msg) {
        console.log(msg);
        this.model.roomCards = msg.data.cards;
        var cards = msg.data.cards;
        for (var i = 0; i < cards.length; i++) var node = this.view.createMahjong(cards[i], this.ui.node_OppositeMahjong);
        this.connectUi();
      };
      QzmjSwitchCardWithWallGmCtrl.prototype.onGmOp = function(msg) {
        console.log(msg);
        this.finish();
      };
      QzmjSwitchCardWithWallGmCtrl.prototype.Node_Close_cb = function() {
        this.finish();
      };
      QzmjSwitchCardWithWallGmCtrl.prototype.emitChangeCard = function() {
        if (null != this.model.handCard && null != this.model.oppositeCard) {
          var msg = {
            optype: MahjongDef_1.MahjongDef.gmop_changecard,
            data: {
              src: this.model.handCard,
              dest: this.model.oppositeCard
            }
          };
          this.model.mahjongLogic.getInstance().gmOp(msg);
          this.model.handCard = null;
          this.model.oppositeCard = null;
        }
      };
      QzmjSwitchCardWithWallGmCtrl.prototype.touchMeCards = function(id) {
        this.model.handCard = this.model.getMyCards()[id];
        var node = this.ui.node_MyCards.children[id];
        this.touchEffect(this.ui.node_MyCards.children, .8);
        node.setScale(new cc.Vec2(1, 1));
        this.emitChangeCard();
      };
      QzmjSwitchCardWithWallGmCtrl.prototype.touchOtherCards = function(id) {
        this.model.oppositeCard = this.model.roomCards[id];
        var node = this.ui.node_OppositeMahjong.children[id];
        this.touchEffect(this.ui.node_OppositeMahjong.children, .8);
        node.setScale(new cc.Vec2(1, 1));
        this.emitChangeCard();
      };
      QzmjSwitchCardWithWallGmCtrl.prototype.touchEffect = function(nodes, scale) {
        for (var i = 0; i < nodes.length; i++) nodes[i].setScale(new cc.Vec2(scale, scale));
      };
      QzmjSwitchCardWithWallGmCtrl.prototype.initMyMahjong = function() {
        var cards = this.model.getMyCards();
        for (var i = 0; i < cards.length; i++) var node = this.view.createMahjong(cards[i], this.ui.node_MyCards);
        this.connectUi();
      };
      __decorate([ property({
        tooltip: "我方的麻将位置",
        type: cc.Node
      }) ], QzmjSwitchCardWithWallGmCtrl.prototype, "Node_MyMahjong", void 0);
      __decorate([ property({
        tooltip: "对方的麻将位置",
        type: cc.Node
      }) ], QzmjSwitchCardWithWallGmCtrl.prototype, "Node_OppositeMahjong", void 0);
      __decorate([ property({
        tooltip: "麻将预制资源",
        type: cc.Prefab
      }) ], QzmjSwitchCardWithWallGmCtrl.prototype, "Prefab_MahjongItem", void 0);
      __decorate([ property({
        tooltip: "关闭",
        type: cc.Node
      }) ], QzmjSwitchCardWithWallGmCtrl.prototype, "Node_Close", void 0);
      QzmjSwitchCardWithWallGmCtrl = __decorate([ ccclass ], QzmjSwitchCardWithWallGmCtrl);
      return QzmjSwitchCardWithWallGmCtrl;
    }(BaseCtrl_1.default);
    exports.default = QzmjSwitchCardWithWallGmCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "./MahjongDef": "MahjongDef"
  } ],
  MailMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a64aeFuJFhP9ZoauMefLXZ8", "MailMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var MailMgr = function(_super) {
      __extends(MailMgr, _super);
      function MailMgr() {
        var _this = _super.call(this) || this;
        _this._mailData = null;
        _this._curReadMailID = null;
        _this.routes = null;
        _this._mailDetail = null;
        _this._mailGetResult = null;
        _this._mailReadResult = null;
        _this.routes = {
          "http.reqMailList": _this.http_reqMailList,
          "http.reqMailInfo": _this.http_reqMailInfo,
          "http.reqMailGet": _this.http_reqMailGet,
          "http.reqMailAllRead": _this.http_reqMailAllRead,
          "http.reqMailAllGet": _this.http_reqMailAllGet
        };
        _this.reqMailList({
          class: 2
        });
        return _this;
      }
      MailMgr.prototype.getTestMailData = function() {
        var localMailData = [ {
          id: 1,
          name: "[系统邮件]",
          detail: "这是一封系统邮件这是一封系统邮件这是一封系统邮件这是一封系统邮件这是一封系统邮件这是一封系统邮件这是一封系统邮件这是一封系统邮件这是一封系统邮件这是一封系统邮件这是一封系统邮件这是一封系统邮件这是一封系统邮件这是一封系统邮件",
          read: false,
          receive: false,
          prize: null
        }, {
          id: 2,
          name: "[好友邮件]",
          detail: "这是一封有附件的好友邮件",
          read: false,
          receive: false,
          prize: {
            gold: {},
            masonry: {},
            exchange: {},
            giftBag: {}
          }
        }, {
          id: 3,
          name: "[抽奖邮件]",
          detail: "这是一封抽奖邮件",
          read: false,
          receive: false,
          prize: null
        }, {
          id: 4,
          name: "[比赛邮件]",
          detail: "这是一封比赛邮件",
          read: false,
          receive: false,
          prize: null
        } ];
        return localMailData;
      };
      MailMgr.prototype.reqMailList = function(msg) {
        console.log("http 请求邮件数据");
        this.send_msg("http.reqMailList", msg);
      };
      MailMgr.prototype.http_reqMailList = function(data) {
        console.log("http 请求回调,收到邮件数据将其存储", data);
        this._mailData = data.maillist;
      };
      MailMgr.prototype.reqMailInfo = function() {
        var emailID = this.getCurReadMailID();
        console.log("阅读ID=" + emailID + "的邮件");
        this.send_msg("http.reqMailInfo", {
          id: emailID
        });
      };
      MailMgr.prototype.http_reqMailInfo = function(data) {
        console.log("阅读邮件结果", data);
        this._mailDetail = data;
        this.updateMailReadStatus();
      };
      MailMgr.prototype.updateMailReadStatus = function() {
        for (var i = 0; i < this._mailData.length; ++i) if (this._mailData[i].id == this._curReadMailID) {
          this._mailData[i].status = 1;
          break;
        }
      };
      MailMgr.prototype.reqMailGet = function() {
        var emailID = this.getCurReadMailID();
        console.log("领取ID=" + emailID + "的邮件邮件奖励");
        this.send_msg("http.reqMailGet", {
          id: emailID
        });
      };
      MailMgr.prototype.http_reqMailGet = function(data) {
        console.log("邮件奖励领取结果", data);
        this._mailGetResult = data;
      };
      MailMgr.prototype.reqMailAllRead = function(msg) {
        console.log("阅读所有邮件");
        this.send_msg("http.reqMailAllRead", {
          id: msg.toString()
        });
      };
      MailMgr.prototype.http_reqMailAllRead = function(data) {
        console.log("阅读所有邮件结果", data);
        this._mailReadResult = data;
      };
      MailMgr.prototype.reqMailAllGet = function(msg) {
        console.log("领取所有邮件奖励");
        this.send_msg("http.reqMailAllGet", {
          id: msg.toString()
        });
      };
      MailMgr.prototype.http_reqMailAllGet = function(data) {
        console.log("领取所有邮件奖励结果", data);
        this._mailGetResult = data;
      };
      MailMgr.prototype.filterMailData = function(mailItemData, localMailData) {
        mailItemData.prize || mailItemData.read || localMailData.push(mailItemData);
        mailItemData.prize && !mailItemData.receive && localMailData.push(mailItemData);
      };
      MailMgr.prototype.getAllReadMailIDList = function() {
        var IDList = [];
        if (null == this._mailData || void 0 == this._mailData) return;
        for (var i = 0; i < this._mailData.length; ++i) 0 == this._mailData[i].type && IDList.push(this._mailData[i].id);
        return IDList;
      };
      MailMgr.prototype.getAllGetMailIDList = function() {
        var IDList = [];
        if (null == this._mailData || void 0 == this._mailData) return;
        for (var i = 0; i < this._mailData.length; ++i) 1 == this._mailData[i].type && IDList.push(this._mailData[i].id);
        return IDList;
      };
      MailMgr.prototype.getMailData = function() {
        console.log("获取邮件数据");
        return this._mailData;
      };
      MailMgr.prototype.getMailDetail = function() {
        return this._mailDetail;
      };
      MailMgr.prototype.setCurReadMailID = function(emailID) {
        this._curReadMailID = emailID;
      };
      MailMgr.prototype.getMailDataByID = function(emailID) {
        for (var i = 0; i < this._mailData.length; ++i) if (this._mailData[i].id == emailID) return this._mailData[i];
      };
      MailMgr.prototype.getCurReadMailID = function() {
        return this._curReadMailID;
      };
      MailMgr.prototype.getCurReadMailContent = function() {
        var curReadMailID = this.getCurReadMailID();
        var curReadMailContent = null;
        for (var i = 0; i < this._mailData.length; i++) {
          var mailItemData = this._mailData[i];
          if (mailItemData.id == curReadMailID) {
            curReadMailContent = mailItemData;
            break;
          }
        }
        return curReadMailContent;
      };
      MailMgr.getInstance = function() {
        this._instance || (this._instance = new MailMgr());
        return this._instance;
      };
      return MailMgr;
    }(BaseMgr_1.default);
    exports.default = MailMgr;
    cc._RF.pop();
  }, {
    "../Libs/BaseMgr": "BaseMgr"
  } ],
  MarqueMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5baf6rmguFOx5Ep2MKdR92Z", "MarqueMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var MarqueMgr = function(_super) {
      __extends(MarqueMgr, _super);
      function MarqueMgr() {
        var _this = _super.call(this) || this;
        _this.routes = null;
        _this.marqueeText = null;
        _this.routes = {
          "http.reqHorseRaceLamp": _this.http_reqHorseRaceLamp
        };
        return _this;
      }
      MarqueMgr.prototype.http_reqHorseRaceLamp = function(msg) {
        this.marqueeText = msg.result.horse_race_lamp;
      };
      MarqueMgr.prototype.reqHorseRaceLamp = function() {
        this.send_msg("http.reqHorseRaceLamp", {
          gid: 8
        });
      };
      MarqueMgr.prototype.getMarqueeText = function() {
        return this.marqueeText;
      };
      MarqueMgr.getInstance = function() {
        this._instance || (this._instance = new MarqueMgr());
        return this._instance;
      };
      return MarqueMgr;
    }(BaseMgr_1.default);
    exports.default = MarqueMgr;
    cc._RF.pop();
  }, {
    "../Libs/BaseMgr": "BaseMgr"
  } ],
  MatchGameMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a54d9t482pCbaoxhTYwN85E", "MatchGameMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var MATCH_GAME_TYPE = {
      GAME_PRACTICE: 0,
      GAME_DAY_REDPAPER: 1,
      GAME_WEEK_REDPAPER: 2,
      GAME_BIGAWARD: 3,
      GAME_CLUB: 4
    };
    window["MATCH_GAME_TYPE"] = MATCH_GAME_TYPE;
    var MatchGameMgr = function(_super) {
      __extends(MatchGameMgr, _super);
      function MatchGameMgr() {
        var _this = _super.call(this) || this;
        _this.routes = null;
        _this.timestamp = null;
        _this.matchData = null;
        _this.timestamp = {
          sever_time: 0
        };
        _this.matchData = {};
        for (var i = MATCH_GAME_TYPE.GAME_PRACTICE; i <= MATCH_GAME_TYPE.GAME_CLUB; i++) _this.matchData[i] = {
          Id: 0,
          GameId: 0,
          Host: 0,
          Icon: "",
          Enter: 0,
          Count: 0,
          Amount: 0,
          Cost: 0,
          Award: {},
          Share: 0,
          begin_time: 0,
          end_time: 0
        };
        _this.routes = {};
        return _this;
      }
      MatchGameMgr.prototype.getMathcGame = function(type) {
        return this.matchData[type];
      };
      MatchGameMgr.prototype.getTime = function(time) {
        return this.timestamp.sever_time + time;
      };
      MatchGameMgr.getInstance = function() {
        this._instance || (this._instance = new MatchGameMgr());
        return this._instance;
      };
      return MatchGameMgr;
    }(BaseMgr_1.default);
    exports.default = MatchGameMgr;
    cc._RF.pop();
  }, {
    "../Libs/BaseMgr": "BaseMgr"
  } ],
  MatchVideoCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ce62c3LTv5LnYyPbAdScGcq", "MatchVideoCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.username = "";
        _this.password = "";
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_close: null,
          webview: null
        };
        _this.node = ctrl.node;
        _this.addGrayLayer();
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.btn_close = ctrl.btn_close;
        this.ui.webview = ctrl.webview;
      };
      return View;
    }(BaseView_1.default);
    var MatchVideoCtrl = function(_super) {
      __extends(MatchVideoCtrl, _super);
      function MatchVideoCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_close = null;
        _this.webview = null;
        return _this;
      }
      MatchVideoCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      MatchVideoCtrl.prototype.defineNetEvents = function() {};
      MatchVideoCtrl.prototype.defineGlobalEvents = function() {};
      MatchVideoCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_close, this.btn_close_cb, "关闭");
      };
      MatchVideoCtrl.prototype.start = function() {};
      MatchVideoCtrl.prototype.connector_entryHandler_enterPlat = function(msg) {
        this.start_module(G_MODULE.LoadingPlat);
      };
      MatchVideoCtrl.prototype.btn_close_cb = function(node, event) {
        this.finish();
      };
      __decorate([ property(cc.Node) ], MatchVideoCtrl.prototype, "btn_close", void 0);
      __decorate([ property(cc.WebView) ], MatchVideoCtrl.prototype, "webview", void 0);
      MatchVideoCtrl = __decorate([ ccclass ], MatchVideoCtrl);
      return MatchVideoCtrl;
    }(BaseCtrl_1.default);
    exports.default = MatchVideoCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Match_CompetitionPanelCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1bfcesJmZVCr6U80LAwjbPN", "Match_CompetitionPanelCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var CompetitionType = {
      btn_lianxi: 0,
      btn_hongbao: 1,
      btn_dajiang: 2,
      btn_club: 3
    };
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.gameType = null;
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          ButtonList: null,
          btn_close: ctrl.btn_close,
          lianxisaiView: ctrl.lianxisaiView,
          hongbaosaiView: ctrl.hongbaosaiView,
          dajiangsaiView: ctrl.dajiangsaiView,
          clubsaiView: ctrl.clubsaiView,
          buttonFather: ctrl.buttonFather,
          scrollPage: ctrl.scrollPage
        };
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.showScroll = function() {
        switch (this.model.gameType) {
         case 0:
          this.addItem(this.ui.lianxisaiView);
          break;

         case 1:
          this.addItem(this.ui.hongbaosaiView);
          break;

         case 2:
          this.addItem(this.ui.dajiangsaiView);
          break;

         case 3:
          this.addItem(this.ui.clubsaiView);
        }
      };
      View.prototype.addItem = function(pre) {
        this.ui.scrollPage.removeAllChildren();
        var item = cc.instantiate(pre);
        item.parent = this.ui.scrollPage;
      };
      View.prototype.initUi = function() {
        this.addGrayLayer();
        this.ui.ButtonList = this.ui.buttonFather.children;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_CompetitionPanelCtrl = function(_super) {
      __extends(Prefab_CompetitionPanelCtrl, _super);
      function Prefab_CompetitionPanelCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_close = null;
        _this.lianxisaiView = null;
        _this.hongbaosaiView = null;
        _this.dajiangsaiView = null;
        _this.clubsaiView = null;
        _this.buttonFather = null;
        _this.scrollPage = null;
        return _this;
      }
      Prefab_CompetitionPanelCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_CompetitionPanelCtrl.prototype.defineNetEvents = function() {};
      Prefab_CompetitionPanelCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_CompetitionPanelCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.btn_close, this.btn_close_cb, "点击关闭");
        for (var i = 0; i < this.ui.ButtonList.length; i++) this.connect(G_UiType.button, this.ui.ButtonList[i], this.ButtonList_cb, "点击切换按钮");
      };
      Prefab_CompetitionPanelCtrl.prototype.start = function() {};
      Prefab_CompetitionPanelCtrl.prototype.btn_close_cb = function() {
        this.finish();
      };
      Prefab_CompetitionPanelCtrl.prototype.ButtonList_cb = function(event) {
        var btn_name = event.currentTarget.name;
        this.model.gameType = CompetitionType[btn_name];
        this.view.showScroll();
      };
      __decorate([ property(cc.Node) ], Prefab_CompetitionPanelCtrl.prototype, "btn_close", void 0);
      __decorate([ property(cc.Prefab) ], Prefab_CompetitionPanelCtrl.prototype, "lianxisaiView", void 0);
      __decorate([ property(cc.Prefab) ], Prefab_CompetitionPanelCtrl.prototype, "hongbaosaiView", void 0);
      __decorate([ property(cc.Prefab) ], Prefab_CompetitionPanelCtrl.prototype, "dajiangsaiView", void 0);
      __decorate([ property(cc.Prefab) ], Prefab_CompetitionPanelCtrl.prototype, "clubsaiView", void 0);
      __decorate([ property(cc.Node) ], Prefab_CompetitionPanelCtrl.prototype, "buttonFather", void 0);
      __decorate([ property(cc.Node) ], Prefab_CompetitionPanelCtrl.prototype, "scrollPage", void 0);
      Prefab_CompetitionPanelCtrl = __decorate([ ccclass ], Prefab_CompetitionPanelCtrl);
      return Prefab_CompetitionPanelCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_CompetitionPanelCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Match_PrixItemCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5ec5fIcwCBIq5wiKNm/BJaa", "Match_PrixItemCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          mark: ctrl.mark,
          poster: ctrl.poster,
          rewardText: ctrl.rewardText,
          status: ctrl.status,
          btn_game: ctrl.btn_game
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {};
      return View;
    }(BaseView_1.default);
    var Prefab_PrixItemCtrl = function(_super) {
      __extends(Prefab_PrixItemCtrl, _super);
      function Prefab_PrixItemCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.mark = null;
        _this.poster = null;
        _this.rewardText = null;
        _this.status = null;
        _this.btn_game = null;
        return _this;
      }
      Prefab_PrixItemCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_PrixItemCtrl.prototype.defineNetEvents = function() {};
      Prefab_PrixItemCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_PrixItemCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.btn_game, this.btn_game_cb, "点击比赛");
      };
      Prefab_PrixItemCtrl.prototype.start = function() {};
      Prefab_PrixItemCtrl.prototype.btn_game_cb = function() {};
      __decorate([ property(cc.Node) ], Prefab_PrixItemCtrl.prototype, "mark", void 0);
      __decorate([ property(cc.Node) ], Prefab_PrixItemCtrl.prototype, "poster", void 0);
      __decorate([ property(cc.Node) ], Prefab_PrixItemCtrl.prototype, "rewardText", void 0);
      __decorate([ property(cc.Node) ], Prefab_PrixItemCtrl.prototype, "status", void 0);
      __decorate([ property(cc.Node) ], Prefab_PrixItemCtrl.prototype, "btn_game", void 0);
      Prefab_PrixItemCtrl = __decorate([ ccclass ], Prefab_PrixItemCtrl);
      return Prefab_PrixItemCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_PrixItemCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Match_chatCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5edcblZlDlFTI9KXXHMgpaA", "Match_chatCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var RichTextMgr_1 = require("../../GameMgrs/RichTextMgr");
    var UiMgr_1 = require("../../GameMgrs/UiMgr");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var CHAT_POS_TYPE = cc.Enum({
      POS_PLAYER: 0,
      POS_FRIEND: 1
    });
    var MATCH_CHAT_TYPE = {
      TYPE_LABEL: 0,
      TYPE_BLEND: 1,
      TYPE_VOICE: 2
    };
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.chat_max = 0;
        _this.char_offset_x = 150;
        _this.char_offset_y = 35;
        _this.myinfo = null;
        _this.myinfo = UserMgr_1.default.getInstance().getMyInfo();
        _this.chat_max = 30;
        return _this;
      }
      Model.prototype.getChatStripMax = function() {
        return this.chat_max;
      };
      Model.prototype.getUserId = function() {
        return this.myinfo.id;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_chat_list: null,
          scroll_chatView: null,
          node_chatStrip1: null,
          node_chatStrip2: null,
          btn_voice: null,
          btn_icon: null,
          btn_send: null,
          node_editbox_content: null,
          editbox_content: null,
          node_iconContent: null,
          node_iconClose: null,
          node_iconList: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_chat_list = ctrl.node_chat_list;
        this.ui.scroll_chatView = ctrl.scroll_chatView;
        this.ui.node_chatStrip1 = ctrl.node_chatStrip1;
        this.ui.node_chatStrip2 = ctrl.node_chatStrip2;
        this.ui.btn_voice = ctrl.btn_voice;
        this.ui.btn_icon = ctrl.btn_icon;
        this.ui.btn_send = ctrl.btn_send;
        this.ui.node_editbox_content = ctrl.node_editbox_content;
        this.ui.editbox_content = ctrl.editbox_content;
        this.ui.node_iconContent = ctrl.node_iconContent;
        this.ui.node_iconClose = ctrl.node_iconClose;
        this.ui.node_iconList = ctrl.node_iconList;
      };
      View.prototype.setChatStripIcon = function(node, icon) {
        var node_icon = node.getChildByName("player_icon");
        null != icon && ("number" == typeof icon ? UiMgr_1.default.getInstance().setUserHead(node_icon, icon) : UiMgr_1.default.getInstance().setUserHead(node_icon, 0, icon));
      };
      View.prototype.setChatStripName = function(node, name) {
        var node_name = node.getChildByName("player_name");
        var text_name = node_name.getComponent(cc.Label);
        text_name.string = name;
      };
      View.prototype.setChatStripContent = function(node, data) {
        var btn_strip = null, color = "#89704C", node_chat = node.getChildByName("chat_text"), node_botton = node.getChildByName("chat_botton"), node_pic = node.getChildByName("player_pic");
        node_botton.active = false;
        var rich_chat = node_chat.getComponent(cc.RichText);
        var rich_data = RichTextMgr_1.default.getInstance();
        var chat_x = 30;
        rich_chat.string = "";
        switch (data.type) {
         case MATCH_CHAT_TYPE.TYPE_LABEL:
          node_chat.active = true;
          rich_chat.string = rich_data.richTextColor(data.text, color);
          node_botton.active = true;
          node_botton.width = node_chat.width + chat_x;
          break;

         case MATCH_CHAT_TYPE.TYPE_BLEND:
          node_chat.active = true;
          rich_chat.string = rich_data.richTextBlend(data.text, color);
          node_botton.active = true;
          node_botton.width = node_chat.width + chat_x;
          break;

         case MATCH_CHAT_TYPE.TYPE_VOICE:
          node_pic.active = true;
          btn_strip = node_pic;
        }
        return btn_strip;
      };
      View.prototype.addChatStrip = function(data) {
        var add_node = null;
        add_node = data.id == this.model.getUserId() ? cc.instantiate(this.ui.node_chatStrip2) : cc.instantiate(this.ui.node_chatStrip1);
        if (null == add_node) return;
        add_node.active = true;
        add_node.x = 0;
        add_node.parent = this.ui.node_chat_list;
        this.setChatStripIcon(add_node, data.icon);
        this.setChatStripName(add_node, data.name);
        var btn_strip = this.setChatStripContent(add_node, data);
        this.refreshChatList();
        return btn_strip;
      };
      View.prototype.refreshChatList = function() {
        var height = 0, layout = this.ui.node_chat_list.getComponent(cc.Layout), gapTop = layout.paddingTop, gapBottom = layout.paddingBottom, gapY = layout.spacingY, count = this.ui.node_chat_list.childrenCount;
        if (count > this.model.getChatStripMax()) {
          this.ui.node_chat_list.children[0].destroy();
          count = this.ui.node_chat_list.childrenCount;
        }
        height += gapTop;
        height += gapBottom;
        height += (count - 1) * gapY;
        for (var i = 0; i < count; i++) {
          var node = this.ui.node_chat_list.children[i];
          height += node.height;
        }
        if (this.ui.node_chat_list.height < height) {
          this.ui.node_chat_list.height = height;
          this.ui.scroll_chatView.scrollToBottom(0);
        }
      };
      View.prototype.OpenIconList = function() {
        this.ui.node_iconContent.active = true;
      };
      View.prototype.CloseIconList = function() {
        this.ui.node_iconContent.active = false;
        this.ui.node_iconContent.pauseSystemEvents(true);
      };
      return View;
    }(BaseView_1.default);
    var Match_chatCtrl = function(_super) {
      __extends(Match_chatCtrl, _super);
      function Match_chatCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_chat_list = null;
        _this.scroll_chatView = null;
        _this.node_chatStrip1 = null;
        _this.node_chatStrip2 = null;
        _this.btn_voice = null;
        _this.btn_icon = null;
        _this.btn_send = null;
        _this.node_editbox_content = null;
        _this.editbox_content = null;
        _this.node_iconContent = null;
        _this.node_iconClose = null;
        _this.node_iconList = null;
        return _this;
      }
      Match_chatCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.initChatContent();
      };
      Match_chatCtrl.prototype.initChatContent = function() {};
      Match_chatCtrl.prototype.defineNetEvents = function() {
        this.n_events = {};
      };
      Match_chatCtrl.prototype.defineGlobalEvents = function() {};
      Match_chatCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_voice, this.btn_voice_cb, "语音按钮");
        this.connect(G_UiType.image, this.ui.btn_icon, this.btn_icon_cb, "表情按钮");
        this.connect(G_UiType.image, this.ui.btn_send, this.btn_send_cb, "发送按钮");
        this.connect(G_UiType.edit, this.ui.node_editbox_content, this.editbox_content_cb, "发送按钮");
        this.connect(G_UiType.image, this.ui.node_iconClose, this.node_iconClose_cb, "关闭表情界面");
      };
      Match_chatCtrl.prototype.addIconCallBak = function() {
        if (true == this.model.getIconCallOpen()) return;
        this.model.setIconCallOpen(true);
        var count = this.view.ui.node_iconList.childrenCount, btns = this.view.ui.node_iconList.children;
        console.log("count:" + count);
        for (var i = 0; i < count; i++) {
          var curBtn = btns[i];
          this.connect(G_UiType.image, curBtn, this.node_icon_cb, "图标:btn_" + i);
        }
      };
      Match_chatCtrl.prototype.start = function() {};
      Match_chatCtrl.prototype.btn_icon_cb = function(node, event) {
        this.addIconCallBak();
        this.view.OpenIconList();
      };
      Match_chatCtrl.prototype.btn_voice_cb = function(node, event) {};
      Match_chatCtrl.prototype.btn_send_cb = function(node, event) {
        console.log("btn_send_cb");
        var content = this.model.getChatContent();
        if ("" == content) {
          FrameMgr_1.default.getInstance().showTips(this.model.getChatPlaceholder());
          return;
        }
        var chat_data = {
          type: MATCH_CHAT_TYPE.TYPE_BLEND,
          text: content
        };
        this.view.addChatStrip(chat_data);
      };
      Match_chatCtrl.prototype.editbox_content_cb = function(str, event) {};
      Match_chatCtrl.prototype.node_iconClose_cb = function(node, event) {
        this.view.CloseIconList();
      };
      Match_chatCtrl.prototype.node_icon_cb = function(node, event) {
        var icon_pic = node.getComponent(cc.Sprite);
        this.view.addEditboxContent(icon_pic.spriteFrame.name);
        this.view.CloseIconList();
      };
      __decorate([ property(cc.Node) ], Match_chatCtrl.prototype, "node_chat_list", void 0);
      __decorate([ property(cc.ScrollView) ], Match_chatCtrl.prototype, "scroll_chatView", void 0);
      __decorate([ property(cc.Node) ], Match_chatCtrl.prototype, "node_chatStrip1", void 0);
      __decorate([ property(cc.Node) ], Match_chatCtrl.prototype, "node_chatStrip2", void 0);
      __decorate([ property(cc.Node) ], Match_chatCtrl.prototype, "btn_voice", void 0);
      __decorate([ property(cc.Node) ], Match_chatCtrl.prototype, "btn_icon", void 0);
      __decorate([ property(cc.Node) ], Match_chatCtrl.prototype, "btn_send", void 0);
      __decorate([ property(cc.Node) ], Match_chatCtrl.prototype, "node_editbox_content", void 0);
      __decorate([ property(cc.EditBox) ], Match_chatCtrl.prototype, "editbox_content", void 0);
      __decorate([ property(cc.Node) ], Match_chatCtrl.prototype, "node_iconContent", void 0);
      __decorate([ property(cc.Node) ], Match_chatCtrl.prototype, "node_iconClose", void 0);
      __decorate([ property(cc.Node) ], Match_chatCtrl.prototype, "node_iconList", void 0);
      Match_chatCtrl = __decorate([ ccclass ], Match_chatCtrl);
      return Match_chatCtrl;
    }(BaseCtrl_1.default);
    exports.default = Match_chatCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/RichTextMgr": "RichTextMgr",
    "../../GameMgrs/UiMgr": "UiMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Match_dajiang_PanelCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "06750YZVXdO5J5DOVPKKO/Z", "Match_dajiang_PanelCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_back: null,
          lbl_title: null,
          btn_remind: null,
          btn_gamerule: null,
          btn_share: null,
          Prefab_chat: null
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.addGrayLayer();
        this.ui.btn_back = ctrl.btn_back;
        this.ui.lbl_title = ctrl.lbl_title;
        this.ui.btn_remind = ctrl.btn_remind;
        this.ui.btn_gamerule = ctrl.btn_gamerule;
        this.ui.btn_share = ctrl.btn_share;
        this.ui.Prefab_chat = ctrl.Prefab_chat;
        this.initChat();
      };
      View.prototype.initChat = function() {
        var chat_prefab = cc.instantiate(this.ui.Prefab_chat);
        chat_prefab.parent = this.node;
      };
      return View;
    }(BaseView_1.default);
    var redPacket_enlistCtrl = function(_super) {
      __extends(redPacket_enlistCtrl, _super);
      function redPacket_enlistCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_back = null;
        _this.lbl_title = null;
        _this.btn_remind = null;
        _this.btn_gamerule = null;
        _this.btn_share = null;
        _this.Prefab_chat = null;
        return _this;
      }
      redPacket_enlistCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      redPacket_enlistCtrl.prototype.defineNetEvents = function() {};
      redPacket_enlistCtrl.prototype.defineGlobalEvents = function() {};
      redPacket_enlistCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.btn_back, this.backBtn_cb, "点击返回");
        this.connect(G_UiType.button, this.ui.btn_remind, this.remindBtn_cb, "点击提醒");
        this.connect(G_UiType.button, this.ui.btn_gamerule, this.ruleBtn_cb, "点击规则");
        this.connect(G_UiType.button, this.ui.btn_share, this.shareBtn_cb, "点击分享");
      };
      redPacket_enlistCtrl.prototype.start = function() {};
      redPacket_enlistCtrl.prototype.backBtn_cb = function() {
        console.log("点击返回");
        this.finish();
      };
      redPacket_enlistCtrl.prototype.remindBtn_cb = function() {
        console.log("点击提醒");
      };
      redPacket_enlistCtrl.prototype.ruleBtn_cb = function() {
        console.log("点击规则");
      };
      redPacket_enlistCtrl.prototype.shareBtn_cb = function() {
        console.log("点击分享");
      };
      __decorate([ property(cc.Node) ], redPacket_enlistCtrl.prototype, "btn_back", void 0);
      __decorate([ property(cc.Label) ], redPacket_enlistCtrl.prototype, "lbl_title", void 0);
      __decorate([ property(cc.Node) ], redPacket_enlistCtrl.prototype, "btn_remind", void 0);
      __decorate([ property(cc.Node) ], redPacket_enlistCtrl.prototype, "btn_gamerule", void 0);
      __decorate([ property(cc.Node) ], redPacket_enlistCtrl.prototype, "btn_share", void 0);
      __decorate([ property(cc.Prefab) ], redPacket_enlistCtrl.prototype, "Prefab_chat", void 0);
      redPacket_enlistCtrl = __decorate([ ccclass ], redPacket_enlistCtrl);
      return redPacket_enlistCtrl;
    }(BaseCtrl_1.default);
    exports.default = redPacket_enlistCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Match_dajiang_scrollCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dcb311hwjZHzpwJDlVCiMI7", "Match_dajiang_scrollCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          content: ctrl.content,
          prixItem: ctrl.prixItem
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.addItem();
      };
      View.prototype.addItem = function() {
        this.ui.content.width = 2 * this.ui.prixItem.data.width;
        this.ui.content.height = this.ui.prixItem.data.height;
        for (var i = 0; i < 5; i++) {
          var item = cc.instantiate(this.ui.prixItem);
          item.parent = this.ui.content;
          this.ui.content.width += item.width;
        }
      };
      return View;
    }(BaseView_1.default);
    var Match_dajiang_scrollCtrl = function(_super) {
      __extends(Match_dajiang_scrollCtrl, _super);
      function Match_dajiang_scrollCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.content = null;
        _this.prixItem = null;
        return _this;
      }
      Match_dajiang_scrollCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Match_dajiang_scrollCtrl.prototype.defineNetEvents = function() {};
      Match_dajiang_scrollCtrl.prototype.defineGlobalEvents = function() {};
      Match_dajiang_scrollCtrl.prototype.connectUi = function() {};
      Match_dajiang_scrollCtrl.prototype.start = function() {};
      __decorate([ property(cc.Node) ], Match_dajiang_scrollCtrl.prototype, "content", void 0);
      __decorate([ property(cc.Prefab) ], Match_dajiang_scrollCtrl.prototype, "prixItem", void 0);
      Match_dajiang_scrollCtrl = __decorate([ ccclass ], Match_dajiang_scrollCtrl);
      return Match_dajiang_scrollCtrl;
    }(BaseCtrl_1.default);
    exports.default = Match_dajiang_scrollCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Match_enlistCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bfec6POlOZAaKvpJpjQhBAZ", "Match_enlistCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_back: null,
          lbl_title: null,
          btn_remind: null,
          btn_gamerule: null,
          btn_share: null,
          Prefab_chat: null
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.addGrayLayer();
        this.ui.btn_back = ctrl.btn_back;
        this.ui.lbl_title = ctrl.lbl_title;
        this.ui.btn_remind = ctrl.btn_remind;
        this.ui.btn_gamerule = ctrl.btn_gamerule;
        this.ui.btn_share = ctrl.btn_share;
        this.ui.Prefab_chat = ctrl.Prefab_chat;
        this.initChat();
      };
      View.prototype.initChat = function() {
        var chat_prefab = cc.instantiate(this.ui.Prefab_chat);
        chat_prefab.parent = this.node;
      };
      return View;
    }(BaseView_1.default);
    var redPacket_enlistCtrl = function(_super) {
      __extends(redPacket_enlistCtrl, _super);
      function redPacket_enlistCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_back = null;
        _this.lbl_title = null;
        _this.btn_remind = null;
        _this.btn_gamerule = null;
        _this.btn_share = null;
        _this.Prefab_chat = null;
        return _this;
      }
      redPacket_enlistCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      redPacket_enlistCtrl.prototype.defineNetEvents = function() {};
      redPacket_enlistCtrl.prototype.defineGlobalEvents = function() {};
      redPacket_enlistCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.btn_back, this.backBtn_cb, "点击返回");
        this.connect(G_UiType.button, this.ui.btn_remind, this.remindBtn_cb, "点击提醒");
        this.connect(G_UiType.button, this.ui.btn_gamerule, this.ruleBtn_cb, "点击规则");
        this.connect(G_UiType.button, this.ui.btn_share, this.shareBtn_cb, "点击分享");
      };
      redPacket_enlistCtrl.prototype.start = function() {};
      redPacket_enlistCtrl.prototype.backBtn_cb = function() {
        console.log("点击返回");
        this.finish();
      };
      redPacket_enlistCtrl.prototype.remindBtn_cb = function() {
        console.log("点击提醒");
      };
      redPacket_enlistCtrl.prototype.ruleBtn_cb = function() {
        console.log("点击规则");
      };
      redPacket_enlistCtrl.prototype.shareBtn_cb = function() {
        console.log("点击分享");
      };
      __decorate([ property(cc.Node) ], redPacket_enlistCtrl.prototype, "btn_back", void 0);
      __decorate([ property(cc.Label) ], redPacket_enlistCtrl.prototype, "lbl_title", void 0);
      __decorate([ property(cc.Node) ], redPacket_enlistCtrl.prototype, "btn_remind", void 0);
      __decorate([ property(cc.Node) ], redPacket_enlistCtrl.prototype, "btn_gamerule", void 0);
      __decorate([ property(cc.Node) ], redPacket_enlistCtrl.prototype, "btn_share", void 0);
      __decorate([ property(cc.Prefab) ], redPacket_enlistCtrl.prototype, "Prefab_chat", void 0);
      redPacket_enlistCtrl = __decorate([ ccclass ], redPacket_enlistCtrl);
      return redPacket_enlistCtrl;
    }(BaseCtrl_1.default);
    exports.default = redPacket_enlistCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Match_hongbao_scrollCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "334faDZy9VOdqDHsEWveSiW", "Match_hongbao_scrollCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          content: ctrl.content,
          hongbaoPre: ctrl.hongbaoPre
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.addItem();
      };
      View.prototype.addItem = function() {
        this.ui.content.width = 2 * this.ui.hongbaoPre.data.width;
        this.ui.content.height = this.ui.hongbaoPre.data.height;
        for (var i = 0; i < 5; i++) {
          var item = cc.instantiate(this.ui.hongbaoPre);
          item.parent = this.ui.content;
          this.ui.content.height += item.height;
        }
      };
      return View;
    }(BaseView_1.default);
    var Match_hongbao_scrollCtrl = function(_super) {
      __extends(Match_hongbao_scrollCtrl, _super);
      function Match_hongbao_scrollCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.content = null;
        _this.hongbaoPre = null;
        return _this;
      }
      Match_hongbao_scrollCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Match_hongbao_scrollCtrl.prototype.defineNetEvents = function() {};
      Match_hongbao_scrollCtrl.prototype.defineGlobalEvents = function() {};
      Match_hongbao_scrollCtrl.prototype.connectUi = function() {};
      Match_hongbao_scrollCtrl.prototype.start = function() {};
      __decorate([ property(cc.Node) ], Match_hongbao_scrollCtrl.prototype, "content", void 0);
      __decorate([ property(cc.Prefab) ], Match_hongbao_scrollCtrl.prototype, "hongbaoPre", void 0);
      Match_hongbao_scrollCtrl = __decorate([ ccclass ], Match_hongbao_scrollCtrl);
      return Match_hongbao_scrollCtrl;
    }(BaseCtrl_1.default);
    exports.default = Match_hongbao_scrollCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Match_inviteCodeCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6a9e1+oJUNEyYSNky9swzP/", "Match_inviteCodeCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          editbox_yaoqingma: null,
          lbl_wechat: null,
          btn_confirm: null
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.editbox_yaoqingma = ctrl.editbox_yaoqingma;
        this.ui.lbl_wechat = ctrl.lbl_wechat;
        this.ui.btn_confirm = ctrl.btn_confirm;
      };
      return View;
    }(BaseView_1.default);
    var Match_inviteCodeCtrl = function(_super) {
      __extends(Match_inviteCodeCtrl, _super);
      function Match_inviteCodeCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.editbox_yaoqingma = null;
        _this.lbl_wechat = null;
        _this.btn_confirm = null;
        return _this;
      }
      Match_inviteCodeCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Match_inviteCodeCtrl.prototype.defineNetEvents = function() {};
      Match_inviteCodeCtrl.prototype.defineGlobalEvents = function() {};
      Match_inviteCodeCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.btn_confirm, this.btn_confirm_cb, "点击确定");
      };
      Match_inviteCodeCtrl.prototype.start = function() {};
      Match_inviteCodeCtrl.prototype.btn_confirm_cb = function() {
        console.log("点击确定");
      };
      __decorate([ property(cc.EditBox) ], Match_inviteCodeCtrl.prototype, "editbox_yaoqingma", void 0);
      __decorate([ property(cc.Label) ], Match_inviteCodeCtrl.prototype, "lbl_wechat", void 0);
      __decorate([ property(cc.Node) ], Match_inviteCodeCtrl.prototype, "btn_confirm", void 0);
      Match_inviteCodeCtrl = __decorate([ ccclass ], Match_inviteCodeCtrl);
      return Match_inviteCodeCtrl;
    }(BaseCtrl_1.default);
    exports.default = Match_inviteCodeCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Match_rowContentCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c415bA1VgJFRJP6OfjPQajp", "Match_rowContentCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          lbl_title: null,
          lbl_game: null,
          lbl_saizhi: null,
          lbl_diamondNum: null,
          btn_enlist: null,
          Prefab_enlist: null
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.lbl_diamondNum = ctrl.lbl_diamondNum;
        this.ui.lbl_game = ctrl.lbl_game;
        this.ui.lbl_saizhi = ctrl.lbl_saizhi;
        this.ui.lbl_title = ctrl.lbl_title;
        this.ui.btn_enlist = ctrl.btn_enlist;
        this.ui.Prefab_enlist = ctrl.Prefab_enlist;
      };
      return View;
    }(BaseView_1.default);
    var redPacket_rowContentCtrl = function(_super) {
      __extends(redPacket_rowContentCtrl, _super);
      function redPacket_rowContentCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.lbl_title = null;
        _this.lbl_game = null;
        _this.lbl_saizhi = null;
        _this.lbl_diamondNum = null;
        _this.btn_enlist = null;
        _this.Prefab_enlist = null;
        return _this;
      }
      redPacket_rowContentCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      redPacket_rowContentCtrl.prototype.defineNetEvents = function() {};
      redPacket_rowContentCtrl.prototype.defineGlobalEvents = function() {};
      redPacket_rowContentCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.btn_enlist, this.EnlistBtn_cb, "点击报名");
      };
      redPacket_rowContentCtrl.prototype.start = function() {};
      redPacket_rowContentCtrl.prototype.EnlistBtn_cb = function() {
        console.log("baoming+1");
        this.start_sub_module(G_MODULE.redPacket_prefab);
      };
      __decorate([ property(cc.Label) ], redPacket_rowContentCtrl.prototype, "lbl_title", void 0);
      __decorate([ property(cc.Node) ], redPacket_rowContentCtrl.prototype, "lbl_game", void 0);
      __decorate([ property(cc.Label) ], redPacket_rowContentCtrl.prototype, "lbl_saizhi", void 0);
      __decorate([ property(cc.Label) ], redPacket_rowContentCtrl.prototype, "lbl_diamondNum", void 0);
      __decorate([ property(cc.Node) ], redPacket_rowContentCtrl.prototype, "btn_enlist", void 0);
      __decorate([ property(cc.Prefab) ], redPacket_rowContentCtrl.prototype, "Prefab_enlist", void 0);
      redPacket_rowContentCtrl = __decorate([ ccclass ], redPacket_rowContentCtrl);
      return redPacket_rowContentCtrl;
    }(BaseCtrl_1.default);
    exports.default = redPacket_rowContentCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  ModuleMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bb99d43b1FL+b7LmlWfRdJx", "ModuleMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LogMgr_1 = require("./LogMgr");
    var G_MODULE = {
      Login: "Login",
      LoadingPlat: "LoadingPlat",
      Plaza: "Plaza",
      CustomService: "SubLayer/Plat/customservice/Prefab_customservice",
      Web_xieyi: "SubLayer/Plat/useragreement/Web_xieyi",
      UserLogin: "SubLayer/Plat/UserLogin/Prefab_UserLogin",
      UserRegister: "SubLayer/Plat/UserLogin/Prefab_UserRegister",
      MsgBox: "SubLayer/Plat/MsgBox/MsgBox",
      HintBox: "SubLayer/Plat/MsgBox/Hints",
      LoadingGame: "SubLayer/Plat/LoadingGame/LoadingGame",
      PlazaSetting: "SubLayer/Plat/PlazaSetting/Prefab_settingCtrl",
      LuckDraw: "SubLayer/Plat/LuckDraw/Prefab_luckDraw",
      LuckDrawTipPanel: "SubLayer/Plat/LuckDraw/Prefab_luckDrawTipCtrl",
      AgencyBind: "SubLayer/Plat/PlazaSetting/Prefab_AgencyBind",
      AccountBind: "SubLayer/Plat/PlazaSetting/Prefab_AccountBind",
      Mail: "SubLayer/Plat/Mail/Prefab_Mail",
      Shared: "SubLayer/Plat/Shared/Prefab_sharedCtrl",
      ShareTip: "SubLayer/Plat/Shared/Prefab_shareTip",
      Shop: "SubLayer/Plat/Shop/Prefab_shopCtrl",
      RechargeRecord: "SubLayer/Plat/Shop/Prefab_rechargeRecord",
      Bag: "SubLayer/Plat/Shop/Prefab_bagCtrl",
      ShopDetail: "SubLayer/Plat/Shop/Prefab_shopDetailCtrl",
      joinRoom: "SubLayer/Plat/CreateRoom/Prefab_JoinRoom",
      createRoom: "SubLayer/Plat/CreateRoom/Prefab_CreateRoomPanel",
      PlayerDetail: "SubLayer/Plat/PlayerDetail/Prefab_playerDetailCtrl",
      ReliefMoney: "SubLayer/Plat/MsgBox/Prefab_reliefMoneyCtrl",
      HarvestFrame: "SubLayer/Plat/MsgBox/Prefab_harvestCtrl",
      SignIn: "SubLayer/Plat/SignIn/Prefab_SignIn",
      GoldMode: "SubLayer/Plat/GoldMode/Prefab_GoldModeCtrl",
      shimingRenZheng: "SubLayer/Plat/PlayerDetail/Prefab_shimingRenZheng",
      changeName: "SubLayer/Plat/PlayerDetail/Prefab_changeName",
      tipFrame: "SubLayer/Plat/tips/Tips",
      Rank: "SubLayer/Plat/Rank/Prefab_RankCtrl",
      RoleDetail: "SubLayer/Plat/Rank/Prefab_roleDetailCtrl",
      RuleDescription: "SubLayer/Plat/RuleDescription/Prefab_RuleCtrl",
      More: "SubLayer/Plat/More/More",
      MoreGame: "SubLayer/Plat/CreateRoom/Prefab_MoreGameSuggestion",
      MoreRuleSuggestion: "SubLayer/Plat/CreateRoom/Prefab_RoomRuleMoreSuggestion",
      DefaultRule: "SubLayer/Plat/CreateRoom/Prefab_DefaultRule",
      ClubCreate: "SubLayer/Plat/Club/Club_Create",
      ClubLobby: "SubLayer/Plat/Club/Club_Lobby",
      ClubSeek: "SubLayer/Plat/Club/Club_SeekList",
      ClubMember: "SubLayer/Plat/Club/Club_MemberList",
      ClubRecord: "SubLayer/Plat/Club/Club_RecordList",
      ClubRecordC: "SubLayer/Plat/Club/Club_RecordContent",
      ClubChangeName: "SubLayer/Plat/Club/Club_ChangeName",
      ClubChangeIcon: "SubLayer/Plat/Club/Club_ChangeIcon",
      ClubRecharge: "SubLayer/Plat/Club/Club_Recharge",
      MatchVideo: "MatchVideo",
      Tranning: "SubLayer/Plat/Tranning/Prefab_tranning",
      ClubApplication: "SubLayer/Plat/Club/Club_applicationList",
      ApplyDisbandRoom: "SubLayer/Plat/GameRoomCommon/RoomApplyDissolution",
      bingPhone: "SubLayer/Plat/PlayerDetail/Prefab_bingPhone",
      DefaultRuleItemRename: "SubLayer/Plat/CreateRoom/Prefab_RenameCommonRule",
      RoomChat: "SubLayer/Plat/GameRoomCommon/RoomChat",
      RoomSetting: "SubLayer/Plat/GameRoomCommon/RoomSetting",
      RoomUserInfo: "SubLayer/Plat/GameRoomCommon/RoomUserInfo",
      RoomPreventionCheating: "SubLayer/Plat/GameRoomCommon/RoomPreventionCheating",
      CreateDefaultRule: "SubLayer/Plat/CreateRoom/Prefab_CreateCommonRule",
      RoomContent: "SubLayer/Plat/CreateRoom/Prefab_RoomContent",
      RoomRule: "SubLayer/Plat/GameRoomCommon/RoomRule",
      GameRule: "SubLayer/Plat/GameRoomCommon/RoomOption",
      GameRoomRule: "SubLayer/Plat/CreateRoom/Prefab_RoomRule",
      bindAgent: "SubLayer/Plat/bindAgent/Prefab_bindAgent",
      bindConfirm: "SubLayer/Plat/bindAgent/Prefab_bindconfirm",
      Announcement: "SubLayer/Plat/Announcement/Prefab_AnnouncementPanel",
      RecordList: "SubLayer/Plat/GameRecord/Prefab_RecordList",
      Task: "SubLayer/Plat/Task/Prefab_TaskPanel",
      VideoEnter: "SubLayer/Plat/GameRecord/Prefab_VideoEnter",
      goinvite: "SubLayer/Plat/Task/Prefab_goinvitetips",
      Zixun: "SubLayer/Plat/GameRoomCommon/Prefab_Zixun",
      GameVideo: "SubLayer/Plat/GameVideo/GameVideo",
      FaPaiGm: "GameCommon/Mahjong/Prefabs/MahjongFaPaiGm",
      SwitchCardWithWallGm: "GameCommon/Mahjong/Prefabs/MahjongSwitchCardWithWallGm",
      SwitchCardWithPlayerGm: "GameCommon/Mahjong/Prefabs/MahjongSwitchCardWithPlayerGm",
      MatchPanel: "SubLayer/Plat/MatchGame/Match_CompetitionPanel",
      MatchDaJiangPanel: "SubLayer/Plat/MatchGame/Match_dajiang_Panel",
      redPacket_prefab: "SubLayer/Plat/MatchGame/Match_enlist",
      Common_voiceTip: "SubLayer/Plat/GameRoomCommon/Common_voiceTip"
    };
    window["G_MODULE"] = G_MODULE;
    var ModuleMgr = function() {
      function ModuleMgr() {
        this.modulestack = [ "Login" ];
        this.gameModules = null;
      }
      ModuleMgr.prototype.registerGame = function(modules) {
        this.gameModules = modules;
        for (var key in modules) G_MODULE[key] = modules[key];
      };
      ModuleMgr.prototype.start_module = function(sceneName, b_turnback) {
        void 0 === b_turnback && (b_turnback = false);
        b_turnback || this.modulestack.push(sceneName);
        var cb = function() {
          LogMgr_1.default.getInstance().showModule(sceneName);
          cc.loader.loadRes("SubLayer/Plat/MsgBox/MsgBoxLoadingAni", function(err, prefab) {
            if (err) cc.error(err); else {
              console.log("添加了");
              var prefabNode = cc.instantiate(prefab);
              prefabNode.parent = cc.director.getScene();
            }
          });
        };
        cc.director.loadScene(sceneName, cb.bind(this));
      };
      ModuleMgr.prototype.turnback_module = function() {
        var lastmodule = this.modulestack[this.modulestack.length - 2];
        console.log("上一个场景=", lastmodule);
        this.start_module(lastmodule, true);
        console.log("当前场景栈=", this.modulestack);
        this.modulestack.remove(this.modulestack.length - 1);
        console.log("跳转后场景栈=", this.modulestack);
      };
      ModuleMgr.prototype.start_sub_module = function(prefabName, cb, scriptName) {
        void 0 === scriptName && (scriptName = null);
        console.log("haaaa=", prefabName);
        if (!prefabName) {
          cc.error("start_sub_module name== ", prefabName);
          return;
        }
        cc.loader.loadRes(prefabName, function(err, prefab) {
          if (err) cc.error(err); else {
            var prefabNode = cc.instantiate(prefab);
            prefabNode.parent = cc.director.getScene();
            var prefabComp = null;
            var winSize = cc.director.getVisibleSize();
            prefabNode.position = cc.p(winSize.width / 2, winSize.height / 2);
            scriptName && (prefabComp = prefabNode.getComponent(scriptName));
            cb(prefabComp, prefabNode);
            LogMgr_1.default.getInstance().showSubModule(prefabName);
          }
        });
      };
      ModuleMgr.getInstance = function() {
        this._instance || (this._instance = new ModuleMgr());
        return this._instance;
      };
      return ModuleMgr;
    }();
    exports.default = ModuleMgr;
    cc._RF.pop();
  }, {
    "./LogMgr": "LogMgr"
  } ],
  MoreCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f2884q6F21EwoK0n13tuvCY", "MoreCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var SwitchMgr_1 = require("../../GameMgrs/SwitchMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.cusServiceSwtich = null;
        _this.announceSwitch = null;
        _this.playMethodSwitch = null;
        _this.cusServiceSwtich = SwitchMgr_1.default.getInstance().get_switch_customer_service();
        _this.announceSwitch = SwitchMgr_1.default.getInstance().get_switch_notice();
        _this.playMethodSwitch = SwitchMgr_1.default.getInstance().get_switch_play_method();
        return _this;
      }
      Model.prototype.updateSwitch = function(msg) {
        this.cusServiceSwtich = msg.cfg.switch_customer_service;
        this.announceSwitch = msg.cfg.switch_notice;
        this.playMethodSwitch = msg.cfg.switch_play_method;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          allBtnParent: ctrl.allBtnParent,
          btn_playMethod: ctrl.btn_playMethod,
          btn_record: ctrl.btn_record,
          btn_cusService: ctrl.btn_cusService,
          btn_setUp: ctrl.btn_setUp,
          btn_annouce: ctrl.btn_annouce
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.btn_annouce.active = false;
        this.ui.btn_cusService.active = false;
        this.ui.btn_playMethod.active = false;
        this.showBtn();
      };
      View.prototype.showAni = function(action) {
        this.ui.allBtnParent.runAction(action);
        console.log(this.ui.btn_annouce.opacity);
      };
      View.prototype.closeAni = function(action) {
        this.ui.allBtnParent.runAction(action);
      };
      View.prototype.showBtn = function() {
        this.ui.btn_cusService.active = 1 == this.model.cusServiceSwtich;
        this.ui.btn_annouce.active = 1 == this.model.announceSwitch;
        this.ui.btn_playMethod.active = 1 == this.model.playMethodSwitch;
      };
      return View;
    }(BaseView_1.default);
    var MoreCtrl = function(_super) {
      __extends(MoreCtrl, _super);
      function MoreCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.allBtnParent = null;
        _this.btn_playMethod = null;
        _this.btn_record = null;
        _this.btn_cusService = null;
        _this.btn_setUp = null;
        _this.btn_annouce = null;
        return _this;
      }
      MoreCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        var action = cc.sequence(cc.hide(), cc.scaleTo(.001, .1, .1), cc.show(), cc.scaleTo(.3, 1, 1));
        this.view.showAni(action);
      };
      MoreCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqGameSwitch": this.http_reqGameSwitch
        };
      };
      MoreCtrl.prototype.defineGlobalEvents = function() {};
      MoreCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.btn_playMethod, this.onClick_playMethod, "点击玩法");
        this.connect(G_UiType.button, this.ui.btn_record, this.onClick_record, "点击战绩");
        this.connect(G_UiType.button, this.ui.btn_cusService, this.onClick_cusService, "点击客服");
        this.connect(G_UiType.button, this.ui.btn_setUp, this.onClick_setUp, "点击设置");
        this.connect(G_UiType.button, this.ui.btn_annouce, this.onClick_annouce, "点击公告");
        this.connect(G_UiType.button, this.node, this.onClick_close, "点击更多界面的背景");
      };
      MoreCtrl.prototype.http_reqGameSwitch = function(msg) {
        this.model.updateSwitch(msg);
        this.view.showBtn();
      };
      MoreCtrl.prototype.onClick_playMethod = function() {
        this.start_sub_module(G_MODULE.RuleDescription);
      };
      MoreCtrl.prototype.onClick_record = function() {
        this.start_sub_module(G_MODULE.RecordList);
      };
      MoreCtrl.prototype.onClick_cusService = function() {
        console.log("btn_kefu_cb");
        this.start_sub_module(G_MODULE.CustomService);
      };
      MoreCtrl.prototype.onClick_setUp = function() {
        this.start_sub_module(G_MODULE.PlazaSetting);
      };
      MoreCtrl.prototype.onClick_annouce = function() {
        this.start_sub_module(G_MODULE.Announcement);
      };
      MoreCtrl.prototype.onClick_close = function() {
        var action = cc.sequence(cc.scaleTo(.2, .1, .1), cc.callFunc(function(sender, data) {
          ctrl.finish();
        }));
        this.view.closeAni(action);
      };
      __decorate([ property({
        tooltip: "按钮父节点",
        type: cc.Node
      }) ], MoreCtrl.prototype, "allBtnParent", void 0);
      __decorate([ property({
        tooltip: "玩法",
        type: cc.Node
      }) ], MoreCtrl.prototype, "btn_playMethod", void 0);
      __decorate([ property({
        tooltip: "战绩",
        type: cc.Node
      }) ], MoreCtrl.prototype, "btn_record", void 0);
      __decorate([ property({
        tooltip: "客服",
        type: cc.Node
      }) ], MoreCtrl.prototype, "btn_cusService", void 0);
      __decorate([ property({
        tooltip: "设置",
        type: cc.Node
      }) ], MoreCtrl.prototype, "btn_setUp", void 0);
      __decorate([ property({
        tooltip: "公告",
        type: cc.Node
      }) ], MoreCtrl.prototype, "btn_annouce", void 0);
      MoreCtrl = __decorate([ ccclass ], MoreCtrl);
      return MoreCtrl;
    }(BaseCtrl_1.default);
    exports.default = MoreCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/SwitchMgr": "SwitchMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  MpnnAudioMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e8529Q8gN1HhL+1iPbX1/RK", "MpnnAudioMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../../../Plat/Libs/BaseMgr");
    var LoaderMgr_1 = require("../../../AppStart/AppMgrs/LoaderMgr");
    var MpnnConst_1 = require("../BullMgr/MpnnConst");
    var processaudiodic = {};
    processaudiodic[MpnnConst_1.default.process.start] = "audio_ready";
    processaudiodic[MpnnConst_1.default.process.giveCards] = "audio_fapai";
    processaudiodic[MpnnConst_1.default.process.settle] = "kaijin";
    var MpnnAudioMgr = function(_super) {
      __extends(MpnnAudioMgr, _super);
      function MpnnAudioMgr() {
        var _this = _super.call(this) || this;
        _this.baseUrl = cc.url.raw("resources/audio/Games/Mpnn/%s.mp3");
        _this.womanUrl = cc.url.raw("resources/audio/Games/Mpnn/pth/woman/%s.mp3");
        _this.manUrl = cc.url.raw("resources/audio/Games/Mpnn/pth/man/%s.mp3");
        _this.ResultAudioWoman = {
          womanbull0: "womanbull0",
          womanbull1: "womanbull1",
          womanbull2: "womanbull2",
          womanbull3: "womanbull3",
          womanbull4: "womanbull4",
          womanbull5: "womanbull5",
          womanbull6: "womanbull6",
          womanbull7: "womanbull7",
          womanbull8: "womanbull8",
          womanbull9: "womanbull9",
          womanbull10: "womanbull10",
          womanbull103: "womanbull103",
          womanbull105: "womanbull105",
          womanbull106: "womanbull106"
        };
        _this.ResultAudioMan = {
          manbull0: "manbull0",
          manbull1: "manbull1",
          manbull2: "manbull2",
          manbull3: "manbull3",
          manbull4: "manbull4",
          manbull5: "manbull5",
          manbull6: "manbull6",
          manbull7: "manbull7",
          manbull8: "manbull8",
          manbull9: "manbull9",
          manbull10: "manbull10",
          manbull103: "manbull103",
          manbull105: "manbull105",
          manbull106: "manbull106"
        };
        _this.process_audio = {
          audio_start: "audio_start",
          audio_fapai: "audio_fapai",
          Particle_Money: "Particle_Money"
        };
        _this.other_audio = {
          audio_ready: "audio_ready",
          backmusic: "backmusic"
        };
        return _this;
      }
      MpnnAudioMgr.prototype.playTest1Audio = function() {
        cc.audioEngine.play(this.formatStr(this.manUrl, "fix_msg_1"), false, 1);
      };
      MpnnAudioMgr.prototype.playReadyAudio = function() {
        cc.audioEngine.play(this.formatStr(this.baseUrl, this.other_audio.audio_ready), false, 1);
      };
      MpnnAudioMgr.prototype.playFaPaiAudio = function() {
        cc.audioEngine.play(this.formatStr(this.baseUrl, this.process_audio.audio_fapai), false, 1);
      };
      MpnnAudioMgr.prototype.playStartAudio = function() {
        cc.audioEngine.play(this.formatStr(this.baseUrl, this.process_audio.audio_start), false, 1);
      };
      MpnnAudioMgr.prototype.playBGM = function() {
        cc.audioEngine.play(this.formatStr(this.baseUrl, this.other_audio.backmusic), false, 1);
      };
      MpnnAudioMgr.prototype.playParticle_MoneyAudio = function() {
        cc.audioEngine.play(this.formatStr(this.baseUrl, this.process_audio.Particle_Money), false, 1);
      };
      MpnnAudioMgr.prototype.playResultAudio = function(value, sex) {
        var temp;
        var url;
        url = 2 == sex ? this.womanUrl : this.manUrl;
        switch (value) {
         case 0:
          temp = 2 == sex ? this.ResultAudioWoman.womanbull0 : this.ResultAudioMan.manbull0;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
          break;

         case "1":
          temp = 2 == sex ? this.ResultAudioWoman.womanbull1 : this.ResultAudioMan.manbull1;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
          break;

         case "2":
          temp = 2 == sex ? this.ResultAudioWoman.womanbull2 : this.ResultAudioMan.manbull2;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
          break;

         case "3":
          temp = 2 == sex ? this.ResultAudioWoman.womanbull3 : this.ResultAudioMan.manbull3;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
          break;

         case "4":
          temp = 2 == sex ? this.ResultAudioWoman.womanbull4 : this.ResultAudioMan.manbull4;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
          break;

         case "5":
          temp = 2 == sex ? this.ResultAudioWoman.womanbull5 : this.ResultAudioMan.manbull5;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
          break;

         case "6":
          temp = 2 == sex ? this.ResultAudioWoman.womanbull6 : this.ResultAudioMan.manbull6;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
          break;

         case "7":
          temp = 2 == sex ? this.ResultAudioWoman.womanbull7 : this.ResultAudioMan.manbull7;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
          break;

         case "8":
          temp = 2 == sex ? this.ResultAudioWoman.womanbull8 : this.ResultAudioMan.manbull8;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
          break;

         case "9":
          temp = 2 == sex ? this.ResultAudioWoman.womanbull9 : this.ResultAudioMan.manbull9;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
          break;

         case "10":
          temp = 2 == sex ? this.ResultAudioWoman.womanbull10 : this.ResultAudioMan.manbull10;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
          break;

         case "17":
          temp = 2 == sex ? this.ResultAudioWoman.womanbull105 : this.ResultAudioMan.manbull105;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
          break;

         case "18":
          temp = 2 == sex ? this.ResultAudioWoman.womanbull103 : this.ResultAudioMan.manbull103;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
        }
      };
      MpnnAudioMgr.prototype.reloadAudio = function(cb) {
        for (var key in this.ResultAudioMan) cc.loader.load(this.formatStr(this.manUrl, this.ResultAudioMan[key]), function() {
          cb && cb();
        });
        for (var key in this.ResultAudioWoman) cc.loader.load(this.formatStr(this.womanUrl, this.ResultAudioWoman[key]), function() {
          cb && cb();
        });
      };
      MpnnAudioMgr.prototype.getAudioNum = function() {
        return Object.keys(this.dict_audio).length;
      };
      MpnnAudioMgr.prototype.releaseAll = function() {
        for (var key in this.ResultAudioMan) LoaderMgr_1.default.getInstance().releaseUrlRes(this.formatStr(this.manUrl, this.ResultAudioMan[key]));
        for (var key in this.ResultAudioWoman) LoaderMgr_1.default.getInstance().releaseUrlRes(this.formatStr(this.womanUrl, this.ResultAudioWoman[key]));
      };
      MpnnAudioMgr.prototype.formatStr = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
        var t = args, e = t.length;
        if (e < 1) return "";
        var i = /(%d)|(%s)/, n = 1, r = t[0], s = "string" == typeof r && i.test(r);
        if (s) for (var o = /%s/; n < e; ++n) {
          var a = t[n], c = "number" == typeof a ? i : o;
          c.test(r) ? r = r.replace(c, a) : r += " " + a;
        } else if (e > 1) for (;n < e; ++n) r += " " + t[n]; else r = "" + r;
        return r;
      };
      MpnnAudioMgr.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        delete MpnnAudioMgr._instance;
      };
      MpnnAudioMgr.getInstance = function() {
        this._instance || (this._instance = new MpnnAudioMgr());
        return this._instance;
      };
      return MpnnAudioMgr;
    }(BaseMgr_1.default);
    exports.default = MpnnAudioMgr;
    cc._RF.pop();
  }, {
    "../../../AppStart/AppMgrs/LoaderMgr": "LoaderMgr",
    "../../../Plat/Libs/BaseMgr": "BaseMgr",
    "../BullMgr/MpnnConst": "MpnnConst"
  } ],
  MpnnAudio: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "68ac581fa9HyoG5S3gxk58F", "MpnnAudio");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../../../Plat/Libs/BaseMgr");
    var GameAudioCfg_1 = require("../../../Plat/CfgMgrs/GameAudioCfg");
    var MpnnConst_1 = require("../BullMgr/MpnnConst");
    var resultAudioDic = {
      0: "niu0",
      1: "niu1",
      2: "niu2",
      3: "niu3",
      4: "niu4",
      5: "niu5",
      6: "niu6",
      7: "niu7",
      8: "niu8",
      9: "niu9",
      10: "niu10",
      12: "niu0",
      13: "niu0",
      14: "niu0",
      15: "niu13",
      17: "niu12",
      18: "niu11"
    };
    var opaudiodic = {};
    var BGMName = "backmusic";
    var processaudiodic = {};
    processaudiodic[MpnnConst_1.default.process.start] = "audio_start";
    processaudiodic["onPrepare"] = "audio_ready";
    processaudiodic[MpnnConst_1.default.process.giveCards] = "audio_fapai";
    processaudiodic[MpnnConst_1.default.process.settle] = "audio_win";
    var MpnnAudio = function(_super) {
      __extends(MpnnAudio, _super);
      function MpnnAudio() {
        return _super.call(this) || this;
      }
      MpnnAudio.getInstance = function() {
        this._instance || (this._instance = new MpnnAudio());
        return this._instance;
      };
      MpnnAudio.prototype.destroy = function() {
        GameAudioCfg_1.default.getInstance().stopbackgroudMusic();
        _super.prototype.destroy.call(this);
        MpnnAudio._instance = null;
        delete MpnnAudio._instance;
      };
      MpnnAudio.prototype.uncacheAll = function() {};
      MpnnAudio.prototype.playOpAudio = function(sex, op) {};
      MpnnAudio.prototype.playResultAudio = function(sex, resultType) {
        var type = parseInt(resultType);
        var audiotag = resultAudioDic[type];
        GameAudioCfg_1.default.getInstance().play(audiotag, sex);
      };
      MpnnAudio.prototype.playBGM = function() {
        GameAudioCfg_1.default.getInstance().playBGM(BGMName);
      };
      MpnnAudio.prototype.playGameProcessAudio = function(name, flag) {
        GameAudioCfg_1.default.getInstance().playGameProcessAudio(name, flag);
      };
      return MpnnAudio;
    }(BaseMgr_1.default);
    exports.default = MpnnAudio;
    cc._RF.pop();
  }, {
    "../../../Plat/CfgMgrs/GameAudioCfg": "GameAudioCfg",
    "../../../Plat/Libs/BaseMgr": "BaseMgr",
    "../BullMgr/MpnnConst": "MpnnConst"
  } ],
  MpnnConst: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a7edfg2brFPzYGDnRP+doa1", "MpnnConst");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = {
      gameType: {
        normal: 1,
        grabDealer: 2
      },
      clientEvent: {
        onInitRoom_Mpnn: "onInitRoom_mpnn",
        onStart: "onStart_mpnn",
        onGiveCards: "onGiveCards_mpnn",
        onProcess: "onProcess_mpnn",
        onSettle: "onSettle_mpnn",
        onTanPai: "onTanPai_mpnn",
        onSyncData: "onSyncData_mpnn",
        onMidEnter: "onMidEnter_mpnn",
        onChooseGrab: "onChooseGrab",
        onConfirmGrab: "onConfirmGrab",
        onChooseChip: "onChooseChip",
        onChipInfo: "onChipInfo"
      },
      process: {
        start: 1,
        giveCards: 2,
        chooseChip: 3,
        calculate: 4,
        settle: 5
      },
      oprEvent: {
        oprTanPai: 1,
        oprChooseGrab: 2,
        oprChooseChip: 3,
        oprBuyChip: 4,
        oprTestStart: 11,
        oprTestCards: 12
      },
      config: {
        bigCardOffWRate: 1.2,
        minCardOffWRate: .4,
        maxGroupCardsNum: 5,
        cardIntervalTime: .1,
        cardMoveTime: .25
      },
      title: {
        nothing: 0,
        winer: 1,
        loser: 2,
        maxNiuniu: 3
      }
    };
    cc._RF.pop();
  }, {} ],
  MpnnEntry: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "42756sE6M9ADKB1zrupyZS7", "MpnnEntry");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ModuleMgr_1 = require("../../Plat/GameMgrs/ModuleMgr");
    var modules = {
      BullRoom: "MpnnRoom",
      Bull_settle: "SubLayer/Games/Mpnn/Prefab_bull_settleCtrl",
      Bull_totalSettle: "GameStatistics/mpnn/MpnnFinalSettle",
      Mpnn_settle_openContent: "SubLayer/Games/Mpnn/Mpnn_settle_openContent",
      Mpnn_settle_meijuDetail: "SubLayer/Games/Mpnn/Mpnn_settle_openDetail",
      RoomUserInfo: "SubLayer/Plat/GameRoomCommon/RoomUserInfo",
      GambleRecord: "SubLayer/Games/Mpnn/Mpnn_record",
      Bull_settle_rowCotent: "GameCommon/Bull/bull_settle_rowContent",
      Mpnn_cuopai: "SubLayer/Games/Mpnn/Mpnn_cuopai",
      Bull_calculate: "GameCommon/Bull/Bull_calculateCtrl",
      Bull_goldFalsh: "GameCommon/Bull/Bull_ani_coinFlash"
    };
    var MpnnEntry = function() {
      function MpnnEntry() {}
      MpnnEntry.getInstance = function() {
        this._instance || (this._instance = new MpnnEntry());
        return this._instance;
      };
      MpnnEntry.prototype.registerModules = function() {
        ModuleMgr_1.default.getInstance().registerGame(modules);
      };
      return MpnnEntry;
    }();
    exports.default = MpnnEntry;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/ModuleMgr": "ModuleMgr"
  } ],
  MpnnLogic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ba2fd/tF/hFWIePVyOmMU44", "MpnnLogic");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../../../Plat/Libs/BaseMgr");
    var MpnnPlayer_1 = require("./MpnnPlayer");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var MpnnConst_1 = require("./MpnnConst");
    var GEventDef_1 = require("../../../Plat/GameMgrs/GEventDef");
    var BunchInfoMgr_1 = require("../../../Plat/GameMgrs/BunchInfoMgr");
    var BullPosMgr_1 = require("../../../GameCommon/Bull/BullPosMgr");
    var BullCardsMgr_1 = require("../../../GameCommon/Bull/BullCardsMgr");
    var GameAudioCfg_1 = require("../../../Plat/CfgMgrs/GameAudioCfg");
    var LoginMgr_1 = require("../../../Plat/GameMgrs/LoginMgr");
    var AppInfoMgr_1 = require("../../../AppStart/AppMgrs/AppInfoMgr");
    var chipIndex = {
      0: [ 1, 2 ],
      1: [ 2, 4 ],
      2: [ 4, 8 ],
      3: [ 5, 10 ]
    };
    var payType = {
      0: "房主支付",
      1: "AA支付",
      2: "赢家支付"
    };
    var MpnnLogic = function(_super) {
      __extends(MpnnLogic, _super);
      function MpnnLogic() {
        var _this = _super.call(this) || this;
        _this.initRoomCfg();
        _this.routes = {};
        _this.routes["onPrepare"] = _this.onPrepare;
        _this.routes["http.reqSettle"] = _this.http_reqSettle;
        _this.routes["connector.entryHandler.enterRoom"] = _this.onEnterRoom;
        _this.routes[MpnnConst_1.default.clientEvent.onProcess] = _this.onProcess;
        _this.routes[MpnnConst_1.default.clientEvent.onInitRoom_Mpnn] = _this.onInitRoom_Mpnn;
        _this.routes[MpnnConst_1.default.clientEvent.onSettle] = _this.onSettle_bull;
        _this.routes[MpnnConst_1.default.clientEvent.onSyncData] = _this.onSyncData;
        _this.routes[MpnnConst_1.default.clientEvent.onMidEnter] = _this.onMidEnter;
        _this.routes[MpnnConst_1.default.clientEvent.onChooseGrab] = _this.onChooseGrab;
        _this.routes[MpnnConst_1.default.clientEvent.onConfirmGrab] = _this.onConfirmGrab;
        _this.routes[MpnnConst_1.default.clientEvent.onChooseChip] = _this.onChooseChip;
        _this.routes[MpnnConst_1.default.clientEvent.onChipInfo] = _this.onChipInfo;
        return _this;
      }
      MpnnLogic.prototype.initRoomCfg = function() {
        this.seatcount = RoomMgr_1.default.getInstance().getSeatCount();
        this.fangkacfg = RoomMgr_1.default.getInstance().getFangKaCfg();
        this.baseChipValue = this.fangkacfg.v_minChip;
        var minchip = this.fangkacfg.v_minChip;
        this.players = {};
        this.grablist = {};
        this.chiplist = {};
        this.buychiplist = {};
        this.enterSeatIds = new Array();
        this.grabmax = 0;
        this.cur_waitTime = 0;
        this.curWinId = -1;
        this.serverTimeOff = 0;
        this.isWatcher = false;
        this.delaerSeatId = 0;
        this.isGrabing = 0;
        this.isExtraGrabing = false;
        this.extraChip = 0;
        for (var i = 0; i < this.seatcount; i++) {
          this.players[i] = new MpnnPlayer_1.default();
          this.players[i].init(i, this);
          this.grablist[i] = 0;
          this.chiplist[i] = chipIndex[minchip][0];
          this.buychiplist[i] = 0;
        }
        BullCardsMgr_1.default.initTeshuLimit();
      };
      MpnnLogic.prototype.clearData = function() {
        this.cur_waitTime = 0;
      };
      MpnnLogic.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        delete MpnnLogic._instance;
        BullPosMgr_1.default.getInstance().clear();
      };
      MpnnLogic.prototype.isShowStartBtn = function() {
        var isShow = RoomMgr_1.default.getInstance().isShowStartBtn();
      };
      MpnnLogic.prototype.native_invite = function() {
        if (cc.sys.isNative) {
          var roominfo = RoomMgr_1.default.getInstance().roominfo;
          var roomvalue = RoomMgr_1.default.getInstance().getFangKaCfg();
          var appname = AppInfoMgr_1.default.getInstance().getAppName();
          G_PLATFORM.wxShareRoom(G_PLATFORM.WX_SHARE_TYPE.WXSceneSession, appname + "好友房间邀请", RoomMgr_1.default.getInstance().getGameName() + " 房间号:" + roominfo.password + " 局数：" + roomvalue.v_roundcount + "局 人数：" + roomvalue.v_seatcount + "人 " + payType[roomvalue.v_paytype], roominfo.password);
        }
      };
      MpnnLogic.prototype.sendTanpai = function() {
        this.send_msg("room.roomHandler.playerOp", {
          oprType: MpnnConst_1.default.oprEvent.oprTanPai
        });
      };
      MpnnLogic.prototype.sendTestCards = function(cardsList) {
        this.send_msg("room.roomHandler.playerOp", {
          oprType: MpnnConst_1.default.oprEvent.oprTestCards,
          dictCards: cardsList
        });
      };
      MpnnLogic.prototype.sendTestStart = function() {
        this.send_msg("room.roomHandler.playerOp", {
          oprType: MpnnConst_1.default.oprEvent.oprTestStart
        });
      };
      MpnnLogic.prototype.sendChooseGrab = function(multiple) {
        console.log("发送抢庄sendChooseGrab=, " + multiple);
        var myseatid = RoomMgr_1.default.getInstance().getMySeatId();
        this.grablist[myseatid] = multiple;
        this.send_msg("room.roomHandler.playerOp", {
          oprType: MpnnConst_1.default.oprEvent.oprChooseGrab,
          grabRate: multiple
        });
      };
      MpnnLogic.prototype.sendChooseChip = function(chipCount) {
        console.log("发送下注sendChooseChip=, " + chipCount);
        var myseatid = RoomMgr_1.default.getInstance().getMySeatId();
        this.chiplist[myseatid] = chipCount;
        this.send_msg("room.roomHandler.playerOp", {
          oprType: MpnnConst_1.default.oprEvent.oprChooseChip,
          chipValue: chipCount
        });
      };
      MpnnLogic.prototype.sendBuyChip = function(chipCount) {
        console.log("发送下注sendChooseChip=, " + chipCount);
        this.send_msg("room.roomHandler.playerOp", {
          oprType: MpnnConst_1.default.oprEvent.oprBuyChip,
          chipValue: chipCount
        });
      };
      MpnnLogic.prototype.emit_showResultType = function(data) {
        G_FRAME.globalEmitter.emit(GEventDef_1.default.bull_showResultType, data);
      };
      MpnnLogic.prototype.emit_giveCardsEnd = function() {
        G_FRAME.globalEmitter.emit(GEventDef_1.default.bull_giveCardEnd);
      };
      MpnnLogic.prototype.emit_flyGold = function(startPos, targetPos, tagStr, flyType) {
        G_FRAME.globalEmitter.emit(GEventDef_1.default.bull_flyGold, {
          startPos: startPos,
          targetPos: targetPos,
          flyType: flyType,
          tagStr: tagStr
        });
      };
      MpnnLogic.prototype.emit_flyGoldEnd = function(tagStr) {
        G_FRAME.globalEmitter.emit(GEventDef_1.default.bull_flyGoldEnd, tagStr);
      };
      MpnnLogic.prototype.emit_cuopai = function(msg) {
        G_FRAME.globalEmitter.emit(GEventDef_1.default.bull_cuopai, msg);
      };
      MpnnLogic.prototype.emit_cuopaiEnd = function(msg) {
        G_FRAME.globalEmitter.emit(GEventDef_1.default.bull_cuopaiEnd, msg);
      };
      MpnnLogic.prototype.onEnterRoom = function(msg) {};
      MpnnLogic.prototype.http_reqSettle = function(msg) {
        console.log("接收到平台的结算信息= ", msg);
      };
      MpnnLogic.prototype.onInitRoom_Mpnn = function(msg) {
        console.log("初始房间的数据onInitRoom_Mpnn=, " + msg);
        this.dict_playingSeats = {};
        var room = RoomMgr_1.default.getInstance();
        var users = room.users;
        for (var seatId in users) this.dict_playingSeats[seatId] = users[seatId];
      };
      MpnnLogic.prototype.syncData = function() {
        this.send_msg("room.roomHandler.syncData", null);
      };
      MpnnLogic.prototype.onSyncData = function(msg) {
        console.log("========onSyncData===========");
        console.log(msg);
        this.dict_playingSeats = {};
        var room = RoomMgr_1.default.getInstance();
        var users = room.users;
        for (var seatId in users) this.dict_playingSeats[seatId] = users[seatId];
        this.serverTimeOff = msg.serverTime - Date.now();
        this.cur_waitTime = msg.waitTime;
        this.baseChipValue = msg.curChipValue;
        if (null != msg.dictChooseGrab) for (var key in msg.dictChooseGrab) this.grablist[key] = msg.dictChooseGrab[key];
        if (null != msg.dictChooseChip) for (var key in msg.dictChooseChip) this.chiplist[key] = msg.dictChooseChip[key];
        this.delaerSeatId = Number(msg.dealerSeatId);
        if (null != msg.idleSeatIdList && null != msg.idleSeatIdList.length) for (var key in msg.idleSeatIdList) {
          var bAdd = true;
          var teatid = msg.idleSeatIdList[key];
          for (var odd in this.enterSeatIds) {
            var seatid = this.enterSeatIds[key];
            if (teatid == seatid) {
              bAdd = false;
              break;
            }
          }
          bAdd && this.enterSeatIds.push(teatid);
        }
      };
      MpnnLogic.prototype.onPrepare = function(msg) {
        if (msg.seatid == RoomMgr_1.default.getInstance().getMySeatId()) {
          this.clearData();
          GameAudioCfg_1.default.getInstance().playGameProcessAudio("audio_start", false);
        }
      };
      MpnnLogic.prototype.onProcess = function(msg) {
        var myDate = new Date();
        switch (msg.process) {
         case MpnnConst_1.default.process.start:
          this.cur_waitTime = 0;
          this.curWinId = -1;
          this.isWatcher = false;
          this.serverTimeOff = msg.serverTime - Date.now();
          break;

         case MpnnConst_1.default.process.giveCards:
          this.cur_waitTime = msg.waitTime;
          GameAudioCfg_1.default.getInstance().playGameProcessAudio("audio_fapai", false);
          break;

         case MpnnConst_1.default.process.chooseChip:
         case MpnnConst_1.default.process.calculate:
          this.cur_waitTime = msg.waitTime;
          break;

         case MpnnConst_1.default.process.settle:
          this.cur_waitTime = 0;
          this.extraChip = 0;
          if (null != this.enterSeatIds.length) {
            delete this.enterSeatIds;
            this.enterSeatIds = new Array();
          }
          this.fangkacfg = RoomMgr_1.default.getInstance().getFangKaCfg();
          var minchip = this.fangkacfg.v_minChip;
          for (var i = 0; i < this.seatcount; i++) {
            this.grablist[i] = 0;
            this.chiplist[i] = chipIndex[minchip][0];
            this.buychiplist[i] = 0;
          }
          this.isWatcher = false;
        }
      };
      MpnnLogic.prototype.onSettle_bull = function(msg) {
        console.log("****************onSettle = ", msg);
        this.isExtraGrabing = false;
        this.curWinId = msg.winSeatId;
      };
      MpnnLogic.prototype.onMidEnter = function(msg) {
        console.log("中途入场的", msg);
        if (msg.enterSeatId == RoomMgr_1.default.getInstance().getMySeatId()) {
          this.cur_waitTime = msg.waitTime;
          this.serverTimeOff = msg.serverTime - Date.now();
          this.isWatcher = true;
          this.dict_playingSeats = {};
          var room = RoomMgr_1.default.getInstance();
          var users = room.users;
          for (var seatId in users) this.dict_playingSeats[seatId] = users[seatId];
        }
        if (null != msg.idleSeatIdList && null != msg.idleSeatIdList.length) for (var key in msg.idleSeatIdList) {
          var bAdd = true;
          var teatid = msg.idleSeatIdList[key];
          for (var odd in this.enterSeatIds) {
            var seatid = this.enterSeatIds[key];
            if (teatid == seatid) {
              bAdd = false;
              break;
            }
          }
          bAdd && this.enterSeatIds.push(teatid);
        }
        console.log("this.model.watcherSeatId.length", this.enterSeatIds);
      };
      MpnnLogic.prototype.onChooseGrab = function(msg) {
        console.log("抢庄倍数", msg);
        this.grablist[msg.seatId] = msg.grabRate;
        this.grabmax = msg.grabRate > this.grabmax ? msg.grabRate : this.grabmax;
      };
      MpnnLogic.prototype.onConfirmGrab = function(msg) {
        console.log("定庄玩家", msg);
        this.delaerSeatId = Number(msg.delaerSeatId);
        this.isGrabing = msg.isGrabing;
        if (0 == this.grablist[this.delaerSeatId]) {
          this.isExtraGrabing = true;
          this.grablist[this.delaerSeatId] = 1;
        } else this.isExtraGrabing = false;
      };
      MpnnLogic.prototype.onChooseChip = function(msg) {
        GameAudioCfg_1.default.getInstance().playGameProcessAudio("audio_raise", false);
        this.chiplist[msg.seatId] = msg.chipValue;
      };
      MpnnLogic.prototype.onChipInfo = function(msg) {
        this.extraChip = msg.tuizhuValue;
        this.gemit("updateExtraChip");
        console.log("闲家推注的注码：" + msg.tuizhuValue);
      };
      MpnnLogic.prototype.openGoldFalsh = function(cb) {
        this.start_sub_module(G_MODULE.Bull_goldFalsh, cb);
      };
      MpnnLogic.prototype.openSettle = function(cb) {
        this.start_sub_module(G_MODULE.Bull_settle, cb, "Prefab_bull_settleCtrl");
      };
      MpnnLogic.prototype.openCalculate = function(cb) {
        this.start_sub_module(G_MODULE.Bull_calculate, cb, "Bull_calculateCtrl");
      };
      MpnnLogic.prototype.toPlaza = function() {
        LoginMgr_1.default.getInstance().disconnectGameSvr();
      };
      MpnnLogic.prototype.openClock = function() {
        this.start_sub_module(G_MODULE.BullClock);
      };
      MpnnLogic.prototype.openCuopai = function(cb) {
        this.start_sub_module(G_MODULE.Mpnn_cuopai, cb);
      };
      MpnnLogic.prototype.openTotalSettle = function() {
        this.start_sub_module(G_MODULE.Bull_totalSettle);
      };
      MpnnLogic.prototype.openCardsTest = function() {
        this.start_sub_module("GameCommon/Bull/Bull_cardsTest");
      };
      MpnnLogic.prototype.getValidSeats = function() {
        return this.dict_playingSeats;
      };
      MpnnLogic.prototype.getMaxRounds = function() {
        return this.fangkacfg.v_roundcount;
      };
      MpnnLogic.prototype.getBaseChipValue = function() {
        return this.baseChipValue;
      };
      MpnnLogic.prototype.getCurWaitTime = function() {
        return Math.floor((this.cur_waitTime - (Date.now() + this.serverTimeOff)) / 1e3);
      };
      MpnnLogic.prototype.getPlayerInfo = function(seatId) {
        return this.players[seatId];
      };
      MpnnLogic.prototype.getMyViewSeatId = function() {
        return RoomMgr_1.default.getInstance().getViewSeatId(this.getMyLogicSeatId());
      };
      MpnnLogic.prototype.getMyLogicSeatId = function() {
        return RoomMgr_1.default.getInstance().getMySeatId();
      };
      MpnnLogic.prototype.getMyScore = function(logicSeatId) {
        var bunchInfo = BunchInfoMgr_1.default.getInstance().getBunchInfo();
        if (bunchInfo && bunchInfo.leiji[logicSeatId]) return bunchInfo.leiji[logicSeatId].zongshuying;
        return 0;
      };
      MpnnLogic.prototype.getLeijiInfo = function() {
        var bunchInfo = BunchInfoMgr_1.default.getInstance().getBunchInfo();
        if (bunchInfo) return bunchInfo.leiji;
        return null;
      };
      MpnnLogic.prototype.getIsMyWin = function() {
        return RoomMgr_1.default.getInstance().getMySeatId() == this.curWinId;
      };
      MpnnLogic.prototype.getIsCuopaiLimit = function() {
        return parseInt(this.fangkacfg.v_cuopaiLimit);
      };
      MpnnLogic.prototype.getIsMyWatcher = function() {
        return this.isWatcher;
      };
      MpnnLogic.prototype.getGrablist = function() {
        return this.grablist;
      };
      MpnnLogic.prototype.getGrabmax = function() {
        return this.grabmax;
      };
      MpnnLogic.prototype.getChiplist = function() {
        return this.chiplist;
      };
      MpnnLogic.prototype.getDelaerSeatId = function() {
        return this.delaerSeatId;
      };
      MpnnLogic.prototype.getIsGrabing = function() {
        return this.isGrabing;
      };
      MpnnLogic.prototype.getExtraGrabing = function() {
        return this.isExtraGrabing;
      };
      MpnnLogic.prototype.getExtraChip = function() {
        return this.extraChip;
      };
      MpnnLogic.prototype.getEnterSeatIds = function() {
        return this.enterSeatIds;
      };
      MpnnLogic.getInstance = function() {
        this._instance || (this._instance = new MpnnLogic());
        return this._instance;
      };
      return MpnnLogic;
    }(BaseMgr_1.default);
    exports.default = MpnnLogic;
    cc._RF.pop();
  }, {
    "../../../AppStart/AppMgrs/AppInfoMgr": "AppInfoMgr",
    "../../../GameCommon/Bull/BullCardsMgr": "BullCardsMgr",
    "../../../GameCommon/Bull/BullPosMgr": "BullPosMgr",
    "../../../Plat/CfgMgrs/GameAudioCfg": "GameAudioCfg",
    "../../../Plat/GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../../Plat/GameMgrs/GEventDef": "GEventDef",
    "../../../Plat/GameMgrs/LoginMgr": "LoginMgr",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseMgr": "BaseMgr",
    "./MpnnConst": "MpnnConst",
    "./MpnnPlayer": "MpnnPlayer"
  } ],
  MpnnModulesInstallCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b366an219NPOru6A27upnrA", "MpnnModulesInstallCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var LoaderMgr_1 = require("../../../AppStart/AppMgrs/LoaderMgr");
    var LocalStorage_1 = require("../../../Plat/Libs/LocalStorage");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CONFIGS = {
      localBGName: "bull_backgroundTable"
    };
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.mySeatId = null;
        _this.resultGoldUpH = null;
        _this.seatCount = null;
        _this.voiceState = null;
        _this.maikefeng_on = null;
        _this.laba_on = null;
        _this.resultGoldUpH = 100;
        _this.seatCount = RoomMgr_1.default.getInstance().getSeatCount();
        return _this;
      }
      Model.prototype.switchMaiKeFengState = function() {
        var voicestate = null;
        voicestate = this.maikefeng_on ? 3 : 1;
        return voicestate;
      };
      Model.prototype.initBGState = function() {
        this.bgState = LocalStorage_1.default.getInstance().getBullRoomBGCfg();
        if (!this.bgState) {
          this.bgState = 1;
          LocalStorage_1.default.getInstance().setBullRoomBGCfg(this.bgState);
        }
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.node_resultGold = null;
        _this.prefab_backGround = null;
        _this.ui = {
          btn_newmaimaikefeng: null,
          node_parent_bg: null,
          node_parent_seat: null,
          node_parent_upUi: null,
          prefab_roomInfo: null,
          prefab_background6: null,
          prefab_background8: null,
          prefab_tipClock: null,
          prefab_roomAround: null,
          prefab_mpnnroomrule: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.btn_newmaimaikefeng = ctrl.btn_newmaimaikefeng;
        this.ui.prefab_roomAround = ctrl.prefab_roomAround;
        this.ui.node_parent_bg = ctrl.node_parent_bg;
        this.ui.node_parent_seat = ctrl.node_parent_seat;
        this.ui.node_parent_upUi = ctrl.node_parent_upUi;
        this.ui.prefab_roomInfo = ctrl.prefab_roomInfo;
        this.ui.prefab_background6 = ctrl.prefab_background6;
        this.ui.prefab_background8 = ctrl.prefab_background8;
        this.ui.prefab_tipClock = ctrl.prefab_tipClock;
        this.ui.prefab_mpnnroomrule = ctrl.prefab_mpnnroomrule;
      };
      View.prototype.initModules = function(cb) {
        this.model.seatCount <= 6 ? this.prefab_backGround = cc.instantiate(this.ui.prefab_background6) : this.prefab_backGround = cc.instantiate(this.ui.prefab_background8);
        this.prefab_backGround.parent = this.ui.node_parent_bg;
        this.prefab_backGround.active = true;
        this.model.initBGState();
        this.updateBackGroundSpriteFrame();
        var curNode = cc.instantiate(this.ui.prefab_roomInfo);
        curNode.parent = this.ui.node_parent_bg;
        curNode = cc.instantiate(this.ui.prefab_tipClock);
        curNode.parent = this.ui.node_parent_upUi;
        curNode = cc.instantiate(this.ui.prefab_mpnnroomrule);
        curNode.parent = this.ui.node_parent_bg;
        curNode = cc.instantiate(this.ui.prefab_roomAround);
        curNode.parent = this.ui.node_parent_upUi;
        curNode.zIndex = 1;
        cb();
        cb = null;
      };
      View.prototype.updateBackGroundSpriteFrame = function() {
        var _this = this;
        this.getBGImg(function(frame) {
          _this.prefab_backGround.children[0].getComponent(cc.Sprite).spriteFrame = frame;
          _this.prefab_backGround.children[1].getComponent(cc.Sprite).spriteFrame = frame;
        });
      };
      View.prototype.getBGImg = function(cb) {
        var state = this.model.bgState;
        var bgName6 = "img_6rnn";
        var bgName8 = "img_8rnn";
        var blueStr = 1 == state ? "" : "_blue";
        var curBGName = "";
        curBGName = this.model.seatCount <= 6 ? bgName6 + blueStr : bgName8 + blueStr;
        var url = "Icons/tbnnBGChange/" + curBGName;
        LoaderMgr_1.default.getInstance().loadRes(url, function(assert) {
          cb(new cc.SpriteFrame(assert));
        });
      };
      return View;
    }(BaseView_1.default);
    var MpnnModulesInstallCtrl = function(_super) {
      __extends(MpnnModulesInstallCtrl, _super);
      function MpnnModulesInstallCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.node_parent_bg = null;
        _this.node_parent_seat = null;
        _this.node_parent_upUi = null;
        _this.prefab_background6 = null;
        _this.prefab_background8 = null;
        _this.prefab_mpnnroomrule = null;
        _this.prefab_roomInfo = null;
        _this.prefab_tipClock = null;
        _this.prefab_roomAround = null;
        _this.btn_newmaimaikefeng = null;
        return _this;
      }
      MpnnModulesInstallCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      MpnnModulesInstallCtrl.prototype.defineNetEvents = function() {};
      MpnnModulesInstallCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          setBackGroundSpriteFrame: this.setBackGroundSpriteFrame
        };
      };
      MpnnModulesInstallCtrl.prototype.connectUi = function() {};
      MpnnModulesInstallCtrl.prototype.start = function() {
        var _this = this;
        this.view.initModules(function() {
          _this.startGame();
        });
      };
      MpnnModulesInstallCtrl.prototype.startGame = function() {
        RoomMgr_1.default.getInstance().enterRoom();
      };
      MpnnModulesInstallCtrl.prototype.setBackGroundSpriteFrame = function() {
        this.model.initBGState();
        this.view.updateBackGroundSpriteFrame();
      };
      __decorate([ property({
        type: cc.Node,
        displayName: "background"
      }) ], MpnnModulesInstallCtrl.prototype, "node_parent_bg", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "seatParent"
      }) ], MpnnModulesInstallCtrl.prototype, "node_parent_seat", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "upUi"
      }) ], MpnnModulesInstallCtrl.prototype, "node_parent_upUi", void 0);
      __decorate([ property({
        type: cc.Prefab,
        displayName: "bgPrefab6"
      }) ], MpnnModulesInstallCtrl.prototype, "prefab_background6", void 0);
      __decorate([ property({
        type: cc.Prefab,
        displayName: "bgPrefab8"
      }) ], MpnnModulesInstallCtrl.prototype, "prefab_background8", void 0);
      __decorate([ property({
        type: cc.Prefab,
        displayName: "mpnn_roomrule"
      }) ], MpnnModulesInstallCtrl.prototype, "prefab_mpnnroomrule", void 0);
      __decorate([ property({
        type: cc.Prefab,
        displayName: "roomInfo"
      }) ], MpnnModulesInstallCtrl.prototype, "prefab_roomInfo", void 0);
      __decorate([ property({
        type: cc.Prefab,
        displayName: "tipClock"
      }) ], MpnnModulesInstallCtrl.prototype, "prefab_tipClock", void 0);
      __decorate([ property({
        type: cc.Prefab,
        displayName: "roomAround"
      }) ], MpnnModulesInstallCtrl.prototype, "prefab_roomAround", void 0);
      __decorate([ property(cc.Node) ], MpnnModulesInstallCtrl.prototype, "btn_newmaimaikefeng", void 0);
      MpnnModulesInstallCtrl = __decorate([ ccclass ], MpnnModulesInstallCtrl);
      return MpnnModulesInstallCtrl;
    }(BaseCtrl_1.default);
    exports.default = MpnnModulesInstallCtrl;
    cc._RF.pop();
  }, {
    "../../../AppStart/AppMgrs/LoaderMgr": "LoaderMgr",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../../../Plat/Libs/LocalStorage": "LocalStorage"
  } ],
  MpnnPlayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f9b2c3l9dVNIprSFRm6wGuv", "MpnnPlayer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MpnnPlayer = function() {
      function MpnnPlayer() {
        this.uid = null;
        this.seatid = null;
        this.logic = null;
        this.uid = null;
        this.seatid = null;
      }
      MpnnPlayer.prototype.init = function(seatid, logic) {
        this.seatid = seatid;
        this.logic = logic;
      };
      return MpnnPlayer;
    }();
    exports.default = MpnnPlayer;
    cc._RF.pop();
  }, {} ],
  MpnnProp: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a9a86Z7X5pLt7x7oAZczCIK", "MpnnProp");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MpnnProp = function() {
      function MpnnProp(customcfg) {
        this.customcfg = null;
        this.defaultcfg = {
          t_niu_0: 1,
          t_niu_1: 1,
          t_niu_2: 1,
          t_niu_3: 1,
          t_niu_4: 1,
          t_niu_5: 1,
          t_niu_6: 1,
          t_niu_7: 2,
          t_niu_8: 2,
          t_niu_9: 3,
          t_niu_10: 4,
          t_niu_12: 5,
          t_niu_13: 5,
          t_niu_14: 6,
          t_niu_15: 6,
          t_niu_17: 5,
          t_niu_18: 8,
          v_cuopaiLimit: 1,
          v_fangfei: 1,
          v_huluNiuLimit: 1,
          v_midEnterLimit: 1,
          v_minChip: 1,
          v_paytype: 1,
          v_roundcount: 1,
          v_seatcount: 1,
          v_shunziNiuLimit: 1,
          v_fullstart: 4,
          v_startModel: 1,
          v_tonghuaNiuLimit: 1,
          v_wanglaiLimit: 1,
          v_wuhuaNiuLimit: 1,
          v_wuxiaoNiuLimit: 1,
          v_zhadanNiuLimit: 1,
          v_playeraddin: 0,
          v_grabbanker: 1,
          v_playerbuyLimit: 1,
          v_betLimit: 1,
          v_betredoubleLimit: 1,
          v_shufflingLimit: 1
        };
        this.customcfg = customcfg;
      }
      MpnnProp.prototype.get_t_niu_0 = function() {
        if (null != this.customcfg["t_niu_0"]) return this.customcfg["t_niu_0"];
        return this.defaultcfg["t_niu_0"];
      };
      MpnnProp.prototype.get_t_niu_1 = function() {
        if (null != this.customcfg["t_niu_1"]) return this.customcfg["t_niu_1"];
        return this.defaultcfg["t_niu_1"];
      };
      MpnnProp.prototype.get_t_niu_2 = function() {
        if (null != this.customcfg["t_niu_2"]) return this.customcfg["t_niu_2"];
        return this.defaultcfg["t_niu_2"];
      };
      MpnnProp.prototype.get_t_niu_3 = function() {
        if (null != this.customcfg["t_niu_3"]) return this.customcfg["t_niu_3"];
        return this.defaultcfg["t_niu_3"];
      };
      MpnnProp.prototype.get_t_niu_4 = function() {
        if (null != this.customcfg["t_niu_4"]) return this.customcfg["t_niu_4"];
        return this.defaultcfg["t_niu_4"];
      };
      MpnnProp.prototype.get_t_niu_5 = function() {
        if (null != this.customcfg["t_niu_5"]) return this.customcfg["t_niu_5"];
        return this.defaultcfg["t_niu_5"];
      };
      MpnnProp.prototype.get_t_niu_6 = function() {
        if (null != this.customcfg["t_niu_6"]) return this.customcfg["t_niu_6"];
        return this.defaultcfg["t_niu_6"];
      };
      MpnnProp.prototype.get_t_niu_7 = function() {
        if (null != this.customcfg["t_niu_7"]) return this.customcfg["t_niu_7"];
        return this.defaultcfg["t_niu_7"];
      };
      MpnnProp.prototype.get_t_niu_8 = function() {
        if (null != this.customcfg["t_niu_8"]) return this.customcfg["t_niu_8"];
        return this.defaultcfg["t_niu_8"];
      };
      MpnnProp.prototype.get_t_niu_9 = function() {
        if (null != this.customcfg["t_niu_9"]) return this.customcfg["t_niu_9"];
        return this.defaultcfg["t_niu_9"];
      };
      MpnnProp.prototype.get_t_niu_10 = function() {
        if (null != this.customcfg["t_niu_10"]) return this.customcfg["t_niu_10"];
        return this.defaultcfg["t_niu_10"];
      };
      MpnnProp.prototype.get_t_niu_12 = function() {
        if (null != this.customcfg["t_niu_12"]) return this.customcfg["t_niu_12"];
        return this.defaultcfg["t_niu_12"];
      };
      MpnnProp.prototype.get_t_niu_13 = function() {
        if (null != this.customcfg["t_niu_13"]) return this.customcfg["t_niu_13"];
        return this.defaultcfg["t_niu_13"];
      };
      MpnnProp.prototype.get_t_niu_14 = function() {
        if (null != this.customcfg["t_niu_14"]) return this.customcfg["t_niu_14"];
        return this.defaultcfg["t_niu_14"];
      };
      MpnnProp.prototype.get_t_niu_15 = function() {
        if (null != this.customcfg["t_niu_15"]) return this.customcfg["t_niu_15"];
        return this.defaultcfg["t_niu_15"];
      };
      MpnnProp.prototype.get_t_niu_17 = function() {
        if (null != this.customcfg["t_niu_17"]) return this.customcfg["t_niu_17"];
        return this.defaultcfg["t_niu_17"];
      };
      MpnnProp.prototype.get_t_niu_18 = function() {
        if (null != this.customcfg["t_niu_18"]) return this.customcfg["t_niu_18"];
        return this.defaultcfg["t_niu_18"];
      };
      MpnnProp.prototype.get_v_cuopaiLimit = function() {
        if (null != this.customcfg["v_cuopaiLimit"]) return this.customcfg["v_cuopaiLimit"];
        return this.defaultcfg["v_cuopaiLimit"];
      };
      MpnnProp.prototype.get_v_fangfei = function() {
        if (null != this.customcfg["v_fangfei"]) return this.customcfg["v_fangfei"];
        return this.defaultcfg["v_fangfei"];
      };
      MpnnProp.prototype.get_v_huluNiuLimit = function() {
        if (null != this.customcfg["v_huluNiuLimit"]) return this.customcfg["v_huluNiuLimit"];
        return this.defaultcfg["v_huluNiuLimit"];
      };
      MpnnProp.prototype.get_v_midEnterLimit = function() {
        if (null != this.customcfg["v_midEnterLimit"]) return this.customcfg["v_midEnterLimit"];
        return this.defaultcfg["v_midEnterLimit"];
      };
      MpnnProp.prototype.get_v_minChip = function() {
        if (null != this.customcfg["v_minChip"]) return this.customcfg["v_minChip"];
        return this.defaultcfg["v_minChip"];
      };
      MpnnProp.prototype.get_v_paytype = function() {
        if (null != this.customcfg["v_paytype"]) return this.customcfg["v_paytype"];
        return this.defaultcfg["v_paytype"];
      };
      MpnnProp.prototype.get_v_roundcount = function() {
        if (null != this.customcfg["v_roundcount"]) return this.customcfg["v_roundcount"];
        return this.defaultcfg["v_roundcount"];
      };
      MpnnProp.prototype.get_v_seatcount = function() {
        if (null != this.customcfg["v_seatcount"]) return this.customcfg["v_seatcount"];
        return this.defaultcfg["v_seatcount"];
      };
      MpnnProp.prototype.get_v_shunziNiuLimit = function() {
        if (null != this.customcfg["v_shunziNiuLimit"]) return this.customcfg["v_shunziNiuLimit"];
        return this.defaultcfg["v_shunziNiuLimit"];
      };
      MpnnProp.prototype.get_v_fullstart = function() {
        if (null != this.customcfg["v_fullstart"]) return this.customcfg["v_fullstart"];
        return this.defaultcfg["v_fullstart"];
      };
      MpnnProp.prototype.get_v_startModel = function() {
        if (null != this.customcfg["v_startModel"]) return this.customcfg["v_startModel"];
        return this.defaultcfg["v_startModel"];
      };
      MpnnProp.prototype.get_v_tonghuaNiuLimit = function() {
        if (null != this.customcfg["v_tonghuaNiuLimit"]) return this.customcfg["v_tonghuaNiuLimit"];
        return this.defaultcfg["v_tonghuaNiuLimit"];
      };
      MpnnProp.prototype.get_v_wanglaiLimit = function() {
        if (null != this.customcfg["v_wanglaiLimit"]) return this.customcfg["v_wanglaiLimit"];
        return this.defaultcfg["v_wanglaiLimit"];
      };
      MpnnProp.prototype.get_v_wuhuaNiuLimit = function() {
        if (null != this.customcfg["v_wuhuaNiuLimit"]) return this.customcfg["v_wuhuaNiuLimit"];
        return this.defaultcfg["v_wuhuaNiuLimit"];
      };
      MpnnProp.prototype.get_v_wuxiaoNiuLimit = function() {
        if (null != this.customcfg["v_wuxiaoNiuLimit"]) return this.customcfg["v_wuxiaoNiuLimit"];
        return this.defaultcfg["v_wuxiaoNiuLimit"];
      };
      MpnnProp.prototype.get_v_zhadanNiuLimit = function() {
        if (null != this.customcfg["v_zhadanNiuLimit"]) return this.customcfg["v_zhadanNiuLimit"];
        return this.defaultcfg["v_zhadanNiuLimit"];
      };
      MpnnProp.prototype.get_v_playeraddin = function() {
        if (null != this.customcfg["v_playeraddin"]) return this.customcfg["v_playeraddin"];
        return this.defaultcfg["v_playeraddin"];
      };
      MpnnProp.prototype.get_v_grabbanker = function() {
        if (null != this.customcfg["v_grabbanker"]) return this.customcfg["v_grabbanker"];
        return this.defaultcfg["v_grabbanker"];
      };
      MpnnProp.prototype.get_v_playerbuyLimit = function() {
        if (null != this.customcfg["v_playerbuyLimit"]) return this.customcfg["v_playerbuyLimit"];
        return this.defaultcfg["v_playerbuyLimit"];
      };
      MpnnProp.prototype.get_v_betLimit = function() {
        if (null != this.customcfg["v_betLimit"]) return this.customcfg["v_betLimit"];
        return this.defaultcfg["v_betLimit"];
      };
      MpnnProp.prototype.get_v_betredoubleLimit = function() {
        if (null != this.customcfg["v_betredoubleLimit"]) return this.customcfg["v_betredoubleLimit"];
        return this.defaultcfg["v_betredoubleLimit"];
      };
      MpnnProp.prototype.get_v_shufflingLimit = function() {
        if (null != this.customcfg["v_shufflingLimit"]) return this.customcfg["v_shufflingLimit"];
        return this.defaultcfg["v_shufflingLimit"];
      };
      return MpnnProp;
    }();
    exports.default = MpnnProp;
    cc._RF.pop();
  }, {} ],
  MpnnRoomCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "aed95Fl/D5NO5DVRkugAXso", "MpnnRoomCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var MpnnLogic_1 = require("../BullMgr/MpnnLogic");
    var MpnnConst_1 = require("../BullMgr/MpnnConst");
    var BullPosMgr_1 = require("../../../GameCommon/Bull/BullPosMgr");
    var MpnnAudio_1 = require("../BullMgr/MpnnAudio");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.roomInfo = null;
        _this.roomid = null;
        _this.curRound = null;
        _this.time_startAni = null;
        _this.time_startAni = .5;
        return _this;
      }
      Model.prototype.getSeatCount = function() {
        return RoomMgr_1.default.getInstance().getSeatCount();
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.dict_readyTag = null;
        _this.intervalID = null;
        _this.ui = {
          node_btn_invite: null,
          node_chatPos: null,
          node_seatsConfig: null,
          node_seatParent: null,
          prefab_seat: null,
          node_giveCardPosConfig: null,
          node_btn_prepare: null,
          node_chipValuePos: null,
          node_resultTypePos: null,
          node_btn_sitDown: null,
          btn_startGame: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_btn_invite = ctrl.node_btn_invite;
        this.ui.node_chatPos = ctrl.node_chatPos;
        this.ui.node_seatsConfig = ctrl.node_seatsConfig;
        this.ui.node_seatParent = ctrl.node_seatParent;
        this.ui.prefab_seat = ctrl.prefab_seat;
        this.ui.node_btn_prepare = ctrl.node_btn_prepare;
        this.ui.node_giveCardPosConfig = ctrl.node_giveCardPosConfig;
        this.ui.node_chipValuePos = ctrl.node_chipValuePos;
        this.ui.node_resultTypePos = ctrl.node_resultTypePos;
        this.ui.node_btn_sitDown = ctrl.node_btn_sitDown;
        this.ui.btn_startGame = ctrl.btn_startGame;
        BullPosMgr_1.default.getInstance().setSeatConfigs(this.ui.node_seatsConfig);
        BullPosMgr_1.default.getInstance().setGiveCardPosCfg(this.ui.node_giveCardPosConfig);
        BullPosMgr_1.default.getInstance().setChipValuePosCfg(this.ui.node_chipValuePos);
        BullPosMgr_1.default.getInstance().setResultTypePosCfg(this.ui.node_resultTypePos);
        BullPosMgr_1.default.getInstance().setChatPosCfg(this.ui.node_chatPos);
        this.initSeats();
      };
      View.prototype.updateMyPrepared = function() {
        RoomMgr_1.default.getInstance().isFirstRound() || (this.ui.node_btn_prepare.active = !RoomMgr_1.default.getInstance().preparemap[RoomMgr_1.default.getInstance().getMySeatId()]);
      };
      View.prototype.setMyPreparedShow = function(isShow) {
        this.ui.node_btn_prepare.active = isShow;
      };
      View.prototype.setStartBtnShow = function(isShow) {
        this.ui.btn_startGame.active = isShow;
      };
      View.prototype.setSitdownShow = function(isShow) {
        this.ui.node_btn_sitDown.active = isShow;
      };
      View.prototype.setInvitingShow = function(isShow) {
        this.ui.node_btn_invite.active = isShow;
      };
      View.prototype.initSeats = function() {
        var seatCount = this.model.getSeatCount();
        for (var i = 0; i < seatCount; i++) {
          var curNode = cc.instantiate(this.ui.prefab_seat);
          BullPosMgr_1.default.getInstance().setSeatSizeConfig(curNode);
          curNode.parent = this.ui.node_seatParent;
          curNode.position = BullPosMgr_1.default.getInstance().getSeatPos(i);
        }
      };
      return View;
    }(BaseView_1.default);
    var MpnnRoomCtrl = function(_super) {
      __extends(MpnnRoomCtrl, _super);
      function MpnnRoomCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.node_seatsConfig = null;
        _this.node_giveCardPosConfig = null;
        _this.node_chipValuePos = null;
        _this.node_chatPos = null;
        _this.node_resultTypePos = null;
        _this.node_seatParent = null;
        _this.prefab_seat = null;
        _this.node_btn_prepare = null;
        _this.node_btn_sitDown = null;
        _this.btn_startGame = null;
        _this.node_btn_invite = null;
        return _this;
      }
      MpnnRoomCtrl.prototype.onLoad = function() {
        ctrl = this;
        RoomMgr_1.default.getInstance().setGameLibs(MpnnConst_1.default, null, MpnnLogic_1.default, MpnnAudio_1.default, null);
        this.initMvc(Model, View);
        console.log(RoomMgr_1.default.getInstance().getFangKaCfg());
        console.log(RoomMgr_1.default.getInstance().LogicCls);
      };
      MpnnRoomCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onLeaveRoom: this.onLeaveRoom,
          "room.roomHandler.exitRoom": this.room_roomHandler_exitRoom,
          "http.reqDisbandRoom": this.http_reqDisbandRoom,
          "http.reqRoomInfo": this.http_reqRoomInfo,
          onEnterRoom: this.EnterRoom
        };
        this.n_events["http.reqSettle"] = this.onReqSettle;
        this.n_events["onPrepare"] = this.onPrepare;
        this.n_events["connector.entryHandler.enterRoom"] = this.onEnterRoom;
        this.n_events[MpnnConst_1.default.clientEvent.onSyncData] = this.onSyncData;
        this.n_events["room.roomHandler.nextRound"] = this.onNextRound;
        this.n_events["onReEnterRoom"] = this.onReEnterRoom;
        this.n_events[MpnnConst_1.default.clientEvent.onInitRoom_Mpnn] = this.onInitRoom_Mpnn;
        this.n_events[MpnnConst_1.default.clientEvent.onMidEnter] = this.onMidEnter;
      };
      MpnnRoomCtrl.prototype.defineGlobalEvents = function() {
        this.g_events["usersUpdated"] = this.usersUpdated;
      };
      MpnnRoomCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.node_btn_sitDown, this.node_btn_sitDown_cb, "点击坐下");
        this.connect(G_UiType.image, this.ui.node_btn_prepare, this.node_btn_prepare_cb, "点击准备");
        this.connect(G_UiType.image, this.ui.btn_startGame, this.btn_startGame_cb, "点击房主开始游戏");
        this.connect(G_UiType.image, this.ui.node_btn_invite, this.btn_invite_cb, "点击邀请好友");
      };
      MpnnRoomCtrl.prototype.start = function() {
        this.isIPhoneX() && this.resetDesignResolution(this.node.getComponent(cc.Canvas));
        console.log("MpnnRoomCtrl通比牛牛房卡信息(赢家支付)", RoomMgr_1.default.getInstance().getFangKaCfg());
      };
      MpnnRoomCtrl.prototype.onEnterRoom = function(msg) {
        RoomMgr_1.default.getInstance().isRoomFull() || this.view.setInvitingShow(!MpnnLogic_1.default.getInstance().getIsMyWatcher() && RoomMgr_1.default.getInstance().isFirstRound());
        console.log("msgmsgmsg", msg);
        msg.isGameStarted || this.view.setInvitingShow(true);
        console.log("game onEnterRoom:", msg);
        this.view.setStartBtnShow(RoomMgr_1.default.getInstance().isShowStartBtn());
        this.view.setSitdownShow(!msg.bwatch && !msg.gamestarted && 0 == RoomMgr_1.default.getInstance().getRoundIndex() && !RoomMgr_1.default.getInstance().isPlayerPrepare());
        !RoomMgr_1.default.getInstance().isFirstRound() && msg.bwatch;
      };
      MpnnRoomCtrl.prototype.EnterRoom = function() {
        RoomMgr_1.default.getInstance().isRoomFull() ? this.view.setInvitingShow(false) : this.view.setInvitingShow(!MpnnLogic_1.default.getInstance().getIsMyWatcher() && RoomMgr_1.default.getInstance().isFirstRound());
        this.view.setStartBtnShow(RoomMgr_1.default.getInstance().isShowStartBtn());
        if (RoomMgr_1.default.getInstance().isGameStarted()) {
          RoomMgr_1.default.getInstance().reqCheating();
          this.view.setInvitingShow(false);
        }
        RoomMgr_1.default.getInstance().isFirstRound() || RoomMgr_1.default.getInstance().reqCheating();
      };
      MpnnRoomCtrl.prototype.http_reqRoomInfo = function() {
        console.log("RoomMgr.getInstance().roomtype=", RoomMgr_1.default.getInstance().roomtype);
      };
      MpnnRoomCtrl.prototype.http_reqDisbandRoom = function() {
        MpnnLogic_1.default.getInstance().toPlaza();
      };
      MpnnRoomCtrl.prototype.room_roomHandler_exitRoom = function() {
        MpnnLogic_1.default.getInstance().toPlaza();
      };
      MpnnRoomCtrl.prototype.onPrepare = function(msg) {
        var mySeatId = RoomMgr_1.default.getInstance().getMySeatId();
        msg.seatid == mySeatId && this.view.setMyPreparedShow(false);
        this.view.setStartBtnShow(RoomMgr_1.default.getInstance().isShowStartBtn());
      };
      MpnnRoomCtrl.prototype.onReEnterRoom = function(msg) {
        this.view.setStartBtnShow(RoomMgr_1.default.getInstance().isShowStartBtn());
      };
      MpnnRoomCtrl.prototype.onInitRoom_Mpnn = function() {
        RoomMgr_1.default.getInstance().isFirstRound() && this.process_cheatcheck();
        this.view.setInvitingShow(false);
        this.view.setStartBtnShow(false);
      };
      MpnnRoomCtrl.prototype.onReqSettle = function(msg) {
        console.log("onReqSettle", msg);
        if (RoomMgr_1.default.getInstance().isBunchFinish()) {
          console.log("进入总结算");
          setTimeout(function() {
            MpnnLogic_1.default.getInstance().openTotalSettle();
          }, 2e3);
        } else {
          this.view.setMyPreparedShow(true);
          this.view.setInvitingShow(true);
        }
      };
      MpnnRoomCtrl.prototype.onLeaveRoom = function() {
        this.view.setStartBtnShow(RoomMgr_1.default.getInstance().isShowStartBtn());
      };
      MpnnRoomCtrl.prototype.onNextRound = function(msg) {
        this.view.setStartBtnShow(RoomMgr_1.default.getInstance().isShowStartBtn());
      };
      MpnnRoomCtrl.prototype.onMidEnter = function(msg) {
        console.log("msg.enterSeatId", msg);
        for (var i = 0; i < msg.idleSeatIdList.length; i++) if (msg.idleSeatIdList[i] == RoomMgr_1.default.getInstance().getMySeatId()) {
          this.view.setMyPreparedShow(false);
          this.view.setSitdownShow(false);
          this.view.setInvitingShow(false);
          this.process_cheatcheck();
          G_FRAME.globalEmitter.emit("setAllTableLaebl");
        }
      };
      MpnnRoomCtrl.prototype.onSyncData = function(msg) {
        msg.processType == MpnnConst_1.default.process.giveCards ? this.view.setInvitingShow(false) : msg.processType == MpnnConst_1.default.process.chooseChip ? this.view.setInvitingShow(false) : msg.processType == MpnnConst_1.default.process.calculate ? this.view.setInvitingShow(false) : msg.processType == MpnnConst_1.default.process.settle && this.view.setInvitingShow(true);
      };
      MpnnRoomCtrl.prototype.usersUpdated = function() {
        this.view.updateMyPrepared();
      };
      MpnnRoomCtrl.prototype.process_cheatcheck = function() {
        this.start_sub_module(G_MODULE.RoomPreventionCheating);
      };
      MpnnRoomCtrl.prototype.btn_startGame_cb = function() {
        RoomMgr_1.default.getInstance().isRoomOwner(RoomMgr_1.default.getInstance().getMySeatId()) && RoomMgr_1.default.getInstance().manualStart();
      };
      MpnnRoomCtrl.prototype.node_btn_sitDown_cb = function(btnNode) {
        btnNode.active = false;
        RoomMgr_1.default.getInstance().prepare();
      };
      MpnnRoomCtrl.prototype.node_btn_prepare_cb = function(btnNode) {
        btnNode.active = false;
        RoomMgr_1.default.getInstance().isBunchFinish() || RoomMgr_1.default.getInstance().nextRound();
        this.gemit("removeGrabAniSigh");
      };
      MpnnRoomCtrl.prototype.btn_invite_cb = function() {
        MpnnLogic_1.default.getInstance().native_invite();
      };
      MpnnRoomCtrl.prototype.onDestroy = function() {
        RoomMgr_1.default.getInstance().destroy();
        _super.prototype.onDestroy.call(this);
      };
      __decorate([ property({
        type: cc.Node,
        displayName: "seatsConfig"
      }) ], MpnnRoomCtrl.prototype, "node_seatsConfig", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "giveCardPosCfg"
      }) ], MpnnRoomCtrl.prototype, "node_giveCardPosConfig", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "chipValuePos"
      }) ], MpnnRoomCtrl.prototype, "node_chipValuePos", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "chatPos"
      }) ], MpnnRoomCtrl.prototype, "node_chatPos", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "resultTypePos"
      }) ], MpnnRoomCtrl.prototype, "node_resultTypePos", void 0);
      __decorate([ property(cc.Node) ], MpnnRoomCtrl.prototype, "node_seatParent", void 0);
      __decorate([ property(cc.Prefab) ], MpnnRoomCtrl.prototype, "prefab_seat", void 0);
      __decorate([ property(cc.Node) ], MpnnRoomCtrl.prototype, "node_btn_prepare", void 0);
      __decorate([ property(cc.Node) ], MpnnRoomCtrl.prototype, "node_btn_sitDown", void 0);
      __decorate([ property(cc.Node) ], MpnnRoomCtrl.prototype, "btn_startGame", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "邀请好友"
      }) ], MpnnRoomCtrl.prototype, "node_btn_invite", void 0);
      MpnnRoomCtrl = __decorate([ ccclass ], MpnnRoomCtrl);
      return MpnnRoomCtrl;
    }(BaseCtrl_1.default);
    exports.default = MpnnRoomCtrl;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Bull/BullPosMgr": "BullPosMgr",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../BullMgr/MpnnAudio": "MpnnAudio",
    "../BullMgr/MpnnConst": "MpnnConst",
    "../BullMgr/MpnnLogic": "MpnnLogic"
  } ],
  Mpnn_Bets_btnCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fe137rDjQVEh5z4InbllGdM", "Mpnn_Bets_btnCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var MpnnLogic_1 = require("../BullMgr/MpnnLogic");
    var MpnnConst_1 = require("../BullMgr/MpnnConst");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var chipIndex = {
      0: [ 1, 2 ],
      1: [ 2, 4 ],
      2: [ 4, 8 ],
      3: [ 5, 10 ]
    };
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.minChip = null;
        _this.maxChip = null;
        _this.isGrabing = null;
        _this.playeraddin = null;
        _this.ExtraChip = null;
        _this.roomRule = null;
        _this.ChipDouble = null;
        _this.ExtraChipDouble = null;
        _this.initminChip();
        _this.roomRule = RoomMgr_1.default.getInstance().getFangKaCfg();
        _this.update();
        return _this;
      }
      Model.prototype.initminChip = function() {
        var arr = chipIndex[RoomMgr_1.default.getInstance().getFangKaCfg().v_minChip];
        this.minChip = arr[0];
        this.maxChip = arr[1];
      };
      Model.prototype.update = function() {
        var GrabList = MpnnLogic_1.default.getInstance().getGrablist();
        var myseatId = MpnnLogic_1.default.getInstance().getMyLogicSeatId();
        var delaerSeatId = MpnnLogic_1.default.getInstance().getDelaerSeatId();
        this.isGrabing = GrabList[myseatId] == GrabList[delaerSeatId] && 0 != GrabList[delaerSeatId] && GrabList[delaerSeatId] == this.roomRule.v_grabbanker;
        this.ExtraChip = MpnnLogic_1.default.getInstance().getExtraChip();
        this.playeraddin = this.roomRule.v_playeraddin;
      };
      Model.prototype.updateExtraDouble = function() {
        this.ExtraChipDouble = 2 * this.ExtraChip;
        this.ChipDouble = 2 * this.maxChip;
        var maxChip = this.maxChip * this.playeraddin;
        this.ExtraChipDouble >= maxChip && (this.ExtraChipDouble = maxChip);
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_betMin: ctrl.btn_betMin,
          btn_betMax: ctrl.btn_betMax,
          btn_doubleBet: ctrl.btn_doubleBet,
          btn_extraChip: ctrl.btn_extraChip,
          node_normal: ctrl.node_normal,
          node_double: ctrl.node_double,
          btn_minChipDouble: ctrl.btn_minChipDouble,
          btn_extraChipDouble: ctrl.btn_extraChipDouble
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.node.active = false;
        this.ui.node_double.active = false;
        this.ui.btn_doubleBet.active = false;
        this.ui.btn_extraChip.active = false;
        this.initMinClip();
        this.showBetBtn();
      };
      View.prototype.showBetBtn = function() {
        this.model.ExtraChip && this.model.playeraddin && (this.ui.btn_extraChip.active = true);
        this.model.roomRule.v_betredoubleLimit && (this.ui.btn_doubleBet.active = this.model.isGrabing);
        this.model.isGrabing && (this.ui.btn_betMin.active = !this.model.roomRule.v_betLimit);
      };
      View.prototype.initMinClip = function() {
        this.ui.btn_betMin.getChildByName("text").getComponent(cc.Label).string = this.model.minChip;
        this.ui.btn_betMax.getChildByName("text").getComponent(cc.Label).string = this.model.maxChip;
        this.ui.btn_extraChip.getChildByName("text").getComponent(cc.Label).string = this.model.ExtraChip;
      };
      View.prototype.showBouble = function() {
        this.ui.node_normal.active = false;
        this.ui.node_double.active = true;
        this.ui.btn_extraChipDouble.active = !!this.model.ExtraChip;
        this.ui.btn_minChipDouble.getChildByName("text").getComponent(cc.Label).string = this.model.ChipDouble;
        this.ui.btn_extraChipDouble.getChildByName("text").getComponent(cc.Label).string = this.model.ExtraChipDouble;
      };
      View.prototype.showBetNode = function() {
        this.node.active = true;
      };
      return View;
    }(BaseView_1.default);
    var Mpnn_Bets_btnCtrl = function(_super) {
      __extends(Mpnn_Bets_btnCtrl, _super);
      function Mpnn_Bets_btnCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_betMin = null;
        _this.btn_betMax = null;
        _this.btn_doubleBet = null;
        _this.btn_extraChip = null;
        _this.node_normal = null;
        _this.node_double = null;
        _this.btn_minChipDouble = null;
        _this.btn_extraChipDouble = null;
        return _this;
      }
      Mpnn_Bets_btnCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Mpnn_Bets_btnCtrl.prototype.defineNetEvents = function() {
        this.n_events[MpnnConst_1.default.clientEvent.onProcess] = this.onProcess;
        this.n_events[MpnnConst_1.default.clientEvent.onSyncData] = this.onSyncData;
        this.n_events["connector.entryHandler.enterRoom"] = this.onEnterRoom;
      };
      Mpnn_Bets_btnCtrl.prototype.defineGlobalEvents = function() {
        this.g_events["updateExtraChip"] = this.updateExtraChip;
        this.g_events["showBet_Btn"] = this.showBet_Btn;
      };
      Mpnn_Bets_btnCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.view.ui.btn_betMin, this.btn_betMin_cb, "点击最小下注");
        this.connect(G_UiType.image, this.view.ui.btn_betMax, this.btn_betMax_cb, "点击最大下注");
        this.connect(G_UiType.image, this.view.ui.btn_extraChip, this.btn_extraChip_cb, "点击推注");
        this.connect(G_UiType.image, this.view.ui.btn_doubleBet, this.btn_doubleBet_cb, "点击加倍");
        this.connect(G_UiType.image, this.view.ui.btn_minChipDouble, this.btn_minChipDouble_cb, "点击底分推注");
        this.connect(G_UiType.image, this.view.ui.btn_extraChipDouble, this.btn_extraChipDouble_cb, "点击推注加倍");
      };
      Mpnn_Bets_btnCtrl.prototype.start = function() {};
      Mpnn_Bets_btnCtrl.prototype.onProcess = function(msg) {
        msg.process != MpnnConst_1.default.process.chooseChip && this.finish();
      };
      Mpnn_Bets_btnCtrl.prototype.onSyncData = function(msg) {
        msg.processType != MpnnConst_1.default.process.chooseChip && this.finish();
      };
      Mpnn_Bets_btnCtrl.prototype.onEnterRoom = function(msg) {
        msg.gamestarted || this.finish();
      };
      Mpnn_Bets_btnCtrl.prototype.showBet_Btn = function() {
        this.view.showBetNode();
      };
      Mpnn_Bets_btnCtrl.prototype.updateExtraChip = function() {
        this.model.update();
        this.view.showBetBtn();
        this.view.initMinClip();
        console.log("闲家推注的注码：" + this.model.ExtraChip + "闲家推注：" + this.model.playeraddin);
      };
      Mpnn_Bets_btnCtrl.prototype.btn_betMin_cb = function() {
        MpnnLogic_1.default.getInstance().sendChooseChip(this.model.minChip);
        this.finish();
      };
      Mpnn_Bets_btnCtrl.prototype.btn_betMax_cb = function() {
        MpnnLogic_1.default.getInstance().sendChooseChip(this.model.maxChip);
        this.finish();
      };
      Mpnn_Bets_btnCtrl.prototype.btn_extraChip_cb = function() {
        MpnnLogic_1.default.getInstance().sendChooseChip(this.model.ExtraChip);
        this.finish();
      };
      Mpnn_Bets_btnCtrl.prototype.btn_minChipDouble_cb = function() {
        MpnnLogic_1.default.getInstance().sendChooseChip(2 * this.model.maxChip);
        this.finish();
      };
      Mpnn_Bets_btnCtrl.prototype.btn_extraChipDouble_cb = function() {
        this.model.updateExtraDouble();
        MpnnLogic_1.default.getInstance().sendChooseChip(this.model.ExtraChipDouble);
        this.finish();
      };
      Mpnn_Bets_btnCtrl.prototype.btn_doubleBet_cb = function() {
        this.model.updateExtraDouble();
        this.view.showBouble();
      };
      Mpnn_Bets_btnCtrl.prototype.sendShowBetTipG = function() {
        this.gemit("showBetTip");
      };
      __decorate([ property(cc.Node) ], Mpnn_Bets_btnCtrl.prototype, "btn_betMin", void 0);
      __decorate([ property(cc.Node) ], Mpnn_Bets_btnCtrl.prototype, "btn_betMax", void 0);
      __decorate([ property(cc.Node) ], Mpnn_Bets_btnCtrl.prototype, "btn_doubleBet", void 0);
      __decorate([ property(cc.Node) ], Mpnn_Bets_btnCtrl.prototype, "btn_extraChip", void 0);
      __decorate([ property(cc.Node) ], Mpnn_Bets_btnCtrl.prototype, "node_normal", void 0);
      __decorate([ property(cc.Node) ], Mpnn_Bets_btnCtrl.prototype, "node_double", void 0);
      __decorate([ property(cc.Node) ], Mpnn_Bets_btnCtrl.prototype, "btn_minChipDouble", void 0);
      __decorate([ property(cc.Node) ], Mpnn_Bets_btnCtrl.prototype, "btn_extraChipDouble", void 0);
      Mpnn_Bets_btnCtrl = __decorate([ ccclass ], Mpnn_Bets_btnCtrl);
      return Mpnn_Bets_btnCtrl;
    }(BaseCtrl_1.default);
    exports.default = Mpnn_Bets_btnCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../BullMgr/MpnnConst": "MpnnConst",
    "../BullMgr/MpnnLogic": "MpnnLogic"
  } ],
  Mpnn_MyCardsCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e3599mk1htBFZTFn74ICTDA", "Mpnn_MyCardsCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var MpnnLogic_1 = require("../BullMgr/MpnnLogic");
    var MpnnConst_1 = require("../BullMgr/MpnnConst");
    var GEventDef_1 = require("../../../Plat/GameMgrs/GEventDef");
    var BullCardsMgr_1 = require("../../../GameCommon/Bull/BullCardsMgr");
    var BullPosMgr_1 = require("../../../GameCommon/Bull/BullPosMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var C_cardAttr = "_cardInfo";
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.maxHandlerCardNum = null;
        _this.cardOffRate = null;
        _this.moveStartPos = null;
        _this.touchUpY = null;
        _this.myViewSeatId = null;
        _this.touchUpNum = null;
        _this.maxTouchUpNum = null;
        _this.list_cardsLogicId = null;
        _this.seatCount = null;
        _this.myViewSeatId = 0;
        _this.maxHandlerCardNum = 5;
        _this.cardOffRate = MpnnConst_1.default.config.bigCardOffWRate;
        _this.moveStartPos = cc.p(0, 0);
        _this.touchUpY = 15;
        _this.maxTouchUpNum = 3;
        _this.touchUpNum = 0;
        _this.seatCount = RoomMgr_1.default.getInstance().getSeatCount();
        return _this;
      }
      Model.prototype.resetData = function() {
        this.list_cardsLogicId = null;
        this.touchUpNum = 0;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.list_myCards = null;
        _this.list_hideCards = null;
        _this.num_showCards = null;
        _this.ui = {
          atlas_cards: null,
          node_btn_tanpai: null,
          node_btn_tanpaiTip: null,
          node_btn_cuopai: null,
          node_btn_openCard: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.list_hideCards = [];
        _this.list_myCards = [];
        _this.num_showCards = 0;
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.atlas_cards = ctrl.atlas_cards;
        this.ui.node_btn_tanpai = ctrl.node_btn_tanpai;
        this.ui.node_btn_tanpaiTip = ctrl.node_btn_tanpaiTip;
        this.ui.node_btn_cuopai = ctrl.node_btn_cuopai;
        this.ui.node_btn_openCard = ctrl.node_btn_openCard;
      };
      View.prototype.showCard = function(cardsNum) {
        var i, cardNode;
        for (i = 0; i < this.model.maxHandlerCardNum; i++) {
          cardNode = this.list_myCards[i];
          if (!cardNode) {
            cardNode = BullCardsMgr_1.default.addMyCard();
            this.list_myCards.push(cardNode);
          }
          cardNode.zIndex = i;
          if (cardsNum > 0 && false == cardNode.active) {
            cardsNum -= 1;
            cardNode.active = true;
            cardNode.opacity = 255;
            cardNode.color = cc.Color.WHITE;
            cardNode[C_cardAttr].logicValue = 0;
            cardNode[C_cardAttr].isOpen = false;
            BullCardsMgr_1.default.setCardValue(cardNode);
          }
        }
      };
      View.prototype.giveCards = function(giveNum, isNoEffect) {
        void 0 === isNoEffect && (isNoEffect = false);
        this.showCard(giveNum);
        var flyData = {
          isMyself: true,
          cardsList: this.list_myCards,
          targetPos: this.getGiveTargetPos(0),
          cb: ctrl.onMyGiveCardEnd.bind(ctrl),
          isNoEffect: isNoEffect
        };
        BullCardsMgr_1.default.giveCards(flyData);
      };
      View.prototype.hideAllCards = function() {
        if (this.list_myCards) for (var i = 0; i < this.list_myCards.length; i++) {
          var card = this.list_myCards[i];
          card.stopAllActions();
          card.active = false;
        }
      };
      View.prototype.openAllCards = function(valueList, cb) {
        BullCardsMgr_1.default.opencardsBycount(1, this.list_myCards, valueList, cb);
      };
      View.prototype.exchangeTouchState = function(cardNode) {
        if (cardNode[C_cardAttr].initPosY) {
          cardNode.y = cardNode[C_cardAttr].initPosY;
          cardNode[C_cardAttr].initPosY = null;
          this.model.touchUpNum -= 1;
          this.model.touchUpNum = Math.max(this.model.touchUpNum, 0);
        } else if (this.model.touchUpNum < this.model.maxTouchUpNum) {
          cardNode[C_cardAttr].initPosY = cardNode.y;
          cardNode.y += this.model.touchUpY;
          this.model.touchUpNum += 1;
        }
      };
      View.prototype.coverAllCards = function() {
        BullCardsMgr_1.default.coverCards(this.list_myCards);
      };
      View.prototype.openTouch = function() {
        this.node.on(cc.Node.EventType.TOUCH_START, ctrl.onTouchStart, ctrl);
        this.node.on(cc.Node.EventType.TOUCH_MOVE, ctrl.onTouchMove, ctrl);
        this.node.on(cc.Node.EventType.TOUCH_END, ctrl.onTouchEnd, ctrl);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, ctrl.onTouchCancel, ctrl);
      };
      View.prototype.closeTouch = function() {
        this.node.off(cc.Node.EventType.TOUCH_START, ctrl.onTouchStart, ctrl);
        this.node.off(cc.Node.EventType.TOUCH_MOVE, ctrl.onTouchMove, ctrl);
        this.node.off(cc.Node.EventType.TOUCH_END, ctrl.onTouchEnd, ctrl);
        this.node.off(cc.Node.EventType.TOUCH_CANCEL, ctrl.onTouchCancel, ctrl);
      };
      View.prototype.getGiveTargetPos = function(viewSeatId) {
        return BullPosMgr_1.default.getInstance().getGiveCardPos(viewSeatId);
      };
      View.prototype.setTanpaiBtnShow = function(isShow) {
        this.ui.node_btn_tanpai.active = isShow;
        this.ui.node_btn_tanpaiTip.active = isShow;
      };
      View.prototype.showTiShi = function() {
        var cardsList = this.model.list_cardsLogicId;
        var resultObj = BullCardsMgr_1.default.getCardResult(cardsList);
        BullCardsMgr_1.default.showTanPai(this.list_myCards, resultObj.cardIdList, resultObj.resultType);
        MpnnLogic_1.default.getInstance().emit_showResultType({
          resultType: resultObj.resultType,
          seatId: this.model.myViewSeatId
        });
      };
      View.prototype.setCuoPaiBtnShow = function(isShow) {
        var fangka = RoomMgr_1.default.getInstance().getFangKaCfg();
        0 == fangka.v_cuopaiLimit && (this.ui.node_btn_cuopai.active = isShow);
      };
      View.prototype.setOpenCardBtnShow = function(isShow) {
        this.ui.node_btn_openCard.active = isShow;
      };
      return View;
    }(BaseView_1.default);
    var Mpnn_MyCardsCtrl = function(_super) {
      __extends(Mpnn_MyCardsCtrl, _super);
      function Mpnn_MyCardsCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.model = null;
        _this.view = null;
        _this.list_touchPos = null;
        _this.ctrl_calculate = null;
        _this.atlas_cards = null;
        _this.node_btn_tanpai = null;
        _this.node_btn_tanpaiTip = null;
        _this.node_btn_cuopai = null;
        _this.node_btn_openCard = null;
        return _this;
      }
      Mpnn_MyCardsCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        BullCardsMgr_1.default.initData(this, this.ui.atlas_cards);
      };
      Mpnn_MyCardsCtrl.prototype.defineNetEvents = function() {
        this.n_events = {};
        this.n_events[MpnnConst_1.default.clientEvent.onGiveCards] = this.onStartGive;
        this.n_events[MpnnConst_1.default.clientEvent.onSettle] = this.onSettle_bull;
        this.n_events[MpnnConst_1.default.clientEvent.onTanPai] = this.onTanPai;
        this.n_events[MpnnConst_1.default.clientEvent.onStart] = this.onStart;
        this.n_events[MpnnConst_1.default.clientEvent.onProcess] = this.onProcess;
        this.n_events[MpnnConst_1.default.clientEvent.onSyncData] = this.onSyncData;
        this.n_events["onPrepare"] = this.onPrepare;
        this.n_events["onReEnterRoom"] = this.onReEnterRoom;
      };
      Mpnn_MyCardsCtrl.prototype.defineGlobalEvents = function() {
        this.g_events[GEventDef_1.default.bull_cuopaiEnd] = this.onCuopaiEnd;
        this.g_events[GEventDef_1.default.usersUpdated] = this.usersUpdated;
        this.g_events["cuopaiclose"] = this.cuopaiclose;
      };
      Mpnn_MyCardsCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.node_btn_tanpai, this.node_btn_tanpai_cb, "点击摊牌");
        this.connect(G_UiType.image, this.ui.node_btn_tanpaiTip, this.node_btn_tanpaiTip_cb, "点击摊牌提示");
        this.connect(G_UiType.image, this.ui.node_btn_cuopai, this.node_btn_cuopai_cb, "点击搓牌");
        this.connect(G_UiType.image, this.ui.node_btn_openCard, this.node_btn_openCard_cb, "点击翻牌");
      };
      Mpnn_MyCardsCtrl.prototype.start = function() {};
      Mpnn_MyCardsCtrl.prototype.cuopaiclose = function() {
        this.view.setCuoPaiBtnShow(false);
        this.view.setOpenCardBtnShow(false);
        this.view.setTanpaiBtnShow(true);
        BullCardsMgr_1.default.openlastcard(function() {});
      };
      Mpnn_MyCardsCtrl.prototype.onStart = function() {
        this.view.hideAllCards();
      };
      Mpnn_MyCardsCtrl.prototype.onPrepare = function(msg) {
        msg.seatid == RoomMgr_1.default.getInstance().getMySeatId() && this.view.hideAllCards();
      };
      Mpnn_MyCardsCtrl.prototype.onReEnterRoom = function() {
        this.view.closeTouch();
      };
      Mpnn_MyCardsCtrl.prototype.onProcess = function(msg) {
        if (msg.process == MpnnConst_1.default.process.start) {
          this.view.hideAllCards();
          this.model.touchUpNum = 0;
        } else if (msg.process == MpnnConst_1.default.process.calculate) {
          BullCardsMgr_1.default.showlastcards();
          this.view.setCuoPaiBtnShow(true);
          this.view.setOpenCardBtnShow(true);
          MpnnLogic_1.default.getInstance().emit_giveCardsEnd();
        } else if (msg.process == MpnnConst_1.default.process.settle) {
          this.view.setCuoPaiBtnShow(false);
          this.view.setOpenCardBtnShow(false);
        }
      };
      Mpnn_MyCardsCtrl.prototype.onStartGive = function(msg) {
        var _this = this;
        console.log("********on my  StartGive* = ", msg);
        this.model.list_cardsLogicId = msg.myCardsList;
        this.view.giveCards(msg.myCardsList.length);
        var time = MpnnConst_1.default.config.cardIntervalTime * MpnnConst_1.default.config.maxGroupCardsNum + MpnnConst_1.default.config.cardMoveTime;
        var peopleNum = Object.keys(MpnnLogic_1.default.getInstance().getValidSeats()).length;
        time *= peopleNum;
        this.timeId1 = setTimeout(function() {
          _this.onGiveAllCardEnd();
        }, 1e3 * time);
        this.view.openAllCards(this.model.list_cardsLogicId, function() {});
      };
      Mpnn_MyCardsCtrl.prototype.onGiveAllCardEnd = function() {
        console.log("onGiveCardEnd===");
      };
      Mpnn_MyCardsCtrl.prototype.onTanPai = function(msg) {
        console.log("onTanPai=== ", msg);
        if (msg.seatId == RoomMgr_1.default.getInstance().myseatid) {
          this.view.closeTouch();
          if (this.ctrl_calculate) {
            this.ctrl_calculate.finish();
            this.ctrl_calculate = null;
          }
          BullCardsMgr_1.default.showTanPai(this.view.list_myCards, msg.cardLogicIdList, msg.resultType);
        }
      };
      Mpnn_MyCardsCtrl.prototype.onSettle_bull = function(msg) {
        console.log("****************onSettle = ", msg);
        var logicId = RoomMgr_1.default.getInstance().getMySeatId();
        var resultObj = msg.dict_notTanPai[logicId];
        if (resultObj) {
          var targetPos = this.view.getGiveTargetPos(this.model.myViewSeatId);
          BullCardsMgr_1.default.showTanPai(this.view.list_myCards, resultObj.cardIdList, resultObj.resultType);
          this.view.setTanpaiBtnShow(false);
        }
        this.view.closeTouch();
        if (this.ctrl_calculate) {
          this.ctrl_calculate.finish();
          this.ctrl_calculate = null;
        }
      };
      Mpnn_MyCardsCtrl.prototype.onSyncData = function(msg) {
        console.log("这是断线重连的消息==========================", msg);
        switch (msg.processType) {
         case MpnnConst_1.default.process.giveCards:
         case MpnnConst_1.default.process.chooseChip:
          this.model.list_cardsLogicId = msg.myCardsList;
          this.view.giveCards(msg.myCardsList.length);
          this.view.openAllCards(this.model.list_cardsLogicId, function() {});
          break;

         case MpnnConst_1.default.process.calculate:
          this.model.list_cardsLogicId = msg.myCardsList;
          this.view.giveCards(msg.myCardsList.length);
          this.view.openAllCards(this.model.list_cardsLogicId, function() {});
          BullCardsMgr_1.default.showlastcards();
          this.view.setOpenCardBtnShow(true);
          break;

         default:
          cc.error("------------------------------找不到流程");
        }
      };
      Mpnn_MyCardsCtrl.prototype.onCuopaiEnd = function(msg) {
        1 == msg && this.node_btn_openCard_cb();
      };
      Mpnn_MyCardsCtrl.prototype.usersUpdated = function() {
        this.view.hideAllCards();
        if (this.ctrl_calculate) {
          this.ctrl_calculate.finish();
          this.ctrl_calculate = null;
        }
        this.view.setCuoPaiBtnShow(false);
        this.view.setOpenCardBtnShow(false);
        this.view.setTanpaiBtnShow(false);
      };
      Mpnn_MyCardsCtrl.prototype.node_btn_openCard_cb = function() {
        this.view.setOpenCardBtnShow(false);
        this.view.setCuoPaiBtnShow(false);
        BullCardsMgr_1.default.openlastcard(function() {});
        this.view.setTanpaiBtnShow(true);
      };
      Mpnn_MyCardsCtrl.prototype.node_btn_cuopai_cb = function() {
        var _this = this;
        MpnnLogic_1.default.getInstance().openCuopai(function() {
          MpnnLogic_1.default.getInstance().emit_cuopai(_this.model.list_cardsLogicId);
        });
      };
      Mpnn_MyCardsCtrl.prototype.node_btn_tanpai_cb = function(curNode) {
        console.log("node_btn_tanpai_cb===");
        this.view.setTanpaiBtnShow(false);
        MpnnLogic_1.default.getInstance().sendTanpai();
      };
      Mpnn_MyCardsCtrl.prototype.node_btn_tanpaiTip_cb = function(curNode) {
        console.log("点击摊牌提示");
        this.view.showTiShi();
      };
      Mpnn_MyCardsCtrl.prototype.onMyGiveCardEnd = function() {
        console.log("on_giveCardsEnd", this.model.list_cardsLogicId);
      };
      Mpnn_MyCardsCtrl.prototype.onTouchStart = function(event) {
        var pos = event.touch.getLocation();
        this.list_touchPos = [];
        this.list_touchPos.push(pos);
      };
      Mpnn_MyCardsCtrl.prototype.onTouchMove = function(event) {};
      Mpnn_MyCardsCtrl.prototype.onTouchEnd = function(event) {
        var _this = this;
        var cards = this.checkCardsTouch(this.view.list_myCards, this.list_touchPos);
        var i, list_down = [], list_up = [];
        for (i = 0; i < cards.length; i++) {
          var isDown = Boolean(cards[i][C_cardAttr].initPosY);
          isDown ? list_down.push(this._getCardValue(cards[i][C_cardAttr].logicValue)) : list_up.push(this._getCardValue(cards[i][C_cardAttr].logicValue));
        }
        if (cards.length > 0) if (this.ctrl_calculate) {
          this.ctrl_calculate.delValues(list_down);
          this.ctrl_calculate.addValues(list_up);
        } else MpnnLogic_1.default.getInstance().openCalculate(function(ctrl) {
          _this.ctrl_calculate = ctrl;
          _this.ctrl_calculate.delValues(list_down);
          _this.ctrl_calculate.addValues(list_up);
        });
        for (var i_1 = 0; i_1 < cards.length; i_1++) {
          cards[i_1].opacity = 255;
          console.log("click card VALUE= ", BullCardsMgr_1.default.getSixValue(cards[i_1][C_cardAttr].logicValue));
          this.view.exchangeTouchState(cards[i_1]);
        }
        this.list_touchPos = null;
      };
      Mpnn_MyCardsCtrl.prototype.onTouchCancel = function(event) {
        this.list_touchPos = null;
      };
      Mpnn_MyCardsCtrl.prototype._getCardValue = function(logicValue) {
        var sixValue = BullCardsMgr_1.default.getSixValue(logicValue);
        return sixValue.slice(-1);
      };
      Mpnn_MyCardsCtrl.prototype.checkCardsTouch = function(cardsList, posList) {
        var i, j, cardNode = null, cardRect, winSizeW2 = cc.director.getWinSize().width / 2, winSizeH2 = cc.director.getWinSize().height / 2, curX, curY, list_touchCards = [];
        for (i = 0; i < cardsList.length; i++) {
          cardNode = cardsList[i];
          if (cardNode.active && cardNode[C_cardAttr].isOpen) {
            curX = cardNode.x + winSizeW2 - cardNode.width / 2;
            curY = cardNode.y + winSizeH2 - cardNode.height / 2;
            cardRect = cardNode.zIndex == this.model.maxHandlerCardNum ? cc.rect(curX, curY, cardNode.width, cardNode.height) : cc.rect(curX, curY, this.model.cardOffRate * cardNode.width, cardNode.height);
            for (j = 0; j < posList.length; j++) if (cc.rectContainsPoint(cardRect, posList[j])) {
              cardNode.opacity = 120;
              list_touchCards.push(cardNode);
              break;
            }
          }
        }
        return list_touchCards;
      };
      Mpnn_MyCardsCtrl.prototype.onDestroy = function() {
        this.timeId1 && clearTimeout(this.timeId1);
        BullCardsMgr_1.default.clearData();
        _super.prototype.onDestroy.call(this);
      };
      __decorate([ property({
        type: cc.SpriteAtlas,
        displayName: "cardsAtlas"
      }) ], Mpnn_MyCardsCtrl.prototype, "atlas_cards", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "tanpaiBtn"
      }) ], Mpnn_MyCardsCtrl.prototype, "node_btn_tanpai", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "tanpaiTipBtn"
      }) ], Mpnn_MyCardsCtrl.prototype, "node_btn_tanpaiTip", void 0);
      __decorate([ property(cc.Node) ], Mpnn_MyCardsCtrl.prototype, "node_btn_cuopai", void 0);
      __decorate([ property(cc.Node) ], Mpnn_MyCardsCtrl.prototype, "node_btn_openCard", void 0);
      Mpnn_MyCardsCtrl = __decorate([ ccclass ], Mpnn_MyCardsCtrl);
      return Mpnn_MyCardsCtrl;
    }(BaseCtrl_1.default);
    exports.default = Mpnn_MyCardsCtrl;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Bull/BullCardsMgr": "BullCardsMgr",
    "../../../GameCommon/Bull/BullPosMgr": "BullPosMgr",
    "../../../Plat/GameMgrs/GEventDef": "GEventDef",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../BullMgr/MpnnConst": "MpnnConst",
    "../BullMgr/MpnnLogic": "MpnnLogic"
  } ],
  Mpnn_OthersCardsCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "83ab7Sg4mlPq5BW8G1uBMPp", "Mpnn_OthersCardsCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var MpnnConst_1 = require("../BullMgr/MpnnConst");
    var MpnnLogic_1 = require("../BullMgr/MpnnLogic");
    var GEventDef_1 = require("../../../Plat/GameMgrs/GEventDef");
    var BullCardsMgr_1 = require("../../../GameCommon/Bull/BullCardsMgr");
    var BullPosMgr_1 = require("../../../GameCommon/Bull/BullPosMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var C_cardAttr = "_cardInfo";
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.moveStartPos = null;
        _this.maxHandlerCardNum = null;
        _this.cardOffRate = null;
        _this.lowScaleRate = null;
        _this.curGiveCardsNum = null;
        _this.seatPlayeingNum = null;
        _this.timeoutId = null;
        _this.myseatId = null;
        _this.delaerSeatId = null;
        _this.mycardrecord = [];
        _this.allcards = [];
        _this.moveStartPos = cc.p(0, 0);
        _this.maxHandlerCardNum = 5;
        _this.cardOffRate = MpnnConst_1.default.config.minCardOffWRate;
        _this.lowScaleRate = .5;
        _this.seatPlayeingNum = RoomMgr_1.default.getInstance().getSeatCount();
        _this.myseatId = MpnnLogic_1.default.getInstance().getMyLogicSeatId();
        _this.delaerSeatId = MpnnLogic_1.default.getInstance().getDelaerSeatId();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.dict_cards = null;
        _this.ui = {
          atlas_cards: null,
          lastcard: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.dict_cards = {};
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.atlas_cards = ctrl.atlas_cards;
      };
      View.prototype.showCard = function(viewSeatId, cardsNum) {
        this.dict_cards[viewSeatId] || (this.dict_cards[viewSeatId] = []);
        var i, cardNode;
        for (i = 0; i < this.model.maxHandlerCardNum; i++) {
          cardNode = this.dict_cards[viewSeatId][i];
          if (!cardNode) {
            cardNode = BullCardsMgr_1.default.addOtherCard();
            this.dict_cards[viewSeatId][i] = cardNode;
          }
          this.model.allcards.push(this.dict_cards[viewSeatId][i]);
          cardNode.zIndex = i;
          if (cardsNum > 0 && false == cardNode.active) {
            cardsNum -= 1;
            cardNode.active = true;
            cardNode.active = true;
            cardNode.opacity = 255;
            cardNode.color = cc.Color.WHITE;
            cardNode[C_cardAttr].logicValue = 0;
            cardNode[C_cardAttr].isOpen = false;
            BullCardsMgr_1.default.setCardValue(cardNode);
          }
        }
      };
      View.prototype.giveCards = function(viewSeatId, giveNum) {
        this.showCard(viewSeatId, giveNum);
        for (var key in this.dict_cards) console.log(this.dict_cards[key]);
        var flyData = {
          isMyself: false,
          cardsList: this.dict_cards[viewSeatId],
          targetPos: this.getGiveTargetPos(viewSeatId),
          cb: ctrl.onGiveCardsEnd.bind(ctrl)
        };
        BullCardsMgr_1.default.giveCards(flyData);
        this.noshowlast(false);
      };
      View.prototype.setCardsOnly = function(viewSeatId, resultObj) {
        var giveNum = 5;
        this.showCard(viewSeatId, giveNum);
        var flyData = {
          isMyself: false,
          cardsList: this.dict_cards[viewSeatId],
          targetPos: this.getGiveTargetPos(viewSeatId),
          cb: ctrl.onGiveCardsEnd.bind(ctrl),
          isNoEffect: true
        };
        BullCardsMgr_1.default.giveCards(flyData);
        if (resultObj) {
          BullCardsMgr_1.default.showTanPai(this.dict_cards[viewSeatId], resultObj.cardIdList, resultObj.resultType);
          MpnnLogic_1.default.getInstance().emit_showResultType({
            resultType: resultObj.resultType,
            seatId: viewSeatId
          });
        }
      };
      View.prototype.coverAllCards = function(viewSeatId) {
        BullCardsMgr_1.default.coverCards(this.dict_cards[viewSeatId]);
      };
      View.prototype.setAllIsShow = function(isShow) {
        console.log("setAllIsShow========================", isShow);
        if (this.dict_cards) for (var seatId in this.dict_cards) {
          var cardsList = this.dict_cards[seatId];
          for (var i = 0; i < cardsList.length; i++) {
            var card = cardsList[i];
            card.stopAllActions();
            card.active = isShow;
          }
        }
      };
      View.prototype.nostopShow = function(isShow) {
        if (this.dict_cards) for (var seatId in this.dict_cards) {
          var cardsList = this.dict_cards[seatId];
          for (var i = 0; i < cardsList.length; i++) {
            var card = cardsList[i];
            card.active = isShow;
          }
        }
      };
      View.prototype.noshowlast = function(isShow) {
        console.log("setAllIsShow========================", isShow);
        if (this.dict_cards) for (var seatId in this.dict_cards) {
          var cardsList = this.dict_cards[seatId];
          for (var i = 0; i < cardsList.length; i++) {
            var draw = cardsList.length - 1;
            if (i == draw) {
              var card = cardsList[i];
              card.active = isShow;
            }
          }
        }
      };
      View.prototype.getGiveTargetPos = function(viewSeatId) {
        return BullPosMgr_1.default.getInstance().getGiveCardPos(viewSeatId);
      };
      View.prototype.getCardListByViewId = function(viewSeatId) {
        return this.dict_cards[viewSeatId];
      };
      return View;
    }(BaseView_1.default);
    var Mpnn_OthersCardsCtrl = function(_super) {
      __extends(Mpnn_OthersCardsCtrl, _super);
      function Mpnn_OthersCardsCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.model = null;
        _this.view = null;
        _this.list_giveSeatId = null;
        _this.atlas_cards = null;
        return _this;
      }
      Mpnn_OthersCardsCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        BullCardsMgr_1.default.setOtherCardsAtlas(this.ui.atlas_cards);
      };
      Mpnn_OthersCardsCtrl.prototype.defineNetEvents = function() {
        this.n_events = {};
        this.n_events[MpnnConst_1.default.clientEvent.onGiveCards] = this.onStartGive;
        this.n_events[MpnnConst_1.default.clientEvent.onTanPai] = this.onTanPai;
        this.n_events[MpnnConst_1.default.clientEvent.onStart] = this.onStart;
        this.n_events[MpnnConst_1.default.clientEvent.onProcess] = this.onProcess;
        this.n_events[MpnnConst_1.default.clientEvent.onSettle] = this.onSettle_bull;
        this.n_events[MpnnConst_1.default.clientEvent.onSyncData] = this.onSyncData;
        this.n_events[MpnnConst_1.default.clientEvent.onMidEnter] = this.onMidEnter;
        this.n_events["onPrepare"] = this.onPrepare;
      };
      Mpnn_OthersCardsCtrl.prototype.defineGlobalEvents = function() {
        this.g_events[GEventDef_1.default.usersUpdated] = this.usersUpdated;
      };
      Mpnn_OthersCardsCtrl.prototype.connectUi = function() {};
      Mpnn_OthersCardsCtrl.prototype.start = function() {};
      Mpnn_OthersCardsCtrl.prototype.onStart = function() {
        this.clearData();
        this.view.setAllIsShow(false);
      };
      Mpnn_OthersCardsCtrl.prototype.onProcess = function(msg) {
        if (msg.process == MpnnConst_1.default.process.calculate) {
          console.log("***************************************");
          this.view.nostopShow(true);
          this.view.noshowlast(true);
        } else if (msg.process == MpnnConst_1.default.process.chooseChip) {
          var fangjianCfg = RoomMgr_1.default.getInstance().getFangKaCfg();
          1 == fangjianCfg.v_playerbuyLimit && this.view.nostopShow(false);
        }
      };
      Mpnn_OthersCardsCtrl.prototype.onPrepare = function(msg) {
        if (msg.seatid == RoomMgr_1.default.getInstance().getMySeatId()) {
          this.clearData();
          this.view.setAllIsShow(false);
        }
      };
      Mpnn_OthersCardsCtrl.prototype.onStartGive = function(msg) {
        var _this = this;
        console.log("开始给牌=====", msg);
        this.list_roundSeatId = [];
        var validDict = MpnnLogic_1.default.getInstance().getValidSeats();
        console.log(validDict);
        var room = RoomMgr_1.default.getInstance();
        console.log(this.list_roundSeatId);
        var time = MpnnConst_1.default.config.cardIntervalTime + MpnnConst_1.default.config.cardMoveTime;
        this.model.timeoutId = setTimeout(function() {
          _this.model.curGiveCardsNum = 5;
          for (var seatId in validDict) seatId != room.getMySeatId() && _this.view.giveCards(room.getViewSeatId(seatId), 5);
        }, 1e3 * time);
      };
      Mpnn_OthersCardsCtrl.prototype.onTanPai = function(msg) {
        console.log("onTanPai=== ", msg);
        var id = msg.seatId;
        if (id != RoomMgr_1.default.getInstance().myseatid) {
          var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(id);
          var nodeList = this.view.dict_cards[viewSeatId];
          BullCardsMgr_1.default.showTanPai(nodeList, msg.cardLogicIdList, msg.resultType);
        }
      };
      Mpnn_OthersCardsCtrl.prototype.onSettle_bull = function(msg) {
        console.log("********others********onSettle = ", msg);
        var myLogicId = RoomMgr_1.default.getInstance().getMySeatId();
        var seatId, resultObj, viewSeatId;
        for (seatId in msg.dict_notTanPai) if (seatId != myLogicId) {
          resultObj = msg.dict_notTanPai[seatId];
          viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(seatId);
          BullCardsMgr_1.default.showTanPai(this.view.getCardListByViewId(viewSeatId), resultObj.cardIdList, resultObj.resultType);
        }
      };
      Mpnn_OthersCardsCtrl.prototype.onSyncData = function(msg) {
        if (msg.processType == MpnnConst_1.default.process.giveCards) {
          var count = void 0;
          for (var seatId in RoomMgr_1.default.getInstance().users) {
            count = RoomMgr_1.default.getInstance().getViewSeatId(seatId);
            seatId != RoomMgr_1.default.getInstance().getMySeatId() && this.view.giveCards(count, this.model.curGiveCardsNum);
          }
        } else if (msg.processType == MpnnConst_1.default.process.chooseChip) {
          var count = void 0;
          for (var seatId in RoomMgr_1.default.getInstance().users) {
            count = RoomMgr_1.default.getInstance().getViewSeatId(seatId);
            seatId != RoomMgr_1.default.getInstance().getMySeatId() && this.view.giveCards(count, this.model.curGiveCardsNum);
          }
        } else if (msg.processType == MpnnConst_1.default.process.calculate) {
          var count = void 0;
          for (var seatId in RoomMgr_1.default.getInstance().users) {
            count = RoomMgr_1.default.getInstance().getViewSeatId(seatId);
            if (seatId != RoomMgr_1.default.getInstance().getMySeatId()) {
              this.view.giveCards(count, this.model.curGiveCardsNum);
              this.view.noshowlast(true);
            }
          }
        }
      };
      Mpnn_OthersCardsCtrl.prototype.onMidEnter = function(msg) {
        console.log("这是中途加入的消息", msg);
        var enterseat = MpnnLogic_1.default.getInstance().getEnterSeatIds();
        for (var enterseatID in enterseat) for (var i = 0; i < this.model.mycardrecord.length; i++) if (enterseat[enterseatID] == this.model.mycardrecord[i]) return;
        for (var enterseatID in enterseat) {
          var draw = enterseat[enterseatID];
          if (enterseat[enterseatID] == RoomMgr_1.default.getInstance().getMySeatId()) {
            var count = void 0;
            for (var seatId in RoomMgr_1.default.getInstance().users) {
              count = RoomMgr_1.default.getInstance().getViewSeatId(seatId);
              if (seatId != RoomMgr_1.default.getInstance().getMySeatId()) {
                this.view.giveCards(count, this.model.curGiveCardsNum);
                this.view.noshowlast(true);
                this.model.mycardrecord.push(enterseat[enterseatID]);
              }
            }
          }
        }
      };
      Mpnn_OthersCardsCtrl.prototype.usersUpdated = function() {
        this.view.setAllIsShow(false);
      };
      Mpnn_OthersCardsCtrl.prototype.onGiveCardsEnd = function() {};
      Mpnn_OthersCardsCtrl.prototype.clearData = function() {
        clearTimeout(this.model.timeoutId);
      };
      Mpnn_OthersCardsCtrl.prototype._inGiveRound = function() {
        if (this.list_roundSeatId) {
          var viewSeatId = this.list_roundSeatId;
          for (var key in viewSeatId) this.view.giveCards(viewSeatId[key], this.model.curGiveCardsNum);
        }
      };
      Mpnn_OthersCardsCtrl.prototype.onDestroy = function() {
        clearTimeout(this.model.timeoutId);
        _super.prototype.onDestroy.call(this);
      };
      __decorate([ property({
        type: cc.SpriteAtlas,
        displayName: "cardsAtlas"
      }) ], Mpnn_OthersCardsCtrl.prototype, "atlas_cards", void 0);
      Mpnn_OthersCardsCtrl = __decorate([ ccclass ], Mpnn_OthersCardsCtrl);
      return Mpnn_OthersCardsCtrl;
    }(BaseCtrl_1.default);
    exports.default = Mpnn_OthersCardsCtrl;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Bull/BullCardsMgr": "BullCardsMgr",
    "../../../GameCommon/Bull/BullPosMgr": "BullPosMgr",
    "../../../Plat/GameMgrs/GEventDef": "GEventDef",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../BullMgr/MpnnConst": "MpnnConst",
    "../BullMgr/MpnnLogic": "MpnnLogic"
  } ],
  Mpnn_RecordCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8ecf4Z63sFB8oS0CQBtz/3z", "Mpnn_RecordCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BunchInfoMgr_1 = require("../../../Plat/GameMgrs/BunchInfoMgr");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CONFIGS = {
      horizontalNum: 4,
      itemOffX: 0,
      itemOffY: 0,
      str_openNode: "_openContentNode",
      str_curRound: "_curRound",
      str_diyIndex: "_diyIndex"
    };
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      Model.prototype.updateInfo = function() {
        var roomRule = RoomMgr_1.default.getInstance().getFangKaCfg();
        this.mamai_kaiguan = roomRule.v_playerbuyLimit;
        var bunchInfo = RoomMgr_1.default.getInstance().getBunchInfo();
        if (bunchInfo) {
          console.log("bunchInfo= ", bunchInfo);
          var leijiInfo = bunchInfo.leiji;
          this.data_meiju = bunchInfo.meiju;
          this.peopleNum = Object.keys(leijiInfo).length;
          this.maxRounds = bunchInfo.meiju.length;
          console.log("peopleNum = ", this.peopleNum);
          console.log("maxRounds= ", this.maxRounds);
        } else cc.error("bullTotalSettle bunchInfo is empty");
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_close: null,
          scrollow_content: null,
          node_content: null,
          prefab_meijuDetail: null,
          prefab_rowContent: null,
          prefab_openContent: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.scrollow_content = ctrl.scrollow_content;
        this.ui.btn_close = ctrl.btn_close;
        this.ui.prefab_rowContent = ctrl.prefab_rowContent;
        this.ui.prefab_openContent = ctrl.prefab_openContent;
        this.ui.prefab_meijuDetail = ctrl.prefab_meijuDetail;
        this.node_content = this.ui.scrollow_content.content;
        this.startPosX = -this.node_content.width / 2;
      };
      View.prototype.updateMeijuContent = function() {
        this.clearContent();
        var allItemNum = this.model.maxRounds;
        this.curShowNum = 0;
        this.curHorizontalNum = 1;
        this.curPrefab = this.ui.prefab_rowContent;
        this.list_clickBtn = [];
        for (var i = 0; i < allItemNum; i++) this.list_clickBtn.push(this.addItem());
        for (var j = 0; j < this.list_clickBtn.length; j++) {
          var playerName = this.list_clickBtn[j].children[1];
          for (var i = this.model.peopleNum; i < playerName.childrenCount; i++) playerName.children[i].active = false;
        }
        ctrl.reconnectUi();
      };
      View.prototype.openItem = function(index) {
        this.isChooseTotal || this.addOpenDetail(index);
      };
      View.prototype.addOpenDetail = function(index) {
        var children = this.node_content.children;
        var itemNode = children[index];
        var downList = [];
        for (var i = 0; i < children.length; i++) children[i].y < itemNode.y && downList.push(children[i]);
        var addItemNode = cc.instantiate(this.ui.prefab_openContent);
        addItemNode.parent = this.node_content;
        addItemNode.position = cc.p(itemNode.x, itemNode.y - itemNode.height / 2 - addItemNode.height / 2);
        var downH = addItemNode.height;
        if (null != addItemNode.children[1].children[1]) if (this.model.mamai_kaiguan) {
          addItemNode.children[1].children[1].active = true;
          addItemNode.children[0].height = 230;
        } else {
          addItemNode.children[1].children[1].active = false;
          addItemNode.children[0].height = 145;
        }
        itemNode[CONFIGS.str_openNode] = addItemNode;
        addItemNode["_curRound"] = index;
        var posConfigs = addItemNode.children[2].children;
        var detailNum = this.model.peopleNum;
        var myLogicSeatId = BunchInfoMgr_1.default.getInstance().getMyLogicSeatId();
        var curId;
        for (var i = 0; i < detailNum; i++) {
          curId = 0 == i ? myLogicSeatId : i == myLogicSeatId ? 0 : i;
          if (!this.model.data_meiju[index][1].handCards[curId]) continue;
          var detailNode = cc.instantiate(this.ui.prefab_meijuDetail);
          detailNode.parent = posConfigs[i];
        }
        for (var i = 0; i < downList.length; i++) downList[i].y -= downH;
        this.resetRankContentSize();
      };
      View.prototype.delOpenDetail = function(targetNode) {
        var children = this.node_content.children;
        var downList = [];
        for (var i = 0; i < children.length; i++) children[i].y < targetNode.y && downList.push(children[i]);
        var delNode = targetNode[CONFIGS.str_openNode];
        var downH = delNode.height;
        this.node_content.removeChild(delNode, true);
        delNode.destroy();
        targetNode[CONFIGS.str_openNode] = null;
        for (var i = 0; i < downList.length; i++) downList[i].y += downH;
        this.resetRankContentSize();
      };
      View.prototype.clearContent = function() {
        var children = this.node_content.children;
        for (var i = 0; i < children.length; i++) children[i].destroy();
        this.node_content.removeAllChildren(true);
        this.curShowNum = 0;
        this.curPrefab = null;
        this.itemWidth = null;
        this.itemHeight = null;
      };
      View.prototype.addItem = function() {
        var curNode = cc.instantiate(this.curPrefab);
        curNode.parent = this.node_content;
        this.initSize(curNode);
        curNode.position = this.getItemPos();
        this.curShowNum += 1;
        this.resetGridContentSize();
        return curNode;
      };
      View.prototype.initSize = function(curNode) {
        if (!this.itemWidth) {
          this.itemWidth = curNode.width;
          this.itemHeight = curNode.height;
        }
      };
      View.prototype.getItemPos = function() {
        var curLineNum, rowNum, posX, posY;
        curLineNum = this.curShowNum % this.curHorizontalNum;
        rowNum = Math.floor(this.curShowNum / this.curHorizontalNum);
        posX = this.startPosX + curLineNum * (this.itemWidth + CONFIGS.itemOffX) + this.itemWidth / 2;
        posY = -rowNum * (this.itemHeight + CONFIGS.itemOffY) - this.itemHeight / 2;
        return cc.p(posX, posY);
      };
      View.prototype.getContentHeight = function() {
        var rowNum = Math.ceil(this.curShowNum / this.curHorizontalNum);
        return rowNum * (this.itemHeight + CONFIGS.itemOffY);
      };
      View.prototype.resetGridContentSize = function() {
        this.node_content.height = this.getContentHeight();
      };
      View.prototype.resetRankContentSize = function() {
        var children = this.node_content.children;
        var curH = 0;
        for (var i = 0; i < children.length; i++) curH += children[i].height;
        this.node_content.height = curH;
      };
      return View;
    }(BaseView_1.default);
    var MpnnRecordCtrl = function(_super) {
      __extends(MpnnRecordCtrl, _super);
      function MpnnRecordCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.btn_close = null;
        _this.scrollow_content = null;
        _this.prefab_rowContent = null;
        _this.prefab_openContent = null;
        _this.prefab_meijuDetail = null;
        return _this;
      }
      MpnnRecordCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.model.updateInfo();
        this.inititems();
      };
      MpnnRecordCtrl.prototype.defineNetEvents = function() {};
      MpnnRecordCtrl.prototype.defineGlobalEvents = function() {};
      MpnnRecordCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_close, this.btn_closecb, "点击退出房间");
      };
      MpnnRecordCtrl.prototype.start = function() {};
      MpnnRecordCtrl.prototype.btn_closecb = function() {
        this.finish();
      };
      MpnnRecordCtrl.prototype.inititems = function() {
        console.log("初始化战绩详情");
        this.view.updateMeijuContent();
      };
      MpnnRecordCtrl.prototype.reconnectUi = function() {
        var curList = this.view.list_clickBtn;
        var curNode;
        for (var i = 0; i < curList.length; i++) {
          curNode = curList[i];
          curNode["_diyIndex"] = i;
          curNode.on(cc.Node.EventType.TOUCH_END, this.clickOpenDetail, this);
        }
      };
      MpnnRecordCtrl.prototype.clickOpenDetail = function(event) {
        var curNode = event.target;
        curNode[CONFIGS.str_openNode] ? this.view.delOpenDetail(curNode) : this.view.openItem(curNode[CONFIGS.str_diyIndex]);
      };
      __decorate([ property({
        tooltip: "关闭",
        type: cc.Node
      }) ], MpnnRecordCtrl.prototype, "btn_close", void 0);
      __decorate([ property({
        tooltip: "关闭",
        type: cc.ScrollView
      }) ], MpnnRecordCtrl.prototype, "scrollow_content", void 0);
      __decorate([ property(cc.Prefab) ], MpnnRecordCtrl.prototype, "prefab_rowContent", void 0);
      __decorate([ property(cc.Prefab) ], MpnnRecordCtrl.prototype, "prefab_openContent", void 0);
      __decorate([ property(cc.Prefab) ], MpnnRecordCtrl.prototype, "prefab_meijuDetail", void 0);
      MpnnRecordCtrl = __decorate([ ccclass ], MpnnRecordCtrl);
      return MpnnRecordCtrl;
    }(BaseCtrl_1.default);
    exports.default = MpnnRecordCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView"
  } ],
  Mpnn_TopUiCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e78a68pWSJNxIfZgJE0Nwzm", "Mpnn_TopUiCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var MpnnLogic_1 = require("../BullMgr/MpnnLogic");
    var MpnnConst_1 = require("../BullMgr/MpnnConst");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.intervalID = null;
        _this.users = null;
        _this.myseatId = null;
        _this.delaerSeatId = null;
        _this.isGrabing = null;
        _this.playerNum = null;
        _this.grablist = null;
        _this.seatCount = null;
        _this.ExtraGrabing = null;
        _this.node_qzbs = null;
        _this.gameStart_state = null;
        _this.qz_action = null;
        return _this;
      }
      Model.prototype.updateId = function() {
        this.gameStart_state = true;
        this.myseatId = MpnnLogic_1.default.getInstance().getMyLogicSeatId();
        this.delaerSeatId = MpnnLogic_1.default.getInstance().getDelaerSeatId();
        this.isGrabing = MpnnLogic_1.default.getInstance().getIsGrabing();
        this.playerNum = RoomMgr_1.default.getInstance().getPlayerCount();
        this.grablist = MpnnLogic_1.default.getInstance().getGrablist();
        this.seatCount = RoomMgr_1.default.getInstance().getSeatCount();
        this.ExtraGrabing = MpnnLogic_1.default.getInstance().getExtraGrabing();
        this.watcherSeatId = MpnnLogic_1.default.getInstance().getEnterSeatIds();
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_seats: null,
          node_img_grabAni: null,
          prefab_bet_btn: ctrl.prefab_bet_btn,
          prefab_maima_btn: ctrl.prefab_maima_btn,
          prefab_Qzhuang_btn: ctrl.prefab_Qzhuang_btn
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_seats = ctrl.node_seats;
        this.ui.node_img_grabAni = ctrl.node_img_grabAni;
      };
      View.prototype.clearQiangX = function() {
        var seatCount = RoomMgr_1.default.getInstance().getSeatCount();
        var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(this.model.delaerSeatId);
        var qiangXList = null;
        6 == seatCount ? qiangXList = this.ui.node_seats.children[0].children : 7 == seatCount ? qiangXList = this.ui.node_seats.children[1].children : 8 == seatCount && (qiangXList = this.ui.node_seats.children[2].children);
        for (var i = 0; i < qiangXList.length; i++) {
          qiangXList[i].children[0].active = false;
          qiangXList[i].children[1].active = false;
        }
      };
      View.prototype.showzhuangjiaQX = function() {
        if (!this.model.gameStart_state) return;
        var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(this.model.delaerSeatId);
        var delaerGrab = this.model.grablist[this.model.delaerSeatId];
        console.log("this.model.grablist", this.model.grablist, this.model.delaerSeatId, viewSeatId);
        var seatCount = RoomMgr_1.default.getInstance().getSeatCount();
        this.model.ExtraGrabing ? this.ui.node_seats.getChildByName("seats_" + seatCount).children[viewSeatId].children[2].children[0].getComponent(cc.Label).string = 1 : this.ui.node_seats.getChildByName("seats_" + seatCount).children[viewSeatId].children[2].children[0].getComponent(cc.Label).string = delaerGrab;
        this.ui.node_seats.getChildByName("seats_" + seatCount).children[viewSeatId].active = true;
        this.ui.node_seats.getChildByName("seats_" + seatCount).children[viewSeatId].children[2].active = true;
      };
      View.prototype.removeZhuangjiaQX = function() {
        var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(this.model.delaerSeatId);
        if (null != viewSeatId) {
          var seatCount = RoomMgr_1.default.getInstance().getSeatCount();
          this.ui.node_seats.getChildByName("seats_" + seatCount).children[viewSeatId].children[2].active = false;
        }
      };
      View.prototype.showGrabAni = function() {
        var room = RoomMgr_1.default.getInstance();
        var users = room.users;
        var GrabAniViewSeatId = [];
        this.model.qz_action = new Array();
        var delaytime = .05;
        var delaerGrab = this.model.grablist[this.model.delaerSeatId];
        this.ui.node_img_grabAni.active = true;
        this.ui.node_img_grabAni.children[1].active = false;
        this.ui.node_img_grabAni.children[0].active = true;
        this.model.ExtraGrabing && (delaerGrab -= 1);
        console.log("this.model.watcherSeatId.length", this.model.watcherSeatId);
        for (var seatId in users) {
          var bolEnter = true;
          if (null != this.model.watcherSeatId.length) for (var i = 0; i < this.model.watcherSeatId.length; i++) if (seatId == this.model.watcherSeatId[i]) {
            bolEnter = false;
            break;
          }
          this.model.grablist[seatId] == delaerGrab && bolEnter && GrabAniViewSeatId.push(room.getViewSeatId(seatId));
        }
        for (var i = 0; i < 2 * GrabAniViewSeatId.length; i++) {
          var GrabseatId = null;
          GrabseatId = i < GrabAniViewSeatId.length ? i : i - GrabAniViewSeatId.length;
          this.model.qz_action.push(cc.moveTo(0, this.ui.node_seats.getChildByName("seats_" + this.model.seatCount).children[GrabAniViewSeatId[GrabseatId]].position));
          this.model.qz_action.push(cc.delayTime(delaytime));
        }
      };
      View.prototype.showQzhuang_btn = function(msg) {
        if (msg.dictChooseGrab && (this.node.getChildByName("Mpnn_qiangzhuang") || msg.dictChooseGrab[this.model.myseatId])) return;
        if (this.node.getChildByName("Mpnn_qiangzhuang")) return;
        var QzhuangBtn = cc.instantiate(this.ui.prefab_Qzhuang_btn);
        QzhuangBtn.parent = this.node;
      };
      View.prototype.showBet_btn = function(msg) {
        if (msg.dictChooseChip && (this.node.getChildByName("Mpnn_Bets_btn") || msg.dictChooseChip[this.model.myseatId])) return;
        if (this.node.getChildByName("Mpnn_Bets_btn") || this.model.myseatId == this.model.delaerSeatId) return;
        var betBtn = cc.instantiate(this.ui.prefab_bet_btn);
        betBtn.parent = this.node;
      };
      View.prototype.showmaima_btn = function() {
        if (this.model.myseatId == this.model.delaerSeatId) return;
        var fangjianCfg = RoomMgr_1.default.getInstance().getFangKaCfg();
        if (1 == fangjianCfg.v_playerbuyLimit) {
          var maima = cc.instantiate(this.ui.prefab_maima_btn);
          maima.parent = this.node;
        }
      };
      View.prototype.showGrabAniSign = function() {
        var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(this.model.delaerSeatId);
        var seatCount = RoomMgr_1.default.getInstance().getSeatCount();
        this.ui.node_img_grabAni.active = true;
        this.ui.node_img_grabAni.children[0].active = true;
        this.ui.node_img_grabAni.children[1].active = true;
        this.ui.node_img_grabAni.position = this.ui.node_seats.getChildByName("seats_" + seatCount).children[viewSeatId].position;
      };
      View.prototype.removeGrabAniSign = function() {
        this.ui.node_img_grabAni.x = -759;
        this.ui.node_img_grabAni.y = -309;
        this.ui.node_img_grabAni.active = false;
      };
      View.prototype.showAllQiangX = function() {
        var room = RoomMgr_1.default.getInstance();
        var users = room.users;
        var grablist = MpnnLogic_1.default.getInstance().getGrablist();
        for (var seatId in users) {
          var bolEnter = true;
          if (null != this.model.watcherSeatId.length) for (var i = 0; i < this.model.watcherSeatId.length; i++) if (seatId == this.model.watcherSeatId[i]) {
            bolEnter = false;
            break;
          }
          bolEnter && this.setQiangX(room.getViewSeatId(seatId), grablist[seatId]);
        }
      };
      View.prototype.showOtherQiangX = function(seatId) {
        var room = RoomMgr_1.default.getInstance();
        var users = room.users;
        var grablist = MpnnLogic_1.default.getInstance().getGrablist();
        this.setQiangX(room.getViewSeatId(seatId), grablist[seatId]);
        console.log("grablist[seatId]", grablist[seatId]);
      };
      View.prototype.setQiangX = function(viewSeatId, QiangX) {
        var seatCount = RoomMgr_1.default.getInstance().getSeatCount();
        var qiangXList = null;
        6 == seatCount ? qiangXList = this.ui.node_seats.children[0].getChildByName("seat_" + viewSeatId).children : 7 == seatCount ? qiangXList = this.ui.node_seats.children[1].getChildByName("seat_" + viewSeatId).children : 8 == seatCount && (qiangXList = this.ui.node_seats.children[2].getChildByName("seat_" + viewSeatId).children);
        if (0 == QiangX || this.model.ExtraGrabing) {
          qiangXList[0].active = true;
          qiangXList[1].active = false;
        } else {
          qiangXList[0].active = false;
          qiangXList[1].active = true;
          qiangXList[1].children[0].getComponent(cc.Label).string = QiangX;
        }
      };
      return View;
    }(BaseView_1.default);
    var Mpnn_TopUiCtrl = function(_super) {
      __extends(Mpnn_TopUiCtrl, _super);
      function Mpnn_TopUiCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.betsShowTime = null;
        _this.node_seats = null;
        _this.node_img_grabAni = null;
        _this.prefab_bet_btn = null;
        _this.prefab_maima_btn = null;
        _this.prefab_Qzhuang_btn = null;
        return _this;
      }
      Mpnn_TopUiCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Mpnn_TopUiCtrl.prototype.defineNetEvents = function() {
        this.n_events[MpnnConst_1.default.clientEvent.onProcess] = this.onProcess;
        this.n_events[MpnnConst_1.default.clientEvent.onSyncData] = this.onSyncData;
        this.n_events[MpnnConst_1.default.clientEvent.onConfirmGrab] = this.onConfirmGrab;
        this.n_events[MpnnConst_1.default.clientEvent.onChooseGrab] = this.onChooseGrab;
        this.n_events["connector.entryHandler.enterRoom"] = this.onEnterRoom;
      };
      Mpnn_TopUiCtrl.prototype.defineGlobalEvents = function() {
        this.g_events["removeGrabAniSigh"] = this.removeGrabAniSigh;
      };
      Mpnn_TopUiCtrl.prototype.connectUi = function() {};
      Mpnn_TopUiCtrl.prototype.start = function() {};
      Mpnn_TopUiCtrl.prototype.showBet_Btn = function() {
        this.gemit("showBet_Btn");
      };
      Mpnn_TopUiCtrl.prototype.delyTime = function() {
        var _this = this;
        if (this.model.isGrabing) {
          this.view.showGrabAni();
          this.model.qz_action.push(cc.callFunc(function() {
            _this.view.clearQiangX();
            _this.view.showGrabAniSign();
            _this.view.showzhuangjiaQX();
            _this.showBet_Btn();
          }));
          this.ui.node_img_grabAni.runAction(cc.sequence(this.model.qz_action));
        } else {
          this.view.clearQiangX();
          this.view.showGrabAniSign();
          this.view.showzhuangjiaQX();
          this.showBet_Btn();
        }
      };
      Mpnn_TopUiCtrl.prototype.onProcess = function(msg) {
        this.model.updateId();
        switch (msg.process) {
         case MpnnConst_1.default.process.giveCards:
          this.view.showQzhuang_btn(msg);
          break;

         case MpnnConst_1.default.process.chooseChip:
          console.log("这是显示下注的流程：" + msg.process);
          this.view.showmaima_btn();
          break;

         case MpnnConst_1.default.process.start:
         case MpnnConst_1.default.process.calculate:
        }
      };
      Mpnn_TopUiCtrl.prototype.onSyncData = function(msg) {
        this.model.updateId();
        switch (msg.processType) {
         case MpnnConst_1.default.process.giveCards:
          this.view.showQzhuang_btn(msg);
          break;

         case MpnnConst_1.default.process.chooseChip:
          console.log("这是显示下注的断线重连：" + msg.process);
          this.view.clearQiangX();
          this.view.showGrabAniSign();
          this.view.showzhuangjiaQX();
          this.view.showBet_btn(msg);
          this.view.showmaima_btn();
          this.showBet_Btn();
          break;

         case MpnnConst_1.default.process.calculate:
         case MpnnConst_1.default.process.settle:
          this.view.showGrabAniSign();
          this.view.showzhuangjiaQX();
        }
      };
      Mpnn_TopUiCtrl.prototype.onConfirmGrab = function(msg) {
        this.model.updateId();
        this.view.showAllQiangX();
        this.view.showBet_btn(msg);
        this.delyTime();
      };
      Mpnn_TopUiCtrl.prototype.onChooseGrab = function(msg) {
        this.model.updateId();
        this.view.showOtherQiangX(msg.seatId);
      };
      Mpnn_TopUiCtrl.prototype.onEnterRoom = function(msg) {
        if (!msg.gamestarted) {
          this.model.gameStart_state = msg.gamestarted;
          this.view.removeZhuangjiaQX();
        }
      };
      Mpnn_TopUiCtrl.prototype.removeGrabAniSigh = function() {
        this.view.removeGrabAniSign();
        this.view.removeZhuangjiaQX();
      };
      Mpnn_TopUiCtrl.prototype.onDestroy = function() {
        this.betsShowTime = null;
        _super.prototype.onDestroy.call(this);
      };
      __decorate([ property(cc.Node) ], Mpnn_TopUiCtrl.prototype, "node_seats", void 0);
      __decorate([ property(cc.Node) ], Mpnn_TopUiCtrl.prototype, "node_img_grabAni", void 0);
      __decorate([ property(cc.Prefab) ], Mpnn_TopUiCtrl.prototype, "prefab_bet_btn", void 0);
      __decorate([ property(cc.Prefab) ], Mpnn_TopUiCtrl.prototype, "prefab_maima_btn", void 0);
      __decorate([ property(cc.Prefab) ], Mpnn_TopUiCtrl.prototype, "prefab_Qzhuang_btn", void 0);
      Mpnn_TopUiCtrl = __decorate([ ccclass ], Mpnn_TopUiCtrl);
      return Mpnn_TopUiCtrl;
    }(BaseCtrl_1.default);
    exports.default = Mpnn_TopUiCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../BullMgr/MpnnConst": "MpnnConst",
    "../BullMgr/MpnnLogic": "MpnnLogic"
  } ],
  Mpnn_chipValueCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dea15aFPxJDPKMDn7rFNE4n", "Mpnn_chipValueCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var MpnnLogic_1 = require("../BullMgr/MpnnLogic");
    var MpnnConst_1 = require("../BullMgr/MpnnConst");
    var GEventDef_1 = require("../../../Plat/GameMgrs/GEventDef");
    var BullPosMgr_1 = require("../../../GameCommon/Bull/BullPosMgr");
    var chipIndex = {
      0: [ 1, 2 ],
      1: [ 2, 4 ],
      2: [ 4, 8 ],
      3: [ 5, 10 ]
    };
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var BullConst = null;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.chipList = null;
        _this.palyerList = null;
        _this.delaerSeatId = null;
        _this.GrabList = null;
        _this.grabbanker = null;
        _this.minChip = null;
        _this.seatsCount = RoomMgr_1.default.getInstance().getSeatCount();
        BullConst = MpnnConst_1.default;
        _this.curLogic = MpnnLogic_1.default.getInstance();
        return _this;
      }
      Model.prototype.getAllPlayerChip = function() {
        this.minChip = chipIndex[RoomMgr_1.default.getInstance().getFangKaCfg().v_minChip][0];
        this.GrabList = MpnnLogic_1.default.getInstance().getGrablist();
        this.grabbanker = RoomMgr_1.default.getInstance().getFangKaCfg().v_grabbanker;
        this.chipList = MpnnLogic_1.default.getInstance().getChiplist();
        this.palyerList = MpnnLogic_1.default.getInstance().getValidSeats();
        this.delaerSeatId = MpnnLogic_1.default.getInstance().getDelaerSeatId();
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          prefab_oneChip: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.dict_chips = {};
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.prefab_oneChip = ctrl.prefab_oneChip;
        this.curNodeCfg = this.node.getChildByName("seats_" + this.model.seatsCount);
      };
      View.prototype.setSyncChip = function() {
        for (var viewSeatId = 0; viewSeatId < this.model.seatsCount; viewSeatId++) null == RoomMgr_1.default.getInstance().getLogicSeatId(viewSeatId) || this.showChipOnly(viewSeatId, this.model.curLogic.getBaseChipValue());
      };
      View.prototype.showChipValue = function(viewSeatId) {
        var curNode = this.dict_chips[viewSeatId];
        curNode && (curNode.active = true);
      };
      View.prototype.showAllChipValue = function() {
        var room = RoomMgr_1.default.getInstance();
        var users = room.users;
        for (var seatId in users) this.setChipValue(room.getViewSeatId(seatId), this.model.curLogic.getBaseChipValue());
      };
      View.prototype.deleteAllChipValue = function() {
        var room = RoomMgr_1.default.getInstance();
        var users = room.users;
        for (var seatId in users) {
          var curNode = this.getOneChip(RoomMgr_1.default.getInstance().getViewSeatId(seatId));
          curNode.active = false;
        }
      };
      View.prototype.showSeatChipValue = function(chipDict) {
        for (var seatId in chipDict) this.setChipValue(RoomMgr_1.default.getInstance().getViewSeatId(seatId), this.model.curLogic.getBaseChipValue());
      };
      View.prototype.setAllplayerChip = function() {
        var seatId;
        for (seatId in this.model.chipList) if (seatId != this.model.delaerSeatId) {
          var isGrabing = null;
          var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(seatId);
          if (null == this.model.palyerList[seatId]) ; else if (this.model.chipList[seatId] == this.model.minChip) {
            isGrabing = this.model.GrabList[seatId] == this.model.GrabList[this.model.delaerSeatId] && 0 != this.model.GrabList[this.model.delaerSeatId] && this.model.GrabList[this.model.delaerSeatId] == this.model.grabbanker;
            var value = null;
            value = isGrabing ? 2 * this.model.chipList[seatId] : this.model.chipList[seatId];
            this.showChipOnly(viewSeatId, value);
          }
        }
      };
      View.prototype.setChipValue = function(viewSeatId, chipValue) {
        var curNode = this.getOneChip(viewSeatId);
        if (curNode) {
          var posMgr = BullPosMgr_1.default.getInstance();
          var startPos = posMgr.getSeatPos(viewSeatId);
          var targetPos = curNode.position;
          var tagStr = "chipValue_" + viewSeatId;
          this.model.curLogic.emit_flyGold(startPos, targetPos, tagStr);
          curNode.children[0].getComponent(cc.Label).string = chipValue + "";
          curNode.active = false;
        }
      };
      View.prototype.getOneChip = function(viewSeatId) {
        var curNode = this.dict_chips[viewSeatId];
        if (!curNode) {
          curNode = cc.instantiate(this.ui.prefab_oneChip);
          curNode.parent = this.node;
          curNode.position = BullPosMgr_1.default.getInstance().getChipPos(viewSeatId);
          this.dict_chips[viewSeatId] = curNode;
        }
        return curNode;
      };
      View.prototype.showChipOnly = function(viewSeatId, chipValue) {
        var curNode = this.getOneChip(viewSeatId);
        if (curNode) {
          var tagStr = "chipValue_" + viewSeatId;
          curNode.children[0].getComponent(cc.Label).string = chipValue + "";
          curNode.active = true;
        }
      };
      return View;
    }(BaseView_1.default);
    var Mpnn_chipValueCtrl = function(_super) {
      __extends(Mpnn_chipValueCtrl, _super);
      function Mpnn_chipValueCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.prefab_oneChip = null;
        return _this;
      }
      Mpnn_chipValueCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Mpnn_chipValueCtrl.prototype.defineNetEvents = function() {
        this.n_events = {};
        this.n_events[BullConst.clientEvent.onProcess] = this.onProcess;
        this.n_events[BullConst.clientEvent.onSyncData] = this.onSyncData;
        this.n_events[BullConst.clientEvent.onMidEnter] = this.onMidEnter;
        this.n_events[MpnnConst_1.default.clientEvent.onChooseChip] = this.onChooseChip;
        this.n_events["room.roomHandler.nextRound"] = this.onNextRound;
      };
      Mpnn_chipValueCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {};
        this.g_events[GEventDef_1.default.bull_flyGoldEnd] = this.onModules_flyGoldEnd;
      };
      Mpnn_chipValueCtrl.prototype.connectUi = function() {};
      Mpnn_chipValueCtrl.prototype.start = function() {};
      Mpnn_chipValueCtrl.prototype.onProcess = function(msg) {
        switch (msg.process) {
         case BullConst.process.start:
          break;

         case BullConst.process.calculate:
          this.model.getAllPlayerChip();
          this.view.setAllplayerChip();
        }
      };
      Mpnn_chipValueCtrl.prototype.onChooseChip = function(msg) {
        var logseatId = MpnnLogic_1.default.getInstance().getMyLogicSeatId();
        var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(msg.seatId);
        this.view.setChipValue(viewSeatId, msg.chipValue);
      };
      Mpnn_chipValueCtrl.prototype.onSyncData = function(msg) {
        var process = msg.processType;
        if (3 == process || 4 == process) {
          var seatID = void 0;
          for (seatID in msg.dictChooseChip) if (seatID != MpnnLogic_1.default.getInstance().getDelaerSeatId()) {
            var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(seatID);
            this.view.showChipOnly(viewSeatId, msg.dictChooseChip[seatID]);
          }
        }
      };
      Mpnn_chipValueCtrl.prototype.onMidEnter = function(msg) {
        msg.enterSeatId == RoomMgr_1.default.getInstance().getMySeatId() && this.view.showSeatChipValue(msg.dict_chipValue);
      };
      Mpnn_chipValueCtrl.prototype.onNextRound = function(msg) {
        this.view.deleteAllChipValue();
      };
      Mpnn_chipValueCtrl.prototype.onModules_flyGoldEnd = function(msg) {
        console.log("金币飞行结束onModules_flyGoldEnd", msg);
        var viewSeatId = msg.split("_")[1];
        this.view.showChipValue(viewSeatId);
      };
      __decorate([ property(cc.Prefab) ], Mpnn_chipValueCtrl.prototype, "prefab_oneChip", void 0);
      Mpnn_chipValueCtrl = __decorate([ ccclass ], Mpnn_chipValueCtrl);
      return Mpnn_chipValueCtrl;
    }(BaseCtrl_1.default);
    exports.default = Mpnn_chipValueCtrl;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Bull/BullPosMgr": "BullPosMgr",
    "../../../Plat/GameMgrs/GEventDef": "GEventDef",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../BullMgr/MpnnConst": "MpnnConst",
    "../BullMgr/MpnnLogic": "MpnnLogic"
  } ],
  Mpnn_cuopaiCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e52726rJv1BoqL3WuUfsnyQ", "Mpnn_cuopaiCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var GEventDef_1 = require("../../../Plat/GameMgrs/GEventDef");
    var MpnnLogic_1 = require("../BullMgr/MpnnLogic");
    var MpnnConst_1 = require("../BullMgr/MpnnConst");
    var LocalStorage_1 = require("../../../Plat/Libs/LocalStorage");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.pokeBack = LocalStorage_1.default.getInstance().getBullCardBGCfg();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          card_mask_number: ctrl.card_mask_number,
          card_mask_jqk: ctrl.card_mask_jqk,
          card_back: ctrl.card_back,
          card_value: ctrl.card_value,
          btn_liangPai: ctrl.btn_liangPai,
          btn_close: ctrl.btn_close
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.card_value.active = false;
        this.addGrayLayer();
        this.initCardBack();
      };
      View.prototype.initCardBack = function() {
        var _this = this;
        var cardBack = "0x00";
        switch (this.model.pokeBack) {
         case 1:
          cardBack = "0x00_1";
          break;

         case 2:
          cardBack = "0x00_2";
          break;

         case 3:
          cardBack = "0x00";
          break;

         case 4:
          cardBack = "0x00_4";
        }
        var path = "Plat/GameRoomCommon/BigPoker/bull2_" + cardBack;
        cc.loader.loadRes(path, cc.SpriteFrame, function(err, assets) {
          if (err) cc.error(err); else {
            _this.ui.card_back.getComponent(cc.Sprite).spriteFrame = assets;
            _this.ui.card_value.active = true;
          }
        });
      };
      View.prototype.initCardValue = function(cardValue) {
        var _this = this;
        var path = "Plat/GameRoomCommon/BigPoker/bull2_" + this.getSixValue(cardValue);
        cc.loader.loadRes(path, cc.SpriteFrame, function(err, assets) {
          err ? cc.error(err) : _this.ui.card_value.getComponent(cc.Sprite).spriteFrame = assets;
        });
      };
      View.prototype.hideMask = function() {
        this.ui.card_mask_number.runAction(cc.fadeOut(.5));
        this.ui.card_mask_jqk.runAction(cc.fadeOut(.5));
        this.ui.card_back.active = false;
      };
      View.prototype.ghostHide = function() {
        this.ui.card_mask_jqk.active = false;
        this.ui.card_mask_number.active = false;
      };
      View.prototype.moveCardBack = function(event, offX, offY) {
        var Movedelta = event.touch.getDelta();
        this.ui.card_back.x += Movedelta.x;
        this.ui.card_back.y += Movedelta.y;
        if (offX >= this.ui.card_value.width / 3 || offY >= this.ui.card_value.height / 3) {
          this.hideMask();
          var delay_time_1 = setTimeout(function() {
            clearTimeout(delay_time_1);
            MpnnLogic_1.default.getInstance().emit_cuopaiEnd(1);
          }, 1e3);
        }
      };
      View.prototype.getSixValue = function(logicNum) {
        logicNum = parseInt(logicNum);
        var str = logicNum < 14 ? "0x0" : "0x";
        return str + logicNum.toString(16);
      };
      View.prototype.chooseMsk = function(value) {
        var cardValue = this.getSixValue(value).split("");
        var word = cardValue[cardValue.length - 1];
        if ("b" == word || "c" == word || "d" == word) {
          this.ui.card_mask_jqk.active = true;
          this.ui.card_mask_number.active = false;
        } else {
          this.ui.card_mask_jqk.active = false;
          this.ui.card_mask_number.active = true;
        }
      };
      return View;
    }(BaseView_1.default);
    var Mpnn_cuopaiCtrl = function(_super) {
      __extends(Mpnn_cuopaiCtrl, _super);
      function Mpnn_cuopaiCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.delay_time = null;
        _this.btn_liangPai = null;
        _this.card_mask_number = null;
        _this.card_mask_jqk = null;
        _this.card_back = null;
        _this.card_value = null;
        _this.btn_close = null;
        return _this;
      }
      Mpnn_cuopaiCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Mpnn_cuopaiCtrl.prototype.defineNetEvents = function() {
        this.n_events[MpnnConst_1.default.clientEvent.onProcess] = this.onProcess;
        this.n_events[MpnnConst_1.default.clientEvent.onSyncData] = this.onSyncData;
      };
      Mpnn_cuopaiCtrl.prototype.defineGlobalEvents = function() {
        this.g_events[GEventDef_1.default.bull_cuopai] = this.onStartCuopai;
        this.g_events[GEventDef_1.default.bull_cuopaiEnd] = this.bull_cuopaiEnd;
      };
      Mpnn_cuopaiCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_liangPai, this.btn_liangPai_cb, "点击亮牌");
        this.connect(G_UiType.image, this.ui.btn_close, this.btn_close_cb, "点击关闭搓牌");
      };
      Mpnn_cuopaiCtrl.prototype.start = function() {};
      Mpnn_cuopaiCtrl.prototype.onProcess = function(msg) {
        switch (msg.process) {
         case MpnnConst_1.default.process.settle:
          this.finish();
        }
      };
      Mpnn_cuopaiCtrl.prototype.onSyncData = function() {
        this.finish();
      };
      Mpnn_cuopaiCtrl.prototype.onStartCuopai = function(msg) {
        var value = msg[0];
        78 != value && 79 != value || this.view.ghostHide();
        this.view.chooseMsk(msg[0]);
        console.log("开始搓牌");
        this.view.initCardValue(value);
        this.nodeOn();
      };
      Mpnn_cuopaiCtrl.prototype.nodeOn = function() {
        this.card_back.on(cc.Node.EventType.TOUCH_START, this.touchStart, this);
        this.card_back.on(cc.Node.EventType.TOUCH_MOVE, this.touchMove, this);
      };
      Mpnn_cuopaiCtrl.prototype.nodeOff = function() {
        this.card_back.off(cc.Node.EventType.TOUCH_START, this.touchStart, this);
        this.card_back.off(cc.Node.EventType.TOUCH_MOVE, this.touchMove, this);
      };
      Mpnn_cuopaiCtrl.prototype.bull_cuopaiEnd = function(msg) {
        this.finish();
      };
      Mpnn_cuopaiCtrl.prototype.btn_liangPai_cb = function() {
        var _this = this;
        this.view.hideMask();
        this.delay_time = this.scheduleOnce(function() {
          _this.finish();
          MpnnLogic_1.default.getInstance().emit_cuopaiEnd(1);
        }, 1);
      };
      Mpnn_cuopaiCtrl.prototype.btn_close_cb = function() {
        this.gemit("cuopaiclose");
        this.finish();
      };
      Mpnn_cuopaiCtrl.prototype.touchStart = function(event) {};
      Mpnn_cuopaiCtrl.prototype.touchMove = function(event) {
        var offX = Math.abs(this.ui.card_value.x - this.ui.card_back.x);
        var offY = Math.abs(this.ui.card_value.y - this.ui.card_back.y);
        this.view.moveCardBack(event, offX, offY);
      };
      Mpnn_cuopaiCtrl.prototype.onDestroy = function() {
        clearTimeout(this.delay_time);
        _super.prototype.onDestroy.call(this);
      };
      __decorate([ property(cc.Node) ], Mpnn_cuopaiCtrl.prototype, "btn_liangPai", void 0);
      __decorate([ property(cc.Node) ], Mpnn_cuopaiCtrl.prototype, "card_mask_number", void 0);
      __decorate([ property(cc.Node) ], Mpnn_cuopaiCtrl.prototype, "card_mask_jqk", void 0);
      __decorate([ property(cc.Node) ], Mpnn_cuopaiCtrl.prototype, "card_back", void 0);
      __decorate([ property(cc.Node) ], Mpnn_cuopaiCtrl.prototype, "card_value", void 0);
      __decorate([ property(cc.Node) ], Mpnn_cuopaiCtrl.prototype, "btn_close", void 0);
      Mpnn_cuopaiCtrl = __decorate([ ccclass ], Mpnn_cuopaiCtrl);
      return Mpnn_cuopaiCtrl;
    }(BaseCtrl_1.default);
    exports.default = Mpnn_cuopaiCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/GEventDef": "GEventDef",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../../../Plat/Libs/LocalStorage": "LocalStorage",
    "../BullMgr/MpnnConst": "MpnnConst",
    "../BullMgr/MpnnLogic": "MpnnLogic"
  } ],
  Mpnn_goldPoolCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "380f5mV8MtPx6brIXbI8gyP", "Mpnn_goldPoolCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var MpnnConst_1 = require("../BullMgr/MpnnConst");
    var MpnnLogic_1 = require("../BullMgr/MpnnLogic");
    var GEventDef_1 = require("../../../Plat/GameMgrs/GEventDef");
    var BullPosMgr_1 = require("../../../GameCommon/Bull/BullPosMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.onceFlyNum = null;
        _this.minFlySpeed = null;
        _this.maxFlySpeed = null;
        _this.chipFlyNum = null;
        _this.onceFlyNum = 7;
        _this.minFlySpeed = 50;
        _this.maxFlySpeed = 100;
        _this.flyGoldSpeed = 80;
        _this.chipFlyNum = 8;
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this._list_cache = null;
        _this._list_hideGold = null;
        _this.ui = {
          sprite_goldImg: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this._list_cache = [];
        _this._list_hideGold = [];
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.sprite_goldImg = ctrl.sprite_goldImg;
      };
      View.prototype.flyGold = function(startPos, targetPos, cb, endCb) {
        var golds = this._createGroupGold(this.model.onceFlyNum);
        var flyInfo = {
          groupList: golds,
          startPos: startPos,
          targetPos: targetPos,
          flySpeed: this.model.flyGoldSpeed,
          cb: cb,
          endCb: endCb
        };
        console.log("这里飞行金币startPos= ", flyInfo.startPos, ", targetPos=", flyInfo.targetPos);
        this.flyGroupToTarget(flyInfo);
        return golds;
      };
      View.prototype.flyChips = function(startPos, targetPos, cb, endCb) {
        var golds = this._createGroupGold(this.model.chipFlyNum);
        var flyInfo = {
          groupList: golds,
          startPos: startPos,
          targetPos: targetPos,
          flySpeed: this.model.maxFlySpeed,
          cb: cb,
          endCb: endCb
        };
        this.flyGroupToTarget(flyInfo);
      };
      View.prototype.flyByGolds = function(startPos, targetPos, golds, cb, endCb) {
        var flyInfo = {
          groupList: golds,
          startPos: startPos,
          targetPos: targetPos,
          flySpeed: this.model.flyGoldSpeed,
          cb: cb,
          endCb: endCb
        };
        this.setGroupGoldShow(golds);
        console.log("这里用现成的金币金币startPos= ", flyInfo.startPos, ", targetPos=", flyInfo.targetPos);
        this.flyGroupToTarget(flyInfo);
      };
      View.prototype.getMaxSeatsCount = function() {
        return RoomMgr_1.default.getInstance().getSeatCount();
      };
      View.prototype.getPosByViewSeatId = function(viewSeatId) {
        return BullPosMgr_1.default.getInstance().getSeatPos(viewSeatId);
      };
      View.prototype.hideAll = function() {
        var curNode;
        for (var i = 0; i < this._list_cache.length; i++) {
          curNode = this._list_cache[i];
          curNode.stopAllActions();
          curNode.active && this._hideOneGold(curNode);
        }
      };
      View.prototype.flyGroupToTarget = function(flyInfo) {
        var groupList = flyInfo.groupList, startPos = flyInfo.startPos, targetPos = flyInfo.targetPos, flySpeed = flyInfo.flySpeed, cb = flyInfo.cb, endCb = flyInfo.endCb;
        var i, curNodeNum = groupList.length;
        var _loop_1 = function() {
          var goldNode = groupList[i];
          goldNode.stopAllActions();
          goldNode.position = this_1._getRandomPos(startPos);
          var act1 = cc.moveTo(this_1.getRandomArea(this_1.model.minFlySpeed, flySpeed) / 100, targetPos);
          var act2 = cc.callFunc(function() {
            this._hideOneGold(goldNode);
            curNodeNum -= 1;
            if (curNodeNum < 1 && endCb) {
              endCb();
              endCb = null;
            }
            if (cb) {
              cb();
              cb = null;
            }
          }, this_1);
          goldNode.runAction(cc.sequence(act1, act2));
        };
        var this_1 = this;
        for (i = 0; i < groupList.length; i++) _loop_1();
      };
      View.prototype._createGroupGold = function(num) {
        var i, goldNode, list_golds = [];
        for (i = 0; i < num; i++) {
          goldNode = this._getOneGold();
          list_golds.push(goldNode);
        }
        return list_golds;
      };
      View.prototype._getOneGold = function() {
        var curNode = this._list_hideGold.pop();
        if (!curNode) {
          curNode = new cc.Node();
          curNode.parent = this.node;
          curNode.addComponent(cc.Sprite).spriteFrame = this.ui.sprite_goldImg;
          this._list_cache.push(curNode);
        }
        curNode.active = true;
        return curNode;
      };
      View.prototype._hideOneGold = function(curNode) {
        curNode.active = false;
        this._list_hideGold.push(curNode);
      };
      View.prototype.setGroupGoldShow = function(golds) {
        var curGold;
        for (var i = 0; i < golds.length; i++) {
          curGold = golds[i];
          curGold.active = true;
          this._list_hideGold.splice(this._list_hideGold.indexOf(curGold));
        }
      };
      View.prototype._getRandomPos = function(curPos) {
        var curW = 25, curH = 50;
        var nodeW = this.getRandomArea(0, curW) * (Math.random() > .5 ? 1 : -1), nodeH = this.getRandomArea(0, curH) * (Math.random() > .5 ? 1 : -1);
        return cc.p(curPos.x + nodeW, curPos.y + nodeH);
      };
      View.prototype.getRandomArea = function(downNum, upNum) {
        return parseInt(Math.random() * (upNum - downNum + 1) + downNum);
      };
      return View;
    }(BaseView_1.default);
    var Mpnn_goldPoolCtrl = function(_super) {
      __extends(Mpnn_goldPoolCtrl, _super);
      function Mpnn_goldPoolCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.sprite_goldImg = null;
        return _this;
      }
      Mpnn_goldPoolCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Mpnn_goldPoolCtrl.prototype.defineNetEvents = function() {
        this.n_events[MpnnConst_1.default.clientEvent.onSettle] = this.onSettle_bull;
        this.n_events[MpnnConst_1.default.clientEvent.onSyncData] = this.onSyncData;
      };
      Mpnn_goldPoolCtrl.prototype.defineGlobalEvents = function() {
        this.g_events[GEventDef_1.default.bull_flyGold] = this.onModules_flyGold;
        this.g_events[GEventDef_1.default.usersUpdated] = this.usersUpdated;
      };
      Mpnn_goldPoolCtrl.prototype.connectUi = function() {};
      Mpnn_goldPoolCtrl.prototype.start = function() {};
      Mpnn_goldPoolCtrl.prototype.test = function() {
        this.view.flyGold(cc.p(-522, -278), cc.p(2, -173), null, function() {
          console.log("飞行结最后一个金币落下束，发送消息1");
        });
        this.view.flyGold(cc.p(535, 27), cc.p(303, -75), null, function() {
          console.log("飞行结最后一个金币落下束，发送消息2");
        });
      };
      Mpnn_goldPoolCtrl.prototype.onSettle_bull = function(msg) {
        var _this = this;
        console.log("onSettle_bull金币结算==", msg);
        if (!msg.winIdList) return;
        msg.scoreInfo[MpnnLogic_1.default.getInstance().getDelaerSeatId()] > 0 && msg.winIdList.push(MpnnLogic_1.default.getInstance().getDelaerSeatId().toString());
        var _loop_2 = function(i) {
          var winSeatId = msg.winIdList[i];
          var winViewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(winSeatId);
          var startPosList = [];
          var room = RoomMgr_1.default.getInstance();
          var posMgr = BullPosMgr_1.default.getInstance();
          for (var seatId in msg.scoreInfo) {
            if (seatId == winSeatId) continue;
            startPosList.push(posMgr.getSeatPos(room.getViewSeatId(seatId)));
          }
          var dataList = [ {
            targetPos: cc.p(0, 0),
            startPosList: startPosList
          }, {
            targetPos: posMgr.getSeatPos(winViewSeatId),
            startPosList: [ cc.p(0, 0) ]
          } ];
          this_2.flyGolds(dataList, function() {
            _this.playGetGoldEffect(winViewSeatId);
          });
        };
        var this_2 = this;
        for (var i = 0; i < msg.winIdList.length; i++) _loop_2(i);
      };
      Mpnn_goldPoolCtrl.prototype.onSyncData = function() {
        this.view.hideAll();
      };
      Mpnn_goldPoolCtrl.prototype.usersUpdated = function() {
        this.view.hideAll();
      };
      Mpnn_goldPoolCtrl.prototype.onModules_flyGold = function(msg) {
        console.log("接收到金币飞行的消息", msg);
        var startPos = msg.startPos;
        var targetPos = msg.targetPos;
        var flyType = msg.flyType;
        var tagStr = msg.tagStr;
        this.view.flyGold(startPos, targetPos, null, function() {
          console.log("飞行结束，发送消息", tagStr);
          MpnnLogic_1.default.getInstance().emit_flyGoldEnd(tagStr);
        });
      };
      Mpnn_goldPoolCtrl.prototype.flyGolds = function(dataList, cb) {
        var _this = this;
        dataList = dataList.concat([]);
        var flyData, showGolds = [];
        var flyFunc = function(curData) {
          var i, j, curStartPos, curGroupNum;
          curGroupNum = curData.startPosList.length;
          for (j = 0; j < curData.startPosList.length; j++) {
            curStartPos = curData.startPosList[j];
            if (0 == dataList.length) _this.view.flyByGolds(curStartPos, curData.targetPos, showGolds, null, function() {
              cb && cb();
            }); else {
              var golds = _this.view.flyGold(curStartPos, curData.targetPos, function() {}, function() {
                curGroupNum -= 1;
                if (curGroupNum < 1) {
                  var newData = dataList.splice(0, 1)[0];
                  newData && flyFunc(newData);
                }
              });
              showGolds = showGolds.concat(golds);
            }
          }
        };
        flyData = dataList.splice(0, 1)[0];
        flyData && flyFunc(flyData);
      };
      Mpnn_goldPoolCtrl.prototype.playGetGoldEffect = function(winLogicId) {
        var _this = this;
        this.dict_anis || (this.dict_anis = {});
        this.dict_anis[winLogicId] ? this.dict_anis[winLogicId].play() : MpnnLogic_1.default.getInstance().openGoldFalsh(function(curPrefab, curNode) {
          _this.dict_anis[winLogicId] = curNode.getComponent(cc.Animation);
          var curPos = _this.view.getPosByViewSeatId(winLogicId);
          var visibleSize = cc.director.getVisibleSize();
          curNode.position = cc.p(curPos.x + visibleSize.width / 2, curPos.y + visibleSize.height / 2);
          _this.dict_anis[winLogicId].play();
        });
      };
      Mpnn_goldPoolCtrl.prototype.chooseChip = function(startSeatId, targetPos, cb) {};
      __decorate([ property({
        type: cc.SpriteFrame,
        displayName: "goldImg"
      }) ], Mpnn_goldPoolCtrl.prototype, "sprite_goldImg", void 0);
      Mpnn_goldPoolCtrl = __decorate([ ccclass ], Mpnn_goldPoolCtrl);
      return Mpnn_goldPoolCtrl;
    }(BaseCtrl_1.default);
    exports.default = Mpnn_goldPoolCtrl;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Bull/BullPosMgr": "BullPosMgr",
    "../../../Plat/GameMgrs/GEventDef": "GEventDef",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../BullMgr/MpnnConst": "MpnnConst",
    "../BullMgr/MpnnLogic": "MpnnLogic"
  } ],
  Mpnn_maimaCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fb5a9GkZlFG5ae8hjhY7ugF", "Mpnn_maimaCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var MpnnConst_1 = require("../BullMgr/MpnnConst");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_bumai: null,
          maimaparents: null,
          btn_maima: null,
          Prefab_maimaCount: null
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.btn_bumai = ctrl.btn_bumai;
        this.ui.btn_maima = ctrl.maimaparents.children;
        this.ui.Prefab_maimaCount = ctrl.tankuang;
      };
      return View;
    }(BaseView_1.default);
    var MarqueeCtrl = function(_super) {
      __extends(MarqueeCtrl, _super);
      function MarqueeCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.maimaparents = null;
        _this.btn_bumai = null;
        _this.tankuang = null;
        return _this;
      }
      MarqueeCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      MarqueeCtrl.prototype.defineNetEvents = function() {
        this.n_events = {};
      };
      MarqueeCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          onMaimaclose: this.onMaimaClose
        };
        this.n_events[MpnnConst_1.default.clientEvent.onProcess] = this.onProcess;
      };
      MarqueeCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.btn_bumai, this.btn_bumai_cb, "不买按钮");
        var _loop_1 = function(i) {
          var CB = function() {
            this.btn_maima_cb(i);
          };
          this_1.connect(G_UiType.button, this_1.ui.btn_maima[i], CB, "点击买码");
        };
        var this_1 = this;
        for (var i = 0; i < this.ui.btn_maima.length; i++) _loop_1(i);
      };
      MarqueeCtrl.prototype.onProcess = function(msg) {
        switch (msg.process) {
         case MpnnConst_1.default.process.calculate:
          this.finish();
        }
      };
      MarqueeCtrl.prototype.btn_bumai_cb = function() {};
      MarqueeCtrl.prototype.btn_maima_cb = function(index) {
        var maimakuang = cc.instantiate(this.ui.Prefab_maimaCount);
        this.node.addChild(maimakuang);
        var pos = this.ui.btn_maima[index].getPosition();
        maimakuang.getComponent("Prefab_maimatankuangCtrl").setPos(cc.p(pos.x, pos.y + 120));
      };
      MarqueeCtrl.prototype.onMaimaClose = function() {
        this.finish();
      };
      __decorate([ property({
        tooltip: "买码按钮父节点",
        type: cc.Node
      }) ], MarqueeCtrl.prototype, "maimaparents", void 0);
      __decorate([ property({
        tooltip: "不买按钮",
        type: cc.Node
      }) ], MarqueeCtrl.prototype, "btn_bumai", void 0);
      __decorate([ property({
        tooltip: "买码弹框",
        type: cc.Prefab
      }) ], MarqueeCtrl.prototype, "tankuang", void 0);
      MarqueeCtrl = __decorate([ ccclass ], MarqueeCtrl);
      return MarqueeCtrl;
    }(BaseCtrl_1.default);
    exports.default = MarqueeCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../BullMgr/MpnnConst": "MpnnConst"
  } ],
  Mpnn_qiangzhuangCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2dad6frY1tD+KTAV0nF7c3Y", "Mpnn_qiangzhuangCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var MpnnLogic_1 = require("../BullMgr/MpnnLogic");
    var MpnnConst_1 = require("../BullMgr/MpnnConst");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var GRAB_STATE = cc.Enum({
      GRAB_NO: 0,
      GRAB_ONE: 1,
      GRAB_TWO: 2,
      GRAB_THREE: 3,
      GRAB_FOUR: 4
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.grab_state = null;
        _this.nograb_count = null;
        _this.nograb_count = 1;
        var fangkacfg = RoomMgr_1.default.getInstance().getFangKaCfg();
        _this.grab_state = Number(fangkacfg.v_grabbanker);
        console.log("Mpnn_qiangzhuangCtrl", _this.grab_state);
        return _this;
      }
      Model.prototype.getGrabState = function() {
        return this.grab_state;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_frame: null,
          node_qiangx: null,
          btn_buqiang: null,
          btn_yibei: null,
          btn_liangbei: null,
          btn_sanbei: null,
          btn_sibei: null
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_frame = ctrl.node_frame;
        this.ui.btn_buqiang = ctrl.btn_buqiang;
        this.ui.btn_yibei = ctrl.btn_yibei;
        this.ui.btn_liangbei = ctrl.btn_liangbei;
        this.ui.btn_sanbei = ctrl.btn_sanbei;
        this.ui.btn_sibei = ctrl.btn_sibei;
        this.ui.node_qiangx = ctrl.node_qiangx;
        this.refreshUi();
        this.refreshFrame();
      };
      View.prototype.refreshUi = function() {
        this.ui.btn_yibei.active = false;
        this.ui.btn_liangbei.active = false;
        this.ui.btn_sanbei.active = false;
        this.ui.btn_sibei.active = false;
        GRAB_STATE.GRAB_ONE <= this.model.getGrabState() && (this.ui.btn_yibei.active = true);
        GRAB_STATE.GRAB_TWO <= this.model.getGrabState() && (this.ui.btn_liangbei.active = true);
        GRAB_STATE.GRAB_THREE <= this.model.getGrabState() && (this.ui.btn_sanbei.active = true);
        GRAB_STATE.GRAB_FOUR <= this.model.getGrabState() && (this.ui.btn_sibei.active = true);
      };
      View.prototype.refreshFrame = function() {
        var count = this.model.getGrabState() + this.model.nograb_count;
        this.ui.node_frame.width = this.ui.btn_yibei.width * count;
      };
      View.prototype.showQiangX = function(Times) {
        this.ui.node_frame.active = false;
      };
      View.prototype.showOthersQiangX = function() {};
      return View;
    }(BaseView_1.default);
    var Mpnn_qiangzhuangCtrl = function(_super) {
      __extends(Mpnn_qiangzhuangCtrl, _super);
      function Mpnn_qiangzhuangCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_frame = null;
        _this.node_qiangx = null;
        _this.btn_buqiang = null;
        _this.btn_yibei = null;
        _this.btn_liangbei = null;
        _this.btn_sanbei = null;
        _this.btn_sibei = null;
        return _this;
      }
      Mpnn_qiangzhuangCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Mpnn_qiangzhuangCtrl.prototype.defineNetEvents = function() {
        this.n_events[MpnnConst_1.default.clientEvent.onProcess] = this.onProcess;
        this.n_events[MpnnConst_1.default.clientEvent.onChooseGrab] = this.onChooseGrab;
        this.n_events[MpnnConst_1.default.clientEvent.onConfirmGrab] = this.onConfirmGrab;
        this.n_events[MpnnConst_1.default.clientEvent.onSyncData] = this.onSyncData;
        this.n_events["connector.entryHandler.enterRoom"] = this.onEnterRoom;
      };
      Mpnn_qiangzhuangCtrl.prototype.defineGlobalEvents = function() {};
      Mpnn_qiangzhuangCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.btn_buqiang, this.btn_buqiang_cb, "点击不抢");
        GRAB_STATE.GRAB_ONE <= this.model.getGrabState() && this.connect(G_UiType.button, this.ui.btn_yibei, this.btn_yibei_cb, "点击一倍");
        GRAB_STATE.GRAB_TWO <= this.model.getGrabState() && this.connect(G_UiType.button, this.ui.btn_liangbei, this.btn_liangbei_cb, "点击两倍");
        GRAB_STATE.GRAB_THREE <= this.model.getGrabState() && this.connect(G_UiType.button, this.ui.btn_sanbei, this.btn_sanbei_cb, "点击三倍");
        GRAB_STATE.GRAB_FOUR <= this.model.getGrabState() && this.connect(G_UiType.button, this.ui.btn_sibei, this.btn_sibei_cb, "点击四倍");
      };
      Mpnn_qiangzhuangCtrl.prototype.btn_buqiang_cb = function() {
        MpnnLogic_1.default.getInstance().sendChooseGrab(GRAB_STATE.GRAB_NO);
        this.view.showQiangX(GRAB_STATE.GRAB_NO);
      };
      Mpnn_qiangzhuangCtrl.prototype.btn_yibei_cb = function() {
        MpnnLogic_1.default.getInstance().sendChooseGrab(GRAB_STATE.GRAB_ONE);
        this.view.showQiangX(GRAB_STATE.GRAB_ONE);
      };
      Mpnn_qiangzhuangCtrl.prototype.btn_liangbei_cb = function() {
        MpnnLogic_1.default.getInstance().sendChooseGrab(GRAB_STATE.GRAB_TWO);
        this.view.showQiangX(GRAB_STATE.GRAB_TWO);
      };
      Mpnn_qiangzhuangCtrl.prototype.btn_sanbei_cb = function() {
        MpnnLogic_1.default.getInstance().sendChooseGrab(GRAB_STATE.GRAB_THREE);
        this.view.showQiangX(GRAB_STATE.GRAB_THREE);
      };
      Mpnn_qiangzhuangCtrl.prototype.btn_sibei_cb = function() {
        MpnnLogic_1.default.getInstance().sendChooseGrab(GRAB_STATE.GRAB_FOUR);
        this.view.showQiangX(GRAB_STATE.GRAB_FOUR);
      };
      Mpnn_qiangzhuangCtrl.prototype.start = function() {};
      Mpnn_qiangzhuangCtrl.prototype.onProcess = function(msg) {
        switch (msg.process) {
         case MpnnConst_1.default.process.chooseChip:
          this.finish();
        }
      };
      Mpnn_qiangzhuangCtrl.prototype.onChooseGrab = function(msg) {};
      Mpnn_qiangzhuangCtrl.prototype.onSyncData = function(msg) {
        console.log("zheshiqiangzhuangyuzhitiduanxian", msg);
        msg.processType != MpnnConst_1.default.process.giveCards && this.finish();
      };
      Mpnn_qiangzhuangCtrl.prototype.onConfirmGrab = function() {
        this.finish();
      };
      Mpnn_qiangzhuangCtrl.prototype.onEnterRoom = function(msg) {
        console.log("onEnterRoom", msg);
        msg.gamestarted || this.finish();
      };
      __decorate([ property(cc.Node) ], Mpnn_qiangzhuangCtrl.prototype, "node_frame", void 0);
      __decorate([ property(cc.Node) ], Mpnn_qiangzhuangCtrl.prototype, "node_qiangx", void 0);
      __decorate([ property(cc.Node) ], Mpnn_qiangzhuangCtrl.prototype, "btn_buqiang", void 0);
      __decorate([ property(cc.Node) ], Mpnn_qiangzhuangCtrl.prototype, "btn_yibei", void 0);
      __decorate([ property(cc.Node) ], Mpnn_qiangzhuangCtrl.prototype, "btn_liangbei", void 0);
      __decorate([ property(cc.Node) ], Mpnn_qiangzhuangCtrl.prototype, "btn_sanbei", void 0);
      __decorate([ property(cc.Node) ], Mpnn_qiangzhuangCtrl.prototype, "btn_sibei", void 0);
      Mpnn_qiangzhuangCtrl = __decorate([ ccclass ], Mpnn_qiangzhuangCtrl);
      return Mpnn_qiangzhuangCtrl;
    }(BaseCtrl_1.default);
    exports.default = Mpnn_qiangzhuangCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../BullMgr/MpnnConst": "MpnnConst",
    "../BullMgr/MpnnLogic": "MpnnLogic"
  } ],
  Mpnn_roomrule: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ff089xe/N9FJ7UFEiwa7422", "Mpnn_roomrule");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var LocalStorage_1 = require("../../../Plat/Libs/LocalStorage");
    var RoomOptionCfg_1 = require("../../../Plat/CfgMgrs/RoomOptionCfg");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var BullConst = null;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.gamestart = 1;
        BullConst = RoomMgr_1.default.getInstance().getDef();
        return _this;
      }
      Model.prototype.initBGState = function() {
        this.bgState = LocalStorage_1.default.getInstance().getBullRoomBGCfg();
        if (!this.bgState) {
          this.bgState = 1;
          LocalStorage_1.default.getInstance().setBullRoomBGCfg(this.bgState);
        }
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          roundCount: null,
          difen: null,
          beishu: null,
          font_lanse: null,
          font_lvse: null,
          font_isstartlv: null,
          font_isstarlanse: null,
          mingpaizi: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.model.initBGState();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.roundCount = ctrl.roundCount;
        this.ui.difen = ctrl.difen;
        this.ui.beishu = ctrl.beishu;
        this.ui.mingpaizi = ctrl.mingpaizi;
        this.ui.font_isstarlanse = ctrl.font_isstarlanse;
        this.ui.font_isstartlv = ctrl.font_isstartlv;
        this.ui.font_lvse = ctrl.font_lvse;
        this.ui.font_lanse = ctrl.font_lanse;
        this.model.initBGState();
        this.updateCfg();
      };
      View.prototype.updateisstart = function() {
        if (2 == this.model.gamestart) {
          var state = this.model.bgState;
          if (1 == state) {
            this.ui.roundCount.font = this.ui.font_isstartlv;
            this.ui.difen.font = this.ui.font_isstartlv;
            this.ui.beishu.font = this.ui.font_isstartlv;
            this.ui.mingpaizi.font = this.ui.font_isstartlv;
          } else if (2 == state) {
            this.ui.roundCount.font = this.ui.font_isstarlanse;
            this.ui.difen.font = this.ui.font_isstarlanse;
            this.ui.beishu.font = this.ui.font_isstarlanse;
            this.ui.mingpaizi.font = this.ui.font_isstarlanse;
          }
        }
      };
      View.prototype.updatenostart = function() {
        if (1 == this.model.gamestart) {
          var state = this.model.bgState;
          if (1 == state) {
            this.ui.roundCount.font = this.ui.font_lvse;
            this.ui.difen.font = this.ui.font_lvse;
            this.ui.beishu.font = this.ui.font_lvse;
            this.ui.mingpaizi.font = this.ui.font_lvse;
          } else if (2 == state) {
            this.ui.roundCount.font = this.ui.font_lanse;
            this.ui.difen.font = this.ui.font_lanse;
            this.ui.beishu.font = this.ui.font_lanse;
            this.ui.mingpaizi.font = this.ui.font_lanse;
          }
        }
      };
      View.prototype.updateCfg = function() {
        var fangkacfg = RoomMgr_1.default.getInstance().getFangKaCfg();
        var beishu = RoomOptionCfg_1.default.getInstance().getGameRoomOption(19);
        var content = beishu["content"]["v_settleRule"][fangkacfg.v_settleRule];
        var difen = beishu["content"]["v_minChip"][fangkacfg.v_minChip];
        content = content.replace(/\*/g, "X");
        this.ui.beishu.string = content;
        this.ui.roundCount.string = fangkacfg.v_roundcount + "局";
        0 == fangkacfg.v_wanglaiLimit ? this.ui.difen.string = difen : 1 == fangkacfg.v_wanglaiLimit && (this.ui.difen.string = difen + "   王癞玩法");
      };
      return View;
    }(BaseView_1.default);
    var Prefab_bull_SeatCtrl = function(_super) {
      __extends(Prefab_bull_SeatCtrl, _super);
      function Prefab_bull_SeatCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.roundCount = null;
        _this.difen = null;
        _this.beishu = null;
        _this.mingpaizi = null;
        _this.font_lvse = null;
        _this.font_lanse = null;
        _this.font_isstartlv = null;
        _this.font_isstarlanse = null;
        return _this;
      }
      Prefab_bull_SeatCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_bull_SeatCtrl.prototype.defineNetEvents = function() {
        this.n_events["connector.entryHandler.enterRoom"] = this.onEnterRoom;
        this.n_events["onProcess_mpnn"] = this.onProcess;
        this.n_events[BullConst.clientEvent.onStart] = this.onStart;
      };
      Prefab_bull_SeatCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          setAllTableLaebl: this.setAllTableLaebl
        };
      };
      Prefab_bull_SeatCtrl.prototype.connectUi = function() {};
      Prefab_bull_SeatCtrl.prototype.start = function() {};
      Prefab_bull_SeatCtrl.prototype.onProcess = function(msg) {
        if (5 == msg.process) {
          this.model.gamestart = 1;
          this.view.updatenostart();
        }
      };
      Prefab_bull_SeatCtrl.prototype.onStart = function(msg) {
        console.log("这是开始游戏的消息=======", msg);
        this.model.gamestart = 2;
        this.view.updateisstart();
      };
      Prefab_bull_SeatCtrl.prototype.onEnterRoom = function(msg) {
        var gamestart = msg.gamestarted;
        if (gamestart) {
          console.log("变暗房间参数");
          this.model.gamestart = 2;
          this.view.updateisstart();
        } else if (!gamestart) {
          console.log("变亮房间参数");
          this.model.gamestart = 1;
          this.view.updatenostart();
        }
      };
      Prefab_bull_SeatCtrl.prototype.setAllTableLaebl = function() {
        this.model.initBGState();
        this.view.updatenostart();
        this.view.updateisstart();
      };
      __decorate([ property(cc.Label) ], Prefab_bull_SeatCtrl.prototype, "roundCount", void 0);
      __decorate([ property(cc.Label) ], Prefab_bull_SeatCtrl.prototype, "difen", void 0);
      __decorate([ property(cc.Label) ], Prefab_bull_SeatCtrl.prototype, "beishu", void 0);
      __decorate([ property(cc.Label) ], Prefab_bull_SeatCtrl.prototype, "mingpaizi", void 0);
      __decorate([ property(cc.Font) ], Prefab_bull_SeatCtrl.prototype, "font_lvse", void 0);
      __decorate([ property(cc.Font) ], Prefab_bull_SeatCtrl.prototype, "font_lanse", void 0);
      __decorate([ property(cc.Font) ], Prefab_bull_SeatCtrl.prototype, "font_isstartlv", void 0);
      __decorate([ property(cc.Font) ], Prefab_bull_SeatCtrl.prototype, "font_isstarlanse", void 0);
      Prefab_bull_SeatCtrl = __decorate([ ccclass ], Prefab_bull_SeatCtrl);
      return Prefab_bull_SeatCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_bull_SeatCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/CfgMgrs/RoomOptionCfg": "RoomOptionCfg",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../../../Plat/Libs/LocalStorage": "LocalStorage"
  } ],
  Mpnn_seatCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "69188zvNWBHn6FwTCVW5GZA", "Mpnn_seatCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var UiMgr_1 = require("../../../Plat/GameMgrs/UiMgr");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var UserMgr_1 = require("../../../Plat/GameMgrs/UserMgr");
    var MpnnLogic_1 = require("../BullMgr/MpnnLogic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var BullConst = null;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.viewSeatId = null;
        _this.logicseatid = null;
        _this.uid = null;
        _this.playerCtrl = null;
        _this.userinfo = null;
        BullConst = RoomMgr_1.default.getInstance().getDef();
        return _this;
      }
      Model.prototype.clear = function() {
        this.uid = null;
        this.logicseatid = null;
        this.userinfo = null;
      };
      Model.prototype.updateLogicId = function() {
        this.logicseatid = RoomMgr_1.default.getInstance().getLogicSeatId(this.viewSeatId);
        this.playerCtrl = MpnnLogic_1.default.getInstance().getPlayerInfo(this.logicseatid);
        this.uid = RoomMgr_1.default.getInstance().users[this.logicseatid];
      };
      Model.prototype.updateUserInfo = function() {
        this.userinfo = UserMgr_1.default.getInstance().getUserById(this.uid);
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_img_head: null,
          lbl_name: null,
          lbl_money: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_img_head = ctrl.node_img_head;
        this.ui.lbl_name = ctrl.lbl_name;
        this.ui.lbl_money = ctrl.lbl_money;
      };
      View.prototype.clear = function() {
        this.resetHead();
        this.updateMoney();
        this._updateName();
      };
      View.prototype.updateUserInfo = function() {
        this._updateHead();
        this.updateMoney();
        this._updateName();
      };
      View.prototype.updateMoney = function() {
        this.model.userinfo ? this.ui.lbl_money.string = this.model.userinfo.coin : this.ui.lbl_money.string = "";
      };
      View.prototype._updateHead = function() {
        this.ui.node_img_head._defaultHead || (this.ui.node_img_head._defaultHead = this.ui.node_img_head.getComponent(cc.Sprite).spriteFrame);
        UiMgr_1.default.getInstance().setUserHead(this.ui.node_img_head, this.model.userinfo.headid, this.model.userinfo.headurl);
      };
      View.prototype._updateName = function() {
        this.model.userinfo ? this.ui.lbl_name.string = this.model.userinfo.nickname : this.ui.lbl_name.string = "";
      };
      View.prototype.resetHead = function() {
        this.ui.node_img_head._defaultHead && (this.ui.node_img_head.getComponent(cc.Sprite).spriteFrame = this.ui.node_img_head._defaultHead);
      };
      return View;
    }(BaseView_1.default);
    var Prefab_bull_SeatCtrl = function(_super) {
      __extends(Prefab_bull_SeatCtrl, _super);
      function Prefab_bull_SeatCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.node_img_head = null;
        _this.lbl_name = null;
        _this.lbl_money = null;
        return _this;
      }
      Prefab_bull_SeatCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.model.viewSeatId = this.node.parent.children.indexOf(this.node);
      };
      Prefab_bull_SeatCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onEnterRoom: this.onEnterRoom,
          onLeaveRoom: this.onLeaveRoom,
          "http.reqRoomUsers": this.http_reqRoomUsers,
          "http.reqUsers": this.http_reqUsers
        };
        this.n_events[BullConst.clientEvent.onProcess] = this.onProcess;
      };
      Prefab_bull_SeatCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          usersUpdated: this.usersUpdated
        };
      };
      Prefab_bull_SeatCtrl.prototype.connectUi = function() {};
      Prefab_bull_SeatCtrl.prototype.start = function() {};
      Prefab_bull_SeatCtrl.prototype.onEnterRoom = function(msg) {
        if (this.model.logicseatid != msg.seatid) return;
        this.model.uid = msg.user;
      };
      Prefab_bull_SeatCtrl.prototype.onLeaveRoom = function(msg) {
        if (this.model.logicseatid == msg.seatid) {
          this.model.clear();
          this.view.clear();
        }
      };
      Prefab_bull_SeatCtrl.prototype.onProcess = function(msg) {
        msg.process == BullConst.process.start || msg.process == BullConst.process.settle;
      };
      Prefab_bull_SeatCtrl.prototype.http_reqRoomUsers = function(msg) {
        console.log("http_reqRoomUsers== ", msg);
        this.model.updateLogicId();
        this.view.clear();
      };
      Prefab_bull_SeatCtrl.prototype.http_reqUsers = function(msg) {
        console.log("http_reqUsers== ", msg);
        if (null == this.model.uid) return;
        this.model.updateUserInfo();
        this.view.updateUserInfo();
        var myViewId = RoomMgr_1.default.getInstance().getViewSeatId(RoomMgr_1.default.getInstance().getMySeatId());
      };
      Prefab_bull_SeatCtrl.prototype.usersUpdated = function() {
        this.model.updateLogicId();
        this.view.clear();
      };
      Prefab_bull_SeatCtrl.prototype.initViewSeatId = function(viewSeatId) {
        this.model.viewSeatId = viewSeatId;
      };
      __decorate([ property({
        type: cc.Node,
        displayName: "headImg"
      }) ], Prefab_bull_SeatCtrl.prototype, "node_img_head", void 0);
      __decorate([ property({
        type: cc.Label,
        displayName: "nameLabel"
      }) ], Prefab_bull_SeatCtrl.prototype, "lbl_name", void 0);
      __decorate([ property({
        type: cc.Label,
        displayName: "moneyLabel"
      }) ], Prefab_bull_SeatCtrl.prototype, "lbl_money", void 0);
      Prefab_bull_SeatCtrl = __decorate([ ccclass ], Prefab_bull_SeatCtrl);
      return Prefab_bull_SeatCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_bull_SeatCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/GameMgrs/UiMgr": "UiMgr",
    "../../../Plat/GameMgrs/UserMgr": "UserMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../BullMgr/MpnnLogic": "MpnnLogic"
  } ],
  Mpnn_settle_openDetailCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2b156O7/6VJTJ/c6YkDKX3e", "Mpnn_settle_openDetailCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var BunchInfoMgr_1 = require("../../../Plat/GameMgrs/BunchInfoMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      Model.prototype.updateInfo = function() {
        var bunchInfo = BunchInfoMgr_1.default.getInstance().getBunchInfo();
        this.roomRule = bunchInfo.roomValue;
        this.maima_kaiguan = this.roomRule.v_playerbuyLimit;
        var meijuDict = bunchInfo.meiju[this.curRound][1];
        var mySeatId = BunchInfoMgr_1.default.getInstance().getMyLogicSeatId();
        console.log("this.roomRule.v_playerbuyLimit;= ", this.roomRule.v_playerbuyLimit);
        console.log("Mpnn_settle_openDetailCtrl meiju info= ", meijuDict);
        console.log("Mpnn_settle_openDetailCtrl bunchInfo= ", bunchInfo);
        var curSeatId;
        curSeatId = 0 == this.viewIndex ? mySeatId : this.viewIndex == mySeatId ? 0 : this.viewIndex;
        this.curInfo = {};
        console.log("updateInfo 111", meijuDict);
        this.curInfo.handCards = meijuDict["handCards"][curSeatId];
        this.curInfo.resultType = meijuDict["resultType"][curSeatId];
        this.curInfo.chipValue = meijuDict["chipValue"][curSeatId];
        this.curInfo.qiangzhuangtimes = meijuDict["grabRate"][curSeatId];
        console.log("updateInfo 222", this.curInfo);
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_pokers: null,
          sprite_result: null,
          lbl_score: null,
          lab_bumai: null,
          img_zhuang: null,
          node_maima: null,
          node_bq: null,
          node_qiangx: null,
          node_score: null,
          img_FSzhuang: null,
          maima_kaiguan: null,
          lab_QZbeishu: null,
          lab_playername: null,
          lab_maimanum: null,
          atlas_result: null,
          atlas_cards: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_pokers = ctrl.node_pokers;
        this.ui.sprite_result = ctrl.sprite_result;
        this.ui.maima_kaiguan = ctrl.maima_kaiguan;
        this.ui.lbl_score = ctrl.lbl_score;
        this.ui.lab_bumai = ctrl.lbl_bumai;
        this.ui.lab_QZbeishu = ctrl.lab_QZbeishu;
        this.ui.img_zhuang = ctrl.img_zhuang;
        this.ui.img_FSzhuang = ctrl.img_FSzhuang;
        this.ui.atlas_result = ctrl.atlas_result;
        this.ui.atlas_cards = ctrl.atlas_cards;
        this.ui.node_maima = ctrl.node_maima;
        this.ui.node_bq = ctrl.node_bq;
        this.ui.node_qiangx = ctrl.node_qiangx;
        this.ui.node_score = ctrl.node_score;
        this.ui.lab_maimanum = ctrl.lab_maimanum;
        this.ui.lab_playername = ctrl.lab_playername;
      };
      View.prototype.updateInfo = function() {
        if (!this.model.curInfo.handCards) return;
        this.setPokerData();
        this.setResult();
        this.setChipValue();
        this.setMaimaData();
        this.setQZhuangTimes();
      };
      View.prototype.setPokerData = function() {
        var dataList = this.model.curInfo.handCards;
        var pokers = this.ui.node_pokers.children;
        for (var i = 0; i < dataList.length; i++) pokers[i].getComponent(cc.Sprite).spriteFrame = this.ui.atlas_cards.getSpriteFrame("bull_" + this.getSixValue(dataList[i]));
      };
      View.prototype.setResult = function() {
        var resultValue = this.model.curInfo.resultType;
        this.ui.sprite_result.spriteFrame = this.ui.atlas_result.getSpriteFrame("bull_result_" + resultValue);
      };
      View.prototype.setQZhuangTimes = function() {
        var QZtimes = this.model.curInfo.qiangzhuangtimes;
        if (0 == QZtimes) {
          this.ui.node_bq.active = true;
          this.ui.node_qiangx.active = false;
        } else {
          this.ui.node_bq.active = false;
          this.ui.node_qiangx.active = true;
          this.ui.lab_QZbeishu.string = QZtimes;
        }
      };
      View.prototype.setChipValue = function() {
        var chipValue = this.model.curInfo.chipValue;
        if (0 != chipValue) {
          this.ui.img_FSzhuang.active = false;
          this.ui.node_score.active = true;
          this.ui.lbl_score.string = chipValue;
        } else {
          this.ui.img_FSzhuang.active = true;
          this.ui.node_score.active = false;
        }
      };
      View.prototype.setMaimaData = function() {
        if (this.model.maima_kaiguan) {
          this.ui.maima_kaiguan.active = true;
          var maimaValue = this.model.curInfo.maimaValue;
          if (-1 == maimaValue) {
            this.ui.img_zhuang.node.active = true;
            this.ui.lab_bumai.node.active = false;
            this.ui.node_maima.active = false;
          } else if (0 == maimaValue) {
            this.ui.img_zhuang.node.active = false;
            this.ui.lab_bumai.node.active = true;
            this.ui.node_maima.active = false;
          } else {
            this.ui.img_zhuang.node.active = false;
            this.ui.lab_bumai.node.active = false;
            this.ui.node_maima.active = true;
          }
        } else this.ui.maima_kaiguan.active = false;
      };
      View.prototype.getSixValue = function(logicNum) {
        logicNum = parseInt(logicNum);
        var str = logicNum < 14 ? "0x0" : "0x";
        return str + logicNum.toString(16);
      };
      return View;
    }(BaseView_1.default);
    var Mpnn_settle_openDetailCtrl = function(_super) {
      __extends(Mpnn_settle_openDetailCtrl, _super);
      function Mpnn_settle_openDetailCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.node_pokers = null;
        _this.sprite_result = null;
        _this.img_zhuang = null;
        _this.img_FSzhuang = null;
        _this.lbl_score = null;
        _this.lbl_bumai = null;
        _this.lab_QZbeishu = null;
        _this.node_maima = null;
        _this.node_score = null;
        _this.node_bq = null;
        _this.node_qiangx = null;
        _this.maima_kaiguan = null;
        _this.lab_playername = null;
        _this.lab_maimanum = null;
        _this.atlas_result = null;
        _this.atlas_cards = null;
        return _this;
      }
      Mpnn_settle_openDetailCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.model.viewIndex = this.node.parent.parent.children.indexOf(this.node.parent);
      };
      Mpnn_settle_openDetailCtrl.prototype.defineNetEvents = function() {};
      Mpnn_settle_openDetailCtrl.prototype.defineGlobalEvents = function() {};
      Mpnn_settle_openDetailCtrl.prototype.connectUi = function() {};
      Mpnn_settle_openDetailCtrl.prototype.start = function() {
        this.model.curRound = this.node.parent.parent.parent["_curRound"];
        this.model.updateInfo();
        this.view.updateInfo();
      };
      Mpnn_settle_openDetailCtrl.prototype.refreshUi = function() {};
      __decorate([ property(cc.Node) ], Mpnn_settle_openDetailCtrl.prototype, "node_pokers", void 0);
      __decorate([ property(cc.Sprite) ], Mpnn_settle_openDetailCtrl.prototype, "sprite_result", void 0);
      __decorate([ property(cc.Sprite) ], Mpnn_settle_openDetailCtrl.prototype, "img_zhuang", void 0);
      __decorate([ property(cc.Node) ], Mpnn_settle_openDetailCtrl.prototype, "img_FSzhuang", void 0);
      __decorate([ property(cc.Label) ], Mpnn_settle_openDetailCtrl.prototype, "lbl_score", void 0);
      __decorate([ property(cc.Label) ], Mpnn_settle_openDetailCtrl.prototype, "lbl_bumai", void 0);
      __decorate([ property(cc.Label) ], Mpnn_settle_openDetailCtrl.prototype, "lab_QZbeishu", void 0);
      __decorate([ property(cc.Node) ], Mpnn_settle_openDetailCtrl.prototype, "node_maima", void 0);
      __decorate([ property(cc.Node) ], Mpnn_settle_openDetailCtrl.prototype, "node_score", void 0);
      __decorate([ property(cc.Node) ], Mpnn_settle_openDetailCtrl.prototype, "node_bq", void 0);
      __decorate([ property(cc.Node) ], Mpnn_settle_openDetailCtrl.prototype, "node_qiangx", void 0);
      __decorate([ property(cc.Node) ], Mpnn_settle_openDetailCtrl.prototype, "maima_kaiguan", void 0);
      __decorate([ property(cc.Label) ], Mpnn_settle_openDetailCtrl.prototype, "lab_playername", void 0);
      __decorate([ property(cc.Label) ], Mpnn_settle_openDetailCtrl.prototype, "lab_maimanum", void 0);
      __decorate([ property(cc.SpriteAtlas) ], Mpnn_settle_openDetailCtrl.prototype, "atlas_result", void 0);
      __decorate([ property(cc.SpriteAtlas) ], Mpnn_settle_openDetailCtrl.prototype, "atlas_cards", void 0);
      Mpnn_settle_openDetailCtrl = __decorate([ ccclass ], Mpnn_settle_openDetailCtrl);
      return Mpnn_settle_openDetailCtrl;
    }(BaseCtrl_1.default);
    exports.default = Mpnn_settle_openDetailCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView"
  } ],
  Mpnn_tipClock: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b1da55OZ2ZHSri9dp7TIR5q", "Mpnn_tipClock");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var MpnnLogic_1 = require("../BullMgr/MpnnLogic");
    var MpnnConst_1 = require("../BullMgr/MpnnConst");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var GEventDef_1 = require("../../../Plat/GameMgrs/GEventDef");
    var UserMgr_1 = require("../../../Plat/GameMgrs/UserMgr");
    var GameAudioCfg_1 = require("../../../Plat/CfgMgrs/GameAudioCfg");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var TipStr = {
      idle: "旁观中",
      waitStart: "等待房主%s开始游戏",
      waitQiangZhuang: "抢庄中:%s",
      waitChooseChip: "闲家下注:%s",
      thinking: "查看手牌:%s",
      waitTanpai: "等待玩家摊牌:%s",
      waitRestart: "等待重新开始",
      waitOtherPrepare: "等待其它玩家准备"
    };
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      Model.prototype.getCurWaitTime = function() {
        return MpnnLogic_1.default.getInstance().getCurWaitTime();
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          lbl_info: null,
          sprite_bg: null
        };
        _this.node = null;
        _this.intervalID = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.lbl_info = ctrl.lbl_info;
        this.ui.sprite_bg = ctrl.sprite_bg;
      };
      View.prototype.setInfo = function(info) {
        this.node.active = true;
        this.ui.lbl_info.string = info;
        this.ui.sprite_bg.node.width = this.ui.lbl_info.fontSize * (this.ui.lbl_info.string.length + 4);
      };
      View.prototype.startCountDown = function(curStr) {
        void 0 === curStr && (curStr = "%s");
        this.clearCountDown();
        this.node.active = true;
        this.countDownStr = curStr;
        var time = this.model.getCurWaitTime();
        console.log("倒计时", time);
        time > 0 ? this.showCountDown(time) : this.node.active = false;
      };
      View.prototype.hideTipInfo = function() {
        this.node.active = false;
      };
      View.prototype.clearCountDown = function() {
        clearInterval(this.intervalID);
        this.intervalID = null;
        this.hideTipInfo();
      };
      View.prototype.showCountDown = function(time) {
        var _this = this;
        var curTime = time;
        this.ui.lbl_info.string = this.formatStr(this.countDownStr, curTime);
        this.ui.sprite_bg.node.width = this.ui.lbl_info.fontSize * (this.ui.lbl_info.string.length + 4);
        this.intervalID = setInterval(function() {
          if (curTime > 0) {
            curTime -= 1;
            curTime <= 3 && GameAudioCfg_1.default.getInstance().playGameProcessAudio("Clock", false);
            _this.ui.lbl_info.string = _this.formatStr(_this.countDownStr, curTime);
          } else _this.clearCountDown();
        }, 1e3);
      };
      View.prototype.formatStr = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
        var t = args, e = t.length;
        if (e < 1) return "";
        var i = /(%d)|(%s)/, n = 1, r = t[0], s = "string" == typeof r && i.test(r);
        if (s) for (var o = /%s/; n < e; ++n) {
          var a = t[n], c = "number" == typeof a ? i : o;
          c.test(r) ? r = r.replace(c, a) : r += " " + a;
        } else if (e > 1) for (;n < e; ++n) r += " " + t[n]; else r = "" + r;
        return r;
      };
      return View;
    }(BaseView_1.default);
    var Mpnn_tipClock = function(_super) {
      __extends(Mpnn_tipClock, _super);
      function Mpnn_tipClock() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.lbl_info = null;
        _this.sprite_bg = null;
        return _this;
      }
      Mpnn_tipClock.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Mpnn_tipClock.prototype.defineNetEvents = function() {
        this.n_events = {};
        this.n_events["connector.entryHandler.enterRoom"] = this.onEnterRoom;
        this.n_events[MpnnConst_1.default.clientEvent.onProcess] = this.onProcess;
        this.n_events["onPrepare"] = this.onPrepare;
        this.n_events[MpnnConst_1.default.clientEvent.onTanPai] = this.onTanPai;
        this.n_events[MpnnConst_1.default.clientEvent.onSyncData] = this.onSyncData;
        this.n_events[MpnnConst_1.default.clientEvent.onMidEnter] = this.onMidEnter;
        this.n_events["http.reqSettle"] = this.onReqSettle;
      };
      Mpnn_tipClock.prototype.defineGlobalEvents = function() {
        this.g_events[GEventDef_1.default.bull_giveCardEnd] = this.onGiveCardEnd;
        this.g_events[GEventDef_1.default.usersUpdated] = this.usersUpdated;
        this.g_events["showBetTip"] = this.showBetTip;
      };
      Mpnn_tipClock.prototype.connectUi = function() {};
      Mpnn_tipClock.prototype.start = function() {
        this.node.active = false;
      };
      Mpnn_tipClock.prototype.onReqSettle = function(msg) {
        RoomMgr_1.default.getInstance().isBunchFinish() && (this.node.active = false);
      };
      Mpnn_tipClock.prototype.onEnterRoom = function(msg) {
        console.log("这是替换提示的消息", msg);
        var bwatch = msg.bwatch;
        var gamestarted = msg.gamestarted;
        msg.bunchInfo.roundIndex > 0 && !bwatch && !gamestarted && this.view.setInfo(TipStr.waitRestart);
      };
      Mpnn_tipClock.prototype.onProcess = function(msg) {
        var _this = this;
        switch (msg.process) {
         case MpnnConst_1.default.process.start:
          clearTimeout(this.waitId);
          this.waitId = null;
          break;

         case MpnnConst_1.default.process.chooseChip:
          this.view.hideTipInfo();
          this.waitId = setTimeout(function() {
            _this.view.startCountDown(TipStr.waitChooseChip);
          }, 300);
          break;

         case MpnnConst_1.default.process.giveCards:
          this.view.hideTipInfo();
          this.view.startCountDown(TipStr.waitQiangZhuang);
          break;

         case MpnnConst_1.default.process.settle:
          this.view.clearCountDown();
          this.view.setInfo(TipStr.waitRestart);
        }
      };
      Mpnn_tipClock.prototype.onPrepare = function(msg) {
        if (msg.seatid == MpnnLogic_1.default.getInstance().getMyLogicSeatId()) {
          var curStr = void 0;
          if (RoomMgr_1.default.getInstance().isFirstRound()) {
            var uid = RoomMgr_1.default.getInstance().getRoomOwner();
            curStr = this.view.formatStr(TipStr.waitStart, UserMgr_1.default.getInstance().getUserById(uid).nickname);
          } else curStr = TipStr.waitOtherPrepare;
          this.view.setInfo(curStr);
        }
      };
      Mpnn_tipClock.prototype.onTanPai = function(msg) {
        msg.seatId == MpnnLogic_1.default.getInstance().getMyLogicSeatId() && this.view.startCountDown(TipStr.waitTanpai);
      };
      Mpnn_tipClock.prototype.onSyncData = function(msg) {
        switch (msg.processType) {
         case MpnnConst_1.default.process.giveCards:
          this.view.startCountDown(TipStr.waitQiangZhuang);
          break;

         case MpnnConst_1.default.process.chooseChip:
          this.view.hideTipInfo();
          this.view.startCountDown(TipStr.waitChooseChip);
          break;

         case MpnnConst_1.default.process.calculate:
          this.view.startCountDown(TipStr.thinking);
          break;

         case MpnnConst_1.default.process.settle:
          this.view.clearCountDown();
          this.view.setInfo(TipStr.waitRestart);
        }
      };
      Mpnn_tipClock.prototype.onMidEnter = function(msg) {
        this.view.setInfo(TipStr.idle);
        msg.enterSeatId == RoomMgr_1.default.getInstance().getMySeatId() && msg.curProcess == MpnnConst_1.default.process.giveCards && this.view.startCountDown(TipStr.thinking);
      };
      Mpnn_tipClock.prototype.showBetTip = function() {
        this.view.startCountDown(TipStr.waitChooseChip);
      };
      Mpnn_tipClock.prototype.onGiveCardEnd = function() {
        this.view.startCountDown(TipStr.thinking);
      };
      Mpnn_tipClock.prototype.usersUpdated = function() {
        var room = RoomMgr_1.default.getInstance();
        var myLogicSeatId = room.getMySeatId();
        if (room.preparemap[myLogicSeatId]) {
          var curStr = void 0;
          if (RoomMgr_1.default.getInstance().isFirstRound()) {
            var uid = RoomMgr_1.default.getInstance().getRoomOwner();
            curStr = this.view.formatStr(TipStr.waitStart, "");
          } else curStr = TipStr.waitOtherPrepare;
          this.view.setInfo(curStr);
        }
      };
      Mpnn_tipClock.prototype.onDestroy = function() {
        clearInterval(this.view.intervalID);
        clearTimeout(this.waitId);
        this.view.intervalID = null;
        this.waitId = null;
        _super.prototype.onDestroy.call(this);
      };
      __decorate([ property(cc.Label) ], Mpnn_tipClock.prototype, "lbl_info", void 0);
      __decorate([ property(cc.Sprite) ], Mpnn_tipClock.prototype, "sprite_bg", void 0);
      Mpnn_tipClock = __decorate([ ccclass ], Mpnn_tipClock);
      return Mpnn_tipClock;
    }(BaseCtrl_1.default);
    exports.default = Mpnn_tipClock;
    cc._RF.pop();
  }, {
    "../../../Plat/CfgMgrs/GameAudioCfg": "GameAudioCfg",
    "../../../Plat/GameMgrs/GEventDef": "GEventDef",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/GameMgrs/UserMgr": "UserMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../BullMgr/MpnnConst": "MpnnConst",
    "../BullMgr/MpnnLogic": "MpnnLogic"
  } ],
  Mpnn_totalSettleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3b61aOjKMZA+KByzbHF1BlK", "Mpnn_totalSettleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BunchInfoMgr_1 = require("../../../Plat/GameMgrs/BunchInfoMgr");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var SwitchMgr_1 = require("../../../Plat/GameMgrs/SwitchMgr");
    var LoginMgr_1 = require("../../../Plat/GameMgrs/LoginMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CONFIGS = {
      horizontalNum: 4,
      itemOffX: 0,
      itemOffY: 0,
      str_openNode: "_openContentNode",
      str_curRound: "_curRound",
      str_diyIndex: "_diyIndex"
    };
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.shareSwitch = null;
        _this.shareSwitch = SwitchMgr_1.default.getInstance().get_switch_performance_sharing();
        return _this;
      }
      Model.prototype.updateSwitch = function(msg) {
        this.shareSwitch = msg.cfg.switch_performance_sharing;
      };
      Model.prototype.updateInfo = function() {
        var bunchInfo = BunchInfoMgr_1.default.getInstance().getBunchInfo();
        var roomRule = bunchInfo.roomValue;
        this.mamai_kaiguan = roomRule.v_playerbuyLimit;
        if (bunchInfo) {
          console.log("bunchInfo= ", bunchInfo);
          var leijiInfo = bunchInfo.leiji;
          this.data_meiju = bunchInfo.meiju;
          this.peopleNum = 0;
          var userlist = BunchInfoMgr_1.default.getInstance().getMembelist();
          if (null != userlist && null != userlist.length) for (var i = 0; i < userlist.length; i++) userlist[i] && (this.peopleNum += 1);
          this.maxRounds = bunchInfo.meiju.length;
          console.log("peopleNum = ", this.peopleNum);
          console.log("maxRounds= ", this.maxRounds);
        } else cc.error("bullTotalSettle bunchInfo is empty");
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_btn_totalChoose: null,
          node_btn_exitRoom: null,
          node_btn_meijuChoose: null,
          node_btn_shared: null,
          scrollow_content: null,
          prefab_meijuDetail: null,
          prefab_openContent: null,
          prefab_playerDetail: null,
          prefab_rowContent: null,
          node_btn_close: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_btn_exitRoom = ctrl.node_btn_exitRoom;
        this.ui.node_btn_totalChoose = ctrl.node_btn_totalChoose;
        this.ui.node_btn_meijuChoose = ctrl.node_btn_meijuChoose;
        this.ui.node_btn_shared = ctrl.node_btn_shared;
        this.ui.scrollow_content = ctrl.scrollow_content;
        this.ui.prefab_playerDetail = ctrl.prefab_playerDetail;
        this.ui.prefab_openContent = ctrl.prefab_openContent;
        this.ui.prefab_meijuDetail = ctrl.prefab_meijuDetail;
        this.ui.prefab_rowContent = ctrl.prefab_rowContent;
        this.ui.node_btn_close = ctrl.node_btn_close;
        this.node_content = this.ui.scrollow_content.content;
        this.startPosX = -this.node_content.width / 2;
        this.showShareBtn();
      };
      View.prototype.chooseTotal = function() {
        if (this.isChooseTotal) return;
        var totalTopNode = this.ui.node_btn_totalChoose.children[1];
        var meijuTopNode = this.ui.node_btn_meijuChoose.children[1];
        totalTopNode.active = true;
        meijuTopNode.active = false;
        this.isChooseTotal = true;
        this.updateTotalContent();
      };
      View.prototype.chooseMeiju = function() {
        if (!this.isChooseTotal) return;
        var totalTopNode = this.ui.node_btn_totalChoose.children[1];
        var meijuTopNode = this.ui.node_btn_meijuChoose.children[1];
        totalTopNode.active = false;
        meijuTopNode.active = true;
        this.isChooseTotal = false;
        this.updateMeijuContent();
      };
      View.prototype.updateTotalContent = function() {
        this.clearContent();
        var allItemNum = this.model.peopleNum;
        this.curShowNum = 0;
        this.curHorizontalNum = 4;
        this.curPrefab = this.ui.prefab_playerDetail;
        for (var i = 0; i < allItemNum; i++) this.addItem();
      };
      View.prototype.updateMeijuContent = function() {
        this.clearContent();
        var allItemNum = this.model.maxRounds;
        this.curShowNum = 0;
        this.curHorizontalNum = 1;
        this.curPrefab = cc.instantiate(this.ui.prefab_rowContent);
        this.list_clickBtn = [];
        for (var i = 0; i < allItemNum; i++) this.list_clickBtn.push(this.addItem());
        ctrl.reconnectUi();
      };
      View.prototype.openItem = function(index) {
        if (!this.isChooseTotal) {
          console.log("openItem");
          this.addOpenDetail(index);
        }
      };
      View.prototype.clearContent = function() {
        var children = this.node_content.children;
        for (var i = 0; i < children.length; i++) children[i].destroy();
        this.node_content.removeAllChildren(true);
        this.curShowNum = 0;
        this.curPrefab = null;
        this.itemWidth = null;
        this.itemHeight = null;
      };
      View.prototype.delOpenDetail = function(targetNode) {
        var children = this.node_content.children;
        var downList = [];
        for (var i = 0; i < children.length; i++) children[i].y < targetNode.y && downList.push(children[i]);
        var delNode = targetNode[CONFIGS.str_openNode];
        var downH = delNode.height;
        this.node_content.removeChild(delNode, true);
        delNode.destroy();
        targetNode[CONFIGS.str_openNode] = null;
        for (var i = 0; i < downList.length; i++) downList[i].y += downH;
        this.resetRankContentSize();
      };
      View.prototype.setIsPlatShow = function() {
        var isPlat = BunchInfoMgr_1.default.getInstance().getplazzaFlag();
        this.ui.node_btn_exitRoom.active = !isPlat;
        this.ui.node_btn_close.active = isPlat;
        this.ui.node_btn_shared.x = isPlat ? 0 : -267;
      };
      View.prototype.addItem = function() {
        var curNode = cc.instantiate(this.curPrefab);
        curNode.parent = this.node_content;
        this.initSize(curNode);
        curNode.position = this.getItemPos();
        this.curShowNum += 1;
        this.resetGridContentSize();
        return curNode;
      };
      View.prototype.addOpenDetail = function(index) {
        var children = this.node_content.children;
        var itemNode = children[index];
        var downList = [];
        for (var i = 0; i < children.length; i++) children[i].y < itemNode.y && downList.push(children[i]);
        var addItemNode = cc.instantiate(this.ui.prefab_openContent);
        addItemNode.parent = this.node_content;
        addItemNode.position = cc.p(itemNode.x, itemNode.y - itemNode.height / 2 - addItemNode.height / 2);
        var downH = addItemNode.height;
        if (null != addItemNode.children[1].children[1]) if (this.model.mamai_kaiguan) {
          addItemNode.children[1].children[1].active = true;
          addItemNode.children[0].height = 230;
        } else {
          addItemNode.children[1].children[1].active = false;
          addItemNode.children[0].height = 145;
        }
        addItemNode[CONFIGS.str_curRound] = index;
        itemNode[CONFIGS.str_openNode] = addItemNode;
        var posConfigs = addItemNode.children[2].children;
        var detailNum = this.model.peopleNum;
        var myLogicSeatId = BunchInfoMgr_1.default.getInstance().getMyLogicSeatId();
        var curId;
        for (var i = 0; i < detailNum; i++) {
          curId = 0 == i ? myLogicSeatId : i == myLogicSeatId ? 0 : i;
          if (!this.model.data_meiju[index][1].handCards[curId]) continue;
          var detailNode = cc.instantiate(this.ui.prefab_meijuDetail);
          detailNode.parent = posConfigs[i];
          console.log("addOpenDetail 3", posConfigs[i].name);
        }
        for (var i = 0; i < downList.length; i++) downList[i].y -= downH;
        this.resetRankContentSize();
      };
      View.prototype.initSize = function(curNode) {
        if (!this.itemWidth) {
          this.itemWidth = curNode.width;
          this.itemHeight = curNode.height;
        }
      };
      View.prototype.getItemPos = function() {
        var curLineNum, rowNum, posX, posY;
        curLineNum = this.curShowNum % this.curHorizontalNum;
        rowNum = Math.floor(this.curShowNum / this.curHorizontalNum);
        posX = this.startPosX + curLineNum * (this.itemWidth + CONFIGS.itemOffX) + this.itemWidth / 2;
        posY = -rowNum * (this.itemHeight + CONFIGS.itemOffY) - this.itemHeight / 2;
        return cc.p(posX, posY);
      };
      View.prototype.getContentHeight = function() {
        var rowNum = Math.ceil(this.curShowNum / this.curHorizontalNum);
        return rowNum * (this.itemHeight + CONFIGS.itemOffY);
      };
      View.prototype.resetGridContentSize = function() {
        this.node_content.height = this.getContentHeight();
      };
      View.prototype.resetRankContentSize = function() {
        var children = this.node_content.children;
        var curH = 0;
        for (var i = 0; i < children.length; i++) curH += children[i].height;
        this.node_content.height = curH + 50;
      };
      View.prototype.showShareBtn = function() {
        this.ui.node_btn_shared.active = 1 == this.model.shareSwitch;
      };
      return View;
    }(BaseView_1.default);
    var Mpnn_totalSettleCtrl = function(_super) {
      __extends(Mpnn_totalSettleCtrl, _super);
      function Mpnn_totalSettleCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.node_btn_totalChoose = null;
        _this.node_btn_meijuChoose = null;
        _this.node_btn_shared = null;
        _this.node_btn_exitRoom = null;
        _this.node_btn_close = null;
        _this.scrollow_content = null;
        _this.prefab_playerDetail = null;
        _this.prefab_openContent = null;
        _this.prefab_meijuDetail = null;
        _this.prefab_rowContent = null;
        return _this;
      }
      Mpnn_totalSettleCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Mpnn_totalSettleCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqUsers": this.http_reqUsers,
          "http.reqGameSwitch": this.http_reqGameSwitch
        };
      };
      Mpnn_totalSettleCtrl.prototype.defineGlobalEvents = function() {};
      Mpnn_totalSettleCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.node_btn_exitRoom, this.node_btn_exitRoom_cb, "点击退出房间");
        this.connect(G_UiType.image, this.ui.node_btn_shared, this.node_btn_shared_cb, "点击分享");
        this.connect(G_UiType.image, this.ui.node_btn_meijuChoose, this.node_btn_meijuChoose_cb, "点击每局积分");
        this.connect(G_UiType.image, this.ui.node_btn_totalChoose, this.node_btn_totalChoose_cb, "点击总统计");
        this.connect(G_UiType.image, this.ui.node_btn_close, this.node_btn_close_cb, "点击总统计");
      };
      Mpnn_totalSettleCtrl.prototype.reconnectUi = function() {
        var curList = this.view.list_clickBtn;
        var curNode;
        for (var i = 0; i < curList.length; i++) {
          curNode = curList[i];
          curNode["_diyIndex"] = i;
          curNode.on(cc.Node.EventType.TOUCH_END, this.clickOpenDetail, this);
        }
      };
      Mpnn_totalSettleCtrl.prototype.start = function() {
        console.log("初始容器坐标", this.scrollow_content.content.position);
        this.view.setIsPlatShow();
        this.model.updateInfo();
        this.view.chooseTotal();
      };
      Mpnn_totalSettleCtrl.prototype.http_reqUsers = function() {
        this.model.updateInfo();
        this.view.chooseTotal();
      };
      Mpnn_totalSettleCtrl.prototype.http_reqGameSwitch = function(msg) {
        this.model.updateSwitch(msg);
        this.view.showShareBtn();
      };
      Mpnn_totalSettleCtrl.prototype.node_btn_close_cb = function() {
        BunchInfoMgr_1.default.getInstance().clear();
        this.finish();
      };
      Mpnn_totalSettleCtrl.prototype.node_btn_exitRoom_cb = function() {
        console.log("click node_btn_exitRoom_cb");
        BunchInfoMgr_1.default.getInstance().clear();
        LoginMgr_1.default.getInstance().disconnectGameSvr();
      };
      Mpnn_totalSettleCtrl.prototype.node_btn_shared_cb = function() {
        console.log("click node_btn_shared_cb");
        console.log("btn_share_cb");
        this.start_sub_module(G_MODULE.Shared);
      };
      Mpnn_totalSettleCtrl.prototype.node_btn_meijuChoose_cb = function() {
        console.log("click 点击了每局积分");
        this.view.chooseMeiju();
      };
      Mpnn_totalSettleCtrl.prototype.node_btn_totalChoose_cb = function() {
        console.log("click 点击了总统计");
        this.view.chooseTotal();
      };
      Mpnn_totalSettleCtrl.prototype.clickOpenDetail = function(event) {
        var curNode = event.target;
        curNode[CONFIGS.str_openNode] ? this.view.delOpenDetail(curNode) : this.view.openItem(curNode[CONFIGS.str_diyIndex]);
      };
      __decorate([ property(cc.Node) ], Mpnn_totalSettleCtrl.prototype, "node_btn_totalChoose", void 0);
      __decorate([ property(cc.Node) ], Mpnn_totalSettleCtrl.prototype, "node_btn_meijuChoose", void 0);
      __decorate([ property(cc.Node) ], Mpnn_totalSettleCtrl.prototype, "node_btn_shared", void 0);
      __decorate([ property(cc.Node) ], Mpnn_totalSettleCtrl.prototype, "node_btn_exitRoom", void 0);
      __decorate([ property(cc.Node) ], Mpnn_totalSettleCtrl.prototype, "node_btn_close", void 0);
      __decorate([ property(cc.ScrollView) ], Mpnn_totalSettleCtrl.prototype, "scrollow_content", void 0);
      __decorate([ property(cc.Prefab) ], Mpnn_totalSettleCtrl.prototype, "prefab_playerDetail", void 0);
      __decorate([ property(cc.Prefab) ], Mpnn_totalSettleCtrl.prototype, "prefab_openContent", void 0);
      __decorate([ property(cc.Prefab) ], Mpnn_totalSettleCtrl.prototype, "prefab_meijuDetail", void 0);
      __decorate([ property(cc.Prefab) ], Mpnn_totalSettleCtrl.prototype, "prefab_rowContent", void 0);
      Mpnn_totalSettleCtrl = __decorate([ ccclass ], Mpnn_totalSettleCtrl);
      return Mpnn_totalSettleCtrl;
    }(BaseCtrl_1.default);
    exports.default = Mpnn_totalSettleCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../../Plat/GameMgrs/LoginMgr": "LoginMgr",
    "../../../Plat/GameMgrs/SwitchMgr": "SwitchMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView"
  } ],
  MsgBoxCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c8dc1s8d39IUq29/tNF1SN+", "MsgBoxCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this._curTitle = null;
        _this._initTitle = null;
        _this._content = null;
        return _this;
      }
      Model.prototype.setTitle = function(title) {
        this._curTitle = title;
      };
      Model.prototype.getTitle = function() {
        return this._curTitle;
      };
      Model.prototype.setInitTitle = function(title) {
        this._initTitle = title;
      };
      Model.prototype.getInitTile = function() {
        return this._initTitle;
      };
      Model.prototype.setContent = function(content) {
        this._content = content;
      };
      Model.prototype.getContent = function() {
        return this._content;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          lab_content: null,
          lab_title: null,
          node_cancel: null,
          node_confirm: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.lab_content = ctrl.lab_content;
        this.ui.lab_title = ctrl.lab_title;
        this.ui.node_cancel = ctrl.node_cancel;
        this.ui.node_confirm = ctrl.node_confirm;
        this.model.setInitTitle(this.ui.lab_title.string);
      };
      View.prototype.updateContent = function() {
        this.ui.lab_content.string = this.model.getContent();
      };
      View.prototype.updateTitle = function() {
        this.ui.lab_title.string = this.model.getTitle();
      };
      View.prototype.setType = function(isSingle) {
        if (isSingle) {
          this.ui.node_cancel.active = false;
          this.ui.node_confirm["_firstX"] = this.ui.node_confirm.x;
          this.ui.node_confirm.x = 0;
        } else {
          this.ui.node_cancel.active = true;
          this.ui.node_confirm["_firstX"] && (this.ui.node_confirm.x = this.ui.node_confirm["_firstX"]);
        }
      };
      return View;
    }(BaseView_1.default);
    var Prefab_MsgBoxCtrl = function(_super) {
      __extends(Prefab_MsgBoxCtrl, _super);
      function Prefab_MsgBoxCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_cancel = null;
        _this.node_confirm = null;
        _this.lab_content = null;
        _this.lab_title = null;
        _this._cb_response = null;
        _this._cb_response_finish = null;
        return _this;
      }
      Prefab_MsgBoxCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.model = new Model();
        this.view = new View(this.model);
        this.ui = this.view.ui;
        this.defineNetEvents();
        this.defineGlobalEvents();
        this.regAllEvents();
        this.connectUi();
      };
      Prefab_MsgBoxCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onStartGame: this.onStartGame
        };
      };
      Prefab_MsgBoxCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_MsgBoxCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.node_cancel, this._onClick_cancel, "点击取消");
        this.connect(G_UiType.image, this.node_confirm, this._onClick_confirm, "点击确认");
      };
      Prefab_MsgBoxCtrl.prototype.start = function() {};
      Prefab_MsgBoxCtrl.prototype.showMsg = function(content, cb, isSingle, title, cb_finish) {
        this._cb_response = cb;
        this._cb_response_finish = cb_finish;
        this.view.setType(isSingle);
        title = title || this.model.getInitTile();
        this.model.setTitle(title);
        this.model.setContent(content);
        this.view.updateTitle();
        this.view.updateContent();
      };
      Prefab_MsgBoxCtrl.prototype._onClick_confirm = function() {
        console.log("_onClick_confirm");
        this._doConfirm();
      };
      Prefab_MsgBoxCtrl.prototype._onClick_cancel = function() {
        console.log("_onClick_cancel");
        this._doFinish();
      };
      Prefab_MsgBoxCtrl.prototype._doConfirm = function() {
        this._cb_response && this._cb_response();
        this.finish();
      };
      Prefab_MsgBoxCtrl.prototype._doFinish = function() {
        this._cb_response_finish && this._cb_response_finish();
        this.finish();
      };
      Prefab_MsgBoxCtrl.prototype.onStartGame = function() {
        this.finish();
      };
      __decorate([ property(cc.Node) ], Prefab_MsgBoxCtrl.prototype, "node_cancel", void 0);
      __decorate([ property(cc.Node) ], Prefab_MsgBoxCtrl.prototype, "node_confirm", void 0);
      __decorate([ property(cc.Label) ], Prefab_MsgBoxCtrl.prototype, "lab_content", void 0);
      __decorate([ property(cc.Label) ], Prefab_MsgBoxCtrl.prototype, "lab_title", void 0);
      Prefab_MsgBoxCtrl = __decorate([ ccclass ], Prefab_MsgBoxCtrl);
      return Prefab_MsgBoxCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_MsgBoxCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  MsgBoxLoadingAni: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ab3c2flZNZLGr0HUMCeEodu", "MsgBoxLoadingAni");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var NetMgr_1 = require("../../NetCenter/NetMgr");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var LoginMgr_1 = require("../../GameMgrs/LoginMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.routemap = {};
        return _this;
      }
      Model.prototype.clear = function() {};
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          img_juhua: null,
          mask: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.node.zIndex = 2212332;
        _this.initUi();
        _this.hideAll();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.img_juhua = ctrl.img_juhua;
        this.ui.mask = ctrl.mask;
      };
      View.prototype.hideAll = function() {
        this.node.active = false;
        this.ui.img_juhua.active = false;
        this.ui.mask.active = false;
      };
      View.prototype.showMask = function() {
        this.node.active = true;
      };
      View.prototype.showJuHua = function() {
        this.node.zIndex++;
        this.ui.img_juhua.active = true;
        this.ui.mask.active = true;
      };
      return View;
    }(BaseView_1.default);
    var MsgBoxLoadingAni = function(_super) {
      __extends(MsgBoxLoadingAni, _super);
      function MsgBoxLoadingAni() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.img_juhua = null;
        _this.mask = null;
        _this.timer_delay = null;
        _this.timer_checkjuhuatime = null;
        _this.juhuaIsShowIn = false;
        _this.starttime = 0;
        return _this;
      }
      MsgBoxLoadingAni.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        var winSize = cc.director.getVisibleSize();
        this.node.position = cc.p(winSize.width / 2, winSize.height / 2);
        this.node.tag = NetMgr_1.default.getInstance().getJuHuaTag();
        this.timer_checkjuhuatime = setInterval(this.checkJuHuaTimer.bind(this), 10);
      };
      MsgBoxLoadingAni.prototype.checkJuHuaTimer = function() {
        if (0 == this.starttime) return;
        var time = Date.now();
        if (time - this.starttime > 15e3) {
          this.starttime = 0;
          NetMgr_1.default.getInstance().destroy();
          this.enableOpration();
          FrameMgr_1.default.getInstance().showHintBox("网络状况不佳,请检查你的网络,点击确定重试！", function() {
            LoginMgr_1.default.getInstance().restartGame();
          });
        }
      };
      MsgBoxLoadingAni.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        if (null != this.timer_delay) {
          clearTimeout(this.timer_delay);
          this.timer_delay = null;
        }
        if (null != this.timer_checkjuhuatime) {
          clearTimeout(this.timer_checkjuhuatime);
          this.timer_checkjuhuatime = null;
        }
      };
      MsgBoxLoadingAni.prototype.updateJuHua = function(needshowjuhua) {
        if (this.juhuaIsShowIn == needshowjuhua) return;
        this.juhuaIsShowIn = needshowjuhua;
        if (needshowjuhua) {
          console.log("禁止菊花操作");
          this.disableOpration();
        } else {
          console.log("允许菊花");
          this.enableOpration();
        }
      };
      MsgBoxLoadingAni.prototype.defineNetEvents = function() {};
      MsgBoxLoadingAni.prototype.defineGlobalEvents = function() {};
      MsgBoxLoadingAni.prototype.connectUi = function() {};
      MsgBoxLoadingAni.prototype.start = function() {
        this.node.on(cc.Node.EventType.TOUCH_START, function() {
          console.log("这是网络菊花");
        }, this);
      };
      MsgBoxLoadingAni.prototype.disableOpration = function() {
        this.starttime = Date.now();
        if (null == this.timer_delay) {
          this.view.showMask();
          console.log("启动定时器");
          this.timer_delay = setTimeout(this.timeout.bind(this), 1e3);
        }
      };
      MsgBoxLoadingAni.prototype.clearDelayTimer = function() {
        if (null != this.timer_delay) {
          console.log("清空定时器");
          clearTimeout(this.timer_delay);
          this.timer_delay = null;
        }
      };
      MsgBoxLoadingAni.prototype.enableOpration = function() {
        this.starttime = 0;
        this.view.hideAll();
        this.clearDelayTimer();
      };
      MsgBoxLoadingAni.prototype.timeout = function() {
        this.view.showJuHua();
      };
      __decorate([ property(cc.Node) ], MsgBoxLoadingAni.prototype, "img_juhua", void 0);
      __decorate([ property(cc.Node) ], MsgBoxLoadingAni.prototype, "mask", void 0);
      MsgBoxLoadingAni = __decorate([ ccclass ], MsgBoxLoadingAni);
      return MsgBoxLoadingAni;
    }(BaseCtrl_1.default);
    exports.default = MsgBoxLoadingAni;
    cc._RF.pop();
  }, {
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/LoginMgr": "LoginMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView",
    "../../NetCenter/NetMgr": "NetMgr"
  } ],
  MyHandMahjongCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ad316AgzbRJaJJr3LKN0RtW", "MyHandMahjongCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var FrameMgr_1 = require("../../Plat/GameMgrs/FrameMgr");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var GEventDef_1 = require("../../Plat/GameMgrs/GEventDef");
    var SettingMgr_1 = require("../../Plat/GameMgrs/SettingMgr");
    var MahjongGeneral_1 = require("./MahjongGeneral");
    var MahjongDef_1 = require("./MahjongDef");
    var Green = new cc.Color(24, 221, 40), Red = new cc.Color(255, 78, 0), Yellow = new cc.Color(255, 222, 0), White = new cc.Color(255, 255, 255), LightGreen = new cc.Color(156, 233, 163);
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.mySeatId = null;
        _this.myself = null;
        _this.enable_op = null;
        _this.cursel = null;
        _this.jin = null;
        _this.jin2 = null;
        _this.offset = 0;
        _this.tingtypedic = {};
        _this.maskcards = [];
        _this.blankWidth = 0;
        _this.paiSpace = 0;
        _this.oneCardTotalNum = 4;
        _this.curtingtype = null;
        _this.maskCardList = {};
        _this.otherPlayerGaiPaitype = null;
        _this.catchCard = null;
        _this.outCardIdx = null;
        _this.handcardSpace = null;
        _this.cardTouchMoveFlag = false;
        _this.opcardsindexes = [];
        _this.jinRed = 255;
        _this.jinGreen = 255;
        _this.jinBlue = 255;
        _this.jinColor = White;
        _this.mahjongResMgr = RoomMgr_1.default.getInstance().getResMgr();
        _this.mahjongLogic = RoomMgr_1.default.getInstance().getLogic();
        _this.mahjongDef = RoomMgr_1.default.getInstance().getDef();
        _this.mahjongAudio = RoomMgr_1.default.getInstance().getAudio();
        _this.mahjongCards = _this.mahjongLogic.getInstance().getMahjongCards();
        _this.clear();
        _this.blankWidth = ctrl.Int_blankWidth;
        _this.paiSpace = ctrl.Int_paiSpace;
        _this.handcardSpace = ctrl.Int_handcardSpace;
        return _this;
      }
      Model.prototype.updateOpCardsFlag = function() {
        var events = this.myself.events;
        this.opcardsindexes = [];
        var carddic = {};
        var opcards = [];
        for (var i = 0; i < events.length; ++i) {
          var event = events[i];
          switch (event) {
           case this.mahjongDef.event_chi:
            var chiarr = this.myself.getCardsCandChi();
            for (var j = 0; j < chiarr.length; ++j) {
              var cards = chiarr[j].cards;
              var index = chiarr[j].index;
              for (var k = 0; k < cards.length; ++k) k != index && opcards.push(cards[k]);
            }
            break;

           case this.mahjongDef.event_peng:
           case this.mahjongDef.event_gang:
            opcards.push(this.mahjongLogic.getInstance().curcard);
            break;

           case this.mahjongDef.event_angang:
            var cards = this.myself.getCardsCanAnGang();
            for (var j = 0; j < cards.length; ++j) opcards.push(cards[j]);
            break;

           case this.mahjongDef.event_bugang:
            var cards = this.myself.getCardsCanBuGang();
            for (var j = 0; j < cards.length; ++j) opcards.push(cards[j]);
          }
        }
        for (var i = 0; i < opcards.length; ++i) {
          var card = opcards[i];
          carddic[card] = true;
        }
        for (var src in carddic) for (var index = 0; index < this.myself.handcard.length; ++index) this.myself.handcard[index] == src && this.opcardsindexes.push(index);
      };
      Model.prototype.setcurtingtype = function(data) {
        this.curtingtype = data;
      };
      Model.prototype.setotherPlayerGaiPaitype = function(type) {
        this.otherPlayerGaiPaitype = type;
      };
      Model.prototype.updateGaiPaiFlag = function() {
        this.maskcards = this.mahjongCards.getOptionCardsFromJiang(this.myself.handcard);
      };
      Model.prototype.setoutCardIdx = function(idx) {
        this.outCardIdx = idx;
      };
      Model.prototype.updateCatchCard = function() {
        this.catchCard = this.mahjongLogic.getInstance().curcard;
        console.log("catchCard", this.catchCard);
      };
      Model.prototype.isInGaiPai = function(value) {
        var jinflag = false;
        for (var i = 0; i < this.maskcards.length; ++i) if (MahjongGeneral_1.MahjongGeneral.isJoker(this.maskcards[i])) {
          jinflag = true;
          break;
        }
        for (var i = 0; i < this.maskcards.length; ++i) if (jinflag) {
          if (MahjongGeneral_1.MahjongGeneral.isJoker(this.maskcards[i])) return true;
        } else if (this.maskcards[i] == value) return true;
        return false;
      };
      Model.prototype.updateOffset = function() {
        this.offset = 3 * this.myself.opcards.length;
      };
      Model.prototype.updateMyInfo = function() {
        this.mySeatId = RoomMgr_1.default.getInstance().getMySeatId();
        this.myself = this.mahjongLogic.getInstance().players[this.mySeatId];
        console.log("更新我的信息=", this.mySeatId, this.myself);
      };
      Model.prototype.clear = function() {
        this.cursel = null;
        this.enable_op = false;
        this.offset = 0;
        this.maskCardList = {};
        this.opcardsindexes = [];
        this.maskcards = [];
        this.tingtypedic = {};
        this.otherPlayerGaiPaitype = null;
        this.curtingtype = null;
        this.catchCard = null;
        this.outCardIdx = null;
        this.cardTouchMoveFlag = false;
      };
      Model.prototype.recover = function() {
        this.clear();
        this.jin = this.mahjongLogic.getInstance().jin;
        this.jin2 = this.mahjongLogic.getInstance().jin2;
      };
      Model.prototype.disabledOp = function() {
        this.enable_op = false;
        this.cursel = null;
      };
      Model.prototype.enabledOp = function() {
        this.enable_op = true;
      };
      Model.prototype.updateTingDic = function() {
        this.tingtypedic = {};
        this.tingtypedic = this.myself.getTingDic(this.myself.handcard, this.mahjongLogic.getInstance().players, this.mySeatId);
      };
      Model.prototype.getBezierEndPointCardIdx = function(cardValue) {
        for (var cardIdx = 0; cardIdx < this.myself.handcard.length; ++cardIdx) if (this.myself.handcard[cardIdx] == cardValue) return cardIdx;
        return -1;
      };
      Model.prototype.touchLimit = function(index) {
        if (null != this.maskCardList[index - this.offset] || void 0 != this.maskCardList[index - this.offset]) return true;
        if (!this.enable_op) return true;
        return false;
      };
      Model.prototype.setJinColor = function(colorR, colorG, colorB) {
        this.jinRed = colorR;
        this.jinGreen = colorG;
        this.jinBlue = colorB;
        this.jinColor = new cc.Color(this.jinRed, this.jinGreen, this.jinBlue);
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          cards_laydown: null,
          cards_stand: null,
          standcards: null,
          hintcard_forClone: null,
          hintcardsTitles: {},
          node_wantonlyhu: null,
          node_huzimo: null,
          node_zimo: null,
          hintCardBg: null,
          hintflags: [],
          hintflagEffectSprites: [],
          hintflagNums: [],
          btn_hintCardsShow: null,
          node_outcardPos: null,
          fapaigroup: [],
          laydowncards: []
        };
        _this.node = ctrl.node;
        _this.ui.btn_hintCardsShow = ctrl.btn_hintCardsShow;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.cards_laydown = this.node.getChildByName("cards_laydown");
        this.ui.cards_stand = this.node.getChildByName("cards_stand");
        this.ui.standcards = [];
        for (var i = 0; i < this.model.mahjongCards.getCardCount() + 1; ++i) {
          var card = this.ui.cards_stand.getChildByName("card_" + i);
          this.ui.standcards.push(card);
          var flag = card.getChildByName("flag");
          this.ui.hintflags.push(flag);
          var hintflagEffectSprite = flag.getChildByName("effect");
          this.ui.hintflagEffectSprites.push(hintflagEffectSprite);
          var number = flag.getChildByName("number").getComponent(cc.Label);
          this.ui.hintflagNums.push(number);
          var laydowncard = this.ui.cards_laydown.getChildByName("card_" + i);
          this.ui.laydowncards.push(laydowncard);
        }
        this.ui.hintcard_forClone = this.node.getChildByName("hintcards").getChildByName("card");
        this.ui.hintCardBg = this.node.getChildByName("hintcards").getChildByName("bg");
        this.ui.node_wantonlyhu = this.ui.hintCardBg.parent.getChildByName("title").getChildByName("tips_wantonlyhu");
        this.ui.node_wantonlyhu.active = false;
        this.ui.hintcardsTitles[MahjongDef_1.MahjongDef.event_danyou] = this.ui.hintCardBg.parent.getChildByName("title").getChildByName("tips_youjin");
        this.ui.hintcardsTitles[MahjongDef_1.MahjongDef.event_zimo] = this.ui.hintCardBg.parent.getChildByName("title").getChildByName("tips_huZimo");
        this.ui.node_huzimo = this.ui.hintcardsTitles[MahjongDef_1.MahjongDef.event_zimo].getChildByName("huzimo");
        this.ui.node_huzimo.active = false;
        this.ui.node_zimo = this.ui.hintcardsTitles[MahjongDef_1.MahjongDef.event_zimo].getChildByName("zimo");
        this.ui.node_zimo.active = false;
        this.ui.hintcardsTitles[MahjongDef_1.MahjongDef.event_shuangyou] = this.ui.hintCardBg.parent.getChildByName("title").getChildByName("tips_shuangyou");
        this.ui.hintcardsTitles[MahjongDef_1.MahjongDef.event_sanyou] = this.ui.hintCardBg.parent.getChildByName("title").getChildByName("tips_sanyou");
        this.ui.node_outcardPos = ctrl.node_outcardPos;
        this.clear();
      };
      View.prototype.hideHintCardsTitles = function() {
        this.ui.hintcardsTitles[MahjongDef_1.MahjongDef.event_danyou].active = false;
        this.ui.hintcardsTitles[MahjongDef_1.MahjongDef.event_zimo].active = false;
        this.ui.hintcardsTitles[MahjongDef_1.MahjongDef.event_shuangyou].active = false;
        this.ui.hintcardsTitles[MahjongDef_1.MahjongDef.event_sanyou].active = false;
        this.ui.node_huzimo.active = false;
        this.ui.node_zimo.active = false;
        this.ui.node_wantonlyhu.active = false;
      };
      View.prototype.initFaPai = function() {
        for (var i = 0; i < this.ui.standcards.length; ++i) {
          var card = this.ui.standcards[i];
          card.active = false;
        }
        for (var i = 0; i < 5; ++i) {
          var count = 4;
          var group = [];
          for (var j = 0; j < count; ++j) {
            var index = i * count + j;
            var card = this.ui.standcards[index];
            if (index < this.model.myself.handcard.length) {
              this.ui.laydowncards[index].active = true;
              group.push(card);
            }
          }
          this.ui.fapaigroup.push(group);
        }
        for (var i = 0; i < this.ui.standcards.length; ++i) {
          var card = this.ui.standcards[i];
          card.getChildByName("jin").active = false;
          card.getChildByName("majingBg").color = White;
        }
        for (var i = 0; i < this.ui.standcards.length; ++i) {
          var card = this.ui.standcards[i];
          var pos = card.position;
          card.position = cc.p(pos.x, 0);
          var value = this.model.myself.handcard[i];
          if (null != value && void 0 != value) {
            var sign = card.getChildByName("sign");
            sign.active = true;
            var frame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(value);
            sign.getComponent(cc.Sprite).spriteFrame = frame;
            console.log("plistKey", this.model.mahjongResMgr.getInstance().getCardSpriteFrame(value));
          }
        }
      };
      View.prototype.stepFaPai = function(step) {
        var group = this.ui.fapaigroup[step];
        for (var i = 0; i < group.length; ++i) {
          var card = group[i];
          card.active = true;
        }
      };
      View.prototype.clearMyCard = function() {
        for (var i = 0; i < this.ui.standcards.length; ++i) this.ui.standcards[i].active = false;
      };
      View.prototype.showTip = function(content) {
        FrameMgr_1.default.getInstance().showTips(content, null, 35, Red, cc.p(0, 0), "Arial", 1e3);
      };
      View.prototype.recover = function() {
        this.clear();
      };
      View.prototype.clear = function() {
        this.ui.cards_laydown.active = false;
        this.ui.fapaigroup = [];
        for (var i = 0; i < this.model.mahjongCards.getCardCount() + 1; ++i) {
          this.ui.standcards[i].active = false;
          this.ui.hintflags[i].active = false;
          this.ui.laydowncards[i].active = false;
        }
        this.ui.hintcard_forClone.active = false;
      };
      View.prototype.updateHandCards = function() {
        for (var i = 0; i < this.model.offset; ++i) {
          var card = this.ui.standcards[i];
          card.active = false;
        }
        for (var i = this.model.offset; i < this.ui.standcards.length; ++i) {
          var card_1 = this.ui.standcards[i];
          var cardIndex = i - this.model.offset;
          var value = this.model.myself.handcard[i - this.model.offset];
          if (null != value && void 0 != value) {
            var sign = card_1.getChildByName("sign");
            sign.active = true;
            var frame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(value);
            sign.getComponent(cc.Sprite).spriteFrame = frame;
            card_1.active = true;
          } else card_1.active = false;
          var isJoker = MahjongGeneral_1.MahjongGeneral.isJoker(value);
          card_1.getChildByName("jin").active = isJoker;
          card_1.getChildByName("majingBg").color = isJoker ? this.model.jinColor : White;
        }
      };
      View.prototype.updateCards = function() {
        this.updateHandCards();
        this.updateSel();
      };
      View.prototype.playBuhuaEffect = function(buhuaData, cb) {
        var huaArr = buhuaData.hua;
        var paiArr = buhuaData.pai;
        var loopCount = huaArr.length;
        var curLoopCount = 0;
        var playEffect = function(card, pai) {
          this.playCardBuhuaEffect(card, pai, function() {
            curLoopCount == loopCount && setTimeout(cb, 500);
          });
          curLoopCount++;
        }.bind(this);
        for (var i = this.model.offset; i < this.ui.standcards.length; ++i) {
          var card = this.ui.standcards[i];
          var value = this.model.myself.frontHandCard[i - this.model.offset];
          for (var k = 0; k < huaArr.length; k++) {
            var hua = huaArr[k];
            var pai = paiArr[k];
            if (value == hua) {
              console.log("playingbuhuaEffect", hua);
              this.model.myself.frontHandCard[i - this.model.offset] = pai;
              playEffect(card, pai);
              break;
            }
          }
        }
      };
      View.prototype.playCardBuhuaEffect = function(card, pai, cb) {
        card.getChildByName("jin").active = false;
        card.getComponent(cc.Animation).play();
        var self = this;
        var onFinished = function() {
          card.active = false;
          var sign = card.getChildByName("sign");
          var frame = self.model.mahjongResMgr.getInstance().getCardSpriteFrame(pai);
          sign.getComponent(cc.Sprite).spriteFrame = frame;
          card.getChildByName("majingBg").active = true;
          card.getChildByName("majingBg").color = White;
          sign.active = true;
          card.active = true;
          setTimeout(cb, 100);
          card.getComponent(cc.Animation).off("finished", onFinished, self);
        };
        card.getComponent(cc.Animation).on("finished", onFinished, self);
      };
      View.prototype.playyoujinshuangyouflagEffect = function(index) {
        this.ui.hintflagEffectSprites[index].active = true;
        this.ui.hintflagEffectSprites[index].getComponent(cc.Animation).play();
      };
      View.prototype.stopyoujinshuangyouflagEffect = function() {
        for (var i = 0; i < this.ui.hintflagEffectSprites.length; ++i) {
          this.ui.hintflagEffectSprites[i].active = false;
          this.ui.hintflagEffectSprites[i].getComponent(cc.Animation).stop();
        }
      };
      View.prototype.updateSel = function() {
        for (var i = this.model.offset; i < this.ui.standcards.length; ++i) {
          var card = this.ui.standcards[i];
          var pos = card.position;
          i == this.model.cursel ? card.position = cc.p(pos.x, 20) : card.position = cc.p(pos.x, 0);
        }
      };
      View.prototype.updateTingFlag = function() {
        for (var i = 0; i < this.model.myself.handcard.length; ++i) {
          var card = this.model.myself.handcard[i];
          var tingtype = this.model.tingtypedic[card];
          var cardnode = this.ui.standcards[i + this.model.offset];
          console.log("i=", i + this.model.offset, "offset=", this.model.offset);
          var flagnode = this.ui.hintflags[i + this.model.offset];
          if (null == tingtype) continue;
          if (tingtype.type >= 0) {
            flagnode.active = true;
            tingtype.type >= 1 && this.playyoujinshuangyouflagEffect(i + this.model.offset);
            this.updateTingFlagNum(i + this.model.offset, tingtype.tingNums);
          } else flagnode.active = false;
          0 == this.model.maskcards.length || this.model.isInGaiPai(card) || this.hideTingFlag(i + this.model.offset);
          tingtype.type < 2 && 0 == card && (flagnode.active = false);
          console.log("flagnode.active", flagnode.active);
          console.log("tingtype", tingtype);
          var name = null;
          switch (tingtype.type) {
           case 1:
            name = "img_youjinzhang";
            break;

           case 2:
            name = "img_shuangyouzhang";
            if (this.model.mahjongLogic.getInstance().isShuangYou() && 13 == this.model.mahjongCards.getCardCount()) {
              name = "img_tishi_sanyou";
              this.updateTingFlagNum(i + this.model.offset, "");
            }
            break;

           default:
            name = "img_tingzhang";
          }
          if (name) {
            var spriteFrame = this.model.mahjongResMgr.getInstance().getSpriteFrame(name);
            flagnode.getComponent(cc.Sprite).spriteFrame = spriteFrame;
            console.log("spriteFramename", name, spriteFrame);
          }
        }
      };
      View.prototype.updateTingSpriteFrame = function() {
        for (var i = 0; i < this.model.myself.handcard.length; ++i) {
          var card = this.model.myself.handcard[i];
          var tingtype = this.model.tingtypedic[card];
          var flagnode = this.ui.hintflags[i + this.model.offset];
          switch (tingtype.type) {
           case 2:
            name = "img_shuangyouzhang";
            var spriteFrame = this.model.mahjongResMgr.getInstance().getSpriteFrame(name);
            flagnode.getComponent(cc.Sprite).spriteFrame = spriteFrame;
            console.log("spriteFramename", name, spriteFrame);
          }
        }
      };
      View.prototype.updateTingFlagNum = function(idx, tingNum) {
        this.ui.hintflagNums[idx].string = tingNum;
        this.ui.hintflagNums[idx].node.color = 0 == tingNum ? Red : White;
      };
      View.prototype.showHintcards = function(flag) {
        this.ui.hintCardBg.parent.active = flag;
      };
      View.prototype.adjustHintCardsBg = function(cardNum, huType) {
        if (cardNum >= this.model.mahjongCards.getTingAllCard() || 0 == cardNum) {
          this.ui.hintCardBg.setContentSize(400, this.ui.hintCardBg.getContentSize().height);
          this.ui.hintcard_forClone.parent.setPositionX(200);
        } else {
          this.ui.hintCardBg.setContentSize(cardNum * this.model.paiSpace + this.model.blankWidth, this.ui.hintCardBg.getContentSize().height);
          var hintcardPos = this.ui.hintCardBg.parent.getPosition();
          var hintcardsTitlePos = this.ui.hintcardsTitles[huType].getPosition();
          this.ui.hintcard_forClone.parent.setPosition(cc.v2((cardNum * this.model.paiSpace + this.model.blankWidth) / 2, hintcardPos.y));
          this.ui.hintcardsTitles[huType].setPosition(cc.v2(-(cardNum * this.model.paiSpace + this.model.blankWidth) / 2, hintcardsTitlePos.y));
          if (cardNum * this.model.paiSpace + this.model.blankWidth < 220) {
            this.ui.hintCardBg.setContentSize(220, this.ui.hintCardBg.getContentSize().height);
            this.ui.hintcard_forClone.parent.setPosition(cc.v2(110, hintcardPos.y));
            this.ui.hintcardsTitles[huType].setPosition(cc.v2(-110, hintcardsTitlePos.y));
            if (1 == cardNum) {
              var childList = this.ui.hintCardBg.parent.children;
              for (var i = 0; i < childList.length; i++) {
                var node = childList[i];
                node.active && "card" == node.name && node.setPosition(cc.v2(-55, node.getPosition().y));
              }
            }
            if (2 == cardNum) {
              var childList = this.ui.hintCardBg.parent.children;
              for (var i = 0; i < childList.length; i++) {
                var node = childList[i];
                node.active && "card" == node.name && node.setPosition(cc.v2(node.getPosition().x - 15, node.getPosition().y));
              }
            }
          }
        }
      };
      View.prototype.addHintCard = function(idx, spriteFrame, cardLefNum, jinFlag) {
        this.ui.hintcard_forClone.active = false;
        var node = cc.instantiate(this.ui.hintcard_forClone);
        node.active = true;
        this.ui.hintcard_forClone.parent.addChild(node);
        var childcount = this.ui.hintcard_forClone.parent.childrenCount;
        node.setPosition(cc.v2(-(childcount - 4) * this.model.paiSpace, 0));
        node.getChildByName("sign").getComponent(cc.Sprite).spriteFrame = spriteFrame;
        node.getChildByName("number").getComponent(cc.Label).string = cardLefNum;
        node.getChildByName("number").color = White;
        node.getChildByName("jin").active = jinFlag;
        node.getChildByName("majingBg").color = jinFlag ? this.model.jinColor : White;
        0 == cardLefNum && (node.getChildByName("number").color = Red);
      };
      View.prototype.removeHintCards = function() {
        this.showHintcards(false);
        var childcount = this.ui.hintCardBg.parent.childrenCount;
        for (var i = 0; i < childcount - 3; i++) this.ui.hintCardBg.parent.getChildByName("card").removeFromParent();
        this.ui.hintcard_forClone = this.ui.hintCardBg.parent.getChildByName("card");
        this.ui.hintcard_forClone.setPosition(cc.v2(0, 0));
        this.ui.hintcard_forClone.active = false;
      };
      View.prototype.getTingCards = function(index) {
        this.removeHintCards();
        var cardnode = this.ui.standcards[index + this.model.offset];
        var card = this.model.myself.handcard[index];
        var tingdata = this.model.tingtypedic[card];
        if (null == tingdata || 0 == Object.keys(tingdata).length) {
          this.model.setcurtingtype(null);
          return;
        }
        var tingtype = tingdata.type;
        if (-1 == tingtype) {
          this.model.setcurtingtype(null);
          return;
        }
        this.model.setcurtingtype(tingdata);
        this.showTingCards(tingdata);
      };
      View.prototype.showTingCards = function(data) {
        if (null == data || void 0 == data) return;
        var huCards = data.cards;
        switch (data.type) {
         case 0:
          this.hideHintCardsTitles();
          this.ui.hintcardsTitles[MahjongDef_1.MahjongDef.event_zimo].active = true;
          console.log("hidezimo", this.model.myself.checkJinXianZhi(MahjongDef_1.MahjongDef.event_zimo), this.model.myself.getJinCount());
          this.ui.node_zimo.active = false;
          this.ui.node_huzimo.active = true;
          this.ui.node_wantonlyhu.active = false;
          if (!this.model.myself.checkJinXianZhi(MahjongDef_1.MahjongDef.event_zimo) && this.model.myself.getJinCount() >= 1 || 13 == this.model.mahjongCards.getCardCount()) {
            this.ui.node_zimo.active = true;
            this.ui.node_huzimo.active = false;
          }
          if (huCards.length >= this.model.mahjongCards.getTingAllCard() || 0 == huCards.length) {
            this.ui.hintcardsTitles[MahjongDef_1.MahjongDef.event_zimo].active = false;
            this.ui.node_wantonlyhu.active = true;
            this.ui.node_wantonlyhu.setPositionX(-200);
            huCards.length = 0;
            console.log("huCards", data.cards, huCards.length);
            console.log("mahjongCards", this.model.mahjongCards.getTingAllCard());
          }
          this.showHintcards(true);
          for (var n = 0; n < huCards.length; n++) {
            var key = huCards[n];
            var spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(key);
            var cardTotalNum = MahjongGeneral_1.MahjongGeneral.isJoker(parseInt(key)) ? 3 : 4;
            var leftCardNum = cardTotalNum - this.model.myself.getLeftHandCountByValue(parseInt(key)) - this.model.myself.getLeftOpCardsCountByValue(parseInt(key)) - this.model.myself.getLeftcardpoolCountByValue(parseInt(key));
            for (var n_1 = 0; n_1 < this.model.mahjongLogic.getInstance().seatcount; n_1++) {
              var player = this.model.mahjongLogic.getInstance().players[n_1];
              n_1 != this.model.mySeatId && (leftCardNum = leftCardNum - player.getLeftOpCardsCountByValue(parseInt(key)) - player.getLeftcardpoolCountByValue(parseInt(key)));
            }
            this.addHintCard(n, spriteFrame, leftCardNum, MahjongGeneral_1.MahjongGeneral.isJoker(parseInt(key)));
          }
          this.adjustHintCardsBg(huCards.length, MahjongDef_1.MahjongDef.event_zimo);
          break;

         case 1:
          this.hideHintCardsTitles();
          this.ui.hintcardsTitles[MahjongDef_1.MahjongDef.event_shuangyou].active = true;
          this.showHintcards(true);
          for (var n = 0; n < huCards.length; n++) {
            var key = huCards[n];
            var spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(key);
            var cardTotalNum = MahjongGeneral_1.MahjongGeneral.isJoker(parseInt(key)) ? 3 : 4;
            var leftCardNum = cardTotalNum - this.model.myself.getLeftHandCountByValue(parseInt(key)) - this.model.myself.getLeftOpCardsCountByValue(parseInt(key)) - this.model.myself.getLeftcardpoolCountByValue(parseInt(key));
            for (var n_2 = 0; n_2 < this.model.mahjongLogic.getInstance().seatcount; n_2++) {
              var player = this.model.mahjongLogic.getInstance().players[n_2];
              n_2 != this.model.mySeatId && (leftCardNum = leftCardNum - player.getLeftOpCardsCountByValue(parseInt(key)) - player.getLeftcardpoolCountByValue(parseInt(key)));
            }
            this.addHintCard(n, spriteFrame, leftCardNum, MahjongGeneral_1.MahjongGeneral.isJoker(parseInt(key)));
          }
          this.adjustHintCardsBg(huCards.length, MahjongDef_1.MahjongDef.event_shuangyou);
          break;

         case 2:
          this.hideHintCardsTitles();
          this.ui.hintcardsTitles[MahjongDef_1.MahjongDef.event_sanyou].active = true;
          this.showHintcards(true);
          for (var n = 0; n < huCards.length; n++) {
            var key = huCards[n];
            var spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(key);
            var cardTotalNum = MahjongGeneral_1.MahjongGeneral.isJoker(parseInt(key)) ? 3 : 4;
            var leftCardNum = cardTotalNum - this.model.myself.getLeftHandCountByValue(parseInt(key)) - this.model.myself.getLeftOpCardsCountByValue(parseInt(key)) - this.model.myself.getLeftcardpoolCountByValue(parseInt(key));
            for (var n_3 = 0; n_3 < this.model.mahjongLogic.getInstance().seatcount; n_3++) {
              var player = this.model.mahjongLogic.getInstance().players[n_3];
              n_3 != this.model.mySeatId && (leftCardNum = leftCardNum - player.getLeftOpCardsCountByValue(parseInt(key)) - player.getLeftcardpoolCountByValue(parseInt(key)));
            }
            this.addHintCard(n, spriteFrame, leftCardNum, MahjongGeneral_1.MahjongGeneral.isJoker(parseInt(key)));
          }
          this.adjustHintCardsBg(huCards.length, MahjongDef_1.MahjongDef.event_sanyou);
        }
      };
      View.prototype.hideTingFlag = function(idx) {
        for (var i = 0; i < this.ui.standcards.length; ++i) -1 == idx ? this.ui.hintflags[i].active = false : idx == i && (this.ui.hintflags[i].active = false);
      };
      View.prototype.showGaiPaiSels = function() {
        console.log("显示盖牌效果=", this.model.maskcards);
        for (var index = 0; index < this.model.myself.handcard.length; ++index) {
          var value = this.model.myself.handcard[index];
          if (!this.model.isInGaiPai(value)) {
            this.model.maskCardList[index] = value;
            var cardnode = this.ui.standcards[index + this.model.offset];
            console.log("加上了盖牌");
            cardnode.getChildByName("majingBg").color = new cc.Color(156, 156, 151);
          }
        }
      };
      View.prototype.bezierTo = function(pointMoveTo, callback, BezierEndPointCardIdx) {
        var catchCard = this.ui.standcards[this.ui.standcards.length - 1];
        var catchCardPos = catchCard.getChildByName("majingBg").getPosition();
        var contentSize = cc.director.getWinSize();
        var bezier = [ cc.p(0, 0), cc.p((-catchCardPos.x + pointMoveTo.x) / 2, contentSize.height / 2), cc.p(-catchCardPos.x + pointMoveTo.x, 0) ];
        var bezierTo = cc.bezierTo((this.ui.standcards.length - BezierEndPointCardIdx) / this.ui.standcards.length * .5, bezier);
        catchCard.runAction(cc.sequence(bezierTo, cc.callFunc(function() {
          catchCard.setPosition(cc.p(0, 0));
          catchCard.active = false;
        }), cc.callFunc(function() {
          callback();
        })));
      };
      View.prototype.cardsMoveRight = function(beginIdx, endIdx, mahjongWidth) {
        var _loop_1 = function(cardIdx) {
          var standcards = this_1.ui.standcards[cardIdx];
          var moveBy = cc.moveBy((this_1.ui.standcards.length - beginIdx) / this_1.ui.standcards.length * .5, cc.p(mahjongWidth, 0));
          standcards.runAction(cc.sequence(moveBy, cc.callFunc(function() {
            standcards.setPosition(cc.p(0, 0));
          })));
        };
        var this_1 = this;
        for (var cardIdx = beginIdx; cardIdx <= endIdx; ++cardIdx) _loop_1(cardIdx);
      };
      View.prototype.cardsMoveLeft = function(beginIdx, endIdx, mahjongWidth) {
        var _loop_2 = function(cardIdx) {
          var standcards = this_2.ui.standcards[cardIdx];
          var moveBy = cc.moveBy((this_2.ui.standcards.length - endIdx) / this_2.ui.standcards.length * .5, cc.p(-mahjongWidth, 0));
          standcards.runAction(cc.sequence(moveBy, cc.callFunc(function() {
            standcards.setPosition(cc.p(0, 0));
          })));
        };
        var this_2 = this;
        for (var cardIdx = beginIdx; cardIdx <= endIdx; ++cardIdx) _loop_2(cardIdx);
      };
      View.prototype.playcatchCardMoveEffect = function(callback) {
        var self = this;
        var BezierEndPointCardIdx = this.model.getBezierEndPointCardIdx(this.model.catchCard);
        if ("function" != typeof callback) return;
        if (-1 == BezierEndPointCardIdx || self.model.outCardIdx + this.model.offset + 1 == this.ui.standcards.length) {
          callback();
          return;
        }
        var BezierEndPointCardPos = this.ui.standcards[BezierEndPointCardIdx + this.model.offset].getChildByName("majingBg").getPosition();
        self.bezierTo(BezierEndPointCardPos, callback, BezierEndPointCardIdx + self.model.offset);
        this.model.outCardIdx > BezierEndPointCardIdx ? self.cardsMoveRight(BezierEndPointCardIdx + self.model.offset, self.model.outCardIdx + self.model.offset, this.model.handcardSpace) : this.model.outCardIdx < BezierEndPointCardIdx && self.cardsMoveLeft(self.model.outCardIdx + self.model.offset, BezierEndPointCardIdx + self.model.offset, this.model.handcardSpace);
      };
      View.prototype.showcatchCard = function() {
        this.ui.standcards[this.ui.standcards.length - 1].active = true;
        MahjongGeneral_1.MahjongGeneral.isJoker(this.model.catchCard) ? this.ui.standcards[this.ui.standcards.length - 1].getChildByName("majingBg").color = this.model.jinColor : this.ui.standcards[this.ui.standcards.length - 1].getChildByName("majingBg").color = White;
      };
      View.prototype.updateHintcardsShow = function(flag) {
        null != this.model.curtingtype ? this.ui.btn_hintCardsShow.node.active = flag : this.ui.btn_hintCardsShow.node.active = false;
      };
      View.prototype.playOutcardEffect = function(index, event, callback) {
        if ("function" != typeof callback) return;
        var outcard = this.ui.standcards[index];
        if (event.getLocation().y - event.getStartLocation().y <= 20) {
          outcard.setPosition(cc.p(0, 0));
          return;
        }
        var outcardPos = this.ui.node_outcardPos.getPosition();
        var winSize = cc.director.getWinSize();
        var outcardWorldPos = cc.p(outcardPos.x + winSize.width / 2, outcardPos.y + winSize.height / 2);
        var moveBy = cc.moveBy(.1, cc.p(outcardWorldPos.x - event.getLocation().x, outcardWorldPos.y - event.getLocation().y));
        var self = this;
        outcard.runAction(cc.sequence(moveBy, cc.callFunc(function() {
          outcard.setPosition(cc.p(0, 0));
        }), cc.callFunc(function() {
          callback(index);
        })));
      };
      View.prototype.layDown = function() {
        this.ui.cards_stand.active = false;
        this.ui.cards_laydown.active = true;
      };
      View.prototype.showStand = function() {
        this.ui.cards_stand.active = true;
        this.ui.cards_laydown.active = false;
      };
      View.prototype.resetOpCardsFlag = function() {
        for (var i = this.model.offset; i < this.ui.standcards.length; ++i) {
          var card = this.ui.standcards[i];
          var cardIndex = i - this.model.offset;
          var value = this.model.myself.handcard[i - this.model.offset];
          MahjongGeneral_1.MahjongGeneral.isJoker(value) || (card.getChildByName("majingBg").color = White);
        }
      };
      View.prototype.updateOpCardsFlag = function() {
        for (var i = 0; i < this.model.opcardsindexes.length; ++i) {
          var index = this.model.opcardsindexes[i];
          console.log("index=", this.model.offset + index, this.model.offset);
          var card = this.ui.standcards[this.model.offset + index];
          if (!card) continue;
          card.getChildByName("majingBg").color = LightGreen;
        }
      };
      return View;
    }(BaseView_1.default);
    var MyHandMahjongCtrl = function(_super) {
      __extends(MyHandMahjongCtrl, _super);
      function MyHandMahjongCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.Int_blankWidth = 0;
        _this.Int_paiSpace = 0;
        _this.btn_hintCardsShow = null;
        _this.Int_handcardSpace = 0;
        _this.node_outcardPos = null;
        _this.fapaitimer = null;
        _this.fapaiStep = 0;
        _this.tidytimer = null;
        _this.tidystep = 0;
        _this.jinRed = 0;
        _this.jinGreen = 0;
        _this.jinBlue = 0;
        return _this;
      }
      MyHandMahjongCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.model.setJinColor(this.jinRed, this.jinGreen, this.jinBlue);
      };
      MyHandMahjongCtrl.prototype.onDestroy = function() {
        this.clearFaPaiTimer();
        this.clearTidyTimer();
        _super.prototype.onDestroy.call(this);
      };
      MyHandMahjongCtrl.prototype.clearFaPaiTimer = function() {
        if (null != this.fapaitimer) {
          clearInterval(this.fapaitimer);
          this.fapaitimer = null;
        }
      };
      MyHandMahjongCtrl.prototype.clearTidyTimer = function() {
        if (null != this.tidytimer) {
          clearInterval(this.tidytimer);
          this.tidytimer = null;
        }
      };
      MyHandMahjongCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onEvent: this.onEvent,
          onSeatChange: this.onSeatChange,
          onSyncData: this.onSyncData,
          onProcess: this.onProcess,
          onOp: this.onOp,
          onGmOp: this.onGmOp,
          "http.reqSettle": this.http_reqSettle
        };
      };
      MyHandMahjongCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          usersUpdated: this.usersUpdated
        };
      };
      MyHandMahjongCtrl.prototype.connectUi = function() {
        this.bindCardTouch();
        this.connect(G_UiType.button, this.btn_hintCardsShow.node, {
          startCallBack: this.btn_hintCardsShowStartcb,
          moveCallBack: null,
          endCallBack: this.btn_hintCardsShowEndcb,
          cancelCallBack: this.btn_hintCardsShowEndcb
        }, "点击显示提示框");
      };
      MyHandMahjongCtrl.prototype.start = function() {};
      MyHandMahjongCtrl.prototype.process_fapai = function() {
        this.fapaiStep = 0;
        this.view.initFaPai();
        this.startFaPaiTimer();
      };
      MyHandMahjongCtrl.prototype.usersUpdated = function() {
        console.log("我更新啦啦啦");
        this.model.clear();
        this.view.clear();
        this.model.updateMyInfo();
      };
      MyHandMahjongCtrl.prototype.onEvent = function(msg) {
        this.view.resetOpCardsFlag();
        var eventLength = this.model.myself.events.length;
        var event = this.model.myself.events[eventLength - 1];
        this.model.updateOpCardsFlag();
        this.view.updateOpCardsFlag();
        event >= MahjongDef_1.MahjongDef.event_shuangyou && 13 != this.model.mahjongCards.getCardCount() && this.view.hideTingFlag(-1);
        console.log("event", event, this.model.mahjongDef.event_danyou);
        for (var i = 0; i < eventLength; i++) {
          var checkEvent = this.model.myself.events[i];
          this.model.mahjongLogic.getInstance().isShuangYou() && 13 == this.model.mahjongCards.getCardCount() && checkEvent == this.model.mahjongDef.event_danyou && this.view.updateTingSpriteFrame();
        }
        switch (this.model.myself.state) {
         case MahjongDef_1.MahjongDef.state_chupai:
          this.view.updateHintcardsShow(false);
          break;

         case MahjongDef_1.MahjongDef.state_gaipai:
          this.model.updateGaiPaiFlag();
          this.view.showGaiPaiSels();
          break;

         default:
          return;
        }
        this.model.updateCatchCard();
        this.view.showcatchCard();
        this.model.enabledOp();
      };
      MyHandMahjongCtrl.prototype.onGmOp = function(msg) {
        switch (msg.optype) {
         case MahjongDef_1.MahjongDef.gmop_changecard:
          if (msg.opseatid == RoomMgr_1.default.getInstance().getMySeatId()) {
            console.log("updatecards1");
            this.view.updateHandCards();
          }
          if (msg.data.target == RoomMgr_1.default.getInstance().getMySeatId()) {
            console.log("updatecards2");
            this.view.updateHandCards();
          }
        }
      };
      MyHandMahjongCtrl.prototype.onSyncData = function() {
        console.log("同步数据");
        this.model.recover();
        this.view.recover();
        this.showtingtip();
        var cur_eventtype = this.model.mahjongLogic.getInstance().cur_eventtype;
        cur_eventtype && cur_eventtype == MahjongDef_1.MahjongDef.event_chupai && this.model.enabledOp();
        this.model.updateOffset();
        this.view.updateCards();
        this.onEvent(null);
      };
      MyHandMahjongCtrl.prototype.onSeatChange = function(msg) {
        this.view.resetOpCardsFlag();
        if (this.model.mySeatId != this.model.mahjongLogic.getInstance().curseat) return;
        var self = this;
        var updateHandCard = function() {
          self.view.updateCards();
          self.showtingtip();
        };
        if (msg.needbupai && msg.huaarr.length > 0) {
          updateHandCard();
          var aniHuaArr_1 = msg.huaarr.concat();
          var loopCount_1 = aniHuaArr_1.length;
          var curLoopCount_1 = 1;
          var buhua_1 = function(card, pai) {
            this.view.playCardBuhuaEffect(card, pai, function() {
              if (loopCount_1 <= curLoopCount_1) {
                console.log("curLoopCount1", curLoopCount_1);
                return updateHandCard();
              }
              curLoopCount_1++;
              console.log("curLoopCount2", curLoopCount_1);
              var value = aniHuaArr_1[curLoopCount_1];
              buhua_1(card, value);
            }.bind(this));
          }.bind(this);
          buhua_1(self.ui.standcards[self.ui.standcards.length - 1], aniHuaArr_1[curLoopCount_1]);
        } else updateHandCard();
      };
      MyHandMahjongCtrl.prototype.showtingtip = function() {
        if (RoomMgr_1.default.getInstance().getVideoMode()) return;
        this.model.updateTingDic();
        this.view.updateTingFlag();
      };
      MyHandMahjongCtrl.prototype.onOp = function(msg) {
        if (msg.opseatid != this.model.mySeatId) {
          this.view.updateCards();
          return;
        }
        this.model.updateOffset();
        this.view.resetOpCardsFlag();
        console.log("onOp");
        this.view.updateHintcardsShow(true);
        this.view.hideTingFlag(-1);
        var op = MahjongDef_1.MahjongDef.op_cfg[msg.event];
        switch (op) {
         case MahjongDef_1.MahjongDef.op_chupai:
          var self_1 = this;
          this.model.disabledOp();
          self_1.view.playcatchCardMoveEffect(function() {
            self_1.op_chupai(msg);
          });
          break;

         case MahjongDef_1.MahjongDef.op_bugang:
          this.op_bugang(msg);
          break;

         case MahjongDef_1.MahjongDef.op_gaipai:
          this.op_gaipai(msg);
          break;

         case MahjongDef_1.MahjongDef.op_angang:
          this.op_angang(msg);
          break;

         case MahjongDef_1.MahjongDef.op_chi:
          this.op_chi(msg);
          break;

         case MahjongDef_1.MahjongDef.op_peng:
          this.op_peng(msg);
          break;

         case MahjongDef_1.MahjongDef.op_gang:
          this.op_gang(msg);
          break;

         case MahjongDef_1.MahjongDef.op_hu:
          this.op_hu(msg);
          break;

         case MahjongDef_1.MahjongDef.op_qianggang_hu:
          this.op_qianggang_hu(msg);
          break;

         default:
          this.model.updateCatchCard();
          this.view.showcatchCard();
        }
      };
      MyHandMahjongCtrl.prototype.op_hu = function(msg) {
        this.view.updateCards();
      };
      MyHandMahjongCtrl.prototype.op_qianggang_hu = function(msg) {
        this.view.updateCards();
      };
      MyHandMahjongCtrl.prototype.op_chi = function(msg) {
        this.view.updateCards();
      };
      MyHandMahjongCtrl.prototype.op_peng = function(msg) {
        this.view.updateCards();
      };
      MyHandMahjongCtrl.prototype.op_gang = function(msg) {
        this.view.updateCards();
      };
      MyHandMahjongCtrl.prototype.op_bugang = function(msg) {
        this.view.updateCards();
      };
      MyHandMahjongCtrl.prototype.op_angang = function(msg) {
        this.view.updateCards();
      };
      MyHandMahjongCtrl.prototype.op_gaipai = function(msg) {
        this.model.setotherPlayerGaiPaitype(msg.card);
        this.view.updateCards();
      };
      MyHandMahjongCtrl.prototype.onProcess = function(msg) {
        msg.process == MahjongDef_1.MahjongDef.process_kaijin ? this.process_kaijin() : msg.process == MahjongDef_1.MahjongDef.process_fapai ? this.process_fapai() : msg.process == MahjongDef_1.MahjongDef.process_ready ? this.process_ready() : msg.process == MahjongDef_1.MahjongDef.process_buhua ? this.process_buhua(msg) : msg.process == MahjongDef_1.MahjongDef.process_loop && this.process_loop(msg);
      };
      MyHandMahjongCtrl.prototype.process_kaijin = function() {
        this.tidystep = 0;
        this.startTidyTimer();
      };
      MyHandMahjongCtrl.prototype.stepFaPai = function() {
        switch (this.fapaiStep) {
         case 0:
          this.view.stepFaPai(0);
          break;

         case 1:
          this.view.stepFaPai(1);
          break;

         case 2:
          this.view.stepFaPai(2);
          break;

         case 3:
          this.view.stepFaPai(3);
          break;

         case 4:
          this.view.stepFaPai(4);
          break;

         case 5:
          this.clearFaPaiTimer();
        }
        this.fapaiStep++;
      };
      MyHandMahjongCtrl.prototype.stepTidy = function() {
        switch (this.tidystep) {
         case 2:
          this.view.layDown();
          break;

         case 3:
          this.view.updateHandCards();
          this.view.showStand();
          break;

         case 4:
          this.clearTidyTimer();
        }
        this.tidystep++;
      };
      MyHandMahjongCtrl.prototype.startFaPaiTimer = function() {
        this.fapaitimer = setInterval(this.stepFaPai.bind(this), 150);
      };
      MyHandMahjongCtrl.prototype.startTidyTimer = function() {
        this.tidytimer = setInterval(this.stepTidy.bind(this), 500);
      };
      MyHandMahjongCtrl.prototype.process_loop = function(msg) {
        console.log("process_loop");
        this.model.mySeatId == this.model.mahjongLogic.getInstance().curseat && this.showtingtip();
      };
      MyHandMahjongCtrl.prototype.process_buhua = function(msg) {
        var myBuhuaData = {
          hua: msg.huapaiarr[this.model.mySeatId],
          pai: msg.bupaiarr[this.model.mySeatId]
        };
        var self = this;
        console.log("myBuhuaData.hua.length", myBuhuaData.hua.length, myBuhuaData);
        myBuhuaData.hua.length && this.view.playBuhuaEffect(myBuhuaData, function() {});
      };
      MyHandMahjongCtrl.prototype.process_ready = function() {
        this.model.clear();
        this.view.clear();
      };
      MyHandMahjongCtrl.prototype.touchCard = function(index, event) {
        this.model.mahjongAudio.getInstance().playCardHover();
        var outcardPos = this.ui.node_outcardPos.getPosition();
        var winSize = cc.director.getWinSize();
        var outcardPos1 = cc.p(outcardPos.x + winSize.width / 2, outcardPos.y + winSize.height / 2);
        console.log("touch  Card end", event.getLocation(), outcardPos1, outcardPos);
        var cardvalue = this.model.myself.handcard[index - this.model.offset];
        this.gemit(GEventDef_1.default.mj_chosecard, cardvalue);
        if (this.model.cardTouchMoveFlag) {
          var self = this;
          this.model.cardTouchMoveFlag = false;
          this.view.getTingCards(index - this.model.offset);
          this.view.playOutcardEffect(index, event, self.outcard.bind(self));
        } else {
          if (this.model.touchLimit(index) || !SettingMgr_1.default.getInstance().getControlInfo().bMjClick) return;
          if (this.model.cursel == index) {
            this.outcard(index);
            return;
          }
          this.view.updateTingFlag();
          this.view.hideTingFlag(index);
          this.view.getTingCards(index - this.model.offset);
          this.model.cursel = index;
          this.view.updateSel();
        }
      };
      MyHandMahjongCtrl.prototype.touchCardMove = function(index, event) {
        console.log("touch card move", index, event, event.getDelta(), event.getLocation(), event.getStartLocation());
        if (this.model.touchLimit(index) || !SettingMgr_1.default.getInstance().getControlInfo().bMjDrag) return;
        if (Math.abs(event.getLocation().x - event.getStartLocation().x) <= 20 && Math.abs(event.getLocation().y - event.getStartLocation().y) <= 20) return;
        var cardvalue = this.model.myself.handcard[index - this.model.offset];
        this.gemit(GEventDef_1.default.mj_chosecard, cardvalue);
        this.model.cardTouchMoveFlag = true;
        var endPos = cc.v2(event.getLocation().x - event.getStartLocation().x, event.getLocation().y - event.getStartLocation().y);
        this.ui.standcards[index].setPosition(endPos);
      };
      MyHandMahjongCtrl.prototype.touchCardCancel = function(index, event) {
        this.gemit(GEventDef_1.default.mj_chosecard, -1);
        var outcard = this.ui.standcards[index];
        outcard.setPosition(cc.p(0, 0));
      };
      MyHandMahjongCtrl.prototype.outcard = function(index) {
        this.view.removeHintCards();
        var tingtype = -1;
        var standcards = this.model.myself.handcard[index - this.model.offset];
        var outcardlimitedFlag = this.model.myself.outcardLimited(standcards);
        console.log("outcardlimitedFlag", outcardlimitedFlag);
        if (outcardlimitedFlag) return;
        this.ui.standcards[index].active = false;
        this.view.stopyoujinshuangyouflagEffect();
        console.log("tingtype", tingtype);
        console.log("cardvalue", this.model.myself.handcard[index - this.model.offset]);
        this.model.setoutCardIdx(index - this.model.offset);
        switch (this.model.myself.state) {
         case MahjongDef_1.MahjongDef.state_chupai:
          this.model.mahjongLogic.getInstance().playerOp(MahjongDef_1.MahjongDef.event_chupai, index - this.model.offset);
          break;

         case MahjongDef_1.MahjongDef.state_gaipai:
          this.model.mahjongLogic.getInstance().playerOp(MahjongDef_1.MahjongDef.event_gaipai, index - this.model.offset);
          break;

         default:
          return;
        }
        this.model.disabledOp();
      };
      MyHandMahjongCtrl.prototype.bindCardTouch = function() {
        var _loop_3 = function(i) {
          var node = this_3.ui.standcards[i];
          var majingBg = node.getChildByName("majingBg");
          var self = this_3;
          majingBg.on(cc.Node.EventType.TOUCH_END, function(event) {
            console.log("TOUCH_END");
            this.touchCard.bind(this)(i, event);
          }, this_3);
          majingBg.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
            this.touchCardMove.bind(this)(i, event, self.outcard);
          }, this_3);
          majingBg.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
            this.touchCardCancel.bind(this)(i, event);
          }, this_3);
        };
        var this_3 = this;
        for (var i = 0; i < this.ui.standcards.length; ++i) _loop_3(i);
      };
      MyHandMahjongCtrl.prototype.op_chupai = function(msg) {
        this.model.cursel = null;
        this.view.updateCards();
      };
      MyHandMahjongCtrl.prototype.btn_hintCardsShowStartcb = function(event) {
        console.log(event);
        this.view.removeHintCards();
        this.view.showTingCards(this.model.curtingtype);
      };
      MyHandMahjongCtrl.prototype.btn_hintCardsShowEndcb = function(event) {
        console.log("btn_hintCardsShowEndcb");
        this.view.removeHintCards();
      };
      MyHandMahjongCtrl.prototype.http_reqSettle = function() {
        this.view.updateCards();
        this.model.setcurtingtype(null);
        this.view.removeHintCards();
        this.view.updateHintcardsShow(false);
      };
      __decorate([ property({
        tooltip: "麻将牌型提示框空白区",
        type: cc.Integer
      }) ], MyHandMahjongCtrl.prototype, "Int_blankWidth", void 0);
      __decorate([ property({
        tooltip: "麻将听牌牌型间隔",
        type: cc.Integer
      }) ], MyHandMahjongCtrl.prototype, "Int_paiSpace", void 0);
      __decorate([ property({
        tooltip: "麻将提示按钮",
        type: cc.Button
      }) ], MyHandMahjongCtrl.prototype, "btn_hintCardsShow", void 0);
      __decorate([ property({
        tooltip: "麻将手牌牌型间隔",
        type: cc.Integer
      }) ], MyHandMahjongCtrl.prototype, "Int_handcardSpace", void 0);
      __decorate([ property({
        tooltip: "麻将出牌提示位置",
        type: cc.Node
      }) ], MyHandMahjongCtrl.prototype, "node_outcardPos", void 0);
      __decorate([ property ], MyHandMahjongCtrl.prototype, "jinRed", void 0);
      __decorate([ property ], MyHandMahjongCtrl.prototype, "jinGreen", void 0);
      __decorate([ property ], MyHandMahjongCtrl.prototype, "jinBlue", void 0);
      MyHandMahjongCtrl = __decorate([ ccclass ], MyHandMahjongCtrl);
      return MyHandMahjongCtrl;
    }(BaseCtrl_1.default);
    exports.default = MyHandMahjongCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/FrameMgr": "FrameMgr",
    "../../Plat/GameMgrs/GEventDef": "GEventDef",
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/GameMgrs/SettingMgr": "SettingMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "./MahjongDef": "MahjongDef",
    "./MahjongGeneral": "MahjongGeneral"
  } ],
  MyMd5: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "99cb91lPlhEl4UWS8ifdPl9", "MyMd5");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function MyMd5(data) {
      function fflog(msg) {
        try {
          console.log(msg);
        } catch (e) {}
      }
      function to_zerofilled_hex(n) {
        var t1 = (n >>> 24).toString(16);
        var t2 = (16777215 & n).toString(16);
        return "00".substr(0, 2 - t1.length) + t1 + "000000".substr(0, 6 - t2.length) + t2;
      }
      function chars_to_bytes(ac) {
        var retval = [];
        for (var i = 0; i < ac.length; i++) retval = retval.concat(str_to_bytes(ac[i]));
        return retval;
      }
      function int64_to_bytes(num) {
        var retval = [];
        for (var i = 0; i < 8; i++) {
          retval.push(255 & num);
          num >>>= 8;
        }
        return retval;
      }
      function rol(num, places) {
        return num << places & 4294967295 | num >>> 32 - places;
      }
      function fF(b, c, d) {
        return b & c | ~b & d;
      }
      function fG(b, c, d) {
        return d & b | ~d & c;
      }
      function fH(b, c, d) {
        return b ^ c ^ d;
      }
      function fI(b, c, d) {
        return c ^ (b | ~d);
      }
      function bytes_to_int32(arr, off) {
        return arr[off + 3] << 24 | arr[off + 2] << 16 | arr[off + 1] << 8 | arr[off];
      }
      function str_to_bytes(str) {
        var retval = [];
        for (var i = 0; i < str.length; i++) if (str.charCodeAt(i) <= 127) retval.push(str.charCodeAt(i)); else {
          var tmp = encodeURIComponent(str.charAt(i)).substr(1).split("%");
          for (var j = 0; j < tmp.length; j++) retval.push(parseInt(tmp[j], 16));
        }
        return retval;
      }
      function int128le_to_hex(a, b, c, d) {
        var ra = "";
        var t = 0;
        var ta = 0;
        for (var i = 3; i >= 0; i--) {
          ta = arguments[i];
          t = 255 & ta;
          ta >>>= 8;
          t <<= 8;
          t |= 255 & ta;
          ta >>>= 8;
          t <<= 8;
          t |= 255 & ta;
          ta >>>= 8;
          t <<= 8;
          t |= ta;
          ra += to_zerofilled_hex(t);
        }
        return ra;
      }
      var databytes = null;
      if ("string" == typeof data) databytes = str_to_bytes(data); else {
        if (data.constructor != Array) {
          fflog("input data type mismatch");
          return null;
        }
        if (0 === data.length) databytes = data; else if ("string" == typeof data[0]) databytes = chars_to_bytes(data); else {
          if ("number" != typeof data[0]) {
            fflog("input data type mismatch");
            return null;
          }
          databytes = data;
        }
      }
      var org_len = databytes.length;
      databytes.push(128);
      var tail = databytes.length % 64;
      if (tail > 56) {
        for (var i = 0; i < 64 - tail; i++) databytes.push(0);
        tail = databytes.length % 64;
      }
      for (i = 0; i < 56 - tail; i++) databytes.push(0);
      databytes = databytes.concat(int64_to_bytes(8 * org_len));
      var h0 = 1732584193;
      var h1 = 4023233417;
      var h2 = 2562383102;
      var h3 = 271733878;
      var a = 0, b = 0, c = 0, d = 0;
      function _add(n1, n2) {
        return 4294967295 & n1 + n2;
      }
      var updateRun = function(nf, sin32, dw32, b32) {
        var temp = d;
        d = c;
        c = b;
        b = _add(b, rol(_add(a, _add(nf, _add(sin32, dw32))), b32));
        a = temp;
      };
      for (i = 0; i < databytes.length / 64; i++) {
        a = h0;
        b = h1;
        c = h2;
        d = h3;
        var ptr = 64 * i;
        updateRun(fF(b, c, d), 3614090360, bytes_to_int32(databytes, ptr), 7);
        updateRun(fF(b, c, d), 3905402710, bytes_to_int32(databytes, ptr + 4), 12);
        updateRun(fF(b, c, d), 606105819, bytes_to_int32(databytes, ptr + 8), 17);
        updateRun(fF(b, c, d), 3250441966, bytes_to_int32(databytes, ptr + 12), 22);
        updateRun(fF(b, c, d), 4118548399, bytes_to_int32(databytes, ptr + 16), 7);
        updateRun(fF(b, c, d), 1200080426, bytes_to_int32(databytes, ptr + 20), 12);
        updateRun(fF(b, c, d), 2821735955, bytes_to_int32(databytes, ptr + 24), 17);
        updateRun(fF(b, c, d), 4249261313, bytes_to_int32(databytes, ptr + 28), 22);
        updateRun(fF(b, c, d), 1770035416, bytes_to_int32(databytes, ptr + 32), 7);
        updateRun(fF(b, c, d), 2336552879, bytes_to_int32(databytes, ptr + 36), 12);
        updateRun(fF(b, c, d), 4294925233, bytes_to_int32(databytes, ptr + 40), 17);
        updateRun(fF(b, c, d), 2304563134, bytes_to_int32(databytes, ptr + 44), 22);
        updateRun(fF(b, c, d), 1804603682, bytes_to_int32(databytes, ptr + 48), 7);
        updateRun(fF(b, c, d), 4254626195, bytes_to_int32(databytes, ptr + 52), 12);
        updateRun(fF(b, c, d), 2792965006, bytes_to_int32(databytes, ptr + 56), 17);
        updateRun(fF(b, c, d), 1236535329, bytes_to_int32(databytes, ptr + 60), 22);
        updateRun(fG(b, c, d), 4129170786, bytes_to_int32(databytes, ptr + 4), 5);
        updateRun(fG(b, c, d), 3225465664, bytes_to_int32(databytes, ptr + 24), 9);
        updateRun(fG(b, c, d), 643717713, bytes_to_int32(databytes, ptr + 44), 14);
        updateRun(fG(b, c, d), 3921069994, bytes_to_int32(databytes, ptr), 20);
        updateRun(fG(b, c, d), 3593408605, bytes_to_int32(databytes, ptr + 20), 5);
        updateRun(fG(b, c, d), 38016083, bytes_to_int32(databytes, ptr + 40), 9);
        updateRun(fG(b, c, d), 3634488961, bytes_to_int32(databytes, ptr + 60), 14);
        updateRun(fG(b, c, d), 3889429448, bytes_to_int32(databytes, ptr + 16), 20);
        updateRun(fG(b, c, d), 568446438, bytes_to_int32(databytes, ptr + 36), 5);
        updateRun(fG(b, c, d), 3275163606, bytes_to_int32(databytes, ptr + 56), 9);
        updateRun(fG(b, c, d), 4107603335, bytes_to_int32(databytes, ptr + 12), 14);
        updateRun(fG(b, c, d), 1163531501, bytes_to_int32(databytes, ptr + 32), 20);
        updateRun(fG(b, c, d), 2850285829, bytes_to_int32(databytes, ptr + 52), 5);
        updateRun(fG(b, c, d), 4243563512, bytes_to_int32(databytes, ptr + 8), 9);
        updateRun(fG(b, c, d), 1735328473, bytes_to_int32(databytes, ptr + 28), 14);
        updateRun(fG(b, c, d), 2368359562, bytes_to_int32(databytes, ptr + 48), 20);
        updateRun(fH(b, c, d), 4294588738, bytes_to_int32(databytes, ptr + 20), 4);
        updateRun(fH(b, c, d), 2272392833, bytes_to_int32(databytes, ptr + 32), 11);
        updateRun(fH(b, c, d), 1839030562, bytes_to_int32(databytes, ptr + 44), 16);
        updateRun(fH(b, c, d), 4259657740, bytes_to_int32(databytes, ptr + 56), 23);
        updateRun(fH(b, c, d), 2763975236, bytes_to_int32(databytes, ptr + 4), 4);
        updateRun(fH(b, c, d), 1272893353, bytes_to_int32(databytes, ptr + 16), 11);
        updateRun(fH(b, c, d), 4139469664, bytes_to_int32(databytes, ptr + 28), 16);
        updateRun(fH(b, c, d), 3200236656, bytes_to_int32(databytes, ptr + 40), 23);
        updateRun(fH(b, c, d), 681279174, bytes_to_int32(databytes, ptr + 52), 4);
        updateRun(fH(b, c, d), 3936430074, bytes_to_int32(databytes, ptr), 11);
        updateRun(fH(b, c, d), 3572445317, bytes_to_int32(databytes, ptr + 12), 16);
        updateRun(fH(b, c, d), 76029189, bytes_to_int32(databytes, ptr + 24), 23);
        updateRun(fH(b, c, d), 3654602809, bytes_to_int32(databytes, ptr + 36), 4);
        updateRun(fH(b, c, d), 3873151461, bytes_to_int32(databytes, ptr + 48), 11);
        updateRun(fH(b, c, d), 530742520, bytes_to_int32(databytes, ptr + 60), 16);
        updateRun(fH(b, c, d), 3299628645, bytes_to_int32(databytes, ptr + 8), 23);
        updateRun(fI(b, c, d), 4096336452, bytes_to_int32(databytes, ptr), 6);
        updateRun(fI(b, c, d), 1126891415, bytes_to_int32(databytes, ptr + 28), 10);
        updateRun(fI(b, c, d), 2878612391, bytes_to_int32(databytes, ptr + 56), 15);
        updateRun(fI(b, c, d), 4237533241, bytes_to_int32(databytes, ptr + 20), 21);
        updateRun(fI(b, c, d), 1700485571, bytes_to_int32(databytes, ptr + 48), 6);
        updateRun(fI(b, c, d), 2399980690, bytes_to_int32(databytes, ptr + 12), 10);
        updateRun(fI(b, c, d), 4293915773, bytes_to_int32(databytes, ptr + 40), 15);
        updateRun(fI(b, c, d), 2240044497, bytes_to_int32(databytes, ptr + 4), 21);
        updateRun(fI(b, c, d), 1873313359, bytes_to_int32(databytes, ptr + 32), 6);
        updateRun(fI(b, c, d), 4264355552, bytes_to_int32(databytes, ptr + 60), 10);
        updateRun(fI(b, c, d), 2734768916, bytes_to_int32(databytes, ptr + 24), 15);
        updateRun(fI(b, c, d), 1309151649, bytes_to_int32(databytes, ptr + 52), 21);
        updateRun(fI(b, c, d), 4149444226, bytes_to_int32(databytes, ptr + 16), 6);
        updateRun(fI(b, c, d), 3174756917, bytes_to_int32(databytes, ptr + 44), 10);
        updateRun(fI(b, c, d), 718787259, bytes_to_int32(databytes, ptr + 8), 15);
        updateRun(fI(b, c, d), 3951481745, bytes_to_int32(databytes, ptr + 36), 21);
        h0 = _add(h0, a);
        h1 = _add(h1, b);
        h2 = _add(h2, c);
        h3 = _add(h3, d);
      }
      return int128le_to_hex(h3, h2, h1, h0).toUpperCase();
    }
    exports.default = MyMd5;
    cc._RF.pop();
  }, {} ],
  MyUdid: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fa68fj1N79PfI8kfSCnZayB", "MyUdid");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function MyUdid() {
      var key = "wmqpkey";
      var udid = cc.sys.localStorage.getItem(key);
      if (null == udid || "" == udid) {
        var t = new Date();
        udid = guid() + t.getTime();
        cc.sys.localStorage.setItem(key, udid);
      }
      function S4() {
        return (65536 * (1 + Math.random()) | 0).toString(16).substring(1);
      }
      function guid() {
        return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4();
      }
      return udid;
    }
    exports.default = MyUdid;
    cc._RF.pop();
  }, {} ],
  NameCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "030afeRGqJPKolx+xtIgEvY", "NameCfg");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCfg_1 = require("../Libs/BaseCfg");
    var NameCfg = function(_super) {
      __extends(NameCfg, _super);
      function NameCfg() {
        var _this = _super.call(this) || this;
        _this.nameData = null;
        _this.namePath = null;
        _this.namePath = _this.getFullPath("name");
        return _this;
      }
      NameCfg.getInstance = function() {
        this._instance || (this._instance = new NameCfg());
        return this._instance;
      };
      NameCfg.prototype.loadCb = function(name, data) {
        this.loaded = true;
        this.nameData = data;
      };
      NameCfg.prototype.getName = function() {
        return this.nameData;
      };
      NameCfg.prototype.load = function() {
        this.loadRes(this.namePath, this.loadCb);
      };
      return NameCfg;
    }(BaseCfg_1.default);
    exports.default = NameCfg;
    cc._RF.pop();
  }, {
    "../Libs/BaseCfg": "BaseCfg"
  } ],
  NetCode: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "22d0bBjgMhIF6nIGcVqS9ny", "NetCode");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var errorcodes = {
      10000001: "返回数据格式错误",
      10010001: "路由错误",
      10010002: "数据重复提交",
      10020002: "用户账户不存在",
      10020003: "用户密码错误",
      10020004: "token错误",
      10020005: "用户已存在",
      10020006: "注册失败",
      10020007: "登录失败",
      10020008: "游戏服不存在",
      10020009: "今日救济金已领取完毕",
      10020044: "救济金领取失败",
      10020048: "定位失败",
      10020049: "玩家修改的性别参数错误",
      10020050: "缺少参数",
      10020051: "消息入队列失败",
      10020052: "房间内没人或者都未准备",
      10020053: "身份证号码错误，请重新输入！",
      10020054: "用户身份证号码登记失败",
      10020055: "用户性别修改失败",
      10020056: "个性签名长度过长",
      10020057: "个性签名修改失败",
      10020058: "手机号码格式错误,请重新输入！",
      10020059: "验证码发送失败，请稍后重试！",
      10020060: "验证码错误，请重新输入！",
      10020061: "用户身份证已经登记过了",
      10020062: "绑定失败！",
      10020084: "已经绑定过代理！",
      10020085: "不能绑定代理自己为代理！",
      10020086: "邀请码所属代理不存在！",
      10020063: "实名认证含有敏感词",
      10030010: "房间已满,请重新匹配",
      10030011: "游戏已结束",
      10030012: "金币不足,请购买金币",
      10030013: "金币场验证失败",
      10030014: "房卡不足",
      10030015: "匹配失败",
      10030016: "房间已过期",
      10030017: "不在房间中",
      10030018: "牌局记录创建失败",
      10030019: "房间已过期，结算失败",
      10030020: "你有牌局未恢复",
      10030021: "你有房间未解散",
      10030022: "创建房间异常",
      10030023: "房间未找到，请重新输入房号！",
      10030024: "需解散房间",
      10030025: "非房主无法解散房间",
      10030026: "游戏进行中不能解散房间",
      10030027: "未找到房间用户信息",
      10030028: "非房主无权恢复房间",
      10030029: "游戏已开始",
      10030030: "未发现房间配置",
      10030031: "房间不存在",
      10030032: "房间场次已结束",
      10030039: "未进入游戏",
      10030040: "游戏已开始或已经准备",
      10030041: "已在房间中",
      10030042: "未找到房间信息",
      10030043: "游戏未开始",
      10030045: "房间准备失败",
      10030046: "游戏不存在",
      10030047: "底注类型不存在",
      10030049: "离开房间失败",
      10030050: "结束牌局失败",
      10030051: "创建房卡房间校验失败",
      10030052: "创建房卡房间失败",
      10030053: "房卡房间不走此接口",
      10030054: "没通过匹配验证标志",
      10030055: "房间人数已满，无法加入！",
      10030056: "查询不到房间规则",
      10030057: "牌局不存在",
      10030058: "牌局不允许中途进入",
      10040033: "创建订单失败",
      10040034: "订单不存在",
      10040035: "订单过期",
      10040036: "钻石不足",
      10040037: "商品不存在",
      10040038: "商品类型错误",
      10050001: "获取邮件的类型参数错误",
      10050002: "一键阅读邮件失败",
      10050003: "一键领取邮件附件失败",
      10050004: "获取邮件详情失败",
      10050005: "领取邮件详情中附件失败",
      10060001: "创建茶馆失败",
      10060002: "已经创建过茶馆",
      10060003: "已加入的茶馆数量已达上限",
      10060004: "该茶馆名称已经存在！",
      10060005: "茶馆名称不能为空！",
      10060006: "茶馆名称存在非法字符！",
      10060007: "茶馆名称存在敏感词！",
      10060008: "茶馆成员已达上限！",
      10060009: "您已经在该茶馆中！",
      10060010: "您已经申请加入该茶馆！",
      10060011: "申请加入茶馆失败",
      10060012: "拒绝申请失败",
      10060013: "添加用户到黑名单失败",
      10060014: "添加用户到茶馆失败",
      10060015: "茶馆不存在",
      10060016: "用户在黑名单内",
      10060017: "您无权解散该茶馆！",
      10060018: "解散茶馆失败",
      10060019: "没有通过申请的权限",
      10060020: "修改茶馆失败",
      10060021: "茶馆LOGO不能为空",
      10060022: "用户钻石不足",
      10060023: "修改用户失败",
      10060024: "踢出用户失败",
      10060025: "用户退出失败",
      10060026: "会长不允许退出",
      10060027: "该成员已经不在黑名单！",
      10060028: "黑名单移除失败",
      10060029: "茶馆钻石不足",
      10060030: "该用户不在茶馆内",
      10060031: "茶馆充值失败",
      10060032: "茶馆充值钻石必须大于0",
      10060033: "茶馆管理员达上限，无法任命！",
      10060034: "茶馆牌局解散清算失败",
      10060035: "茶馆名存在敏感词",
      10060036: "茶馆只允许会长充值",
      10060037: "您已不再此茶馆中",
      10060038: "没有修改茶馆信息权限",
      10060039: "没有拒绝申请权限",
      10060040: "没有添加黑名单权限",
      10060041: "没有通过申请权限",
      10060042: "没有修改用户权限",
      10060043: "没有清空用户钻石消耗权限",
      10060044: "该成员已经不在黑名单",
      10070001: "商品不存在",
      10080001: "写入订单失败",
      10080002: "用户还未首充",
      10080003: "已经领取首充奖励",
      10080004: "首充配置不存在",
      10080005: "领取首充奖励失败",
      10100001: "今日已经抽过奖",
      10100002: "抽奖错误",
      10100003: "任务不存在",
      10100004: "领取任务奖励失败",
      10110001: "获取跑马灯失败",
      10110002: "获取游戏开关失败",
      10110003: "获取游戏版本号失败",
      10110004: "获取限时免费失败",
      10120001: "今日已邀请过好友不能重复邀请",
      10120002: "邀请记录失败",
      10120003: "邀请数还没达标",
      10120004: "已领取过该奖励",
      10120005: "奖励领取失败",
      20010001: "token无效",
      20010002: "服务器维护中",
      20010004: "重复登录",
      20030018: "未经验证,非法进入房间",
      20040001: "非房主不能手动开局",
      20040002: "非手动开局游戏的房间不可手动开局",
      20040003: "此游戏不支持手动开局",
      20040004: "至少要两个人才能开局",
      20040005: "要全部准备才能开局",
      20040006: "其他人已经发起了解散申请了",
      20040007: "操作过于频繁",
      20040008: "钻石不足",
      20040009: "房间已解散",
      20040010: "旁观者无法申请解散房间",
      20040011: "重复操作"
    };
    var err_finishwaterfall = 1999;
    var NetCode = function() {
      function NetCode() {}
      NetCode.getInstance = function() {
        null == NetCode._instance && (NetCode._instance = new NetCode());
        return NetCode._instance;
      };
      NetCode.prototype.check = function(code) {
        if (code == err_finishwaterfall) return null;
        if (code) {
          if (0 == code) return null;
          var errstr = errorcodes[code];
          var msgstr = "错误码=" + code;
          errstr && (msgstr = errstr);
          return msgstr;
        }
        return null;
      };
      NetCode._instance = null;
      return NetCode;
    }();
    exports.default = NetCode;
    cc._RF.pop();
  }, {} ],
  NetErrMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3c706vhf7pN+IIntig+sEzh", "NetErrMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var RoomMgr_1 = require("./RoomMgr");
    var LocalStorage_1 = require("../Libs/LocalStorage");
    var FrameMgr_1 = require("./FrameMgr");
    var NetErrMgr = function() {
      function NetErrMgr() {}
      NetErrMgr.getInstance = function() {
        this._instance || (this._instance = new NetErrMgr());
        return this._instance;
      };
      NetErrMgr.prototype.start_module = function() {};
      NetErrMgr.prototype.dealWithError = function(code) {
        console.log("去获取自己的状态=", code, typeof code);
        switch (code) {
         case 10030021:
         case 10030020:
         case 10030024:
         case 10030041:
         case 10030053:
          console.log("发现错误码=", code);
          RoomMgr_1.default.getInstance().reqMyRoomState();
          break;

         case 20010001:
         case 10020004:
          LocalStorage_1.default.getInstance().removeWeChatToken();
          cc.audioEngine.stopAll();
          cc.game.restart();
          break;

         case 20030018:
         case 10030017:
         case 10030042:
          var okcb = function() {
            RoomMgr_1.default.getInstance().reqMyRoomState();
          };
          FrameMgr_1.default.getInstance().showMsgBox("房间已解散", okcb.bind(this));
        }
      };
      return NetErrMgr;
    }();
    exports.default = NetErrMgr;
    cc._RF.pop();
  }, {
    "../Libs/LocalStorage": "LocalStorage",
    "./FrameMgr": "FrameMgr",
    "./RoomMgr": "RoomMgr"
  } ],
  NetMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "764e60qeqNM9qtW+uuF1xO+", "NetMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameNet_1 = require("./GameNet");
    var G_NETTYPE;
    (function(G_NETTYPE) {
      G_NETTYPE[G_NETTYPE["httpPost"] = 1] = "httpPost";
      G_NETTYPE[G_NETTYPE["ws"] = 2] = "ws";
      G_NETTYPE[G_NETTYPE["httpGet"] = 3] = "httpGet";
      G_NETTYPE[G_NETTYPE["pomelo"] = 4] = "pomelo";
    })(G_NETTYPE || (G_NETTYPE = {}));
    window["G_NETTYPE"] = G_NETTYPE;
    var netdef_reqmaxtime = 5e3;
    var NetMgr = function() {
      function NetMgr() {
        this.msgindex = 0;
        this.msgrecords = {};
        this._uid = null;
        this._token = null;
        this.timer_req = null;
        this.reconnectingRecord = {};
        this.doneWithRoute = function(route, code) {
          this.msgrecords[route] && delete this.msgrecords[route];
        };
        this.timer_req = setInterval(this.checkReq.bind(this), 1);
      }
      NetMgr.getInstance = function() {
        null == NetMgr._instance && (NetMgr._instance = new NetMgr());
        return NetMgr._instance;
      };
      NetMgr.prototype.setLoginInfo = function(uid, token) {
        this._uid = uid;
        this._token = token;
      };
      NetMgr.prototype.pomeloDisconnected = function() {
        console.log("告诉网络管理pomelo断开了");
        this.reconnectingRecord[G_NETTYPE.pomelo] = true;
      };
      NetMgr.prototype.pomeloConnecting = function() {
        this.reconnectingRecord[G_NETTYPE.pomelo] = true;
      };
      NetMgr.prototype.pomeloConnected = function() {
        this.reconnectingRecord[G_NETTYPE.pomelo] && delete this.reconnectingRecord[G_NETTYPE.pomelo];
      };
      NetMgr.prototype.clearPomeloReqs = function() {
        console.log("清空pomelo记录");
        this.reconnectingRecord[G_NETTYPE.pomelo] && delete this.reconnectingRecord[G_NETTYPE.pomelo];
        for (var route in this.msgrecords) {
          var record = this.msgrecords[route];
          record.serverType == G_NETTYPE.pomelo && delete this.msgrecords[route];
        }
      };
      NetMgr.prototype.resendPomeloReqs = function() {
        console.log("重发pomelo记录");
        this.reconnectingRecord[G_NETTYPE.pomelo] && delete this.reconnectingRecord[G_NETTYPE.pomelo];
        var pomeloReSendMsgs = [];
        for (var route in this.msgrecords) {
          var record = this.msgrecords[route];
          record.serverType == G_NETTYPE.pomelo && pomeloReSendMsgs.push(record);
        }
        pomeloReSendMsgs.length > 0 && GameNet_1.default.getInstance().reSendMsgs(pomeloReSendMsgs);
      };
      NetMgr.prototype.checkReq = function() {
        var httpReSendMsgs = [];
        var webNeedReconnect = {};
        var needShowJuHua = false;
        for (var route in this.msgrecords) {
          var record = this.msgrecords[route];
          if (record.serverType == G_NETTYPE.ws) continue;
          var date = new Date();
          var time = Date.parse(date);
          needShowJuHua = true;
          if (time - record.time > netdef_reqmaxtime) {
            var date_1 = new Date();
            var time_1 = Date.parse(date_1);
            record.time = time_1;
            switch (record.serverType) {
             case G_NETTYPE.pomelo:
              webNeedReconnect[record.serverType] = true;
              record.waitreconnect = true;
              break;

             case G_NETTYPE.httpPost:
             case G_NETTYPE.httpGet:
              httpReSendMsgs.push(record);
            }
          }
        }
        httpReSendMsgs.length > 0 && GameNet_1.default.getInstance().reSendMsgs(httpReSendMsgs);
        for (var serverType in webNeedReconnect) if (!this.reconnectingRecord[serverType]) {
          this.reconnectingRecord[serverType] = true;
          switch (serverType) {
           case G_NETTYPE.pomelo:
            console.log("在这里断开了");
            GameNet_1.default.getInstance().disconnect();
            break;

           case G_NETTYPE.ws:
          }
        }
        for (var serverType in this.reconnectingRecord) needShowJuHua = true;
        var scene = cc.director.getScene();
        var juhuaNode = scene.getChildByTag(this.getJuHuaTag());
        if (juhuaNode) {
          var ctrl = juhuaNode.getComponent("MsgBoxLoadingAni");
          ctrl.updateJuHua(needShowJuHua);
        }
      };
      NetMgr.prototype.getJuHuaTag = function() {
        return 20180325;
      };
      NetMgr.prototype.clearTimer = function() {
        if (null != this.timer_req) {
          clearTimeout(this.timer_req);
          this.timer_req = null;
        }
      };
      NetMgr.prototype.destroy = function() {
        this.clearTimer();
        delete NetMgr._instance;
        NetMgr._instance = null;
      };
      NetMgr.prototype.convertMsg = function(route, msg) {
        var words = route.split(".");
        var wordslen = words.length;
        var serverType = -1;
        var ret = null;
        var newmsg = null;
        if (wordslen <= 0) return ret;
        var server = words[0];
        switch (route) {
         case "http.reqLogin":
         case "http.reqRegister":
         case "http.reqGameSwitch":
         case "http.reqPoint":
          break;

         default:
          if (null == this._token) return -1;
        }
        switch (server) {
         case "http":
          serverType = G_NETTYPE.httpPost;
          newmsg = {
            head: {
              msgindex: this.msgindex,
              token: this._token,
              route: route
            },
            body: msg
          };
          break;

         case "ws":
          serverType = G_NETTYPE.ws;
          newmsg = msg;
          newmsg.token = this._token;
          break;

         case "hget":
          serverType = G_NETTYPE.httpGet;
          break;

         default:
          serverType = G_NETTYPE.pomelo;
          msg.msgindex = this.msgindex;
        }
        var date = new Date();
        var time = Date.parse(date);
        var newRecord = {};
        newRecord["time"] = time;
        newRecord["serverType"] = serverType;
        newRecord["route"] = route;
        newRecord["msg"] = newmsg || msg;
        if (this.reconnectingRecord[newRecord["serverType"]]) newRecord["waitreconnect"] = true; else {
          this.msgrecords[route] = newRecord;
          ret = {
            serverType: serverType,
            msg: newRecord["msg"]
          };
        }
        this.msgindex++;
        return ret;
      };
      NetMgr._instance = null;
      return NetMgr;
    }();
    exports.default = NetMgr;
    cc._RF.pop();
  }, {
    "./GameNet": "GameNet"
  } ],
  NetNotify: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "98ec2ZiS8lNbaS4+7zpFoiJ", "NetNotify");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var NetNotify = function() {
      function NetNotify() {
        this.m_listenlist = [];
      }
      NetNotify.getInstance = function() {
        null == NetNotify._instance && (NetNotify._instance = new NetNotify());
        return NetNotify._instance;
      };
      NetNotify.prototype.regNotifyListener = function(listener) {
        this.m_listenlist.push(listener);
      };
      NetNotify.prototype.unregNotifyListener = function(listener) {
        console.log("移除了监听=", listener, this.m_listenlist.length);
        for (var i = 0; i < this.m_listenlist.length; ++i) if (this.m_listenlist[i] == listener) {
          this.m_listenlist.remove(i);
          break;
        }
      };
      NetNotify.prototype.dealResp = function(notifyname, msg) {
        for (var i = 0; i < this.m_listenlist.length; i++) {
          var v = this.m_listenlist[i];
          v.dealResp(notifyname, msg);
        }
      };
      NetNotify._instance = null;
      return NetNotify;
    }();
    exports.default = NetNotify;
    cc._RF.pop();
  }, {} ],
  NiuNiuFP: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d7baf+pppVEYJXf9+uaI1Oj", "NiuNiuFP");
    "use strict";
    var CMD_NIUNIU_TB = {
      MAXCOUNT: 5
    };
    var PokerCard = function PokerCard() {
      this._cardValue = 0;
    };
    PokerCard.prototype = {
      setValue: function setValue(value) {
        this.isValidValue(value) && (this._cardValue = value);
      },
      getValue: function getValue() {
        return this._cardValue;
      },
      getSuitValue: function getSuitValue() {
        return 240 & this._cardValue;
      },
      getRankValue: function getRankValue() {
        return 15 & this._cardValue;
      },
      isValidValue: function isValidValue() {
        return true;
      },
      getContent: function getContent() {
        return PokerCard.SuitTypes[this.getSuitValue()] + PokerCard.RankTypes[this.getRankValue() - 1];
      },
      equals: function equals(anotherCard) {
        return this.getValue() == anotherCard.getValue();
      }
    };
    PokerCard.SuitTypes = [ "♦", "♣", "♥", "♠", "Joker" ];
    PokerCard.RankTypes = [ "A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K" ];
    PokerCard.create = function(suitOrValue, rank) {
      var card = new PokerCard();
      if (!!card && null != suitOrValue) {
        rank ? card.setValue(16 * suitOrValue + rank) : card.setValue(suitOrValue);
        return card;
      }
      return null;
    };
    PokerCard.createCards = function(arr) {
      var cards = [];
      var str = "#### PokerCard.createCards = ";
      for (var idx in arr) {
        var card = PokerCard.create(arr[idx]);
        if (card) {
          cards.push(card);
          str += card.getContent();
          str += " ";
        }
      }
      return cards;
    };
    var NiuNiuFP = {
      _limitList: [],
      setLimitList: function setLimitList(curList) {
        this._limitList = curList;
      },
      checkTeshuBig: function checkTeshuBig(type1, type2) {
        console.log("type1= ", type1, ", index=", CONFIGS.sortList.indexOf(type1));
        console.log("type1= ", type2, ", index=", CONFIGS.sortList.indexOf(type2));
        return CONFIGS.sortList.indexOf(type1) < CONFIGS.sortList.indexOf(type2);
      },
      CardType: {
        OX_VALUE0: 0,
        OX_THREE_SAME: 11,
        OX_ORDER_NUMBER: 12,
        OX_FIVE_SAME_FLOWER: 13,
        OX_THREE_SAME_TWAIN: 14,
        OX_FOUR_SAME: 15,
        OX_STRAIGHT_FLUSH: 16,
        OX_FIVE_KING: 17,
        OX_FIVE_CALVES: 18
      },
      GetCardLogicValue: function GetCardLogicValue(cardData) {
        var card = PokerCard.create(cardData);
        var rankValue = card.getRankValue();
        var logicValue = rankValue;
        rankValue > 10 && (logicValue = 10);
        return logicValue;
      },
      GetCardOrder: function GetCardOrder(cardsData) {
        var cardsTemp = cardsData.slice(0);
        cardsTemp.sort(function(a, b) {
          var aSmall = 15 & a;
          var bSmall = 15 & b;
          if (aSmall !== bSmall) return aSmall < bSmall;
          var aBig = a >> 4;
          var bBig = b >> 4;
          return aBig < bBig;
        });
        return cardsTemp;
      },
      getWanglaiMaxValue: function getWanglaiMaxValue(cardsList, allCardsList) {
        if (3 == cardsList.length) {
          var nList = [], curValue = void 0;
          for (var _i = 0; _i < allCardsList.length; _i++) {
            curValue = parseInt(allCardsList[_i]);
            79 == curValue ? nList.splice(0, 0, curValue) : 78 == curValue || nList.push(curValue);
          }
          nList.push(78);
          return {
            resultType: 10,
            cardIdList: nList
          };
        }
        var cardsDataList = [];
        var i = void 0, residue = void 0, valueI = void 0, valueJ = void 0, curValue1 = void 0, sum = 0, cardValue = void 0;
        for (i = 0; i < cardsList.length; i++) {
          curValue1 = parseInt(cardsList[i]);
          cardValue = 15 & curValue1;
          cardsDataList[i] = {
            logicValue: curValue1,
            sumValue: cardValue > 10 ? 10 : cardValue,
            tag: i + 1
          };
          sum += cardsDataList[i].sumValue;
        }
        var OXList = {};
        for (i = 0; i < cardsList.length; i++) {
          valueI = cardsDataList[i].sumValue;
          residue = (sum - valueI) % 10;
          if (0 == residue) {
            var _nList = [];
            var curKingCard = void 0;
            for (var j = 0; j < allCardsList.length; j++) 78 == allCardsList[j] || 79 == allCardsList[j] ? curKingCard = parseInt(allCardsList[j]) : allCardsList[j] != cardsDataList[i].logicValue && _nList.push(parseInt(allCardsList[j]));
            _nList.push(curKingCard);
            _nList.push(cardsDataList[i].logicValue);
            return {
              resultType: 10,
              cardIdList: _nList
            };
          }
        }
        var curList = [], nValue = void 0, kingValue = void 0;
        for (var _i2 = 0; _i2 < allCardsList.length; _i2++) {
          nValue = allCardsList[_i2];
          78 == nValue || 79 == nValue ? kingValue = nValue : curList.push({
            logiceValue: nValue,
            sumValue: (15 & nValue) > 10 ? 10 : 15 & nValue
          });
        }
        var maxValue = 0, maxList = void 0;
        for (var _i3 = 0; _i3 < curList.length - 1; _i3++) for (var _j = _i3 + 1; _j < curList.length; _j++) {
          var _curValue = (curList[_i3].sumValue + curList[_j].sumValue) % 10;
          _curValue = 0 == _curValue ? 10 : _curValue;
          if (_curValue >= 10) {
            maxValue = 10;
            maxList = [ curList[_i3].logiceValue, curList[_j].logiceValue ];
            break;
          }
          if (_curValue > maxValue) {
            maxValue = _curValue;
            maxList = [ curList[_i3].logiceValue, curList[_j].logiceValue ];
          }
        }
        for (var _i4 = 0; _i4 < allCardsList.length; _i4++) -1 == maxList.indexOf(allCardsList[_i4]) && maxList.splice(0, 0, allCardsList[_i4]);
        return {
          resultType: maxValue,
          cardIdList: maxList
        };
      },
      getNoKingList: function getNoKingList(cardsList) {
        var curValue = void 0, curList = [];
        for (var i = 0; i < cardsList.length; i++) {
          curValue = parseInt(cardsList[i]);
          if (78 == curValue || 79 == curValue) continue;
          curList.push(curValue);
        }
        return curList;
      },
      getCardsResult: function getCardsResult(cardsData) {
        var getLogicValue = function getLogicValue(cardData) {
          var card = PokerCard.create(cardData);
          var rankValue = card.getRankValue();
          var logicValue = rankValue;
          rankValue > 10 && (logicValue = 10);
          return logicValue;
        };
        var getCardGroups = function getCardGroups(cardsData) {
          var cardGroup = [];
          var cardCount = cardsData.length;
          for (var i = 0; i < cardCount - 4; i++) for (var j = i + 1; j < cardCount - 3; j++) for (var k = j + 1; k < cardCount - 2; k++) for (var m = k + 1; m < cardCount - 1; m++) for (var n = m + 1; n < cardCount; n++) {
            var temp = [ cardsData[i], cardsData[j], cardsData[k], cardsData[m], cardsData[n] ];
            cardGroup.push(temp);
          }
          return cardGroup;
        };
        var combine = function combine(arr, start, result, count, NUM, data) {
          var nSize = arr.length;
          for (var i = start; i < nSize + 1 - count; i++) {
            result[count - 1] = i;
            if (count - 1 === 0) {
              var j;
              var index = data.length;
              data[index] = [];
              for (j = NUM - 1; j >= 0; j--) data[index].push(arr[result[j]]);
            } else combine(arr, i + 1, result, count - 1, NUM, data);
          }
        };
        var Get_OX_FIVE_CALVES = function Get_OX_FIVE_CALVES(cardsData) {
          var cardCount = cardsData.length;
          if (cardCount !== CMD_NIUNIU_TB.MAXCOUNT) return;
          var totalValue = 0;
          for (var i = 0; i < cardsData.length; i++) {
            var cardValue = 15 & cardsData[i];
            if (!(cardValue < 5)) return;
            totalValue += cardValue;
            if (totalValue > 10) return;
          }
          var resultData = {
            type: NiuNiuFP.CardType.OX_FIVE_CALVES,
            cards: cardsData
          };
          return resultData;
        };
        var Get_OX_FIVE_KING = function Get_OX_FIVE_KING(cardsData) {
          var cardCount = cardsData.length;
          if (cardCount !== CMD_NIUNIU_TB.MAXCOUNT) return;
          for (var i = 0; i < cardsData.length; i++) {
            var cardValue = 15 & cardsData[i];
            if (cardValue > 10 && cardValue < 14) continue;
            return;
          }
          var resultData = {
            type: NiuNiuFP.CardType.OX_FIVE_KING,
            cards: cardsData
          };
          return resultData;
        };
        var Get_OX_STRAIGHT_FLUSH = function Get_OX_STRAIGHT_FLUSH(cardsData) {
          var cardCount = cardsData.length;
          if (cardCount !== CMD_NIUNIU_TB.MAXCOUNT) return;
          var _arr = cardsData, curColor = void 0, lastColor = (240 & _arr[0]) >> 4;
          for (var _i5 = 0; _i5 < _arr.length; _i5++) {
            curColor = (240 & _arr[_i5]) >> 4;
            if (lastColor != curColor) return null;
          }
          _arr = _arr.sort(function(a, b) {
            return (15 & a) > (15 & b);
          });
          var t = void 0;
          var ta = void 0;
          var r = [];
          _arr.forEach(function(v) {
            if (t === (15 & v)) {
              ta.push(v);
              t++;
              return;
            }
            ta = [ v ];
            t = 1 + (15 & v);
            r.push(ta);
          });
          if (1 == r.length && r[0].length == cardsData.length) return {
            type: NiuNiuFP.CardType.OX_STRAIGHT_FLUSH,
            cards: cardsData
          };
          return null;
        };
        var Get_OX_FOUR_SAME = function Get_OX_FOUR_SAME(cardsData) {
          var _arr = cardsData, curValue = void 0, dict_value = {};
          for (var _i6 = 0; _i6 < _arr.length; _i6++) {
            curValue = 15 & _arr[_i6];
            dict_value[curValue] ? dict_value[curValue] += 1 : dict_value[curValue] = 1;
          }
          var keyList = Object.keys(dict_value);
          if (4 == dict_value[keyList[0]] || 4 == dict_value[keyList[1]]) {
            var bombResultData = {
              type: NiuNiuFP.CardType.OX_FOUR_SAME,
              cards: cardsData
            };
            return bombResultData;
          }
          return null;
        };
        var Get_OX_THREE_SAME_TWAIN = function Get_OX_THREE_SAME_TWAIN(cardsData) {
          var cardCount = cardsData.length;
          if (cardCount !== CMD_NIUNIU_TB.MAXCOUNT) return;
          var _arr = cardsData, curValue = void 0, dict_value = {};
          for (var _i7 = 0; _i7 < _arr.length; _i7++) {
            curValue = 15 & _arr[_i7];
            dict_value[curValue] ? dict_value[curValue] += 1 : dict_value[curValue] = 1;
          }
          var keyList = Object.keys(dict_value);
          var count = keyList.length;
          if (2 == count && (3 == dict_value[keyList[0]] && 2 == dict_value[keyList[1]] || 2 == dict_value[keyList[0]] && 3 == dict_value[keyList[1]])) {
            var huluResultData = {
              type: NiuNiuFP.CardType.OX_THREE_SAME_TWAIN,
              cards: cardsData
            };
            return huluResultData;
          }
          return null;
        };
        var Get_OX_FIVE_SAME_FLOWER = function Get_OX_FIVE_SAME_FLOWER(cardsData) {
          var cardCount = cardsData.length;
          if (cardCount !== CMD_NIUNIU_TB.MAXCOUNT) return;
          var cardcolor = (240 & cardsData[0]) >> 4;
          for (var i = 1; i < cardsData.length; i++) {
            var colorValue = cardsData[i] >> 4;
            if (cardcolor !== colorValue) return;
          }
          var resultData = {
            type: NiuNiuFP.CardType.OX_FIVE_SAME_FLOWER,
            cards: cardsData
          };
          return resultData;
        };
        var Get_OX_ORDER_NUMBER = function Get_OX_ORDER_NUMBER(cardsData) {
          var cardCount = cardsData.length;
          if (cardCount !== CMD_NIUNIU_TB.MAXCOUNT) return;
          var _arr = cardsData;
          _arr = _arr.sort(function(a, b) {
            return (15 & a) > (15 & b);
          });
          var t = void 0;
          var ta = void 0;
          var r = [];
          _arr.forEach(function(v) {
            if (t === (15 & v)) {
              ta.push(v);
              t++;
              return;
            }
            ta = [ v ];
            t = 1 + (15 & v);
            r.push(ta);
          });
          if (1 == r.length && r[0].length == cardsData.length) return {
            type: NiuNiuFP.CardType.OX_ORDER_NUMBER,
            cards: cardsData
          };
          return null;
        };
        var Get_OX_THREE_SAME = function Get_OX_THREE_SAME(cardsData) {
          var cardCount = cardsData.length;
          if (cardCount !== CMD_NIUNIU_TB.MAXCOUNT) return;
          var _arr = cardsData, curValue = void 0, dict_value = {};
          for (var _i8 = 0; _i8 < _arr.length; _i8++) {
            curValue = 15 & _arr[_i8];
            dict_value[curValue] ? dict_value[curValue] += 1 : dict_value[curValue] = 1;
          }
          var keyList = Object.keys(dict_value);
          var count = keyList.length;
          if (count >= 2) for (var key in dict_value) if (3 == dict_value[key]) {
            var bombResultData = {
              type: NiuNiuFP.CardType.OX_THREE_SAME,
              cards: cardsData
            };
            return bombResultData;
          }
          return null;
        };
        var Get_OX_VALUE0 = function Get_OX_VALUE0(cardsData) {
          var cardCount = cardsData.length;
          if (cardCount !== CMD_NIUNIU_TB.MAXCOUNT) return;
          var cardsTemp = cardsData.slice(0);
          var cards = PokerCard.createCards(cardsData);
          var sum = 0;
          var cardsLogicValue = [];
          for (var i = 0; i < cardCount; i++) {
            var logicValue = getLogicValue(cardsTemp[i]);
            cardsLogicValue[i] = logicValue;
            sum += logicValue;
          }
          var kingCount = 0;
          for (var i = 0; i < cardCount; i++) {
            var card = cards[i];
            78 !== card.getValue() && 79 !== card.getValue() || (kingCount += 1);
          }
          var maxValue = 0;
          var maxIndex = 0;
          var oxCount = 0;
          var bHaveKing = false;
          for (var i = 0; i < cardCount - 1; i++) for (var j = i + 1; j < cardCount; j++) {
            bHaveKing = false;
            var residue = (sum - cardsLogicValue[i] - cardsLogicValue[j]) % 10;
            if (residue > 0 && kingCount > 0) for (var k = 0; k < cardCount; k++) k !== i && k !== j && (78 !== cardsTemp[k] && 79 !== cardsTemp[k] || (bHaveKing = true));
            if (0 === residue || bHaveKing) {
              var value = cardsLogicValue[i] + cardsLogicValue[j];
              if (value > 10) if (78 === cardsTemp[i] || 79 === cardsTemp[i] || 78 === cardsTemp[j] || 79 === cardsTemp[j]) {
                bHaveKing = true;
                value = 10;
              } else value -= 10;
              if (value > maxValue) {
                maxValue = value;
                maxIndex = oxCount;
              }
              oxCount++;
            }
          }
          var resultData = {
            type: maxValue,
            cards: cardsData
          };
          return resultData;
        };
        var cardGroup = cardsData;
        var get_specialGroup = function get_specialGroup(cardsData, type) {
          var func = null;
          switch (type) {
           case NiuNiuFP.CardType.OX_FIVE_CALVES:
            func = Get_OX_FIVE_CALVES;
            break;

           case NiuNiuFP.CardType.OX_FIVE_KING:
            func = Get_OX_FIVE_KING;
            break;

           case NiuNiuFP.CardType.OX_STRAIGHT_FLUSH:
            func = Get_OX_STRAIGHT_FLUSH;
            break;

           case NiuNiuFP.CardType.OX_FOUR_SAME:
            func = Get_OX_FOUR_SAME;
            break;

           case NiuNiuFP.CardType.OX_THREE_SAME_TWAIN:
            func = Get_OX_THREE_SAME_TWAIN;
            break;

           case NiuNiuFP.CardType.OX_FIVE_SAME_FLOWER:
            func = Get_OX_FIVE_SAME_FLOWER;
            break;

           case NiuNiuFP.CardType.OX_ORDER_NUMBER:
            func = Get_OX_ORDER_NUMBER;
            break;

           case NiuNiuFP.CardType.OX_THREE_SAME:
            func = Get_OX_THREE_SAME;
          }
          return func(cardsData);
        };
        var types = CONFIGS.sortList;
        for (var i = 0; i < types.length; i++) if (-1 == this._limitList.indexOf(types[i])) {
          var result = get_specialGroup(cardGroup, types[i]);
          if (result) return result;
        }
        return {
          type: NiuNiuFP.CardType.OX_VALUE0,
          cards: cardsData
        };
      },
      GetOxCard: function GetOxCard(cardsData) {
        var cardCount = cardsData.length;
        if (cardCount !== CMD_NIUNIU_TB.MAXCOUNT) return;
        var cardsTemp = cardsData.slice(0);
        var cards = PokerCard.createCards(cardsData);
        var sum = 0;
        var cardsLogicValue = [];
        for (var i = 0; i < cardCount; i++) {
          var logicValue = this.GetCardLogicValue(cardsTemp[i]);
          cardsLogicValue[i] = logicValue;
          sum += logicValue;
        }
        var kingCount = 0;
        for (var i = 0; i < cardCount; i++) {
          var card = cards[i];
          78 !== card.getValue() && 79 !== card.getValue() || (kingCount += 1);
        }
        var maxValue = 0;
        var maxIndex = 0;
        var oxValues = [];
        var oxCount = 0;
        var bHaveKing = false;
        for (var i = 0; i < cardCount - 1; i++) for (var j = i + 1; j < cardCount; j++) {
          bHaveKing = false;
          var residue = (sum - cardsLogicValue[i] - cardsLogicValue[j]) % 10;
          if (residue > 0 && kingCount > 0) for (var k = 0; k < cardCount; k++) k !== i && k !== j && (78 !== cardsTemp[k] && 79 !== cardsTemp[k] || (bHaveKing = true));
          if (0 === residue || bHaveKing) {
            var oxValue = [];
            var count = 0;
            for (var k = 0; k < cardCount; k++) k !== i && k !== j && (oxValue[count++] = cardsTemp[k]);
            oxValue[count++] = cardsTemp[i];
            oxValue[count++] = cardsTemp[j];
            oxValues[oxCount] = oxValue;
            var value = cardsLogicValue[i] + cardsLogicValue[j];
            if (value > 10) if (78 === cardsTemp[i] || 79 === cardsTemp[i] || 78 === cardsTemp[j] || 79 === cardsTemp[j]) {
              bHaveKing = true;
              value = 10;
            } else value -= 10;
            if (value > maxValue) {
              maxValue = value;
              maxIndex = oxCount;
            }
            oxCount++;
          }
        }
        oxCount > 0 && (cardsData = oxValues[maxIndex]);
        return cardsData;
      },
      getOXResult: function getOXResult(cardsData) {
        var cardsNum = 5;
        var cardsList = [];
        var i = void 0, residue = void 0, valueI = void 0, valueJ = void 0, curValue = void 0, sum = 0, cardValue = void 0;
        for (i = 0; i < cardsNum; i++) {
          curValue = parseInt(cardsData[i]);
          cardValue = 15 & curValue;
          cardsList[i] = {
            logicValue: curValue,
            sumValue: cardValue > 10 ? 10 : cardValue,
            tag: i + 1
          };
          sum += cardsList[i].sumValue;
        }
        var OXList = {};
        for (i = 0; i < cardsNum - 1; i++) for (var j = i + 1; j < cardsNum; j++) {
          valueI = cardsList[i].sumValue;
          valueJ = cardsList[j].sumValue;
          residue = (sum - valueI - valueJ) % 10;
          if (0 == residue) {
            var oxValue = (valueI + valueJ) % 10;
            oxValue = 0 == oxValue ? 10 : oxValue;
            OXList[oxValue] = this._resortOXList(cardsList[i], cardsList[j], cardsList);
          }
        }
        var finalList = void 0;
        var oxValueList = Object.keys(OXList);
        var maxResult = 0;
        if (oxValueList && oxValueList.length > 0) {
          oxValueList.sort(function(a, b) {
            return a - b;
          });
          maxResult = oxValueList[0];
          finalList = OXList[maxResult];
        }
        finalList || (finalList = cardsList);
        var valueList = [];
        for (i = 0; i < finalList.length; i++) valueList.push(finalList[i].logicValue);
        return {
          resultType: maxResult,
          cardIdList: valueList
        };
      },
      _resortOXList: function _resortOXList(card1, card2, curList) {
        var nList = [];
        var curCard = void 0;
        for (var i = 0; i < curList.length; i++) {
          curCard = curList[i];
          curCard.tag != card1.tag && curCard.tag != card2.tag && nList.push(curCard);
        }
        nList.push(card1);
        nList.push(card2);
        return nList;
      },
      GetPublicCards: function GetPublicCards(arr1, arr2) {
        var temp = [];
        var tempArray = [];
        for (var i = 0; i < arr2.length; i++) temp[arr2[i]] = true;
        for (var i = 0; i < arr1.length; i++) temp[arr1[i]] || tempArray.push(arr1[i]);
        return tempArray;
      },
      GetResultCardType: function GetResultCardType(cardsData) {
        var cardsOrder = this.GetCardOrder(cardsData);
        var resultData = this.getCardsResult(cardsOrder);
        return resultData;
      }
    };
    var CONFIGS = {
      sortList: [ NiuNiuFP.CardType.OX_FIVE_CALVES, NiuNiuFP.CardType.OX_FOUR_SAME, NiuNiuFP.CardType.OX_THREE_SAME_TWAIN, NiuNiuFP.CardType.OX_FIVE_KING, NiuNiuFP.CardType.OX_FIVE_SAME_FLOWER, NiuNiuFP.CardType.OX_ORDER_NUMBER ]
    };
    module.exports = NiuNiuFP;
    cc._RF.pop();
  }, {} ],
  NotifyMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "89a67wMFYNBGJnKC6jEViWl", "NotifyMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var NotifyMgr = function(_super) {
      __extends(NotifyMgr, _super);
      function NotifyMgr() {
        var _this = _super.call(this) || this;
        _this.reqMap = null;
        _this.routes = {
          onNotify: _this.onNotify
        };
        _this.reqMap = {
          1: "http.reqHorseRaceLamp",
          2: "http.reqGameSwitch",
          3: "http.reqGameSite",
          4: "http.reqGameFreeList",
          5: "http.reqMyInfo",
          6: "http.reqMailList",
          7: "http.reqMyInfo",
          8: "http.reqDailyActivity"
        };
        return _this;
      }
      NotifyMgr.prototype.onNotify = function(msg) {
        var type = msg.type;
        var reqMsg = {
          gid: msg.gid
        };
        switch (type) {
         case 6:
          reqMsg = {
            class: 2
          };
        }
        var reqName = this.reqMap[type];
        if (reqName) {
          var gid = msg.gid;
          this.send_msg(reqName, reqMsg);
        }
      };
      NotifyMgr.getInstance = function() {
        this._instance || (this._instance = new NotifyMgr());
        return this._instance;
      };
      return NotifyMgr;
    }(BaseMgr_1.default);
    exports.default = NotifyMgr;
    cc._RF.pop();
  }, {
    "../Libs/BaseMgr": "BaseMgr"
  } ],
  PlatMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bcab2a63QtKOLJFsQPBBZKL", "PlatMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var UserMgr_1 = require("./UserMgr");
    var RoomMgr_1 = require("./RoomMgr");
    var GoodsCfg_1 = require("../CfgMgrs/GoodsCfg");
    var NameCfg_1 = require("../CfgMgrs/NameCfg");
    var VerifyMgr_1 = require("./VerifyMgr");
    var BetMgr_1 = require("./BetMgr");
    var LuckDrawMgr_1 = require("./LuckDrawMgr");
    var CreateRoomMgr_1 = require("./CreateRoomMgr");
    var LoginMgr_1 = require("./LoginMgr");
    var ClubMgr_1 = require("./ClubMgr");
    var ClubMemberMgr_1 = require("./ClubMemberMgr");
    var ClubGameMgr_1 = require("./ClubGameMgr");
    var ClubChatMgr_1 = require("./ClubChatMgr");
    var GameCateCfg_1 = require("../CfgMgrs/GameCateCfg");
    var JbcCfg_1 = require("../CfgMgrs/JbcCfg");
    var RoomCostCfg_1 = require("../CfgMgrs/RoomCostCfg");
    var RoomOptionCfg_1 = require("../CfgMgrs/RoomOptionCfg");
    var ChatFillterMgr_1 = require("./ChatFillterMgr");
    var GameNet_1 = require("../NetCenter/GameNet");
    var SocketNet_1 = require("../NetCenter/SocketNet");
    var RoomRuleCfg_1 = require("../CfgMgrs/RoomRuleCfg");
    var UserDefaultCfg_1 = require("../CfgMgrs/UserDefaultCfg");
    var GameHelpCfg_1 = require("../CfgMgrs/GameHelpCfg");
    var NotifyMgr_1 = require("./NotifyMgr");
    var MarqueMgr_1 = require("./MarqueMgr");
    var TaskMgr_1 = require("./TaskMgr");
    var ShareMgr_1 = require("./ShareMgr");
    var QuickAudioCfg_1 = require("../CfgMgrs/QuickAudioCfg");
    var GameResCfg_1 = require("../CfgMgrs/GameResCfg");
    var GameAudioCfg_1 = require("../CfgMgrs/GameAudioCfg");
    var redPushMgr_1 = require("./redPushMgr");
    var AudioCfg_1 = require("../CfgMgrs/AudioCfg");
    var YySdk_1 = require("../SdkMgrs/YySdk");
    var GameFreeMgr_1 = require("./GameFreeMgr");
    var CreateRoomOptionCfg_1 = require("../CfgMgrs/CreateRoomOptionCfg");
    var RichIconCfg_1 = require("../CfgMgrs/RichIconCfg");
    var ProductSettingCfg_1 = require("../CfgMgrs/ProductSettingCfg");
    var PlatMgr = function(_super) {
      __extends(PlatMgr, _super);
      function PlatMgr() {
        var _this = _super.call(this) || this;
        _this.loadprocess = null;
        _this.loadarr = null;
        _this.totalcount = null;
        _this.routes = null;
        _this.completecb = null;
        _this.autoshowad = true;
        _this.cfgs = [ ProductSettingCfg_1.default, GoodsCfg_1.default, GameCateCfg_1.default, JbcCfg_1.default, NameCfg_1.default, RoomCostCfg_1.default, RoomOptionCfg_1.default, RoomRuleCfg_1.default, UserDefaultCfg_1.default, GameHelpCfg_1.default, GameAudioCfg_1.default, QuickAudioCfg_1.default, GameResCfg_1.default, AudioCfg_1.default, CreateRoomOptionCfg_1.default, RichIconCfg_1.default ];
        _this.loadprocess = 0;
        _this.loadarr = [ function() {
          UserMgr_1.default.getInstance().reqMyInfo();
        }, function() {
          RoomMgr_1.default.getInstance().reqMyRoomState();
        }, function() {
          ChatFillterMgr_1.default.getInstance().reqFilterWords();
        } ];
        _this.totalcount = _this.loadarr.length;
        _this.routes = {
          "http.reqMyInfo": _this.http_reqMyInfo,
          "http.reqMyRoomState": _this.http_reqMyRoomState
        };
        return _this;
      }
      PlatMgr.prototype.http_reqMyInfo = function(msg) {
        this.checkIfAllLoaded();
      };
      PlatMgr.prototype.isAutoShowAd = function() {
        return this.autoshowad;
      };
      PlatMgr.prototype.disableAutoShowAd = function() {
        this.autoshowad = false;
      };
      PlatMgr.prototype.http_reqMyRoomState = function(msg) {
        this.checkIfAllLoaded();
      };
      PlatMgr.prototype.checkIfAllLoaded = function() {
        this.loadprocess = this.loadprocess + 1;
        this.loadprocess >= this.totalcount && this.completecb();
      };
      PlatMgr.prototype.initPlat = function(completecb) {
        GameNet_1.default.getInstance();
        SocketNet_1.default.getInstance();
        YySdk_1.default.getInstance();
        ChatFillterMgr_1.default.getInstance();
        VerifyMgr_1.default.getInstance();
        BetMgr_1.default.getInstance();
        RoomMgr_1.default.getInstance();
        ClubMgr_1.default.getInstance();
        ClubMemberMgr_1.default.getInstance();
        ClubGameMgr_1.default.getInstance();
        ClubChatMgr_1.default.getInstance();
        LuckDrawMgr_1.default.getInstance();
        CreateRoomMgr_1.default.getInstance();
        MarqueMgr_1.default.getInstance();
        NotifyMgr_1.default.getInstance();
        TaskMgr_1.default.getInstance();
        ShareMgr_1.default.getInstance();
        GameFreeMgr_1.default.getInstance();
        redPushMgr_1.default.getInstance();
        this.completecb = completecb;
        this.loadBaseInfo();
      };
      PlatMgr.prototype.loadBaseInfo = function() {
        for (var i = 0; i < this.totalcount; i++) this.loadarr[i]();
      };
      PlatMgr.prototype.enterPlat = function() {
        var msg = {
          token: LoginMgr_1.default.getInstance().getToken()
        };
        this.send_msg("connector.entryHandler.enterPlat", msg);
      };
      PlatMgr.prototype.enterGameSvr = function() {
        var msg = {
          token: LoginMgr_1.default.getInstance().getToken()
        };
        this.send_msg("connector.entryHandler.enterGameSvr", msg);
      };
      PlatMgr.getInstance = function() {
        this._instance || (this._instance = new PlatMgr());
        return this._instance;
      };
      PlatMgr.prototype.loadCfgs = function() {
        for (var i = 0; i < this.cfgs.length; ++i) this.cfgs[i].getInstance().load();
      };
      PlatMgr.prototype.allCfgLoaded = function() {
        for (var i = 0; i < this.cfgs.length; ++i) if (!this.cfgs[i].getInstance().isLoaded()) return false;
        return true;
      };
      return PlatMgr;
    }(BaseMgr_1.default);
    exports.default = PlatMgr;
    cc._RF.pop();
  }, {
    "../CfgMgrs/AudioCfg": "AudioCfg",
    "../CfgMgrs/CreateRoomOptionCfg": "CreateRoomOptionCfg",
    "../CfgMgrs/GameAudioCfg": "GameAudioCfg",
    "../CfgMgrs/GameCateCfg": "GameCateCfg",
    "../CfgMgrs/GameHelpCfg": "GameHelpCfg",
    "../CfgMgrs/GameResCfg": "GameResCfg",
    "../CfgMgrs/GoodsCfg": "GoodsCfg",
    "../CfgMgrs/JbcCfg": "JbcCfg",
    "../CfgMgrs/NameCfg": "NameCfg",
    "../CfgMgrs/ProductSettingCfg": "ProductSettingCfg",
    "../CfgMgrs/QuickAudioCfg": "QuickAudioCfg",
    "../CfgMgrs/RichIconCfg": "RichIconCfg",
    "../CfgMgrs/RoomCostCfg": "RoomCostCfg",
    "../CfgMgrs/RoomOptionCfg": "RoomOptionCfg",
    "../CfgMgrs/RoomRuleCfg": "RoomRuleCfg",
    "../CfgMgrs/UserDefaultCfg": "UserDefaultCfg",
    "../Libs/BaseMgr": "BaseMgr",
    "../NetCenter/GameNet": "GameNet",
    "../NetCenter/SocketNet": "SocketNet",
    "../SdkMgrs/YySdk": "YySdk",
    "./BetMgr": "BetMgr",
    "./ChatFillterMgr": "ChatFillterMgr",
    "./ClubChatMgr": "ClubChatMgr",
    "./ClubGameMgr": "ClubGameMgr",
    "./ClubMemberMgr": "ClubMemberMgr",
    "./ClubMgr": "ClubMgr",
    "./CreateRoomMgr": "CreateRoomMgr",
    "./GameFreeMgr": "GameFreeMgr",
    "./LoginMgr": "LoginMgr",
    "./LuckDrawMgr": "LuckDrawMgr",
    "./MarqueMgr": "MarqueMgr",
    "./NotifyMgr": "NotifyMgr",
    "./RoomMgr": "RoomMgr",
    "./ShareMgr": "ShareMgr",
    "./TaskMgr": "TaskMgr",
    "./UserMgr": "UserMgr",
    "./VerifyMgr": "VerifyMgr",
    "./redPushMgr": "redPushMgr"
  } ],
  PlazaCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a1d8fQqDH5BxKeD66Gco1eo", "PlazaCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var PlatMgr_1 = require("../../GameMgrs/PlatMgr");
    var ClubMgr_1 = require("../../GameMgrs/ClubMgr");
    var GpsSdk_1 = require("../../SdkMgrs/GpsSdk");
    var ClubChatMgr_1 = require("../../GameMgrs/ClubChatMgr");
    var RoomMgr_1 = require("../../GameMgrs/RoomMgr");
    var SwitchMgr_1 = require("../../GameMgrs/SwitchMgr");
    var AudioMgr_1 = require("../../GameMgrs/AudioMgr");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var MarqueMgr_1 = require("../../GameMgrs/MarqueMgr");
    var PointMgr_1 = require("../../GameMgrs/PointMgr");
    var RechargeMgr_1 = require("../../GameMgrs/RechargeMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.announceSwitch = null;
        _this.clipboardText = "";
        _this.isLoadingGame = false;
        _this.announceSwitch = SwitchMgr_1.default.getInstance().get_switch_notice();
        return _this;
      }
      Model.prototype.updateSwitch = function(msg) {
        this.announceSwitch = msg.cfg.switch_notice;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          prefab_Background: ctrl.Prefab_Background,
          prefab_Button_middle: ctrl.Prefab_Button_middle,
          prefab_Down_infoumation: ctrl.Prefab_Down_infoumation,
          prefab_Rank_list: ctrl.Prefab_Rank_list,
          prefab_The_announcement: ctrl.Prefab_The_announcement,
          prefab_Up_information: ctrl.Prefab_Up_information
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.addPrefabNode(this.ui.prefab_Background);
        this.addPrefabNode(this.ui.prefab_Button_middle);
        this.addPrefabNode(this.ui.prefab_Down_infoumation);
        this.addPrefabNode(this.ui.prefab_The_announcement);
        this.addPrefabNode(this.ui.prefab_Up_information);
      };
      return View;
    }(BaseView_1.default);
    var PlazaCtrl = function(_super) {
      __extends(PlazaCtrl, _super);
      function PlazaCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.Prefab_Background = null;
        _this.Prefab_Button_middle = null;
        _this.Prefab_Down_infoumation = null;
        _this.Prefab_Rank_list = null;
        _this.Prefab_The_announcement = null;
        _this.Prefab_Up_information = null;
        _this.bShowExitDlg = false;
        return _this;
      }
      PlazaCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        AudioMgr_1.default.getInstance().play("背景音乐1");
        MarqueMgr_1.default.getInstance().reqHorseRaceLamp();
        PointMgr_1.default.getInstance().enterHallPoint();
        RechargeMgr_1.default.getInstance().reqReqGoodsList();
      };
      PlazaCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqMyRoomState": this.http_reqMyRoomState,
          "connector.entryHandler.enterPlat": this.connector_entryHandler_enterPlat,
          "connector.entryHandler.enterGameSvr": this.connector_entryHandler_enterGameSvr,
          "http.reqGameSwitch": this.http_reqGameSwitch,
          "http.reqFangKaCfg": this.http_reqFangKaCfg
        };
      };
      PlazaCtrl.prototype.connector_entryHandler_enterPlat = function() {
        PlatMgr_1.default.getInstance().loadBaseInfo();
      };
      PlazaCtrl.prototype.connector_entryHandler_enterGameSvr = function(msg) {
        if (this.model.isLoadingGame) return;
        AudioMgr_1.default.getInstance().stopbackgroudMusic();
        this.start_sub_module(G_MODULE.LoadingGame);
        this.model.isLoadingGame = true;
      };
      PlazaCtrl.prototype.EnterBackground = function() {
        console.log("切换到后台");
      };
      PlazaCtrl.prototype.EnterForeground = function() {
        var password = this.getRoomPassword();
        console.log("剪切板是否有 password?", password);
        password && RoomMgr_1.default.getInstance().reqFangKaCfg(password);
        ClubMgr_1.default.getInstance().reqClubList();
      };
      PlazaCtrl.prototype.http_reqMyRoomState = function(msg) {
        cc.sys.isNative && (this.model.clipboardText = G_PLATFORM.gainToClipboard());
        if (!msg.roomUserInfo) {
          var password = this.getRoomPassword();
          console.log("剪切板是否有 password?", password);
          if (password) {
            RoomMgr_1.default.getInstance().reqFangKaCfg(password);
            return;
          }
          var clubid = this.getClubId();
          if (clubid) {
            ClubMgr_1.default.getInstance().reqClubApplyJoin(Number(clubid));
            return;
          }
          if (PlatMgr_1.default.getInstance().isAutoShowAd()) {
            if (2 == this.model.announceSwitch) return;
            this.start_sub_module(G_MODULE.Announcement);
            PlatMgr_1.default.getInstance().disableAutoShowAd();
          }
        }
      };
      PlazaCtrl.prototype.getRoomPassword = function() {
        if (!cc.sys.isNative) return null;
        console.log("设备剪切板字符串:", this.model.clipboardText);
        var password = null;
        try {
          var obj = this.model.clipboardText && JSON.parse(this.model.clipboardText);
          obj && obj.password && 6 == obj.password.length && (password = obj.password);
        } catch (e) {
          console.log("剪切板字符串转 JSON 失败", e);
        }
        return password;
      };
      PlazaCtrl.prototype.getClubId = function() {
        if (!cc.sys.isNative) return null;
        console.log("设备剪切板字符串:", this.model.clipboardText);
        var clubid = null;
        try {
          var obj = this.model.clipboardText && JSON.parse(this.model.clipboardText);
          obj && obj.clubid && (clubid = obj.clubid);
        } catch (e) {
          console.log("剪切板字符串转 JSON 失败", e);
        }
        return clubid;
      };
      PlazaCtrl.prototype.http_reqFangKaCfg = function() {};
      PlazaCtrl.prototype.http_reqGameSwitch = function(msg) {
        this.model.updateSwitch(msg);
      };
      PlazaCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          backPressed: this.backPressed,
          onGainToClipboard: this.http_reqMyRoomState,
          EnterBackground: this.EnterBackground,
          EnterForeground: this.EnterForeground
        };
      };
      PlazaCtrl.prototype.exitGameCb = function() {
        cc.game.end();
      };
      PlazaCtrl.prototype.cancelExitCb = function() {
        this.bShowExitDlg = false;
      };
      PlazaCtrl.prototype.backPressed = function() {
        if (this.bShowExitDlg) return;
        FrameMgr_1.default.getInstance().showDialog("确定离开", this.exitGameCb.bind(this), "系统提示", this.cancelExitCb.bind(this));
        this.bShowExitDlg = true;
      };
      PlazaCtrl.prototype.connectUi = function() {};
      PlazaCtrl.prototype.initPlatFinish = function() {};
      PlazaCtrl.prototype.start = function() {
        this.isIPhoneX() && this.resetDesignResolution(this.node.getComponent(cc.Canvas));
        PlatMgr_1.default.getInstance().initPlat(this.initPlatFinish.bind(this));
        ClubMgr_1.default.getInstance().reqClubList();
        GpsSdk_1.default.getInstance().sendGpsInfo();
        ClubChatMgr_1.default.getInstance().reqWSUrl();
      };
      __decorate([ property(cc.Prefab) ], PlazaCtrl.prototype, "Prefab_Background", void 0);
      __decorate([ property(cc.Prefab) ], PlazaCtrl.prototype, "Prefab_Button_middle", void 0);
      __decorate([ property(cc.Prefab) ], PlazaCtrl.prototype, "Prefab_Down_infoumation", void 0);
      __decorate([ property(cc.Prefab) ], PlazaCtrl.prototype, "Prefab_Rank_list", void 0);
      __decorate([ property(cc.Prefab) ], PlazaCtrl.prototype, "Prefab_The_announcement", void 0);
      __decorate([ property(cc.Prefab) ], PlazaCtrl.prototype, "Prefab_Up_information", void 0);
      PlazaCtrl = __decorate([ ccclass ], PlazaCtrl);
      return PlazaCtrl;
    }(BaseCtrl_1.default);
    exports.default = PlazaCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/AudioMgr": "AudioMgr",
    "../../GameMgrs/ClubChatMgr": "ClubChatMgr",
    "../../GameMgrs/ClubMgr": "ClubMgr",
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/MarqueMgr": "MarqueMgr",
    "../../GameMgrs/PlatMgr": "PlatMgr",
    "../../GameMgrs/PointMgr": "PointMgr",
    "../../GameMgrs/RechargeMgr": "RechargeMgr",
    "../../GameMgrs/RoomMgr": "RoomMgr",
    "../../GameMgrs/SwitchMgr": "SwitchMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView",
    "../../SdkMgrs/GpsSdk": "GpsSdk"
  } ],
  PointMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "89f6bCQd81HvIXh+Yxqaelx", "PointMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var MyUdid_1 = require("../Libs/MyUdid");
    var PointMgr = function(_super) {
      __extends(PointMgr, _super);
      function PointMgr() {
        var _this = _super.call(this) || this;
        _this.routes = null;
        _this.routes = {};
        _this.getID();
        return _this;
      }
      PointMgr.prototype.getID = function() {
        this.ID = MyUdid_1.default();
      };
      PointMgr.prototype.lunchPoint = function() {};
      PointMgr.prototype.wxLoginPoint = function() {};
      PointMgr.prototype.enterHallPoint = function() {};
      PointMgr.prototype.sendmsg = function(type) {
        var msg = {};
        if (cc.sys.os == cc.sys.OS_ANDROID || cc.sys.os == cc.sys.OS_IOS) {
          msg = {
            type: type,
            _imei: this.ID
          };
          this.send_msg("http.reqPoint", msg);
        }
      };
      PointMgr.getInstance = function() {
        this._instance || (this._instance = new PointMgr());
        return this._instance;
      };
      return PointMgr;
    }(BaseMgr_1.default);
    exports.default = PointMgr;
    cc._RF.pop();
  }, {
    "../Libs/BaseMgr": "BaseMgr",
    "../Libs/MyUdid": "MyUdid"
  } ],
  PoolMaJiang3DCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "93e90F7e09PXbiBbDkWYVRy", "PoolMaJiang3DCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var MahjongGeneral_1 = require("./MahjongGeneral");
    var MahjongDef_1 = require("./MahjongDef");
    var Gray = new cc.Color(156, 189, 228), White = new cc.Color(255, 255, 255);
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.seatid = null;
        _this.logicseatid = null;
        _this.player = null;
        _this.chosencardsindexes = [];
        _this.jinRed = 255;
        _this.jinGreen = 255;
        _this.jinBlue = 255;
        _this.jinColor = White;
        _this.mahjongResMgr = RoomMgr_1.default.getInstance().getResMgr();
        _this.mahjongLogic = RoomMgr_1.default.getInstance().getLogic();
        _this.mahjongDef = RoomMgr_1.default.getInstance().getDef();
        _this.mahjongAudio = RoomMgr_1.default.getInstance().getAudio();
        _this.clear();
        return _this;
      }
      Model.prototype.initSeat = function(seatid) {
        this.seatid = seatid;
      };
      Model.prototype.updateLogicId = function() {
        this.logicseatid = RoomMgr_1.default.getInstance().getLogicSeatId(this.seatid);
        if (null == this.logicseatid) return;
        this.player = this.mahjongLogic.getInstance().players[this.logicseatid];
      };
      Model.prototype.clear = function() {};
      Model.prototype.recover = function() {};
      Model.prototype.updateSelFlag = function(cardvalue) {
        this.chosencardsindexes = [];
        var cardpool = this.player.cardpool;
        for (var index = 0; index < cardpool.length; ++index) cardpool[index] == cardvalue && this.chosencardsindexes.push(index);
      };
      Model.prototype.setJinColor = function(colorR, colorG, colorB) {
        this.jinRed = colorR;
        this.jinGreen = colorG;
        this.jinBlue = colorB;
        this.jinColor = new cc.Color(this.jinRed, this.jinGreen, this.jinBlue);
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          signSpriteList: [],
          jinList: [],
          guangbiaoList: [],
          node_outcard: null,
          node_effectCard: null,
          node_effectCardJin: null,
          node_effectCardSign: null,
          effectList: [],
          hueffectList: []
        };
        _this.debug = null;
        _this.poolcard = null;
        _this.node = ctrl.node;
        _this.debug = false;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.poolcard = [];
        this.ui.node_outcard = ctrl.node_outcard.getChildByName("sign");
        this.ui.node_effectCard = ctrl.node_effectCard;
        this.ui.node_effectCardSign = this.ui.node_effectCard.parent.getChildByName("sign").getComponent(cc.Sprite);
        this.ui.node_effectCardJin = this.ui.node_effectCard.parent.getChildByName("jin");
        var count = this.node.childrenCount;
        for (var i = 0; i < count - 1; ++i) {
          var majiang_node = this.node.getChildByName("Majiang_" + i);
          if (!majiang_node) continue;
          this.poolcard.push(majiang_node);
          this.ui.signSpriteList.push(majiang_node.getChildByName("sign").getComponent(cc.Sprite));
          this.ui.jinList.push(majiang_node.getChildByName("jin"));
          this.ui.guangbiaoList.push(majiang_node.getChildByName("guangbiao"));
          this.ui.effectList.push(majiang_node.getChildByName("effect"));
          this.ui.hueffectList.push(majiang_node.getChildByName("hueffect"));
          majiang_node.getChildByName("hueffect").getComponent(cc.Animation).on("finished", this.onhueffectFinished, this);
          majiang_node.getChildByName("guangbiao").active = false;
        }
        this.clear();
      };
      View.prototype.updatePool = function() {
        var index = this.model.player.cardpool.length - 1;
        var value = this.model.player.cardpool[index];
        var card = this.poolcard[index];
        card.active = true;
        this.ui.signSpriteList[index].spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(value);
        var isJoker = MahjongGeneral_1.MahjongGeneral.isJoker(value);
        this.ui.jinList[index].active = isJoker;
        card.getChildByName("MajiangBg").color = isJoker ? this.model.jinColor : White;
        this.hideGuangbiao();
        this.ui.guangbiaoList[index].active = true;
        this.ui.guangbiaoList[index].getComponent(cc.Animation).play();
      };
      View.prototype.showhueffect = function() {
        var index = this.model.player.cardpool.length - 1;
        this.ui.hueffectList[index].getComponent(cc.Animation).play();
      };
      View.prototype.onhueffectFinished = function() {
        var index = this.model.player.cardpool.length;
        var card = this.poolcard[index - 1];
        card.active = false;
      };
      View.prototype.hideGuangbiao = function() {
        var count = this.ui.guangbiaoList.length;
        for (var i = 0; i < count; ++i) this.ui.guangbiaoList[i].active = false;
      };
      View.prototype.clear = function() {
        for (var i = 0; i < this.poolcard.length; ++i) this.poolcard[i].active = false;
        this.ui.node_outcard.parent.parent.active = false;
      };
      View.prototype.hideoutcard = function() {
        this.ui.node_outcard.parent.parent.active = false;
      };
      View.prototype.recover = function() {
        this.clear();
        for (var index = 0; index < this.model.player.cardpool.length; ++index) {
          var value = this.model.player.cardpool[index];
          var isJoker = MahjongGeneral_1.MahjongGeneral.isJoker(value);
          var card = this.poolcard[index];
          card.active = true;
          this.ui.jinList[index].active = isJoker;
          card.getChildByName("MajiangBg").color = isJoker ? this.model.jinColor : White;
          this.ui.signSpriteList[index].spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(value);
        }
      };
      View.prototype.reducePool = function() {
        var index = this.model.player.cardpool.length;
        var card = this.poolcard[index];
        card.active = false;
      };
      View.prototype.showoutcard = function(value) {
        this.ui.node_outcard.getComponent(cc.Sprite).spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(value);
        var isJoker = MahjongGeneral_1.MahjongGeneral.isJoker(value);
        this.ui.node_outcard.parent.getChildByName("jin").active = isJoker;
      };
      View.prototype.updateSelFlag = function() {
        for (var i = 0; i < this.model.chosencardsindexes.length; ++i) {
          var index = this.model.chosencardsindexes[i];
          var card = this.poolcard[index];
          var cardvalue = this.model.player.cardpool[index];
          MahjongGeneral_1.MahjongGeneral.isJoker(cardvalue) || (card.getChildByName("MajiangBg").color = Gray);
        }
      };
      View.prototype.resetSelFlag = function() {
        for (var index = 0; index < this.poolcard.length; ++index) {
          var card = this.poolcard[index];
          var cardvalue = this.model.player.cardpool[index];
          MahjongGeneral_1.MahjongGeneral.isJoker(cardvalue) || (card.getChildByName("MajiangBg").color = White);
        }
      };
      View.prototype.playOutcardEffect = function(callback) {
        if ("function" != typeof callback) return;
        this.ui.node_effectCard.parent.active = true;
        var originalPos = this.ui.node_effectCard.parent.getPosition();
        var index = this.model.player.cardpool.length - 1;
        var card = this.poolcard[index];
        var value = this.model.player.cardpool[index];
        var isJoker = MahjongGeneral_1.MahjongGeneral.isJoker(value);
        this.ui.node_effectCardSign.spriteFrame = this.model.mahjongResMgr.getInstance().getCardSpriteFrame(value);
        this.ui.node_effectCardJin.active = isJoker;
        this.ui.node_effectCard.color = isJoker ? this.model.jinColor : White;
        var plyEndPos = card.getChildByName("MajiangBg").getPosition();
        var cardPos = card.getPosition();
        var self = this;
        3 == this.model.seatid ? this.ui.node_effectCard.parent.runAction(cc.sequence(cc.moveTo(.1, cc.p(plyEndPos.x, -plyEndPos.y + cardPos.y)), cc.callFunc(function() {
          self.ui.node_effectCard.parent.setPosition(originalPos);
          self.ui.node_effectCard.parent.active = false;
          self.ui.effectList[index].getComponent(cc.Animation).play();
        }), cc.callFunc(function() {
          callback();
        }))) : this.ui.node_effectCard.parent.runAction(cc.sequence(cc.moveTo(.1, cc.p(plyEndPos.x, plyEndPos.y + cardPos.y)), cc.callFunc(function() {
          self.ui.node_effectCard.parent.setPosition(originalPos);
          self.ui.node_effectCard.parent.active = false;
          self.ui.effectList[index].getComponent(cc.Animation).play();
        }), cc.callFunc(function() {
          callback();
        })));
      };
      return View;
    }(BaseView_1.default);
    var QzmjCardPoolCtrl = function(_super) {
      __extends(QzmjCardPoolCtrl, _super);
      function QzmjCardPoolCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.seatId = 0;
        _this.node_outcard = null;
        _this.node_effectCard = null;
        _this.jinRed = 0;
        _this.jinGreen = 0;
        _this.jinBlue = 0;
        return _this;
      }
      QzmjCardPoolCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.model.setJinColor(this.jinRed, this.jinGreen, this.jinBlue);
        this.model.initSeat(this.seatId);
      };
      QzmjCardPoolCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onOp: this.onOp,
          onProcess: this.onProcess,
          onSyncData: this.onSyncData,
          "http.reqSettle": this.http_reqSettle
        };
      };
      QzmjCardPoolCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          usersUpdated: this.usersUpdated,
          mj_chosecard: this.mj_chosecard
        };
      };
      QzmjCardPoolCtrl.prototype.mj_chosecard = function(cardvalue) {
        if (null == this.model.logicseatid) return;
        this.model.updateSelFlag(cardvalue);
        this.view.resetSelFlag();
        this.view.updateSelFlag();
      };
      QzmjCardPoolCtrl.prototype.connectUi = function() {};
      QzmjCardPoolCtrl.prototype.start = function() {};
      QzmjCardPoolCtrl.prototype.onSyncData = function() {
        if (null == this.model.logicseatid) return;
        this.model.recover();
        this.view.recover();
      };
      QzmjCardPoolCtrl.prototype.usersUpdated = function() {
        this.model.clear();
        this.view.clear();
        this.model.updateLogicId();
      };
      QzmjCardPoolCtrl.prototype.onOp = function(msg) {
        if (null == this.model.logicseatid) return;
        this.view.resetSelFlag();
        if (this.model.logicseatid != this.model.mahjongLogic.getInstance().curseat) {
          this.view.hideGuangbiao();
          this.ui.node_outcard.parent.parent.active = false;
          return;
        }
        var op = MahjongDef_1.MahjongDef.op_cfg[msg.event];
        if (op == MahjongDef_1.MahjongDef.op_chupai) if (msg.opseatid != RoomMgr_1.default.getInstance().getMySeatId()) {
          this.view.showoutcard(msg.card);
          this.view.playOutcardEffect(function() {});
          this.op_chupai(msg);
        } else {
          var self_1 = this;
          this.view.playOutcardEffect(function() {
            self_1.op_chupai(msg);
          });
        } else if (op == MahjongDef_1.MahjongDef.op_gaipai) this.view.updatePool(); else if (op == MahjongDef_1.MahjongDef.op_chi || op == MahjongDef_1.MahjongDef.op_peng || op == MahjongDef_1.MahjongDef.op_gang) {
          if (this.model.logicseatid == this.model.mahjongLogic.getInstance().curseat) {
            this.model.cardpool = this.model.player.cardpool;
            this.view.reducePool();
            this.ui.node_outcard.parent.parent.active = false;
          }
        } else if (op == MahjongDef_1.MahjongDef.op_hu || op == MahjongDef_1.MahjongDef.op_qianggang_hu) {
          console.log("poolmajiang", msg, this.model.mahjongLogic.getInstance().curseat, this.model.logicseatid);
          this.view.showhueffect();
        }
      };
      QzmjCardPoolCtrl.prototype.onProcess = function(msg) {
        if (null == this.model.logicseatid) return;
        msg.process == MahjongDef_1.MahjongDef.process_ready && this.process_ready(msg);
      };
      QzmjCardPoolCtrl.prototype.process_ready = function(msg) {
        this.model.clear();
        this.view.clear();
      };
      QzmjCardPoolCtrl.prototype.op_chupai = function(msg) {
        this.view.updatePool();
      };
      QzmjCardPoolCtrl.prototype.http_reqSettle = function() {
        this.view.hideoutcard();
      };
      __decorate([ property ], QzmjCardPoolCtrl.prototype, "seatId", void 0);
      __decorate([ property({
        tooltip: "麻将出牌提示",
        type: cc.Node
      }) ], QzmjCardPoolCtrl.prototype, "node_outcard", void 0);
      __decorate([ property({
        tooltip: "打出麻将特效",
        type: cc.Node
      }) ], QzmjCardPoolCtrl.prototype, "node_effectCard", void 0);
      __decorate([ property ], QzmjCardPoolCtrl.prototype, "jinRed", void 0);
      __decorate([ property ], QzmjCardPoolCtrl.prototype, "jinGreen", void 0);
      __decorate([ property ], QzmjCardPoolCtrl.prototype, "jinBlue", void 0);
      QzmjCardPoolCtrl = __decorate([ ccclass ], QzmjCardPoolCtrl);
      return QzmjCardPoolCtrl;
    }(BaseCtrl_1.default);
    exports.default = QzmjCardPoolCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "./MahjongDef": "MahjongDef",
    "./MahjongGeneral": "MahjongGeneral"
  } ],
  Prefab_AccountBindCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9611fly+GNE35oVikTO4owH", "Prefab_AccountBindCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {};
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {};
      return View;
    }(BaseView_1.default);
    var Prefab_AccountBindCtrl = function(_super) {
      __extends(Prefab_AccountBindCtrl, _super);
      function Prefab_AccountBindCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.CloseBtn = null;
        _this.WeChatBind = null;
        _this.MobileBind = null;
        return _this;
      }
      Prefab_AccountBindCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_AccountBindCtrl.prototype.defineNetEvents = function() {};
      Prefab_AccountBindCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_AccountBindCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.CloseBtn, this._onClick_Close, "兑换码");
        this.connect(G_UiType.image, this.WeChatBind, this._onClick_WeChatBind, "绑定微信");
        this.connect(G_UiType.image, this.MobileBind, this._onClick_MobileBind, "绑定手机");
      };
      Prefab_AccountBindCtrl.prototype.start = function() {};
      Prefab_AccountBindCtrl.prototype._onClick_Close = function() {
        this.finish();
      };
      Prefab_AccountBindCtrl.prototype._onClick_WeChatBind = function() {};
      Prefab_AccountBindCtrl.prototype._onClick_MobileBind = function() {};
      __decorate([ property({
        tooltip: "关闭按钮",
        type: cc.Node
      }) ], Prefab_AccountBindCtrl.prototype, "CloseBtn", void 0);
      __decorate([ property({
        tooltip: "绑定微信按钮",
        type: cc.Node
      }) ], Prefab_AccountBindCtrl.prototype, "WeChatBind", void 0);
      __decorate([ property({
        tooltip: "绑定手机按钮",
        type: cc.Node
      }) ], Prefab_AccountBindCtrl.prototype, "MobileBind", void 0);
      Prefab_AccountBindCtrl = __decorate([ ccclass ], Prefab_AccountBindCtrl);
      return Prefab_AccountBindCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_AccountBindCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_AgencyBindCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6fb50/nzItJdKmy36IM1n37", "Prefab_AgencyBindCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {};
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {};
      return View;
    }(BaseView_1.default);
    var Prefab_AgencyBindCtrl = function(_super) {
      __extends(Prefab_AgencyBindCtrl, _super);
      function Prefab_AgencyBindCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.CloseBtn = null;
        _this.BindBtn = null;
        _this.InvateEdit = null;
        return _this;
      }
      Prefab_AgencyBindCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_AgencyBindCtrl.prototype.defineNetEvents = function() {};
      Prefab_AgencyBindCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_AgencyBindCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.edit, this.InvateEdit.node, this._onEdit_InvateEdit, "邀请码输入框");
        this.connect(G_UiType.image, this.BindBtn, this._onClick_Bind, "绑定");
        this.connect(G_UiType.image, this.CloseBtn, this._onClick_Close, "关闭");
      };
      Prefab_AgencyBindCtrl.prototype.start = function() {};
      Prefab_AgencyBindCtrl.prototype._onEdit_InvateEdit = function(event) {};
      Prefab_AgencyBindCtrl.prototype._onClick_Bind = function(event) {};
      Prefab_AgencyBindCtrl.prototype._onClick_Close = function(event) {
        this.finish();
      };
      __decorate([ property({
        tooltip: "关闭按钮",
        type: cc.Node
      }) ], Prefab_AgencyBindCtrl.prototype, "CloseBtn", void 0);
      __decorate([ property({
        tooltip: "绑定按钮",
        type: cc.Node
      }) ], Prefab_AgencyBindCtrl.prototype, "BindBtn", void 0);
      __decorate([ property({
        tooltip: "邀请码输入框",
        type: cc.EditBox
      }) ], Prefab_AgencyBindCtrl.prototype, "InvateEdit", void 0);
      Prefab_AgencyBindCtrl = __decorate([ ccclass ], Prefab_AgencyBindCtrl);
      return Prefab_AgencyBindCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_AgencyBindCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_AnnouncementPanelCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "89be7Qq62VJOLS54t4DGdES", "Prefab_AnnouncementPanelCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          closeBtn: ctrl.closeBtn,
          webPage_content: ctrl.webPage_content
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.initWebView();
      };
      View.prototype.initWebView = function() {
        cc.sys.os == cc.sys.OS_IOS && null != this.ui.webPage_content.setBounces && this.ui.webPage_content.setBounces(false);
      };
      return View;
    }(BaseView_1.default);
    var Prefab_AnnouncementPanelCtrl = function(_super) {
      __extends(Prefab_AnnouncementPanelCtrl, _super);
      function Prefab_AnnouncementPanelCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.closeBtn = null;
        _this.webPage_content = null;
        return _this;
      }
      Prefab_AnnouncementPanelCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_AnnouncementPanelCtrl.prototype.defineNetEvents = function() {};
      Prefab_AnnouncementPanelCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_AnnouncementPanelCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.closeBtn, this.finish, "关闭公告界面");
      };
      Prefab_AnnouncementPanelCtrl.prototype.start = function() {};
      __decorate([ property({
        tooltip: "关闭按钮",
        type: cc.Node
      }) ], Prefab_AnnouncementPanelCtrl.prototype, "closeBtn", void 0);
      __decorate([ property(cc.WebView) ], Prefab_AnnouncementPanelCtrl.prototype, "webPage_content", void 0);
      Prefab_AnnouncementPanelCtrl = __decorate([ ccclass ], Prefab_AnnouncementPanelCtrl);
      return Prefab_AnnouncementPanelCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_AnnouncementPanelCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_ChatTextItemCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ecba5NiUitJ3ZOoF/Igdz+l", "Prefab_ChatTextItemCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {};
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {};
      return View;
    }(BaseView_1.default);
    var Prefab_ChatTextItemCtrl = function(_super) {
      __extends(Prefab_ChatTextItemCtrl, _super);
      function Prefab_ChatTextItemCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.ChatText = null;
        _this.Selected = null;
        return _this;
      }
      Prefab_ChatTextItemCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_ChatTextItemCtrl.prototype.defineNetEvents = function() {};
      Prefab_ChatTextItemCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_ChatTextItemCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.Selected, this._onClick_Selected, "文本类型");
      };
      Prefab_ChatTextItemCtrl.prototype.start = function() {};
      Prefab_ChatTextItemCtrl.prototype._onClick_Selected = function(event) {};
      __decorate([ property({
        tooltip: "聊天文本",
        type: cc.Label
      }) ], Prefab_ChatTextItemCtrl.prototype, "ChatText", void 0);
      __decorate([ property({
        tooltip: "选择按钮",
        type: cc.Node
      }) ], Prefab_ChatTextItemCtrl.prototype, "Selected", void 0);
      Prefab_ChatTextItemCtrl = __decorate([ ccclass ], Prefab_ChatTextItemCtrl);
      return Prefab_ChatTextItemCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_ChatTextItemCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_ContentCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "38fc79yXJdCfKzIh66wXabj", "Prefab_ContentCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var UiMgr_1 = require("../../GameMgrs/UiMgr");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var SCORE_COLOR = {
      WIN: new cc.Color(255, 31, 1),
      FAIL: new cc.Color(0, 156, 11)
    };
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.player_data = null;
        _this.name_max = 3;
        _this.node_min = 211;
        _this.node_max = 265;
        _this.player_data = BehaviorMgr_1.default.getInstance().getRecordPlayerData();
        _this.name_max = 3;
        return _this;
      }
      Model.prototype.getPlayerId = function() {
        return this.player_data.id;
      };
      Model.prototype.getPlayerIcon = function() {
        return this.player_data.icon;
      };
      Model.prototype.getPlayerName = function() {
        return this.player_data.name;
      };
      Model.prototype.getPlayerScore = function() {
        return this.player_data.score;
      };
      Model.prototype.getPlayerWin = function() {
        return this.player_data.win;
      };
      Model.prototype.getPlayeOwner = function() {
        return this.player_data.roomOwner;
      };
      Model.prototype.getNodeMin = function() {
        return this.node_min;
      };
      Model.prototype.getNodeMax = function() {
        return this.node_max;
      };
      Model.prototype.getNameSlice = function() {
        return this.name_max;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          label_icon: null,
          label_name: null,
          node_score: null,
          label_score: null,
          node_win: null,
          node_player: null,
          node_member: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.label_icon = ctrl.label_icon;
        this.ui.label_name = ctrl.label_name;
        this.ui.node_score = ctrl.node_score;
        this.ui.label_score = ctrl.label_score;
        this.ui.node_win = ctrl.node_win;
        this.ui.node_player = ctrl.node_player;
        this.ui.node_member = ctrl.node_member;
        this.refreshIcon();
        this.refreshName();
        this.refreshScore();
        this.refreshWin();
        this.refreshPlayerBottom();
      };
      View.prototype.refreshIcon = function() {
        var icon = this.model.getPlayerIcon();
        "number" == typeof icon ? UiMgr_1.default.getInstance().setUserHead(this.ui.label_icon, icon) : UiMgr_1.default.getInstance().setUserHead(this.ui.label_icon, 0, icon);
      };
      View.prototype.refreshName = function() {
        var name = this.model.getPlayerName();
        null != name && (name = this.node.width <= this.model.getNodeMin() ? name.slice(0, this.model.getNameSlice()) + "..." : this.node.width <= this.model.getNodeMax() ? name.slice(0, this.model.getNameSlice() + 2) + "..." : name.slice(0, 3 * this.model.getNameSlice()) + "...");
        this.ui.label_name.string = name;
      };
      View.prototype.refreshScore = function() {
        this.model.getPlayerScore() >= 0 ? this.ui.node_score.color = SCORE_COLOR.WIN : this.ui.node_score.color = SCORE_COLOR.FAIL;
        this.ui.label_score.string = this.model.getPlayerScore();
      };
      View.prototype.refreshWin = function() {
        1 == this.model.getPlayeOwner() ? this.ui.node_win.active = true : this.ui.node_win.active = false;
      };
      View.prototype.refreshPlayerBottom = function() {
        var playerid = UserMgr_1.default.getInstance().getUid();
        this.model.getPlayerId() == playerid ? this.ui.node_player.active = true : this.ui.node_player.active = false;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_ContentCtrl = function(_super) {
      __extends(Prefab_ContentCtrl, _super);
      function Prefab_ContentCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label_icon = null;
        _this.label_name = null;
        _this.node_score = null;
        _this.label_score = null;
        _this.node_win = null;
        _this.node_player = null;
        _this.node_member = null;
        return _this;
      }
      Prefab_ContentCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_ContentCtrl.prototype.defineNetEvents = function() {};
      Prefab_ContentCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_ContentCtrl.prototype.connectUi = function() {};
      Prefab_ContentCtrl.prototype.start = function() {};
      __decorate([ property(cc.Sprite) ], Prefab_ContentCtrl.prototype, "label_icon", void 0);
      __decorate([ property(cc.Label) ], Prefab_ContentCtrl.prototype, "label_name", void 0);
      __decorate([ property(cc.Node) ], Prefab_ContentCtrl.prototype, "node_score", void 0);
      __decorate([ property(cc.Label) ], Prefab_ContentCtrl.prototype, "label_score", void 0);
      __decorate([ property(cc.Node) ], Prefab_ContentCtrl.prototype, "node_win", void 0);
      __decorate([ property(cc.Node) ], Prefab_ContentCtrl.prototype, "node_player", void 0);
      __decorate([ property(cc.Node) ], Prefab_ContentCtrl.prototype, "node_member", void 0);
      Prefab_ContentCtrl = __decorate([ ccclass ], Prefab_ContentCtrl);
      return Prefab_ContentCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_ContentCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/UiMgr": "UiMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_ControlSettingCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "00291/RJoNLrJ+/R4iI3TXx", "Prefab_ControlSettingCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var SettingMgr_1 = require("../../GameMgrs/SettingMgr");
    var LoginMgr_1 = require("../../GameMgrs/LoginMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.controlInfo = null;
        _this.controlInfo = SettingMgr_1.default.getInstance().getControlInfo();
        console.log("controlInfo", _this.controlInfo);
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          button_resetBtn: null,
          button_changeAccount: null,
          button_mjClickToggle: null,
          button_mjDragToggle: null,
          button_sssAutoMate: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.button_resetBtn = ctrl.resetBtn;
        this.ui.button_changeAccount = ctrl.changeAccount;
        this.ui.button_mjClickToggle = ctrl.mjClickToggle;
        this.ui.button_mjDragToggle = ctrl.mjDragToggle;
        this.ui.button_sssAutoMate = ctrl.sssAutoMate;
        this.ui.button_mjClickToggle.getComponent(cc.Toggle).isChecked = this.model.controlInfo.bMjClick;
        this.ui.button_mjDragToggle.getComponent(cc.Toggle).isChecked = this.model.controlInfo.bMjDrag;
        this.ui.button_mjClickToggle.getComponent(cc.Toggle).enabled = !this.model.controlInfo.bMjClick;
        this.ui.button_mjDragToggle.getComponent(cc.Toggle).enabled = !this.model.controlInfo.bMjDrag;
        if (this.model.controlInfo.bMjClick && this.model.controlInfo.bMjDrag) {
          this.ui.button_mjClickToggle.getComponent(cc.Toggle).enabled = true;
          this.ui.button_mjDragToggle.getComponent(cc.Toggle).enabled = true;
        }
        this.ui.button_sssAutoMate.getComponent(cc.Toggle).isChecked = this.model.controlInfo.bSssAutoMate;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_ControlSettingCtrl = function(_super) {
      __extends(Prefab_ControlSettingCtrl, _super);
      function Prefab_ControlSettingCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.resetBtn = null;
        _this.changeAccount = null;
        _this.mjClickToggle = null;
        _this.mjDragToggle = null;
        _this.sssAutoMate = null;
        return _this;
      }
      Prefab_ControlSettingCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_ControlSettingCtrl.prototype.defineNetEvents = function() {};
      Prefab_ControlSettingCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_ControlSettingCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.button_resetBtn, this._onClick_resetBtn, "点击恢复默认设置");
        this.connect(G_UiType.button, this.ui.button_changeAccount, this.changeAccount_cb, "切换账号");
        this.connect(G_UiType.toggle, this.ui.button_mjClickToggle, this.mjControl_cb, "点击出牌设置");
        this.connect(G_UiType.toggle, this.ui.button_mjDragToggle, this.mjControl_cb, "点击拖动出牌设置");
        this.connect(G_UiType.toggle, this.ui.button_sssAutoMate, this.sssAutoMate_cb, "点击智能带牌设置");
      };
      Prefab_ControlSettingCtrl.prototype.start = function() {};
      Prefab_ControlSettingCtrl.prototype._onClick_resetBtn = function(event) {
        console.log("恢复默认设置");
        this.ui.button_mjClickToggle.getComponent(cc.Toggle).isChecked = true;
        this.ui.button_mjDragToggle.getComponent(cc.Toggle).isChecked = true;
        this.ui.button_sssAutoMate.getComponent(cc.Toggle).isChecked = true;
        SettingMgr_1.default.getInstance().setProperty(true, "controlInfo", "bMjClick");
        SettingMgr_1.default.getInstance().setProperty(true, "controlInfo", "bMjDrag");
        SettingMgr_1.default.getInstance().setProperty(true, "controlInfo", "bSssAutoMate");
        console.log("恢复默认设置", this.model.controlInfo);
      };
      Prefab_ControlSettingCtrl.prototype.changeAccount_cb = function(event) {
        console.log("切换账号");
        LoginMgr_1.default.getInstance().logout();
      };
      Prefab_ControlSettingCtrl.prototype.mjControl_cb = function(event) {
        var mjClickToggle = this.ui.button_mjClickToggle.getComponent(cc.Toggle);
        var mjDragToggle = this.ui.button_mjDragToggle.getComponent(cc.Toggle);
        var clickNode = event.currentTarget;
        if ("clickToggle" == clickNode.name) {
          console.log("点击出牌设置");
          SettingMgr_1.default.getInstance().setProperty(!this.model.controlInfo.bMjClick, "controlInfo", "bMjClick");
        }
        if ("dragToggle" == clickNode.name) {
          console.log("拖动出牌设置");
          SettingMgr_1.default.getInstance().setProperty(!this.model.controlInfo.bMjDrag, "controlInfo", "bMjDrag");
        }
        this.model.controlInfo = SettingMgr_1.default.getInstance().getControlInfo();
        mjClickToggle.enabled = "clickToggle" == clickNode.name;
        mjDragToggle.enabled = "dragToggle" == clickNode.name;
        if (this.model.controlInfo.bMjClick && this.model.controlInfo.bMjDrag) {
          mjClickToggle.enabled = true;
          mjDragToggle.enabled = true;
        }
        console.log("controlInfo:", this.model.controlInfo);
      };
      Prefab_ControlSettingCtrl.prototype.sssAutoMate_cb = function(event) {
        console.log(event.currentTarget.getComponent(cc.Toggle).isChecked);
        var clickNode = event.currentTarget;
        SettingMgr_1.default.getInstance().setProperty(!this.model.controlInfo.bSssAutoMate, "controlInfo", "bSssAutoMate");
        this.model.controlInfo = SettingMgr_1.default.getInstance().getControlInfo();
        console.log("controlInfo:", this.model.controlInfo);
      };
      __decorate([ property({
        tooltip: "恢复默认设置",
        type: cc.Node
      }) ], Prefab_ControlSettingCtrl.prototype, "resetBtn", void 0);
      __decorate([ property({
        tooltip: "切换账号",
        type: cc.Node
      }) ], Prefab_ControlSettingCtrl.prototype, "changeAccount", void 0);
      __decorate([ property({
        tooltip: "点击出牌",
        type: cc.Node
      }) ], Prefab_ControlSettingCtrl.prototype, "mjClickToggle", void 0);
      __decorate([ property({
        tooltip: "拖动出牌",
        type: cc.Node
      }) ], Prefab_ControlSettingCtrl.prototype, "mjDragToggle", void 0);
      __decorate([ property({
        tooltip: "智能出牌",
        type: cc.Node
      }) ], Prefab_ControlSettingCtrl.prototype, "sssAutoMate", void 0);
      Prefab_ControlSettingCtrl = __decorate([ ccclass ], Prefab_ControlSettingCtrl);
      return Prefab_ControlSettingCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_ControlSettingCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/LoginMgr": "LoginMgr",
    "../../GameMgrs/SettingMgr": "SettingMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_CreateCommonRuleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e78e9W3a1BB5b3wv/vT+Z0J", "Prefab_CreateCommonRuleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var CreateRoomMgr_1 = require("../../GameMgrs/CreateRoomMgr");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var GameCateCfg_1 = require("../../CfgMgrs/GameCateCfg");
    var LoginMgr_1 = require("../../GameMgrs/LoginMgr");
    var BetMgr_1 = require("../../GameMgrs/BetMgr");
    var LocalStorage_1 = require("../../Libs/LocalStorage");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.ruleName = null;
        _this.ruleData = null;
        _this.gameId = null;
        _this.gameId = BetMgr_1.default.getInstance().getGameId();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.node = null;
        _this.ui = {
          btnCancel: ctrl.Cancel,
          btnConfirm: ctrl.Confirm,
          editFrame: ctrl.EditFrame
        };
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {};
      return View;
    }(BaseView_1.default);
    var Prefab_CreateCommonRuleCtrl = function(_super) {
      __extends(Prefab_CreateCommonRuleCtrl, _super);
      function Prefab_CreateCommonRuleCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.Cancel = null;
        _this.Confirm = null;
        _this.EditFrame = null;
        return _this;
      }
      Prefab_CreateCommonRuleCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_CreateCommonRuleCtrl.prototype.defineNetEvents = function() {};
      Prefab_CreateCommonRuleCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_CreateCommonRuleCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btnCancel, this.cancelCB, "取消编辑");
        this.connect(G_UiType.image, this.ui.btnConfirm, this.confirmCB, "确认编辑结果");
        this.connect(G_UiType.edit, this.ui.editFrame, this.editCB, "编辑框输入");
      };
      Prefab_CreateCommonRuleCtrl.prototype.start = function() {};
      Prefab_CreateCommonRuleCtrl.prototype.cancelCB = function(event) {
        console.log("取消创建常用规则");
        this.finish();
      };
      Prefab_CreateCommonRuleCtrl.prototype.confirmCB = function(event) {
        console.log("新建规则确认");
        if (!this.model.ruleName || "" == this.model.ruleName) {
          FrameMgr_1.default.getInstance().showTips("命名不能为空");
          return;
        }
        var gameId = BetMgr_1.default.getInstance().getGameId();
        var data = {};
        console.log(this.model.ruleName);
        data.ruleInfo = this.model.ruleData;
        data.ruleName = this.model.ruleName;
        console.log("确认后获取的数据", data);
        CreateRoomMgr_1.default.getInstance().addCommonRuleData(data, gameId);
        var Groups = CreateRoomMgr_1.default.getInstance().getCommonRuleGroups(gameId);
        var commonRule = CreateRoomMgr_1.default.getInstance().getCommonRule(gameId);
        Groups[LoginMgr_1.default.getInstance().getUid().toString()] = commonRule;
        console.log("需要存入本地默认规则的数据", Groups, commonRule);
        var gameCode;
        var games = GameCateCfg_1.default.getInstance().getGames();
        for (var i = 0; i < games.length; i++) games[i].id == gameId && (gameCode = games[i].code);
        LocalStorage_1.default.getInstance().setCommonRuleGroups(gameCode, Groups);
        this.finish();
      };
      Prefab_CreateCommonRuleCtrl.prototype.editCB = function(type, event) {
        if ("editing-did-ended" == type) {
          console.log("输入新建规则名字", event.currentTarget.getComponent(cc.EditBox).string);
          this.model.ruleName = event.currentTarget.getComponent(cc.EditBox).string;
          this.model.ruleData = {};
          var date = CreateRoomMgr_1.default.getInstance().getRoomRuleInfo(this.model.gameId);
          for (var key in date) this.model.ruleData[key] = date[key];
        }
      };
      __decorate([ property({
        tooltip: "取消按钮",
        type: cc.Node
      }) ], Prefab_CreateCommonRuleCtrl.prototype, "Cancel", void 0);
      __decorate([ property({
        tooltip: "确定按钮",
        type: cc.Node
      }) ], Prefab_CreateCommonRuleCtrl.prototype, "Confirm", void 0);
      __decorate([ property({
        tooltip: "编辑框控件",
        type: cc.Node
      }) ], Prefab_CreateCommonRuleCtrl.prototype, "EditFrame", void 0);
      Prefab_CreateCommonRuleCtrl = __decorate([ ccclass ], Prefab_CreateCommonRuleCtrl);
      return Prefab_CreateCommonRuleCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_CreateCommonRuleCtrl;
    cc._RF.pop();
  }, {
    "../../CfgMgrs/GameCateCfg": "GameCateCfg",
    "../../GameMgrs/BetMgr": "BetMgr",
    "../../GameMgrs/CreateRoomMgr": "CreateRoomMgr",
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/LoginMgr": "LoginMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView",
    "../../Libs/LocalStorage": "LocalStorage"
  } ],
  Prefab_CreateFzmj: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a3905pGZPBG7ZXr9KBFuizx", "Prefab_CreateFzmj");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var CreateRoomMgr_1 = require("../../GameMgrs/CreateRoomMgr");
    var BetMgr_1 = require("../../GameMgrs/BetMgr");
    var RoomCostCfg_1 = require("../../CfgMgrs/RoomCostCfg");
    var GameFreeMgr_1 = require("../../GameMgrs/GameFreeMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ROOM_CONFIGS_NAME = [ "v_roundcount", "v_seatcount", "v_paytype", "v_fangfu" ];
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.roomRuleInfo = {};
        _this.gameid = {};
        _this.roomcfg = [];
        _this.isFree = null;
        _this.isFree = GameFreeMgr_1.default.getInstance().isFree(5);
        BetMgr_1.default.getInstance().setGameId(5);
        _this.gameid = BetMgr_1.default.getInstance().getGameId();
        console.log("gameId", _this.gameid);
        _this.roomRuleInfo = CreateRoomMgr_1.default.getInstance().getRoomRuleInfo(_this.gameid);
        _this.roomcfg = {
          v_roundcount: [ 8, 16 ],
          v_seatcount: [ 2, 3, 4 ],
          v_paytype: [ 0, 1 ],
          v_fangfu: [ 0, 1, 2 ]
        };
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          roundcountSet: ctrl.roundcountSet,
          peopleSet: ctrl.peopleSet,
          payTypeSet: ctrl.payTypeSet,
          youjinType: ctrl.youjinType,
          payCount: ctrl.payCount,
          payTypeLabel: ctrl.payTypeLabel,
          playMethod: ctrl.playMethod,
          ruleBtnList: []
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.initPage(this.model.roomRuleInfo);
      };
      View.prototype.refreshFangfei = function() {
        var roomInfo = this.model.roomRuleInfo;
        var roomCost = RoomCostCfg_1.default.getInstance().getRoomCost("fzmj", 0, roomInfo.v_roundcount, roomInfo.v_seatcount, roomInfo.v_paytype);
        this.model.isFree && (roomCost = 0);
        CreateRoomMgr_1.default.getInstance().setProperty(roomCost, "roomRuleInfo", this.model.gameid, "v_fangfei");
        this.ui.payCount.string = roomCost.toString();
      };
      View.prototype.initCheck = function(roomRuleInfo) {
        var groups = [];
        groups.push(this.ui.roundcountSet);
        groups.push(this.ui.peopleSet);
        groups.push(this.ui.payTypeSet);
        groups.push(this.ui.youjinType);
        for (var i = 0; i < groups.length; i++) {
          var groupChildren = groups[i].getChildByName("ToggleContainer").children;
          for (var j = 0; j < groupChildren.length; j++) this.initCheckState(groupChildren, ROOM_CONFIGS_NAME[i], roomRuleInfo);
        }
      };
      View.prototype.initCheckState = function(groupChildren, toggleName, roomRuleInfo) {
        var data = this.model.roomcfg[toggleName];
        var value = roomRuleInfo[toggleName];
        for (var i = 0; i < data.length; i++) data[i] == value && groupChildren[i].getComponent(cc.Toggle).check();
      };
      View.prototype.updatePayLabel = function(value) {
        switch (value) {
         case 0:
          this.ui.payTypeLabel.string = "首局结算时房主支付";
          break;

         case 1:
          this.ui.payTypeLabel.string = "首局结算时所有玩家各支付";
        }
      };
      View.prototype.initPlayMethod = function() {
        this.ui.ruleBtnList = this.ui.playMethod.getChildByName("ToggleContainer").children;
        for (var i = 0; i < this.ui.ruleBtnList.length; ++i) {
          var value = this.model.roomRuleInfo[this.ui.ruleBtnList[i].name];
          value && this.ui.ruleBtnList[i].getComponent(cc.Toggle).check();
        }
      };
      View.prototype.initPage = function(roomRuleInfo) {
        this.updatePayLabel(roomRuleInfo.v_paytype);
        this.initCheck(roomRuleInfo);
        this.initPlayMethod();
        this.refreshFangfei();
        this.ui.payCount.node.parent.active = !this.model.isFree;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_CreateFzmj = function(_super) {
      __extends(Prefab_CreateFzmj, _super);
      function Prefab_CreateFzmj() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.roundcountSet = null;
        _this.peopleSet = null;
        _this.payTypeSet = null;
        _this.youjinType = null;
        _this.playMethod = null;
        _this.payTypeLabel = null;
        _this.payCount = null;
        return _this;
      }
      Prefab_CreateFzmj.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_CreateFzmj.prototype.defineNetEvents = function() {};
      Prefab_CreateFzmj.prototype.defineGlobalEvents = function() {};
      Prefab_CreateFzmj.prototype.connectUi = function() {
        var _this = this;
        var groups = [];
        groups.push(this.view.ui.roundcountSet);
        groups.push(this.view.ui.peopleSet);
        groups.push(this.view.ui.payTypeSet);
        groups.push(this.view.ui.youjinType);
        this.toggleConnect(groups, this.toggleCB.bind(this));
        var _loop_1 = function(i) {
          this_1.connect(G_UiType.toggle, this_1.ui.ruleBtnList[i], function() {
            _this.checkToggleCB(i);
          }, "切换选择玩法");
        };
        var this_1 = this;
        for (var i = 0; i < this.ui.ruleBtnList.length; ++i) _loop_1(i);
      };
      Prefab_CreateFzmj.prototype.toggleConnect = function(groups, callback) {
        var _loop_2 = function(i) {
          if (groups[i].getChildByName("ToggleContainer")) {
            var groupChildren = groups[i].getChildByName("ToggleContainer").children;
            var _loop_3 = function(j) {
              var cb = function() {
                callback(i, j);
              };
              this_2.connect(G_UiType.toggle, groupChildren[j], cb, "切换单选按钮");
            };
            for (var j = 0; j < groupChildren.length; j++) _loop_3(j);
          }
        };
        var this_2 = this;
        for (var i = 0; i < groups.length; i++) _loop_2(i);
      };
      Prefab_CreateFzmj.prototype.toggleCB = function(groupIndex, childIndex) {
        var name = ROOM_CONFIGS_NAME[groupIndex];
        var value = this.model.roomcfg[name][childIndex];
        CreateRoomMgr_1.default.getInstance().setProperty(value, "roomRuleInfo", this.model.gameid, name);
        console.log("" + name, this.model.roomRuleInfo[name]);
        console.log("开房数据", this.model.roomRuleInfo);
        this.view.updatePayLabel(this.model.roomRuleInfo.v_paytype);
        this.refFangfei();
      };
      Prefab_CreateFzmj.prototype.checkToggleCB = function(index) {
        var toggleName;
        switch (index) {
         case 0:
          toggleName = "b_qinghunyise";
          break;

         case 1:
          toggleName = "b_daihuapai";
          break;

         case 2:
          toggleName = "b_jinlong";
        }
        this.ui.ruleBtnList[index].getComponent(cc.Toggle).isChecked ? CreateRoomMgr_1.default.getInstance().setProperty(1, "roomRuleInfo", this.model.gameid, toggleName) : CreateRoomMgr_1.default.getInstance().setProperty(0, "roomRuleInfo", this.model.gameid, toggleName);
        console.log(this.model.roomRuleInfo);
      };
      Prefab_CreateFzmj.prototype.refFangfei = function() {
        this.view.refreshFangfei();
      };
      __decorate([ property({
        tooltip: "局数设置下拉按钮",
        type: cc.Node
      }) ], Prefab_CreateFzmj.prototype, "roundcountSet", void 0);
      __decorate([ property({
        tooltip: "人数设置下拉按钮",
        type: cc.Node
      }) ], Prefab_CreateFzmj.prototype, "peopleSet", void 0);
      __decorate([ property({
        tooltip: "支付设置下拉按钮",
        type: cc.Node
      }) ], Prefab_CreateFzmj.prototype, "payTypeSet", void 0);
      __decorate([ property({
        tooltip: "计分方式设置",
        type: cc.Node
      }) ], Prefab_CreateFzmj.prototype, "youjinType", void 0);
      __decorate([ property({
        tooltip: "玩法容器",
        type: cc.Node
      }) ], Prefab_CreateFzmj.prototype, "playMethod", void 0);
      __decorate([ property({
        tooltip: "支付方式显示",
        type: cc.Label
      }) ], Prefab_CreateFzmj.prototype, "payTypeLabel", void 0);
      __decorate([ property({
        tooltip: "支付金额",
        type: cc.Label
      }) ], Prefab_CreateFzmj.prototype, "payCount", void 0);
      Prefab_CreateFzmj = __decorate([ ccclass ], Prefab_CreateFzmj);
      return Prefab_CreateFzmj;
    }(BaseCtrl_1.default);
    exports.default = Prefab_CreateFzmj;
    cc._RF.pop();
  }, {
    "../../CfgMgrs/RoomCostCfg": "RoomCostCfg",
    "../../GameMgrs/BetMgr": "BetMgr",
    "../../GameMgrs/CreateRoomMgr": "CreateRoomMgr",
    "../../GameMgrs/GameFreeMgr": "GameFreeMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_CreateQgmj: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b2159c5DuRKz5SqpSqeieRg", "Prefab_CreateQgmj");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var CreateRoomMgr_1 = require("../../GameMgrs/CreateRoomMgr");
    var BetMgr_1 = require("../../GameMgrs/BetMgr");
    var RoomCostCfg_1 = require("../../CfgMgrs/RoomCostCfg");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ROOM_CONFIGS_NAME = [ "v_youjintype", "v_specialrule" ];
    var ROOM_CONFIGS_NAME2 = [ "v_chasui", "v_fanhu" ];
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.roomRuleInfo = {};
        _this.jinLimitInfo = [];
        _this.payTypeInfo = [];
        _this.payType = [];
        _this.gameid = {};
        _this.roomcfg = [];
        _this.chasui = null;
        _this.fanhu = null;
        BetMgr_1.default.getInstance().setGameId(2);
        _this.gameid = BetMgr_1.default.getInstance().getGameId();
        console.log("gameId", _this.gameid);
        _this.roomRuleInfo = CreateRoomMgr_1.default.getInstance().getRoomRuleInfo(_this.gameid);
        _this.roomcfg = {
          v_roundcount: [ 1, 2, 3 ],
          v_paytype: [ 0, 1, 2 ],
          v_youjintype: [ 0, 1 ],
          b_hupai: [ 0, 1, 2 ],
          v_chasui: [ 0, 1 ],
          v_fanhu: [ 0, 1 ],
          b_jinxianzhi: [ 0, 1, 2, 3 ]
        };
        _this.chasui = _this.roomRuleInfo.v_chasui;
        _this.fanhu = _this.roomRuleInfo.v_fanhu;
        _this.jinLimitInfo = [ "有金可平胡，双金可平胡", "有金可平胡，双金至少自摸", "有金至少自摸，双金至少游金", "有金至少游金" ];
        _this.payType = [ 0, 1, 2 ];
        _this.payTypeInfo = [ "房主支付房费", "AA支付房费", "赢家支付房费" ];
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          roundSet: ctrl.roundSet,
          payTypeSet: ctrl.payTypeSet,
          jinLimitSet: ctrl.jinLimitSet,
          roundSetMenu: ctrl.roundSetMenu,
          payTypeSetMenu: ctrl.payTypeSetMenu,
          jinLimitSetMenu: ctrl.jinLimitSetMenu,
          youjinType: ctrl.youjinType,
          specialRule: ctrl.specialRule,
          payCount: ctrl.payCount,
          payTypeLabel: ctrl.payTypeLabel
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.initPage(this.model.roomRuleInfo);
      };
      View.prototype.refreshFangfei = function() {
        var roomInfo = this.model.roomRuleInfo;
        var roomCost = RoomCostCfg_1.default.getInstance().getRoomCost("qgmj", roomInfo.b_yike, roomInfo.v_roundcount, roomInfo.v_seatcount, roomInfo.v_paytype);
        CreateRoomMgr_1.default.getInstance().setProperty(roomCost, "roomRuleInfo", this.model.gameid, "v_fangfei");
        this.ui.payCount.string = "×" + roomCost;
      };
      View.prototype.arrIndex = function(value, arr) {
        for (var i = 0; i < arr.length; i++) if (arr[i] == value) return i.toString();
      };
      View.prototype.initCheck = function(roomRuleInfo) {
        var groups = [];
        groups.push(this.ui.youjinType);
        for (var i = 0; i < groups.length; i++) {
          var groupChildren = groups[i].getChildByName("ToggleContainer").children;
          for (var j = 0; j < groupChildren.length; j++) this.initCheckState(groupChildren, ROOM_CONFIGS_NAME[i], roomRuleInfo);
        }
      };
      View.prototype.initCheckState = function(groupChildren, toggleName, roomRuleInfo) {
        var data = this.model.roomcfg[toggleName];
        var value = roomRuleInfo[toggleName];
        for (var i = 0; i < data.length; i++) data[i] == value && groupChildren[i].getComponent(cc.Toggle).check();
      };
      View.prototype.initSpecial = function(roomRuleInfo) {
        var group = this.ui.specialRule.getChildByName("ToggleContainer").children;
        for (var i = 0; i < group.length; i++) {
          var value = ROOM_CONFIGS_NAME2[i];
          roomRuleInfo[value] && group[i].getComponent(cc.Toggle).check();
        }
      };
      View.prototype.toggleCheck = function() {
        var roundIndex = this.model.roomRuleInfo.v_roundcount.toString();
        var round = this.arrIndex(roundIndex, this.model.roomcfg.v_roundcount);
        var pay = this.model.roomRuleInfo.v_paytype.toString();
        var jin = this.model.roomRuleInfo.b_jinxianzhi.toString();
        this.ui.roundSet.getChildByName("menu").getChildByName("dropMenu").getChildByName(round).getComponent(cc.Toggle).check();
        this.ui.jinLimitSet.getChildByName("menu").getChildByName("dropMenu").getChildByName(jin).getComponent(cc.Toggle).check();
        this.ui.payTypeSet.getChildByName("menu").getChildByName("dropMenu").getChildByName(pay).getComponent(cc.Toggle).check();
      };
      View.prototype.updatePayLabel = function(value) {
        switch (value) {
         case 0:
          this.ui.payTypeLabel.string = "首局结算时房主支付";
          break;

         case 1:
          this.ui.payTypeLabel.string = "首局结算时所有玩家各支付";
          break;

         case 2:
          this.ui.payTypeLabel.string = "总结算时赢家按比例共支付";
        }
      };
      View.prototype.initPage = function(roomRuleInfo) {
        this.ui.roundSet.getComponentInChildren(cc.Label).string = roomRuleInfo.v_roundcount ? "局数:" + roomRuleInfo.v_roundcount + "局" : "一课";
        this.ui.payTypeSet.getComponentInChildren(cc.Label).string = this.model.payTypeInfo[roomRuleInfo.v_paytype];
        this.ui.jinLimitSet.getComponentInChildren(cc.Label).string = this.model.jinLimitInfo[roomRuleInfo.b_jinxianzhi];
        this.updatePayLabel(roomRuleInfo.v_paytype);
        this.initCheck(roomRuleInfo);
        this.toggleCheck();
        this.initSpecial(roomRuleInfo);
      };
      return View;
    }(BaseView_1.default);
    var Prefab_CreateQgmj = function(_super) {
      __extends(Prefab_CreateQgmj, _super);
      function Prefab_CreateQgmj() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.roundSet = null;
        _this.payTypeSet = null;
        _this.jinLimitSet = null;
        _this.roundSetMenu = null;
        _this.payTypeSetMenu = null;
        _this.jinLimitSetMenu = null;
        _this.youjinType = null;
        _this.specialRule = null;
        _this.payTypeLabel = null;
        _this.payCount = null;
        return _this;
      }
      Prefab_CreateQgmj.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_CreateQgmj.prototype.defineNetEvents = function() {};
      Prefab_CreateQgmj.prototype.defineGlobalEvents = function() {
        this.g_events = {};
      };
      Prefab_CreateQgmj.prototype.connectUi = function() {
        var Btn = [ this.view.ui.roundSet, this.view.ui.payTypeSet, this.view.ui.jinLimitSet ];
        for (var i = 0; i < Btn.length; i++) this.connect(G_UiType.text, Btn[i], this.buttonCB, "下拉菜单按钮");
        var youjinTypeItem = this.youjinType.getChildByName("ToggleContainer").children;
        for (var i = 0; i < youjinTypeItem.length; i++) this.connect(G_UiType.toggle, youjinTypeItem[i], this.toggleCB, "切换游金方式选项");
        var specialItems = this.specialRule.getChildByName("ToggleContainer").children;
        for (var i = 0; i < specialItems.length; i++) this.connect(G_UiType.toggle, specialItems[i], this.toggleCB, "切换特殊玩法选项");
        var roundItems = this.roundSetMenu.getChildByName("dropMenu").children;
        for (var i = 0; i < roundItems.length; i++) this.connect(G_UiType.button, roundItems[i], this.roundMenuCB, "切换局数选择选项");
        var payItems = this.payTypeSetMenu.getChildByName("dropMenu").children;
        for (var i = 0; i < payItems.length; i++) this.connect(G_UiType.button, payItems[i], this.dropMenuCB, "切换支付选择选项");
        var jinLimitItems = this.jinLimitSetMenu.getChildByName("dropMenu").children;
        for (var i = 0; i < jinLimitItems.length; i++) this.connect(G_UiType.button, jinLimitItems[i], this.dropMenuCB, "切换金牌限制选择选项");
        this.node.on(cc.Node.EventType.TOUCH_START, this.closeDropMenu, this);
      };
      Prefab_CreateQgmj.prototype.start = function() {};
      Prefab_CreateQgmj.prototype.closeDropMenu = function() {
        this.view.ui.roundSetMenu.active = false;
        this.view.ui.payTypeSetMenu.active = false;
        this.view.ui.jinLimitSetMenu.active = false;
      };
      Prefab_CreateQgmj.prototype.buttonCB = function(event) {
        switch (event.name) {
         case "v_roundcount":
          this.closeMenu(this.view.ui.roundSetMenu);
          break;

         case "v_paytype":
          this.closeMenu(this.view.ui.payTypeSetMenu);
          break;

         case "b_jinxianzhi":
          this.closeMenu(this.view.ui.jinLimitSetMenu);
        }
        this.view.toggleCheck();
      };
      Prefab_CreateQgmj.prototype.closeMenu = function(node) {
        if (node.active) this.closeDropMenu(); else {
          this.closeDropMenu();
          node.active = true;
        }
      };
      Prefab_CreateQgmj.prototype.roundMenuCB = function(event) {
        var index = Number(event.currentTarget.name);
        this.view.ui.roundSet.getComponentInChildren(cc.Label).string = "圈数:" + this.model.roomcfg.v_roundcount[index] + "圈";
        this.model.roomRuleInfo.v_roundcount = this.model.roomcfg.v_roundcount[index];
        CreateRoomMgr_1.default.getInstance().setProperty(this.model.roomcfg.v_roundcount[index], "roomRuleInfo", this.model.gameid, "v_roundcount");
        console.log(this.model.roomRuleInfo.v_roundcount);
        console.log("开房数据", this.model.roomRuleInfo);
        this.closeDropMenu();
      };
      Prefab_CreateQgmj.prototype.dropMenuCB = function(event) {
        var value = event.currentTarget.parent.parent.parent.name;
        var index = Number(event.currentTarget.name);
        var info, lab;
        switch (value) {
         case "v_paytype":
          info = this.model.payTypeInfo;
          lab = this.view.ui.payTypeSet.getComponentInChildren(cc.Label);
          this.view.updatePayLabel(index);
          break;

         case "b_jinxianzhi":
          info = this.model.jinLimitInfo;
          lab = this.view.ui.jinLimitSet.getComponentInChildren(cc.Label);
        }
        this.model.roomRuleInfo[value] = this.model.roomcfg[value][index];
        CreateRoomMgr_1.default.getInstance().setProperty(this.model.roomRuleInfo[value], "roomRuleInfo", this.model.gameid, value);
        lab.string = info[index];
        console.log("开房数据", this.model.roomRuleInfo);
        this.closeDropMenu();
      };
      Prefab_CreateQgmj.prototype.toggleCB = function(event, childIndex) {
        this.closeDropMenu();
        var name = event.currentTarget.parent.parent.name;
        var index = event.currentTarget.name;
        if ("v_specialrule" == name) {
          switch (index) {
           case "v_chasui":
            this.setCharsui();
            break;

           case "v_fanhu":
            this.setFanhu();
          }
          return;
        }
        var value = this.model.roomcfg[name][index];
        CreateRoomMgr_1.default.getInstance().setProperty(value, "roomRuleInfo", this.model.gameid, name);
        console.log("" + name, this.model.roomRuleInfo[name]);
        console.log("开房数据", this.model.roomRuleInfo);
      };
      Prefab_CreateQgmj.prototype.setCharsui = function() {
        var value = this.model.chasui ? 0 : 1;
        this.model.chasui = value;
        CreateRoomMgr_1.default.getInstance().setProperty(value, "roomRuleInfo", this.model.gameid, "v_chasui");
        console.log("开房数据", this.model.roomRuleInfo);
      };
      Prefab_CreateQgmj.prototype.setFanhu = function() {
        var value = this.model.fanhu ? 0 : 1;
        this.model.fanhu = value;
        CreateRoomMgr_1.default.getInstance().setProperty(value, "roomRuleInfo", this.model.gameid, "v_fanhu");
        console.log("开房数据", this.model.roomRuleInfo);
      };
      Prefab_CreateQgmj.prototype.refFangfei = function() {
        this.view.refreshFangfei();
      };
      __decorate([ property({
        tooltip: "局数设置下拉按钮",
        type: cc.Node
      }) ], Prefab_CreateQgmj.prototype, "roundSet", void 0);
      __decorate([ property({
        tooltip: "支付设置下拉按钮",
        type: cc.Node
      }) ], Prefab_CreateQgmj.prototype, "payTypeSet", void 0);
      __decorate([ property({
        tooltip: "金牌限制下拉按钮",
        type: cc.Node
      }) ], Prefab_CreateQgmj.prototype, "jinLimitSet", void 0);
      __decorate([ property({
        tooltip: "局数设置下拉菜单",
        type: cc.Node
      }) ], Prefab_CreateQgmj.prototype, "roundSetMenu", void 0);
      __decorate([ property({
        tooltip: "支付设置下拉菜单",
        type: cc.Node
      }) ], Prefab_CreateQgmj.prototype, "payTypeSetMenu", void 0);
      __decorate([ property({
        tooltip: "金牌限制下拉菜单",
        type: cc.Node
      }) ], Prefab_CreateQgmj.prototype, "jinLimitSetMenu", void 0);
      __decorate([ property({
        tooltip: "游金方式设置",
        type: cc.Node
      }) ], Prefab_CreateQgmj.prototype, "youjinType", void 0);
      __decorate([ property({
        tooltip: "特殊规则",
        type: cc.Node
      }) ], Prefab_CreateQgmj.prototype, "specialRule", void 0);
      __decorate([ property({
        tooltip: "支付方式显示",
        type: cc.Label
      }) ], Prefab_CreateQgmj.prototype, "payTypeLabel", void 0);
      __decorate([ property({
        tooltip: "支付金额",
        type: cc.Label
      }) ], Prefab_CreateQgmj.prototype, "payCount", void 0);
      Prefab_CreateQgmj = __decorate([ ccclass ], Prefab_CreateQgmj);
      return Prefab_CreateQgmj;
    }(BaseCtrl_1.default);
    exports.default = Prefab_CreateQgmj;
    cc._RF.pop();
  }, {
    "../../CfgMgrs/RoomCostCfg": "RoomCostCfg",
    "../../GameMgrs/BetMgr": "BetMgr",
    "../../GameMgrs/CreateRoomMgr": "CreateRoomMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_CreateQzmj: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c40d6UkJYJE65aZ7isdkGbn", "Prefab_CreateQzmj");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var CreateRoomMgr_1 = require("../../GameMgrs/CreateRoomMgr");
    var BetMgr_1 = require("../../GameMgrs/BetMgr");
    var RoomCostCfg_1 = require("../../CfgMgrs/RoomCostCfg");
    var GameFreeMgr_1 = require("../../GameMgrs/GameFreeMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ROOM_CONFIGS_NAME = [ "v_roundcount", "v_seatcount", "v_paytype", "b_jinxianzhi", "t_youjin", "v_difen", "v_youjintype" ];
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.roomRuleInfo = {};
        _this.gameid = {};
        _this.roomcfg = [];
        _this.isFree = null;
        _this.isFree = GameFreeMgr_1.default.getInstance().isFree(1);
        BetMgr_1.default.getInstance().setGameId(1);
        _this.gameid = BetMgr_1.default.getInstance().getGameId();
        console.log("gameId", _this.gameid);
        _this.roomRuleInfo = CreateRoomMgr_1.default.getInstance().getRoomRuleInfo(_this.gameid);
        _this.roomcfg = {
          b_yike: [ 0, 1 ],
          v_roundcount: [ 0, 8, 16 ],
          v_seatcount: [ 2, 3, 4 ],
          v_paytype: [ 0, 1 ],
          b_jinxianzhi: [ 0, 1 ],
          t_youjin: [ 3, 4 ],
          v_difen: [ 5, 8 ],
          v_youjintype: [ 0, 1 ],
          t_bazhanghua: [ 3, 4 ]
        };
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          roundCount: ctrl.roundCount,
          setCount: ctrl.setCount,
          payMethod: ctrl.payMethod,
          playMethod: ctrl.playMethod,
          jinBeishu: ctrl.jinBeishu,
          difen: ctrl.difen,
          youjinType: ctrl.youjinType,
          payCount: ctrl.payCount,
          payTypeLabel: ctrl.payTypeLabel
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.initPage(this.model.roomRuleInfo);
      };
      View.prototype.initPage = function(roomRuleInfo) {
        this.initCheck(roomRuleInfo);
        this.updatePayLabel(roomRuleInfo.v_paytype);
        this.ui.payCount.node.parent.active = !this.model.isFree;
        this.refreshFangfei();
      };
      View.prototype.initCheck = function(roomRuleInfo) {
        var groups = [];
        groups.push(this.ui.roundCount);
        groups.push(this.ui.setCount);
        groups.push(this.ui.payMethod);
        groups.push(this.ui.playMethod);
        groups.push(this.ui.jinBeishu);
        groups.push(this.ui.difen);
        groups.push(this.ui.youjinType);
        for (var i = 0; i < groups.length; i++) {
          var groupChildren = groups[i].getChildByName("ToggleContainer").children;
          for (var j = 0; j < groupChildren.length; j++) this.initCheckState(groupChildren, ROOM_CONFIGS_NAME[i], roomRuleInfo);
        }
      };
      View.prototype.initCheckState = function(groupChildren, toggleName, roomRuleInfo) {
        var data = this.model.roomcfg[toggleName];
        var value = roomRuleInfo[toggleName];
        for (var i = 0; i < data.length; i++) data[i] == value && groupChildren[i].getComponent(cc.Toggle).check();
      };
      View.prototype.updatePayLabel = function(value) {
        switch (value) {
         case 0:
          this.ui.payTypeLabel.string = "首局结算时房主支付";
          break;

         case 1:
          this.ui.payTypeLabel.string = "首局结算时所有玩家各支付";
        }
      };
      View.prototype.refreshFangfei = function() {
        var roomInfo = this.model.roomRuleInfo;
        var roomCost = RoomCostCfg_1.default.getInstance().getRoomCost("qzmj", roomInfo.b_yike, roomInfo.v_roundcount, roomInfo.v_seatcount, roomInfo.v_paytype);
        this.model.isFree && (roomCost = 0);
        CreateRoomMgr_1.default.getInstance().setProperty(roomCost, "roomRuleInfo", this.model.gameid, "v_fangfei");
        this.ui.payCount.string = roomCost;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_CreateQzmj = function(_super) {
      __extends(Prefab_CreateQzmj, _super);
      function Prefab_CreateQzmj() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.roundCount = null;
        _this.setCount = null;
        _this.payMethod = null;
        _this.playMethod = null;
        _this.jinBeishu = null;
        _this.difen = null;
        _this.youjinType = null;
        _this.payTypeLabel = null;
        _this.payCount = null;
        return _this;
      }
      Prefab_CreateQzmj.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.refFangfei();
      };
      Prefab_CreateQzmj.prototype.defineNetEvents = function() {};
      Prefab_CreateQzmj.prototype.defineGlobalEvents = function() {
        this.g_events = {
          RefreshQZMJRoomUi: this.RefreshQZMJRoomUi
        };
      };
      Prefab_CreateQzmj.prototype.toggleConnect = function(groups, callback) {
        var _loop_1 = function(i) {
          if (groups[i].getChildByName("ToggleContainer")) {
            var groupChildren = groups[i].getChildByName("ToggleContainer").children;
            var _loop_2 = function(j) {
              var cb = function() {
                callback(i, j);
              };
              this_1.connect(G_UiType.toggle, groupChildren[j], cb, "切换选项");
            };
            for (var j = 0; j < groupChildren.length; j++) _loop_2(j);
          }
        };
        var this_1 = this;
        for (var i = 0; i < groups.length; i++) _loop_1(i);
      };
      Prefab_CreateQzmj.prototype.connectUi = function() {
        var groups = [];
        groups.push(this.view.ui.roundCount);
        groups.push(this.view.ui.setCount);
        groups.push(this.view.ui.payMethod);
        groups.push(this.view.ui.playMethod);
        groups.push(this.view.ui.jinBeishu);
        groups.push(this.view.ui.difen);
        groups.push(this.view.ui.youjinType);
        this.toggleConnect(groups, this.toggleCB.bind(this));
      };
      Prefab_CreateQzmj.prototype.toggleCB = function(groupIndex, childIndex) {
        var name = ROOM_CONFIGS_NAME[groupIndex];
        var value = this.model.roomcfg[name][childIndex];
        CreateRoomMgr_1.default.getInstance().setProperty(value, "roomRuleInfo", this.model.gameid, name);
        "t_youjin" == name && CreateRoomMgr_1.default.getInstance().setProperty(value, "roomRuleInfo", this.model.gameid, "t_bazhanghua");
        "v_roundcount" == name && (0 == this.model.roomRuleInfo.v_roundcount ? CreateRoomMgr_1.default.getInstance().setProperty(1, "roomRuleInfo", this.model.gameid, "b_yike") : CreateRoomMgr_1.default.getInstance().setProperty(0, "roomRuleInfo", this.model.gameid, "b_yike"));
        console.log("" + name, this.model.roomRuleInfo[name]);
        console.log("开房数据", this.model.roomRuleInfo);
        var commonRule = CreateRoomMgr_1.default.getInstance().getCommonRule(this.model.gameid);
        cc.log(commonRule);
        this.refFangfei();
      };
      Prefab_CreateQzmj.prototype.refFangfei = function() {
        this.view.updatePayLabel(this.model.roomRuleInfo.v_paytype);
        this.view.refreshFangfei();
      };
      Prefab_CreateQzmj.prototype.RefreshQZMJRoomUi = function() {
        var gameId = BetMgr_1.default.getInstance().getGameId();
        var commonRule = CreateRoomMgr_1.default.getInstance().getCommonRule(gameId);
        var index = CreateRoomMgr_1.default.getInstance().getEditItemIndex();
        commonRule[index].ruleInfo && this.view.initPage(commonRule[index].ruleInfo);
      };
      __decorate([ property({
        tooltip: "局数设置",
        type: cc.Node
      }) ], Prefab_CreateQzmj.prototype, "roundCount", void 0);
      __decorate([ property({
        tooltip: "人数设置",
        type: cc.Node
      }) ], Prefab_CreateQzmj.prototype, "setCount", void 0);
      __decorate([ property({
        tooltip: "支付方式",
        type: cc.Node
      }) ], Prefab_CreateQzmj.prototype, "payMethod", void 0);
      __decorate([ property({
        tooltip: "玩法规则",
        type: cc.Node
      }) ], Prefab_CreateQzmj.prototype, "playMethod", void 0);
      __decorate([ property({
        tooltip: "游金倍数",
        type: cc.Node
      }) ], Prefab_CreateQzmj.prototype, "jinBeishu", void 0);
      __decorate([ property({
        tooltip: "底分设置",
        type: cc.Node
      }) ], Prefab_CreateQzmj.prototype, "difen", void 0);
      __decorate([ property({
        tooltip: "游金方式",
        type: cc.Node
      }) ], Prefab_CreateQzmj.prototype, "youjinType", void 0);
      __decorate([ property({
        tooltip: "支付标签",
        type: cc.Label
      }) ], Prefab_CreateQzmj.prototype, "payTypeLabel", void 0);
      __decorate([ property({
        tooltip: "支付金额",
        type: cc.Label
      }) ], Prefab_CreateQzmj.prototype, "payCount", void 0);
      Prefab_CreateQzmj = __decorate([ ccclass ], Prefab_CreateQzmj);
      return Prefab_CreateQzmj;
    }(BaseCtrl_1.default);
    exports.default = Prefab_CreateQzmj;
    cc._RF.pop();
  }, {
    "../../CfgMgrs/RoomCostCfg": "RoomCostCfg",
    "../../GameMgrs/BetMgr": "BetMgr",
    "../../GameMgrs/CreateRoomMgr": "CreateRoomMgr",
    "../../GameMgrs/GameFreeMgr": "GameFreeMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_CreateRoomPanelCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "db421FQZLJMXKaiLrKewLmv", "Prefab_CreateRoomPanelCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var RoomMgr_1 = require("../../GameMgrs/RoomMgr");
    var LoginMgr_1 = require("../../GameMgrs/LoginMgr");
    var CreateRoomMgr_1 = require("../../GameMgrs/CreateRoomMgr");
    var BetMgr_1 = require("../../GameMgrs/BetMgr");
    var GameCateCfg_1 = require("../../CfgMgrs/GameCateCfg");
    var LocalStorage_1 = require("../../Libs/LocalStorage");
    var LoaderMgr_1 = require("../../../AppStart/AppMgrs/LoaderMgr");
    var GameFreeMgr_1 = require("../../GameMgrs/GameFreeMgr");
    var SubGameMgr_1 = require("../../GameMgrs/SubGameMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var CONFIGS = {
      gameInfoUrl: "SubLayer/Plat/CreateRoom/GameCreateInfo/CreateRoom_"
    };
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.curGameItem = null;
        _this.games = null;
        _this.gameid = null;
        _this.nowDate = null;
        _this.gamecode = null;
        _this.bUpdated = null;
        _this.games = GameCateCfg_1.default.getInstance().getGames();
        _this.gameid = BetMgr_1.default.getInstance().getGameId();
        var index = GameCateCfg_1.default.getInstance().getGameIndex(_this.gameid);
        _this.nowDate = GameFreeMgr_1.default.getInstance().getNowDate();
        _this.updateGameSel(index);
        return _this;
      }
      Model.prototype.updateSubGameState = function() {
        this.bUpdated = SubGameMgr_1.default.getInstance().gameIsUpdated(this.gamecode);
      };
      Model.prototype.updateGameSel = function(index) {
        var item = this.games[index];
        if (!item) return false;
        this.curGameItem = this.games[index];
        this.gameid = this.curGameItem.id;
        this.gamecode = this.curGameItem.code;
        this.bUpdated = SubGameMgr_1.default.getInstance().gameIsUpdated(this.gamecode);
        return true;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btnClose: ctrl.ClosePanel,
          btnDefaultRule: ctrl.DefaultRule,
          btnCreateRoom: ctrl.CreateRoom,
          nodeSubGameContent: ctrl.SubGameContent,
          nodeToggleContainer: ctrl.ToggleContainer,
          nodePanelContent: ctrl.PanelContent,
          prefabsubGameItem: ctrl.subGameItem,
          btnGameItems: [],
          gameFreeTip: ctrl.gameFreeTip,
          Prefab_downloadsubgame: ctrl.Prefab_downloadsubgame,
          node_downloadsubgame: null,
          node_roomsetting: ctrl.node_roomsetting
        };
        _this.node = ctrl.node;
        _this.addGrayLayer();
        _this.initUi();
        _this.initPage();
        return _this;
      }
      View.prototype.initUi = function() {
        var _loop_1 = function(i) {
          var item = this_1.model.games[i];
          var prefabNode = cc.instantiate(this_1.ui.prefabsubGameItem);
          prefabNode.name = item.code;
          prefabNode.active = true;
          switch (item.id) {
           case 13:
            item.name = "大菠萝";
            break;

           case 19:
            item.name = "明牌拼十";
            break;

           case 20:
            item.name = "欢乐拼十";
          }
          prefabNode.getChildByName("freeMark").active = GameFreeMgr_1.default.getInstance().isFree(item.id);
          prefabNode.getChildByName("Background").getChildByName("New Label").getComponent(cc.Label).string = item.name;
          var path = "Plat/creatRoom/title_" + item.code;
          cc.loader.loadRes(path, cc.SpriteFrame, function(err, assets) {
            err ? cc.error(err) : prefabNode.getChildByName("checkmark").getChildByName("gameName").getComponent(cc.Sprite).spriteFrame = assets;
          });
          this_1.ui.nodeToggleContainer.addChild(prefabNode);
          this_1.ui.btnGameItems.push(prefabNode);
        };
        var this_1 = this;
        for (var i = 0; i < this.model.games.length; ++i) _loop_1(i);
        var node = this.ui.btnDefaultRule.getChildByName("Label");
        var label = node.getComponent(cc.Label);
        label.string = "无";
        this.ui.node_downloadsubgame = cc.instantiate(this.ui.Prefab_downloadsubgame);
        this.node.addChild(this.ui.node_downloadsubgame);
      };
      View.prototype.initPage = function() {
        this.ui.nodePanelContent.destroyAllChildren();
        this.model.gameid || (this.model.gameid = 1);
        var gameName = this.getGameCodeName(this.model.gameid);
        for (var i = 0; i < this.ui.btnGameItems.length; i++) this.ui.btnGameItems[i].name == gameName && this.ui.btnGameItems[i].getComponent(cc.Toggle).check();
        BetMgr_1.default.getInstance().setGameId(this.model.gameid);
        this.updataPanel(this.model.gameid);
        this.costFreeTip(this.model.gameid);
        this.updateSubGameState();
      };
      View.prototype.updateSubGameState = function() {
        this.ui.node_downloadsubgame.active = !this.model.bUpdated;
        this.ui.node_roomsetting.active = this.model.bUpdated;
      };
      View.prototype.updataPanel = function(gameid) {
        var _this = this;
        if (!this.model.bUpdated) return;
        ctrl.isLoad = true;
        LoaderMgr_1.default.getInstance().loadRes(CONFIGS.gameInfoUrl + this.getGameCodeName(gameid), function(prefab) {
          ctrl.isLoad = false;
          if (prefab) {
            var curNode = cc.instantiate(prefab);
            curNode.parent = _this.ui.nodePanelContent;
          }
        });
      };
      View.prototype.costFreeTip = function(gameid) {
        var list = [];
        var isFree = GameFreeMgr_1.default.getInstance().isFree(gameid);
        this.ui.gameFreeTip.active = isFree;
        if (!isFree) return;
        list = GameFreeMgr_1.default.getInstance().getFreeDetial(gameid);
        for (var i = 0; i < list.length; i++) if (list[i].start < this.model.nowDate && list[i].end > this.model.nowDate) {
          var startTime = GameFreeMgr_1.default.getInstance().formatDate(list[i].start);
          var endTime = GameFreeMgr_1.default.getInstance().formatDate(list[i].end);
          var timeText = "（限免时间" + startTime + "-" + endTime + "）";
          this.ui.gameFreeTip.getChildByName("time").getComponent(cc.Label).string = timeText;
          return;
        }
      };
      View.prototype.getGameCodeName = function(gameid) {
        for (var i = 0; i < this.model.games.length; i++) if (this.model.games[i].id == gameid) return this.model.games[i].code;
        return "";
      };
      return View;
    }(BaseView_1.default);
    var Prefab_CreateRoomPanelCtrl = function(_super) {
      __extends(Prefab_CreateRoomPanelCtrl, _super);
      function Prefab_CreateRoomPanelCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.ClosePanel = null;
        _this.DefaultRule = null;
        _this.CreateRoom = null;
        _this.SubGameContent = null;
        _this.ToggleContainer = null;
        _this.PanelContent = null;
        _this.subGameItem = null;
        _this.gameFreeTip = null;
        _this.node_roomsetting = null;
        _this.loadSubGameCtl = null;
        _this.Prefab_downloadsubgame = null;
        return _this;
      }
      Prefab_CreateRoomPanelCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.isLoad = false;
        this.loadSubGameCtl = this.ui.node_downloadsubgame.getComponent("DownLoadSubGameCtrl");
        this.loadSubGameCtl.registerCompleteCb(this.subGameDownLoadCompleted.bind(this));
        this.loadSubGameCtl.updateGameId(this.model.gameid);
      };
      Prefab_CreateRoomPanelCtrl.prototype.onDestroy = function() {
        this.loadSubGameCtl.unRegisterCompleteCb();
        _super.prototype.onDestroy.call(this);
      };
      Prefab_CreateRoomPanelCtrl.prototype.subGameDownLoadCompleted = function() {
        if (this.model.bUpdated) return;
        this.model.updateSubGameState();
        this.view.updateSubGameState();
        this.view.updataPanel(this.model.gameid);
      };
      Prefab_CreateRoomPanelCtrl.prototype.defineNetEvents = function() {};
      Prefab_CreateRoomPanelCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          RefreshDefaultRuleLabel: this.RefreshDefaultRuleLabel
        };
      };
      Prefab_CreateRoomPanelCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.view.ui.btnClose, this.click_Close, "关闭界面");
        this.connect(G_UiType.button, this.view.ui.btnCreateRoom, this.createRoomCB, "点击创建房间");
        this.connect(G_UiType.button, this.view.ui.btnDefaultRule, this.defaultRuleCB, "点击默认规则");
        var _loop_2 = function(i) {
          var btn = this_2.ui.btnGameItems[i];
          var cb = function() {
            this.clickSubGameCB(i);
          };
          this_2.connect(G_UiType.button, btn, cb, "游戏页签");
        };
        var this_2 = this;
        for (var i = 0; i < this.ui.btnGameItems.length; ++i) _loop_2(i);
      };
      Prefab_CreateRoomPanelCtrl.prototype.start = function() {};
      Prefab_CreateRoomPanelCtrl.prototype.click_Close = function(event) {
        if (this.isLoad) return;
        this.finish();
      };
      Prefab_CreateRoomPanelCtrl.prototype.createRoomCB = function(event) {
        if (this.isLoad) return;
        console.log("付费第三款");
        if (CreateRoomMgr_1.default.getInstance().getbCommomRule()) {
          var gameId = BetMgr_1.default.getInstance().getGameId();
          var Groups = CreateRoomMgr_1.default.getInstance().getCommonRuleGroups(gameId);
          var commonRule = CreateRoomMgr_1.default.getInstance().getCommonRule(gameId);
          cc.log(commonRule);
          var qzmjRoomRuleInfo = CreateRoomMgr_1.default.getInstance().getRoomRuleInfo(gameId);
          var index = CreateRoomMgr_1.default.getInstance().getEditItemIndex();
          for (var key in qzmjRoomRuleInfo) {
            console.log(qzmjRoomRuleInfo[key]);
            commonRule[index].ruleInfo[key] = qzmjRoomRuleInfo[key];
          }
          CreateRoomMgr_1.default.getInstance().RefreshRoomUi(gameId);
          CreateRoomMgr_1.default.getInstance().setbCommomRule(false);
          Groups[LoginMgr_1.default.getInstance().getUid().toString()] = commonRule;
          console.log("需要存入本地默认规则的数据", Groups, commonRule);
          var games = GameCateCfg_1.default.getInstance().getGames();
          var gameCode = games[gameId - 1].code;
          LocalStorage_1.default.getInstance().setCommonRuleGroups(gameCode, Groups);
        }
        RoomMgr_1.default.getInstance().reqCreateFangKaVerify();
      };
      Prefab_CreateRoomPanelCtrl.prototype.defaultRuleCB = function(event) {
        console.log("点击默认规则");
        this.start_sub_module(G_MODULE.DefaultRule);
      };
      Prefab_CreateRoomPanelCtrl.prototype.clickSubGameCB = function(index) {
        if (this.isLoad) return;
        var ret = this.model.updateGameSel(index);
        if (!ret) return;
        this.view.ui.nodePanelContent.children && this.view.ui.nodePanelContent.destroyAllChildren();
        BetMgr_1.default.getInstance().setGameId(this.model.gameid);
        this.view.updataPanel(this.model.gameid);
        this.view.costFreeTip(this.model.gameid);
        this.view.updateSubGameState();
        this.loadSubGameCtl.updateGameId(this.model.gameid);
      };
      Prefab_CreateRoomPanelCtrl.prototype.RefreshDefaultRuleLabel = function() {
        var node = this.DefaultRule.getChildByName("Label");
        var label = node.getComponent(cc.Label);
        label.string = CreateRoomMgr_1.default.getInstance().getDefaultRuleName();
      };
      __decorate([ property({
        tooltip: "关闭创建房间",
        type: cc.Node
      }) ], Prefab_CreateRoomPanelCtrl.prototype, "ClosePanel", void 0);
      __decorate([ property({
        tooltip: "默认规则",
        type: cc.Node
      }) ], Prefab_CreateRoomPanelCtrl.prototype, "DefaultRule", void 0);
      __decorate([ property({
        tooltip: "创建按钮",
        type: cc.Node
      }) ], Prefab_CreateRoomPanelCtrl.prototype, "CreateRoom", void 0);
      __decorate([ property({
        tooltip: "左侧子游戏按钮容器",
        type: cc.Node
      }) ], Prefab_CreateRoomPanelCtrl.prototype, "SubGameContent", void 0);
      __decorate([ property({
        tooltip: "toggle组件父节点",
        type: cc.Node
      }) ], Prefab_CreateRoomPanelCtrl.prototype, "ToggleContainer", void 0);
      __decorate([ property({
        tooltip: "界面容器",
        type: cc.Node
      }) ], Prefab_CreateRoomPanelCtrl.prototype, "PanelContent", void 0);
      __decorate([ property({
        tooltip: "子游戏按钮预置",
        type: cc.Node
      }) ], Prefab_CreateRoomPanelCtrl.prototype, "subGameItem", void 0);
      __decorate([ property({
        tooltip: "限免提示",
        type: cc.Node
      }) ], Prefab_CreateRoomPanelCtrl.prototype, "gameFreeTip", void 0);
      __decorate([ property({
        tooltip: "房间设置",
        type: cc.Node
      }) ], Prefab_CreateRoomPanelCtrl.prototype, "node_roomsetting", void 0);
      __decorate([ property(cc.Prefab) ], Prefab_CreateRoomPanelCtrl.prototype, "Prefab_downloadsubgame", void 0);
      Prefab_CreateRoomPanelCtrl = __decorate([ ccclass ], Prefab_CreateRoomPanelCtrl);
      return Prefab_CreateRoomPanelCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_CreateRoomPanelCtrl;
    cc._RF.pop();
  }, {
    "../../../AppStart/AppMgrs/LoaderMgr": "LoaderMgr",
    "../../CfgMgrs/GameCateCfg": "GameCateCfg",
    "../../GameMgrs/BetMgr": "BetMgr",
    "../../GameMgrs/CreateRoomMgr": "CreateRoomMgr",
    "../../GameMgrs/GameFreeMgr": "GameFreeMgr",
    "../../GameMgrs/LoginMgr": "LoginMgr",
    "../../GameMgrs/RoomMgr": "RoomMgr",
    "../../GameMgrs/SubGameMgr": "SubGameMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView",
    "../../Libs/LocalStorage": "LocalStorage"
  } ],
  Prefab_DayTaskPanelCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2f5d71JQdtD246O4ak7IxX5", "Prefab_DayTaskPanelCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var TaskMgr_1 = require("../../GameMgrs/TaskMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.tasks = null;
        _this.tasks = TaskMgr_1.default.getInstance().getTaskList();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          taskContent: ctrl.taskPanel,
          pre_item: ctrl.taskItem,
          arrTaskItem: []
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        for (var i = 0; i < this.model.tasks.length; ++i) {
          TaskMgr_1.default.getInstance().setTaskItemInfo(this.model.tasks[i]);
          var item = cc.instantiate(this.ui.pre_item);
          this.ui.taskContent.addChild(item);
          this.ui.arrTaskItem.push(item);
        }
        for (var i = 0; i < this.model.tasks.length; ++i) if (1 == this.model.tasks[i].is_receive) {
          this.ui.arrTaskItem[i].removeFromParent();
          this.ui.taskContent.addChild(this.ui.arrTaskItem[i]);
        }
      };
      return View;
    }(BaseView_1.default);
    var Prefab_DayTaskPanel = function(_super) {
      __extends(Prefab_DayTaskPanel, _super);
      function Prefab_DayTaskPanel() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.taskPanel = null;
        _this.taskItem = null;
        return _this;
      }
      Prefab_DayTaskPanel.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_DayTaskPanel.prototype.defineNetEvents = function() {};
      Prefab_DayTaskPanel.prototype.defineGlobalEvents = function() {};
      Prefab_DayTaskPanel.prototype.connectUi = function() {};
      Prefab_DayTaskPanel.prototype.start = function() {};
      __decorate([ property({
        tooltip: "任务项容器",
        type: cc.Node
      }) ], Prefab_DayTaskPanel.prototype, "taskPanel", void 0);
      __decorate([ property({
        tooltip: "任务项预制",
        type: cc.Prefab
      }) ], Prefab_DayTaskPanel.prototype, "taskItem", void 0);
      Prefab_DayTaskPanel = __decorate([ ccclass ], Prefab_DayTaskPanel);
      return Prefab_DayTaskPanel;
    }(BaseCtrl_1.default);
    exports.default = Prefab_DayTaskPanel;
    cc._RF.pop();
  }, {
    "../../GameMgrs/TaskMgr": "TaskMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_DefaultRuleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7853bfhrLBBaaqMX5I1eiPe", "Prefab_DefaultRuleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var CreateRoomMgr_1 = require("../../GameMgrs/CreateRoomMgr");
    var BetMgr_1 = require("../../GameMgrs/BetMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MAX_ITEM_NUM = 8;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.commonRule = [];
        _this.itemBegin = null;
        _this.gameId = null;
        _this.itemBegin = 0;
        _this.gameId = BetMgr_1.default.getInstance().getGameId();
        _this.commonRule = CreateRoomMgr_1.default.getInstance().getCommonRule(_this.gameId);
        console.log("玩家所创建的规则（数组）", _this.commonRule);
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_content: null,
          node_btnClose: null,
          prefab_CommonRuleItem: null,
          nodes_commonRuleItem: []
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_btnClose = ctrl.Btn_Close;
        this.ui.node_content = ctrl.Content;
        this.ui.prefab_CommonRuleItem = ctrl.CommonRuleItem;
        this.addCommonRuleItem();
        CreateRoomMgr_1.default.getInstance().setRuleItems(this.ui.nodes_commonRuleItem);
      };
      View.prototype.instItem = function(index) {
        var commonRule = this.model.commonRule;
        var item = cc.instantiate(this.ui.prefab_CommonRuleItem);
        item.parent = this.ui.node_content;
        item.getComponentInChildren(cc.Label).string = commonRule[index] ? commonRule[index].ruleName : "点击创建";
        item.getChildByName("btn_editName").active = commonRule[index] && commonRule[index].ruleInfo;
        item.getChildByName("btn_edit").active = commonRule[index] && commonRule[index].ruleInfo;
        item.getChildByName("btn_create").active = !item.getChildByName("btn_edit").active;
        this.ui.nodes_commonRuleItem.push(item);
        index <= this.model.commonRule.length && (this.model.itemBegin = index);
      };
      View.prototype.addCommonRuleItem = function() {
        var commonRule = this.model.commonRule;
        var count = commonRule.length;
        for (var i = 0; i < MAX_ITEM_NUM; i++) {
          CreateRoomMgr_1.default.getInstance().setCommonRulePerItem(commonRule[i]);
          CreateRoomMgr_1.default.getInstance().setRuleItemIndex(i);
          this.instItem(i);
        }
      };
      View.prototype.refCommonRuleItem = function() {
        var commonRule = this.model.commonRule;
        var count = commonRule.length;
        var itemBegin = this.model.itemBegin;
        for (var i = itemBegin; i < count; i++) {
          var item = this.ui.nodes_commonRuleItem[i];
          CreateRoomMgr_1.default.getInstance().setCommonRulePerItem(commonRule[i]);
          item.getComponentInChildren(cc.Label).string = commonRule[i] ? commonRule[i].ruleName : "点击创建";
          item.getChildByName("btn_editName").active = commonRule[i] && commonRule[i].ruleInfo;
          item.getChildByName("btn_edit").active = commonRule[i] && commonRule[i].ruleInfo;
          item.getChildByName("btn_create").active = !item.getChildByName("btn_edit").active;
          this.model.itemBegin = i;
          item.getComponent("Prefab_DefaultRuleItemCtrl").refreshPerItemData();
        }
        console.log("刷新界面显示", count, itemBegin);
      };
      return View;
    }(BaseView_1.default);
    var Prefab_DefaultRuleCtrlCtrl = function(_super) {
      __extends(Prefab_DefaultRuleCtrlCtrl, _super);
      function Prefab_DefaultRuleCtrlCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.Btn_Close = null;
        _this.Content = null;
        _this.CommonRuleItem = null;
        return _this;
      }
      Prefab_DefaultRuleCtrlCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_DefaultRuleCtrlCtrl.prototype.defineNetEvents = function() {};
      Prefab_DefaultRuleCtrlCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          createCommonRuleData: this.createCommonRuleData,
          closeDefaultRulePanel: this.closeDefaultRulePanel
        };
      };
      Prefab_DefaultRuleCtrlCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.Btn_Close, this.Btn_Close_cb, "关闭");
      };
      Prefab_DefaultRuleCtrlCtrl.prototype.start = function() {};
      Prefab_DefaultRuleCtrlCtrl.prototype.Btn_Close_cb = function() {
        this.finish();
      };
      Prefab_DefaultRuleCtrlCtrl.prototype.createCommonRuleData = function() {
        console.log("创建成功，刷新列表");
        console.log("刷新前数据", this.model.commonRule);
        this.model.commonRule = CreateRoomMgr_1.default.getInstance().getCommonRule(this.model.gameId);
        console.log("刷新后数据", this.model.commonRule);
        this.view.refCommonRuleItem();
      };
      Prefab_DefaultRuleCtrlCtrl.prototype.closeDefaultRulePanel = function() {
        this.finish();
      };
      __decorate([ property({
        tooltip: "关闭按钮",
        type: cc.Node
      }) ], Prefab_DefaultRuleCtrlCtrl.prototype, "Btn_Close", void 0);
      __decorate([ property({
        tooltip: "视图",
        type: cc.Node
      }) ], Prefab_DefaultRuleCtrlCtrl.prototype, "Content", void 0);
      __decorate([ property({
        tooltip: "常用规则预置",
        type: cc.Prefab
      }) ], Prefab_DefaultRuleCtrlCtrl.prototype, "CommonRuleItem", void 0);
      Prefab_DefaultRuleCtrlCtrl = __decorate([ ccclass ], Prefab_DefaultRuleCtrlCtrl);
      return Prefab_DefaultRuleCtrlCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_DefaultRuleCtrlCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BetMgr": "BetMgr",
    "../../GameMgrs/CreateRoomMgr": "CreateRoomMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_DefaultRuleItemCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "625352QNrxKcID+5qcmiQk6", "Prefab_DefaultRuleItemCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var CreateRoomMgr_1 = require("../../GameMgrs/CreateRoomMgr");
    var BetMgr_1 = require("../../GameMgrs/BetMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.commonRule = {};
        _this.index = null;
        _this.commonRule = CreateRoomMgr_1.default.getInstance().getCommonRulePerItem();
        _this.index = CreateRoomMgr_1.default.getInstance().getRuleItemIndex();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.node = null;
        _this.ui = {
          btnRename: ctrl.Rename,
          labName: ctrl.NameString,
          btnEdit: ctrl.Edit,
          btnCreate: ctrl.Create,
          prefab_renameItem: ctrl.RenameItem
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {};
      return View;
    }(BaseView_1.default);
    var Prefab_DefaultRuleItemCtrl = function(_super) {
      __extends(Prefab_DefaultRuleItemCtrl, _super);
      function Prefab_DefaultRuleItemCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.Rename = null;
        _this.NameString = null;
        _this.Edit = null;
        _this.Create = null;
        _this.RenameItem = null;
        return _this;
      }
      Prefab_DefaultRuleItemCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_DefaultRuleItemCtrl.prototype.defineNetEvents = function() {};
      Prefab_DefaultRuleItemCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_DefaultRuleItemCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btnRename, this.renameCB, "重新命名");
        this.connect(G_UiType.image, this.ui.btnEdit, this.editCB, "编辑规则");
        this.connect(G_UiType.image, this.ui.btnCreate, this.createCB, "创建常用规则");
      };
      Prefab_DefaultRuleItemCtrl.prototype.start = function() {};
      Prefab_DefaultRuleItemCtrl.prototype.refreshPerItemData = function() {
        this.model.commonRule = CreateRoomMgr_1.default.getInstance().getCommonRulePerItem();
      };
      Prefab_DefaultRuleItemCtrl.prototype.renameCB = function(event) {
        console.log("重新命名规则名称");
        var name = this.model.commonRule.ruleName;
        CreateRoomMgr_1.default.getInstance().setCommonRuleName(name);
        CreateRoomMgr_1.default.getInstance().setRuleItemIndex(this.model.index);
        this.start_sub_module(G_MODULE.DefaultRuleItemRename);
      };
      Prefab_DefaultRuleItemCtrl.prototype.editCB = function(event) {
        console.log("打开编辑规则界面");
        CreateRoomMgr_1.default.getInstance().setbCommomRule(true);
        CreateRoomMgr_1.default.getInstance().setEditItemIndex(this.model.index);
        var gameId = BetMgr_1.default.getInstance().getGameId();
        var Groups = CreateRoomMgr_1.default.getInstance().getCommonRuleGroups(gameId);
        var commonRule = CreateRoomMgr_1.default.getInstance().getCommonRule(gameId);
        cc.log(commonRule[this.model.index]);
        var qzmjRoomRuleInfo = CreateRoomMgr_1.default.getInstance().getRoomRuleInfo(gameId);
        CreateRoomMgr_1.default.getInstance().RefreshRoomUi(gameId);
        cc.log(qzmjRoomRuleInfo);
        CreateRoomMgr_1.default.getInstance().setDefaultRuleName(commonRule[this.model.index].ruleName);
        CreateRoomMgr_1.default.getInstance().RefreshDefaultRuleLabel();
        CreateRoomMgr_1.default.getInstance().closeDefaultRulePanel();
      };
      Prefab_DefaultRuleItemCtrl.prototype.createCB = function(event) {
        console.log("新建常用规则");
        this.start_sub_module(G_MODULE.CreateDefaultRule);
      };
      __decorate([ property({
        tooltip: "修改名称按钮",
        type: cc.Node
      }) ], Prefab_DefaultRuleItemCtrl.prototype, "Rename", void 0);
      __decorate([ property({
        tooltip: "自定义名称",
        type: cc.Label
      }) ], Prefab_DefaultRuleItemCtrl.prototype, "NameString", void 0);
      __decorate([ property({
        tooltip: "编辑按钮",
        type: cc.Node
      }) ], Prefab_DefaultRuleItemCtrl.prototype, "Edit", void 0);
      __decorate([ property({
        tooltip: "新建按钮",
        type: cc.Node
      }) ], Prefab_DefaultRuleItemCtrl.prototype, "Create", void 0);
      __decorate([ property({
        tooltip: "改名界面",
        type: cc.Prefab
      }) ], Prefab_DefaultRuleItemCtrl.prototype, "RenameItem", void 0);
      Prefab_DefaultRuleItemCtrl = __decorate([ ccclass ], Prefab_DefaultRuleItemCtrl);
      return Prefab_DefaultRuleItemCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_DefaultRuleItemCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BetMgr": "BetMgr",
    "../../GameMgrs/CreateRoomMgr": "CreateRoomMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_FirstChargeTaskCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6d007kQrwlO8bX9viPqDwoe", "Prefab_FirstChargeTaskCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var TaskMgr_1 = require("../../GameMgrs/TaskMgr");
    var FirstChargeTaskMgr_1 = require("../../GameMgrs/FirstChargeTaskMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.isFirstRecharge = null;
        _this.updateFirstRecharge();
        return _this;
      }
      Model.prototype.updateFirstRecharge = function() {
        this.isFirstRecharge = UserMgr_1.default.getInstance().getMyInfo().is_get_reward;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          chargeBtn: ctrl.chargeBtn,
          rewardBtn: ctrl.rewardBtn
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.updateFirstBtn();
      };
      View.prototype.updateButton = function() {
        var sprite = this.ui.chargeBtn.getComponentInChildren(cc.Sprite);
        var imagePath = "Plat/items/img_xzjq";
        cc.loader.loadRes(imagePath, cc.SpriteFrame, function(err, spriteFrame) {
          if (err) return cc.error("no find image path: %s", imagePath);
          sprite.spriteFrame = spriteFrame;
        });
      };
      View.prototype.updateFirstBtn = function() {
        if (0 == this.model.isFirstRecharge) {
          this.ui.chargeBtn.active = true;
          this.ui.rewardBtn.active = false;
        } else if (1 == this.model.isFirstRecharge) {
          this.ui.chargeBtn.active = false;
          this.ui.rewardBtn.active = true;
        }
      };
      return View;
    }(BaseView_1.default);
    var Prefab_FirstChargeTaskCtrl = function(_super) {
      __extends(Prefab_FirstChargeTaskCtrl, _super);
      function Prefab_FirstChargeTaskCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.chargeBtn = null;
        _this.rewardBtn = null;
        return _this;
      }
      Prefab_FirstChargeTaskCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_FirstChargeTaskCtrl.prototype.defineNetEvents = function() {};
      Prefab_FirstChargeTaskCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_FirstChargeTaskCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.chargeBtn, this.chargeBtnCB, "点击前往充值");
        this.connect(G_UiType.button, this.ui.rewardBtn, this.rewardBtnCB, "领取首充奖励");
      };
      Prefab_FirstChargeTaskCtrl.prototype.start = function() {};
      Prefab_FirstChargeTaskCtrl.prototype.chargeBtnCB = function() {
        this.start_sub_module(G_MODULE.Shop);
        TaskMgr_1.default.getInstance().closeTaskPanel();
      };
      Prefab_FirstChargeTaskCtrl.prototype.rewardBtnCB = function() {
        FirstChargeTaskMgr_1.default.getInstance().FirstCharge();
      };
      __decorate([ property({
        tooltip: "充值按钮",
        type: cc.Node
      }) ], Prefab_FirstChargeTaskCtrl.prototype, "chargeBtn", void 0);
      __decorate([ property({
        tooltip: "领取奖励按钮",
        type: cc.Node
      }) ], Prefab_FirstChargeTaskCtrl.prototype, "rewardBtn", void 0);
      Prefab_FirstChargeTaskCtrl = __decorate([ ccclass ], Prefab_FirstChargeTaskCtrl);
      return Prefab_FirstChargeTaskCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_FirstChargeTaskCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/FirstChargeTaskMgr": "FirstChargeTaskMgr",
    "../../GameMgrs/TaskMgr": "TaskMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_InviteTaskCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f8680/ZE4NJTL/t3/RLWwKs", "Prefab_InviteTaskCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var shareMgr_1 = require("../../GameMgrs/shareMgr");
    var AppInfoMgr_1 = require("../../../AppStart/AppMgrs/AppInfoMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.inviteInfo = null;
        _this.oldreward = [];
        _this.inviteInfo = shareMgr_1.default.getInstance().getShareTaskData();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          countLabel: ctrl.countLabel,
          inviteProgress: ctrl.inviteProgress,
          labelPanel: ctrl.labelPanel,
          rewardPanel: ctrl.rewardPanel,
          inviteBtn: ctrl.inviteBtn,
          receive: ctrl.receive,
          goinviteLIst: [],
          rewardList: []
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        var info = this.model.inviteInfo;
        cc.error(info);
        this.ui.countLabel.string = info.number;
        for (var i = 0; i < info.targets.length; ++i) {
          this.ui.labelPanel.children[i].getComponent(cc.Label).string = info.targets[i].target + "次";
          this.ui.rewardPanel.children[i].getChildByName("count").getComponent(cc.Label).string = info.targets[i].amount;
        }
        var progressArr = [ 0, .1, .2, .3, .4, .5, .544, .588, .632, .676, .72, .748, .776, .804, .832, .86, .888, .916, .934, .962, 1 ];
        this.ui.inviteProgress.progress = progressArr[info.number];
        for (var i = 0; i < this.ui.labelPanel.children.length; ++i) this.updateReceiveState(i);
        for (var i = 0; i < this.ui.labelPanel.children.length; ++i) {
          this.ui.goinviteLIst.push(this.ui.rewardPanel.children[i]);
          this.ui.rewardList.push(this.ui.receive.children[i]);
        }
      };
      View.prototype.updateReceiveState = function(index) {
        var info = this.model.inviteInfo;
        var receiveState = info.targets[index].status;
        this.ui.receive.children[index].active = !receiveState && info.targets[index].target <= info.number;
        this.ui.rewardPanel.children[index].getChildByName("received").active = receiveState;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_InviteTaskCtrl = function(_super) {
      __extends(Prefab_InviteTaskCtrl, _super);
      function Prefab_InviteTaskCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.countLabel = null;
        _this.inviteProgress = null;
        _this.labelPanel = null;
        _this.rewardPanel = null;
        _this.inviteBtn = null;
        _this.receive = null;
        return _this;
      }
      Prefab_InviteTaskCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_InviteTaskCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqInviteGiftInfo": this.http_reqInviteGiftInfo
        };
      };
      Prefab_InviteTaskCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_InviteTaskCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.inviteBtn, this.inviteBtnCB, "点击邀请好友");
        var _loop_1 = function(i) {
          var cb = function() {
            this.rewardCB(i);
          };
          this_1.connect(G_UiType.button, this_1.ui.rewardList[i], cb, "领取邀请奖励");
        };
        var this_1 = this;
        for (var i = 0; i < this.ui.rewardList.length; ++i) _loop_1(i);
        var _loop_2 = function(i) {
          var cb = function() {
            this.goinvite(i);
          };
          this_2.connect(G_UiType.button, this_2.ui.goinviteLIst[i], cb, "去邀请");
        };
        var this_2 = this;
        for (var i = 0; i < this.ui.goinviteLIst.length; ++i) _loop_2(i);
      };
      Prefab_InviteTaskCtrl.prototype.start = function() {
        cc.log("邀请有礼创建界面");
      };
      Prefab_InviteTaskCtrl.prototype.onDestroy = function() {
        cc.log("邀请有礼界面关闭了");
      };
      Prefab_InviteTaskCtrl.prototype.goinvite = function(index) {
        shareMgr_1.default.getInstance().setCurClick(index);
        this.start_sub_module(G_MODULE.goinvite);
      };
      Prefab_InviteTaskCtrl.prototype.rewardCB = function(index) {
        shareMgr_1.default.getInstance().setCurClick(index);
        shareMgr_1.default.getInstance().sendReqReceiveInviteGift({
          target: this.model.inviteInfo.targets[index].target
        });
      };
      Prefab_InviteTaskCtrl.prototype.inviteBtnCB = function() {
        if (cc.sys.isNative) {
          var appname = AppInfoMgr_1.default.getInstance().getAppName();
          G_PLATFORM.wxShareContent(G_PLATFORM.WX_SHARE_TYPE.WXSceneSession, "《" + appname + "》游戏邀请", "正宗泉州麻将，iphone X免费领，每天登录送现金", this.model.inviteInfo.url);
        }
      };
      Prefab_InviteTaskCtrl.prototype.http_reqInviteGiftInfo = function(msg) {
        this.model.inviteInfo = shareMgr_1.default.getInstance().getShareTaskData();
        this.view.initUi();
        cc.log("领取邀请奖励", msg);
      };
      __decorate([ property({
        tooltip: "已邀请人数Label",
        type: cc.Label
      }) ], Prefab_InviteTaskCtrl.prototype, "countLabel", void 0);
      __decorate([ property({
        tooltip: "进度条",
        type: cc.ProgressBar
      }) ], Prefab_InviteTaskCtrl.prototype, "inviteProgress", void 0);
      __decorate([ property({
        tooltip: "目标人数Label父节点",
        type: cc.Node
      }) ], Prefab_InviteTaskCtrl.prototype, "labelPanel", void 0);
      __decorate([ property({
        tooltip: "奖励父节点",
        type: cc.Node
      }) ], Prefab_InviteTaskCtrl.prototype, "rewardPanel", void 0);
      __decorate([ property({
        tooltip: "邀请按钮",
        type: cc.Node
      }) ], Prefab_InviteTaskCtrl.prototype, "inviteBtn", void 0);
      __decorate([ property({
        tooltip: "领取奖励按钮父节点",
        type: cc.Node
      }) ], Prefab_InviteTaskCtrl.prototype, "receive", void 0);
      Prefab_InviteTaskCtrl = __decorate([ ccclass ], Prefab_InviteTaskCtrl);
      return Prefab_InviteTaskCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_InviteTaskCtrl;
    cc._RF.pop();
  }, {
    "../../../AppStart/AppMgrs/AppInfoMgr": "AppInfoMgr",
    "../../GameMgrs/shareMgr": "ShareMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_JoinRoomCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d6c64ecIVNNeLHx2fRMFFjw", "Prefab_JoinRoomCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var RoomMgr_1 = require("../../GameMgrs/RoomMgr");
    var SubGameMgr_1 = require("../../GameMgrs/SubGameMgr");
    var GameCateCfg_1 = require("../../CfgMgrs/GameCateCfg");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.numarr = [];
        _this.maxlength = 6;
        _this.roomId = null;
        _this.roomRule = null;
        return _this;
      }
      Model.prototype.pushNumber = function(num) {
        if (this.numarr.length >= this.maxlength) return;
        this.numarr.push(num);
        return this.numarr.length >= this.maxlength;
      };
      Model.prototype.delTail = function() {
        this.numarr.length > 0 && this.numarr.remove(this.numarr.length - 1);
      };
      Model.prototype.getRoomId = function() {
        this.roomId = 0;
        var beishu = 1;
        for (var i = this.numarr.length - 1; i >= 0; i--) {
          var num = this.numarr[i];
          this.roomId += num * beishu;
          beishu *= 10;
        }
        return this.roomId;
      };
      Model.prototype.reset = function() {
        this.numarr = [];
      };
      Model.prototype.updateRule = function() {
        this.roomRule = RoomMgr_1.default.getInstance().getFangKaCfg();
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          labelNumArr: [],
          btnnumarr: [],
          btn_reset: null,
          btn_close: null,
          btn_del: null,
          panel_inputroomid: null,
          panal_roomid: null,
          btn_enter: null,
          panel_roomRule: ctrl.panel_roomRule,
          arrPanel: []
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.btn_reset = ctrl.btn_reset;
        this.ui.btn_close = ctrl.btn_close;
        this.ui.btn_del = ctrl.btn_del;
        this.ui.panel_inputroomid = ctrl.panel_inputroomid;
        this.ui.panal_roomid = ctrl.panal_roomid;
        this.ui.btn_enter = ctrl.btn_enter;
        for (var i = 0; i < 10; i++) {
          var btnNum = this.ui.panel_inputroomid.getChildByName("btn_num_" + i);
          this.ui.btnnumarr.push(btnNum);
        }
        for (var i = 0; i < this.model.maxlength; ++i) {
          var labelNum = this.ui.panal_roomid.getChildByName("num_" + i).getComponent(cc.Label);
          labelNum.node.active = false;
          this.ui.labelNumArr.push(labelNum);
        }
      };
      View.prototype.updateRoomId = function() {
        for (var i = 0; i < this.ui.labelNumArr.length; i++) {
          var labelNum = this.ui.labelNumArr[i];
          var value = this.model.numarr[i];
          var active = null != value;
          active && (labelNum.string = value);
          labelNum.node.active = active;
        }
      };
      View.prototype.removePanelRoomRule = function() {
        if (0 == this.ui.arrPanel.length) return;
        for (var i = 0; i < this.ui.arrPanel.length; i++) this.ui.arrPanel[i].removeFromParent();
      };
      View.prototype.showRule = function() {
        var self = this;
        self.removePanelRoomRule();
        var action = cc.sequence(cc.moveBy(.1, cc.p(-273, 0)), cc.callFunc(function() {
          var panelRoomRule = cc.instantiate(self.ui.panel_roomRule);
          panelRoomRule.parent = self.node;
          self.ui.arrPanel.push(panelRoomRule);
          panelRoomRule.getComponent("Prefab_RoomRuleCtrl").openCloseBtn();
          self.ui.btn_close.active = false;
        }));
        self.ui.panel_inputroomid.runAction(action);
      };
      return View;
    }(BaseView_1.default);
    var Prefab_JoinRoomCtrl = function(_super) {
      __extends(Prefab_JoinRoomCtrl, _super);
      function Prefab_JoinRoomCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_close = null;
        _this.btn_reset = null;
        _this.btn_del = null;
        _this.panel_inputroomid = null;
        _this.panal_roomid = null;
        _this.panel_roomRule = null;
        return _this;
      }
      Prefab_JoinRoomCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.model = new Model();
        this.view = new View(this.model);
        this.ui = this.view.ui;
        this.defineNetEvents();
        this.defineGlobalEvents();
        this.regAllEvents();
        this.connectUi();
      };
      Prefab_JoinRoomCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqFangKaCfg": this.http_reqFangKaCfg
        };
      };
      Prefab_JoinRoomCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_JoinRoomCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_close, this.btn_close_cb, "关闭按钮");
        this.connect(G_UiType.button, this.ui.btn_reset, this.btn_reset_cb, "点击重置");
        this.connect(G_UiType.button, this.ui.btn_del, this.btn_del_cb, "点击删除");
        var _loop_1 = function(i) {
          var btnNumCb = function() {
            this.inputNumber(i);
          };
          var btnNum = this_1.ui.btnnumarr[i];
          this_1.connect(G_UiType.button, btnNum, btnNumCb, "点击输入房间号按钮" + i);
        };
        var this_1 = this;
        for (var i = 0; i < this.ui.btnnumarr.length; i++) _loop_1(i);
      };
      Prefab_JoinRoomCtrl.prototype.http_reqFangKaCfg = function(msg) {
        console.log("http_reqFangKaCfg msg=", msg);
        var gameid = msg.cfg.gameid;
        var game = GameCateCfg_1.default.getInstance().getGameById(gameid);
        var state = SubGameMgr_1.default.getInstance().getSubGameState(game.code);
        if (0 == state) {
          this.finish();
          RoomMgr_1.default.getInstance().reqFangKaVerify(this.model.getRoomId());
        } else {
          this.model.updateRule();
          this.view.showRule();
        }
      };
      Prefab_JoinRoomCtrl.prototype.inputNumber = function(number) {
        console.log("点击了", number);
        var complete = this.model.pushNumber(number);
        this.view.updateRoomId();
        if (complete) {
          var roomId = this.model.getRoomId();
          RoomMgr_1.default.getInstance().reqFangKaCfg(roomId);
        }
      };
      Prefab_JoinRoomCtrl.prototype.start = function() {};
      Prefab_JoinRoomCtrl.prototype.btn_close_cb = function() {
        this.finish();
      };
      Prefab_JoinRoomCtrl.prototype.btn_reset_cb = function() {
        var self = this;
        self.model.reset();
        self.view.ui.btn_close.active = true;
        self.view.updateRoomId();
        if (self.view.ui.arrPanel.length <= 0) return;
        var cb = function() {
          self.view.removePanelRoomRule();
        };
        var action = cc.sequence(cc.callFunc(cb), cc.moveTo(.1, cc.p(0, -27)));
        self.view.ui.panel_inputroomid.runAction(action);
      };
      Prefab_JoinRoomCtrl.prototype.btn_del_cb = function() {
        var self = this;
        self.model.delTail();
        self.view.updateRoomId();
        var cb = function() {
          self.view.removePanelRoomRule();
          self.view.ui.btn_close.active = true;
        };
        var action = cc.sequence(cc.callFunc(cb), cc.moveTo(.1, cc.p(0, -27)));
        self.view.ui.panel_inputroomid.runAction(action);
      };
      __decorate([ property({
        tooltip: "关闭",
        type: cc.Node
      }) ], Prefab_JoinRoomCtrl.prototype, "btn_close", void 0);
      __decorate([ property({
        tooltip: "重置",
        type: cc.Node
      }) ], Prefab_JoinRoomCtrl.prototype, "btn_reset", void 0);
      __decorate([ property({
        tooltip: "删除",
        type: cc.Node
      }) ], Prefab_JoinRoomCtrl.prototype, "btn_del", void 0);
      __decorate([ property({
        tooltip: "输入面板",
        type: cc.Node
      }) ], Prefab_JoinRoomCtrl.prototype, "panel_inputroomid", void 0);
      __decorate([ property({
        tooltip: "房间号显示",
        type: cc.Node
      }) ], Prefab_JoinRoomCtrl.prototype, "panal_roomid", void 0);
      __decorate([ property({
        tooltip: "规则界面",
        type: cc.Prefab
      }) ], Prefab_JoinRoomCtrl.prototype, "panel_roomRule", void 0);
      Prefab_JoinRoomCtrl = __decorate([ ccclass ], Prefab_JoinRoomCtrl);
      return Prefab_JoinRoomCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_JoinRoomCtrl;
    cc._RF.pop();
  }, {
    "../../CfgMgrs/GameCateCfg": "GameCateCfg",
    "../../GameMgrs/RoomMgr": "RoomMgr",
    "../../GameMgrs/SubGameMgr": "SubGameMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_LuckDrawCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "44804D1ftxGyo9daPvgEIsy", "Prefab_LuckDrawCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var ModuleMgr_1 = require("../../GameMgrs/ModuleMgr");
    var LuckDrawMgr_1 = require("../../GameMgrs/LuckDrawMgr");
    var ServerMgr_1 = require("../../../AppStart/AppMgrs/ServerMgr");
    var AppInfoMgr_1 = require("../../../AppStart/AppMgrs/AppInfoMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.awardListInfo = {};
        _this.drawResult = {};
        _this.bDraw = null;
        _this.drawRecord = null;
        _this.isRunning = false;
        _this.wechatNum = "";
        _this.propID = 0;
        _this.propName = "";
        _this.shareUrl = ServerMgr_1.default.getInstance().getDownLoadPage();
        _this.awardListInfo = LuckDrawMgr_1.default.getInstance().getAwardList();
        console.log("awardListInfo", _this.awardListInfo);
        _this.bDraw = LuckDrawMgr_1.default.getInstance().getDrawed();
        _this.wechatNum = LuckDrawMgr_1.default.getInstance().getWechatNum();
        return _this;
      }
      Model.prototype.setDrawResult = function() {
        for (var key in this.awardListInfo) this.awardListInfo[key].item_id == this.drawResult.item_id && (this.propID = key);
        this.propName = this.drawResult.name;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          button_CloseBtn: null,
          button_CopyWechat: null,
          button_RewardRecord: null,
          button_StartDraw: null,
          node_RewardFrame: null,
          array_AwardList: []
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        var self = this;
        this.ui.button_CloseBtn = ctrl.CloseBtn;
        this.ui.button_CopyWechat = ctrl.CopyWechat;
        this.ui.button_RewardRecord = ctrl.RewardRecord;
        this.ui.button_StartDraw = ctrl.StartDraw;
        this.ui.array_AwardList = ctrl.AwardList;
        this.ui.node_RewardFrame = ctrl.RewardFrame;
        this.ui.node_RewardFrame.active = false;
        var _loop_1 = function(key) {
          var sprite = this_1.ui.array_AwardList[key];
          var imagePath = "Plat/" + this_1.model.awardListInfo[key].icon;
          cc.loader.loadRes(imagePath, cc.SpriteFrame, function(err, spriteFrame) {
            if (err) return cc.error("no find image path: %s", imagePath);
            sprite.spriteFrame = spriteFrame;
          });
        };
        var this_1 = this;
        for (var key in this.model.awardListInfo) _loop_1(key);
      };
      View.prototype.FrameTurnAround = function(delTime, playCount, propID, propName) {
        var self = this;
        self.model.isRunning = true;
        var pos = [];
        for (var i = 0; i < this.ui.array_AwardList.length; i++) {
          console.log(i);
          var framePos = this.ui.array_AwardList[i].node.getPosition();
          pos.push(framePos);
        }
        var action = function(delTime, playCount, propID, propName) {
          self.ui.node_RewardFrame.active = true;
          self.ui.node_RewardFrame.runAction(cc.sequence(cc.delayTime(delTime), cc.callFunc(function(sender, data) {
            playCount++;
            delTime += delTime > .1 ? .02 : .001;
            playCount = playCount <= 11 ? playCount : 0;
            0 == playCount && console.log(delTime);
            sender.setPosition(pos[playCount]);
            if (delTime <= .5) {
              if (delTime > .22 && propID == playCount) {
                self.ui.node_RewardFrame.runAction(cc.sequence(cc.delayTime(.3), cc.callFunc(function() {
                  var awardTime = new Date();
                  var year = awardTime.getFullYear() + "年";
                  var month = awardTime.getMonth() + 1 + "月";
                  var date = awardTime.getDate() + "日";
                  var awardTimeLab = year + month + date;
                  var cb = function() {
                    self.srcShootAndShare(self.model.propName, self.model.shareUrl);
                  };
                  self.showTipMsg("恭喜您获得" + propName + "\n请分享到朋友圈领取奖励！", cb, "shareBtn", awardTimeLab);
                  self.model.isRunning = false;
                })));
                return;
              }
              action(delTime, playCount, propID, propName);
            }
          })));
        };
        action(delTime, playCount, propID, propName);
      };
      View.prototype.showTipMsg = function(content, okcb, btnLab, awardTimeLab) {
        ModuleMgr_1.default.getInstance().start_sub_module(G_MODULE.LuckDrawTipPanel, function(prefabComp) {
          prefabComp.showTip(content, okcb, btnLab, awardTimeLab);
        }, "Prefab_luckDrawTipCtrl");
      };
      View.prototype.srcShootAndShare = function(propName, shareUrl) {
        var self = this;
        var appname = AppInfoMgr_1.default.getInstance().getAppName();
        G_PLATFORM.wxShareContent(G_PLATFORM.WX_SHARE_TYPE.WXSceneTimeline, appname + "分享送豪礼啦，我抽中了" + propName + "，一起下载拼手气吧！", appname, shareUrl);
      };
      return View;
    }(BaseView_1.default);
    var Prefab_LuckDrawCtrl = function(_super) {
      __extends(Prefab_LuckDrawCtrl, _super);
      function Prefab_LuckDrawCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.CloseBtn = null;
        _this.CopyWechat = null;
        _this.RewardRecord = null;
        _this.StartDraw = null;
        _this.AwardList = [];
        _this.RewardFrame = null;
        return _this;
      }
      Prefab_LuckDrawCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_LuckDrawCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqTrunTable": this.http_reqTrunTable,
          "http.reqTrunTableLottery": this.http_reqTrunTableLottery,
          "http.reqTrunTableDetails": this.http_reqTrunTableDetails
        };
      };
      Prefab_LuckDrawCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_LuckDrawCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.button_CloseBtn, this.click_buttonCloseCB, "关闭界面按钮");
        this.connect(G_UiType.button, this.ui.button_CopyWechat, this.copyWechatCB, "复制微信号");
        this.connect(G_UiType.image, this.ui.button_RewardRecord, this.rewardRecordCB, "打开中奖记录");
        this.connect(G_UiType.button, this.ui.button_StartDraw, this.startDrawCB, "开始抽奖");
      };
      Prefab_LuckDrawCtrl.prototype.click_buttonCloseCB = function() {
        console.log("关闭界面");
        if (this.model.isRunning) return;
        this.finish();
      };
      Prefab_LuckDrawCtrl.prototype.copyWechatCB = function() {
        console.log("复制了微信号");
        cc.sys.isNative && G_PLATFORM.copyToClipboard("dzwp09");
      };
      Prefab_LuckDrawCtrl.prototype.rewardRecordCB = function() {
        console.log("打开中奖记录");
        LuckDrawMgr_1.default.getInstance().reqTrunTableDetails();
      };
      Prefab_LuckDrawCtrl.prototype.http_reqTrunTableDetails = function() {
        var _this = this;
        this.model.drawRecord = LuckDrawMgr_1.default.getInstance().getDrawRecord();
        if (1 == this.model.bDraw) {
          var awardTime = new Date();
          var year = awardTime.getFullYear() + "年";
          var month = awardTime.getMonth() + 1 + "月";
          var date = awardTime.getDate() + "日";
          var awardTimeLab = year + month + date;
          var cb = function() {
            _this.view.srcShootAndShare(_this.model.drawRecord.name, _this.model.shareUrl);
          };
          this.view.showTipMsg("恭喜您获得" + this.model.drawRecord.name + "\n请分享到朋友圈领取奖励！", cb, "shareBtn", awardTimeLab.toString());
        } else this.view.showTipMsg("您今日还未抽奖！", null, "knowBtn", "");
      };
      Prefab_LuckDrawCtrl.prototype.drawTurn = function() {
        this.view.FrameTurnAround(.01, 0, this.model.propID, this.model.propName);
      };
      Prefab_LuckDrawCtrl.prototype.startDrawCB = function() {
        if (this.model.isRunning) return;
        LuckDrawMgr_1.default.getInstance().reqTrunTableLottery();
      };
      Prefab_LuckDrawCtrl.prototype.http_reqTrunTableLottery = function() {
        console.log("开始抽奖");
        this.model.drawResult = LuckDrawMgr_1.default.getInstance().getDrawResult();
        if ("string" == typeof this.model.drawResult) {
          this.view.showTipMsg(this.model.drawResult + "\n明天记得再来哦!", null, "knowBtn", "");
          return;
        }
        this.model.setDrawResult();
        LuckDrawMgr_1.default.getInstance().reqTrunTable();
        this.drawTurn();
      };
      Prefab_LuckDrawCtrl.prototype.http_reqTrunTable = function() {
        this.model.bDraw = LuckDrawMgr_1.default.getInstance().getDrawed();
      };
      Prefab_LuckDrawCtrl.prototype.start = function() {};
      __decorate([ property({
        tooltip: "关闭界面按钮",
        type: cc.Node
      }) ], Prefab_LuckDrawCtrl.prototype, "CloseBtn", void 0);
      __decorate([ property({
        tooltip: "复制微信号",
        type: cc.Node
      }) ], Prefab_LuckDrawCtrl.prototype, "CopyWechat", void 0);
      __decorate([ property({
        tooltip: "中奖记录",
        type: cc.Node
      }) ], Prefab_LuckDrawCtrl.prototype, "RewardRecord", void 0);
      __decorate([ property({
        tooltip: "点击抽奖",
        type: cc.Node
      }) ], Prefab_LuckDrawCtrl.prototype, "StartDraw", void 0);
      __decorate([ property({
        tooltip: "奖品列表",
        type: cc.Sprite
      }) ], Prefab_LuckDrawCtrl.prototype, "AwardList", void 0);
      __decorate([ property({
        tooltip: "抽奖框",
        type: cc.Node
      }) ], Prefab_LuckDrawCtrl.prototype, "RewardFrame", void 0);
      Prefab_LuckDrawCtrl = __decorate([ ccclass ], Prefab_LuckDrawCtrl);
      return Prefab_LuckDrawCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_LuckDrawCtrl;
    cc._RF.pop();
  }, {
    "../../../AppStart/AppMgrs/AppInfoMgr": "AppInfoMgr",
    "../../../AppStart/AppMgrs/ServerMgr": "ServerMgr",
    "../../GameMgrs/LuckDrawMgr": "LuckDrawMgr",
    "../../GameMgrs/ModuleMgr": "ModuleMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_LymjCreateCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c3d9bCYxOhPLbktcVM8RvJc", "Prefab_LymjCreateCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var CreateRoomMgr_1 = require("../../GameMgrs/CreateRoomMgr");
    var BetMgr_1 = require("../../GameMgrs/BetMgr");
    var RoomCostCfg_1 = require("../../CfgMgrs/RoomCostCfg");
    var GameFreeMgr_1 = require("../../GameMgrs/GameFreeMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Configs = {
      0: "v_roundcount",
      1: "v_seatcount",
      2: "v_paytype",
      3: "b_quanzimo",
      4: "t_youjin",
      5: "t_zhuangfanbei"
    };
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.roomRuleInfo = null;
        _this.gameid = null;
        _this.roomCost = null;
        _this.roomcfg = null;
        _this.isFree = null;
        _this.isFree = GameFreeMgr_1.default.getInstance().isFree(6);
        BetMgr_1.default.getInstance().setGameId(6);
        _this.gameid = BetMgr_1.default.getInstance().getGameId();
        _this.roomRuleInfo = CreateRoomMgr_1.default.getInstance().getRoomRuleInfo(_this.gameid);
        cc.log("LymjRoomRuleInfo1", _this.roomRuleInfo);
        _this.roomCost = RoomCostCfg_1.default.getInstance().getRoomCost("lymj", 0, _this.roomRuleInfo.v_roundcount, _this.roomRuleInfo.v_seatcount, _this.roomRuleInfo.v_paytype);
        _this.roomcfg = {
          v_roundcount: [ 8, 16 ],
          v_seatcount: [ 2, 3, 4 ],
          v_paytype: [ 0, 1 ],
          b_quanzimo: [ 0, 1 ],
          t_youjin: [ 4, 5 ],
          t_zhuangfanbei: [ 2, 1 ],
          b_jinxianzhi: [ 0, 1, 2 ]
        };
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          ToggleContainer: null,
          Toggle: null,
          RoomCost: null,
          CostTitle: null,
          youjinList: []
        };
        _this.node = ctrl.node;
        _this.initUi();
        _this.initToggleContainer(_this.model.roomRuleInfo);
        _this.initToggle();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.ToggleContainer = ctrl.ToggleContainer;
        this.ui.Toggle = ctrl.Toggle;
        this.ui.CostTitle = ctrl.CostTitle;
        this.ui.RoomCost = ctrl.RoomCost;
        this.ui.RoomCost.parent.active = !this.model.isFree;
      };
      View.prototype.refreshFangfei = function(roomCost) {
        this.model.isFree && (roomCost = 0);
        CreateRoomMgr_1.default.getInstance().setProperty(roomCost, "roomRuleInfo", this.model.gameid, "v_fangfei");
        this.ui.RoomCost.getComponent(cc.Label).string = roomCost;
        this.updatePayLabel(this.model.roomRuleInfo.v_paytype);
      };
      View.prototype.updatePayLabel = function(value) {
        switch (value) {
         case 0:
          this.ui.CostTitle.getComponent(cc.Label).string = "首局结算时房主支付";
          break;

         case 1:
          this.ui.CostTitle.getComponent(cc.Label).string = "首局结算时所有玩家各支付";
        }
      };
      View.prototype.initToggleContainer = function(roomRuleInfo) {
        for (var key in roomRuleInfo) this.model.roomRuleInfo[key] = roomRuleInfo[key];
        for (var i = 0; i < this.ui.ToggleContainer.childrenCount; i++) {
          var data = this.model.roomcfg[Configs[i]];
          var value = this.model.roomRuleInfo[Configs[i]];
          for (var j = 0; j < data.length; j++) data[j] == value && this.ui.ToggleContainer.children[i].children[j].getComponent(cc.Toggle).check();
        }
        if (this.ui.ToggleContainer.children[3].children[1].getComponent(cc.Toggle).isChecked) {
          this.ui.ToggleContainer.children[4].children[1].active = false;
          this.ui.ToggleContainer.children[4].children[0].getComponent(cc.Toggle).check();
          this.model.roomRuleInfo.t_youjin = 4;
        }
      };
      View.prototype.initToggle = function() {
        this.ui.youjinList = this.ui.Toggle.getChildByName("youjintype").children;
        for (var i = 0; i < this.ui.youjinList.length; ++i) {
          var value = this.model.roomRuleInfo[this.ui.youjinList[i].name];
          value && this.ui.youjinList[i].getComponent(cc.Toggle).check();
          0 == this.model.roomRuleInfo.b_jinxianzhi ? this.ui.youjinList[i].getComponent(cc.Toggle).isChecked = false : 1 == this.model.roomRuleInfo.b_jinxianzhi && (this.ui.youjinList[0].getComponent(cc.Toggle).isChecked = false);
        }
      };
      return View;
    }(BaseView_1.default);
    var Prefab_LymjCreateCtrl = function(_super) {
      __extends(Prefab_LymjCreateCtrl, _super);
      function Prefab_LymjCreateCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.ToggleContainer = null;
        _this.Toggle = null;
        _this.RoomCost = null;
        _this.CostTitle = null;
        return _this;
      }
      Prefab_LymjCreateCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.refFangfei();
      };
      Prefab_LymjCreateCtrl.prototype.defineNetEvents = function() {};
      Prefab_LymjCreateCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_LymjCreateCtrl.prototype.connectUi = function() {
        var _this = this;
        var _loop_1 = function(i) {
          var temp = this_1.ToggleContainer.children[i];
          var _loop_2 = function(j) {
            var child = temp.children[j];
            var cb = function() {
              _this.Toggle_cb(i, j);
            };
            this_1.connect(G_UiType.text, child, cb, "单选按钮");
          };
          for (var j = 0; j < temp.childrenCount; j++) _loop_2(j);
        };
        var this_1 = this;
        for (var i = 0; i < this.ToggleContainer.childrenCount; i++) _loop_1(i);
        var _loop_3 = function(i) {
          this_2.connect(G_UiType.toggle, this_2.ui.youjinList[i], function() {
            _this.checkToggleCB(i);
          }, "切换游金限制");
        };
        var this_2 = this;
        for (var i = 0; i < this.ui.youjinList.length; ++i) _loop_3(i);
      };
      Prefab_LymjCreateCtrl.prototype.start = function() {};
      Prefab_LymjCreateCtrl.prototype.refFangfei = function() {
        var roomInfo = this.model.roomRuleInfo;
        var roomCost = RoomCostCfg_1.default.getInstance().getRoomCost("lymj", 0, roomInfo.v_roundcount, roomInfo.v_seatcount, roomInfo.v_paytype);
        this.model.roomRuleInfo.v_fangfei = roomCost;
        this.view.refreshFangfei(roomCost);
      };
      Prefab_LymjCreateCtrl.prototype.Toggle_cb = function(groupIndex, childIndex) {
        if (3 == groupIndex) if (0 == childIndex) this.ToggleContainer.children[4].children[1].active || (this.ToggleContainer.children[4].children[1].active = true); else if (1 == childIndex) {
          this.ToggleContainer.children[4].children[1].active && (this.ToggleContainer.children[4].children[1].active = false);
          this.ToggleContainer.children[4].children[0].getComponent(cc.Toggle).isChecked;
          this.model.roomRuleInfo.t_youjin = 4;
        }
        var name = Configs[groupIndex];
        var value = this.model.roomcfg[name][childIndex];
        CreateRoomMgr_1.default.getInstance().setProperty(value, "roomRuleInfo", this.model.gameid, name);
        this.refFangfei();
        console.log("LymjRoomRuleInfo2", this.model.roomRuleInfo);
      };
      Prefab_LymjCreateCtrl.prototype.checkToggleCB = function(index) {
        var toggleName;
        switch (index) {
         case 0:
         case 1:
          toggleName = "b_jinxianzhi";
        }
        if (this.ui.youjinList[1].getComponent(cc.Toggle).isChecked) {
          CreateRoomMgr_1.default.getInstance().setProperty(1, "roomRuleInfo", this.model.gameid, toggleName);
          this.ui.youjinList[0].getComponent(cc.Toggle).isChecked && CreateRoomMgr_1.default.getInstance().setProperty(2, "roomRuleInfo", this.model.gameid, toggleName);
        } else if (this.ui.youjinList[0].getComponent(cc.Toggle).isChecked) {
          this.ui.youjinList[1].getComponent(cc.Toggle).isChecked = true;
          CreateRoomMgr_1.default.getInstance().setProperty(2, "roomRuleInfo", this.model.gameid, toggleName);
        } else CreateRoomMgr_1.default.getInstance().setProperty(0, "roomRuleInfo", this.model.gameid, toggleName);
        console.log("LymjRoomRuleInfo3", this.model.roomRuleInfo);
      };
      __decorate([ property({
        tooltip: "单选按钮",
        type: cc.Node
      }) ], Prefab_LymjCreateCtrl.prototype, "ToggleContainer", void 0);
      __decorate([ property({
        tooltip: "多选按钮",
        type: cc.Node
      }) ], Prefab_LymjCreateCtrl.prototype, "Toggle", void 0);
      __decorate([ property({
        tooltip: "房费",
        type: cc.Node
      }) ], Prefab_LymjCreateCtrl.prototype, "RoomCost", void 0);
      __decorate([ property({
        tooltip: "房费标题",
        type: cc.Node
      }) ], Prefab_LymjCreateCtrl.prototype, "CostTitle", void 0);
      Prefab_LymjCreateCtrl = __decorate([ ccclass ], Prefab_LymjCreateCtrl);
      return Prefab_LymjCreateCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_LymjCreateCtrl;
    cc._RF.pop();
  }, {
    "../../CfgMgrs/RoomCostCfg": "RoomCostCfg",
    "../../GameMgrs/BetMgr": "BetMgr",
    "../../GameMgrs/CreateRoomMgr": "CreateRoomMgr",
    "../../GameMgrs/GameFreeMgr": "GameFreeMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_MailCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ce7ab5JSeVDHb56GiPoKJ32", "Prefab_MailCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var MailMgr_1 = require("../../GameMgrs/MailMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.reqMailList();
        return _this;
      }
      Model.prototype.reqMailList = function() {
        MailMgr_1.default.getInstance().reqMailList({
          class: 2
        });
      };
      Model.prototype.updateMailData = function() {
        this.MailList = MailMgr_1.default.getInstance().getMailData();
      };
      Model.prototype.setReadMailID = function(emailID) {
        MailMgr_1.default.getInstance().setCurReadMailID(emailID);
      };
      Model.prototype.getCurMailID = function() {
        return MailMgr_1.default.getInstance().getCurReadMailID();
      };
      Model.prototype.getAllReadMailIDList = function() {
        return MailMgr_1.default.getInstance().getAllReadMailIDList();
      };
      Model.prototype.getAllGetMailIDList = function() {
        return MailMgr_1.default.getInstance().getAllGetMailIDList();
      };
      Model.prototype.getMailDataByID = function(emailID) {
        return MailMgr_1.default.getInstance().getMailDataByID(emailID);
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_ExitsMail: null,
          node_NotExitsMail: null,
          scroll_MailList: null,
          prefab_MailItem: null,
          CloseBtn: null,
          OkBtn: null,
          RefreshBtn: null,
          ReadAllBtn: null,
          GetAllBtn: null,
          Prefab_MailItemDetail: null,
          Node_MailItemDetail: null,
          lbl_mailTypes: [],
          lbl_mailTitles: [],
          btn_reads: [],
          pic_Accessorys: [],
          mailItems: [],
          lbl_reads: []
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.addGrayLayer();
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.prefab_MailItem = ctrl.Prefab_MailItem;
        this.ui.scroll_MailList = ctrl.Scroll_MailList;
        this.ui.node_ExitsMail = ctrl.ExitsMail;
        this.ui.node_NotExitsMail = ctrl.NotExitsMail;
        this.ui.CloseBtn = ctrl.CloseBtn;
        this.ui.OkBtn = ctrl.OkBtn;
        this.ui.RefreshBtn = ctrl.RefreshBtn;
        this.ui.ReadAllBtn = ctrl.ReadAllBtn;
        this.ui.GetAllBtn = ctrl.GetAllBtn;
        this.ui.node_ExitsMail.active = false;
        this.ui.node_NotExitsMail.active = false;
        this.ui.Prefab_MailItemDetail = ctrl.Prefab_MailItemDetail;
        this.ui.Node_MailItemDetail = ctrl.Node_MailItemDetail;
      };
      View.prototype.initView = function() {
        var maillist = this.model.MailList;
        if (null == maillist || null == maillist.length || void 0 == maillist.length) return;
        var content = this.ui.scroll_MailList.content;
        content.height = 0;
        content.removeAllChildren();
        for (var i = 0; i < maillist.length; i++) {
          var mailItem = cc.instantiate(this.ui.prefab_MailItem);
          content.addChild(mailItem);
          this.ui.mailItems[i] = mailItem;
          this.ui.pic_Accessorys[i] = mailItem.getChildByName("pic_Accessory");
          this.ui.lbl_mailTypes[i] = mailItem.getChildByName("lbl_mailType").getComponent(cc.Label);
          this.ui.lbl_mailTitles[i] = mailItem.getChildByName("lbl_mailTitle").getComponent(cc.Label);
          this.ui.btn_reads[i] = mailItem.getChildByName("btn_read");
          this.ui.lbl_reads[i] = mailItem.getChildByName("lbl_read");
          content.height += this.ui.mailItems[i].height + content.getComponent(cc.Layout).spacingY;
        }
      };
      View.prototype.updateMailItems = function() {
        var maillist = this.model.MailList;
        for (var i = 0; i < maillist.length; i++) {
          var name = "";
          switch (maillist[i].class) {
           case 0:
            name = "系统邮件";
            break;

           case 1:
            name = "好友邮件";
          }
          this.ui.lbl_mailTypes[i].string = name;
          this.ui.lbl_mailTitles[i].string = "邮件标题:" + maillist[i].mail_title;
          if (1 == maillist[i].type) {
            ctrl.connect(G_UiType.image, this.ui.mailItems[i], ctrl.ReadMail_cb, "id:" + maillist[i].id + "一封邮件");
            this.ui.pic_Accessorys[i].active = true;
            if (2 == maillist[i].status) {
              this.ui.btn_reads[i].active = false;
              this.ui.lbl_reads[i].active = true;
            } else {
              this.ui.btn_reads[i].active = true;
              ctrl.connect(G_UiType.image, this.ui.btn_reads[i], ctrl.ReadMail_cb, "id:" + maillist[i].id + "一封邮件");
              this.ui.btn_reads[i].name = maillist[i].id + "";
            }
          } else {
            this.ui.pic_Accessorys[i].active = false;
            this.ui.btn_reads[i].active = false;
            maillist[i].status >= 1 && (this.ui.lbl_reads[i].active = true);
            ctrl.connect(G_UiType.image, this.ui.mailItems[i], ctrl.ReadMail_cb, "id:" + maillist[i].id + "一封邮件");
          }
          this.ui.mailItems[i].name = maillist[i].id + "";
        }
        this.ui.node_ExitsMail.active = maillist.length;
        this.ui.node_NotExitsMail.active = !maillist.length;
      };
      View.prototype.showCurMailItemDetail = function() {
        var content = this.ui.Node_MailItemDetail;
        content.removeAllChildren();
        var itemDetail = cc.instantiate(this.ui.Prefab_MailItemDetail);
        content.addChild(itemDetail);
      };
      View.prototype.updateMailItemRead = function() {
        var curMailID = this.model.getCurMailID();
        var mailData = this.model.getMailDataByID(curMailID);
        if (1 == mailData.type) return;
        for (var i = 0; i < this.ui.mailItems.length; i++) if (this.ui.mailItems[i].name == curMailID.toString()) {
          this.ui.pic_Accessorys[i].active = false;
          this.ui.lbl_reads[i].active = true;
          break;
        }
      };
      View.prototype.updateMailItemGet = function() {
        var curMailID = this.model.getCurMailID();
        for (var i = 0; i < this.ui.mailItems.length; i++) if (this.ui.mailItems[i].name == curMailID.toString()) {
          this.ui.lbl_reads[i].active = true;
          this.ui.pic_Accessorys[i].active = false;
          this.ui.btn_reads[i].active = false;
          break;
        }
      };
      View.prototype.updateAllMailRead = function() {
        var allReadMailIDList = this.model.getAllReadMailIDList();
        for (var j = 0; j < allReadMailIDList.length; j++) for (var i = 0; i < this.ui.mailItems.length; i++) if (this.ui.mailItems[i].name == allReadMailIDList[j].toString()) {
          this.ui.pic_Accessorys[i].active = false;
          this.ui.lbl_reads[i].active = true;
          break;
        }
      };
      View.prototype.updateAllMailGet = function() {
        var allGetMailIDList = this.model.getAllGetMailIDList();
        for (var j = 0; j < allGetMailIDList.length; j++) for (var i = 0; i < this.ui.mailItems.length; i++) if (this.ui.mailItems[i].name == allGetMailIDList[j].toString()) {
          this.ui.lbl_reads[i].active = true;
          this.ui.pic_Accessorys[i].active = false;
          this.ui.btn_reads[i].active = false;
          break;
        }
      };
      return View;
    }(BaseView_1.default);
    var Prefab_MailCtrl = function(_super) {
      __extends(Prefab_MailCtrl, _super);
      function Prefab_MailCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.CloseBtn = null;
        _this.OkBtn = null;
        _this.NotExitsMail = null;
        _this.ExitsMail = null;
        _this.GetAllBtn = null;
        _this.ReadAllBtn = null;
        _this.RefreshBtn = null;
        _this.Scroll_MailList = null;
        _this.Prefab_MailItem = null;
        _this.Prefab_MailItemDetail = null;
        _this.Node_MailItemDetail = null;
        return _this;
      }
      Prefab_MailCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_MailCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqMailList": this.updateMailItemView,
          "http.reqReadMail": this.http_reqReadMail,
          "http.reqMailGet": this.http_reqMailGet,
          "http.reqMailAllRead": this.http_reqMailAllRead,
          "http.reqMailAllGet": this.http_reqMailAllGet,
          "http.reqMailInfo": this.http_reqMailInfo
        };
      };
      Prefab_MailCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_MailCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.CloseBtn, this.CloseBtn_cb, "关闭按钮");
        this.connect(G_UiType.image, this.ui.OkBtn, this.CloseBtn_cb, "关闭按钮");
        this.connect(G_UiType.image, this.ui.RefreshBtn, this.RefreshBtn_cb, "刷新按钮");
        this.connect(G_UiType.image, this.ui.ReadAllBtn, this.ReadAllBtn_cb, "一键阅读按钮");
        this.connect(G_UiType.image, this.ui.GetAllBtn, this.GetAllBtn_cb, "一键领取按钮");
      };
      Prefab_MailCtrl.prototype.start = function() {};
      Prefab_MailCtrl.prototype.updateMailItemView = function() {
        console.log("刷新邮件列表");
        this.model.updateMailData();
        this.view.initView();
        this.view.updateMailItems();
      };
      Prefab_MailCtrl.prototype.CloseBtn_cb = function(event) {
        MailMgr_1.default.getInstance().reqMailList({
          class: 2
        });
        this.finish();
      };
      Prefab_MailCtrl.prototype.RefreshBtn_cb = function(event) {
        MailMgr_1.default.getInstance().reqMailList({
          class: 2
        });
      };
      Prefab_MailCtrl.prototype.ReadAllBtn_cb = function(event) {
        this.model.getAllReadMailIDList() && MailMgr_1.default.getInstance().reqMailAllRead(this.model.getAllReadMailIDList());
      };
      Prefab_MailCtrl.prototype.GetAllBtn_cb = function(event) {
        this.model.getAllGetMailIDList() && MailMgr_1.default.getInstance().reqMailAllGet(this.model.getAllGetMailIDList());
      };
      Prefab_MailCtrl.prototype.ReadMail_cb = function(target) {
        this.model.setReadMailID(parseInt(target.name));
        this.view.showCurMailItemDetail();
      };
      Prefab_MailCtrl.prototype.http_reqMailGet = function() {
        this.view.updateMailItemGet();
      };
      Prefab_MailCtrl.prototype.http_reqReadMail = function() {
        this.view.updateMailItemRead();
      };
      Prefab_MailCtrl.prototype.http_reqMailAllRead = function() {
        this.view.updateAllMailRead();
      };
      Prefab_MailCtrl.prototype.http_reqMailAllGet = function() {
        this.view.updateAllMailGet();
      };
      Prefab_MailCtrl.prototype.http_reqMailInfo = function() {
        this.view.updateMailItemRead();
      };
      __decorate([ property({
        tooltip: "关闭按钮",
        type: cc.Node
      }) ], Prefab_MailCtrl.prototype, "CloseBtn", void 0);
      __decorate([ property({
        tooltip: "确定按钮",
        type: cc.Node
      }) ], Prefab_MailCtrl.prototype, "OkBtn", void 0);
      __decorate([ property({
        tooltip: "不存在邮件节点界面",
        type: cc.Node
      }) ], Prefab_MailCtrl.prototype, "NotExitsMail", void 0);
      __decorate([ property({
        tooltip: "存在邮件节点界面",
        type: cc.Node
      }) ], Prefab_MailCtrl.prototype, "ExitsMail", void 0);
      __decorate([ property({
        tooltip: "一键领取",
        type: cc.Node
      }) ], Prefab_MailCtrl.prototype, "GetAllBtn", void 0);
      __decorate([ property({
        tooltip: "一键阅读",
        type: cc.Node
      }) ], Prefab_MailCtrl.prototype, "ReadAllBtn", void 0);
      __decorate([ property({
        tooltip: "刷新列表",
        type: cc.Node
      }) ], Prefab_MailCtrl.prototype, "RefreshBtn", void 0);
      __decorate([ property({
        tooltip: "邮件列表",
        type: cc.ScrollView
      }) ], Prefab_MailCtrl.prototype, "Scroll_MailList", void 0);
      __decorate([ property({
        tooltip: "邮件列表部件",
        type: cc.Prefab
      }) ], Prefab_MailCtrl.prototype, "Prefab_MailItem", void 0);
      __decorate([ property({
        tooltip: "邮件列表详情",
        type: cc.Prefab
      }) ], Prefab_MailCtrl.prototype, "Prefab_MailItemDetail", void 0);
      __decorate([ property({
        tooltip: "邮件详情",
        type: cc.Node
      }) ], Prefab_MailCtrl.prototype, "Node_MailItemDetail", void 0);
      Prefab_MailCtrl = __decorate([ ccclass ], Prefab_MailCtrl);
      return Prefab_MailCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_MailCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/MailMgr": "MailMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_MailDetailCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9e4538RESBITaSx9qo0Wf72", "Prefab_MailDetailCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var MailMgr_1 = require("../../GameMgrs/MailMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        MailMgr_1.default.getInstance().reqMailInfo();
        return _this;
      }
      Model.prototype.getMailTitle = function() {
        return this.mailContent.mail_title;
      };
      Model.prototype.getMailContent = function() {
        return this.mailContent.mail_content;
      };
      Model.prototype.getMailAttachment = function() {
        return this.mailContent.mail_attachment;
      };
      Model.prototype.getMailStatus = function() {
        return this.mailContent.status;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          label_MailTitle: null,
          label_MailContent: null,
          Closebtn: null,
          Receivebtn: null,
          MailContentParent: null,
          MailPrize: null,
          prefab_MailPrizeItem: null,
          mailItemSprites: [],
          mailItemNumbers: []
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.label_MailTitle = ctrl.MailTitle.getComponent(cc.Label);
        this.ui.label_MailTitle.node.active = false;
        this.ui.label_MailContent = ctrl.MailContent.getComponent(cc.Label);
        this.ui.label_MailContent.node.active = false;
        this.ui.Closebtn = ctrl.Closebtn;
        this.ui.Receivebtn = ctrl.Receivebtn;
        this.ui.MailContentParent = ctrl.MailContentParent;
        this.ui.MailPrize = ctrl.MailPrize;
        this.ui.prefab_MailPrizeItem = ctrl.MailPrizeItem;
      };
      View.prototype.initWithView = function() {
        var MailAttachment = this.model.getMailAttachment();
        this.ui.MailPrize.removeAllChildren();
        if (null != MailAttachment && void 0 != MailAttachment) for (var i = 0; i < MailAttachment.count; i++) {
          var item = cc.instantiate(this.ui.prefab_MailPrizeItem);
          this.ui.MailPrize.addChild(item);
          this.ui.mailItemSprites[i] = item.getChildByName("sharing_diamonds_7").getComponent(cc.Sprite);
          this.ui.mailItemNumbers[i] = item.getChildByName("number").getComponent(cc.Label);
        }
        this.updateMailContent();
      };
      View.prototype.updateMailContent = function() {
        this.ui.label_MailTitle.string = this.model.getMailTitle();
        this.ui.label_MailContent.string = this.model.getMailContent();
        this.ui.MailContentParent.height = this.ui.label_MailContent.height + 10;
        var MailAttachment = this.model.getMailAttachment();
        if (null != MailAttachment && void 0 != MailAttachment) {
          this.ui.label_MailTitle.node.active = true;
          this.ui.label_MailContent.node.active = true;
          var _loop_1 = function(i) {
            texture = cc.loader.getRes(cc.url.raw("resources/Plat/items/item_" + MailAttachment.attachment[i].pid + ".png"));
            console.log("MailAttachment", MailAttachment.attachment[i]);
            var imagePath = "Plat/items/item_" + MailAttachment.attachment[i].pid;
            var self = this_1;
            cc.loader.loadRes(imagePath, cc.SpriteFrame, function(err, spriteFrame) {
              if (err) return cc.error("no find image path: %s", imagePath);
              self.ui.mailItemSprites[i].spriteFrame = spriteFrame;
            });
            this_1.ui.mailItemNumbers[i].string = "x" + MailAttachment.attachment[i].product_num;
          };
          var this_1 = this, texture;
          for (var i = 0; i < MailAttachment.count; i++) _loop_1(i);
        }
        this.model.getMailStatus() < 2 && (this.ui.Receivebtn.active = true);
      };
      return View;
    }(BaseView_1.default);
    var Prefab_MailDetailCtrl = function(_super) {
      __extends(Prefab_MailDetailCtrl, _super);
      function Prefab_MailDetailCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.Closebtn = null;
        _this.MailTitle = null;
        _this.MailContent = null;
        _this.Receivebtn = null;
        _this.MailContentParent = null;
        _this.MailPrize = null;
        _this.MailPrizeItem = null;
        return _this;
      }
      Prefab_MailDetailCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_MailDetailCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqMailInfo": this.updateMailInfo
        };
      };
      Prefab_MailDetailCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_MailDetailCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.Closebtn, this.Closebtn_cb, "关闭按钮");
        this.connect(G_UiType.image, this.ui.Receivebtn, this.Receivebtn_cb, "领取按钮");
      };
      Prefab_MailDetailCtrl.prototype.start = function() {};
      Prefab_MailDetailCtrl.prototype.updateMailInfo = function() {
        console.log("updateMailInfo");
        this.model.mailContent = MailMgr_1.default.getInstance().getMailDetail();
        this.view.initWithView();
      };
      Prefab_MailDetailCtrl.prototype.Closebtn_cb = function() {
        this.finish();
      };
      Prefab_MailDetailCtrl.prototype.Receivebtn_cb = function() {
        MailMgr_1.default.getInstance().reqMailGet();
        this.finish();
      };
      __decorate([ property({
        tooltip: "关闭按钮",
        type: cc.Node
      }) ], Prefab_MailDetailCtrl.prototype, "Closebtn", void 0);
      __decorate([ property({
        tooltip: "邮件标题",
        type: cc.Node
      }) ], Prefab_MailDetailCtrl.prototype, "MailTitle", void 0);
      __decorate([ property({
        tooltip: "邮件内容",
        type: cc.Node
      }) ], Prefab_MailDetailCtrl.prototype, "MailContent", void 0);
      __decorate([ property({
        tooltip: "领取按钮",
        type: cc.Node
      }) ], Prefab_MailDetailCtrl.prototype, "Receivebtn", void 0);
      __decorate([ property({
        tooltip: "邮件内容滑动框",
        type: cc.Node
      }) ], Prefab_MailDetailCtrl.prototype, "MailContentParent", void 0);
      __decorate([ property({
        tooltip: "邮件奖励品列表",
        type: cc.Node
      }) ], Prefab_MailDetailCtrl.prototype, "MailPrize", void 0);
      __decorate([ property({
        tooltip: "邮件奖励品",
        type: cc.Prefab
      }) ], Prefab_MailDetailCtrl.prototype, "MailPrizeItem", void 0);
      Prefab_MailDetailCtrl = __decorate([ ccclass ], Prefab_MailDetailCtrl);
      return Prefab_MailDetailCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_MailDetailCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/MailMgr": "MailMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_MoreGameCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "05fbabsi/hDEq0P5vzAz4gg", "Prefab_MoreGameCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_label: null,
          node_sure: null,
          node_close: null,
          node_edit: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_label = ctrl.Label;
        this.ui.node_close = ctrl.Btn_Close;
        this.ui.node_sure = ctrl.Btn_Sure;
        this.ui.node_edit = ctrl.Edit;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_MoreGameCtrl = function(_super) {
      __extends(Prefab_MoreGameCtrl, _super);
      function Prefab_MoreGameCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.Btn_Sure = null;
        _this.Btn_Close = null;
        _this.Edit = null;
        _this.Label = null;
        return _this;
      }
      Prefab_MoreGameCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_MoreGameCtrl.prototype.defineNetEvents = function() {};
      Prefab_MoreGameCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_MoreGameCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.Btn_Close, this.Btn_Close_cb, "关闭");
        this.connect(G_UiType.image, this.Btn_Sure, this.Btn_Sure_cb, "确认");
        this.connect(G_UiType.edit, this.Edit, this.editTextChenge_cb, "确认");
        this.connect(G_UiType.button, this.node, this.bg_cb, "点击更多界面的背景");
      };
      Prefab_MoreGameCtrl.prototype.start = function() {};
      Prefab_MoreGameCtrl.prototype.Btn_Close_cb = function() {
        this.finish();
      };
      Prefab_MoreGameCtrl.prototype.Btn_Sure_cb = function() {
        this.finish();
      };
      Prefab_MoreGameCtrl.prototype.editTextChenge_cb = function(event) {
        var length = this.ui.node_edit.getComponent(cc.EditBox).string.length;
        this.ui.node_label.getComponent(cc.Label).string = "(" + length + "/200)";
      };
      Prefab_MoreGameCtrl.prototype.bg_cb = function() {};
      __decorate([ property({
        tooltip: "确定按钮",
        type: cc.Node
      }) ], Prefab_MoreGameCtrl.prototype, "Btn_Sure", void 0);
      __decorate([ property({
        tooltip: "关闭按钮",
        type: cc.Node
      }) ], Prefab_MoreGameCtrl.prototype, "Btn_Close", void 0);
      __decorate([ property({
        tooltip: "输入框",
        type: cc.Node
      }) ], Prefab_MoreGameCtrl.prototype, "Edit", void 0);
      __decorate([ property({
        tooltip: "字数文本",
        type: cc.Node
      }) ], Prefab_MoreGameCtrl.prototype, "Label", void 0);
      Prefab_MoreGameCtrl = __decorate([ ccclass ], Prefab_MoreGameCtrl);
      return Prefab_MoreGameCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_MoreGameCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_MpnnCreatCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c18cb8Mkn9BOpZxL0B31HwF", "Prefab_MpnnCreatCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var CreateRoomMgr_1 = require("../../GameMgrs/CreateRoomMgr");
    var BetMgr_1 = require("../../GameMgrs/BetMgr");
    var RoomCostCfg_1 = require("../../CfgMgrs/RoomCostCfg");
    var GameFreeMgr_1 = require("../../GameMgrs/GameFreeMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Configs_1 = {
      0: "v_roundcount",
      1: "v_seatcount",
      2: "v_paytype",
      3: "v_minChip",
      4: "v_fullstart",
      5: "v_settleRule",
      6: "v_playeraddin",
      7: "v_grabbanker"
    };
    var Configs_2 = {
      0: "v_wuxiaoNiuLimit",
      1: "v_zhadanNiuLimit",
      2: "v_huluNiuLimit",
      3: "v_wuhuaNiuLimit",
      4: "v_tonghuaNiuLimit",
      5: "v_shunziNiuLimit",
      6: "allSelect"
    };
    var Configs_3 = {
      0: "v_midEnterLimit",
      1: "v_cuopaiLimit",
      2: "v_betLimit",
      4: "v_betredoubleLimit",
      5: "v_wanglaiLimit",
      6: "allSelect"
    };
    var SPECIALBRAND = {
      0: "五小牛（8倍）",
      1: "炸弹牛（6倍）",
      2: "葫芦牛（6倍）",
      3: "五花牛（5倍）",
      4: "同花牛（5倍）",
      5: "顺子牛（5倍）",
      6: ""
    };
    var ADVANCEDOPTIONS = {
      0: "中途禁入",
      1: "禁止搓牌",
      2: "下注限制",
      4: "下注加倍",
      5: "王癞玩法",
      6: ""
    };
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this._roomRuleInfo = null;
        _this._roomcfg = null;
        _this.v_startModel = null;
        _this._gameid = null;
        _this._roomCost = null;
        _this.isFree = null;
        _this.isFree = GameFreeMgr_1.default.getInstance().isFree(19);
        BetMgr_1.default.getInstance().setGameId(19);
        _this._gameid = BetMgr_1.default.getInstance().getGameId();
        _this._roomRuleInfo = CreateRoomMgr_1.default.getInstance().getRoomRuleInfo(_this._gameid);
        _this._roomCost = RoomCostCfg_1.default.getInstance().getRoomCost("mpnn", 0, _this._roomRuleInfo.v_roundcount, _this._roomRuleInfo.v_seatcount, _this._roomRuleInfo.v_paytype);
        _this._roomcfg = {
          v_roundcount: [ 10, 20 ],
          v_seatcount: [ 6, 8 ],
          v_paytype: [ 0, 1, 2 ],
          v_minChip: [ 0, 1, 2, 3 ],
          v_fullstart: [ 0, 4, 5, 6 ],
          v_settleRule: [ 0, 1 ],
          v_playeraddin: [ 0, 5, 10, 20 ],
          v_grabbanker: [ 1, 2, 3, 4 ]
        };
        6 == _this._roomRuleInfo.v_seatcount ? _this._roomcfg.v_fullstart = [ 0, 4, 5, 6 ] : 8 == _this._roomRuleInfo.v_seatcount && (_this._roomcfg.v_fullstart = [ 0, 6, 7, 8 ]);
        _this.v_startModel = [ 0, 1, 1, 1 ];
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this._Prefab_advancedOptions = null;
        _this.ui = {
          ToggleBtn: null,
          ToggleCheckBtn: null,
          Toggle: null,
          ToggleCheck: null,
          Zixun: null,
          RoomCost: null,
          CostTitle: null,
          Prefab_AdvancedOptions: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.initAdvancedOptions();
        _this.initToggle(_this.model._roomRuleInfo);
        _this.initToggleCheck(_this.model._roomRuleInfo);
        _this.refreshFangfei(_this.model._roomCost);
        _this.changeFullStart();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.Prefab_AdvancedOptions = ctrl.Prefab_AdvancedOptions;
        this.ui.CostTitle = ctrl.CostTitle;
        this.ui.ToggleBtn = ctrl.ToggleBtn;
        this.ui.ToggleCheckBtn = ctrl.ToggleCheckBtn;
        this.ui.Toggle = ctrl.Toggle;
        this.ui.ToggleCheck = ctrl.ToggleCheck;
        this.ui.Zixun = ctrl.ZiXun;
        this.ui.RoomCost = ctrl.RoomCost;
        this.ui.RoomCost.parent.active = !this.model.isFree;
      };
      View.prototype.initAdvancedOptions = function() {
        this._Prefab_advancedOptions = cc.instantiate(this.ui.Prefab_AdvancedOptions);
        this._Prefab_advancedOptions.parent = this.node.parent.parent;
        this._Prefab_advancedOptions.position = cc.p(10, 20);
        this._Prefab_advancedOptions.active = false;
      };
      View.prototype.refreshFangfei = function(roomCost) {
        this.ui.RoomCost.getComponent(cc.Label).string = roomCost;
        this.updatePayLabel(this.model._roomRuleInfo.v_paytype);
        this.model.isFree && (roomCost = 0);
        CreateRoomMgr_1.default.getInstance().setProperty(roomCost, "roomRuleInfo", this.model._gameid, "v_fangfei");
      };
      View.prototype.updatePayLabel = function(value) {
        switch (value) {
         case 0:
          this.ui.CostTitle.getComponent(cc.Label).string = "首局结算时房主支付";
          break;

         case 1:
          this.ui.CostTitle.getComponent(cc.Label).string = "首局结算时所有玩家各支付";
          break;

         case 2:
          this.ui.CostTitle.getComponent(cc.Label).string = "总结算时赢家按比例共支付";
        }
      };
      View.prototype.initCheckState = function(groupChildren, btnChildren, toggleName) {
        var data = this.model._roomcfg[toggleName];
        var value = this.model._roomRuleInfo[toggleName];
        for (var i = 0; i < data.length; i++) if (data[i] == value) {
          groupChildren.children[i].getComponent(cc.Toggle).check();
          btnChildren.children[1].getComponent(cc.Label).string = groupChildren.children[i].children[1].getComponent(cc.Label).string;
        }
      };
      View.prototype.initToggle = function(roomRuleInfo) {
        for (var key in roomRuleInfo) this.model._roomRuleInfo[key] = roomRuleInfo[key];
        var groups = this.ui.Toggle;
        var ToggleBtn = this.ui.ToggleBtn;
        for (var i = 0; i < groups.childrenCount; i++) {
          var groupChildren = groups.children[i].children[0];
          var btnChildren = ToggleBtn.children[i];
          this.initCheckState(groupChildren, btnChildren, Configs_1[i]);
        }
      };
      View.prototype.initToggleCheck = function(roomRuleInfo) {
        for (var key in roomRuleInfo) this.model._roomRuleInfo[key] = roomRuleInfo[key];
        var bool1 = true;
        var bool2 = true;
        var groups = this.ui.ToggleCheck;
        var groupChildren1 = groups.children[0];
        for (var k = 0; k < groupChildren1.childrenCount - 2; k++) {
          var value = this.model._roomRuleInfo[Configs_2[k]];
          if (0 != value) groupChildren1.children[k].getComponent(cc.Toggle).check(); else {
            groupChildren1.children[k].getComponent(cc.Toggle).uncheck();
            bool1 = false;
          }
        }
        bool1 ? groupChildren1.getChildByName("6").getComponent(cc.Toggle).check() : groupChildren1.getChildByName("6").getComponent(cc.Toggle).uncheck();
        var groupChildren2 = this._Prefab_advancedOptions;
        for (var k = 0; k < groupChildren2.childrenCount - 2; k++) {
          var value = this.model._roomRuleInfo[Configs_3[k]];
          if (0 != value) groupChildren2.children[k].getComponent(cc.Toggle).check(); else {
            groupChildren2.children[k].getComponent(cc.Toggle).uncheck();
            bool2 = false;
          }
        }
        bool2 ? groupChildren2.getChildByName("6").getComponent(cc.Toggle).check() : groupChildren2.getChildByName("6").getComponent(cc.Toggle).uncheck();
        var Label = this.ui.ToggleCheckBtn.children[0].children[1].getComponent(cc.Label);
        Label.string = ctrl.upDataSPECIALBRANDString(groupChildren1, 2);
        var Label2 = this.ui.ToggleCheckBtn.children[1].children[1].getComponent(cc.Label);
        Label2.string = ctrl.upDataADVANCEDOPTIONSString(groupChildren2, 2);
      };
      View.prototype.changeFullStart = function() {
        var nodeIndex;
        var node = this.ui.Toggle.children[4].children[0];
        for (var i = 0; i < node.childrenCount; i++) if (node.children[i].getComponent(cc.Toggle).isChecked) {
          nodeIndex = i;
          break;
        }
        if (this.model._roomRuleInfo.v_seatcount <= 6) {
          node.children[1].children[1].getComponent(cc.Label).string = "满4人开桌";
          node.children[2].children[1].getComponent(cc.Label).string = "满5人开桌";
          node.children[3].children[1].getComponent(cc.Label).string = "满6人开桌";
          node.children[1].children[2].children[1].getComponent(cc.Label).string = "满4人开桌";
          node.children[2].children[2].children[1].getComponent(cc.Label).string = "满5人开桌";
          node.children[3].children[2].children[1].getComponent(cc.Label).string = "满6人开桌";
          this.model._roomcfg.v_fullstart = [ 0, 4, 5, 6 ];
          this.ui.ToggleBtn.children[4].children[1].getComponent(cc.Label).string = node.children[nodeIndex].children[1].getComponent(cc.Label).string;
          CreateRoomMgr_1.default.getInstance().setProperty(this.model._roomcfg["v_fullstart"][nodeIndex], "roomRuleInfo", this.model._gameid, "v_fullstart");
        } else if (this.model._roomRuleInfo.v_seatcount <= 8) {
          node.children[1].children[1].getComponent(cc.Label).string = "满6人开桌";
          node.children[2].children[1].getComponent(cc.Label).string = "满7人开桌";
          node.children[3].children[1].getComponent(cc.Label).string = "满8人开桌";
          node.children[1].children[2].children[1].getComponent(cc.Label).string = "满6人开桌";
          node.children[2].children[2].children[1].getComponent(cc.Label).string = "满7人开桌";
          node.children[3].children[2].children[1].getComponent(cc.Label).string = "满8人开桌";
          this.model._roomcfg.v_fullstart = [ 0, 6, 7, 8 ];
          this.ui.ToggleBtn.children[4].children[1].getComponent(cc.Label).string = node.children[nodeIndex].children[1].getComponent(cc.Label).string;
          CreateRoomMgr_1.default.getInstance().setProperty(this.model._roomcfg["v_fullstart"][nodeIndex], "roomRuleInfo", this.model._gameid, "v_fullstart");
        }
      };
      return View;
    }(BaseView_1.default);
    var Prefab_NNzyqzCreatCtrl = function(_super) {
      __extends(Prefab_NNzyqzCreatCtrl, _super);
      function Prefab_NNzyqzCreatCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.checkBoolen = null;
        _this.ToggleBtn = null;
        _this.ToggleCheckBtn = null;
        _this.Toggle = null;
        _this.ToggleCheck = null;
        _this.ZiXun = null;
        _this.RoomCost = null;
        _this.CostTitle = null;
        _this.Prefab_AdvancedOptions = null;
        return _this;
      }
      Prefab_NNzyqzCreatCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_NNzyqzCreatCtrl.prototype.defineNetEvents = function() {};
      Prefab_NNzyqzCreatCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          RefreshTBNNRoomUi: this.RefreshTBNNRoomUi
        };
      };
      Prefab_NNzyqzCreatCtrl.prototype.connectUi = function() {
        var _this = this;
        var _loop_1 = function(i) {
          var btn_temp = this_1.ToggleBtn.children[i];
          var cb = function() {
            _this.Togglebtn_cb(i, btn_temp);
          };
          this_1.connect(G_UiType.text, btn_temp, cb, "下拉单选组别按钮");
        };
        var this_1 = this;
        for (var i = 0; i < this.ToggleBtn.childrenCount; i++) _loop_1(i);
        this.connect(G_UiType.text, this.ToggleCheckBtn.children[0], this.ToggleCheckbtn_cb, "下拉特殊牌型组别按钮");
        this.connect(G_UiType.text, this.ToggleCheckBtn.children[1], this.ToggleCheckbtn1_cb, "下拉高级选项组别按钮");
        var _loop_2 = function(i) {
          var ToggleGroup = this_2.Toggle.children[i].children[0];
          var _loop_3 = function(j) {
            var toggle = ToggleGroup.children[j];
            var cb = function() {
              _this.Toggle_cb(ToggleGroup, i, j);
            };
            this_2.connect(G_UiType.toggle, toggle, cb, "切换单选按钮");
          };
          for (var j = 0; j < ToggleGroup.childrenCount; j++) _loop_3(j);
        };
        var this_2 = this;
        for (var i = 0; i < this.Toggle.childrenCount; i++) _loop_2(i);
        var temp = this.ToggleCheck.children[0];
        var _loop_4 = function(j) {
          var ToggleCheck = temp.children[j];
          var cb = function() {
            _this.CheckToggle1_cb(ToggleCheck, j);
          };
          this_3.connect(G_UiType.toggle, ToggleCheck, cb, "切换复选按钮");
        };
        var this_3 = this;
        for (var j = 0; j < temp.childrenCount - 1; j++) _loop_4(j);
        var temp1 = this.view._Prefab_advancedOptions;
        var _loop_5 = function(j) {
          var ToggleCheck1 = temp1.children[j];
          var cb = function() {
            _this.CheckToggle2_cb(ToggleCheck1, j);
          };
          this_4.connect(G_UiType.toggle, ToggleCheck1, cb, "切换复选按钮");
        };
        var this_4 = this;
        for (var j = 0; j < temp1.childrenCount; j++) _loop_5(j);
        this.node.on(cc.Node.EventType.TOUCH_START, this.ClickBg, this);
        this.connect(G_UiType.text, this.ZiXun, this.zixun_cb, "点击咨询按钮");
      };
      Prefab_NNzyqzCreatCtrl.prototype.start = function() {};
      Prefab_NNzyqzCreatCtrl.prototype.doNothing = function() {};
      Prefab_NNzyqzCreatCtrl.prototype.boolClickBg = function(node) {
        console.log("背景");
        node.active || this.ClickBg();
      };
      Prefab_NNzyqzCreatCtrl.prototype.Togglebtn_cb = function(index, node) {
        this.boolClickBg(this.Toggle.children[index]);
        node.children[0].active = !node.children[0].active;
        this.Toggle.children[index].active = !this.Toggle.children[index].active;
      };
      Prefab_NNzyqzCreatCtrl.prototype.ToggleCheckbtn_cb = function() {
        this.boolClickBg(this.ToggleCheck.children[0]);
        this.ToggleCheck.children[0].active = !this.ToggleCheck.children[0].active;
        this.ToggleCheckBtn.children[0].children[0].active = !this.ToggleCheckBtn.children[0].children[0].active;
      };
      Prefab_NNzyqzCreatCtrl.prototype.ToggleCheckbtn1_cb = function() {
        this.boolClickBg(this.view._Prefab_advancedOptions);
        this.view._Prefab_advancedOptions.active = !this.view._Prefab_advancedOptions.active;
        this.ToggleCheckBtn.children[1].children[0].active = !this.ToggleCheckBtn.children[1].children[0].active;
      };
      Prefab_NNzyqzCreatCtrl.prototype.chengeActive_cb = function(node) {
        node.active = !node.active;
      };
      Prefab_NNzyqzCreatCtrl.prototype.refFangfei = function() {
        var roomInfo = this.model._roomRuleInfo;
        var roomCost = RoomCostCfg_1.default.getInstance().getRoomCost("mpnn", 0, roomInfo.v_roundcount, roomInfo.v_seatcount, roomInfo.v_paytype);
        this.model._roomRuleInfo.v_fangfei = roomCost;
        this.view.refreshFangfei(roomCost);
      };
      Prefab_NNzyqzCreatCtrl.prototype.CloseBtn_cb = function() {
        this.finish();
      };
      Prefab_NNzyqzCreatCtrl.prototype.onDestroy = function() {
        this.view._Prefab_advancedOptions.destroy();
      };
      Prefab_NNzyqzCreatCtrl.prototype.zixun_cb = function() {
        this.start_sub_module(G_MODULE.Zixun);
      };
      Prefab_NNzyqzCreatCtrl.prototype.ClickBg = function() {
        for (var i = 0; i < this.ToggleCheckBtn.childrenCount; i++) this.ToggleCheckBtn.children[i].children[0].active && (this.ToggleCheckBtn.children[i].children[0].active = false);
        for (var i = 0; i < this.Toggle.childrenCount; i++) this.Toggle.children[i].active && (this.Toggle.children[i].active = false);
        for (var i = 0; i < this.ToggleCheck.childrenCount; i++) if (this.ToggleCheck.children[i].active) {
          this.ToggleCheck.children[i].active = false;
          this.ToggleCheckBtn.children[0].children[0].active = false;
        }
        if (this.view._Prefab_advancedOptions.active) {
          this.view._Prefab_advancedOptions.active = false;
          this.ToggleCheckBtn.children[1].children[0].active = false;
        }
        for (var i = 0; i < this.ToggleBtn.childrenCount; i++) this.ToggleBtn.children[i].children[0].active && (this.ToggleBtn.children[i].children[0].active = false);
        for (var i = 0; i < this.ToggleCheckBtn.childrenCount; i++) this.ToggleCheckBtn.children[i].children[0].active && (this.ToggleCheckBtn.children[i].children[0].active = false);
      };
      Prefab_NNzyqzCreatCtrl.prototype.DoNothing = function() {};
      Prefab_NNzyqzCreatCtrl.prototype.UpdateString = function(node, string) {
        node.getComponent(cc.Label).string = string;
      };
      Prefab_NNzyqzCreatCtrl.prototype.upDataSPECIALBRANDString = function(node, nunber) {
        var string = "";
        var temp = 0;
        var boolAllNoSelect = true;
        for (var i = 0; i < node.childrenCount - nunber; i++) if (node.children[i].getComponent(cc.Toggle).isChecked) {
          boolAllNoSelect = false;
          temp++;
          string += SPECIALBRAND[i];
          3 == temp && (string += "\n");
        }
        boolAllNoSelect && (string = "无");
        return string;
      };
      Prefab_NNzyqzCreatCtrl.prototype.upDataADVANCEDOPTIONSString = function(node, nunber) {
        var string = "";
        var boolAllNoSelect = true;
        for (var i = 0; i < node.childrenCount - nunber; i++) if (node.children[i].getComponent(cc.Toggle).isChecked && 3 != i) {
          boolAllNoSelect = false;
          string += "" == string ? ADVANCEDOPTIONS[i] : "            " + ADVANCEDOPTIONS[i];
        }
        boolAllNoSelect && (string = "无");
        return string;
      };
      Prefab_NNzyqzCreatCtrl.prototype.Toggle_cb = function(node, index1, index2) {
        node.parent.active = false;
        this.ToggleBtn.children[index1].children[0].active = false;
        var roomRule;
        switch (index1) {
         case 0:
          roomRule = this.model._roomRuleInfo.v_roundcount;
          break;

         case 1:
          roomRule = this.model._roomRuleInfo.v_seatcount;
          break;

         case 2:
          roomRule = this.model._roomRuleInfo.v_paytype;
          break;

         case 3:
          roomRule = this.model._roomRuleInfo.v_minChip;
          break;

         case 4:
          roomRule = this.model._roomRuleInfo.v_fullstart;
          break;

         case 5:
          roomRule = this.model._roomRuleInfo.v_settleRule;
          break;

         case 6:
          roomRule = this.model._roomRuleInfo.v_playeraddin;
          break;

         case 7:
          roomRule = this.model._roomRuleInfo.v_grabbanker;
        }
        if (this.model._roomcfg[Configs_1[index1]][index2] == roomRule) {
          node.children[index2].getComponent(cc.Toggle).isChecked = true;
          return;
        }
        var string = node.children[index2].children[1].getComponent(cc.Label).string;
        var btn_node = this.ToggleBtn.children[index1].children[1];
        this.UpdateString(btn_node, string);
        switch (Configs_1[index1]) {
         case "v_seatcount":
          CreateRoomMgr_1.default.getInstance().setProperty(this.model._roomcfg["v_seatcount"][index2], "roomRuleInfo", this.model._gameid, "v_seatcount");
          this.view.changeFullStart();
          this.refFangfei();
          break;

         case "v_minChip":
          CreateRoomMgr_1.default.getInstance().setProperty(this.model._roomcfg["v_minChip"][index2], "roomRuleInfo", this.model._gameid, "v_minChip");
          break;

         case "v_paytype":
          CreateRoomMgr_1.default.getInstance().setProperty(this.model._roomcfg["v_paytype"][index2], "roomRuleInfo", this.model._gameid, "v_paytype");
          this.refFangfei();
          break;

         case "v_roundcount":
          CreateRoomMgr_1.default.getInstance().setProperty(this.model._roomcfg["v_roundcount"][index2], "roomRuleInfo", this.model._gameid, "v_roundcount");
          this.refFangfei();
          break;

         case "v_fullstart":
          CreateRoomMgr_1.default.getInstance().setProperty(this.model._roomcfg["v_fullstart"][index2], "roomRuleInfo", this.model._gameid, "v_fullstart");
          CreateRoomMgr_1.default.getInstance().setProperty(this.model.v_startModel[index2], "roomRuleInfo", this.model._gameid, "v_startModel");
          break;

         case "v_settleRule":
          CreateRoomMgr_1.default.getInstance().setProperty(this.model._roomcfg["v_settleRule"][index2], "roomRuleInfo", this.model._gameid, "v_settleRule");
          if (0 == index2) {
            this.model._roomRuleInfo.t_niu_10 = 4;
            this.model._roomRuleInfo.t_niu_9 = 3;
            this.model._roomRuleInfo.t_niu_8 = 2;
            this.model._roomRuleInfo.t_niu_7 = 2;
          } else if (1 == index2) {
            this.model._roomRuleInfo.t_niu_10 = 3;
            this.model._roomRuleInfo.t_niu_9 = 2;
            this.model._roomRuleInfo.t_niu_8 = 2;
            this.model._roomRuleInfo.t_niu_7 = 1;
          }
          break;

         case "v_playeraddin":
          CreateRoomMgr_1.default.getInstance().setProperty(this.model._roomcfg["v_playeraddin"][index2], "roomRuleInfo", this.model._gameid, "v_playeraddin");
          break;

         case "v_grabbanker":
          CreateRoomMgr_1.default.getInstance().setProperty(this.model._roomcfg["v_grabbanker"][index2], "roomRuleInfo", this.model._gameid, "v_grabbanker");
        }
        console.log(this.model._roomRuleInfo);
      };
      Prefab_NNzyqzCreatCtrl.prototype.CheckToggle1_cb = function(node, index) {
        switch (Configs_2[index]) {
         case "v_shunziNiuLimit":
          node.getComponent(cc.Toggle).isChecked ? this.model._roomRuleInfo.v_shunziNiuLimit = 1 : this.model._roomRuleInfo.v_shunziNiuLimit = 0;
          break;

         case "v_tonghuaNiuLimit":
          node.getComponent(cc.Toggle).isChecked ? this.model._roomRuleInfo.v_tonghuaNiuLimit = 1 : this.model._roomRuleInfo.v_tonghuaNiuLimit = 0;
          break;

         case "v_wuhuaNiuLimit":
          node.getComponent(cc.Toggle).isChecked ? this.model._roomRuleInfo.v_wuhuaNiuLimit = 1 : this.model._roomRuleInfo.v_wuhuaNiuLimit = 0;
          break;

         case "v_huluNiuLimit":
          node.getComponent(cc.Toggle).isChecked ? this.model._roomRuleInfo.v_huluNiuLimit = 1 : this.model._roomRuleInfo.v_huluNiuLimit = 0;
          break;

         case "v_zhadanNiuLimit":
          node.getComponent(cc.Toggle).isChecked ? this.model._roomRuleInfo.v_zhadanNiuLimit = 1 : this.model._roomRuleInfo.v_zhadanNiuLimit = 0;
          break;

         case "v_wuxiaoNiuLimit":
          node.getComponent(cc.Toggle).isChecked ? this.model._roomRuleInfo.v_wuxiaoNiuLimit = 1 : this.model._roomRuleInfo.v_wuxiaoNiuLimit = 0;
          break;

         case "allSelect":
          if (node.getComponent(cc.Toggle).isChecked) {
            for (var i = 0; i < node.parent.childrenCount - 1; i++) {
              var temp = node.parent.children[i];
              temp.getComponent(cc.Toggle).isChecked = true;
            }
            this.model._roomRuleInfo.v_shunziNiuLimit = 1;
            this.model._roomRuleInfo.v_tonghuaNiuLimit = 1;
            this.model._roomRuleInfo.v_zhadanNiuLimit = 1;
            this.model._roomRuleInfo.v_huluNiuLimit = 1;
            this.model._roomRuleInfo.v_wuhuaNiuLimit = 1;
            this.model._roomRuleInfo.v_wuxiaoNiuLimit = 1;
          } else {
            for (var i = 0; i < node.parent.childrenCount - 1; i++) {
              var temp = node.parent.children[i];
              temp.getComponent(cc.Toggle).isChecked = false;
            }
            this.model._roomRuleInfo.v_shunziNiuLimit = 0;
            this.model._roomRuleInfo.v_tonghuaNiuLimit = 0;
            this.model._roomRuleInfo.v_zhadanNiuLimit = 0;
            this.model._roomRuleInfo.v_huluNiuLimit = 0;
            this.model._roomRuleInfo.v_wuhuaNiuLimit = 0;
            this.model._roomRuleInfo.v_wuxiaoNiuLimit = 0;
          }
        }
        var Label = this.ToggleCheckBtn.children[0].children[1].getComponent(cc.Label);
        Label.string = this.upDataSPECIALBRANDString(node.parent, 2);
        this.changeAllSelect(node.parent, 2);
      };
      Prefab_NNzyqzCreatCtrl.prototype.CheckToggle2_cb = function(node, index) {
        switch (Configs_3[index]) {
         case "v_midEnterLimit":
          node.getComponent(cc.Toggle).isChecked ? this.model._roomRuleInfo.v_midEnterLimit = 1 : this.model._roomRuleInfo.v_midEnterLimit = 0;
          break;

         case "v_cuopaiLimit":
          node.getComponent(cc.Toggle).isChecked ? this.model._roomRuleInfo.v_cuopaiLimit = 1 : this.model._roomRuleInfo.v_cuopaiLimit = 0;
          break;

         case "v_betLimit":
          node.getComponent(cc.Toggle).isChecked ? this.model._roomRuleInfo.v_betLimit = 1 : this.model._roomRuleInfo.v_betLimit = 0;
          break;

         case "v_playerbuyLimit":
          break;

         case "v_betredoubleLimit":
          node.getComponent(cc.Toggle).isChecked ? this.model._roomRuleInfo.v_betredoubleLimit = 1 : this.model._roomRuleInfo.v_betredoubleLimit = 0;
          break;

         case "v_wanglaiLimit":
          node.getComponent(cc.Toggle).isChecked ? this.model._roomRuleInfo.v_wanglaiLimit = 1 : this.model._roomRuleInfo.v_wanglaiLimit = 0;
          break;

         case "allSelect":
          if (node.getComponent(cc.Toggle).isChecked) {
            for (var i = 0; i < node.parent.childrenCount - 1; i++) {
              var temp = node.parent.children[i];
              temp.getComponent(cc.Toggle).isChecked = true;
            }
            this.model._roomRuleInfo.v_midEnterLimit = 1;
            this.model._roomRuleInfo.v_cuopaiLimit = 1;
            this.model._roomRuleInfo.v_wanglaiLimit = 1;
            this.model._roomRuleInfo.v_betLimit = 1;
            this.model._roomRuleInfo.v_betredoubleLimit = 1;
          } else {
            for (var i = 0; i < node.parent.childrenCount - 1; i++) {
              var temp = node.parent.children[i];
              temp.getComponent(cc.Toggle).isChecked = false;
            }
            this.model._roomRuleInfo.v_midEnterLimit = 0;
            this.model._roomRuleInfo.v_cuopaiLimit = 0;
            this.model._roomRuleInfo.v_wanglaiLimit = 0;
            this.model._roomRuleInfo.v_betLimit = 0;
            this.model._roomRuleInfo.v_betredoubleLimit = 0;
          }
        }
        var Label = this.ToggleCheckBtn.children[1].children[1].getComponent(cc.Label);
        Label.string = this.upDataADVANCEDOPTIONSString(node.parent, 1);
        this.changeAllSelect(node.parent, 1);
      };
      Prefab_NNzyqzCreatCtrl.prototype.changeAllSelect = function(node, number) {
        var isAllSelect = true;
        for (var i = 0; i < node.childrenCount - number; i++) node.children[i].getComponent(cc.Toggle).isChecked || (isAllSelect = false);
        node.getChildByName("6").getComponent(cc.Toggle).isChecked = !!isAllSelect;
      };
      Prefab_NNzyqzCreatCtrl.prototype.RefreshTBNNRoomUi = function() {};
      __decorate([ property({
        tooltip: "开启单选框组",
        type: cc.Node
      }) ], Prefab_NNzyqzCreatCtrl.prototype, "ToggleBtn", void 0);
      __decorate([ property({
        tooltip: "开启复选框组",
        type: cc.Node
      }) ], Prefab_NNzyqzCreatCtrl.prototype, "ToggleCheckBtn", void 0);
      __decorate([ property({
        tooltip: "单选框",
        type: cc.Node
      }) ], Prefab_NNzyqzCreatCtrl.prototype, "Toggle", void 0);
      __decorate([ property({
        tooltip: "复选框",
        type: cc.Node
      }) ], Prefab_NNzyqzCreatCtrl.prototype, "ToggleCheck", void 0);
      __decorate([ property({
        tooltip: "帮助",
        type: cc.Node
      }) ], Prefab_NNzyqzCreatCtrl.prototype, "ZiXun", void 0);
      __decorate([ property({
        tooltip: "房费",
        type: cc.Node
      }) ], Prefab_NNzyqzCreatCtrl.prototype, "RoomCost", void 0);
      __decorate([ property({
        tooltip: "房费标题",
        type: cc.Node
      }) ], Prefab_NNzyqzCreatCtrl.prototype, "CostTitle", void 0);
      __decorate([ property({
        tooltip: "高级选项",
        type: cc.Prefab
      }) ], Prefab_NNzyqzCreatCtrl.prototype, "Prefab_AdvancedOptions", void 0);
      Prefab_NNzyqzCreatCtrl = __decorate([ ccclass ], Prefab_NNzyqzCreatCtrl);
      return Prefab_NNzyqzCreatCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_NNzyqzCreatCtrl;
    cc._RF.pop();
  }, {
    "../../CfgMgrs/RoomCostCfg": "RoomCostCfg",
    "../../GameMgrs/BetMgr": "BetMgr",
    "../../GameMgrs/CreateRoomMgr": "CreateRoomMgr",
    "../../GameMgrs/GameFreeMgr": "GameFreeMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_NNRoomInfoCtrlCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "49bedGZ4FRF7JjNPqGwjpeP", "Prefab_NNRoomInfoCtrlCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var CreateRoomMgr_1 = require("../../GameMgrs/CreateRoomMgr");
    var BetMgr_1 = require("../../GameMgrs/BetMgr");
    var RoomCostCfg_1 = require("../../CfgMgrs/RoomCostCfg");
    var GameFreeMgr_1 = require("../../GameMgrs/GameFreeMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Configs_1 = {
      0: "v_roundcount",
      1: "v_seatcount",
      2: "v_paytype",
      3: "v_minChip",
      4: "v_fullstart",
      5: "v_settleRule"
    };
    var Configs_2 = {
      0: "v_wuxiaoNiuLimit",
      1: "v_zhadanNiuLimit",
      2: "v_huluNiuLimit",
      3: "v_wuhuaNiuLimit",
      4: "v_tonghuaNiuLimit",
      5: "v_shunziNiuLimit",
      6: "allSelect"
    };
    var Configs_3 = {
      0: "v_midEnterLimit",
      1: "v_cuopaiLimit",
      2: "v_wanglaiLimit",
      3: "allSelect"
    };
    var SPECIALBRAND = {
      0: "五小牛（8倍）",
      1: "炸弹牛（6倍）",
      2: "葫芦牛（6倍）",
      3: "五花牛（5倍）",
      4: "同花牛（5倍）",
      5: "顺子牛（5倍）"
    };
    var ADVANCEDOPTIONS = {
      0: "中途禁入",
      1: "禁止搓牌",
      2: "王癞玩法"
    };
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this._roomRuleInfo = null;
        _this._roomcfg = null;
        _this.v_startModel = null;
        _this._gameid = null;
        _this._roomCost = null;
        _this.isFree = null;
        _this.isFree = GameFreeMgr_1.default.getInstance().isFree(20);
        BetMgr_1.default.getInstance().setGameId(20);
        _this._gameid = BetMgr_1.default.getInstance().getGameId();
        _this._roomRuleInfo = CreateRoomMgr_1.default.getInstance().getRoomRuleInfo(_this._gameid);
        _this._roomCost = RoomCostCfg_1.default.getInstance().getRoomCost("tbnn", 0, _this._roomRuleInfo.v_roundcount, _this._roomRuleInfo.v_seatcount, _this._roomRuleInfo.v_paytype);
        _this._roomcfg = {
          v_roundcount: [ 10, 20 ],
          v_seatcount: [ 6, 8 ],
          v_paytype: [ 0, 1, 2 ],
          v_minChip: [ 1, 2, 4, 5 ],
          v_fullstart: [ 0, 4, 5, 6 ],
          v_settleRule: [ 0, 1 ]
        };
        6 == _this._roomRuleInfo.v_seatcount ? _this._roomcfg.v_fullstart = [ 0, 4, 5, 6 ] : 8 == _this._roomRuleInfo.v_seatcount && (_this._roomcfg.v_fullstart = [ 0, 6, 7, 8 ]);
        _this.v_startModel = [ 0, 1, 1, 1 ];
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this._Prefab_advancedOptions = null;
        _this.ui = {
          ToggleBtn: null,
          ToggleCheckBtn: null,
          Toggle: null,
          ToggleCheck: null,
          Zixun: null,
          RoomCost: null,
          CostTitle: null,
          Prefab_AdvancedOptions: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.initAdvancedOptions();
        _this.initToggle(_this.model._roomRuleInfo);
        _this.initToggleCheck(_this.model._roomRuleInfo);
        _this.changeFullStart();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.Prefab_AdvancedOptions = ctrl.Prefab_AdvancedOptions;
        this.ui.CostTitle = ctrl.CostTitle;
        this.ui.ToggleBtn = ctrl.ToggleBtn;
        this.ui.ToggleCheckBtn = ctrl.ToggleCheckBtn;
        this.ui.Toggle = ctrl.Toggle;
        this.ui.ToggleCheck = ctrl.ToggleCheck;
        this.ui.Zixun = ctrl.ZiXun;
        this.ui.RoomCost = ctrl.RoomCost;
        this.ui.RoomCost.parent.active = !this.model.isFree;
      };
      View.prototype.initAdvancedOptions = function() {
        this._Prefab_advancedOptions = cc.instantiate(this.ui.Prefab_AdvancedOptions);
        this._Prefab_advancedOptions.parent = this.node.parent.parent;
        this._Prefab_advancedOptions.position = cc.p(32, -19);
        this._Prefab_advancedOptions.active = false;
      };
      View.prototype.refreshFangfei = function(roomCost) {
        this.ui.RoomCost.getComponent(cc.Label).string = roomCost;
        this.updatePayLabel(this.model._roomRuleInfo.v_paytype);
      };
      View.prototype.updatePayLabel = function(value) {
        switch (value) {
         case 0:
          this.ui.CostTitle.getComponent(cc.Label).string = "首局结算时房主支付";
          break;

         case 1:
          this.ui.CostTitle.getComponent(cc.Label).string = "首局结算时所有玩家各支付";
          break;

         case 2:
          this.ui.CostTitle.getComponent(cc.Label).string = "总结算时赢家按比例共支付";
        }
      };
      View.prototype.initCheckState = function(groupChildren, btnChildren, toggleName) {
        var data = this.model._roomcfg[toggleName];
        var value = this.model._roomRuleInfo[toggleName];
        for (var i = 0; i < data.length; i++) if (data[i] == value) {
          groupChildren.children[i].getComponent(cc.Toggle).check();
          btnChildren.children[1].getComponent(cc.Label).string = groupChildren.children[i].children[1].getComponent(cc.Label).string;
        }
      };
      View.prototype.initToggle = function(roomRuleInfo) {
        for (var key in roomRuleInfo) this.model._roomRuleInfo[key] = roomRuleInfo[key];
        var groups = this.ui.Toggle;
        var ToggleBtn = this.ui.ToggleBtn;
        for (var i = 0; i < groups.childrenCount; i++) {
          var groupChildren = groups.children[i].children[0];
          var btnChildren = ToggleBtn.children[i];
          this.initCheckState(groupChildren, btnChildren, Configs_1[i]);
        }
      };
      View.prototype.initToggleCheck = function(roomRuleInfo) {
        for (var key in roomRuleInfo) this.model._roomRuleInfo[key] = roomRuleInfo[key];
        var bool1 = true;
        var bool2 = true;
        var groups = this.ui.ToggleCheck;
        var groupChildren1 = groups.children[0];
        for (var k = 0; k < groupChildren1.childrenCount - 2; k++) {
          var value = this.model._roomRuleInfo[Configs_2[k]];
          if (0 != value) groupChildren1.children[k].getComponent(cc.Toggle).check(); else {
            groupChildren1.children[k].getComponent(cc.Toggle).uncheck();
            bool1 = false;
          }
        }
        bool1 ? groupChildren1.getChildByName("6").getComponent(cc.Toggle).check() : groupChildren1.getChildByName("6").getComponent(cc.Toggle).uncheck();
        var groupChildren2 = this._Prefab_advancedOptions;
        for (var k = 0; k < groupChildren2.childrenCount - 1; k++) {
          var value = this.model._roomRuleInfo[Configs_3[k]];
          if (0 != value) groupChildren2.children[k].getComponent(cc.Toggle).check(); else {
            groupChildren2.children[k].getComponent(cc.Toggle).uncheck();
            bool2 = false;
          }
        }
        bool2 ? groupChildren2.getChildByName("6").getComponent(cc.Toggle).check() : groupChildren2.getChildByName("6").getComponent(cc.Toggle).uncheck();
        var Label = this.ui.ToggleCheckBtn.children[0].children[1].getComponent(cc.Label);
        Label.string = ctrl.upDataSPECIALBRANDString(groupChildren1, 2);
        var Label2 = this.ui.ToggleCheckBtn.children[1].children[1].getComponent(cc.Label);
        Label2.string = ctrl.upDataADVANCEDOPTIONSString(groupChildren2, 1);
      };
      View.prototype.changeFullStart = function() {
        var nodeIndex;
        var node = this.ui.Toggle.children[4].children[0];
        for (var i = 0; i < node.childrenCount; i++) if (node.children[i].getComponent(cc.Toggle).isChecked) {
          nodeIndex = i;
          break;
        }
        if (this.model._roomRuleInfo.v_seatcount <= 6) {
          node.children[1].children[1].getComponent(cc.Label).string = "满4人开桌";
          node.children[2].children[1].getComponent(cc.Label).string = "满5人开桌";
          node.children[3].children[1].getComponent(cc.Label).string = "满6人开桌";
          node.children[1].children[2].children[1].getComponent(cc.Label).string = "满4人开桌";
          node.children[2].children[2].children[1].getComponent(cc.Label).string = "满5人开桌";
          node.children[3].children[2].children[1].getComponent(cc.Label).string = "满6人开桌";
          this.model._roomcfg.v_fullstart = [ 0, 4, 5, 6 ];
        } else if (this.model._roomRuleInfo.v_seatcount <= 8) {
          node.children[1].children[1].getComponent(cc.Label).string = "满6人开桌";
          node.children[2].children[1].getComponent(cc.Label).string = "满7人开桌";
          node.children[3].children[1].getComponent(cc.Label).string = "满8人开桌";
          node.children[1].children[2].children[1].getComponent(cc.Label).string = "满6人开桌";
          node.children[2].children[2].children[1].getComponent(cc.Label).string = "满7人开桌";
          node.children[3].children[2].children[1].getComponent(cc.Label).string = "满8人开桌";
          this.model._roomcfg.v_fullstart = [ 0, 6, 7, 8 ];
        }
        this.ui.ToggleBtn.children[4].children[1].getComponent(cc.Label).string = node.children[nodeIndex].children[1].getComponent(cc.Label).string;
        CreateRoomMgr_1.default.getInstance().setProperty(this.model._roomcfg["v_fullstart"][nodeIndex], "roomRuleInfo", this.model._gameid, "v_fullstart");
      };
      return View;
    }(BaseView_1.default);
    var Prefab_NNRoomInfoCtrlCtrl = function(_super) {
      __extends(Prefab_NNRoomInfoCtrlCtrl, _super);
      function Prefab_NNRoomInfoCtrlCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.checkBoolen = null;
        _this.ToggleBtn = null;
        _this.ToggleCheckBtn = null;
        _this.Toggle = null;
        _this.ToggleCheck = null;
        _this.ZiXun = null;
        _this.RoomCost = null;
        _this.CostTitle = null;
        _this.Prefab_AdvancedOptions = null;
        return _this;
      }
      Prefab_NNRoomInfoCtrlCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.refFangfei();
      };
      Prefab_NNRoomInfoCtrlCtrl.prototype.defineNetEvents = function() {};
      Prefab_NNRoomInfoCtrlCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          RefreshTBNNRoomUi: this.RefreshTBNNRoomUi
        };
      };
      Prefab_NNRoomInfoCtrlCtrl.prototype.connectUi = function() {
        var _this = this;
        var _loop_1 = function(i) {
          var btn_temp = this_1.ToggleBtn.children[i];
          var cb = function() {
            _this.Togglebtn_cb(i, btn_temp);
          };
          this_1.connect(G_UiType.text, btn_temp, cb, "下拉单选组别按钮");
        };
        var this_1 = this;
        for (var i = 0; i < this.ToggleBtn.childrenCount; i++) _loop_1(i);
        this.connect(G_UiType.text, this.ToggleCheckBtn.children[0], this.ToggleCheckbtn_cb, "下拉特殊牌型组别按钮");
        this.connect(G_UiType.text, this.ToggleCheckBtn.children[1], this.ToggleCheckbtn1_cb, "下拉高级选项组别按钮");
        var _loop_2 = function(i) {
          var ToggleGroup = this_2.Toggle.children[i].children[0];
          var _loop_3 = function(j) {
            var toggle = ToggleGroup.children[j];
            var cb = function() {
              _this.Toggle_cb(ToggleGroup, i, j);
            };
            this_2.connect(G_UiType.toggle, toggle, cb, "切换单选按钮");
          };
          for (var j = 0; j < ToggleGroup.childrenCount; j++) _loop_3(j);
        };
        var this_2 = this;
        for (var i = 0; i < this.Toggle.childrenCount; i++) _loop_2(i);
        var temp = this.ToggleCheck.children[0];
        var _loop_4 = function(j) {
          var ToggleCheck = temp.children[j];
          var cb = function() {
            _this.CheckToggle1_cb(ToggleCheck, j);
          };
          this_3.connect(G_UiType.toggle, ToggleCheck, cb, "切换复选按钮");
        };
        var this_3 = this;
        for (var j = 0; j < temp.childrenCount - 1; j++) _loop_4(j);
        var temp1 = this.view._Prefab_advancedOptions;
        var _loop_5 = function(j) {
          var ToggleCheck1 = temp1.children[j];
          var cb = function() {
            _this.CheckToggle2_cb(ToggleCheck1, j);
          };
          this_4.connect(G_UiType.toggle, ToggleCheck1, cb, "切换复选按钮");
        };
        var this_4 = this;
        for (var j = 0; j < temp1.childrenCount; j++) _loop_5(j);
        this.node.on(cc.Node.EventType.TOUCH_START, this.ClickBg, this);
        this.connect(G_UiType.text, this.ZiXun, this.zixun_cb, "点击咨询按钮");
      };
      Prefab_NNRoomInfoCtrlCtrl.prototype.start = function() {};
      Prefab_NNRoomInfoCtrlCtrl.prototype.doNothing = function() {};
      Prefab_NNRoomInfoCtrlCtrl.prototype.boolClickBg = function(node) {
        console.log("背景");
        node.active || this.ClickBg();
      };
      Prefab_NNRoomInfoCtrlCtrl.prototype.Togglebtn_cb = function(index, node) {
        this.boolClickBg(this.Toggle.children[index]);
        node.children[0].active = !node.children[0].active;
        this.Toggle.children[index].active = !this.Toggle.children[index].active;
      };
      Prefab_NNRoomInfoCtrlCtrl.prototype.ToggleCheckbtn_cb = function() {
        this.boolClickBg(this.ToggleCheck.children[0]);
        this.ToggleCheck.children[0].active = !this.ToggleCheck.children[0].active;
        this.ToggleCheckBtn.children[0].children[0].active = !this.ToggleCheckBtn.children[0].children[0].active;
      };
      Prefab_NNRoomInfoCtrlCtrl.prototype.ToggleCheckbtn1_cb = function() {
        this.boolClickBg(this.view._Prefab_advancedOptions);
        this.view._Prefab_advancedOptions.active = !this.view._Prefab_advancedOptions.active;
        this.ToggleCheckBtn.children[1].children[0].active = !this.ToggleCheckBtn.children[1].children[0].active;
      };
      Prefab_NNRoomInfoCtrlCtrl.prototype.chengeActive_cb = function(node) {
        node.active = !node.active;
      };
      Prefab_NNRoomInfoCtrlCtrl.prototype.refFangfei = function() {
        var roomInfo = this.model._roomRuleInfo;
        var roomCost = RoomCostCfg_1.default.getInstance().getRoomCost("tbnn", 0, roomInfo.v_roundcount, roomInfo.v_seatcount, roomInfo.v_paytype);
        this.model.isFree && (roomCost = 0);
        this.model._roomRuleInfo.v_fangfei = roomCost;
        this.view.refreshFangfei(roomCost);
      };
      Prefab_NNRoomInfoCtrlCtrl.prototype.CloseBtn_cb = function() {
        this.finish();
      };
      Prefab_NNRoomInfoCtrlCtrl.prototype.onDestroy = function() {
        this.view._Prefab_advancedOptions.destroy();
      };
      Prefab_NNRoomInfoCtrlCtrl.prototype.zixun_cb = function() {
        this.start_sub_module(G_MODULE.Zixun);
      };
      Prefab_NNRoomInfoCtrlCtrl.prototype.ClickBg = function() {
        for (var i = 0; i < this.ToggleCheckBtn.childrenCount; i++) this.ToggleCheckBtn.children[i].children[0].active && (this.ToggleCheckBtn.children[i].children[0].active = false);
        for (var i = 0; i < this.Toggle.childrenCount; i++) this.Toggle.children[i].active && (this.Toggle.children[i].active = false);
        for (var i = 0; i < this.ToggleCheck.childrenCount; i++) if (this.ToggleCheck.children[i].active) {
          this.ToggleCheck.children[i].active = false;
          this.ToggleCheckBtn.children[0].children[0].active = false;
        }
        if (this.view._Prefab_advancedOptions.active) {
          this.view._Prefab_advancedOptions.active = false;
          this.ToggleCheckBtn.children[1].children[0].active = false;
        }
        for (var i = 0; i < this.ToggleBtn.childrenCount; i++) this.ToggleBtn.children[i].children[0].active && (this.ToggleBtn.children[i].children[0].active = false);
        for (var i = 0; i < this.ToggleCheckBtn.childrenCount; i++) this.ToggleCheckBtn.children[i].children[0].active && (this.ToggleCheckBtn.children[i].children[0].active = false);
      };
      Prefab_NNRoomInfoCtrlCtrl.prototype.UpdateString = function(node, string) {
        node.getComponent(cc.Label).string = string;
      };
      Prefab_NNRoomInfoCtrlCtrl.prototype.upDataSPECIALBRANDString = function(node, number) {
        var string = "";
        var boolAllNoSelect = true;
        for (var i = 0; i < node.childrenCount - number; i++) if (node.children[i].getComponent(cc.Toggle).isChecked) {
          boolAllNoSelect = false;
          string += SPECIALBRAND[i];
          2 == i && (string += "\n");
        }
        boolAllNoSelect && (string = "无");
        return string;
      };
      Prefab_NNRoomInfoCtrlCtrl.prototype.upDataADVANCEDOPTIONSString = function(node, number) {
        var string = "";
        var boolAllNoSelect = true;
        for (var i = 0; i < node.childrenCount - number; i++) if (node.children[i].getComponent(cc.Toggle).isChecked) {
          boolAllNoSelect = false;
          string += "" == string ? ADVANCEDOPTIONS[i] : "             " + ADVANCEDOPTIONS[i];
        }
        boolAllNoSelect && (string = "无");
        return string;
      };
      Prefab_NNRoomInfoCtrlCtrl.prototype.Toggle_cb = function(node, index1, index2) {
        node.parent.active = false;
        this.ToggleBtn.children[index1].children[0].active = false;
        var roomRule;
        switch (index1) {
         case 0:
          roomRule = this.model._roomRuleInfo.v_roundcount;
          break;

         case 1:
          roomRule = this.model._roomRuleInfo.v_seatcount;
          break;

         case 2:
          roomRule = this.model._roomRuleInfo.v_paytype;
          break;

         case 3:
          roomRule = this.model._roomRuleInfo.v_minChip;
          break;

         case 4:
          roomRule = this.model._roomRuleInfo.v_fullstart;
          break;

         case 5:
          roomRule = this.model._roomRuleInfo.v_settleRule;
        }
        if (this.model._roomcfg[Configs_1[index1]][index2] == roomRule) {
          node.children[index2].getComponent(cc.Toggle).isChecked = true;
          return;
        }
        var string = node.children[index2].children[1].getComponent(cc.Label).string;
        var btn_node = this.ToggleBtn.children[index1].children[1];
        this.UpdateString(btn_node, string);
        switch (Configs_1[index1]) {
         case "v_seatcount":
          CreateRoomMgr_1.default.getInstance().setProperty(this.model._roomcfg["v_seatcount"][index2], "roomRuleInfo", this.model._gameid, "v_seatcount");
          this.view.changeFullStart();
          this.refFangfei();
          break;

         case "v_minChip":
          CreateRoomMgr_1.default.getInstance().setProperty(this.model._roomcfg["v_minChip"][index2], "roomRuleInfo", this.model._gameid, "v_minChip");
          break;

         case "v_paytype":
          CreateRoomMgr_1.default.getInstance().setProperty(this.model._roomcfg["v_paytype"][index2], "roomRuleInfo", this.model._gameid, "v_paytype");
          this.refFangfei();
          break;

         case "v_roundcount":
          CreateRoomMgr_1.default.getInstance().setProperty(this.model._roomcfg["v_roundcount"][index2], "roomRuleInfo", this.model._gameid, "v_roundcount");
          this.refFangfei();
          break;

         case "v_fullstart":
          CreateRoomMgr_1.default.getInstance().setProperty(this.model._roomcfg["v_fullstart"][index2], "roomRuleInfo", this.model._gameid, "v_fullstart");
          CreateRoomMgr_1.default.getInstance().setProperty(this.model.v_startModel[index2], "roomRuleInfo", this.model._gameid, "v_startModel");
          break;

         case "v_settleRule":
          CreateRoomMgr_1.default.getInstance().setProperty(this.model._roomcfg["v_settleRule"][index2], "roomRuleInfo", this.model._gameid, "v_settleRule");
          if (0 == index2) {
            this.model._roomRuleInfo.t_niu_10 = 4;
            this.model._roomRuleInfo.t_niu_9 = 3;
            this.model._roomRuleInfo.t_niu_8 = 2;
            this.model._roomRuleInfo.t_niu_7 = 2;
          } else if (1 == index2) {
            this.model._roomRuleInfo.t_niu_10 = 3;
            this.model._roomRuleInfo.t_niu_9 = 2;
            this.model._roomRuleInfo.t_niu_8 = 2;
            this.model._roomRuleInfo.t_niu_7 = 1;
          }
        }
      };
      Prefab_NNRoomInfoCtrlCtrl.prototype.CheckToggle1_cb = function(node, index) {
        switch (Configs_2[index]) {
         case "v_shunziNiuLimit":
          node.getComponent(cc.Toggle).isChecked ? this.model._roomRuleInfo.v_shunziNiuLimit = 1 : this.model._roomRuleInfo.v_shunziNiuLimit = 0;
          break;

         case "v_tonghuaNiuLimit":
          node.getComponent(cc.Toggle).isChecked ? this.model._roomRuleInfo.v_tonghuaNiuLimit = 1 : this.model._roomRuleInfo.v_tonghuaNiuLimit = 0;
          break;

         case "v_wuhuaNiuLimit":
          node.getComponent(cc.Toggle).isChecked ? this.model._roomRuleInfo.v_wuhuaNiuLimit = 1 : this.model._roomRuleInfo.v_wuhuaNiuLimit = 0;
          break;

         case "v_huluNiuLimit":
          node.getComponent(cc.Toggle).isChecked ? this.model._roomRuleInfo.v_huluNiuLimit = 1 : this.model._roomRuleInfo.v_huluNiuLimit = 0;
          break;

         case "v_zhadanNiuLimit":
          node.getComponent(cc.Toggle).isChecked ? this.model._roomRuleInfo.v_zhadanNiuLimit = 1 : this.model._roomRuleInfo.v_zhadanNiuLimit = 0;
          break;

         case "v_wuxiaoNiuLimit":
          node.getComponent(cc.Toggle).isChecked ? this.model._roomRuleInfo.v_wuxiaoNiuLimit = 1 : this.model._roomRuleInfo.v_wuxiaoNiuLimit = 0;
          break;

         case "allSelect":
          if (node.getComponent(cc.Toggle).isChecked) {
            for (var i = 0; i < node.parent.childrenCount - 1; i++) {
              var temp = node.parent.children[i];
              temp.getComponent(cc.Toggle).isChecked = true;
            }
            this.model._roomRuleInfo.v_shunziNiuLimit = 1;
            this.model._roomRuleInfo.v_tonghuaNiuLimit = 1;
            this.model._roomRuleInfo.v_zhadanNiuLimit = 1;
            this.model._roomRuleInfo.v_huluNiuLimit = 1;
            this.model._roomRuleInfo.v_wuhuaNiuLimit = 1;
            this.model._roomRuleInfo.v_wuxiaoNiuLimit = 1;
          } else {
            for (var i = 0; i < node.parent.childrenCount - 1; i++) {
              var temp = node.parent.children[i];
              temp.getComponent(cc.Toggle).isChecked = false;
            }
            this.model._roomRuleInfo.v_shunziNiuLimit = 0;
            this.model._roomRuleInfo.v_tonghuaNiuLimit = 0;
            this.model._roomRuleInfo.v_zhadanNiuLimit = 0;
            this.model._roomRuleInfo.v_huluNiuLimit = 0;
            this.model._roomRuleInfo.v_wuhuaNiuLimit = 0;
            this.model._roomRuleInfo.v_wuxiaoNiuLimit = 0;
          }
        }
        var Label = this.ToggleCheckBtn.children[0].children[1].getComponent(cc.Label);
        Label.string = this.upDataSPECIALBRANDString(node.parent, 2);
        this.changeAllSelect(node.parent, 2);
      };
      Prefab_NNRoomInfoCtrlCtrl.prototype.CheckToggle2_cb = function(node, index) {
        switch (Configs_3[index]) {
         case "v_midEnterLimit":
          node.getComponent(cc.Toggle).isChecked ? this.model._roomRuleInfo.v_midEnterLimit = 1 : this.model._roomRuleInfo.v_midEnterLimit = 0;
          break;

         case "v_cuopaiLimit":
          node.getComponent(cc.Toggle).isChecked ? this.model._roomRuleInfo.v_cuopaiLimit = 1 : this.model._roomRuleInfo.v_cuopaiLimit = 0;
          break;

         case "v_wanglaiLimit":
          node.getComponent(cc.Toggle).isChecked ? this.model._roomRuleInfo.v_wanglaiLimit = 1 : this.model._roomRuleInfo.v_wanglaiLimit = 0;
          break;

         case "allSelect":
          if (node.getComponent(cc.Toggle).isChecked) {
            for (var i = 0; i < node.parent.childrenCount - 1; i++) {
              var temp = node.parent.children[i];
              temp.getComponent(cc.Toggle).isChecked = true;
            }
            this.model._roomRuleInfo.v_midEnterLimit = 1;
            this.model._roomRuleInfo.v_cuopaiLimit = 1;
            this.model._roomRuleInfo.v_wanglaiLimit = 1;
          } else {
            for (var i = 0; i < node.parent.childrenCount - 1; i++) {
              var temp = node.parent.children[i];
              temp.getComponent(cc.Toggle).isChecked = false;
            }
            this.model._roomRuleInfo.v_midEnterLimit = 0;
            this.model._roomRuleInfo.v_cuopaiLimit = 0;
            this.model._roomRuleInfo.v_wanglaiLimit = 0;
          }
        }
        var Label = this.ToggleCheckBtn.children[1].children[1].getComponent(cc.Label);
        Label.string = this.upDataADVANCEDOPTIONSString(node.parent, 1);
        this.changeAllSelect(node.parent, 1);
      };
      Prefab_NNRoomInfoCtrlCtrl.prototype.changeAllSelect = function(node, number) {
        var isAllSelect = true;
        for (var i = 0; i < node.childrenCount - number; i++) node.children[i].getComponent(cc.Toggle).isChecked || (isAllSelect = false);
        node.getChildByName("6").getComponent(cc.Toggle).isChecked = !!isAllSelect;
      };
      Prefab_NNRoomInfoCtrlCtrl.prototype.RefreshTBNNRoomUi = function() {};
      __decorate([ property({
        tooltip: "开启单选框组",
        type: cc.Node
      }) ], Prefab_NNRoomInfoCtrlCtrl.prototype, "ToggleBtn", void 0);
      __decorate([ property({
        tooltip: "开启复选框组",
        type: cc.Node
      }) ], Prefab_NNRoomInfoCtrlCtrl.prototype, "ToggleCheckBtn", void 0);
      __decorate([ property({
        tooltip: "单选框",
        type: cc.Node
      }) ], Prefab_NNRoomInfoCtrlCtrl.prototype, "Toggle", void 0);
      __decorate([ property({
        tooltip: "复选框",
        type: cc.Node
      }) ], Prefab_NNRoomInfoCtrlCtrl.prototype, "ToggleCheck", void 0);
      __decorate([ property({
        tooltip: "帮助",
        type: cc.Node
      }) ], Prefab_NNRoomInfoCtrlCtrl.prototype, "ZiXun", void 0);
      __decorate([ property({
        tooltip: "房费",
        type: cc.Node
      }) ], Prefab_NNRoomInfoCtrlCtrl.prototype, "RoomCost", void 0);
      __decorate([ property({
        tooltip: "房费标题",
        type: cc.Node
      }) ], Prefab_NNRoomInfoCtrlCtrl.prototype, "CostTitle", void 0);
      __decorate([ property({
        tooltip: "高级选项",
        type: cc.Prefab
      }) ], Prefab_NNRoomInfoCtrlCtrl.prototype, "Prefab_AdvancedOptions", void 0);
      Prefab_NNRoomInfoCtrlCtrl = __decorate([ ccclass ], Prefab_NNRoomInfoCtrlCtrl);
      return Prefab_NNRoomInfoCtrlCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_NNRoomInfoCtrlCtrl;
    cc._RF.pop();
  }, {
    "../../CfgMgrs/RoomCostCfg": "RoomCostCfg",
    "../../GameMgrs/BetMgr": "BetMgr",
    "../../GameMgrs/CreateRoomMgr": "CreateRoomMgr",
    "../../GameMgrs/GameFreeMgr": "GameFreeMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_PlazaLeftCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e75b5faeulGqI2TZpMjhobZ", "Prefab_PlazaLeftCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {};
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui["btn_sign"] = ctrl.btn_sign;
        this.ui["btn_first_punch"] = ctrl.btn_first_punch;
      };
      return View;
    }(BaseView_1.default);
    var NodeLeftCtrl = function(_super) {
      __extends(NodeLeftCtrl, _super);
      function NodeLeftCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_sign = null;
        _this.btn_first_punch = null;
        return _this;
      }
      NodeLeftCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      NodeLeftCtrl.prototype.defineNetEvents = function() {};
      NodeLeftCtrl.prototype.defineGlobalEvents = function() {};
      NodeLeftCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_sign, this.btn_sign_cb, "签到");
        this.connect(G_UiType.image, this.ui.btn_first_punch, this.btn_first_punch_cb, "首冲");
      };
      NodeLeftCtrl.prototype.start = function() {};
      NodeLeftCtrl.prototype.btn_sign_cb = function(node, event) {
        console.log("btn_sign_cb");
        this.start_sub_module(G_MODULE.SignIn);
      };
      NodeLeftCtrl.prototype.btn_first_punch_cb = function(node, event) {
        console.log("btn_first_punch_cb");
      };
      __decorate([ property(cc.Node) ], NodeLeftCtrl.prototype, "btn_sign", void 0);
      __decorate([ property(cc.Node) ], NodeLeftCtrl.prototype, "btn_first_punch", void 0);
      NodeLeftCtrl = __decorate([ ccclass ], NodeLeftCtrl);
      return NodeLeftCtrl;
    }(BaseCtrl_1.default);
    exports.default = NodeLeftCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_RecordListCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5dd944xveVNUKjP4FInt1O8", "Prefab_RecordListCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var GameRecordMgr_1 = require("../../GameMgrs/GameRecordMgr");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var BunchInfoMgr_1 = require("../../GameMgrs/BunchInfoMgr");
    var RECORD_STATE = {
      ROOM: 1,
      FIGHT: 2
    };
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.record_list = null;
        _this.record_state = 0;
        _this.record_begin = null;
        _this.record_num = null;
        _this.record_page = null;
        _this.list_record = true;
        _this.record_max = 0;
        _this.record_type = 0;
        _this.record_club = 0;
        _this.record_num = 20;
        _this.record_list = {};
        _this.record_state = RECORD_STATE.ROOM;
        _this.record_begin = 0;
        _this.record_page = 1;
        _this.record_max = GameRecordMgr_1.default.getInstance().getRecordMax();
        _this.refreshRecordList();
        return _this;
      }
      Model.prototype.refreshRecordList = function() {
        this.record_type = GameRecordMgr_1.default.getInstance().getGameType();
        this.record_club = GameRecordMgr_1.default.getInstance().getRecordClub();
        this.record_list = GameRecordMgr_1.default.getInstance().getRecordList();
      };
      Model.prototype.getRecordType = function() {
        return this.record_type;
      };
      Model.prototype.getRecordClub = function() {
        return this.record_club;
      };
      Model.prototype.getRecordList = function() {
        return this.record_list;
      };
      Model.prototype.getRecordState = function() {
        return this.record_state;
      };
      Model.prototype.setRecordState = function(data) {
        this.record_state = data;
      };
      Model.prototype.getRecordBegin = function() {
        return this.record_begin;
      };
      Model.prototype.setRecordBegin = function(data) {
        this.record_begin = data;
      };
      Model.prototype.getRecordPage = function() {
        return this.record_page;
      };
      Model.prototype.setRecordPage = function(data) {
        this.record_page = data;
      };
      Model.prototype.addRecordPage = function(data) {
        this.record_page += data;
      };
      Model.prototype.getRecordNum = function() {
        return this.record_num;
      };
      Model.prototype.setListRecord = function(state) {
        this.list_record = state;
      };
      Model.prototype.getListRecord = function() {
        return this.list_record;
      };
      Model.prototype.getRecordMax = function() {
        return this.record_max;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          prefab_strip: null,
          btn_close: null,
          btn_room: null,
          btn_fight: null,
          btn_video: null,
          node_record_list: null,
          node_recordView: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.prefab_strip = ctrl.prefab_strip;
        this.ui.btn_close = ctrl.btn_close;
        this.ui.btn_room = ctrl.btn_room;
        this.ui.btn_fight = ctrl.btn_fight;
        this.ui.btn_video = ctrl.btn_video;
        this.ui.node_record_list = ctrl.node_record_list;
        this.ui.node_recordView = ctrl.node_recordView;
        this.refreshStateCheck();
      };
      View.prototype.refreshStateCheck = function() {
        if (this.model.getRecordState() == RECORD_STATE.ROOM) {
          var node_check = this.ui.btn_room.getComponent(cc.Toggle);
          node_check.check();
        } else {
          var node_check = this.ui.btn_fight.getComponent(cc.Toggle);
          node_check.check();
        }
      };
      View.prototype.addRecordStrip = function() {
        var node_member = cc.instantiate(this.ui.prefab_strip);
        this.ui.node_record_list.addChild(node_member);
      };
      View.prototype.removeRecordList = function() {
        this.ui.node_record_list.destroyAllChildren();
        this.ui.node_record_list.removeAllChildren();
      };
      View.prototype.refreshRecordList = function() {
        var count = this.ui.node_record_list.childrenCount, layout = this.ui.node_record_list.getComponent(cc.Layout), layoutGap = layout.spacingY, layoutHeight = layout.paddingTop + layout.paddingBottom;
        for (var i = 0; i < count; i++) {
          var curNode = this.ui.node_record_list.children[i];
          layoutHeight = layoutHeight + curNode.height + layoutGap;
        }
        this.ui.node_record_list.height = layoutHeight - layoutGap;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_RecordListCtrl = function(_super) {
      __extends(Prefab_RecordListCtrl, _super);
      function Prefab_RecordListCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.prefab_strip = null;
        _this.btn_close = null;
        _this.btn_room = null;
        _this.btn_fight = null;
        _this.btn_video = null;
        _this.node_record_list = null;
        _this.node_recordView = null;
        return _this;
      }
      Prefab_RecordListCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        GameRecordMgr_1.default.getInstance().reqGambleRecordList(1, this.model.getRecordState(), 0, 0);
      };
      Prefab_RecordListCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqGambleRecordList": this.http_reqGambleRecordList,
          "http.reqGambleRecord": this.http_reqGambleRecord
        };
      };
      Prefab_RecordListCtrl.prototype.http_reqGambleRecordList = function(msg) {
        if (1 == msg.page) {
          this.model.setRecordBegin(0);
          this.model.setRecordPage(1);
          this.view.removeRecordList();
        }
        this.model.refreshRecordList();
        this.addMemberList();
      };
      Prefab_RecordListCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_RecordListCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_room, this.btn_room_cb, "切换房间");
        this.connect(G_UiType.image, this.ui.btn_fight, this.btn_fight_cb, "切换比赛");
        this.connect(G_UiType.image, this.ui.btn_video, this.btn_video_cb, "点击录像");
        this.connect(G_UiType.button, this.ui.btn_close, this.btn_close_cb, "退出界面");
        this.connect(G_UiType.scroll, this.ui.node_record_list, this.record_view_cb, "切换列表内容");
      };
      Prefab_RecordListCtrl.prototype.start = function() {};
      Prefab_RecordListCtrl.prototype.http_reqGambleRecord = function(msg) {
        BunchInfoMgr_1.default.getInstance().showFinalSettle(msg.gameid);
      };
      Prefab_RecordListCtrl.prototype.addMemberList = function() {
        var record_list = this.model.getRecordList(), recordBegin = this.model.getRecordBegin(), recordCount = recordBegin + this.model.getRecordNum(), list_count = null == record_list.length ? 0 : record_list.length;
        recordCount = Math.min(recordCount, list_count);
        for (var i = recordBegin; i < recordCount; i++) {
          var data = record_list[i];
          BehaviorMgr_1.default.getInstance().setGameRecordData(data);
          this.view.addRecordStrip();
        }
        this.view.refreshRecordList();
        this.model.setRecordBegin(recordCount);
        this.model.addRecordPage(1);
        recordCount != recordBegin && this.model.setListRecord(true);
      };
      Prefab_RecordListCtrl.prototype.btn_close_cb = function(node, event) {
        this.finish();
      };
      Prefab_RecordListCtrl.prototype.record_view_cb = function(node, event) {
        if (event.type == cc.Node.EventType.TOUCH_MOVE) {
          var record_list = this.model.getRecordList(), itemMax = record_list.length;
          var node_height = node.height - this.ui.node_recordView.height;
          if (.25 * node_height * 4 < node.y && true == this.model.getListRecord()) {
            this.model.setListRecord(false);
            GameRecordMgr_1.default.getInstance().reqGambleRecordList(this.model.getRecordPage());
          }
        }
      };
      Prefab_RecordListCtrl.prototype.btn_room_cb = function(node, event) {
        console.log("btn_room_cb");
        if (this.model.getRecordState() == RECORD_STATE.ROOM) return;
        this.model.setRecordState(RECORD_STATE.ROOM);
        GameRecordMgr_1.default.getInstance().reqGambleRecordList(1, this.model.getRecordState());
      };
      Prefab_RecordListCtrl.prototype.btn_fight_cb = function(node, event) {
        console.log("btn_fight_cb");
        this.view.refreshStateCheck();
        FrameMgr_1.default.getInstance().showTips("暂未开放，敬请期待");
      };
      Prefab_RecordListCtrl.prototype.btn_video_cb = function(node, event) {
        console.log("btn_video_cb");
        this.start_sub_module(G_MODULE.VideoEnter);
      };
      __decorate([ property(cc.Prefab) ], Prefab_RecordListCtrl.prototype, "prefab_strip", void 0);
      __decorate([ property(cc.Node) ], Prefab_RecordListCtrl.prototype, "btn_close", void 0);
      __decorate([ property(cc.Node) ], Prefab_RecordListCtrl.prototype, "btn_room", void 0);
      __decorate([ property(cc.Node) ], Prefab_RecordListCtrl.prototype, "btn_fight", void 0);
      __decorate([ property(cc.Node) ], Prefab_RecordListCtrl.prototype, "btn_video", void 0);
      __decorate([ property(cc.Node) ], Prefab_RecordListCtrl.prototype, "node_record_list", void 0);
      __decorate([ property(cc.Node) ], Prefab_RecordListCtrl.prototype, "node_recordView", void 0);
      Prefab_RecordListCtrl = __decorate([ ccclass ], Prefab_RecordListCtrl);
      return Prefab_RecordListCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_RecordListCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/GameRecordMgr": "GameRecordMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_RecordStripCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d9997iBvFVMsqLPy6att3w7", "Prefab_RecordStripCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var GameRecordMgr_1 = require("../../GameMgrs/GameRecordMgr");
    var GameCateCfg_1 = require("../../CfgMgrs/GameCateCfg");
    var BunchInfoMgr_1 = require("../../GameMgrs/BunchInfoMgr");
    var RECORD_MEMBER_COUNT = {
      ONE_LINE_BIG: 3,
      ONE_LINE_MEDIUM: 4,
      TWE_LINE_BIG: 6,
      TWE_LINE_MEDIUM: 8,
      TWE_LINE_SMALL: 10
    };
    var RECORD_PAY_NAME = {
      0: "房主支付",
      1: "AA制",
      2: "赢家支付"
    };
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.record_data = null;
        _this.record_type = 0;
        _this.record_club = 0;
        _this.record_type = GameRecordMgr_1.default.getInstance().getGameType();
        _this.record_club = GameRecordMgr_1.default.getInstance().getRecordClub();
        _this.record_data = BehaviorMgr_1.default.getInstance().getGameRecordData();
        return _this;
      }
      Model.prototype.getRecordType = function() {
        return this.record_type;
      };
      Model.prototype.getRecordClub = function() {
        return this.record_club;
      };
      Model.prototype.getRecordMember = function() {
        return this.record_data.memberlist;
      };
      Model.prototype.getRecordDataType = function() {
        return this.record_data.type;
      };
      Model.prototype.getStrRecordDataType = function() {
        console.log("getRecordDataType", this.record_data.type);
        var games = GameCateCfg_1.default.getInstance().getGameById(this.record_data.type);
        console.log(games);
        var type_name = games.name;
        return type_name;
      };
      Model.prototype.getRecordDataTime = function() {
        return this.record_data.time;
      };
      Model.prototype.getRecordDataClub = function() {
        return this.record_data.club_id;
      };
      Model.prototype.getStrRecordDataClub = function() {
        return this.record_data.club_name;
      };
      Model.prototype.getRecordDataPayType = function() {
        return this.record_data.pay_type;
      };
      Model.prototype.getRecordDataPayCount = function() {
        return this.record_data.pay_count;
      };
      Model.prototype.getRecordDataId = function() {
        return this.record_data.id;
      };
      Model.prototype.getRecordRound = function() {
        return this.record_data.round;
      };
      Model.prototype.getRecordBunchid = function() {
        return this.record_data.bunchid;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          prefab_content_small: null,
          prefab_content_medium: null,
          prefab_content_big: null,
          node_self: null,
          node_bottom: null,
          btn_type: null,
          btn_club: null,
          type_check: null,
          club_check: null,
          btn_frame: null,
          label_type: null,
          label_time: null,
          label_club: null,
          label_round: null,
          label_pay_type: null,
          label_pay_count: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.prefab_content_small = ctrl.prefab_content_small;
        this.ui.prefab_content_medium = ctrl.prefab_content_medium;
        this.ui.prefab_content_big = ctrl.prefab_content_big;
        this.ui.node_self = ctrl.node_self;
        this.ui.node_bottom = ctrl.node_bottom;
        this.ui.btn_type = ctrl.btn_type;
        this.ui.btn_club = ctrl.btn_club;
        this.ui.type_check = ctrl.type_check;
        this.ui.club_check = ctrl.club_check;
        this.ui.btn_frame = ctrl.btn_frame;
        this.ui.label_type = ctrl.label_type;
        this.ui.label_time = ctrl.label_time;
        this.ui.label_club = ctrl.label_club;
        this.ui.label_round = ctrl.label_round;
        this.ui.label_pay_type = ctrl.label_pay_type;
        this.ui.label_pay_count = ctrl.label_pay_count;
        this.refreshUi();
      };
      View.prototype.refreshUi = function() {
        this.refreshFrameHeight();
        this.refreshGameType();
        this.refreshRecordClub();
        this.refreshRecordTime();
        this.refreshRecordRound();
        this.refreshRecordPayType();
        this.refreshRecordPayCount();
        this.refreshMemberList();
      };
      View.prototype.refreshGameType = function() {
        this.ui.label_type.string = this.model.getStrRecordDataType();
        0 != this.model.getRecordType() ? this.ui.type_check.active = true : this.ui.type_check.active = false;
      };
      View.prototype.refreshRecordClub = function() {
        this.ui.label_club.string = this.model.getStrRecordDataClub();
        console.log("refreshRecordClub", this.model.getRecordClub());
        0 == this.model.getRecordClub() ? this.ui.club_check.active = false : this.ui.club_check.active = true;
      };
      View.prototype.refreshRecordTime = function() {
        this.ui.label_time.string = this.model.getRecordDataTime();
      };
      View.prototype.refreshRecordRound = function() {
        var strRound = this.model.getRecordRound() + "局";
        0 == this.model.getRecordRound() && (strRound = "1课");
        this.ui.label_round.string = strRound;
      };
      View.prototype.refreshRecordPayType = function() {
        this.ui.label_pay_type.string = RECORD_PAY_NAME[this.model.getRecordDataPayType()];
      };
      View.prototype.refreshRecordPayCount = function() {
        this.ui.label_pay_count.string = this.model.getRecordDataPayCount();
      };
      View.prototype.refreshFrameHeight = function() {
        var member = this.model.getRecordMember();
        if (member.length <= RECORD_MEMBER_COUNT.ONE_LINE_MEDIUM) {
          this.ui.btn_frame.height = this.ui.btn_frame.height / 2;
          this.ui.node_self.height -= this.ui.btn_frame.height;
          this.ui.node_bottom.height -= this.ui.btn_frame.height;
        }
      };
      View.prototype.addRecordPlayer = function(length) {
        var player = null;
        player = length <= RECORD_MEMBER_COUNT.TWE_LINE_SMALL && length > RECORD_MEMBER_COUNT.TWE_LINE_MEDIUM ? cc.instantiate(this.ui.prefab_content_small) : length <= RECORD_MEMBER_COUNT.TWE_LINE_MEDIUM && length > RECORD_MEMBER_COUNT.TWE_LINE_BIG || length <= RECORD_MEMBER_COUNT.ONE_LINE_MEDIUM && length > RECORD_MEMBER_COUNT.ONE_LINE_BIG ? cc.instantiate(this.ui.prefab_content_medium) : cc.instantiate(this.ui.prefab_content_big);
        this.ui.btn_frame.addChild(player);
      };
      View.prototype.refreshMemberList = function() {
        var member = this.model.getRecordMember(), count = member.length;
        for (var i = 0; i < count; i++) {
          var data = member[i];
          BehaviorMgr_1.default.getInstance().setRecordPlayerData(data);
          this.addRecordPlayer(count);
        }
      };
      return View;
    }(BaseView_1.default);
    var Prefab_RecordStripCtrl = function(_super) {
      __extends(Prefab_RecordStripCtrl, _super);
      function Prefab_RecordStripCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.prefab_content_small = null;
        _this.prefab_content_medium = null;
        _this.prefab_content_big = null;
        _this.node_self = null;
        _this.node_bottom = null;
        _this.btn_type = null;
        _this.btn_club = null;
        _this.type_check = null;
        _this.club_check = null;
        _this.btn_frame = null;
        _this.label_type = null;
        _this.label_time = null;
        _this.label_club = null;
        _this.label_round = null;
        _this.label_pay_type = null;
        _this.label_pay_count = null;
        return _this;
      }
      Prefab_RecordStripCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_RecordStripCtrl.prototype.defineNetEvents = function() {};
      Prefab_RecordStripCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_RecordStripCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_type, this.btn_type_cb, "切换类型");
        this.connect(G_UiType.image, this.ui.btn_club, this.btn_club_cb, "切换茶馆");
        this.connect(G_UiType.button, this.ui.btn_frame, this.btn_frame_cb, "点击详情");
      };
      Prefab_RecordStripCtrl.prototype.start = function() {};
      Prefab_RecordStripCtrl.prototype.btn_type_cb = function(node, event) {
        console.log("btn_type_cb");
        var type = this.model.getRecordDataType();
        0 != this.model.getRecordType() && (type = 0);
        GameRecordMgr_1.default.getInstance().reqGambleRecordList(1, null, type);
      };
      Prefab_RecordStripCtrl.prototype.btn_club_cb = function(node, event) {
        var club = this.model.getRecordDataClub();
        0 != this.model.getRecordClub() && (club = 0);
        GameRecordMgr_1.default.getInstance().reqGambleRecordList(1, null, null, club);
      };
      Prefab_RecordStripCtrl.prototype.btn_frame_cb = function(node, event) {
        console.log("btn_frame_cb");
        BunchInfoMgr_1.default.getInstance().reqGambleRecord(this.model.getRecordBunchid());
      };
      __decorate([ property(cc.Prefab) ], Prefab_RecordStripCtrl.prototype, "prefab_content_small", void 0);
      __decorate([ property(cc.Prefab) ], Prefab_RecordStripCtrl.prototype, "prefab_content_medium", void 0);
      __decorate([ property(cc.Prefab) ], Prefab_RecordStripCtrl.prototype, "prefab_content_big", void 0);
      __decorate([ property(cc.Node) ], Prefab_RecordStripCtrl.prototype, "node_self", void 0);
      __decorate([ property(cc.Node) ], Prefab_RecordStripCtrl.prototype, "node_bottom", void 0);
      __decorate([ property(cc.Node) ], Prefab_RecordStripCtrl.prototype, "btn_type", void 0);
      __decorate([ property(cc.Node) ], Prefab_RecordStripCtrl.prototype, "btn_club", void 0);
      __decorate([ property(cc.Node) ], Prefab_RecordStripCtrl.prototype, "type_check", void 0);
      __decorate([ property(cc.Node) ], Prefab_RecordStripCtrl.prototype, "club_check", void 0);
      __decorate([ property(cc.Node) ], Prefab_RecordStripCtrl.prototype, "btn_frame", void 0);
      __decorate([ property(cc.Label) ], Prefab_RecordStripCtrl.prototype, "label_type", void 0);
      __decorate([ property(cc.Label) ], Prefab_RecordStripCtrl.prototype, "label_time", void 0);
      __decorate([ property(cc.Label) ], Prefab_RecordStripCtrl.prototype, "label_club", void 0);
      __decorate([ property(cc.Label) ], Prefab_RecordStripCtrl.prototype, "label_round", void 0);
      __decorate([ property(cc.Label) ], Prefab_RecordStripCtrl.prototype, "label_pay_type", void 0);
      __decorate([ property(cc.Label) ], Prefab_RecordStripCtrl.prototype, "label_pay_count", void 0);
      Prefab_RecordStripCtrl = __decorate([ ccclass ], Prefab_RecordStripCtrl);
      return Prefab_RecordStripCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_RecordStripCtrl;
    cc._RF.pop();
  }, {
    "../../CfgMgrs/GameCateCfg": "GameCateCfg",
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../GameMgrs/GameRecordMgr": "GameRecordMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_RenameCommonRuleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4662cQP2/hJT5MLPlZNjPfs", "Prefab_RenameCommonRuleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var CreateRoomMgr_1 = require("../../GameMgrs/CreateRoomMgr");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var GameCateCfg_1 = require("../../CfgMgrs/GameCateCfg");
    var LoginMgr_1 = require("../../GameMgrs/LoginMgr");
    var BetMgr_1 = require("../../GameMgrs/BetMgr");
    var LocalStorage_1 = require("../../Libs/LocalStorage");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.ruleName = null;
        _this.index = null;
        _this.ruleItems = [];
        _this.ruleName = CreateRoomMgr_1.default.getInstance().getCommonRuleName();
        _this.index = CreateRoomMgr_1.default.getInstance().getRuleItemIndex();
        _this.ruleItems = CreateRoomMgr_1.default.getInstance().getRuleItems();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.node = null;
        _this.ui = {
          btnCancel: ctrl.Cancel,
          btnConfirm: ctrl.Confirm,
          editFrame: ctrl.EditFrame
        };
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.editFrame.getComponent(cc.EditBox).placeholder = this.model.ruleName;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_RenameCommonRuleCtrl = function(_super) {
      __extends(Prefab_RenameCommonRuleCtrl, _super);
      function Prefab_RenameCommonRuleCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.Cancel = null;
        _this.Confirm = null;
        _this.EditFrame = null;
        return _this;
      }
      Prefab_RenameCommonRuleCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_RenameCommonRuleCtrl.prototype.defineNetEvents = function() {};
      Prefab_RenameCommonRuleCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_RenameCommonRuleCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btnCancel, this.cancelCB, "取消编辑");
        this.connect(G_UiType.image, this.ui.btnConfirm, this.confirmCB, "确认编辑结果");
        this.connect(G_UiType.edit, this.ui.editFrame, this.editCB, "编辑框输入");
      };
      Prefab_RenameCommonRuleCtrl.prototype.start = function() {};
      Prefab_RenameCommonRuleCtrl.prototype.cancelCB = function(event) {
        console.log("取消编辑，并关闭");
        this.finish();
      };
      Prefab_RenameCommonRuleCtrl.prototype.confirmCB = function(event) {
        console.log("确认编辑结果");
        var newName = CreateRoomMgr_1.default.getInstance().getNewName();
        console.log("新命名", newName);
        if (!newName || "" == newName) {
          FrameMgr_1.default.getInstance().showTips("新命名不能为空");
          return;
        }
        if (newName == this.model.ruleName) {
          FrameMgr_1.default.getInstance().showTips("新命名与原命名相同，请重新更改");
          return;
        }
        this.model.ruleItems[this.model.index].getComponentInChildren(cc.Label).string = newName;
        var gameId = BetMgr_1.default.getInstance().getGameId();
        var Groups = CreateRoomMgr_1.default.getInstance().getCommonRuleGroups(gameId);
        var commonRule = CreateRoomMgr_1.default.getInstance().getCommonRule(gameId);
        commonRule[this.model.index].ruleName = newName;
        Groups[LoginMgr_1.default.getInstance().getUid().toString()] = commonRule;
        console.log("需要存入本地默认规则的数据", Groups, commonRule);
        var games = GameCateCfg_1.default.getInstance().getGames();
        var gameCode = games[gameId - 1].code;
        LocalStorage_1.default.getInstance().setCommonRuleGroups(gameCode, Groups);
        this.finish();
      };
      Prefab_RenameCommonRuleCtrl.prototype.editCB = function(type, event) {
        if ("editing-did-ended" == type) {
          console.log(event.currentTarget.getComponent(cc.EditBox).string);
          var newName = event.currentTarget.getComponent(cc.EditBox).string;
          CreateRoomMgr_1.default.getInstance().setNewName(newName);
        }
      };
      __decorate([ property({
        tooltip: "取消按钮",
        type: cc.Node
      }) ], Prefab_RenameCommonRuleCtrl.prototype, "Cancel", void 0);
      __decorate([ property({
        tooltip: "确定按钮",
        type: cc.Node
      }) ], Prefab_RenameCommonRuleCtrl.prototype, "Confirm", void 0);
      __decorate([ property({
        tooltip: "编辑框控件",
        type: cc.Node
      }) ], Prefab_RenameCommonRuleCtrl.prototype, "EditFrame", void 0);
      Prefab_RenameCommonRuleCtrl = __decorate([ ccclass ], Prefab_RenameCommonRuleCtrl);
      return Prefab_RenameCommonRuleCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_RenameCommonRuleCtrl;
    cc._RF.pop();
  }, {
    "../../CfgMgrs/GameCateCfg": "GameCateCfg",
    "../../GameMgrs/BetMgr": "BetMgr",
    "../../GameMgrs/CreateRoomMgr": "CreateRoomMgr",
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/LoginMgr": "LoginMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView",
    "../../Libs/LocalStorage": "LocalStorage"
  } ],
  Prefab_RoomRuleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8c4159DKtxH3aHvkPMFJuwj", "Prefab_RoomRuleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var RoomMgr_1 = require("../../GameMgrs/RoomMgr");
    var RoomOptionCfg_1 = require("../../CfgMgrs/RoomOptionCfg");
    var GameFreeMgr_1 = require("../../GameMgrs/GameFreeMgr");
    var GameCateCfg_1 = require("../../CfgMgrs/GameCateCfg");
    var SubGameMgr_1 = require("../../GameMgrs/SubGameMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.roomId = null;
        _this.roomRule = null;
        _this.gameId = null;
        _this.gamecode = null;
        _this.bUpdated = null;
        _this.updateRule();
        return _this;
      }
      Model.prototype.updateRule = function() {
        this.roomRule = RoomMgr_1.default.getInstance().getFangKaCfg();
        this.roomId = RoomMgr_1.default.getInstance().getFangKaPassword();
        this.gameId = RoomMgr_1.default.getInstance().getEnterFangKaGameId();
        var game = GameCateCfg_1.default.getInstance().getGameById(this.gameId);
        this.gamecode = game.code;
        this.bUpdated = SubGameMgr_1.default.getInstance().gameIsUpdated(this.gamecode);
      };
      Model.prototype.updateSubGameState = function() {
        this.bUpdated = SubGameMgr_1.default.getInstance().gameIsUpdated(this.gamecode);
      };
      Model.prototype.getRoomId = function() {
        return this.roomId;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_close: null,
          btn_enter: null,
          ruleContent: ctrl.ruleContent,
          scrollBar: ctrl.scrollBar,
          labelItem: ctrl.labelItem,
          fanfeiText: null,
          Prefab_downloadsubgame: ctrl.Prefab_downloadsubgame,
          node_downloadsubgame: null,
          node_roomsetting: ctrl.node_roomsetting
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.showRule();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.btn_close = ctrl.btn_close;
        this.ui.btn_close.active = false;
        this.ui.btn_enter = ctrl.btn_enter;
        this.ui.fanfeiText = ctrl.fanfeiText;
        this.ui.node_downloadsubgame = cc.instantiate(this.ui.Prefab_downloadsubgame);
        this.node.addChild(this.ui.node_downloadsubgame);
        this.updateSubGameState();
      };
      View.prototype.showRule = function() {
        var arrContent = RoomOptionCfg_1.default.getInstance().getContentTransToString(this.model.gameId, this.model.roomRule);
        var arrTitle = RoomOptionCfg_1.default.getInstance().getTitleTransToString(this.model.gameId, this.model.roomRule);
        var fangfei = RoomOptionCfg_1.default.getInstance().getFanfei(this.model.gameId, this.model.roomRule);
        for (var i = 0; i < arrContent.length; i++) {
          var item = cc.instantiate(this.ui.labelItem);
          item.parent = this.ui.ruleContent;
          item.getChildByName("labelTitle").getComponent(cc.Label).string = arrTitle[i];
          item.getChildByName("labelContent").getComponent(cc.Label).string = arrContent[i];
        }
        var isFree = GameFreeMgr_1.default.getInstance().isFree(this.model.gameId);
        if (isFree) {
          this.ui.fanfeiText.string = "限时免费无需支付房费!";
          this.ui.fanfeiText.node.color = new cc.Color(255, 0, 0);
        } else this.ui.fanfeiText.string = fangfei;
      };
      View.prototype.updateSubGameState = function() {
        this.ui.node_downloadsubgame.active = !this.model.bUpdated;
        this.ui.node_roomsetting.active = this.model.bUpdated;
        if (this.model.bUpdated) {
          var roomId = this.model.getRoomId();
          RoomMgr_1.default.getInstance().reqFangKaCfg(roomId);
        }
      };
      View.prototype.OpenAddGrayLayer = function() {
        this.addGrayLayer();
      };
      View.prototype.openCloseBtn = function() {
        this.ui.btn_close.active = true;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_RoomRuleCtrl = function(_super) {
      __extends(Prefab_RoomRuleCtrl, _super);
      function Prefab_RoomRuleCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_close = null;
        _this.btn_enter = null;
        _this.fanfeiText = null;
        _this.ruleContent = null;
        _this.scrollBar = null;
        _this.labelItem = null;
        _this.node_roomsetting = null;
        _this.loadSubGameCtl = null;
        _this.Prefab_downloadsubgame = null;
        return _this;
      }
      Prefab_RoomRuleCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.loadSubGameCtl = this.ui.node_downloadsubgame.getComponent("DownLoadSubGameCtrl");
        this.loadSubGameCtl.registerCompleteCb(this.subGameDownLoadCompleted.bind(this));
        this.loadSubGameCtl.updateGameId(this.model.gameId);
      };
      Prefab_RoomRuleCtrl.prototype.onDestroy = function() {
        this.loadSubGameCtl.unRegisterCompleteCb();
        _super.prototype.onDestroy.call(this);
      };
      Prefab_RoomRuleCtrl.prototype.subGameDownLoadCompleted = function() {
        this.model.updateSubGameState();
        this.view.updateSubGameState();
      };
      Prefab_RoomRuleCtrl.prototype.defineNetEvents = function() {};
      Prefab_RoomRuleCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_RoomRuleCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_enter, this.btn_enter_cb, "进入");
      };
      Prefab_RoomRuleCtrl.prototype.start = function() {};
      Prefab_RoomRuleCtrl.prototype.OpenAddGrayLayer = function() {
        this.view.OpenAddGrayLayer();
      };
      Prefab_RoomRuleCtrl.prototype.openCloseBtn = function() {
        this.view.openCloseBtn();
        this.connect(G_UiType.image, this.ui.btn_close, this.btn_close_cb, "关闭按钮");
      };
      Prefab_RoomRuleCtrl.prototype.btn_close_cb = function() {
        var parentNode = this.node.parent;
        console.log("节点名称", parentNode.name);
        "Prefab_JoinRoom" == parentNode.name && parentNode.getComponent("Prefab_JoinRoomCtrl").finish();
        this.finish();
      };
      Prefab_RoomRuleCtrl.prototype.btn_enter_cb = function() {
        console.log("btn_enter_cb", this.model.getRoomId());
        var roomId = this.model.getRoomId();
        RoomMgr_1.default.getInstance().reqFangKaVerify(roomId);
      };
      __decorate([ property({
        tooltip: "关闭",
        type: cc.Node
      }) ], Prefab_RoomRuleCtrl.prototype, "btn_close", void 0);
      __decorate([ property({
        tooltip: "进入",
        type: cc.Node
      }) ], Prefab_RoomRuleCtrl.prototype, "btn_enter", void 0);
      __decorate([ property({
        tooltip: "支付方式与房费",
        type: cc.Label
      }) ], Prefab_RoomRuleCtrl.prototype, "fanfeiText", void 0);
      __decorate([ property({
        tooltip: "房间规则描述content",
        type: cc.Node
      }) ], Prefab_RoomRuleCtrl.prototype, "ruleContent", void 0);
      __decorate([ property({
        tooltip: "scroll bar",
        type: cc.Node
      }) ], Prefab_RoomRuleCtrl.prototype, "scrollBar", void 0);
      __decorate([ property({
        tooltip: "labelItem",
        type: cc.Prefab
      }) ], Prefab_RoomRuleCtrl.prototype, "labelItem", void 0);
      __decorate([ property({
        tooltip: "房间设置",
        type: cc.Node
      }) ], Prefab_RoomRuleCtrl.prototype, "node_roomsetting", void 0);
      __decorate([ property(cc.Prefab) ], Prefab_RoomRuleCtrl.prototype, "Prefab_downloadsubgame", void 0);
      Prefab_RoomRuleCtrl = __decorate([ ccclass ], Prefab_RoomRuleCtrl);
      return Prefab_RoomRuleCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_RoomRuleCtrl;
    cc._RF.pop();
  }, {
    "../../CfgMgrs/GameCateCfg": "GameCateCfg",
    "../../CfgMgrs/RoomOptionCfg": "RoomOptionCfg",
    "../../GameMgrs/GameFreeMgr": "GameFreeMgr",
    "../../GameMgrs/RoomMgr": "RoomMgr",
    "../../GameMgrs/SubGameMgr": "SubGameMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_RuleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c80db5TAxdLtKZ79+qj0Kb8", "Prefab_RuleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var GameCateCfg_1 = require("../../CfgMgrs/GameCateCfg");
    var ServerMgr_1 = require("../../../AppStart/AppMgrs/ServerMgr");
    var GameHelpCfg_1 = require("../../CfgMgrs/GameHelpCfg");
    var BetMgr_1 = require("../../GameMgrs/BetMgr");
    var SssDef_1 = require("../../../Games/Sss/SssMgr/SssDef");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.gameID = null;
        _this.gamenames = null;
        _this.gameIndex = null;
        _this.titleIndex = null;
        _this.left_gap = null;
        _this.games = null;
        _this.gamehelpcfgs = null;
        _this.selRecord = {};
        _this.top_list = null;
        _this.gameID = BetMgr_1.default.getInstance().getGameId();
        _this.games = GameCateCfg_1.default.getInstance().getGames();
        _this.gamehelpcfgs = GameHelpCfg_1.default.getInstance().getCfg();
        _this.gamenames = new Array();
        _this.top_list = new Array();
        _this.gameIndex = 0;
        _this.titleIndex = 0;
        _this.left_gap = 3;
        _this.addLeftIdList();
        return _this;
      }
      Model.prototype.addLeftIdList = function() {
        for (var i = 0; i < this.games.length; i++) {
          this.gamenames.push(this.games[i]);
          this.selRecord[i] = 0;
        }
      };
      Model.prototype.getGameNames = function() {
        return this.gamenames;
      };
      Model.prototype.setGameIndex = function(index) {
        this.gameIndex = index;
      };
      Model.prototype.getGameIndex = function() {
        return this.gameIndex;
      };
      Model.prototype.setTitleIndex = function(index) {
        this.titleIndex = index;
        this.selRecord[this.gameIndex] = index;
      };
      Model.prototype.getTitleIndex = function() {
        return this.titleIndex;
      };
      Model.prototype.getLeftListGap = function() {
        return this.left_gap;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_left_btns: null,
          node_top_btns: null,
          web_down_content: null,
          node_close_btn: null,
          node_btn_gap: null,
          lbl_titles: [],
          lbl_titles2: [],
          btn_titles: [],
          btn_games: [],
          togglegroup: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_left_btns = ctrl.node_left_btns;
        this.ui.node_top_btns = ctrl.node_top_btns;
        this.ui.web_down_content = ctrl.web_down_content;
        this.ui.node_close_btn = ctrl.node_close_btn;
        this.ui.node_btn_gap = ctrl.node_btn_gap;
        var node_list = this.ui.node_top_btns.children;
        var node_count = this.ui.node_top_btns.childrenCount;
        this.ui.togglegroup = this.ui.node_top_btns.getComponent(cc.ToggleGroup);
        for (var i = 0; i < node_count; ++i) {
          var node = node_list[i];
          this.ui.btn_titles.push(node);
          node.active = false;
          var lbl_title1 = node.getChildByName("Background").getChildByName("lbl_title").getComponent(cc.Label);
          var lbl_title2 = node.getChildByName("img_checkmark").getChildByName("lbl_title").getComponent(cc.Label);
          this.ui.lbl_titles.push(lbl_title1);
          this.ui.lbl_titles2.push(lbl_title2);
        }
        this.addLeftClickBtn();
        if (this.model.gameID) for (var i = 0; i < this.model.games.length; i++) if (this.model.gameID == this.model.games[i].id) {
          this.model.setGameIndex(i);
          this.ui.btn_games[i].getComponent(cc.Toggle).check();
        }
        this.updateTitles();
        this.refreshContentVisible();
        this.initWebView();
      };
      View.prototype.initWebView = function() {
        cc.sys.os == cc.sys.OS_IOS && null != this.ui.web_down_content.setBounces && this.ui.web_down_content.setBounces(false);
      };
      View.prototype.refreshContentVisible = function() {
        var ruleType = this.model.getTitleIndex();
        var gameIndex = this.model.getGameIndex();
        var game = this.model.games[gameIndex];
        var cfg = this.model.gamehelpcfgs[game.code];
        if (!cfg) return;
        if (ruleType > cfg.length - 1) {
          ruleType = 0;
          this.ui.btn_titles[0].getComponent(cc.Toggle).check();
          this.model.setTitleIndex(ruleType);
        }
        console.log("ruleType(顶部列表)", ruleType);
        var url = ServerMgr_1.default.getInstance().getGameRuleUrl(game.code, ruleType + 1);
        console.log("url", url);
        this.ui.web_down_content.url = url;
      };
      View.prototype.addLeftClickBtn = function() {
        var gamenames = this.model.getGameNames();
        this.setRankHeight(gamenames.length);
        for (var i = 0; i < gamenames.length; i++) {
          var curNode = cc.instantiate(this.ui.node_btn_gap);
          curNode.parent = this.ui.node_left_btns;
          curNode.x = 0;
          curNode.active = true;
          var label_node1 = curNode.getChildByName("Background").getChildByName("Label");
          var label_node2 = curNode.getChildByName("checkmark").getChildByName("Label");
          var label_text1 = label_node1.getComponent(cc.Label);
          var label_text2 = label_node2.getComponent(cc.Label);
          label_text1.string = gamenames[i].name;
          label_text2.string = gamenames[i].name;
          this.ui.btn_games.push(curNode);
        }
      };
      View.prototype.setRankHeight = function(count) {
        var size_btn = this.ui.node_btn_gap;
        var height = count * (size_btn.height + this.model.getLeftListGap());
        this.ui.node_left_btns.height < height && (this.ui.node_left_btns.height = height);
      };
      View.prototype.updateTitles = function() {
        var gameIndex = this.model.getGameIndex();
        var game = this.model.games[gameIndex];
        var cfg = this.model.gamehelpcfgs[game.code];
        console.log("updateTitles", gameIndex, game);
        for (var i = 0; i < this.ui.btn_titles.length; ++i) this.ui.btn_titles[i].active = false;
        if (!cfg) return;
        var selIndex = this.model.selRecord[gameIndex];
        for (var i = 0; i < cfg.length; i++) {
          this.ui.btn_titles[i].active = true;
          this.ui.lbl_titles[i].string = cfg[i].name;
          this.ui.lbl_titles2[i].string = cfg[i].name;
        }
        console.log("方法=", this.ui.togglegroup);
      };
      return View;
    }(BaseView_1.default);
    var Prefab_RuleCtrl = function(_super) {
      __extends(Prefab_RuleCtrl, _super);
      function Prefab_RuleCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_left_btns = null;
        _this.node_top_btns = null;
        _this.web_down_content = null;
        _this.node_close_btn = null;
        _this.node_btn_gap = null;
        return _this;
      }
      Prefab_RuleCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_RuleCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onProcess: this.onProcess,
          onStartGame: this.onStartGame,
          onDissolutionRoom: this.onDissolutionRoom,
          onGameFinished: this.onGameFinished
        };
      };
      Prefab_RuleCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_RuleCtrl.prototype.connectUi = function() {
        var _this = this;
        this.connect(G_UiType.button, this.ui.node_close_btn, this.node_close_cb, "关闭界面");
        var _loop_1 = function(i) {
          var btn_title = this_1.ui.btn_titles[i];
          this_1.connect(G_UiType.button, btn_title, function(node, event) {
            var index = i;
            _this.ruleTitleCb(index, node, event);
          }, "点击顶部控件" + i);
        };
        var this_1 = this;
        for (var i = 0; i < this.ui.btn_titles.length; i++) _loop_1(i);
        var _loop_2 = function(i) {
          var btn_game = this_2.ui.btn_games[i];
          this_2.connect(G_UiType.button, btn_game, function(node, event) {
            var index = i;
            _this.gameNameCb(index, node, event);
          }, "点击左边控件" + i);
        };
        var this_2 = this;
        for (var i = 0; i < this.ui.btn_games.length; i++) _loop_2(i);
      };
      Prefab_RuleCtrl.prototype.start = function() {};
      Prefab_RuleCtrl.prototype.setTypeIndex = function(index) {
        this.model.setTitleIndex(index);
        this.view.refreshContentVisible();
      };
      Prefab_RuleCtrl.prototype.onProcess = function(msg) {
        msg.process == SssDef_1.SssDef.process_peipai && null != this.model && void 0 != this.model && 0 != this.model.gameIndex ? this.finish() : msg.process == SssDef_1.SssDef.process_gamesettle && null != this.model && void 0 != this.model && 0 != this.model.gameIndex && this.finish();
      };
      Prefab_RuleCtrl.prototype.onStartGame = function(msg) {
        null != this.model && void 0 != this.model && 0 != this.model.gameIndex && this.finish();
      };
      Prefab_RuleCtrl.prototype.onDissolutionRoom = function(msg) {
        msg.result && null != this.model && void 0 != this.model && 0 != this.model.gameIndex && this.finish();
      };
      Prefab_RuleCtrl.prototype.onGameFinished = function(msg) {
        null != this.model && void 0 != this.model && 0 != this.model.gameIndex && this.finish();
      };
      Prefab_RuleCtrl.prototype.node_close_cb = function(node, event) {
        console.log("node_close_cb");
        this.finish();
      };
      Prefab_RuleCtrl.prototype.gameNameCb = function(index, node, event) {
        console.log("gameNameCb" + index);
        this.model.setGameIndex(index);
        this.view.updateTitles();
        this.view.refreshContentVisible();
      };
      Prefab_RuleCtrl.prototype.ruleTitleCb = function(index, node, event) {
        console.log("ruleTitleCb:" + index);
        this.model.setTitleIndex(index);
        this.view.refreshContentVisible();
      };
      Prefab_RuleCtrl.prototype.onDestroy = function() {};
      __decorate([ property(cc.Node) ], Prefab_RuleCtrl.prototype, "node_left_btns", void 0);
      __decorate([ property(cc.Node) ], Prefab_RuleCtrl.prototype, "node_top_btns", void 0);
      __decorate([ property(cc.WebView) ], Prefab_RuleCtrl.prototype, "web_down_content", void 0);
      __decorate([ property(cc.Node) ], Prefab_RuleCtrl.prototype, "node_close_btn", void 0);
      __decorate([ property(cc.Node) ], Prefab_RuleCtrl.prototype, "node_btn_gap", void 0);
      Prefab_RuleCtrl = __decorate([ ccclass ], Prefab_RuleCtrl);
      return Prefab_RuleCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_RuleCtrl;
    cc._RF.pop();
  }, {
    "../../../AppStart/AppMgrs/ServerMgr": "ServerMgr",
    "../../../Games/Sss/SssMgr/SssDef": "SssDef",
    "../../CfgMgrs/GameCateCfg": "GameCateCfg",
    "../../CfgMgrs/GameHelpCfg": "GameHelpCfg",
    "../../GameMgrs/BetMgr": "BetMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_SSSCreateCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d0123LSvO1CMq2zXT135M5a", "Prefab_SSSCreateCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var CreateRoomMgr_1 = require("../../GameMgrs/CreateRoomMgr");
    var BetMgr_1 = require("../../GameMgrs/BetMgr");
    var RoomCostCfg_1 = require("../../CfgMgrs/RoomCostCfg");
    var GameFreeMgr_1 = require("../../GameMgrs/GameFreeMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.roomRuleInfo = {};
        _this.gameid = null;
        _this.roomcfg = {};
        _this.poker = [];
        _this.pokerNumber = 1;
        _this.pokerColor = 0;
        _this.flowerCount = 4;
        _this.payTypeInfo = [];
        _this.extendRule = [];
        _this.startModel = [];
        _this.enterLimit = [];
        _this.isFree = null;
        _this.isFree = GameFreeMgr_1.default.getInstance().isFree(13);
        BetMgr_1.default.getInstance().setGameId(13);
        _this.gameid = BetMgr_1.default.getInstance().getGameId();
        console.log("gameId", _this.gameid);
        _this.roomRuleInfo = CreateRoomMgr_1.default.getInstance().getRoomRuleInfo(_this.gameid);
        _this.roomcfg = {
          v_roundcount: [ 10, 20, 30 ],
          v_seatcount: [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ],
          v_paytype: [ 0, 1 ],
          v_extendRule: [ 0, 1, 2, 3, 4 ],
          v_startModel: [ 0, 1, 1, 1 ],
          v_fullstart: [],
          v_midEnterLimit: [ 0, 1 ]
        };
        _this.poker = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61 ];
        _this.reSetFlowerCount();
        _this.payTypeInfo = [ "房主支付房费", "AA支付房费" ];
        _this.extendRule = [ "常规", "比花色", "多三张", "配花", "加一色" ];
        _this.startModel = [ "手动开桌", "人满开桌" ];
        _this.enterLimit = [ "中途可入", "中途禁入" ];
        _this.roomRuleInfo.v_startModel ? CreateRoomMgr_1.default.getInstance().setProperty(_this.roomRuleInfo.v_seatcount, "roomRuleInfo", _this.gameid, "v_fullstart") : CreateRoomMgr_1.default.getInstance().setProperty(2, "roomRuleInfo", _this.gameid, "v_fullstart");
        return _this;
      }
      Model.prototype.reSetBuyHorseData = function(index) {
        CreateRoomMgr_1.default.getInstance().setProperty(this.poker[index - 1], "roomRuleInfo", this.gameid, "v_buyHorseData");
      };
      Model.prototype.reSetFlowerCount = function() {
        this.flowerCount = this.roomRuleInfo.v_seatcount > 4 ? this.roomRuleInfo.v_seatcount : 4;
      };
      Model.prototype.getNowFlowerCount = function() {
        var sum = 0;
        for (var i = 0; i < 4; ++i) sum += this.roomRuleInfo.v_allotFlowerData[i];
        return sum;
      };
      Model.prototype.setAllotFlowerData = function(index, value) {
        this.roomRuleInfo.v_allotFlowerData[index] += parseInt(value);
      };
      Model.prototype.initAllotFlower = function(bool) {};
      Model.prototype.refreshFangfei = function() {
        var roomInfo = this.roomRuleInfo;
        var roomCost = RoomCostCfg_1.default.getInstance().getRoomCost("sss", 0, roomInfo.v_roundcount, roomInfo.v_seatcount, roomInfo.v_paytype);
        this.isFree && (roomCost = 0);
        CreateRoomMgr_1.default.getInstance().setProperty(roomCost, "roomRuleInfo", this.gameid, "v_fangfei");
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          playTypePanel: ctrl.playTypePanel,
          ruleBtnList: [],
          exGameBtnList: [],
          subBtnList: [],
          addBtnList: [],
          pokerResList: ctrl.pokerRes,
          roundSet: ctrl.roundSet,
          peopleSet: ctrl.peopleSet,
          payTypeSet: ctrl.payTypeSet,
          extendSet: ctrl.extendSet,
          startModelSet: ctrl.startModelSet,
          EnterLimitSet: ctrl.EnterLimitSet,
          roundSetMenu: ctrl.roundSetMenu,
          peopleSetMenu: ctrl.peopleSetMenu,
          payTypeSetMenu: ctrl.payTypeSetMenu,
          extendSetMenu: ctrl.extendSetMenu,
          startModelSetMenu: ctrl.startModelSetMenu,
          EnterLimitSetMenu: ctrl.EnterLimitSetMenu,
          payTypeLabel: ctrl.payTypeLabel,
          payCount: ctrl.payCount,
          selectCard: ctrl.selectCard,
          allotFlower: ctrl.allotFlower
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.ruleBtnList = this.ui.playTypePanel.getChildByName("ToggleGroup").children;
        this.ui.roundSet.getComponentInChildren(cc.Label).string = "局数:" + this.model.roomRuleInfo.v_roundcount + "局";
        this.ui.peopleSet.getComponentInChildren(cc.Label).string = this.model.roomRuleInfo.v_seatcount;
        this.ui.payTypeSet.getComponentInChildren(cc.Label).string = this.model.payTypeInfo[this.model.roomRuleInfo.v_paytype];
        this.ui.extendSet.getComponentInChildren(cc.Label).string = this.model.extendRule[this.model.roomRuleInfo.v_extendRule];
        this.ui.startModelSet.getComponentInChildren(cc.Label).string = this.model.startModel[this.model.roomRuleInfo.v_startModel];
        this.ui.EnterLimitSet.getComponentInChildren(cc.Label).string = this.model.enterLimit[this.model.roomRuleInfo.v_midEnterLimit];
        for (var i = 0; i < 4; ++i) {
          this.ui.subBtnList.push(this.ui.allotFlower.children[i].getChildByName("lessBtn"));
          this.ui.addBtnList.push(this.ui.allotFlower.children[i].getChildByName("plusBtn"));
        }
        this.changeActive(this.model.roomRuleInfo.v_extendRule);
        this.changeColor();
        this.refreshSelectCard(1);
        this.initPage();
        this.model.refreshFangfei();
        this.refreshCostLbl();
        this.ui.payTypeLabel.node.parent.active = !this.model.isFree;
      };
      View.prototype.changeActive = function(index) {
        var bool = 3 == index;
        this.model.initAllotFlower(bool);
        for (var i = 0; i < 4; i++) this.refreshFlowerLbl(i);
        this.ui.allotFlower.active = bool;
      };
      View.prototype.changeColor = function() {
        var items = this.ui.selectCard.children;
        var bool = 1 == this.model.roomRuleInfo.v_buyHorse;
        for (var i = 0; i < items.length; i++) items[i].getComponent(cc.Button).interactable = bool;
      };
      View.prototype.updatePayLabel = function(value) {
        switch (value) {
         case 0:
          this.ui.payTypeLabel.string = "首局结算时房主支付:";
          break;

         case 1:
          this.ui.payTypeLabel.string = "首局结算时所有玩家各支付:";
        }
      };
      View.prototype.arrIndex = function(value, arr) {
        for (var i = 0; i < arr.length; i++) if (arr[i] == value) return i.toString();
      };
      View.prototype.toggleCheck = function() {
        var roundIndex = this.model.roomRuleInfo.v_roundcount.toString();
        var playerIndex = this.model.roomRuleInfo.v_seatcount.toString();
        var round = this.arrIndex(roundIndex, this.model.roomcfg.v_roundcount);
        var player = this.arrIndex(playerIndex, this.model.roomcfg.v_seatcount);
        var pay = this.model.roomRuleInfo.v_paytype.toString();
        var model = this.model.roomRuleInfo.v_startModel.toString();
        var enter = this.model.roomRuleInfo.v_midEnterLimit.toString();
        var extend = this.model.roomRuleInfo.v_extendRule.toString();
        this.ui.peopleSet.getChildByName("menu").getChildByName("dropMenu").getChildByName(player).getComponent(cc.Toggle).check();
        this.ui.roundSet.getChildByName("menu").getChildByName("dropMenu").getChildByName(round).getComponent(cc.Toggle).check();
        this.ui.payTypeSet.getChildByName("menu").getChildByName("dropMenu").getChildByName(pay).getComponent(cc.Toggle).check();
        this.ui.startModelSetMenu.getChildByName("dropMenu").getChildByName(model).getComponent(cc.Toggle).check();
        this.ui.EnterLimitSetMenu.getChildByName("dropMenu").getChildByName(enter).getComponent(cc.Toggle).check();
        this.ui.extendSetMenu.getChildByName("dropMenu").getChildByName(extend).getComponent(cc.Toggle).check();
      };
      View.prototype.initPage = function() {
        this.toggleCheck();
        for (var i = 0; i < this.ui.ruleBtnList.length; ++i) {
          var value = this.model.roomRuleInfo[this.ui.ruleBtnList[i].name];
          value && this.ui.ruleBtnList[i].getComponent(cc.Toggle).check();
        }
      };
      View.prototype.refreshSelectCard = function(index) {
        var key = index + 3;
        this.ui.selectCard.getChildByName("card").getComponent(cc.Sprite).spriteFrame = this.ui.pokerResList.getSpriteFrames()[key];
        this.setCardSize();
      };
      View.prototype.setCardSize = function() {
        this.ui.selectCard.getChildByName("card").width = 50;
        this.ui.selectCard.getChildByName("card").height = 70;
      };
      View.prototype.refreshFlowerLbl = function(index) {
        this.ui.allotFlower.children[index].getChildByName("count").getComponent(cc.Label).string = this.model.roomRuleInfo.v_allotFlowerData[index];
      };
      View.prototype.refreshCostLbl = function() {
        this.ui.payCount.string = this.model.roomRuleInfo.v_fangfei;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_SSSCreateCtrl = function(_super) {
      __extends(Prefab_SSSCreateCtrl, _super);
      function Prefab_SSSCreateCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.roundSet = null;
        _this.peopleSet = null;
        _this.payTypeSet = null;
        _this.extendSet = null;
        _this.startModelSet = null;
        _this.EnterLimitSet = null;
        _this.roundSetMenu = null;
        _this.peopleSetMenu = null;
        _this.payTypeSetMenu = null;
        _this.extendSetMenu = null;
        _this.startModelSetMenu = null;
        _this.EnterLimitSetMenu = null;
        _this.playTypePanel = null;
        _this.selectCard = null;
        _this.allotFlower = null;
        _this.payTypeLabel = null;
        _this.payCount = null;
        _this.pokerRes = null;
        return _this;
      }
      Prefab_SSSCreateCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_SSSCreateCtrl.prototype.defineNetEvents = function() {};
      Prefab_SSSCreateCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_SSSCreateCtrl.prototype.connectUi = function() {
        var _this = this;
        var Btn = [ this.view.ui.roundSet, this.view.ui.peopleSet, this.view.ui.payTypeSet, this.view.ui.extendSet, this.view.ui.startModelSet, this.view.ui.EnterLimitSet ];
        for (var i = 0; i < Btn.length; i++) this.connect(G_UiType.text, Btn[i], this.buttonCB, "下拉菜单按钮");
        var roundItems = this.roundSetMenu.getChildByName("dropMenu").children;
        for (var i = 0; i < roundItems.length; i++) this.connect(G_UiType.button, roundItems[i], this.roundMenuCB, "切换局数选择选项");
        var peopleItems = this.peopleSetMenu.getChildByName("dropMenu").children;
        for (var i = 0; i < peopleItems.length; i++) this.connect(G_UiType.button, peopleItems[i], this.dropMenuCB, "切换人数选择选项");
        var payItems = this.payTypeSetMenu.getChildByName("dropMenu").children;
        for (var i = 0; i < payItems.length; i++) this.connect(G_UiType.button, payItems[i], this.dropMenuCB, "切换支付选择选项");
        var extendItems = this.extendSetMenu.getChildByName("dropMenu").children;
        for (var i = 0; i < extendItems.length; i++) this.connect(G_UiType.button, extendItems[i], this.dropMenuCB, "切换拓展规则选项");
        var startItems = this.startModelSetMenu.getChildByName("dropMenu").children;
        for (var i = 0; i < startItems.length; i++) this.connect(G_UiType.button, startItems[i], this.dropMenuCB, "切换开局模式选项");
        var enterItems = this.EnterLimitSetMenu.getChildByName("dropMenu").children;
        for (var i = 0; i < enterItems.length; i++) this.connect(G_UiType.button, enterItems[i], this.dropMenuCB, "切换中途加入选项");
        var _loop_1 = function(i) {
          this_1.connect(G_UiType.toggle, this_1.ui.ruleBtnList[i], function() {
            _this.checkToggleCB(i);
          }, "切换选择玩法");
        };
        var this_1 = this;
        for (var i = 0; i < this.ui.ruleBtnList.length; ++i) _loop_1(i);
        this.connect(G_UiType.button, this.ui.selectCard.getChildByName("leftBtn"), function() {
          _this.changePokerNumber("sub");
        }, "切换减小点数");
        this.connect(G_UiType.button, this.ui.selectCard.getChildByName("rightBtn"), function() {
          _this.changePokerNumber("add");
        }, "切换增加点数");
        this.connect(G_UiType.button, this.ui.selectCard.getChildByName("changeColor"), this.changePokerColor, "切换换色");
        var _loop_2 = function(i) {
          this_2.connect(G_UiType.button, this_2.ui.subBtnList[i], function() {
            _this.allotFlowerBtnCB(i, "sub");
          }, "切换减少配花数量");
          this_2.connect(G_UiType.button, this_2.ui.addBtnList[i], function() {
            _this.allotFlowerBtnCB(i, "add");
          }, "切换增加配花数量");
        };
        var this_2 = this;
        for (var i = 0; i < 4; ++i) _loop_2(i);
        this.node.on(cc.Node.EventType.TOUCH_START, this.closeDropMenu, this);
      };
      Prefab_SSSCreateCtrl.prototype.closeDropMenu = function() {
        this.view.ui.roundSetMenu.active = false;
        this.view.ui.peopleSetMenu.active = false;
        this.view.ui.payTypeSetMenu.active = false;
        this.view.ui.extendSetMenu.active = false;
        this.view.ui.startModelSetMenu.active = false;
        this.view.ui.EnterLimitSetMenu.active = false;
      };
      Prefab_SSSCreateCtrl.prototype.buttonCB = function(event) {
        switch (event.name) {
         case "v_roundcount":
          this.closeMenu(this.view.ui.roundSetMenu);
          break;

         case "v_seatcount":
          this.closeMenu(this.view.ui.peopleSetMenu);
          break;

         case "v_paytype":
          this.closeMenu(this.view.ui.payTypeSetMenu);
          break;

         case "v_extendRule":
          this.closeMenu(this.view.ui.extendSetMenu);
          break;

         case "v_startModel":
          this.closeMenu(this.view.ui.startModelSetMenu);
          break;

         case "v_midEnterLimit":
          this.closeMenu(this.view.ui.EnterLimitSetMenu);
        }
        this.view.toggleCheck();
      };
      Prefab_SSSCreateCtrl.prototype.closeMenu = function(node) {
        if (node.active) this.closeDropMenu(); else {
          this.closeDropMenu();
          node.active = true;
        }
      };
      Prefab_SSSCreateCtrl.prototype.roundMenuCB = function(event) {
        var value = event.currentTarget.parent.parent.parent.name;
        var index = Number(event.currentTarget.name);
        this.view.ui.roundSet.getComponentInChildren(cc.Label).string = "局数:" + this.model.roomcfg.v_roundcount[index] + "局";
        CreateRoomMgr_1.default.getInstance().setProperty(this.model.roomcfg.v_roundcount[index], "roomRuleInfo", this.model.gameid, "v_roundcount");
        console.log(this.model.roomRuleInfo.v_roundcount);
        console.log("开房数据", this.model.roomRuleInfo);
        this.model.refreshFangfei();
        this.view.refreshCostLbl();
        this.closeDropMenu();
      };
      Prefab_SSSCreateCtrl.prototype.dropMenuCB = function(event) {
        var value = event.currentTarget.parent.parent.parent.name;
        var index = Number(event.currentTarget.name);
        var info, lab;
        switch (value) {
         case "v_seatcount":
          info = this.model.roomcfg.v_seatcount;
          lab = this.view.ui.peopleSet.getComponentInChildren(cc.Label);
          break;

         case "v_paytype":
          info = this.model.payTypeInfo;
          lab = this.view.ui.payTypeSet.getComponentInChildren(cc.Label);
          this.view.updatePayLabel(index);
          break;

         case "v_extendRule":
          info = this.model.extendRule;
          lab = this.view.ui.extendSet.getComponentInChildren(cc.Label);
          this.view.changeActive(index);
          break;

         case "v_startModel":
          info = this.model.startModel;
          lab = this.view.ui.startModelSet.getComponentInChildren(cc.Label);
          break;

         case "v_midEnterLimit":
          info = this.model.enterLimit;
          lab = this.view.ui.EnterLimitSet.getComponentInChildren(cc.Label);
        }
        this.model.roomRuleInfo[value] = this.model.roomcfg[value][index];
        this.model.reSetFlowerCount();
        CreateRoomMgr_1.default.getInstance().setProperty(this.model.roomRuleInfo[value], "roomRuleInfo", this.model.gameid, value);
        this.model.roomRuleInfo.v_startModel ? CreateRoomMgr_1.default.getInstance().setProperty(this.model.roomRuleInfo.v_seatcount, "roomRuleInfo", this.model.gameid, "v_fullstart") : CreateRoomMgr_1.default.getInstance().setProperty(0, "roomRuleInfo", this.model.gameid, "v_fullstart");
        lab.string = info[index];
        console.log("开房数据", this.model.roomRuleInfo);
        this.model.refreshFangfei();
        this.view.refreshCostLbl();
        this.closeDropMenu();
      };
      Prefab_SSSCreateCtrl.prototype.radioToggleCB = function(index, toggleName) {
        this.closeDropMenu();
        var value = this.model.roomcfg[toggleName][index];
        CreateRoomMgr_1.default.getInstance().setProperty(value, "roomRuleInfo", this.model.gameid, toggleName);
        this.view.changeActive("allotFlower", 3 == value);
        console.log(toggleName, value);
      };
      Prefab_SSSCreateCtrl.prototype.checkToggleCB = function(index) {
        var toggleName;
        this.closeDropMenu();
        switch (index) {
         case 0:
          toggleName = "v_crazyField";
          break;

         case 1:
          toggleName = "v_jokerCard";
          break;

         case 2:
          toggleName = "v_buyHorse";
        }
        this.ui.ruleBtnList[index].getComponent(cc.Toggle).isChecked ? CreateRoomMgr_1.default.getInstance().setProperty(1, "roomRuleInfo", this.model.gameid, toggleName) : CreateRoomMgr_1.default.getInstance().setProperty(0, "roomRuleInfo", this.model.gameid, toggleName);
        "v_buyHorse" == toggleName && this.view.changeColor();
        console.log(this.model.roomRuleInfo);
      };
      Prefab_SSSCreateCtrl.prototype.changePokerNumber = function(type) {
        this.closeDropMenu();
        if ("sub" == type) {
          this.model.pokerNumber--;
          this.model.pokerNumber = this.model.pokerNumber < 1 ? 13 : this.model.pokerNumber;
        } else if ("add" == type) {
          this.model.pokerNumber++;
          this.model.pokerNumber = this.model.pokerNumber > 13 ? 1 : this.model.pokerNumber;
        }
        this.model.reSetBuyHorseData(this.model.pokerNumber + 13 * this.model.pokerColor);
        this.view.refreshSelectCard(this.model.pokerNumber + 13 * this.model.pokerColor);
        console.log(this.model.roomRuleInfo.v_buyHorseData);
      };
      Prefab_SSSCreateCtrl.prototype.changePokerColor = function() {
        this.model.pokerColor++;
        this.model.pokerColor = this.model.pokerColor > 3 ? 0 : this.model.pokerColor;
        this.haveAllotPokerColor();
      };
      Prefab_SSSCreateCtrl.prototype.haveAllotPokerColor = function() {
        var count = 0;
        for (var i = 0; i < this.model.roomRuleInfo.v_allotFlowerData.length; i++) 0 == this.model.roomRuleInfo.v_allotFlowerData[i] && count++;
        if (count < 4 && 0 == this.model.roomRuleInfo.v_allotFlowerData[this.model.pokerColor]) {
          this.changePokerColor();
          return;
        }
        this.model.reSetBuyHorseData(this.model.pokerNumber + 13 * this.model.pokerColor);
        this.view.refreshSelectCard(this.model.pokerNumber + 13 * this.model.pokerColor);
        console.log(this.model.roomRuleInfo.v_buyHorseData);
      };
      Prefab_SSSCreateCtrl.prototype.allotFlowerBtnCB = function(index, type) {
        this.closeDropMenu();
        "sub" == type ? this.model.roomRuleInfo.v_allotFlowerData[index] > 0 && this.model.setAllotFlowerData(index, -1) : "add" == type && this.model.getNowFlowerCount() < this.model.flowerCount && this.model.setAllotFlowerData(index, 1);
        var count = 0;
        for (var i = 0; i < this.model.roomRuleInfo.v_allotFlowerData.length; i++) 0 == this.model.roomRuleInfo.v_allotFlowerData[i] && count++;
        if (count < 4) {
          this.haveAllotPokerColor();
          console.log(this.model.roomRuleInfo.v_allotFlowerData);
        }
        this.view.refreshFlowerLbl(index);
      };
      __decorate([ property({
        tooltip: "局数设置下拉按钮",
        type: cc.Node
      }) ], Prefab_SSSCreateCtrl.prototype, "roundSet", void 0);
      __decorate([ property({
        tooltip: "人数设置下拉按钮",
        type: cc.Node
      }) ], Prefab_SSSCreateCtrl.prototype, "peopleSet", void 0);
      __decorate([ property({
        tooltip: "支付设置下拉按钮",
        type: cc.Node
      }) ], Prefab_SSSCreateCtrl.prototype, "payTypeSet", void 0);
      __decorate([ property({
        tooltip: "拓展选项下拉按钮",
        type: cc.Node
      }) ], Prefab_SSSCreateCtrl.prototype, "extendSet", void 0);
      __decorate([ property({
        tooltip: "人满开桌下拉按钮",
        type: cc.Node
      }) ], Prefab_SSSCreateCtrl.prototype, "startModelSet", void 0);
      __decorate([ property({
        tooltip: "中途禁入下拉按钮",
        type: cc.Node
      }) ], Prefab_SSSCreateCtrl.prototype, "EnterLimitSet", void 0);
      __decorate([ property({
        tooltip: "局数设置下拉菜单",
        type: cc.Node
      }) ], Prefab_SSSCreateCtrl.prototype, "roundSetMenu", void 0);
      __decorate([ property({
        tooltip: "人数设置下拉菜单",
        type: cc.Node
      }) ], Prefab_SSSCreateCtrl.prototype, "peopleSetMenu", void 0);
      __decorate([ property({
        tooltip: "支付设置下拉菜单",
        type: cc.Node
      }) ], Prefab_SSSCreateCtrl.prototype, "payTypeSetMenu", void 0);
      __decorate([ property({
        tooltip: "拓展选项下拉菜单",
        type: cc.Node
      }) ], Prefab_SSSCreateCtrl.prototype, "extendSetMenu", void 0);
      __decorate([ property({
        tooltip: "人满开桌下拉菜单",
        type: cc.Node
      }) ], Prefab_SSSCreateCtrl.prototype, "startModelSetMenu", void 0);
      __decorate([ property({
        tooltip: "中途禁入下拉菜单",
        type: cc.Node
      }) ], Prefab_SSSCreateCtrl.prototype, "EnterLimitSetMenu", void 0);
      __decorate([ property({
        tooltip: "玩法容器",
        type: cc.Node
      }) ], Prefab_SSSCreateCtrl.prototype, "playTypePanel", void 0);
      __decorate([ property({
        tooltip: "更换花色",
        type: cc.Node
      }) ], Prefab_SSSCreateCtrl.prototype, "selectCard", void 0);
      __decorate([ property({
        tooltip: "配花节点",
        type: cc.Node
      }) ], Prefab_SSSCreateCtrl.prototype, "allotFlower", void 0);
      __decorate([ property({
        tooltip: "支付方式显示",
        type: cc.Label
      }) ], Prefab_SSSCreateCtrl.prototype, "payTypeLabel", void 0);
      __decorate([ property({
        tooltip: "支付金额",
        type: cc.Label
      }) ], Prefab_SSSCreateCtrl.prototype, "payCount", void 0);
      __decorate([ property({
        tooltip: "扑克牌图片资源",
        type: cc.SpriteAtlas
      }) ], Prefab_SSSCreateCtrl.prototype, "pokerRes", void 0);
      Prefab_SSSCreateCtrl = __decorate([ ccclass ], Prefab_SSSCreateCtrl);
      return Prefab_SSSCreateCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_SSSCreateCtrl;
    cc._RF.pop();
  }, {
    "../../CfgMgrs/RoomCostCfg": "RoomCostCfg",
    "../../GameMgrs/BetMgr": "BetMgr",
    "../../GameMgrs/CreateRoomMgr": "CreateRoomMgr",
    "../../GameMgrs/GameFreeMgr": "GameFreeMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_SignInCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "02070V5z5ZGw4IBrPYsrWWd", "Prefab_SignInCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.GiftData = [ {
          date: "一",
          count: 200,
          get: true
        }, {
          date: "二",
          count: 500,
          get: false
        }, {
          date: "三",
          count: 1200,
          get: false
        }, {
          date: "四",
          count: 1500,
          get: false
        }, {
          date: "五",
          count: 1700,
          get: false
        }, {
          date: "六",
          count: 2e3,
          get: false
        }, {
          date: "七",
          count: 3e3,
          get: false
        } ];
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          layer_Gift: null,
          layer_Gift1: null,
          prefab_Gift: null,
          btn_GetGift: null,
          btn_StartGame: null
        };
        _this.node = null;
        _this.model = null;
        _this.node = ctrl.node;
        _this.model = model;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.layer_Gift = ctrl.GiftLayer;
        this.ui.layer_Gift1 = ctrl.GiftLayer1;
        this.ui.prefab_Gift = ctrl.PrefabGift;
        this.ui.btn_GetGift = ctrl.GetGiftBtn;
        this.ui.btn_StartGame = ctrl.StartGameBtn;
        for (var i = 0; i < this.model.GiftData.length; i++) {
          var layer = this.ui.layer_Gift;
          i > 3 && (layer = this.ui.layer_Gift1);
          var node = cc.instantiate(this.ui.prefab_Gift);
          layer.addChild(node);
          node.getChildByName("label_Date").getComponent(cc.Label).string = "第" + this.model.GiftData[i].date + "天";
          node.getChildByName("label_Diamond").getComponent(cc.Label).string = this.model.GiftData[i].count;
          if (true == this.model.GiftData[i].get) {
            node.getChildByName("img_Getted").active = true;
            this.updateGift(i);
          } else node.getChildByName("img_Getted").active = false;
        }
        this.ui.btn_StartGame.active = false;
      };
      View.prototype.updateGift = function(id) {
        id > 3;
        var nodes = this.ui.layer_Gift.children;
        for (var i in nodes) {
          var childs = nodes[i].children;
          for (var j in childs) childs[j].color = cc.Color.GRAY;
        }
      };
      return View;
    }(BaseView_1.default);
    var Prefab_SignInCtrl = function(_super) {
      __extends(Prefab_SignInCtrl, _super);
      function Prefab_SignInCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.CloseBtn = null;
        _this.GetGiftBtn = null;
        _this.StartGameBtn = null;
        _this.GiftLayer = null;
        _this.GiftLayer1 = null;
        _this.PrefabGift = null;
        return _this;
      }
      Prefab_SignInCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_SignInCtrl.prototype.defineNetEvents = function() {};
      Prefab_SignInCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_SignInCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.CloseBtn, this.CloseBtn_cb.bind(this), "关闭");
        this.connect(G_UiType.image, this.GetGiftBtn, this.GetGift_cb.bind(this), "领取");
        this.connect(G_UiType.image, this.StartGameBtn, this.StartGame_cb.bind(this), "开始游戏");
      };
      Prefab_SignInCtrl.prototype.start = function() {};
      Prefab_SignInCtrl.prototype.CloseBtn_cb = function() {
        this.finish();
      };
      Prefab_SignInCtrl.prototype.GetGift_cb = function() {};
      Prefab_SignInCtrl.prototype.StartGame_cb = function() {
        this.finish();
      };
      __decorate([ property({
        tooltip: "关闭按钮",
        type: cc.Node
      }) ], Prefab_SignInCtrl.prototype, "CloseBtn", void 0);
      __decorate([ property({
        tooltip: "领取签到礼物",
        type: cc.Node
      }) ], Prefab_SignInCtrl.prototype, "GetGiftBtn", void 0);
      __decorate([ property({
        tooltip: "开始游戏",
        type: cc.Node
      }) ], Prefab_SignInCtrl.prototype, "StartGameBtn", void 0);
      __decorate([ property({
        tooltip: "领取的第一层Layer1",
        type: cc.Node
      }) ], Prefab_SignInCtrl.prototype, "GiftLayer", void 0);
      __decorate([ property({
        tooltip: "领取的第二层Layer2",
        type: cc.Node
      }) ], Prefab_SignInCtrl.prototype, "GiftLayer1", void 0);
      __decorate([ property({
        tooltip: "奖励预制资源",
        type: cc.Prefab
      }) ], Prefab_SignInCtrl.prototype, "PrefabGift", void 0);
      Prefab_SignInCtrl = __decorate([ ccclass ], Prefab_SignInCtrl);
      return Prefab_SignInCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_SignInCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_SssSetCardsCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "251c211WNhFuZBtk/7m5BD4", "Prefab_SssSetCardsCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var AudioMgr_1 = require("../../../Plat/GameMgrs/AudioMgr");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var SssLogic_1 = require("../SssMgr/SssLogic");
    var SssDef_1 = require("../SssMgr/SssDef");
    var SssAudio_1 = require("../SssMgr/SssAudio");
    var SssCards_1 = require("../SssMgr/SssCards");
    var SssLib_1 = require("../SssMgr/SssLib");
    var LocalStorage_1 = require("../../../Plat/Libs/LocalStorage");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var choosePos = 90;
    var startPos = 76;
    var AUTO_CUSTOM = 1;
    var MANUL_CUSTOM = 2;
    var cardTypeResString = {
      bFiveSame: "wutong",
      bStraightFlush: "tonghuashun",
      bFourSame: "tiezi",
      bGourd: "hulu",
      bFlush: "tonghua",
      bStraight: "shunzi",
      bThreeSame: "santiao",
      bTwoPare: "liangdui",
      bOnePare: "duizi"
    };
    var cardTypeString = {
      wulong: "乌龙",
      wutong: "五同",
      tonghuashun: "同花顺",
      tiezi: "铁支",
      hulu: "葫芦",
      tonghua: "同花",
      shunzi: "顺子",
      santiao: "三条",
      liangdui: "两对",
      duizi: "对子"
    };
    var dunType = {
      upPier: 0,
      midPier: 1,
      downPier: 2
    };
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.sssCard = null;
        _this.seatid = null;
        _this.uid = null;
        _this.logicseatid = null;
        _this.userinfo = null;
        _this.hucount = 0;
        _this.player = null;
        _this.isZhuangJia = false;
        _this.isMaster = false;
        _this.arrChooseCard = [];
        _this.handCards = [];
        _this.upPier = [];
        _this.midPier = [];
        _this.downPier = [];
        _this.selArr = [ [], [], [] ];
        _this.count = 0;
        _this.bMoveChooseHand = false;
        _this.bMoveSel = [ false, false, false ];
        _this.noMoveEnd = [ false, false, false ];
        _this.moveTempArr = [ [], [], [] ];
        _this.pierTypeArr = [ {
          key: "bFiveSame",
          value: 0
        }, {
          key: "bStraightFlush",
          value: 0
        }, {
          key: "bFourSame",
          value: 0
        }, {
          key: "bGourd",
          value: 0
        }, {
          key: "bFlush",
          value: 0
        }, {
          key: "bStraight",
          value: 0
        }, {
          key: "bThreeSame",
          value: 0
        }, {
          key: "bTwoPare",
          value: 0
        }, {
          key: "bOnePare",
          value: 0
        } ];
        _this.typeInfo = null;
        _this.onePareCC = 0;
        _this.twoPareCC = 0;
        _this.threeSameCC = 0;
        _this.straightCC = 0;
        _this.flushCC = 0;
        _this.groupCC = 0;
        _this.fourSameCC = 0;
        _this.straightFlushCC = 0;
        _this.fiveSameCC = 0;
        _this.bChangePierData = false;
        _this.timesLab = 0;
        _this.sssAudio = RoomMgr_1.default.getInstance().getAudio();
        _this.maCard = -1;
        _this.chooseTempArr = [];
        _this.controlCustom = null;
        _this.sssCard = new SssCards_1.default();
        _this.topTenCardGroup = [];
        _this.timesLab = 80;
        _this.handCards = SssLogic_1.default.getInstance().getMyHandCard();
        _this.controlCustom = LocalStorage_1.default.getInstance().getSssControlCustom();
        _this.controlCustom = _this.controlCustom ? _this.controlCustom : AUTO_CUSTOM;
        console.log("转换前的数据", _this.handCards);
        _this.curSpecialType = SssLogic_1.default.getInstance().getCurSpecialType();
        _this.specialCard = SssLogic_1.default.getInstance().getCurSpecialCard();
        var roomValue = SssLogic_1.default.getInstance().getRoomValue();
        if (1 == roomValue.v_buyHorse) {
          _this.maCard = SssLogic_1.default.getInstance().getMaCard();
          _this.maCard = _this.maCard < 16 ? "0x0" + _this.maCard.toString(16) : "0x" + _this.maCard.toString(16);
        }
        console.log("this.maCard", _this.maCard);
        _this.sssCard.SortCardList(_this.handCards, 13, 0);
        _this.changeHandCards();
        console.log("转换后的数据", _this.handCards);
        _this.sssCard.SortCardList(_this.handCards, 13, 0);
        _this.typeInfo = _this.sssCard.GetType(_this.handCards, _this.handCards.length);
        return _this;
      }
      Model.prototype.allClickCountZero = function() {
        this.onePareCC = 0;
        this.twoPareCC = 0;
        this.threeSameCC = 0;
        this.straightCC = 0;
        this.flushCC = 0;
        this.groupCC = 0;
        this.fourSameCC = 0;
        this.straightFlushCC = 0;
        this.fiveSameCC = 0;
      };
      Model.prototype.getHandCards = function() {
        return this.handCards;
      };
      Model.prototype.changeHandCards = function() {
        for (var i = 0; i < this.handCards.length; i++) {
          if ("string" == typeof this.handCards[i]) continue;
          this.handCards[i] = this.handCards[i] < 16 ? "0x0" + this.handCards[i].toString(16) : "0x" + this.handCards[i].toString(16);
        }
      };
      Model.prototype.clearHandCards = function() {
        this.handCards = [];
      };
      Model.prototype.removeHandCards = function(cardDatas) {
        for (var i = 0; i < this.handCards.length; i++) if (this.handCards[i] == cardDatas) {
          this.handCards.remove(i);
          break;
        }
      };
      Model.prototype.getChooseCards = function() {
        return this.arrChooseCard;
      };
      Model.prototype.addToPier = function(arrCardData, count, dataName, index) {
        var pierCount = this[dataName].length;
        var startIndex = 0;
        startIndex = pierCount < index ? pierCount : index;
        var addCount = startIndex + arrCardData.length;
        if (addCount > count) {
          for (var i = count; i < addCount; i++) this.handCards.push(arrCardData[i - startIndex]);
          addCount = count;
        }
        for (var i = startIndex; i < addCount; i++) if (this[dataName][i]) {
          this.handCards.push(this[dataName][i]);
          this[dataName][i] = arrCardData[i - startIndex];
        } else arrCardData[i - startIndex] && this[dataName].push(arrCardData[i - startIndex]);
      };
      Model.prototype.addChangeDT = function(type, value) {
        console.log("addChangeDT");
        this.selArr[type].push(value);
        var count = 0;
        for (var i = 0; i < this.selArr.length; i++) this.selArr[i].length > 0 && count++;
        if (count > 2) {
          console.log("清理了selArr");
          this.selArr = [ [], [], [] ];
          this.moveTempArr = [ [], [], [] ];
          return;
        }
        console.log("selArr" + type, this.selArr[type]);
        for (var i = 0; i < this.selArr.length; i++) {
          if (type == i) continue;
          if (this.selArr[i].length == this.selArr[type].length) {
            this.bChangePierData = true;
            this.changeDt(type, i);
          }
        }
      };
      Model.prototype.changeDt = function(changeToType, changeType) {
        console.log("changeDt");
        var typeName = [ "upPier", "midPier", "downPier" ];
        var changeData = [];
        for (var j = 0; j < this.selArr[changeType].length; j++) for (var i = 0; i < this[typeName[changeType]].length; i++) {
          changeData.push(this[typeName[changeType]][i]);
          this.selArr[changeType][j] == i && (this[typeName[changeType]][i] = this[typeName[changeToType]][this.selArr[changeToType][j]]);
        }
        console.log("" + typeName[changeType], this[typeName[changeType]]);
        for (var j = 0; j < this.selArr[changeToType].length; j++) for (var i = 0; i < this[typeName[changeToType]].length; i++) this.selArr[changeToType][j] == i && (this[typeName[changeToType]][i] = changeData[this.selArr[changeType][j]]);
        console.log("" + typeName[changeToType], this[typeName[changeToType]]);
        this.selArr = [ [], [], [] ];
        this.moveTempArr = [ [], [], [] ];
        this.clearTempData();
      };
      Model.prototype.getPierData = function(type) {
        switch (type) {
         case dunType.upPier:
          return this.upPier;

         case dunType.midPier:
          return this.midPier;

         case dunType.downPier:
          return this.downPier;
        }
      };
      Model.prototype.clearPierData = function(type) {
        switch (type) {
         case dunType.upPier:
          this.clearPierToHand(this.upPier);
          this.upPier = [];
          break;

         case dunType.midPier:
          this.clearPierToHand(this.midPier);
          this.midPier = [];
          break;

         case dunType.downPier:
          this.clearPierToHand(this.downPier);
          this.downPier = [];
        }
      };
      Model.prototype.clearTempData = function() {
        this.moveTempArr = [ [], [], [] ];
      };
      Model.prototype.clearPierToHand = function(pierData) {
        for (var i = 0; i < pierData.length; i++) this.handCards.push(pierData[i]);
      };
      Model.prototype.addChooseCard = function(cardValue) {
        this.arrChooseCard.push(cardValue);
      };
      Model.prototype.removeChooseCard = function(value) {
        for (var i = 0; i < this.arrChooseCard.length; i++) this.arrChooseCard[i] == value && this.arrChooseCard.remove(i);
      };
      Model.prototype.clearChooseCard = function() {
        this.arrChooseCard = [];
      };
      Model.prototype.getTypeByPierValue = function(data) {
        switch (data) {
         case SssDef_1.SssDef.CT_SINGLE:
          return "wulong";

         case SssDef_1.SssDef.CT_ONE_DOUBLE:
          return "duizi";

         case SssDef_1.SssDef.CT_FIVE_TWO_DOUBLE:
          return "liangdui";

         case SssDef_1.SssDef.CT_THREE:
          return "santiao";

         case SssDef_1.SssDef.CT_FIVE_MIXED_FLUSH_NO_A:
         case SssDef_1.SssDef.CT_FIVE_MIXED_FLUSH_FIRST_A:
         case SssDef_1.SssDef.CT_FIVE_MIXED_FLUSH_BACK_A:
          return "shunzi";

         case SssDef_1.SssDef.CT_FIVE_FLUSH:
          return "tonghua";

         case SssDef_1.SssDef.CT_FIVE_THREE_DEOUBLE:
          return "hulu";

         case SssDef_1.SssDef.CT_FIVE_FOUR_ONE:
          return "tiezi";

         case SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_NO_A:
         case SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_FIRST_A:
         case SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_BACK_A:
          return "tonghuashun";

         case SssDef_1.SssDef.CT_FIVE_BOMB:
          return "wutong";
        }
      };
      Model.prototype.getTypeFromPierTypeArr = function(data) {
        for (var i = 0; i < this.pierTypeArr.length; i++) this.pierTypeArr[i].value = data[this.pierTypeArr[i].key];
        for (var i = 0; i < this.pierTypeArr.length; i++) if (1 == this.pierTypeArr[i].value) return this.pierTypeArr[i].key;
      };
      Model.prototype.clearPierTypeArr = function() {
        for (var i = 0; i < this.pierTypeArr.length; i++) this.pierTypeArr[i].value = 0;
      };
      Model.prototype.isAscending = function() {
        console.log("first compare", this.sssCard.CompareCard(this.upPier, this.midPier, 3, 5, false));
        console.log("second compare", this.sssCard.CompareCard(this.midPier, this.downPier, 5, 5, false));
        if (this.sssCard.CompareCard(this.upPier, this.midPier, 3, 5, false) && this.sssCard.CompareCard(this.midPier, this.downPier, 5, 5, false)) return false;
        for (var i = 0; i < 5; ++i) if (this.sssCard.GetCardLogicValue(this.midPier[i]) != this.sssCard.GetCardLogicValue(this.downPier[i]) && this.sssCard.GetCardColor(this.midPier[i]) != this.sssCard.GetCardColor(this.downPier[i])) return true;
        return false;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_panel: null,
          node_remomentSet: null,
          node_myCards: null,
          node_cardRemind: null,
          node_replace: null,
          node_upPier: null,
          node_midPier: null,
          node_downPier: null,
          pokerAtlas: null,
          autoBtn: null,
          ManualBtn: null,
          autoBtnPanel: null,
          ManualBtnPanel: null,
          confirmBtn: null,
          pierCardType: null,
          btnDuizi: null,
          btnLiangDui: null,
          btnSanTiao: null,
          btnShunZi: null,
          btnTonghua: null,
          btnHulu: null,
          btnTiezhi: null,
          btnTonghuashun: null,
          btnWutong: null,
          labIsAscending: null,
          specialRemindPanel: null,
          btnUseSpecial: null,
          btnCancelSpecial: null,
          btnSpecial: null,
          revokeBtn: null,
          labClockTime: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_panel = ctrl.node_panel;
        this.ui.node_remomentSet = ctrl.node_remomentSet;
        this.ui.node_myCards = ctrl.node_myCards;
        this.ui.node_cardRemind = ctrl.node_cardRemind;
        this.ui.node_replace = ctrl.node_replace;
        this.ui.node_upPier = ctrl.node_upPier;
        this.ui.node_midPier = ctrl.node_midPier;
        this.ui.node_downPier = ctrl.node_downPier;
        this.ui.pokerAtlas = ctrl.pokerAtlas;
        this.ui.autoBtn = ctrl.autoBtn;
        this.ui.manualBtn = ctrl.manualBtn;
        this.ui.autoBtnPanel = ctrl.autoBtnPanel;
        this.ui.manualBtnPanel = ctrl.manualBtnPanel;
        this.ui.confirmBtn = ctrl.confirmBtn;
        this.ui.pierCardType = ctrl.pierCardType;
        this.ui.btnDuizi = ctrl.btnDuizi;
        this.ui.btnLiangDui = ctrl.btnLiangDui;
        this.ui.btnSanTiao = ctrl.btnSanTiao;
        this.ui.btnShunZi = ctrl.btnShunZi;
        this.ui.btnTonghua = ctrl.btnTonghua;
        this.ui.btnHulu = ctrl.btnHulu;
        this.ui.btnTiezhi = ctrl.btnTiezhi;
        this.ui.btnTonghuashun = ctrl.btnTonghuashun;
        this.ui.btnWutong = ctrl.btnWutong;
        this.ui.labIsAscending = ctrl.labIsAscending;
        this.ui.specialRemindPanel = ctrl.specialRemindPanel;
        this.ui.btnUseSpecial = ctrl.btnUseSpecial;
        this.ui.btnCancelSpecial = ctrl.btnCancelSpecial;
        this.ui.btnSpecial = ctrl.btnSpecial;
        this.ui.revokeBtn = ctrl.revokeBtn;
        this.ui.labClockTime = ctrl.labClockTime;
        this.ui.autoBtn.active = false;
        this.ui.manualBtn.active = false;
        this.ui.node_remomentSet.active = false;
        this.initHandCard();
      };
      View.prototype.isSpecialType = function() {
        this.ui.specialRemindPanel.active = this.model.curSpecialType > 0;
        this.ui.btnSpecial.active = this.model.curSpecialType > 0;
        var labNode = this.ui.btnSpecial.getChildByName("labBtnType");
        var imgType = this.ui.specialRemindPanel.getChildByName("imgType").getComponent(cc.Sprite);
        var imagePath = "";
        switch (this.model.curSpecialType) {
         case SssDef_1.SssDef.CT_THREE_STRAIGHT:
          labNode.getComponent(cc.Label).string = "三顺子";
          imagePath = "Games/Sss/img_sanshunzi";
          break;

         case SssDef_1.SssDef.CT_THREE_FLUSH:
          labNode.getComponent(cc.Label).string = "三同花";
          imagePath = "Games/Sss/img_santonghua";
          break;

         case SssDef_1.SssDef.CT_SIXPAIR:
          labNode.getComponent(cc.Label).string = "六对半";
          imagePath = "Games/Sss/img_liudui";
          break;

         case SssDef_1.SssDef.CT_FIVEPAIR_THREE:
          labNode.getComponent(cc.Label).string = "五对三条";
          imagePath = "Games/Sss/img_wuduisantiao";
          break;

         case SssDef_1.SssDef.CT_SAME_COLOR:
          labNode.getComponent(cc.Label).string = "凑一色";
          imagePath = "Games/Sss/img_yise";
          break;

         case SssDef_1.SssDef.CT_ALL_SMALL:
          labNode.getComponent(cc.Label).string = "全小";
          imagePath = "Games/Sss/img_quanxiao";
          break;

         case SssDef_1.SssDef.CT_ALL_BIG:
          labNode.getComponent(cc.Label).string = "全大";
          imagePath = "Games/Sss/img_quanda";
          break;

         case SssDef_1.SssDef.CT_THREE_STRAIGHTFLUSH:
          labNode.getComponent(cc.Label).string = "三同花顺";
          imagePath = "Games/Sss/img_santonghuashun";
          break;

         case SssDef_1.SssDef.CT_TWELVE_KING:
          labNode.getComponent(cc.Label).string = "十二皇族";
          imagePath = "Games/Sss/img_shierking";
          break;

         case SssDef_1.SssDef.CT_THREE_BOMB:
          labNode.getComponent(cc.Label).string = "三分天下";
          imagePath = "Games/Sss/img_sanfen";
          break;

         case SssDef_1.SssDef.CT_FOUR_THREESAME:
          labNode.getComponent(cc.Label).string = "四套三条";
          imagePath = "Games/Sss/img_sitaosantiao";
          break;

         case SssDef_1.SssDef.CT_THIRTEEN:
          labNode.getComponent(cc.Label).string = "一条龙";
          imagePath = "Games/Sss/img_yitiaolong";
          break;

         case SssDef_1.SssDef.CT_THIRTEEN_FLUSH:
          labNode.getComponent(cc.Label).string = "清龙";
          imagePath = "Games/Sss/img_qinglong";
        }
        cc.log("有没有加载到图片", imagePath);
        imagePath && cc.loader.loadRes(imagePath, cc.SpriteFrame, function(err, spriteFrame) {
          if (err) return cc.error("no find image path: %s", imagePath);
          imgType.spriteFrame = spriteFrame;
        });
      };
      View.prototype.initAutoBtn = function() {
        this.model.topTenCardGroup = this.model.sssCard.ShowCard(this.model.handCards, this.model.handCards.length, 100);
        console.log("topTenCardGroup", this.model.topTenCardGroup);
        this.model.topTenCardGroup.length > 5 && this.model.topTenCardGroup.splice(5, this.model.topTenCardGroup.length - 5);
        var autoBtns = this.ui.node_remomentSet.getChildByName("content").children;
        for (var i = 1; i < 11; i++) {
          var arrType = [];
          var cardTypeName = [];
          var typeNameString = [];
          if (i - 1 >= this.model.topTenCardGroup.length) autoBtns[i].active = false; else {
            for (var j = 0; j < 3; j++) {
              var count = 0 == j ? 3 : this.model.topTenCardGroup[i - 1][j].length;
              arrType[j] = this.model.sssCard.GetCardType(this.model.topTenCardGroup[i - 1][j], count);
              cardTypeName[j] = this.model.getTypeByPierValue(arrType[j]);
              typeNameString[j] = cardTypeString[cardTypeName[j]];
              "葫芦" == typeNameString[j] && j == dunType.midPier ? typeNameString[j] = "中墩葫芦" : "三条" == typeNameString[j] && j == dunType.upPier ? typeNameString[j] = "冲三" : typeNameString[j] || (typeNameString[j] = "乌龙");
            }
            autoBtns[i].getChildByName("left").getComponent(cc.Label).string = typeNameString[dunType.upPier];
            autoBtns[i].getChildByName("mid").getComponent(cc.Label).string = typeNameString[dunType.midPier];
            autoBtns[i].getChildByName("right").getComponent(cc.Label).string = typeNameString[dunType.downPier];
            this.model.clearPierTypeArr();
          }
        }
      };
      View.prototype.initManulBtn = function() {
        var btnReminds = this.ui.node_cardRemind.children;
        var count = btnReminds.length;
        for (var i = 0; i < count; i++) {
          btnReminds[i].getComponent(cc.Button).enableAutoGrayEffect = true;
          btnReminds[i].getComponent(cc.Button).interactable = false;
        }
        var typeInfo = this.model.sssCard.GetType(this.model.handCards, this.model.handCards.length);
        console.log("提示按钮亮起", typeInfo);
        this.ui.btnWutong.getComponent(cc.Button).interactable = 1 == typeInfo.bFiveSame;
        this.ui.btnTonghuashun.getComponent(cc.Button).interactable = 1 == typeInfo.bStraightFlush;
        this.ui.btnTiezhi.getComponent(cc.Button).interactable = 1 == typeInfo.bFourSame;
        this.ui.btnHulu.getComponent(cc.Button).interactable = 1 == typeInfo.bGourd;
        this.ui.btnTonghua.getComponent(cc.Button).interactable = 1 == typeInfo.bFlush;
        this.ui.btnShunZi.getComponent(cc.Button).interactable = 1 == typeInfo.bStraight;
        this.ui.btnSanTiao.getComponent(cc.Button).interactable = 1 == typeInfo.bThreeSame;
        this.ui.btnLiangDui.getComponent(cc.Button).interactable = 1 == typeInfo.bTwoPare;
        this.ui.btnDuizi.getComponent(cc.Button).interactable = 1 == typeInfo.bOnePare;
      };
      View.prototype.initHandCard = function() {
        var myCards = this.ui.node_myCards.children;
        var handCards = this.model.getHandCards();
        for (var i = 0; i < myCards.length; i++) {
          var spriteName = "bull1_" + handCards[i];
          var newFrame = this.ui.pokerAtlas.getSpriteFrame(spriteName);
          myCards[i].getComponent(cc.Sprite).spriteFrame = newFrame;
          myCards[i].getChildByName("mark").active = handCards[i] == this.model.maCard;
          if (handCards[i] == this.model.maCard) {
            var newColor = new cc.Color(240, 241, 162);
            myCards[i].color = newColor;
          } else myCards[i].color = cc.Color.WHITE;
        }
        var self = this;
        var action = function(delTime, index) {
          self.ui.node_myCards.runAction(cc.sequence(cc.delayTime(delTime), cc.callFunc(function() {
            SssAudio_1.default.getInstance().playGameFaPai();
          }), cc.callFunc(function(sender, data) {
            if (index < 12) {
              var myCards_1 = sender.children;
              myCards_1[index].active = true;
              action(delTime, index + 1);
            }
            if (12 == index) {
              var myCards_2 = sender.children;
              myCards_2[index].active = true;
              self.initManulBtn();
              self.initAutoBtn();
              self.isSpecialType();
              self.ui.node_remomentSet.active = self.model.controlCustom == AUTO_CUSTOM;
              self.ui.manualBtnPanel.active = self.model.controlCustom == MANUL_CUSTOM;
              self.ui.autoBtn.active = self.model.controlCustom == MANUL_CUSTOM;
              self.ui.manualBtn.active = self.model.controlCustom == AUTO_CUSTOM;
            }
          })));
        };
        var delTime = .05;
        var childrenIndex = 0;
        action(delTime, childrenIndex);
      };
      View.prototype.removeAllCardsFromPanel = function(type) {
        switch (type) {
         case dunType.upPier:
          var upPierBgs = this.ui.node_upPier.children;
          this.model.clearPierData(dunType.upPier);
          this.removePierCards(upPierBgs, dunType.upPier);
          break;

         case dunType.midPier:
          var midPierBgs = this.ui.node_midPier.children;
          this.model.clearPierData(dunType.midPier);
          this.removePierCards(midPierBgs, dunType.midPier);
          break;

         case dunType.downPier:
          var downPierBgs = this.ui.node_downPier.children;
          this.model.clearPierData(dunType.downPier);
          this.removePierCards(downPierBgs, dunType.downPier);
        }
      };
      View.prototype.removePierCards = function(arrPierCards, type) {
        for (var i = 0; i < arrPierCards.length; i++) arrPierCards[i].getChildByName("card").active = false;
        this.refHandCard();
        this.refPierType([], type);
        var noClick = -1;
        this.refAutoBtnShow(noClick);
      };
      View.prototype.allCardHoming = function(cardType) {
        if ("hand" == cardType) {
          var myCards = this.ui.node_myCards.children;
          for (var i = 0; i < myCards.length; i++) myCards[i].setPositionY(startPos);
        }
        if ("pier" == cardType) {
          var typeName = [ "upPier", "midPier", "downPier" ];
          for (var i = 0; i <= dunType.downPier; i++) {
            var cards = this.ui["node_" + typeName[i]].children;
            var count = this.model[typeName[i]].length;
            for (var j = 0; j < cards.length; j++) if (this.model[typeName[i]][j] == this.model.maCard) {
              var newColor = new cc.Color(240, 241, 162);
              cards[j].getChildByName("card").color = newColor;
            } else cards[j].getChildByName("card").color = cc.Color.WHITE;
          }
        }
      };
      View.prototype.cardHoming = function(cards) {
        for (var i = 0; i < cards.length; i++) {
          var newColor = new cc.Color(240, 241, 162);
          true == cards[i].getChildByName("card").getChildByName("mark").active ? cards[i].getChildByName("card").color = newColor : cards[i].getChildByName("card").color = cc.Color.WHITE;
        }
      };
      View.prototype.refHandCard = function() {
        var cardData = this.model.getHandCards();
        this.model.sssCard.SortCardList(cardData, cardData.length, 0);
        console.log("手牌数据", cardData);
        var childrens = this.ui.node_myCards.children;
        for (var i = 0; i < childrens.length; i++) childrens[i].active = false;
        for (var i = 0; i < cardData.length; i++) {
          childrens[i].active = true;
          childrens[i].getChildByName("mark").active = cardData[i] == this.model.maCard;
          if (cardData[i] == this.model.maCard) {
            var newColor = new cc.Color(240, 241, 162);
            childrens[i].color = newColor;
          } else childrens[i].color = cc.Color.WHITE;
          var spriteFrameName = "bull1_" + cardData[i];
          childrens[i].getComponent(cc.Sprite).spriteFrame = this.ui.pokerAtlas.getSpriteFrame(spriteFrameName);
        }
      };
      View.prototype.refUpPierCard = function() {
        var cardData = this.model.getPierData(dunType.upPier);
        this.model.sssCard.SortCardList(cardData, 3, 0);
        console.log("上墩数据", cardData);
        var childrens = this.ui.node_upPier.children;
        var typeInfo = this.model.sssCard.GetType(cardData, cardData.length);
        if (cardData.length >= 2 && 1 == typeInfo.bOnePare) for (var i = 0; i < 2; i++) {
          var tempData = cardData[i];
          cardData[i] = cardData[typeInfo.cbOnePare[i]];
          cardData[typeInfo.cbOnePare[i]] = tempData;
        }
        this.model.upPier = cardData;
        for (var i = 0; i < childrens.length; i++) childrens[i].getChildByName("card").active = false;
        for (var i = 0; i < cardData.length; i++) {
          childrens[i].getChildByName("card").active = true;
          childrens[i].getChildByName("card").getChildByName("mark").active = cardData[i] == this.model.maCard;
          if (cardData[i] == this.model.maCard) {
            var newColor = new cc.Color(240, 241, 162);
            var onSelArrCount = this.model.selArr[dunType.upPier].length;
            var bInselArr = false;
            for (var j = 0; j < onSelArrCount; j++) i == this.model.selArr[dunType.upPier][j] && (bInselArr = true);
            childrens[i].getChildByName("card").color = bInselArr ? cc.Color.GRAY : newColor;
          } else {
            var onSelArrCount = this.model.selArr[dunType.upPier].length;
            var bInselArr = false;
            for (var j = 0; j < onSelArrCount; j++) i == this.model.selArr[dunType.upPier][j] && (bInselArr = true);
            childrens[i].getChildByName("card").color = bInselArr ? cc.Color.GRAY : cc.Color.WHITE;
          }
          var spriteFrameName = "bull1_" + cardData[i];
          var pokerNode = childrens[i].getChildByName("card");
          pokerNode.getComponent(cc.Sprite).spriteFrame = this.ui.pokerAtlas.getSpriteFrame(spriteFrameName);
        }
        var tempCard = [];
        for (var i = 0; i < cardData.length; i++) tempCard.push(cardData[i]);
        3 == cardData.length && this.refPierType(tempCard, dunType.upPier);
      };
      View.prototype.refMidPierCard = function() {
        var cardData = this.model.getPierData(dunType.midPier);
        this.model.sssCard.SortCardList(cardData, 5, 0);
        console.log("中墩数据", cardData);
        var childrens = this.ui.node_midPier.children;
        this.sortCardByType(this.model.midPier);
        for (var i = 0; i < childrens.length; i++) childrens[i].getChildByName("card").active = false;
        for (var i = 0; i < cardData.length; i++) {
          childrens[i].getChildByName("card").active = true;
          childrens[i].getChildByName("card").getChildByName("mark").active = cardData[i] == this.model.maCard;
          if (cardData[i] == this.model.maCard) {
            var newColor = new cc.Color(240, 241, 162);
            var onSelArrCount = this.model.selArr[dunType.midPier].length;
            var bInselArr = false;
            for (var j = 0; j < onSelArrCount; j++) i == this.model.selArr[dunType.midPier][j] && (bInselArr = true);
            childrens[i].getChildByName("card").color = bInselArr ? cc.Color.GRAY : newColor;
          } else {
            var onSelArrCount = this.model.selArr[dunType.midPier].length;
            var bInselArr = false;
            for (var j = 0; j < onSelArrCount; j++) i == this.model.selArr[dunType.midPier][j] && (bInselArr = true);
            childrens[i].getChildByName("card").color = bInselArr ? cc.Color.GRAY : cc.Color.WHITE;
          }
          var spriteFrameName = "bull1_" + cardData[i];
          var pokerNode = childrens[i].getChildByName("card");
          pokerNode.getComponent(cc.Sprite).spriteFrame = this.ui.pokerAtlas.getSpriteFrame(spriteFrameName);
        }
        var tempCard = [];
        for (var i = 0; i < cardData.length; i++) tempCard.push(cardData[i]);
        5 == cardData.length && this.refPierType(tempCard, dunType.midPier);
        console.log("中墩数据2", cardData);
      };
      View.prototype.refDownPierCard = function() {
        var cardData = this.model.downPier;
        this.model.sssCard.SortCardList(cardData, 5, 0);
        console.log("尾墩数据", cardData);
        var childrens = this.ui.node_downPier.children;
        this.sortCardByType(cardData);
        console.log("尾墩数据2", this.model.downPier);
        for (var i = 0; i < childrens.length; i++) childrens[i].getChildByName("card").active = false;
        for (var i = 0; i < cardData.length; i++) {
          childrens[i].getChildByName("card").active = true;
          childrens[i].getChildByName("card").getChildByName("mark").active = cardData[i] == this.model.maCard;
          if (cardData[i] == this.model.maCard) {
            var newColor = new cc.Color(240, 241, 162);
            var onSelArrCount = this.model.selArr[dunType.downPier].length;
            var bInselArr = false;
            for (var j = 0; j < onSelArrCount; j++) i == this.model.selArr[dunType.downPier][j] && (bInselArr = true);
            childrens[i].getChildByName("card").color = bInselArr ? cc.Color.GRAY : newColor;
          } else {
            var onSelArrCount = this.model.selArr[dunType.downPier].length;
            var bInselArr = false;
            for (var j = 0; j < onSelArrCount; j++) i == this.model.selArr[dunType.downPier][j] && (bInselArr = true);
            childrens[i].getChildByName("card").color = bInselArr ? cc.Color.GRAY : cc.Color.WHITE;
          }
          var spriteFrameName = "bull1_" + cardData[i];
          var pokerNode = childrens[i].getChildByName("card");
          pokerNode.getComponent(cc.Sprite).spriteFrame = this.ui.pokerAtlas.getSpriteFrame(spriteFrameName);
        }
        var tempCard = [];
        for (var i = 0; i < cardData.length; i++) tempCard.push(cardData[i]);
        5 == cardData.length && this.refPierType(tempCard, dunType.downPier);
      };
      View.prototype.sortCardByType = function(cardData) {
        var type = this.model.sssCard.GetCardType(cardData, cardData.length);
        console.log("牌墩内的扑克牌牌型", type);
        if (type == SssDef_1.SssDef.CT_FIVE_MIXED_FLUSH_NO_A || type == SssDef_1.SssDef.CT_FIVE_MIXED_FLUSH_FIRST_A || type == SssDef_1.SssDef.CT_FIVE_MIXED_FLUSH_BACK_A || type == SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_NO_A || type == SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_FIRST_A || type == SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_BACK_A || type == SssDef_1.SssDef.CT_FIVE_BOMB) return;
        if (type == SssDef_1.SssDef.CT_FIVE_THREE_DEOUBLE && this.model.sssCard.GetCardLogicValue(cardData[0]) >= SssDef_1.SssDef.CARD_XW) {
          console.log("进行带鬼葫芦的排序");
          this.sortGourdWithJorke(cardData);
        } else if (type == SssDef_1.SssDef.CT_FIVE_FLUSH && this.model.sssCard.GetCardLogicValue(cardData[0]) >= SssDef_1.SssDef.CARD_XW) {
          var typeInfo = this.model.sssCard.GetType(cardData, cardData.length);
          1 == typeInfo.bOnePare && this.model.sssCard.GetCardLogicValue(cardData[1]) < SssDef_1.SssDef.CARD_XW && this.sortOnePareWithJorke(cardData);
        } else if (type == SssDef_1.SssDef.CT_FIVE_FOUR_ONE && this.model.sssCard.GetCardLogicValue(cardData[0]) >= SssDef_1.SssDef.CARD_XW) {
          console.log("进行带鬼铁支的排序");
          this.sortFourWithJorke(cardData);
        } else if (type == SssDef_1.SssDef.CT_THREE && this.model.sssCard.GetCardLogicValue(cardData[0]) >= SssDef_1.SssDef.CARD_XW) {
          console.log("进行带鬼三条的排序");
          this.sortThreeWithJorke(cardData);
        } else if (type == SssDef_1.SssDef.CT_ONE_DOUBLE && this.model.sssCard.GetCardLogicValue(cardData[0]) >= SssDef_1.SssDef.CARD_XW) {
          console.log("进行带鬼单对的排序");
          this.sortOnePareWithJorke(cardData);
        } else if (type == SssDef_1.SssDef.CT_FIVE_FLUSH) {
          var typeInfo = this.model.sssCard.GetType(cardData, cardData.length);
          1 == typeInfo.bThreeSame ? this.sortThreeSame(cardData) : 1 == typeInfo.bTwoPare ? this.sortTwoPare(cardData) : 1 == typeInfo.bOnePare && this.sortOnePare(cardData);
        } else if (type == SssDef_1.SssDef.CT_FIVE_THREE_DEOUBLE) {
          console.log("进行葫芦的排序");
          this.sortGourd(cardData);
        } else if (type == SssDef_1.SssDef.CT_FIVE_FOUR_ONE) {
          console.log("进行铁支的排序");
          this.sortFourSame(cardData);
        } else if (type == SssDef_1.SssDef.CT_FIVE_TWO_DOUBLE) {
          console.log("进行两对的排序");
          this.sortTwoPare(cardData);
        } else if (type == SssDef_1.SssDef.CT_THREE) {
          console.log("进行三条的排序");
          this.sortThreeSame(cardData);
        } else if (type == SssDef_1.SssDef.CT_ONE_DOUBLE) {
          console.log("进行一对的排序");
          this.sortOnePare(cardData);
        }
      };
      View.prototype.sortOnePareWithJorke = function(cardData) {
        var cardDict = {};
        for (var i = 0; i < cardData.length; i++) {
          var count = cardDict[cardData[i]];
          var v = parseInt(cardData[i]) % 16;
          cardDict[v] || (cardDict[v] = []);
          cardDict[v].push(cardData[i]);
        }
        var wangCard = 0;
        var singleCard = [];
        for (var key in cardDict) 14 == key || 15 == key ? wangCard = cardDict[key][0] : singleCard.push(cardDict[key][0]);
        singleCard.sort(function(a, b) {
          var valueA = parseInt(a) % 16;
          var valueB = parseInt(b) % 16;
          valueA = 14 == valueA || 15 == valueA ? valueA + 1 : valueA;
          valueB = 14 == valueB || 15 == valueB ? valueB + 1 : valueB;
          var tempA = 1 == valueA ? valueA + 13 : valueA;
          var tempB = 1 == valueB ? valueB + 13 : valueB;
          return tempA < tempB;
        });
        var tempArr = [];
        tempArr[0] = wangCard;
        tempArr[1] = singleCard[0];
        tempArr[2] = singleCard[1];
        tempArr[3] = singleCard[2];
        tempArr[4] = singleCard[3];
        for (var i = 0; i < cardData.length; i++) cardData[i] = tempArr[i];
      };
      View.prototype.sortFourWithJorke = function(cardData) {
        var cardDict = {};
        for (var i = 0; i < cardData.length; i++) {
          var count = cardDict[cardData[i]];
          var v = parseInt(cardData[i]) % 16;
          cardDict[v] || (cardDict[v] = []);
          cardDict[v].push(cardData[i]);
        }
        var singleArr = [];
        var sameCard = [];
        for (var key in cardDict) cardDict[key].length >= 2 ? sameCard = cardDict[key] : singleArr.push(cardDict[key][0]);
        singleArr.sort(function(a, b) {
          var valueA = parseInt(a) % 16;
          var valueB = parseInt(b) % 16;
          valueA = 14 == valueA || 15 == valueA ? valueA + 1 : valueA;
          valueB = 14 == valueB || 15 == valueB ? valueB + 1 : valueB;
          var tempA = 1 == valueA ? valueA + 13 : valueA;
          var tempB = 1 == valueB ? valueB + 13 : valueB;
          return tempA < tempB;
        });
        var sameCardCount = sameCard.length;
        for (var i = 0; i < cardData.length; i++) cardData[i] = i > sameCardCount - 1 ? singleArr[i - sameCardCount] : sameCard[i];
      };
      View.prototype.sortGourdWithJorke = function(cardData) {
        var cardDict = {};
        for (var i = 0; i < cardData.length; i++) {
          var count = cardDict[cardData[i]];
          var v = parseInt(cardData[i]) % 16;
          cardDict[v] || (cardDict[v] = []);
          cardDict[v].push(cardData[i]);
        }
        var keyArr = [];
        var wangCard = 0;
        for (var key in cardDict) cardDict[key].length < 2 ? wangCard = cardDict[key][0] : keyArr.push(cardDict[key]);
        keyArr.sort(function(a, b) {
          var valueA = parseInt(a[0]) % 16;
          var valueB = parseInt(b[0]) % 16;
          valueA = 14 == valueA || 15 == valueA ? valueA + 1 : valueA;
          valueB = 14 == valueB || 15 == valueB ? valueB + 1 : valueB;
          var tempA = 1 == valueA ? valueA + 13 : valueA;
          var tempB = 1 == valueB ? valueB + 13 : valueB;
          return tempA < tempB;
        });
        cardData[0] = wangCard;
        cardData[1] = keyArr[0][0];
        cardData[2] = keyArr[0][1];
        cardData[3] = keyArr[1][0];
        cardData[4] = keyArr[1][1];
      };
      View.prototype.sortThreeWithJorke = function(cardData) {
        console.log("带鬼三条排序前", cardData);
        var cardDict = {};
        for (var i = 0; i < cardData.length; i++) {
          var count = cardDict[cardData[i]];
          var v = parseInt(cardData[i]) % 16;
          console.log("vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv", v);
          cardDict[v] || (cardDict[v] = []);
          cardDict[v].push(cardData[i]);
        }
        console.log(cardDict);
        var keyArr = [];
        if (this.model.sssCard.GetCardLogicValue(cardData[1]) < SssDef_1.SssDef.CARD_XW) {
          var twoCard = [];
          var singleCard = [];
          var wangCard = 0;
          for (var key in cardDict) 2 === cardDict[key].length ? twoCard = cardDict[key] : 14 == key || 15 == key ? wangCard = cardDict[key][0] : singleCard.push(cardDict[key][0]);
          singleCard.sort(function(a, b) {
            var valueA = parseInt(a) % 16;
            var valueB = parseInt(b) % 16;
            valueA = 14 == valueA || 15 == valueA ? valueA + 1 : valueA;
            valueB = 14 == valueB || 15 == valueB ? valueB + 1 : valueB;
            var tempA = 1 == valueA ? valueA + 13 : valueA;
            var tempB = 1 == valueB ? valueB + 13 : valueB;
            return tempA < tempB;
          });
          var tempArr = [];
          tempArr[0] = wangCard;
          tempArr[1] = twoCard[0];
          tempArr[2] = twoCard[1];
          tempArr[3] = singleCard[0];
          tempArr[4] = singleCard[1];
          for (var i = 0; i < cardData.length; i++) cardData[i] = tempArr[i];
        } else if (this.model.sssCard.GetCardLogicValue(cardData[1]) == SssDef_1.SssDef.CARD_XW) {
          var singleCard = [];
          var wangCard = [];
          for (var key in cardDict) 14 == key || 15 == key ? wangCard.push(cardDict[key][0]) : singleCard.push(cardDict[key][0]);
          singleCard.sort(function(a, b) {
            var valueA = parseInt(a) % 16;
            var valueB = parseInt(b) % 16;
            valueA = 14 == valueA || 15 == valueA ? valueA + 1 : valueA;
            valueB = 14 == valueB || 15 == valueB ? valueB + 1 : valueB;
            var tempA = 1 == valueA ? valueA + 13 : valueA;
            var tempB = 1 == valueB ? valueB + 13 : valueB;
            return tempA < tempB;
          });
          var tempArr = [];
          tempArr[0] = wangCard[0];
          tempArr[1] = wangCard[1];
          tempArr[2] = singleCard[0];
          tempArr[3] = singleCard[1];
          tempArr[4] = singleCard[2];
          for (var i = 0; i < cardData.length; i++) cardData[i] = tempArr[i];
        }
        console.log("带鬼三条排序后", cardData);
      };
      View.prototype.sortTwoPare = function(cardData) {
        var cardDict = {};
        for (var i = 0; i < cardData.length; i++) {
          var count = cardDict[cardData[i]];
          var v = parseInt(cardData[i]) % 16;
          cardDict[v] || (cardDict[v] = []);
          cardDict[v].push(cardData[i]);
        }
        console.log(cardDict);
        var keyArr = [];
        var singleCard = 0;
        for (var key in cardDict) cardDict[key].length < 2 ? singleCard = cardDict[key][0] : keyArr.push(cardDict[key]);
        keyArr.sort(function(a, b) {
          var valueA = parseInt(a[0]) % 16;
          var valueB = parseInt(b[0]) % 16;
          valueA = 14 == valueA || 15 == valueA ? valueA + 1 : valueA;
          valueB = 14 == valueB || 15 == valueB ? valueB + 1 : valueB;
          var tempA = 1 == valueA ? valueA + 13 : valueA;
          var tempB = 1 == valueB ? valueB + 13 : valueB;
          return tempA < tempB;
        });
        var tempArr = [];
        tempArr[0] = keyArr[0][0];
        tempArr[1] = keyArr[0][1];
        tempArr[2] = keyArr[1][0];
        tempArr[3] = keyArr[1][1];
        tempArr[4] = singleCard;
        for (var i = 0; i < cardData.length; i++) cardData[i] = tempArr[i];
      };
      View.prototype.sortGourd = function(cardData) {
        var cardDict = {};
        for (var i = 0; i < cardData.length; i++) {
          var count = cardDict[cardData[i]];
          var v = parseInt(cardData[i]) % 16;
          cardDict[v] || (cardDict[v] = []);
          cardDict[v].push(cardData[i]);
        }
        console.log(cardDict);
        var threeCard = [];
        var twoCard = [];
        for (var key in cardDict) 3 === cardDict[key].length ? threeCard = cardDict[key] : twoCard = cardDict[key];
        var tempArr = [];
        tempArr[0] = threeCard[0];
        tempArr[1] = threeCard[1];
        tempArr[2] = threeCard[2];
        tempArr[3] = twoCard[0];
        tempArr[4] = twoCard[1];
        for (var i = 0; i < cardData.length; i++) cardData[i] = tempArr[i];
      };
      View.prototype.sortFourSame = function(cardData) {
        var cardDict = {};
        for (var i = 0; i < cardData.length; i++) {
          var count = cardDict[cardData[i]];
          var v = parseInt(cardData[i]) % 16;
          cardDict[v] || (cardDict[v] = []);
          cardDict[v].push(cardData[i]);
        }
        var keyArr = [];
        var singleCard = 0;
        for (var key in cardDict) cardDict[key].length < 2 ? singleCard = cardDict[key][0] : keyArr.push(cardDict[key]);
        keyArr.sort(function(a, b) {
          var valueA = parseInt(a[0]) % 16;
          var valueB = parseInt(b[0]) % 16;
          valueA = 14 == valueA || 15 == valueA ? valueA + 1 : valueA;
          valueB = 14 == valueB || 15 == valueB ? valueB + 1 : valueB;
          var tempA = 1 == valueA ? valueA + 13 : valueA;
          var tempB = 1 == valueB ? valueB + 13 : valueB;
          return tempA < tempB;
        });
        var tempArr = [];
        tempArr[0] = keyArr[0][0];
        tempArr[1] = keyArr[0][1];
        tempArr[2] = keyArr[0][2];
        tempArr[3] = keyArr[0][3];
        tempArr[4] = singleCard;
        for (var i = 0; i < cardData.length; i++) cardData[i] = tempArr[i];
      };
      View.prototype.sortThreeSame = function(cardData) {
        console.log("三条排序前", cardData);
        var cardDict = {};
        for (var i = 0; i < cardData.length; i++) {
          var count = cardDict[cardData[i]];
          var v = parseInt(cardData[i]) % 16;
          cardDict[v] || (cardDict[v] = []);
          cardDict[v].push(cardData[i]);
        }
        console.log(cardDict);
        var threeCard = [];
        var singleArr = [];
        for (var key in cardDict) 3 === cardDict[key].length ? threeCard = cardDict[key] : singleArr.push(cardDict[key][0]);
        singleArr.sort(function(a, b) {
          var valueA = parseInt(a) % 16;
          var valueB = parseInt(b) % 16;
          valueA = 14 == valueA || 15 == valueA ? valueA + 1 : valueA;
          valueB = 14 == valueB || 15 == valueB ? valueB + 1 : valueB;
          var tempA = 1 == valueA ? valueA + 13 : valueA;
          var tempB = 1 == valueB ? valueB + 13 : valueB;
          return tempA < tempB;
        });
        var tempArr = [];
        tempArr[0] = threeCard[0];
        tempArr[1] = threeCard[1];
        tempArr[2] = threeCard[2];
        tempArr[3] = singleArr[0];
        tempArr[4] = singleArr[1];
        for (var i = 0; i < cardData.length; i++) cardData[i] = tempArr[i];
        console.log("三条排序后", cardData);
      };
      View.prototype.sortOnePare = function(cardData) {
        console.log("一对排序前", cardData);
        var cardDict = {};
        for (var i = 0; i < cardData.length; i++) {
          var count = cardDict[cardData[i]];
          var v = parseInt(cardData[i]) % 16;
          cardDict[v] || (cardDict[v] = []);
          cardDict[v].push(cardData[i]);
        }
        console.log(cardDict);
        var singlePair = [];
        var singleArr = [];
        for (var key in cardDict) cardDict[key].length < 2 ? singleArr.push(cardDict[key][0]) : singlePair = cardDict[key];
        singleArr.sort(function(a, b) {
          var valueA = parseInt(a) % 16;
          var valueB = parseInt(b) % 16;
          valueA = 14 == valueA || 15 == valueA ? valueA + 1 : valueA;
          valueB = 14 == valueB || 15 == valueB ? valueB + 1 : valueB;
          var tempA = 1 == valueA ? valueA + 13 : valueA;
          var tempB = 1 == valueB ? valueB + 13 : valueB;
          return tempA < tempB;
        });
        var tempArr = [];
        tempArr[0] = singlePair[0];
        tempArr[1] = singlePair[1];
        tempArr[2] = singleArr[0];
        tempArr[3] = singleArr[1];
        tempArr[4] = singleArr[2];
        for (var i = 0; i < cardData.length; i++) cardData[i] = tempArr[i];
        console.log("一对排序后", cardData);
      };
      View.prototype.configComplete = function() {
        if (0 == this.model.getHandCards().length) {
          this.ui.confirmBtn.active = true;
          this.ui.revokeBtn.active = true;
          var bAscending = this.model.isAscending();
          console.log("是否相公牌型", bAscending);
          this.ui.labIsAscending.node.active = bAscending;
          this.ui.confirmBtn.getComponent(cc.Button).interactable = !bAscending;
        } else {
          this.ui.confirmBtn.getComponent(cc.Button).interactable = true;
          this.ui.confirmBtn.active = false;
          this.ui.revokeBtn.active = false;
          this.ui.labIsAscending.node.active = false;
        }
      };
      View.prototype.refPierType = function(cardData, pierType) {
        var nodeName = [ "up", "mid", "down" ];
        var type = this.model.sssCard.GetCardType(cardData, cardData.length);
        var cardTypeName = this.model.getTypeByPierValue(type);
        var spriteName = cardTypeName;
        console.log("如果传空会怎么样", spriteName);
        if ("hulu" == spriteName && pierType == dunType.midPier) spriteName = "zhongdunhulu"; else if ("santiao" == spriteName && pierType == dunType.upPier) spriteName = "chongsan"; else if (!spriteName) {
          console.log("如果传空会怎么样2");
          spriteName = "wulong";
        }
        console.log("类型名称", cardTypeName);
        console.log("牌型图片名称", spriteName);
        var typeNode = this.ui.pierCardType.getChildByName(nodeName[pierType]);
        cardData.length ? typeNode.active = true : typeNode.active = false;
        var imagePath = "Games/Sss/" + spriteName;
        console.log("图片路径", imagePath);
        cc.loader.loadRes(imagePath, cc.SpriteFrame, function(err, spriteFrame) {
          if (err) return cc.error("no find image path: %s", imagePath);
          console.log("图片取到了吗？", spriteFrame);
          typeNode.getComponent(cc.Sprite).spriteFrame = spriteFrame;
        });
        this.model.clearPierTypeArr();
      };
      View.prototype.refManulBtnShow = function() {
        var handCards = this.model.getHandCards();
        var typeInfo = this.model.sssCard.GetType(handCards, handCards.length);
        console.log("ManulBtn", typeInfo);
        this.ui.btnWutong.getComponent(cc.Button).interactable = 1 == typeInfo.bFiveSame;
        this.ui.btnTonghuashun.getComponent(cc.Button).interactable = 1 == typeInfo.bStraightFlush;
        this.ui.btnTiezhi.getComponent(cc.Button).interactable = 1 == typeInfo.bFourSame;
        this.ui.btnHulu.getComponent(cc.Button).interactable = 1 == typeInfo.bGourd;
        this.ui.btnTonghua.getComponent(cc.Button).interactable = 1 == typeInfo.bFlush;
        this.ui.btnShunZi.getComponent(cc.Button).interactable = 1 == typeInfo.bStraight;
        this.ui.btnSanTiao.getComponent(cc.Button).interactable = 1 == typeInfo.bThreeSame;
        this.ui.btnLiangDui.getComponent(cc.Button).interactable = 1 == typeInfo.bTwoPare;
        this.ui.btnDuizi.getComponent(cc.Button).interactable = 1 == typeInfo.bOnePare;
      };
      View.prototype.refAutoBtnShow = function(index) {
        var handCards = this.model.getHandCards();
        if (!this.model.getHandCards().length) {
          var autoBtns = this.ui.node_remomentSet.getChildByName("content").children;
          for (var i = 0; i < autoBtns.length; i++) autoBtns[i].getComponent(cc.Button).interactable = i != index;
        }
        if (13 == this.model.getHandCards().length) {
          var autoBtns = this.ui.node_remomentSet.getChildByName("content").children;
          for (var i = 0; i < autoBtns.length; i++) autoBtns[i].getComponent(cc.Button).interactable = true;
        }
      };
      View.prototype.allAutoBtnShow = function() {
        var autoBtns = this.ui.node_remomentSet.getChildByName("content").children;
        for (var i = 0; i < autoBtns.length; i++) autoBtns[i].getComponent(cc.Button).interactable = true;
      };
      return View;
    }(BaseView_1.default);
    var SssSeatCtrl = function(_super) {
      __extends(SssSeatCtrl, _super);
      function SssSeatCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_panel = null;
        _this.node_remomentSet = null;
        _this.node_myCards = null;
        _this.node_cardRemind = null;
        _this.node_upPier = null;
        _this.node_midPier = null;
        _this.node_downPier = null;
        _this.node_replace = null;
        _this.pokerAtlas = null;
        _this.autoBtn = null;
        _this.manualBtn = null;
        _this.autoBtnPanel = null;
        _this.manualBtnPanel = null;
        _this.confirmBtn = null;
        _this.revokeBtn = null;
        _this.pierCardType = null;
        _this.btnDuizi = null;
        _this.btnLiangDui = null;
        _this.btnSanTiao = null;
        _this.btnShunZi = null;
        _this.btnTonghua = null;
        _this.btnHulu = null;
        _this.btnTiezhi = null;
        _this.btnTonghuashun = null;
        _this.btnWutong = null;
        _this.labIsAscending = null;
        _this.specialRemindPanel = null;
        _this.btnUseSpecial = null;
        _this.btnCancelSpecial = null;
        _this.btnSpecial = null;
        _this.labClockTime = null;
        return _this;
      }
      SssSeatCtrl.prototype.onLoad = function() {
        ctrl = this;
        ctrl.initMvc(Model, View);
        this.scheduleCallback = function() {
          this.updateTime();
        };
        this.schedule(this.scheduleCallback, 1);
      };
      SssSeatCtrl.prototype.updateTime = function() {
        this.model.timesLab--;
        this.ui.labClockTime.string = this.model.timesLab;
        console.log("aaaaa");
        this.model.timesLab < 1 && this.unschedule(this.scheduleCallback);
      };
      SssSeatCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onDissolutionRoom: this.onDissolutionRoom,
          "connector.entryHandler.enterRoom": this.connector_entryHandler_enterRoom
        };
      };
      SssSeatCtrl.prototype.defineGlobalEvents = function() {};
      SssSeatCtrl.prototype.connectUi = function() {
        var _this = this;
        this.connect(G_UiType.image, this.ui.autoBtn, this.changeAutoOrManual, "切换成自动摆牌");
        this.connect(G_UiType.image, this.ui.manualBtn, this.changeAutoOrManual, "切换成手动摆牌");
        this.connect(G_UiType.button, this.ui.btnUseSpecial, this.specialConfirmCB, "确认使用特殊牌型");
        this.connect(G_UiType.button, this.ui.btnCancelSpecial, this.specialCancelCB, "取消使用特殊牌型");
        this.connect(G_UiType.button, this.ui.btnSpecial, this.specialConfirmCB, "配牌界面确认使用特殊牌型");
        this.connect(G_UiType.button, this.ui.revokeBtn, this.revokeCB, "取消、撤回牌墩所有牌");
        this.bindClick(this.ui.btnDuizi, {
          touchmove: function() {},
          touchend: function() {},
          touchcancel: function() {},
          click: this.onePareCB.bind(this)
        }, "确认点击了对子按钮");
        this.bindClick(this.ui.btnLiangDui, {
          touchmove: function() {},
          touchend: function() {},
          touchcancel: function() {},
          click: this.twoPareCB.bind(this)
        }, "确认点击了两对按钮");
        this.bindClick(this.ui.btnSanTiao, {
          touchmove: function() {},
          touchend: function() {},
          touchcancel: function() {},
          click: this.threeSameCB.bind(this)
        }, "确认点击了三条按钮");
        this.bindClick(this.ui.btnShunZi, {
          touchmove: function() {},
          touchend: function() {},
          touchcancel: function() {},
          click: this.straightCB.bind(this)
        }, "确认点击了顺子按钮");
        this.bindClick(this.ui.btnTonghua, {
          touchmove: function() {},
          touchend: function() {},
          touchcancel: function() {},
          click: this.flushCB.bind(this)
        }, "确认点击了顺子按钮");
        this.bindClick(this.ui.btnHulu, {
          touchmove: function() {},
          touchend: function() {},
          touchcancel: function() {},
          click: this.groupCB.bind(this)
        }, "确认点击了葫芦按钮");
        this.bindClick(this.ui.btnTiezhi, {
          touchmove: function() {},
          touchend: function() {},
          touchcancel: function() {},
          click: this.fourSameCB.bind(this)
        }, "确认点击了铁支按钮");
        this.bindClick(this.ui.btnTonghuashun, {
          touchmove: function() {},
          touchend: function() {},
          touchcancel: function() {},
          click: this.straightFlushCB.bind(this)
        }, "确认点击了同花顺按钮");
        this.bindClick(this.ui.btnWutong, {
          touchmove: function() {},
          touchend: function() {},
          touchcancel: function() {},
          click: this.fiveSameCB.bind(this)
        }, "确认点击了五同按钮");
        this.bindClick(this.ui.confirmBtn, {
          touchmove: function() {},
          touchend: function() {},
          touchcancel: function() {},
          click: this.confirmCB.bind(this)
        }, "点击了确认");
        var autoBtns = this.ui.node_remomentSet.getChildByName("content").children;
        var _loop_1 = function(i) {
          var cb = function() {
            _this.autoBtnCB(i - 1);
          };
          this_1.bindClick(autoBtns[i], {
            touchmove: function() {},
            touchend: function() {},
            touchcancel: function() {},
            click: cb
          }, "点击自动摆牌&确认使用" + i + "该方案");
        };
        var this_1 = this;
        for (var i = 1; i < autoBtns.length; i++) _loop_1(i);
        var replaceBtns = this.ui.node_replace.children;
        var _loop_2 = function(i) {
          var cb = function() {
            this.clickReplace(i);
          };
          this_2.connect(G_UiType.image, replaceBtns[i], cb, "点击摆牌重置按钮&取消当前" + i + "墩的摆牌");
        };
        var this_2 = this;
        for (var i = 0; i < replaceBtns.length; i++) _loop_2(i);
        var cardcount = SssDef_1.SssDef.cardcount;
        var myCards = this.ui.node_myCards.children;
        var _loop_3 = function(i) {
          var cb = function() {
            var value = _this.model.getHandCards()[i];
            console.log("选中牌的value", value);
            _this.clickMyCard(i, value);
          };
          this_3.bindHandCardClick(myCards[i], {
            touchmove: this_3.moveChooseCB.bind(this_3),
            touchend: this_3.clickEnd.bind(this_3),
            touchcancel: this_3.chooseMyCardEnd.bind(this_3),
            click: cb
          });
        };
        var this_3 = this;
        for (var i = 0; i < cardcount; i++) _loop_3(i);
        this.connectCardBg(this.ui.node_upPier, dunType.upPier);
        this.connectCardBg(this.ui.node_midPier, dunType.midPier);
        this.connectCardBg(this.ui.node_downPier, dunType.downPier);
      };
      SssSeatCtrl.prototype.connectCardBg = function(nodePier, type) {
        var _this = this;
        var cardBgs = nodePier.children;
        var _loop_4 = function(i) {
          var cb = function() {
            var value = _this.model.getPierData(type)[i];
            _this.clickCardBgs(type, i, value);
          };
          this_4.bindClick(cardBgs[i], {
            touchmove: this_4.pierMoveChooseCB.bind(this_4),
            touchend: function() {},
            touchcancel: this_4.addDataEnd.bind(this_4),
            click: cb
          }, "");
        };
        var this_4 = this;
        for (var i = 0; i < cardBgs.length; i++) _loop_4(i);
      };
      SssSeatCtrl.prototype.bindClick = function(node, obj, opname) {
        node.on("touchstart", function(event) {
          console.log("执行了touchstart");
        }, this);
        node.on("touchmove", function(event) {
          obj.touchmove(node, event);
        }, this);
        node.on("touchend", function(event) {
          console.log("执行了end");
          obj.touchend(node, event);
        }, this);
        node.on("touchcancel", function(event) {
          console.log("执行了cancel");
          obj.touchcancel(node, event);
        }, this);
        node.on("click", function(event) {
          AudioMgr_1.default.getInstance().play(opname);
          console.log("执行click");
          obj.click();
        }, this);
      };
      SssSeatCtrl.prototype.bindHandCardClick = function(node, obj) {
        node.isClick = true;
        node.on("touchstart", function(event) {
          obj.click();
        }, this);
        node.on("touchmove", function(event) {
          var curPosX = node.parent.convertToNodeSpace(event.getLocation()).x;
          var handCardCount = this.model.handCards.length;
          var lastCardX = handCardCount == node.name ? node.x + node.width / 2 : node.x + 38;
          node.isClick = node.x - node.width / 2 < curPosX && curPosX < lastCardX;
          if (node.isClick) return;
          console.log("执行move", "node.isClick", node.isClick);
          obj.touchmove(node, event);
        }, this);
        node.on("touchend", function(event) {
          var curPosX = node.parent.convertToNodeSpace(event.getLocation()).x;
          var handCardCount = this.model.handCards.length;
          var lastCardX = handCardCount == node.name ? node.x + node.width / 2 : node.x + 38;
          if (lastCardX < curPosX || curPosX < node.x - node.width / 2) {
            obj.touchcancel(node, event);
            node.isClick = true;
          } else obj.touchend(node, event);
        }, this);
        node.on("touchcancel", function(event) {
          console.log("touchcancel");
          obj.touchcancel(node, event);
          node.isClick = true;
        }, this);
        node.on("click", function(event) {}, this);
      };
      SssSeatCtrl.prototype.start = function() {};
      SssSeatCtrl.prototype.changeAutoOrManual = function(node, event) {
        console.log(node, event);
        this.ui.manualBtn.active = "hand" != node.name;
        this.ui.manualBtnPanel.active = "hand" == node.name;
        this.ui.autoBtn.active = "hand" == node.name;
        this.ui.autoBtnPanel.active = "hand" != node.name;
      };
      SssSeatCtrl.prototype.confirmCB = function() {
        var typeName = [ "upPier", "midPier", "downPier" ];
        var cardList = [ [], [], [] ];
        for (var i = 0; i < typeName.length; ++i) for (var j = 0; j < this.model[typeName[i]].length; ++j) cardList[i].push(parseInt(this.model[typeName[i]][j]));
        this.model.controlCustom = this.ui.autoBtnPanel.active ? AUTO_CUSTOM : MANUL_CUSTOM;
        LocalStorage_1.default.getInstance().setSssControlCustom(this.model.controlCustom);
        SssLogic_1.default.getInstance().send_peipai(cardList, 0);
        this.finish();
      };
      SssSeatCtrl.prototype.revokeCB = function() {
        var typeName = [ "upPier", "midPier", "downPier" ];
        for (var i = 0; i < 3; i++) this.view.removeAllCardsFromPanel(i);
        this.model.clearChooseCard();
        this.model.chooseTempArr = [];
        this.model.selArr = [ [], [], [] ];
        this.model.moveTempArr = [ [], [], [] ];
        this.view.allCardHoming("hand");
        this.view.configComplete();
        this.view.refManulBtnShow();
        this.view.allAutoBtnShow();
      };
      SssSeatCtrl.prototype.clickReplace = function(index) {
        this.view.removeAllCardsFromPanel(index);
        this.model.clearChooseCard();
        this.model.chooseTempArr = [];
        this.model.selArr = [ [], [], [] ];
        this.model.moveTempArr = [ [], [], [] ];
        this.view.allCardHoming("hand");
        this.view.configComplete();
        this.view.refManulBtnShow();
        this.view.allAutoBtnShow();
      };
      SssSeatCtrl.prototype.pierMoveChooseCB = function(node, event) {
        var type = dunType[node.parent.name];
        console.log("bMoveSel" + type, this.model.bMoveSel[type]);
        var value = this.model.getPierData(type);
        if (!value.length) return;
        if (0 != this.model.getChooseCards().length) return;
        var startPos = this.ui["node_" + node.parent.name].convertToNodeSpace(event.getStartLocation());
        console.log("startPos", startPos);
        var clickPos = this.ui["node_" + node.parent.name].convertToNodeSpace(event.getLocation());
        console.log("clickPos", clickPos);
        var cards = this.ui["node_" + node.parent.name].children;
        var count = value.length;
        for (var i = 0; i < count; i++) {
          var nodePos = cards[i].getPosition();
          console.log("nodePos", nodePos);
          if (nodePos.x - cards[i].width / 2 < clickPos.x && clickPos.x < nodePos.x + cards[i].width / 2) {
            var pierSelArr = this.model.selArr[type];
            for (var j_1 = 0; j_1 < pierSelArr.length; j_1++) if (i == pierSelArr[j_1]) {
              cards[i].getChildByName("card").color = cc.Color.WHITE;
              return;
            }
            for (var j = 0; j < this.model.moveTempArr[type].length; j++) if (i == this.model.moveTempArr[type][j]) return;
            cards[i].getChildByName("card").color = cc.Color.GRAY;
            this.model.moveTempArr[type].push(i);
            console.log("中间存储变量", this.model.moveTempArr[type]);
          }
        }
      };
      SssSeatCtrl.prototype.addDataEnd = function(node, event) {
        var typeName = [ "upPier", "midPier", "downPier" ];
        var type = dunType[node.parent.name];
        var count = this.model.selArr[type].length;
        var pierData = this.model.getPierData(type);
        var cards = this.ui["node_" + node.parent.name].children;
        cc.log("tempArr", this.model.moveTempArr[type]);
        cc.log("selArr", this.model.selArr[type]);
        for (var i = 0; i < count; i++) for (var k = 0; k < this.model.moveTempArr[type].length; k++) {
          var index = this.model.moveTempArr[type][k];
          if (this.model.selArr[type][i] == index && cards[index].getChildByName("card").color._val == cc.Color.WHITE._val) {
            delete this.model.selArr[type][i];
            this.model.moveTempArr[type].splice(k, 1);
            break;
          }
        }
        cc.log("tempArr2", this.model.moveTempArr[type]);
        cc.log("selArr2", this.model.selArr[type]);
        for (var i = 0; i < 5; i++) {
          console.log("是不是这里移除了", this.model.selArr[type]);
          for (var j = 0; j < this.model.selArr[type].length; j++) if (!this.model.selArr[type][j] && 0 != this.model.selArr[type][j]) {
            this.model.selArr[type].remove(j);
            break;
          }
        }
        cc.log(this.model.moveTempArr[type]);
        cc.log(this.model.selArr[type]);
        for (var i = 0; i < this.model.moveTempArr[type].length; i++) {
          if (this.model.selArr[type][i] || 0 == this.model.selArr[type][i]) continue;
          this.model.addChangeDT(type, this.model.moveTempArr[type][i]);
        }
        if (this.model.bChangePierData) {
          this.view.allAutoBtnShow();
          this.model.bChangePierData = false;
        }
        console.log("this.model.selArr-0", this.model.selArr[0]);
        console.log("this.model.selArr-1", this.model.selArr[1]);
        console.log("this.model.selArr-2", this.model.selArr[2]);
        this.view.configComplete();
        this.view.refUpPierCard();
        this.view.refMidPierCard();
        this.view.refDownPierCard();
        0 == this.model.selArr[dunType.upPier].length && 0 == this.model.selArr[dunType.midPier].length && 0 == this.model.selArr[dunType.downPier].length && this.view.allCardHoming("pier");
        console.log(type + "-SelArr", this.model.selArr[type]);
      };
      SssSeatCtrl.prototype.moveChooseCB = function(node, event) {
        console.log(this.ui.node_myCards.convertToNodeSpace(event.getLocation()));
        var clickPos = this.ui.node_myCards.convertToNodeSpace(event.getLocation());
        var myCards = this.ui.node_myCards.children;
        for (var i = 0; i < myCards.length; i++) {
          var nodePos = myCards[i].getPosition();
          var handCardCount = this.model.handCards.length;
          var lastCardX = handCardCount == myCards[i].name ? nodePos.x + myCards[i].width / 2 : nodePos.x + 38;
          if (nodePos.x - myCards[i].width / 2 < clickPos.x && clickPos.x < lastCardX) {
            if (!myCards[i].active) continue;
            var chooseArr = this.model.getChooseCards();
            for (var j = 0; j < chooseArr.length; j++) if (i == chooseArr[j]) {
              myCards[i].setPositionY(startPos);
              return;
            }
            for (var j = 0; j < this.model.chooseTempArr.length; j++) if (i == this.model.chooseTempArr[j]) return;
            myCards[i].setPositionY(choosePos);
            this.model.chooseTempArr.push(i);
            console.log("中间存储变量", this.model.chooseTempArr);
          }
        }
      };
      SssSeatCtrl.prototype.clickEnd = function() {
        var myCards = this.ui.node_myCards.children;
        cc.log("chooseTempArr", this.model.chooseTempArr);
        cc.log("arrChooseCard", this.model.arrChooseCard);
        if (this.model.arrChooseCard.length != this.model.chooseTempArr.length) {
          this.model.chooseTempArr = [];
          this.view.allCardHoming("hand");
          for (var i = 0; i < this.model.arrChooseCard.length; ++i) {
            this.model.chooseTempArr.push(this.model.arrChooseCard[i]);
            myCards[this.model.arrChooseCard[i]].setPositionY(choosePos);
          }
        }
        cc.log("chooseTempArr", this.model.chooseTempArr);
        cc.log("arrChooseCard", this.model.arrChooseCard);
      };
      SssSeatCtrl.prototype.chooseMyCardEnd = function() {
        var count = this.model.arrChooseCard.length;
        var cards = this.ui.node_myCards.children;
        cc.log("tempArr", this.model.chooseTempArr);
        cc.log("selArr", this.model.arrChooseCard);
        for (var i = 0; i < count; i++) for (var k = 0; k < this.model.chooseTempArr.length; k++) {
          var index = this.model.chooseTempArr[k];
          if (this.model.arrChooseCard[i] == index && cards[index].getPositionY() == startPos) {
            console.log("从arrChooseCard中删除选中的卡牌");
            delete this.model.arrChooseCard[i];
            this.model.chooseTempArr.splice(k, 1);
            break;
          }
        }
        cc.log("tempArr2", this.model.chooseTempArr);
        cc.log("selArr2", this.model.arrChooseCard);
        for (var i = 0; i < 13; i++) {
          console.log("是不是这里移除了", this.model.arrChooseCard);
          for (var j = 0; j < this.model.arrChooseCard.length; j++) if (!this.model.arrChooseCard[j] && 0 != this.model.arrChooseCard[j]) {
            this.model.arrChooseCard.remove(j);
            break;
          }
        }
        cc.log(this.model.chooseTempArr);
        cc.log(this.model.arrChooseCard);
        for (var i = 0; i < this.model.chooseTempArr.length; i++) {
          if (this.model.arrChooseCard[i] || 0 == this.model.arrChooseCard[i]) continue;
          this.model.addChooseCard(this.model.chooseTempArr[i]);
        }
        0 == this.model.arrChooseCard.length && this.view.allCardHoming("hand");
        console.log("this.model.arrChooseCard", this.model.arrChooseCard);
      };
      SssSeatCtrl.prototype.clickMyCard = function(index, value) {
        var typeName = [ "upPier", "midPier", "downPier" ];
        for (var i = 0; i < this.model.selArr.length; i++) if (0 != this.model.selArr[i].length) {
          this.model.selArr[i] = [];
          this.model.moveTempArr[i] = [];
          console.log("clear selArr", this.model.selArr[i]);
          console.log("clear moveTempArr", this.model.moveTempArr[i]);
          var cards = this.ui["node_" + typeName[i]].children;
          this.view.cardHoming(cards);
        }
        var myCards = this.ui.node_myCards.children;
        var chooseCards = this.model.getChooseCards();
        myCards[index].setPositionY(choosePos);
        for (var i = 0; i < chooseCards.length; i++) if (chooseCards[i] == index) {
          myCards[index].setPositionY(startPos);
          this.model.chooseTempArr.remove(i);
          this.model.removeChooseCard(chooseCards[i]);
          console.log("点击选中的牌移除chooseCards", this.model.getChooseCards());
          console.log("处理对应的tempArr的数据", this.model.chooseTempArr);
          return;
        }
        this.model.addChooseCard(index);
        this.model.chooseTempArr.push(index);
        console.log("chooseTempArr数据", this.model.chooseTempArr);
        console.log("点击选中的牌加入chooseCards", this.model.getChooseCards());
      };
      SssSeatCtrl.prototype.clickCardBgs = function(type, index, value) {
        var typeName = [ "upPier", "midPier", "downPier" ];
        var chooseCards = this.model.getChooseCards();
        var cardBgs = this.ui["node_" + typeName[type]].children;
        console.log("value", value);
        if (!value && !chooseCards.length) return;
        if (value && !chooseCards.length) {
          for (var i = 0; i < this.model.selArr[type].length; i++) if (this.model.selArr[type][i] == index) {
            var newColor = new cc.Color(240, 241, 162);
            cardBgs[index].getChildByName("card").color = this.model[typeName[type]][index] == this.model.maCard ? newColor : cc.Color.WHITE;
            this.model.selArr[type].remove(i);
            this.model.moveTempArr[type].remove(i);
            return;
          }
          var pokerNode = cardBgs[index].getChildByName("card");
          pokerNode.color = cc.Color.GRAY;
          this.model.moveTempArr[type].push(index);
          this.model.addChangeDT(type, index);
          if (this.model.bChangePierData) {
            this.view.allAutoBtnShow();
            this.model.bChangePierData = false;
          }
          this.view.configComplete();
          this.view.refUpPierCard();
          this.view.refMidPierCard();
          this.view.refDownPierCard();
          var selArr = this.model.selArr;
          var homingCards = [];
          for (var i = 0; i < selArr.length; i++) if (!selArr[i].length && 0 != this.model[typeName[i]].length) {
            homingCards = this.ui["node_" + typeName[i]].children;
            this.view.cardHoming(homingCards);
          }
          0 == this.model.selArr[dunType.upPier].length && 0 == this.model.selArr[dunType.midPier].length && 0 == this.model.selArr[dunType.downPier].length && this.view.allCardHoming("pier");
          console.log("click selArr-0", this.model.selArr[0]);
          console.log("click selArr-1", this.model.selArr[1]);
          console.log("click selArr-2", this.model.selArr[2]);
        }
        if (!chooseCards.length) return;
        var chooseCardsData = [];
        for (var i = 0; i < chooseCards.length; i++) chooseCardsData.push(this.model.handCards[chooseCards[i]]);
        SssAudio_1.default.getInstance().playGameAddToPier();
        this.model.addToPier(chooseCardsData, cardBgs.length, typeName[type], index);
        for (var i = 0; i < chooseCardsData.length; i++) {
          console.log(chooseCardsData[i]);
          this.model.removeHandCards(chooseCardsData[i]);
        }
        this.addToCardBgs(dunType[typeName[type]], cardBgs);
        var completeCount = 0;
        var isComplete = [ 0, 0, 0 ];
        for (var i = 0; i < 3; ++i) if (0 == i && 3 == this.model[typeName[i]].length) {
          isComplete[i] = 1;
          completeCount++;
        } else if (5 == this.model[typeName[i]].length) {
          isComplete[i] = 1;
          completeCount++;
        }
        if (2 == completeCount) {
          for (var i = 0; i < isComplete.length; i++) if (0 == isComplete[i]) {
            var cardBgs_1 = this.ui["node_" + typeName[i]].children;
            var count = this.model[typeName[i]].length;
            this.model.addToPier(this.model.handCards, cardBgs_1.length, typeName[i], count);
          }
          this.model.clearHandCards();
          this.view.refHandCard();
          this.view.refManulBtnShow();
          this.view.configComplete();
          this.view.refUpPierCard();
          this.view.refMidPierCard();
          this.view.refDownPierCard();
          this.view.allCardHoming("hand");
        }
      };
      SssSeatCtrl.prototype.addToCardBgs = function(type, cardBgs) {
        var pierData = this.model.getPierData(type);
        console.log("aaaaaaaaaaaaaaaaa", pierData);
        console.log("addToCardBgs", pierData);
        for (var i = 0; i < pierData.length; i++) {
          cardBgs[i].getChildByName("card").active = true;
          var spriteName = "bull1_" + pierData[i];
          var newFrame = this.ui.pokerAtlas.getSpriteFrame(spriteName);
          cardBgs[i].getChildByName("card").getComponent(cc.Sprite).spriteFrame = newFrame;
        }
        this.view.refHandCard();
        this.view.refManulBtnShow();
        this.view.configComplete();
        this.view.refUpPierCard();
        this.view.refMidPierCard();
        this.view.refDownPierCard();
        this.view.allCardHoming("hand");
        this.model.clearChooseCard();
        this.model.chooseTempArr = [];
        this.model.allClickCountZero();
      };
      SssSeatCtrl.prototype.autoBtnCB = function(index) {
        var tempArr = [ "upPier", "midPier", "downPier" ];
        for (var i = 0; i < 3; i++) {
          if (0 == i && 5 == this.model.topTenCardGroup[index][i].length) {
            this.model.topTenCardGroup[index][i].pop();
            this.model.topTenCardGroup[index][i].pop();
          }
          SssLib_1.SssLib.memcpy(this.model[tempArr[i]], this.model.topTenCardGroup[index][i], this.model.topTenCardGroup[index][i].length);
          console.log("this.model.topTenCardGroup", i, this.model.topTenCardGroup[index][i]);
        }
        console.log("this.model.upPier", this.model.upPier);
        console.log("this.model.midPier", this.model.midPier);
        console.log("this.model.downPier", this.model.downPier);
        this.model.clearHandCards();
        this.model.clearChooseCard();
        this.model.chooseTempArr = [];
        this.model.moveTempArr = [ [], [], [] ];
        this.view.configComplete();
        this.view.allCardHoming("hand");
        this.view.refManulBtnShow();
        this.view.refHandCard();
        this.view.refUpPierCard();
        this.view.refMidPierCard();
        this.view.refDownPierCard();
        this.view.refAutoBtnShow(index + 1);
      };
      SssSeatCtrl.prototype.onePareCB = function(event) {
        var myCards = this.ui.node_myCards.children;
        var countNum = 2;
        var startIndex = 0;
        0 == this.model.onePareCC && this.model.allClickCountZero();
        startIndex += countNum * this.model.onePareCC;
        var typeInfo = this.model.sssCard.GetType(this.model.handCards, this.model.handCards.length);
        var onePare = typeInfo.cbOnePare;
        for (var i = 0; i < myCards.length; i++) myCards[i].setPositionY(startPos);
        this.model.arrChooseCard = [];
        this.model.chooseTempArr = [];
        if (0 == onePare[startIndex] && 0 == onePare[startIndex + 1]) {
          this.model.onePareCC = 0;
          return;
        }
        console.log("本次索引起始位置", startIndex);
        for (var i = startIndex; i < startIndex + countNum; i++) {
          var index = onePare[i];
          myCards[index].setPositionY(choosePos);
          this.model.addChooseCard(index);
          this.model.chooseTempArr.push(index);
        }
        console.log("select card by tips", this.model.arrChooseCard);
        this.model.onePareCC++;
      };
      SssSeatCtrl.prototype.twoPareCB = function(event) {
        var myCards = this.ui.node_myCards.children;
        var countNum = 4;
        var startIndex = 0;
        0 == this.model.twoPareCC && this.model.allClickCountZero();
        startIndex += countNum * this.model.twoPareCC;
        var typeInfo = this.model.sssCard.GetType(this.model.handCards, this.model.handCards.length);
        var twoPare = typeInfo.cbTwoPare;
        for (var i = 0; i < myCards.length; i++) myCards[i].setPositionY(startPos);
        this.model.arrChooseCard = [];
        this.model.chooseTempArr = [];
        if (0 == twoPare[startIndex] && 0 == twoPare[startIndex + 1]) {
          this.model.twoPareCC = 0;
          return;
        }
        console.log("本次索引起始位置", startIndex);
        for (var i = startIndex; i < startIndex + countNum; i++) {
          var index = twoPare[i];
          myCards[index].setPositionY(choosePos);
          this.model.addChooseCard(index);
          this.model.chooseTempArr.push(index);
        }
        console.log("select card by tips", this.model.arrChooseCard);
        this.model.twoPareCC++;
      };
      SssSeatCtrl.prototype.threeSameCB = function(event) {
        var myCards = this.ui.node_myCards.children;
        var countNum = 3;
        var startIndex = 0;
        0 == this.model.threeSameCC && this.model.allClickCountZero();
        startIndex += countNum * this.model.threeSameCC;
        var typeInfo = this.model.sssCard.GetType(this.model.handCards, this.model.handCards.length);
        var threeSame = typeInfo.cbThreeSame;
        for (var i = 0; i < myCards.length; i++) myCards[i].setPositionY(startPos);
        this.model.arrChooseCard = [];
        this.model.chooseTempArr = [];
        if (0 == threeSame[startIndex] && 0 == threeSame[startIndex + 1]) {
          this.model.threeSameCC = 0;
          return;
        }
        console.log("本次索引起始位置", startIndex);
        for (var i = startIndex; i < startIndex + countNum; i++) {
          var index = threeSame[i];
          myCards[index].setPositionY(choosePos);
          this.model.addChooseCard(index);
          this.model.chooseTempArr.push(index);
        }
        console.log("select card by tips", this.model.arrChooseCard);
        this.model.threeSameCC++;
      };
      SssSeatCtrl.prototype.straightCB = function(event) {
        var myCards = this.ui.node_myCards.children;
        var countNum = 5;
        var startIndex = 0;
        0 == this.model.straightCC && this.model.allClickCountZero();
        startIndex += countNum * this.model.straightCC;
        var typeInfo = this.model.sssCard.GetType(this.model.handCards, this.model.handCards.length);
        var straight = typeInfo.cbStraight;
        for (var i = 0; i < myCards.length; i++) myCards[i].setPositionY(startPos);
        this.model.arrChooseCard = [];
        this.model.chooseTempArr = [];
        if (0 == straight[startIndex] && 0 == straight[startIndex + 1]) {
          this.model.straightCC = 0;
          return;
        }
        console.log("本次索引起始位置", startIndex);
        for (var i = startIndex; i < startIndex + countNum; i++) {
          var index = straight[i];
          myCards[index].setPositionY(choosePos);
          this.model.addChooseCard(index);
          this.model.chooseTempArr.push(index);
        }
        console.log("select card by tips", this.model.arrChooseCard);
        this.model.straightCC++;
      };
      SssSeatCtrl.prototype.flushCB = function(event) {
        var myCards = this.ui.node_myCards.children;
        var countNum = 5;
        var startIndex = 0;
        0 == this.model.flushCC && this.model.allClickCountZero();
        startIndex += countNum * this.model.flushCC;
        var typeInfo = this.model.sssCard.GetType(this.model.handCards, this.model.handCards.length);
        var flush = typeInfo.cbFlush;
        for (var i = 0; i < myCards.length; i++) myCards[i].setPositionY(startPos);
        this.model.arrChooseCard = [];
        this.model.chooseTempArr = [];
        if (0 == flush[startIndex] && 0 == flush[startIndex + 1]) {
          this.model.flushCC = 0;
          return;
        }
        console.log("本次索引起始位置", startIndex);
        for (var i = startIndex; i < startIndex + countNum; i++) {
          var index = flush[i];
          myCards[index].setPositionY(choosePos);
          this.model.addChooseCard(index);
          this.model.chooseTempArr.push(index);
        }
        console.log("select card by tips", this.model.arrChooseCard);
        this.model.flushCC++;
      };
      SssSeatCtrl.prototype.groupCB = function(event) {
        var myCards = this.ui.node_myCards.children;
        var countNum = 5;
        var startIndex = 0;
        0 == this.model.groupCC && this.model.allClickCountZero();
        startIndex += countNum * this.model.groupCC;
        var typeInfo = this.model.sssCard.GetType(this.model.handCards, this.model.handCards.length);
        var gourd = typeInfo.cbGourd;
        for (var i = 0; i < myCards.length; i++) myCards[i].setPositionY(startPos);
        this.model.arrChooseCard = [];
        this.model.chooseTempArr = [];
        if (0 == gourd[startIndex] && 0 == gourd[startIndex + 1]) {
          this.model.groupCC = 0;
          return;
        }
        console.log("本次索引起始位置", startIndex);
        for (var i = startIndex; i < startIndex + countNum; i++) {
          var index = gourd[i];
          myCards[index].setPositionY(choosePos);
          this.model.addChooseCard(index);
          this.model.chooseTempArr.push(index);
        }
        console.log("select card by tips", this.model.arrChooseCard);
        this.model.groupCC++;
      };
      SssSeatCtrl.prototype.fourSameCB = function(event) {
        var myCards = this.ui.node_myCards.children;
        var countNum = 4;
        var startIndex = 0;
        0 == this.model.fourSameCC && this.model.allClickCountZero();
        startIndex += countNum * this.model.fourSameCC;
        var typeInfo = this.model.sssCard.GetType(this.model.handCards, this.model.handCards.length);
        var fourSame = typeInfo.cbFourSame;
        for (var i = 0; i < myCards.length; i++) myCards[i].setPositionY(startPos);
        this.model.arrChooseCard = [];
        this.model.chooseTempArr = [];
        if (0 == fourSame[startIndex] && 0 == fourSame[startIndex + 1]) {
          this.model.fourSameCC = 0;
          return;
        }
        console.log("本次索引起始位置", startIndex);
        for (var i = startIndex; i < startIndex + countNum; i++) {
          var index = fourSame[i];
          myCards[index].setPositionY(choosePos);
          this.model.addChooseCard(index);
          this.model.chooseTempArr.push(index);
        }
        console.log("select card by tips", this.model.arrChooseCard);
        console.log("chooseTempArr", this.model.chooseTempArr);
        this.model.fourSameCC++;
      };
      SssSeatCtrl.prototype.straightFlushCB = function(event) {
        var myCards = this.ui.node_myCards.children;
        var countNum = 5;
        var startIndex = 0;
        0 == this.model.straightFlushCC && this.model.allClickCountZero();
        startIndex += countNum * this.model.straightFlushCC;
        var typeInfo = this.model.sssCard.GetType(this.model.handCards, this.model.handCards.length);
        var straightFlush = typeInfo.cbStraightFlush;
        for (var i = 0; i < myCards.length; i++) myCards[i].setPositionY(startPos);
        this.model.arrChooseCard = [];
        this.model.chooseTempArr = [];
        if (0 == straightFlush[startIndex] && 0 == straightFlush[startIndex + 1]) {
          this.model.straightFlushCC = 0;
          return;
        }
        console.log("本次索引起始位置", startIndex);
        for (var i = startIndex; i < startIndex + countNum; i++) {
          var index = straightFlush[i];
          myCards[index].setPositionY(choosePos);
          this.model.addChooseCard(index);
          this.model.chooseTempArr.push(index);
        }
        console.log("select card by tips", this.model.arrChooseCard);
        this.model.straightFlushCC++;
      };
      SssSeatCtrl.prototype.fiveSameCB = function(event) {
        var myCards = this.ui.node_myCards.children;
        var countNum = 5;
        var startIndex = 0;
        0 == this.model.fiveSameCC && this.model.allClickCountZero();
        startIndex += countNum * this.model.fiveSameCC;
        var typeInfo = this.model.sssCard.GetType(this.model.handCards, this.model.handCards.length);
        var fiveSame = typeInfo.cbFiveSame;
        for (var i = 0; i < myCards.length; i++) myCards[i].setPositionY(startPos);
        this.model.arrChooseCard = [];
        this.model.chooseTempArr = [];
        if (0 == fiveSame[startIndex] && 0 == fiveSame[startIndex + 1]) {
          this.model.fiveSameCC = 0;
          return;
        }
        console.log("本次索引起始位置", startIndex);
        for (var i = startIndex; i < startIndex + countNum; i++) {
          var index = fiveSame[i];
          myCards[index].setPositionY(choosePos);
          this.model.addChooseCard(index);
          this.model.chooseTempArr.push(index);
        }
        console.log("select card by tips", this.model.arrChooseCard);
        this.model.fiveSameCC++;
      };
      SssSeatCtrl.prototype.specialConfirmCB = function() {
        console.log("specialConfirmCB", this.model.specialCard);
        var typeName = [ "upPier", "midPier", "downPier" ];
        var cardList = [ [], [], [] ];
        for (var i = 0; i < this.model.specialCard.length; i++) for (var j = 0; j < this.model.specialCard[i].length; j++) cardList[i].push(this.model.specialCard[i][j]);
        console.log("发送给服务端的特殊牌型数据", cardList);
        SssLogic_1.default.getInstance().send_peipai(cardList, this.model.curSpecialType);
        this.finish();
      };
      SssSeatCtrl.prototype.specialCancelCB = function(event) {
        this.ui.specialRemindPanel.active = false;
      };
      SssSeatCtrl.prototype.onDissolutionRoom = function(msg) {
        msg.result && this.finish();
      };
      SssSeatCtrl.prototype.connector_entryHandler_enterRoom = function() {};
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "node_panel", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "node_remomentSet", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "node_myCards", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "node_cardRemind", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "node_upPier", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "node_midPier", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "node_downPier", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "node_replace", void 0);
      __decorate([ property(cc.SpriteAtlas) ], SssSeatCtrl.prototype, "pokerAtlas", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "autoBtn", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "manualBtn", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "autoBtnPanel", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "manualBtnPanel", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "confirmBtn", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "revokeBtn", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "pierCardType", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "btnDuizi", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "btnLiangDui", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "btnSanTiao", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "btnShunZi", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "btnTonghua", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "btnHulu", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "btnTiezhi", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "btnTonghuashun", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "btnWutong", void 0);
      __decorate([ property(cc.Label) ], SssSeatCtrl.prototype, "labIsAscending", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "specialRemindPanel", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "btnUseSpecial", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "btnCancelSpecial", void 0);
      __decorate([ property(cc.Node) ], SssSeatCtrl.prototype, "btnSpecial", void 0);
      __decorate([ property(cc.Label) ], SssSeatCtrl.prototype, "labClockTime", void 0);
      SssSeatCtrl = __decorate([ ccclass ], SssSeatCtrl);
      return SssSeatCtrl;
    }(BaseCtrl_1.default);
    exports.default = SssSeatCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/AudioMgr": "AudioMgr",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../../../Plat/Libs/LocalStorage": "LocalStorage",
    "../SssMgr/SssAudio": "SssAudio",
    "../SssMgr/SssCards": "SssCards",
    "../SssMgr/SssDef": "SssDef",
    "../SssMgr/SssLib": "SssLib",
    "../SssMgr/SssLogic": "SssLogic"
  } ],
  Prefab_TaskItemCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "31fd2VbpM5IT7x7evY/ecUU", "Prefab_TaskItemCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var TaskMgr_1 = require("../../GameMgrs/TaskMgr");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var ShareMgr_1 = require("../../GameMgrs/ShareMgr");
    var AppInfoMgr_1 = require("../../../AppStart/AppMgrs/AppInfoMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var IS_RECEIVE;
    (function(IS_RECEIVE) {
      IS_RECEIVE[IS_RECEIVE["noreceive"] = 0] = "noreceive";
      IS_RECEIVE[IS_RECEIVE["received"] = 1] = "received";
    })(IS_RECEIVE || (IS_RECEIVE = {}));
    var TASK_TYPE;
    (function(TASK_TYPE) {
      TASK_TYPE[TASK_TYPE["match"] = 2] = "match";
      TASK_TYPE[TASK_TYPE["winmatch"] = 3] = "winmatch";
      TASK_TYPE[TASK_TYPE["share"] = 4] = "share";
    })(TASK_TYPE || (TASK_TYPE = {}));
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.task = null;
        _this.bReceive = false;
        _this.inviteInfo = null;
        _this.task = TaskMgr_1.default.getInstance().getTaskItemInfo();
        _this.bReceive = _this.task.is_receive == IS_RECEIVE.received;
        _this.inviteInfo = ShareMgr_1.default.getInstance().getShareTaskData();
        return _this;
      }
      Model.prototype.refTaskInfo = function(data) {
        this.task = data;
        this.bReceive = this.task.is_receive == IS_RECEIVE.received;
        this.inviteInfo = ShareMgr_1.default.getInstance().getShareTaskData();
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          taskName: ctrl.taskName,
          taskLbl: ctrl.taskLbl,
          taskPb: ctrl.taskPb,
          rewardCount: ctrl.rewardCount,
          goBtn: ctrl.goBtn,
          recBtn: ctrl.recBtn,
          recLab: ctrl.recLab
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.refreshBtnUI();
      };
      View.prototype.refreshBtnUI = function() {
        var taskInfo = this.model.task;
        this.ui.taskName.string = taskInfo.name;
        this.ui.taskLbl.string = taskInfo.step + "/" + taskInfo.target;
        this.ui.taskPb.progress = taskInfo.step / taskInfo.target;
        this.ui.rewardCount.string = taskInfo.amount;
        console.log("reftaskInfo", this.model.task);
        this.ui.recLab.active = this.model.bReceive;
        var isReceive = this.model.task.is_receive;
        if (isReceive == IS_RECEIVE.received) {
          this.ui.goBtn.active = false;
          this.ui.recBtn.active = false;
          return;
        }
        this.ui.goBtn.active = taskInfo.step != taskInfo.target;
        this.ui.recBtn.active = taskInfo.step == taskInfo.target;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_TaskItemCtrl = function(_super) {
      __extends(Prefab_TaskItemCtrl, _super);
      function Prefab_TaskItemCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.taskName = null;
        _this.taskLbl = null;
        _this.taskPb = null;
        _this.rewardCount = null;
        _this.goBtn = null;
        _this.recBtn = null;
        _this.recLab = null;
        return _this;
      }
      Prefab_TaskItemCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_TaskItemCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqDailyActivityReceive": this.http_reqDailyActivityReceive,
          "http.reqDailyActivity": this.http_reqDailyActivity,
          "http.reqDailyShare": this.http_reqDailyShare
        };
      };
      Prefab_TaskItemCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_TaskItemCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.goBtn, this.goBtnCB, "点击前往任务");
        this.connect(G_UiType.button, this.ui.recBtn, this.recBtnCB, "领取奖励");
      };
      Prefab_TaskItemCtrl.prototype.start = function() {};
      Prefab_TaskItemCtrl.prototype.http_reqDailyActivityReceive = function(msg) {
        console.log("http_reqDailyActivityReceive", msg);
        var tipString = msg.msg;
        if (msg.reward_type == this.model.task.reward_type) {
          FrameMgr_1.default.getInstance().showTips(tipString, null, 35, cc.color(220, 24, 63), cc.p(0, 0), "Arial", 1500);
          TaskMgr_1.default.getInstance().reqDailyActivity();
        }
      };
      Prefab_TaskItemCtrl.prototype.http_reqDailyActivity = function(msg) {
        console.log("http_reqDailyActivity", msg);
        var task = null;
        for (var i = 0; i < msg.length; i++) msg[i].reward_type == this.model.task.reward_type && (task = msg[i]);
        console.log("task_reward_type", task.reward_type);
        console.log("task_target", task.target);
        console.log("task_name", task.name);
        console.log("task_step", task.step);
        console.log("task_is_receive", task.is_receive);
        this.model.refTaskInfo(task);
        this.view.refreshBtnUI();
        if (this.model.bReceive) {
          var parentNode = this.node.parent;
          this.node.removeFromParent();
          this.node.parent = parentNode;
        }
      };
      Prefab_TaskItemCtrl.prototype.http_reqDailyShare = function(msg) {
        console.log("http_reqDailyShare", msg);
        TaskMgr_1.default.getInstance().reqDailyActivity();
      };
      Prefab_TaskItemCtrl.prototype.goBtnCB = function() {
        var type = this.model.task.reward_type;
        if (type == TASK_TYPE.match || type == TASK_TYPE.winmatch) {
          this.start_sub_module(G_MODULE.createRoom);
          TaskMgr_1.default.getInstance().closeTaskPanel();
        }
        if (cc.sys.isNative && type == TASK_TYPE.share) {
          var appname = AppInfoMgr_1.default.getInstance().getAppName();
          G_PLATFORM.wxShareContent(G_PLATFORM.WX_SHARE_TYPE.WXSceneTimeline, "《" + appname + "》", "正宗泉州麻将，iphone X免费领，每天登录送现金", this.model.inviteInfo.url);
        }
      };
      Prefab_TaskItemCtrl.prototype.recBtnCB = function() {
        console.log("rewardtype", this.model.task.reward_type);
        TaskMgr_1.default.getInstance().reqDailyActivityReceive(this.model.task.reward_type);
      };
      __decorate([ property({
        tooltip: "任务名",
        type: cc.Label
      }) ], Prefab_TaskItemCtrl.prototype, "taskName", void 0);
      __decorate([ property({
        tooltip: "任务进度",
        type: cc.Label
      }) ], Prefab_TaskItemCtrl.prototype, "taskLbl", void 0);
      __decorate([ property({
        tooltip: "任务进度条",
        type: cc.ProgressBar
      }) ], Prefab_TaskItemCtrl.prototype, "taskPb", void 0);
      __decorate([ property({
        tooltip: "奖励数目",
        type: cc.Label
      }) ], Prefab_TaskItemCtrl.prototype, "rewardCount", void 0);
      __decorate([ property({
        tooltip: "前往按钮",
        type: cc.Node
      }) ], Prefab_TaskItemCtrl.prototype, "goBtn", void 0);
      __decorate([ property({
        tooltip: "领取按钮",
        type: cc.Node
      }) ], Prefab_TaskItemCtrl.prototype, "recBtn", void 0);
      __decorate([ property({
        tooltip: "已领取字样",
        type: cc.Node
      }) ], Prefab_TaskItemCtrl.prototype, "recLab", void 0);
      Prefab_TaskItemCtrl = __decorate([ ccclass ], Prefab_TaskItemCtrl);
      return Prefab_TaskItemCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_TaskItemCtrl;
    cc._RF.pop();
  }, {
    "../../../AppStart/AppMgrs/AppInfoMgr": "AppInfoMgr",
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/ShareMgr": "ShareMgr",
    "../../GameMgrs/TaskMgr": "TaskMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_TaskPanelCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c15eeMLzMFHfJ0ucaPDITdi", "Prefab_TaskPanelCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.announceItems = null;
        _this.isGetReward = null;
        _this.announceItems = [ {
          name: "每日任务"
        }, {
          name: "分享有礼"
        }, {
          name: "关注微信号"
        }, {
          name: "首充礼包"
        } ];
        _this.updateGetReward();
        return _this;
      }
      Model.prototype.updateGetReward = function() {
        this.isGetReward = UserMgr_1.default.getInstance().getMyInfo().is_first_recharge;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          closeBtn: ctrl.closeBtn,
          imgTitle: ctrl.imgTitle,
          btnPanel: ctrl.btnPanel,
          contentPanel: ctrl.contentPanel,
          leftBtn: ctrl.leftBtn,
          prefab_task: ctrl.taskPanel,
          prefab_invite: ctrl.invitePanel,
          prefab_wechat: ctrl.weChatPanel,
          prefab_charge: ctrl.chargePanel,
          arrSprf: ctrl.arrSprf,
          btnItems: []
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.model.announceItems.splice(this.model.announceItems.length - 1);
        this.model.announceItems.splice(this.model.announceItems.length - 1);
        for (var i = 0; i < this.model.announceItems.length; ++i) {
          var itemInfo = this.model.announceItems[i];
          var pre_btn = cc.instantiate(this.ui.leftBtn);
          pre_btn.getChildByName("background").getChildByName("label").getComponent(cc.Label).string = itemInfo.name;
          pre_btn.getChildByName("checkmark").getChildByName("label").getComponent(cc.Label).string = itemInfo.name;
          pre_btn.active = true;
          this.ui.btnPanel.addChild(pre_btn);
          this.ui.btnItems.push(pre_btn);
        }
        this.initPage(0);
      };
      View.prototype.initPage = function(index) {
        this.ui.contentPanel.children[0] && this.ui.contentPanel.children[0].removeFromParent();
        var type;
        switch (index) {
         case 0:
          type = "task";
          break;

         case 1:
          type = "invite";
          break;

         case 2:
          type = "wechat";
          break;

         case 3:
          type = "charge";
        }
        var page = cc.instantiate(this.ui["prefab_" + type]);
        page.parent = this.ui.contentPanel;
        this.ui.imgTitle.spriteFrame = this.ui.arrSprf[index];
      };
      return View;
    }(BaseView_1.default);
    var Prefab_TaskPanelCtrl = function(_super) {
      __extends(Prefab_TaskPanelCtrl, _super);
      function Prefab_TaskPanelCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.closeBtn = null;
        _this.imgTitle = null;
        _this.btnPanel = null;
        _this.contentPanel = null;
        _this.leftBtn = null;
        _this.taskPanel = null;
        _this.invitePanel = null;
        _this.weChatPanel = null;
        _this.chargePanel = null;
        _this.arrSprf = [];
        return _this;
      }
      Prefab_TaskPanelCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_TaskPanelCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqMyInfo": this.http_reqMyInfo
        };
      };
      Prefab_TaskPanelCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          closeActivityModule: this.annClose
        };
      };
      Prefab_TaskPanelCtrl.prototype.connectUi = function() {
        var _loop_1 = function(i) {
          var cb = function() {
            this.clickLeftBtnCb(i);
          };
          this_1.connect(G_UiType.button, this_1.ui.btnItems[i], cb, "切换公告页");
        };
        var this_1 = this;
        for (var i = 0; i < this.ui.btnItems.length; ++i) _loop_1(i);
        this.connect(G_UiType.button, this.ui.closeBtn, this.annClose, "关闭公告");
      };
      Prefab_TaskPanelCtrl.prototype.http_reqMyInfo = function() {
        this.model.updateGetReward();
      };
      Prefab_TaskPanelCtrl.prototype.setFirstRecharge = function() {
        this.view.initPage(3);
        this.view.ui.btnItems[3].getComponent(cc.Toggle).check();
      };
      Prefab_TaskPanelCtrl.prototype.clickLeftBtnCb = function(index) {
        this.view.initPage(index);
      };
      Prefab_TaskPanelCtrl.prototype.annClose = function() {
        this.finish();
      };
      __decorate([ property({
        tooltip: "关闭公告按钮",
        type: cc.Node
      }) ], Prefab_TaskPanelCtrl.prototype, "closeBtn", void 0);
      __decorate([ property({
        tooltip: "标题",
        type: cc.Sprite
      }) ], Prefab_TaskPanelCtrl.prototype, "imgTitle", void 0);
      __decorate([ property({
        tooltip: "左侧按钮容器",
        type: cc.Node
      }) ], Prefab_TaskPanelCtrl.prototype, "btnPanel", void 0);
      __decorate([ property({
        tooltip: "界面容器",
        type: cc.Node
      }) ], Prefab_TaskPanelCtrl.prototype, "contentPanel", void 0);
      __decorate([ property({
        tooltip: "左侧按钮预制",
        type: cc.Node
      }) ], Prefab_TaskPanelCtrl.prototype, "leftBtn", void 0);
      __decorate([ property({
        tooltip: "每日活动预制",
        type: cc.Prefab
      }) ], Prefab_TaskPanelCtrl.prototype, "taskPanel", void 0);
      __decorate([ property({
        tooltip: "邀请好友预制",
        type: cc.Prefab
      }) ], Prefab_TaskPanelCtrl.prototype, "invitePanel", void 0);
      __decorate([ property({
        tooltip: "关注微信号预制",
        type: cc.Prefab
      }) ], Prefab_TaskPanelCtrl.prototype, "weChatPanel", void 0);
      __decorate([ property({
        tooltip: "首充礼包预制",
        type: cc.Prefab
      }) ], Prefab_TaskPanelCtrl.prototype, "chargePanel", void 0);
      __decorate([ property({
        tooltip: "标题",
        type: [ cc.SpriteFrame ]
      }) ], Prefab_TaskPanelCtrl.prototype, "arrSprf", void 0);
      Prefab_TaskPanelCtrl = __decorate([ ccclass ], Prefab_TaskPanelCtrl);
      return Prefab_TaskPanelCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_TaskPanelCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_Tbnn_roomInfoCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cc50eaTSItKUr59rJR7lBOY", "Prefab_Tbnn_roomInfoCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var LocalStorage_1 = require("../../Plat/Libs/LocalStorage");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SETTLERULE = {
      0: "牛牛X4/牛九X3/牛八X2/牛七X2",
      1: "牛牛X3/牛九X2/牛八X2"
    };
    var ctrl;
    var BullConst = null;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        BullConst = RoomMgr_1.default.getInstance().getDef();
        var room = RoomMgr_1.default.getInstance();
        _this.gamename = room.getGameName();
        _this.roomInfo = RoomMgr_1.default.getInstance().getFangKaCfg();
        _this.roundCount = _this.roomInfo.v_roundcount;
        _this.minChip = _this.roomInfo.v_minChip;
        _this.wanglaiLimit = _this.roomInfo.v_wanglaiLimit;
        _this.settleRule = _this.roomInfo.v_settleRule;
        return _this;
      }
      Model.prototype.initBGState = function() {
        this.bgState = LocalStorage_1.default.getInstance().getBullRoomBGCfg();
        if (!this.bgState) {
          this.bgState = 1;
          LocalStorage_1.default.getInstance().setBullRoomBGCfg(this.bgState);
        }
      };
      Model.prototype.isFontan = function() {
        var room = RoomMgr_1.default.getInstance();
        room.isGameStarted() || !room.isFirstRound() ? this.isAn = true : this.isAn = false;
        return this.isAn;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_label1: null,
          node_label2: null,
          node_label3: null,
          node_label4: null,
          font_an_lan: null,
          font_an_lv: null,
          font_liang_lan: null,
          font_liang_lv: null
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_label1 = ctrl.node_label1;
        this.ui.node_label2 = ctrl.node_label2;
        this.ui.node_label3 = ctrl.node_label3;
        this.ui.node_label4 = ctrl.node_label4;
        this.ui.font_an_lan = ctrl.font_an_lan;
        this.ui.font_an_lv = ctrl.font_an_lv;
        this.ui.font_liang_lan = ctrl.font_liang_lan;
        this.ui.font_liang_lv = ctrl.font_liang_lv;
        this.initRoomInfo();
      };
      View.prototype.initRoomInfo = function() {
        var string = this.model.gamename + "-" + this.model.roundCount + "局";
        this.ui.node_label1.getComponent(cc.Label).string = string;
        string = "底分：" + this.model.minChip;
        this.ui.node_label2.getComponent(cc.Label).string = string;
        string = 1 == this.model.wanglaiLimit ? "王癞玩法" : "";
        this.ui.node_label4.getComponent(cc.Label).string = string;
        string = 0 == this.model.settleRule ? SETTLERULE["0"] : SETTLERULE["1"];
        this.ui.node_label3.getComponent(cc.Label).string = string;
        this.updateFont();
        0 == this.model.wanglaiLimit ? this.ui.node_label2.x = 0 : this.ui.node_label2.x = -96;
      };
      View.prototype.updateFont = function() {
        this.model.initBGState();
        var state = this.model.bgState;
        if (1 != state || this.model.isFontan()) if (2 != state || this.model.isFontan()) {
          if (1 == state && this.model.isFontan()) {
            this.ui.node_label1.getComponent(cc.Label).font = this.ui.font_an_lv;
            this.ui.node_label2.getComponent(cc.Label).font = this.ui.font_an_lv;
            this.ui.node_label3.getComponent(cc.Label).font = this.ui.font_an_lv;
            this.ui.node_label4.getComponent(cc.Label).font = this.ui.font_an_lv;
          } else if (2 == state && this.model.isFontan()) {
            this.ui.node_label1.getComponent(cc.Label).font = this.ui.font_an_lan;
            this.ui.node_label2.getComponent(cc.Label).font = this.ui.font_an_lan;
            this.ui.node_label3.getComponent(cc.Label).font = this.ui.font_an_lan;
            this.ui.node_label4.getComponent(cc.Label).font = this.ui.font_an_lan;
          }
        } else {
          this.ui.node_label1.getComponent(cc.Label).font = this.ui.font_liang_lan;
          this.ui.node_label2.getComponent(cc.Label).font = this.ui.font_liang_lan;
          this.ui.node_label3.getComponent(cc.Label).font = this.ui.font_liang_lan;
          this.ui.node_label4.getComponent(cc.Label).font = this.ui.font_liang_lan;
        } else {
          this.ui.node_label1.getComponent(cc.Label).font = this.ui.font_liang_lv;
          this.ui.node_label2.getComponent(cc.Label).font = this.ui.font_liang_lv;
          this.ui.node_label3.getComponent(cc.Label).font = this.ui.font_liang_lv;
          this.ui.node_label4.getComponent(cc.Label).font = this.ui.font_liang_lv;
        }
      };
      return View;
    }(BaseView_1.default);
    var Prefab_Tbnn_roomInfoCtrl = function(_super) {
      __extends(Prefab_Tbnn_roomInfoCtrl, _super);
      function Prefab_Tbnn_roomInfoCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_label1 = null;
        _this.node_label2 = null;
        _this.node_label4 = null;
        _this.node_label3 = null;
        _this.font_liang_lv = null;
        _this.font_liang_lan = null;
        _this.font_an_lv = null;
        _this.font_an_lan = null;
        return _this;
      }
      Prefab_Tbnn_roomInfoCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_Tbnn_roomInfoCtrl.prototype.defineNetEvents = function() {
        this.n_events[BullConst.clientEvent.onStart] = this.onStart;
        this.n_events["connector.entryHandler.enterRoom"] = this.onMyEnterRoom;
      };
      Prefab_Tbnn_roomInfoCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          setRoomInfoFont: this.setRoomInfoFont
        };
      };
      Prefab_Tbnn_roomInfoCtrl.prototype.connectUi = function() {};
      Prefab_Tbnn_roomInfoCtrl.prototype.start = function() {};
      Prefab_Tbnn_roomInfoCtrl.prototype.onStart = function(msg) {
        this.view.updateFont();
      };
      Prefab_Tbnn_roomInfoCtrl.prototype.onMyEnterRoom = function() {
        this.view.updateFont();
      };
      Prefab_Tbnn_roomInfoCtrl.prototype.setRoomInfoFont = function() {
        this.view.updateFont();
      };
      __decorate([ property({
        type: cc.Node,
        displayName: "游戏名+局数"
      }) ], Prefab_Tbnn_roomInfoCtrl.prototype, "node_label1", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "底分"
      }) ], Prefab_Tbnn_roomInfoCtrl.prototype, "node_label2", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "王癞"
      }) ], Prefab_Tbnn_roomInfoCtrl.prototype, "node_label4", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "翻倍"
      }) ], Prefab_Tbnn_roomInfoCtrl.prototype, "node_label3", void 0);
      __decorate([ property({
        type: cc.Font,
        displayName: "亮-绿"
      }) ], Prefab_Tbnn_roomInfoCtrl.prototype, "font_liang_lv", void 0);
      __decorate([ property({
        type: cc.Font,
        displayName: "亮-蓝"
      }) ], Prefab_Tbnn_roomInfoCtrl.prototype, "font_liang_lan", void 0);
      __decorate([ property({
        type: cc.Font,
        displayName: "暗-绿"
      }) ], Prefab_Tbnn_roomInfoCtrl.prototype, "font_an_lv", void 0);
      __decorate([ property({
        type: cc.Font,
        displayName: "暗-蓝"
      }) ], Prefab_Tbnn_roomInfoCtrl.prototype, "font_an_lan", void 0);
      Prefab_Tbnn_roomInfoCtrl = __decorate([ ccclass ], Prefab_Tbnn_roomInfoCtrl);
      return Prefab_Tbnn_roomInfoCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_Tbnn_roomInfoCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "../../Plat/Libs/LocalStorage": "LocalStorage"
  } ],
  Prefab_TranningCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e42devWZxREFrWyDdYg8Vi2", "Prefab_TranningCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BetMgr_1 = require("../../GameMgrs/BetMgr");
    var VerifyMgr_1 = require("../../GameMgrs/VerifyMgr");
    var RoomMgr_1 = require("../../GameMgrs/RoomMgr");
    var GameCateCfg_1 = require("../../CfgMgrs/GameCateCfg");
    var JbcCfg_1 = require("../../CfgMgrs/JbcCfg");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.curGameItem = null;
        _this.curBetItem = null;
        _this.games = null;
        _this.bets = null;
        _this.games = GameCateCfg_1.default.getInstance().getGames();
        var gameid = BetMgr_1.default.getInstance().getGameId();
        var index = GameCateCfg_1.default.getInstance().getGameIndex(gameid);
        _this.updateGameSel(index);
        return _this;
      }
      Model.prototype.updateGameSel = function(index) {
        var item = this.games[index];
        if (!item) return false;
        this.curGameItem = this.games[index];
        this.bets = JbcCfg_1.default.getInstance().getCfgByGameCode(this.curGameItem.code);
        return true;
      };
      Model.prototype.updateBetSel = function(index) {
        this.curBetItem = this.bets[index];
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          betList: null,
          gameList: null,
          quickStartBtn: null,
          gameItem: null,
          betItem: null,
          curGameName: null,
          CloseBtn: null,
          btnGameItems: [],
          btnBetItems: []
        };
        _this.node = null;
        _this.model = null;
        _this.node = ctrl.node;
        _this.model = model;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.betList = ctrl.prefab_betlist;
        this.ui.gameList = ctrl.gamelist;
        this.ui.quickStartBtn = ctrl.QuickStartBtn;
        this.ui.gameItem = ctrl.prefab_gameitem;
        this.ui.betItem = ctrl.prefab_betitem;
        this.ui.curGameName = ctrl.curGameName;
        this.ui.CloseBtn = ctrl.CloseBtn;
        for (var i = 0; i < this.model.games.length; ++i) {
          var item = this.model.games[i];
          var prefabNode = cc.instantiate(this.ui.gameItem);
          prefabNode.getChildByName("label_Name").getComponent(cc.Label).string = item.name;
          this.ui.gameList.addChild(prefabNode);
          this.ui.btnGameItems.push(prefabNode);
        }
        this.updateBets();
      };
      View.prototype.updateBets = function() {
        this.ui.betList.removeAllChildren();
        this.ui.btnBetItems = [];
        for (var i = 0; i < this.model.bets.length; ++i) {
          console.log("绘制了");
          var item = this.model.bets[i];
          var prefabNode = cc.instantiate(this.ui.betItem);
          prefabNode.getChildByName("label_Name").getComponent(cc.Label).string = item.name;
          this.ui.betList.addChild(prefabNode);
          this.ui.btnBetItems.push(prefabNode);
        }
      };
      return View;
    }(BaseView_1.default);
    var Prefab_TranningCtrl = function(_super) {
      __extends(Prefab_TranningCtrl, _super);
      function Prefab_TranningCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.gamelist = null;
        _this.QuickStartBtn = null;
        _this.CloseBtn = null;
        _this.curGameName = null;
        _this.prefab_gameitem = null;
        _this.prefab_betitem = null;
        _this.prefab_betlist = null;
        return _this;
      }
      Prefab_TranningCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_TranningCtrl.prototype.defineNetEvents = function() {};
      Prefab_TranningCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_TranningCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.quickStartBtn, this.quickStartBtnCb, "快速游戏");
        this.connect(G_UiType.image, this.ui.CloseBtn, this.closeBtnBtnCb, "退出");
        var _loop_1 = function(i) {
          var btn = this_1.ui.btnGameItems[i];
          var cb = function() {
            this.choseGame(i);
          };
          this_1.connect(G_UiType.image, btn, cb, "选择游戏");
        };
        var this_1 = this;
        for (var i = 0; i < this.ui.btnGameItems.length; ++i) _loop_1(i);
        var _loop_2 = function(i) {
          var btn = this_2.ui.btnBetItems[i];
          var cb = function() {
            this.choseBet(i);
          };
          this_2.connect(G_UiType.image, btn, cb, "选择底注");
        };
        var this_2 = this;
        for (var i = 0; i < this.ui.btnBetItems.length; ++i) _loop_2(i);
      };
      Prefab_TranningCtrl.prototype.choseBet = function(index) {
        this.model.updateBetSel(index);
        var bettype = this.model.curBetItem.bettype;
        BetMgr_1.default.getInstance().setBetType(bettype);
        this.JoinGoldRoom();
      };
      Prefab_TranningCtrl.prototype.choseGame = function(index) {
        var ret = this.model.updateGameSel(index);
        this.ui.curGameName.string = this.model.games[index].name;
        if (!ret) return;
        this.view.updateBets();
        this.connectUi();
      };
      Prefab_TranningCtrl.prototype.connectUiByNode = function(node, type, cb, op) {
        this.connect(type, node, cb, op);
      };
      Prefab_TranningCtrl.prototype.start = function() {};
      Prefab_TranningCtrl.prototype.quickStartBtnCb = function() {
        BetMgr_1.default.getInstance().setBetType(1);
        this.JoinGoldRoom();
      };
      Prefab_TranningCtrl.prototype.closeBtnBtnCb = function() {
        this.finish();
      };
      Prefab_TranningCtrl.prototype.JoinGoldRoom = function() {
        BetMgr_1.default.getInstance().setGameId(this.model.curGameItem.id);
        var ret = VerifyMgr_1.default.getInstance().checkCoin();
        if (!ret) return;
        RoomMgr_1.default.getInstance().reqRoomVerify(false);
      };
      __decorate([ property(cc.Node) ], Prefab_TranningCtrl.prototype, "gamelist", void 0);
      __decorate([ property(cc.Node) ], Prefab_TranningCtrl.prototype, "QuickStartBtn", void 0);
      __decorate([ property(cc.Node) ], Prefab_TranningCtrl.prototype, "CloseBtn", void 0);
      __decorate([ property(cc.Label) ], Prefab_TranningCtrl.prototype, "curGameName", void 0);
      __decorate([ property(cc.Prefab) ], Prefab_TranningCtrl.prototype, "prefab_gameitem", void 0);
      __decorate([ property(cc.Prefab) ], Prefab_TranningCtrl.prototype, "prefab_betitem", void 0);
      __decorate([ property(cc.Node) ], Prefab_TranningCtrl.prototype, "prefab_betlist", void 0);
      Prefab_TranningCtrl = __decorate([ ccclass ], Prefab_TranningCtrl);
      return Prefab_TranningCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_TranningCtrl;
    cc._RF.pop();
  }, {
    "../../CfgMgrs/GameCateCfg": "GameCateCfg",
    "../../CfgMgrs/JbcCfg": "JbcCfg",
    "../../GameMgrs/BetMgr": "BetMgr",
    "../../GameMgrs/RoomMgr": "RoomMgr",
    "../../GameMgrs/VerifyMgr": "VerifyMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_UserLogin: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ebc3fGSb/ND1ImfIJMWORUr", "Prefab_UserLogin");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var LoginMgr_1 = require("../../GameMgrs/LoginMgr");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.initText = null;
        _this.actTime = null;
        _this._account = null;
        _this._password = null;
        _this.initText = "do login";
        _this.actTime = 3;
        return _this;
      }
      Model.prototype.getText = function() {
        return this.initText;
      };
      Model.prototype.getActTime = function() {
        return this.actTime;
      };
      Model.prototype.saveAccount = function(accountStr) {
        this._account = accountStr;
      };
      Model.prototype.savePassword = function(passwordStr) {
        this._password = passwordStr;
      };
      Model.prototype.getLoginInfo = function() {
        return {
          account: this._account,
          password: this._password
        };
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          lab_info: null,
          node_pointer: null
        };
        _this.node = null;
        _this.model = null;
        _this.model = model;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.lab_info = ctrl.lab_info;
        this.ui.node_pointer = ctrl.node_pointer;
      };
      View.prototype.updateText = function() {
        this.ui.lab_info.string = this.model.getText();
      };
      View.prototype.runPointer = function() {
        this.ui.node_pointer.runAction(cc.rotateBy(this.model.getActTime(), 360).repeatForever());
      };
      View.prototype.showLabelBtnInfo = function() {
        var info = this.model.getLoginInfo();
        var str = info.account + ", " + info.password;
        this.ui.lab_info.string = str;
      };
      return View;
    }(BaseView_1.default);
    var UserLoginCtrl = function(_super) {
      __extends(UserLoginCtrl, _super);
      function UserLoginCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.lab_info = null;
        _this.node_pointer = null;
        _this.edit_account = null;
        _this.edit_password = null;
        _this.node_close = null;
        return _this;
      }
      UserLoginCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      UserLoginCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.lab_info.node, this._onClick_lab, "点击旋转");
        this.connect(G_UiType.image, this.node_close, this.finish, "点击关闭");
        this.connect(G_UiType.edit, this.edit_account.node, this._onEdit_account, "输入账号");
        this.connect(G_UiType.edit, this.edit_password.node, this._onEdit_password, "输入密码");
      };
      UserLoginCtrl.prototype.start = function() {
        this.view.updateText();
        this.defineNetEvents();
      };
      UserLoginCtrl.prototype.defineNetEvents = function() {};
      UserLoginCtrl.prototype._onClick_lab = function(event) {
        this.view.runPointer();
        var info = this.model.getLoginInfo();
        var msg = {
          username: info.account,
          password: info.password
        };
        LoginMgr_1.default.getInstance().reqLogin(msg);
      };
      UserLoginCtrl.prototype._onEdit_account = function(event) {
        console.log("_onEdit_account11111");
        var editComp = event.currentTarget.getComponent(cc.EditBox);
        console.log(editComp.string);
        this.model.saveAccount(editComp.string);
      };
      UserLoginCtrl.prototype._onEdit_password = function(event) {
        console.log("_onEdit_password");
        var editComp = event.currentTarget.getComponent(cc.EditBox);
        this.model.savePassword(editComp.string);
      };
      __decorate([ property(cc.Label) ], UserLoginCtrl.prototype, "lab_info", void 0);
      __decorate([ property(cc.Node) ], UserLoginCtrl.prototype, "node_pointer", void 0);
      __decorate([ property(cc.EditBox) ], UserLoginCtrl.prototype, "edit_account", void 0);
      __decorate([ property(cc.EditBox) ], UserLoginCtrl.prototype, "edit_password", void 0);
      __decorate([ property(cc.Node) ], UserLoginCtrl.prototype, "node_close", void 0);
      UserLoginCtrl = __decorate([ ccclass ], UserLoginCtrl);
      return UserLoginCtrl;
    }(BaseCtrl_1.default);
    exports.default = UserLoginCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/LoginMgr": "LoginMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_UserRegister: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a3f14wVLl1PsqDcn3RfSXKx", "Prefab_UserRegister");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var LoginMgr_1 = require("../../GameMgrs/LoginMgr");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.initText = null;
        _this.actTime = null;
        _this._account = null;
        _this._password = null;
        _this.initText = "do register";
        _this.actTime = 3;
        return _this;
      }
      Model.prototype.getText = function() {
        return this.initText;
      };
      Model.prototype.getActTime = function() {
        return this.actTime;
      };
      Model.prototype.saveAccount = function(accountStr) {
        this._account = accountStr;
      };
      Model.prototype.savePassword = function(passwordStr) {
        this._password = passwordStr;
      };
      Model.prototype.getLoginInfo = function() {
        return {
          account: this._account,
          password: this._password
        };
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          lab_info: null,
          node_pointer: null
        };
        _this.node = null;
        _this.model = null;
        _this.model = model;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.lab_info = ctrl.lab_info;
        this.ui.node_pointer = ctrl.node_pointer;
      };
      View.prototype.updateText = function() {
        this.ui.lab_info.string = this.model.getText();
      };
      View.prototype.runPointer = function() {
        this.ui.node_pointer.runAction(cc.rotateBy(this.model.getActTime(), 360).repeatForever());
      };
      View.prototype.showLabelBtnInfo = function() {
        var info = this.model.getLoginInfo();
        var str = info.account + ", " + info.password;
        this.ui.lab_info.string = str;
      };
      return View;
    }(BaseView_1.default);
    var UserRegisterCtrl = function(_super) {
      __extends(UserRegisterCtrl, _super);
      function UserRegisterCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.lab_info = null;
        _this.node_pointer = null;
        _this.edit_account = null;
        _this.edit_password = null;
        _this.node_close = null;
        return _this;
      }
      UserRegisterCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      UserRegisterCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.lab_info.node, this._onClick_lab, "点击旋转");
        this.connect(G_UiType.image, this.node_close, this.finish, "点击关闭");
        this.connect(G_UiType.edit, this.edit_account.node, this._onEdit_account, "输入账号");
        this.connect(G_UiType.edit, this.edit_password.node, this._onEdit_password, "输入密码");
      };
      UserRegisterCtrl.prototype.start = function() {
        this.view.updateText();
        this.defineNetEvents();
      };
      UserRegisterCtrl.prototype.defineNetEvents = function() {};
      UserRegisterCtrl.prototype._onClick_lab = function(event) {
        var info = this.model.getLoginInfo();
        var msg = {
          username: info.account,
          password: info.password
        };
        LoginMgr_1.default.getInstance().reqRegister(msg);
      };
      UserRegisterCtrl.prototype._onEdit_account = function(event) {
        console.log("_onEdit_account11111");
        var editComp = event.currentTarget.getComponent(cc.EditBox);
        console.log(editComp.string);
        this.model.saveAccount(editComp.string);
      };
      UserRegisterCtrl.prototype._onEdit_password = function(event) {
        console.log("_onEdit_password");
        var editComp = event.currentTarget.getComponent(cc.EditBox);
        this.model.savePassword(editComp.string);
      };
      __decorate([ property(cc.Label) ], UserRegisterCtrl.prototype, "lab_info", void 0);
      __decorate([ property(cc.Node) ], UserRegisterCtrl.prototype, "node_pointer", void 0);
      __decorate([ property(cc.EditBox) ], UserRegisterCtrl.prototype, "edit_account", void 0);
      __decorate([ property(cc.EditBox) ], UserRegisterCtrl.prototype, "edit_password", void 0);
      __decorate([ property(cc.Node) ], UserRegisterCtrl.prototype, "node_close", void 0);
      UserRegisterCtrl = __decorate([ ccclass ], UserRegisterCtrl);
      return UserRegisterCtrl;
    }(BaseCtrl_1.default);
    exports.default = UserRegisterCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/LoginMgr": "LoginMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_VideoEnterCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d3388HCU6NHcZEDJJ8xFx8h", "Prefab_VideoEnterCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var GameCateCfg_1 = require("../../CfgMgrs/GameCateCfg");
    var BunchInfoMgr_1 = require("../../GameMgrs/BunchInfoMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.video_num = null;
        _this.club_id = null;
        _this.video_num = "";
        return _this;
      }
      Model.prototype.getVideoNum = function() {
        return this.video_num;
      };
      Model.prototype.setVideoNum = function(num) {
        this.video_num = num;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_close: null,
          btn_confirm: null,
          node_edit: null,
          edit_video: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.btn_close = ctrl.btn_close;
        this.ui.btn_confirm = ctrl.btn_confirm;
        this.ui.node_edit = ctrl.node_edit;
        this.ui.edit_video = this.ui.node_edit.getComponent(cc.EditBox);
      };
      return View;
    }(BaseView_1.default);
    var Prefab_VideoEnterCtrl = function(_super) {
      __extends(Prefab_VideoEnterCtrl, _super);
      function Prefab_VideoEnterCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_close = null;
        _this.btn_confirm = null;
        _this.node_edit = null;
        return _this;
      }
      Prefab_VideoEnterCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_VideoEnterCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqMatchGameId": this.http_reqMatchGameId
        };
      };
      Prefab_VideoEnterCtrl.prototype.http_reqMatchGameId = function(msg) {
        var recordcode = this.model.getVideoNum();
        var game = GameCateCfg_1.default.getInstance().getGameById(msg.gameid);
        console.log("msgmsgmsgmsgmsgmsgmsgmsgmsg=", msg);
        this.start_sub_module(G_MODULE.GameVideo, function(prefabComp, prefabNode) {
          prefabComp.setRecordInfo(game, recordcode);
        }, "GameVideoCtrl");
      };
      Prefab_VideoEnterCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_VideoEnterCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_close, this.btn_close_cb, "退出");
        this.connect(G_UiType.image, this.ui.btn_confirm, this.btn_confirm_cb, "确认");
        this.connect(G_UiType.edit, this.ui.node_edit, this.node_edit_cb, "监听输入框");
      };
      Prefab_VideoEnterCtrl.prototype.start = function() {};
      Prefab_VideoEnterCtrl.prototype.btn_close_cb = function(node, event) {
        console.log("btn_close_cb");
        this.finish();
      };
      Prefab_VideoEnterCtrl.prototype.btn_confirm_cb = function(node, event) {
        var recordcode = this.model.getVideoNum();
        if (recordcode.length <= 0) return;
        BunchInfoMgr_1.default.getInstance().reqMatchGameId(recordcode);
      };
      Prefab_VideoEnterCtrl.prototype.node_edit_cb = function(str, event) {
        console.log("node_edit_cb");
        if ("editing-did-ended" == str) {
          var content = this.ui.edit_video.string;
          this.model.setVideoNum(content);
        }
      };
      __decorate([ property(cc.Node) ], Prefab_VideoEnterCtrl.prototype, "btn_close", void 0);
      __decorate([ property(cc.Node) ], Prefab_VideoEnterCtrl.prototype, "btn_confirm", void 0);
      __decorate([ property(cc.Node) ], Prefab_VideoEnterCtrl.prototype, "node_edit", void 0);
      Prefab_VideoEnterCtrl = __decorate([ ccclass ], Prefab_VideoEnterCtrl);
      return Prefab_VideoEnterCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_VideoEnterCtrl;
    cc._RF.pop();
  }, {
    "../../CfgMgrs/GameCateCfg": "GameCateCfg",
    "../../GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_WeChatTaskCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2d07042rltFv5R+Z+IXLRbl", "Prefab_WeChatTaskCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          wechatBtn: ctrl.wechatBtn
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {};
      return View;
    }(BaseView_1.default);
    var Prefab_WeChatTaskCtrl = function(_super) {
      __extends(Prefab_WeChatTaskCtrl, _super);
      function Prefab_WeChatTaskCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.wechatBtn = null;
        return _this;
      }
      Prefab_WeChatTaskCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_WeChatTaskCtrl.prototype.defineNetEvents = function() {};
      Prefab_WeChatTaskCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_WeChatTaskCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.wechatBtn, this.wechatBtnCB, "点击前往关注微信号");
      };
      Prefab_WeChatTaskCtrl.prototype.start = function() {};
      Prefab_WeChatTaskCtrl.prototype.wechatBtnCB = function() {};
      __decorate([ property({
        tooltip: "关注微信按钮",
        type: cc.Node
      }) ], Prefab_WeChatTaskCtrl.prototype, "wechatBtn", void 0);
      Prefab_WeChatTaskCtrl = __decorate([ ccclass ], Prefab_WeChatTaskCtrl);
      return Prefab_WeChatTaskCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_WeChatTaskCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_Web_xieyiCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9b0bcx4ZbpDJbzsGVtt0g2k", "Prefab_Web_xieyiCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var ServerMgr_1 = require("../../../AppStart/AppMgrs/ServerMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          web_content: null,
          btn_close: null
        };
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.web_content = ctrl.web_content;
        this.ui.btn_close = ctrl.btn_close;
        this.initWebView();
      };
      View.prototype.initWebView = function() {
        cc.sys.os == cc.sys.OS_IOS && null != this.ui.web_content.setBounces && this.ui.web_content.setBounces(false);
      };
      return View;
    }(BaseView_1.default);
    var Prefab_Web_xieyiCtrl = function(_super) {
      __extends(Prefab_Web_xieyiCtrl, _super);
      function Prefab_Web_xieyiCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.web_content = null;
        _this.btn_close = null;
        return _this;
      }
      Prefab_Web_xieyiCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_Web_xieyiCtrl.prototype.defineNetEvents = function() {};
      Prefab_Web_xieyiCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_Web_xieyiCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_close, this.btn_close_cb, "关闭按钮");
      };
      Prefab_Web_xieyiCtrl.prototype.start = function() {};
      Prefab_Web_xieyiCtrl.prototype.btn_close_cb = function() {
        this.finish();
      };
      Prefab_Web_xieyiCtrl.prototype.showxieyi = function(type) {
        0 == type && (this.ui.web_content.url = ServerMgr_1.default.getInstance().gettiaokuanUrl());
        1 == type && (this.ui.web_content.url = ServerMgr_1.default.getInstance().getzhengceUrl());
      };
      __decorate([ property(cc.WebView) ], Prefab_Web_xieyiCtrl.prototype, "web_content", void 0);
      __decorate([ property(cc.Node) ], Prefab_Web_xieyiCtrl.prototype, "btn_close", void 0);
      Prefab_Web_xieyiCtrl = __decorate([ ccclass ], Prefab_Web_xieyiCtrl);
      return Prefab_Web_xieyiCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_Web_xieyiCtrl;
    cc._RF.pop();
  }, {
    "../../../AppStart/AppMgrs/ServerMgr": "ServerMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_ZixunCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ef4a51EPv1OVL67obuIlT/e", "Prefab_ZixunCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BetMgr_1 = require("../../GameMgrs/BetMgr");
    var CreateRoomOptionCfg_1 = require("../../CfgMgrs/CreateRoomOptionCfg");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var intervalH = 20;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.NNOptionData = null;
        _this.gameID = null;
        _this.gameID = BetMgr_1.default.getInstance().getGameId();
        _this.NNOptionData = CreateRoomOptionCfg_1.default.getInstance().getNNOption(_this.gameID);
        return _this;
      }
      Model.prototype.getContent = function(key) {
        return this.NNOptionData.content[key];
      };
      Model.prototype.getTitle = function(key) {
        return this.NNOptionData.title[key];
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          Content: null,
          ClickBg: null,
          ZixunContent: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.initOptionItem();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.Content = ctrl.Content;
        this.ui.ClickBg = ctrl.ClickBg;
        this.ui.ZixunContent = ctrl.ZixunContent;
      };
      View.prototype.initOptionItem = function() {
        for (var key in this.model.NNOptionData.title) {
          var item = cc.instantiate(this.ui.ZixunContent);
          item.parent = this.ui.Content;
          var content = this.model.getContent(key);
          var title = this.model.getTitle(key);
          var TitlenNode = item.children[0];
          var contentNode = item.children[1];
          TitlenNode.getComponent(cc.Label).string = title;
          contentNode.getComponent(cc.Label).string = content;
          contentNode.height > item.height - intervalH && (item.height = contentNode.height + intervalH);
          this.setContentH(item);
        }
      };
      View.prototype.setContentH = function(node) {
        this.ui.Content.height += node.height + 10;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_ZixunCtrl = function(_super) {
      __extends(Prefab_ZixunCtrl, _super);
      function Prefab_ZixunCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.Content = null;
        _this.ClickBg = null;
        _this.ZixunContent = null;
        return _this;
      }
      Prefab_ZixunCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_ZixunCtrl.prototype.defineNetEvents = function() {};
      Prefab_ZixunCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_ZixunCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.text, this.ClickBg, this.clickBg_cb, "点击背景层");
      };
      Prefab_ZixunCtrl.prototype.start = function() {};
      Prefab_ZixunCtrl.prototype.clickBg_cb = function() {
        this.node.destroy();
      };
      __decorate([ property({
        tooltip: "Content",
        type: cc.Node
      }) ], Prefab_ZixunCtrl.prototype, "Content", void 0);
      __decorate([ property({
        tooltip: "背景点击层",
        type: cc.Node
      }) ], Prefab_ZixunCtrl.prototype, "ClickBg", void 0);
      __decorate([ property({
        tooltip: "小项",
        type: cc.Prefab
      }) ], Prefab_ZixunCtrl.prototype, "ZixunContent", void 0);
      Prefab_ZixunCtrl = __decorate([ ccclass ], Prefab_ZixunCtrl);
      return Prefab_ZixunCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_ZixunCtrl;
    cc._RF.pop();
  }, {
    "../../CfgMgrs/CreateRoomOptionCfg": "CreateRoomOptionCfg",
    "../../GameMgrs/BetMgr": "BetMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_bagCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "07230CTQZxKspFA9G82OuUK", "Prefab_bagCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.bagData = null;
        return _this;
      }
      Model.prototype.bagItemData = function(msg) {
        this.bagData = msg;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_close: ctrl.node_close,
          prefab_bagItem: ctrl.prefab_bagItem,
          item_content: ctrl.item_content
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {};
      View.prototype.addItem = function() {
        var item = cc.instantiate(this.ui.prefab_bagItem);
        item.parent = this.ui.item_content;
      };
      View.prototype.cleanItems = function() {
        this.ui.item_content.removeAllChildren();
      };
      return View;
    }(BaseView_1.default);
    var Prefab_bagCtrl = function(_super) {
      __extends(Prefab_bagCtrl, _super);
      function Prefab_bagCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.node_close = null;
        _this.prefab_bagItem = null;
        _this.item_content = null;
        return _this;
      }
      Prefab_bagCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_bagCtrl.prototype.defineNetEvents = function() {
        this.n_events = {};
      };
      Prefab_bagCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_bagCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.node_close, this.node_close_cb, "点击关闭");
      };
      Prefab_bagCtrl.prototype.start = function() {};
      Prefab_bagCtrl.prototype.node_close_cb = function() {
        this.finish();
      };
      __decorate([ property(cc.Node) ], Prefab_bagCtrl.prototype, "node_close", void 0);
      __decorate([ property(cc.Prefab) ], Prefab_bagCtrl.prototype, "prefab_bagItem", void 0);
      __decorate([ property(cc.Node) ], Prefab_bagCtrl.prototype, "item_content", void 0);
      Prefab_bagCtrl = __decorate([ ccclass ], Prefab_bagCtrl);
      return Prefab_bagCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_bagCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_bagItemCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7b36anDjflO2qcaqUHaV79Z", "Prefab_bagItemCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BagMgr_1 = require("../../GameMgrs/BagMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.itemPrice = null;
        _this.itemType = null;
        _this.itemPrice = BagMgr_1.default.getInstance().getItemPrice();
        _this.itemType = BagMgr_1.default.getInstance().getItemType();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_linqu: ctrl.btn_linqu,
          img_hongbao: ctrl.img_hongbao,
          img_huafei: ctrl.img_huafei
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.updateItem();
      };
      View.prototype.updateItem = function() {};
      return View;
    }(BaseView_1.default);
    var Prefab_bagItemCtrl = function(_super) {
      __extends(Prefab_bagItemCtrl, _super);
      function Prefab_bagItemCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.btn_linqu = null;
        _this.img_huafei = null;
        _this.img_hongbao = null;
        _this.lab_price = null;
        _this.lab_detial = null;
        return _this;
      }
      Prefab_bagItemCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_bagItemCtrl.prototype.defineNetEvents = function() {};
      Prefab_bagItemCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_bagItemCtrl.prototype.connectUi = function() {};
      Prefab_bagItemCtrl.prototype.start = function() {};
      __decorate([ property({
        tooltip: "领取按钮",
        type: cc.Node
      }) ], Prefab_bagItemCtrl.prototype, "btn_linqu", void 0);
      __decorate([ property({
        tooltip: "话费图片",
        type: cc.Node
      }) ], Prefab_bagItemCtrl.prototype, "img_huafei", void 0);
      __decorate([ property({
        tooltip: "红包图片",
        type: cc.Node
      }) ], Prefab_bagItemCtrl.prototype, "img_hongbao", void 0);
      __decorate([ property({
        tooltip: "金额",
        type: cc.Label
      }) ], Prefab_bagItemCtrl.prototype, "lab_price", void 0);
      __decorate([ property({
        tooltip: "描述",
        type: cc.Label
      }) ], Prefab_bagItemCtrl.prototype, "lab_detial", void 0);
      Prefab_bagItemCtrl = __decorate([ ccclass ], Prefab_bagItemCtrl);
      return Prefab_bagItemCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_bagItemCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BagMgr": "BagMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_bindAgent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7583bvxWPBJmZfvlBzo+w1L", "Prefab_bindAgent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var bindAgentMgr_1 = require("../../GameMgrs/bindAgentMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.numarr = [];
        _this.maxlength = 6;
        _this.roomId = null;
        _this.roomRule = null;
        return _this;
      }
      Model.prototype.pushNumber = function(num) {
        if (this.numarr.length >= this.maxlength) return;
        this.numarr.push(num);
        return this.numarr.length >= this.maxlength;
      };
      Model.prototype.delTail = function() {
        this.numarr.length > 0 && this.numarr.remove(this.numarr.length - 1);
      };
      Model.prototype.getAgentID = function() {
        this.roomId = 0;
        var beishu = 1;
        for (var i = this.numarr.length - 1; i >= 0; i--) {
          var num = this.numarr[i];
          this.roomId += num * beishu;
          beishu *= 10;
        }
        return this.roomId;
      };
      Model.prototype.reset = function() {
        this.numarr = [];
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          labelNumArr: [],
          btnnumarr: [],
          btn_reset: null,
          btn_close: null,
          btn_del: null,
          panel_inputroomid: null,
          panal_roomid: null,
          arrPanel: []
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.btn_reset = ctrl.btn_reset;
        this.ui.btn_close = ctrl.btn_close;
        this.ui.btn_del = ctrl.btn_del;
        this.ui.panel_inputroomid = ctrl.panel_inputroomid;
        this.ui.panal_roomid = ctrl.panal_roomid;
        for (var i = 0; i < 10; i++) {
          var btnNum = this.ui.panel_inputroomid.getChildByName("btn_num_" + i);
          this.ui.btnnumarr.push(btnNum);
        }
        for (var i = 0; i < this.model.maxlength; ++i) {
          var labelNum = this.ui.panal_roomid.getChildByName("num_" + i).getComponent(cc.Label);
          labelNum.node.active = false;
          this.ui.labelNumArr.push(labelNum);
        }
      };
      View.prototype.uodateAgentID = function() {
        for (var i = 0; i < this.ui.labelNumArr.length; i++) {
          var labelNum = this.ui.labelNumArr[i];
          var value = this.model.numarr[i];
          var active = null != value;
          active && (labelNum.string = value);
          labelNum.node.active = active;
        }
      };
      View.prototype.removePanelRoomRule = function() {
        if (0 == this.ui.arrPanel.length) return;
        for (var i = 0; i < this.ui.arrPanel.length; i++) this.ui.arrPanel[i].removeFromParent();
      };
      return View;
    }(BaseView_1.default);
    var Prefab_JoinRoomCtrl = function(_super) {
      __extends(Prefab_JoinRoomCtrl, _super);
      function Prefab_JoinRoomCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_close = null;
        _this.btn_reset = null;
        _this.btn_del = null;
        _this.panel_inputroomid = null;
        _this.panal_roomid = null;
        return _this;
      }
      Prefab_JoinRoomCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.model = new Model();
        this.view = new View(this.model);
        this.ui = this.view.ui;
        this.defineNetEvents();
        this.defineGlobalEvents();
        this.regAllEvents();
        this.connectUi();
      };
      Prefab_JoinRoomCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqBindAgent": this.http_reqBindAgent
        };
      };
      Prefab_JoinRoomCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          closBindAgent: this.closBindAgent
        };
      };
      Prefab_JoinRoomCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.btn_close, this.btn_close_cb, "关闭按钮");
        this.connect(G_UiType.button, this.ui.btn_reset, this.btn_reset_cb, "点击重置");
        this.connect(G_UiType.button, this.ui.btn_del, this.btn_del_cb, "点击删除");
        var _loop_1 = function(i) {
          var btnNumCb = function() {
            this.inputNumber(i);
          };
          var btnNum = this_1.ui.btnnumarr[i];
          this_1.connect(G_UiType.button, btnNum, btnNumCb, "点击输入代理号按钮" + i);
        };
        var this_1 = this;
        for (var i = 0; i < this.ui.btnnumarr.length; i++) _loop_1(i);
      };
      Prefab_JoinRoomCtrl.prototype.inputNumber = function(number) {
        console.log("点击了", number);
        var complete = this.model.pushNumber(number);
        this.view.uodateAgentID();
        if (complete) {
          var agentID = this.model.getAgentID();
          bindAgentMgr_1.default.getInstance().reqBindAgent(agentID, this.node);
          this.start_sub_module(G_MODULE.bindConfirm);
        }
      };
      Prefab_JoinRoomCtrl.prototype.start = function() {};
      Prefab_JoinRoomCtrl.prototype.http_reqBindAgent = function(msg) {
        if (!msg.result) return;
        console.log(msg);
        this.finish();
      };
      Prefab_JoinRoomCtrl.prototype.closBindAgent = function() {
        this.finish();
      };
      Prefab_JoinRoomCtrl.prototype.btn_close_cb = function() {
        this.finish();
      };
      Prefab_JoinRoomCtrl.prototype.btn_reset_cb = function() {
        var self = this;
        self.model.reset();
        self.view.ui.btn_close.active = true;
        self.view.uodateAgentID();
        if (self.view.ui.arrPanel.length <= 0) return;
        var cb = function() {
          self.view.removePanelRoomRule();
        };
      };
      Prefab_JoinRoomCtrl.prototype.btn_del_cb = function() {
        var self = this;
        self.model.delTail();
        self.view.uodateAgentID();
        var cb = function() {
          self.view.removePanelRoomRule();
          self.view.ui.btn_close.active = true;
        };
      };
      __decorate([ property({
        tooltip: "关闭",
        type: cc.Node
      }) ], Prefab_JoinRoomCtrl.prototype, "btn_close", void 0);
      __decorate([ property({
        tooltip: "重置",
        type: cc.Node
      }) ], Prefab_JoinRoomCtrl.prototype, "btn_reset", void 0);
      __decorate([ property({
        tooltip: "删除",
        type: cc.Node
      }) ], Prefab_JoinRoomCtrl.prototype, "btn_del", void 0);
      __decorate([ property({
        tooltip: "输入面板",
        type: cc.Node
      }) ], Prefab_JoinRoomCtrl.prototype, "panel_inputroomid", void 0);
      __decorate([ property({
        tooltip: "代理号显示",
        type: cc.Node
      }) ], Prefab_JoinRoomCtrl.prototype, "panal_roomid", void 0);
      Prefab_JoinRoomCtrl = __decorate([ ccclass ], Prefab_JoinRoomCtrl);
      return Prefab_JoinRoomCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_JoinRoomCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/bindAgentMgr": "bindAgentMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_bindconfirm: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6a2b3IWezFGBoM5uyIl6hzs", "Prefab_bindconfirm");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var bindAgentMgr_1 = require("../../GameMgrs/bindAgentMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.agentID = null;
        _this.agentID = bindAgentMgr_1.default.getInstance().getAgentID();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_close: ctrl.btn_close,
          btn_confirm: ctrl.btn_confirm,
          lab_agentID: ctrl.lab_agentID
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.lab_agentID.string = this.model.agentID;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_JoinRoomCtrl = function(_super) {
      __extends(Prefab_JoinRoomCtrl, _super);
      function Prefab_JoinRoomCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_close = null;
        _this.btn_confirm = null;
        _this.lab_agentID = null;
        return _this;
      }
      Prefab_JoinRoomCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.model = new Model();
        this.view = new View(this.model);
        this.ui = this.view.ui;
        this.defineNetEvents();
        this.defineGlobalEvents();
        this.regAllEvents();
        this.connectUi();
      };
      Prefab_JoinRoomCtrl.prototype.defineNetEvents = function() {
        this.n_events = {};
      };
      Prefab_JoinRoomCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          closBindAgent: this.closBindAgent,
          closeConfirm: this.closeConfirm
        };
      };
      Prefab_JoinRoomCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.btn_confirm, this.confirmCB, "确定绑定");
        this.connect(G_UiType.button, this.ui.btn_close, this.closeCB, "关闭绑定代理确认界面");
      };
      Prefab_JoinRoomCtrl.prototype.confirmCB = function() {
        bindAgentMgr_1.default.getInstance().sendID();
        this.finish();
      };
      Prefab_JoinRoomCtrl.prototype.closeCB = function() {
        this.finish();
      };
      Prefab_JoinRoomCtrl.prototype.start = function() {};
      Prefab_JoinRoomCtrl.prototype.closBindAgent = function() {
        this.finish();
      };
      Prefab_JoinRoomCtrl.prototype.closeConfirm = function() {
        this.finish();
      };
      __decorate([ property({
        tooltip: "关闭",
        type: cc.Node
      }) ], Prefab_JoinRoomCtrl.prototype, "btn_close", void 0);
      __decorate([ property({
        tooltip: "确定",
        type: cc.Node
      }) ], Prefab_JoinRoomCtrl.prototype, "btn_confirm", void 0);
      __decorate([ property({
        tooltip: "代理的ID显示",
        type: cc.Label
      }) ], Prefab_JoinRoomCtrl.prototype, "lab_agentID", void 0);
      Prefab_JoinRoomCtrl = __decorate([ ccclass ], Prefab_JoinRoomCtrl);
      return Prefab_JoinRoomCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_JoinRoomCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/bindAgentMgr": "bindAgentMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_bingPhoneCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "98042/X6G5FYanFnrpWJgem", "Prefab_bingPhoneCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.time = 60;
        _this.forbidden = true;
        var num = _this.generateMixed(4);
        console.log(num);
        _this.labelImgText = num;
        return _this;
      }
      Model.prototype.generateMixed = function(n) {
        var chars = [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" ];
        var res = "";
        for (var i = 0; i < n; i++) {
          var id = Math.ceil(35 * Math.random());
          res += chars[id];
        }
        return res;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          Btn_Exit: null,
          EditBox_Phone: null,
          Btn_VerificationCode: null,
          EditBox_VerificationCode: null,
          img_Verification: null,
          EditBox_imgVerification: null,
          Btn_sure: null,
          label_Img: null,
          btn_cancel: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.label_Img = ctrl.label_img;
        this.ui.btn_cancel = ctrl.btn_cancel;
        this.ui.Btn_Exit = ctrl.Btn_Exit;
        this.ui.EditBox_Phone = ctrl.EditBox_Phone;
        this.ui.Btn_VerificationCode = ctrl.Btn_VerificationCode;
        this.ui.EditBox_VerificationCode = ctrl.EditBox_VerificationCode;
        this.ui.img_Verification = ctrl.img_Verification;
        this.ui.EditBox_imgVerification = ctrl.EditBox_imgVerification;
        this.ui.Btn_sure = ctrl.Btn_sure;
        this.ui.label_Img.string = this.model.labelImgText;
      };
      View.prototype.showTime = function() {
        this.model.time--;
        if (this.model.time < 0) {
          this.model.forbidden = true;
          this.model.time = 60;
          this.ui.Btn_VerificationCode.getChildByName("label").getComponent(cc.Label).string = "获取验证码";
          ctrl.unscheduleAllCallbacks();
        } else this.ui.Btn_VerificationCode.getChildByName("label").getComponent(cc.Label).string = "倒计时(" + this.model.time + ")";
      };
      return View;
    }(BaseView_1.default);
    var Prefab_bingPhoneCtrl = function(_super) {
      __extends(Prefab_bingPhoneCtrl, _super);
      function Prefab_bingPhoneCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.Btn_Exit = null;
        _this.EditBox_Phone = null;
        _this.Btn_VerificationCode = null;
        _this.EditBox_VerificationCode = null;
        _this.img_Verification = null;
        _this.EditBox_imgVerification = null;
        _this.Btn_sure = null;
        _this.btn_cancel = null;
        _this.label_img = null;
        return _this;
      }
      Prefab_bingPhoneCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_bingPhoneCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqBindPhone": this.http_reqBindPhone
        };
      };
      Prefab_bingPhoneCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_bingPhoneCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.Btn_Exit, this.onBtnExit_cb, "退出绑定手机");
        this.connect(G_UiType.button, this.ui.Btn_sure, this.onBtnsure_cb, "点击手机认证按钮");
        this.connect(G_UiType.button, this.ui.img_Verification, this.img_Verification_cb, "点击更换验证码");
        this.connect(G_UiType.button, this.ui.Btn_VerificationCode, this.onBtnVerificationCode_cb, "点击验证码按钮");
        this.connect(G_UiType.edit, this.ui.EditBox_imgVerification.node, this.onImgVerification_cb, "输入图片验证码");
        this.connect(G_UiType.edit, this.ui.EditBox_Phone.node, this.onEditBoxPhone_cb, "输入手机号码");
        this.connect(G_UiType.edit, this.ui.EditBox_VerificationCode.node, this.onEditBoxVerificationCode_cb, "输入手机验证码");
        this.connect(G_UiType.image, this.ui.btn_cancel, this.btn_cancel_cb, "取消按钮");
      };
      Prefab_bingPhoneCtrl.prototype.start = function() {};
      Prefab_bingPhoneCtrl.prototype.onBtnExit_cb = function(event) {
        this.finish();
      };
      Prefab_bingPhoneCtrl.prototype.onBtnsure_cb = function(event) {
        if (null == this.model.phoneText || "" == this.model.phoneText) {
          FrameMgr_1.default.getInstance().showTips("手机号码不能为空!", null, 35, cc.color(220, 24, 63));
          return;
        }
        if (null == this.model.VerificationCode || "" == this.model.VerificationCode) {
          FrameMgr_1.default.getInstance().showTips("手机验证码不能为空!", null, 35, cc.color(220, 24, 63));
          return;
        }
        UserMgr_1.default.getInstance().http_BingPhone({
          phone: this.model.phoneText,
          code: this.model.VerificationCode
        });
      };
      Prefab_bingPhoneCtrl.prototype.onBtnVerificationCode_cb = function(event) {
        if (null == this.model.phoneText || "" == this.model.phoneText) {
          FrameMgr_1.default.getInstance().showTips("手机号码不能为空!", null, 35, cc.color(220, 24, 63));
          return;
        }
        if (null == this.model.imgText || "" == this.model.imgText || this.model.imgText != this.model.labelImgText) {
          FrameMgr_1.default.getInstance().showTips("图片验证码错误，请重新输入！!", null, 35, cc.color(220, 24, 63));
          return;
        }
        if (!this.model.forbidden) return;
        UserMgr_1.default.getInstance().http_VerificationCode({
          phone: this.model.phoneText
        });
        var draw = /^134[0-8]\d{7}$|^13[^4]\d{8}$|^14[5-9]\d{8}$|^15[^4]\d{8}$|^16[6]\d{8}$|^17[0-8]\d{8}$|^18[\d]{9}$|^19[8,9]\d{8}$/.test(this.ui.EditBox_Phone.string);
        if (draw) {
          this.schedule(this.view.showTime, 1);
          this.model.forbidden = false;
        }
      };
      Prefab_bingPhoneCtrl.prototype.onImgVerification_cb = function(eventtype, event) {
        "editing-did-ended" == eventtype && (this.model.imgText = event.target.getComponent(cc.EditBox).string);
      };
      Prefab_bingPhoneCtrl.prototype.onEditBoxPhone_cb = function(eventtype, event) {
        "editing-did-ended" == eventtype && (this.model.phoneText = event.target.getComponent(cc.EditBox).string);
      };
      Prefab_bingPhoneCtrl.prototype.onEditBoxVerificationCode_cb = function(eventtype, event) {
        "editing-did-ended" == eventtype && (this.model.VerificationCode = event.target.getComponent(cc.EditBox).string);
      };
      Prefab_bingPhoneCtrl.prototype.img_Verification_cb = function() {
        this.ui.label_Img.string = this.model.generateMixed(4);
        this.model.labelImgText = this.ui.label_Img.string;
      };
      Prefab_bingPhoneCtrl.prototype.btn_cancel_cb = function() {
        this.finish();
      };
      Prefab_bingPhoneCtrl.prototype.http_reqBindPhone = function(msg) {
        msg.result ? FrameMgr_1.default.getInstance().showTips("手机绑定成功", null, 35, cc.color(0, 255, 50)) : FrameMgr_1.default.getInstance().showTips("手机绑定失败", null, 35, cc.color(220, 24, 63));
        this.finish();
      };
      __decorate([ property({
        tooltip: "关闭按钮",
        type: cc.Node
      }) ], Prefab_bingPhoneCtrl.prototype, "Btn_Exit", void 0);
      __decorate([ property({
        tooltip: "手机号码",
        type: cc.EditBox
      }) ], Prefab_bingPhoneCtrl.prototype, "EditBox_Phone", void 0);
      __decorate([ property({
        tooltip: "验证码按钮",
        type: cc.Node
      }) ], Prefab_bingPhoneCtrl.prototype, "Btn_VerificationCode", void 0);
      __decorate([ property({
        tooltip: "验证码",
        type: cc.EditBox
      }) ], Prefab_bingPhoneCtrl.prototype, "EditBox_VerificationCode", void 0);
      __decorate([ property({
        tooltip: "验证图片",
        type: cc.Node
      }) ], Prefab_bingPhoneCtrl.prototype, "img_Verification", void 0);
      __decorate([ property({
        tooltip: "图片验证码",
        type: cc.EditBox
      }) ], Prefab_bingPhoneCtrl.prototype, "EditBox_imgVerification", void 0);
      __decorate([ property({
        tooltip: "确认按钮",
        type: cc.Node
      }) ], Prefab_bingPhoneCtrl.prototype, "Btn_sure", void 0);
      __decorate([ property({
        tooltip: "取消按钮",
        type: cc.Node
      }) ], Prefab_bingPhoneCtrl.prototype, "btn_cancel", void 0);
      __decorate([ property({
        tooltip: "随机码",
        type: cc.Label
      }) ], Prefab_bingPhoneCtrl.prototype, "label_img", void 0);
      Prefab_bingPhoneCtrl = __decorate([ ccclass ], Prefab_bingPhoneCtrl);
      return Prefab_bingPhoneCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_bingPhoneCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_bull_chooseChipCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "14b22CSpxVA7Yb4Bz7mUHsz", "Prefab_bull_chooseChipCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var QznnConst_1 = require("../../Qznn/QznnMgr/QznnConst");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var QznnLogic_1 = require("../../Qznn/QznnMgr/QznnLogic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.list_chips = null;
        _this.ui = {
          node_chipContainer: null,
          node_img_tip: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_chipContainer = ctrl.node_chipContainer;
        this.ui.node_img_tip = ctrl.node_img_tip;
        this.list_chips = this.ui.node_chipContainer.children;
      };
      View.prototype.setChipsValue = function(valueList) {
        var value;
        for (var i = 0; i < valueList.length; i++) {
          value = valueList[i];
          this.setChipValue(i, value);
        }
      };
      View.prototype.getChipValue = function(btnNode) {
        return btnNode.getComponent(cc.Label).string;
      };
      View.prototype.setTipIsShow = function(isShow) {
        this.ui.node_img_tip.active = isShow;
      };
      View.prototype.setChipValue = function(index, value) {
        this.list_chips[index] && (this.list_chips[index].getComponent(cc.Label).string = value);
      };
      return View;
    }(BaseView_1.default);
    var Prefab_bull_chooseChipCtrl = function(_super) {
      __extends(Prefab_bull_chooseChipCtrl, _super);
      function Prefab_bull_chooseChipCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.node_chipContainer = null;
        _this.node_img_tip = null;
        return _this;
      }
      Prefab_bull_chooseChipCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_bull_chooseChipCtrl.prototype.defineNetEvents = function() {
        this.n_events = {};
        this.n_events[QznnConst_1.default.clientEvent.onPeopleChooseChip] = this.onPeopleChooseChip;
      };
      Prefab_bull_chooseChipCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_bull_chooseChipCtrl.prototype.connectUi = function() {
        var curList = this.view.list_chips;
        if (curList) for (var i = 0; i < curList.length; i++) this.connect(G_UiType.image, curList[i], this.onClickChip, "选择某个筹码");
      };
      Prefab_bull_chooseChipCtrl.prototype.start = function() {
        this.view.setChipsValue(QznnLogic_1.default.getInstance().getChipValueList());
      };
      Prefab_bull_chooseChipCtrl.prototype.onPeopleChooseChip = function(msg) {
        var logicSeatId = msg.chooseSeatId;
        logicSeatId == RoomMgr_1.default.getInstance().getMySeatId() && this.finish();
      };
      Prefab_bull_chooseChipCtrl.prototype.onClickChip = function(btnNode) {
        var value = this.view.getChipValue(btnNode);
        console.log("onClickChip== ", value);
        QznnLogic_1.default.getInstance().reqChooseChip(value);
      };
      __decorate([ property(cc.Node) ], Prefab_bull_chooseChipCtrl.prototype, "node_chipContainer", void 0);
      __decorate([ property(cc.Node) ], Prefab_bull_chooseChipCtrl.prototype, "node_img_tip", void 0);
      Prefab_bull_chooseChipCtrl = __decorate([ ccclass ], Prefab_bull_chooseChipCtrl);
      return Prefab_bull_chooseChipCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_bull_chooseChipCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../../Qznn/QznnMgr/QznnConst": "QznnConst",
    "../../Qznn/QznnMgr/QznnLogic": "QznnLogic"
  } ],
  Prefab_bull_chooseGrabCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5d622YEyQ1AlL5jl/EEqmsr", "Prefab_bull_chooseGrabCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var QznnLogic_1 = require("../../Qznn/QznnMgr/QznnLogic");
    var QznnConst_1 = require("../../Qznn/QznnMgr/QznnConst");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_btn_grab: null,
          node_btn_noGrab: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_btn_grab = ctrl.node_btn_grab;
        this.ui.node_btn_noGrab = ctrl.node_btn_noGrab;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_bull_chooseGrab = function(_super) {
      __extends(Prefab_bull_chooseGrab, _super);
      function Prefab_bull_chooseGrab() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.node_btn_grab = null;
        _this.node_btn_noGrab = null;
        return _this;
      }
      Prefab_bull_chooseGrab.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_bull_chooseGrab.prototype.defineNetEvents = function() {
        this.n_events = {};
        this.n_events[QznnConst_1.default.clientEvent.onPeopleGrab] = this.onPeopleGrab;
      };
      Prefab_bull_chooseGrab.prototype.defineGlobalEvents = function() {};
      Prefab_bull_chooseGrab.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.node_btn_grab, this.node_btn_grab_cb, "点击抢庄");
        this.connect(G_UiType.image, this.ui.node_btn_noGrab, this.node_btn_noGrab_cb, "点击不抢庄");
      };
      Prefab_bull_chooseGrab.prototype.start = function() {};
      Prefab_bull_chooseGrab.prototype.onPeopleGrab = function(msg) {
        var seatId = msg.grabSeatId;
        seatId == RoomMgr_1.default.getInstance().getMySeatId() && this.finish();
      };
      Prefab_bull_chooseGrab.prototype.node_btn_grab_cb = function(btn) {
        console.log("click node_btn_grab_cb");
        QznnLogic_1.default.getInstance().reqGrab(true);
      };
      Prefab_bull_chooseGrab.prototype.node_btn_noGrab_cb = function(btn) {
        console.log("click node_btn_noGrab_cb");
        QznnLogic_1.default.getInstance().reqGrab(false);
      };
      __decorate([ property(cc.Node) ], Prefab_bull_chooseGrab.prototype, "node_btn_grab", void 0);
      __decorate([ property(cc.Node) ], Prefab_bull_chooseGrab.prototype, "node_btn_noGrab", void 0);
      Prefab_bull_chooseGrab = __decorate([ ccclass ], Prefab_bull_chooseGrab);
      return Prefab_bull_chooseGrab;
    }(BaseCtrl_1.default);
    exports.default = Prefab_bull_chooseGrab;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../../Qznn/QznnMgr/QznnConst": "QznnConst",
    "../../Qznn/QznnMgr/QznnLogic": "QznnLogic"
  } ],
  Prefab_bull_roomInfoCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f2bd1DgoExPQ6DT5yIMaloN", "Prefab_bull_roomInfoCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var LocalStorage_1 = require("../../Plat/Libs/LocalStorage");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var BullConst = null;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.roomId = null;
        _this.curRounds = null;
        _this.curRounds = -1;
        BullConst = RoomMgr_1.default.getInstance().getDef();
        _this.curLogic = RoomMgr_1.default.getInstance().getLogic().getInstance();
        return _this;
      }
      Model.prototype.initBGState = function() {
        this.bgState = LocalStorage_1.default.getInstance().getBullRoomBGCfg();
        if (!this.bgState) {
          this.bgState = 1;
          LocalStorage_1.default.getInstance().setBullRoomBGCfg(this.bgState);
        }
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          lbl_roomId: null,
          lbl_roomRounds: null,
          font_fjhsz: null,
          font_fjhszBlue: null,
          font_jsszlv: null,
          font_jsszBlue: null,
          font_fjhszkjq: null,
          font_isstartlv: null,
          font_isstartlanse: null,
          node_fjhLabel: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.initRoomIdFont();
        _this.model.initBGState();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.font_fjhszkjq = ctrl.font_fjhszkjq;
        this.ui.font_jsszBlue = ctrl.font_jsszBlue;
        this.ui.font_jsszlv = ctrl.font_jsszlv;
        this.ui.font_fjhszBlue = ctrl.font_fjhszBlue;
        this.ui.font_fjhsz = ctrl.LabelAtlas_fjhsz;
        this.ui.lbl_roomId = ctrl.lbl_roomId;
        this.ui.lbl_roomRounds = ctrl.lbl_roomRounds;
        this.ui.font_isstartlv = ctrl.font_isstartlv;
        this.ui.font_isstartlanse = ctrl.font_isstartlanse;
        this.ui.node_fjhLabel = ctrl.node_fjhLabel;
      };
      View.prototype.updateRoomId = function() {
        this.ui.lbl_roomId.string = RoomMgr_1.default.getInstance().getRoomInfo().password;
      };
      View.prototype.updateRoomRounds = function() {
        var roundIndex = -1;
        var room = RoomMgr_1.default.getInstance();
        roundIndex = room.isGameStarted() ? room.getRoundIndex() : room.getRoundIndex() - 1;
        this.ui.lbl_roomRounds.string = "第" + (roundIndex + 1) + "局";
      };
      View.prototype.initRoomIdFont = function() {
        this.ui.lbl_roomId.font = this.ui.font_fjhszkjq;
      };
      View.prototype.updateRoomIdFont = function() {
        var state = this.model.bgState;
        1 == state ? this.ui.lbl_roomId.font = this.ui.font_fjhsz : 2 == state && (this.ui.lbl_roomId.font = this.ui.font_fjhszBlue);
      };
      View.prototype.updatestartlvfont = function() {
        var state = this.model.bgState;
        if (1 == state) {
          this.ui.node_fjhLabel.font = this.ui.font_isstartlv;
          this.ui.lbl_roomRounds.font = this.ui.font_isstartlv;
          this.ui.lbl_roomId.font = this.ui.font_isstartlv;
        } else if (2 == state) {
          this.ui.lbl_roomRounds.font = this.ui.font_isstartlanse;
          this.ui.node_fjhLabel.font = this.ui.font_isstartlanse;
          this.ui.lbl_roomId.font = this.ui.font_isstartlanse;
        }
      };
      View.prototype.updateRoundCountFont = function() {
        var state = this.model.bgState;
        if (1 == state) {
          this.ui.node_fjhLabel.font = this.ui.font_jsszlv;
          this.ui.lbl_roomRounds.font = this.ui.font_jsszlv;
        } else if (2 == state) {
          this.ui.lbl_roomRounds.font = this.ui.font_jsszBlue;
          this.ui.node_fjhLabel.font = this.ui.font_jsszBlue;
        }
      };
      return View;
    }(BaseView_1.default);
    var Prefab_bull_roomInfoCtrl = function(_super) {
      __extends(Prefab_bull_roomInfoCtrl, _super);
      function Prefab_bull_roomInfoCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.lbl_roomId = null;
        _this.lbl_roomRounds = null;
        _this.LabelAtlas_fjhsz = null;
        _this.font_fjhszBlue = null;
        _this.font_jsszlv = null;
        _this.font_jsszBlue = null;
        _this.font_fjhszkjq = null;
        _this.font_isstartlv = null;
        _this.font_isstartlanse = null;
        _this.node_fjhLabel = null;
        return _this;
      }
      Prefab_bull_roomInfoCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_bull_roomInfoCtrl.prototype.defineNetEvents = function() {
        this.n_events[BullConst.clientEvent.onStart] = this.onStart;
        this.n_events["connector.entryHandler.enterRoom"] = this.onMyEnterRoom;
        this.n_events["onGameFinished"] = this.onGameFinished;
      };
      Prefab_bull_roomInfoCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          setAllTableLaebl: this.setAllTableLaebl
        };
      };
      Prefab_bull_roomInfoCtrl.prototype.connectUi = function() {};
      Prefab_bull_roomInfoCtrl.prototype.start = function() {
        this.view.updateRoomId();
        this.view.updateRoomRounds();
      };
      Prefab_bull_roomInfoCtrl.prototype.onStart = function(msg) {
        this.model.curRounds = msg.curRounds;
        this.view.updateRoomRounds();
        this.view.updatestartlvfont();
      };
      Prefab_bull_roomInfoCtrl.prototype.onMyEnterRoom = function(msg) {
        var gamestart = msg.gamestarted;
        if (gamestart) {
          this.view.updateRoomRounds();
          this.view.updatestartlvfont();
        } else if (!gamestart) {
          this.view.updateRoomIdFont();
          this.view.updateRoundCountFont();
        }
      };
      Prefab_bull_roomInfoCtrl.prototype.onGameFinished = function(msg) {
        this.view.updateRoomIdFont();
        this.view.updateRoundCountFont();
      };
      Prefab_bull_roomInfoCtrl.prototype.setAllTableLaebl = function() {
        this.model.initBGState();
        this.view.updatestartlvfont();
      };
      __decorate([ property(cc.Label) ], Prefab_bull_roomInfoCtrl.prototype, "lbl_roomId", void 0);
      __decorate([ property(cc.Label) ], Prefab_bull_roomInfoCtrl.prototype, "lbl_roomRounds", void 0);
      __decorate([ property(cc.Font) ], Prefab_bull_roomInfoCtrl.prototype, "LabelAtlas_fjhsz", void 0);
      __decorate([ property(cc.Font) ], Prefab_bull_roomInfoCtrl.prototype, "font_fjhszBlue", void 0);
      __decorate([ property(cc.Font) ], Prefab_bull_roomInfoCtrl.prototype, "font_jsszlv", void 0);
      __decorate([ property(cc.Font) ], Prefab_bull_roomInfoCtrl.prototype, "font_jsszBlue", void 0);
      __decorate([ property(cc.Font) ], Prefab_bull_roomInfoCtrl.prototype, "font_fjhszkjq", void 0);
      __decorate([ property(cc.Font) ], Prefab_bull_roomInfoCtrl.prototype, "font_isstartlv", void 0);
      __decorate([ property(cc.Font) ], Prefab_bull_roomInfoCtrl.prototype, "font_isstartlanse", void 0);
      __decorate([ property({
        type: cc.Label,
        displayName: "房间号字"
      }) ], Prefab_bull_roomInfoCtrl.prototype, "node_fjhLabel", void 0);
      Prefab_bull_roomInfoCtrl = __decorate([ ccclass ], Prefab_bull_roomInfoCtrl);
      return Prefab_bull_roomInfoCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_bull_roomInfoCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "../../Plat/Libs/LocalStorage": "LocalStorage"
  } ],
  Prefab_changeNameCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4bf0ab3UMFADopAKv7k7/YP", "Prefab_changeNameCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var NameCfg_1 = require("../../CfgMgrs/NameCfg");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.myInfo = null;
        _this.myInfo = UserMgr_1.default.getInstance().getMyInfo();
        _this.myInfo.NewName = "";
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          origin_name: null,
          NewName: null,
          btnConfirm: null,
          btnCancel: null,
          btnRandom: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.origin_name = ctrl.origin_name;
        this.ui.NewName = ctrl.NewName;
        this.ui.btnConfirm = ctrl.btnConfirm;
        this.ui.btnCancel = ctrl.btnCancel;
        this.ui.btnRandom = ctrl.btnRandom;
      };
      View.prototype.updateMyInfo = function() {
        this.updateName();
      };
      View.prototype.updateName = function() {
        this.ui.origin_name.string = this.model.myInfo.nickname;
      };
      View.prototype.updateNewName = function() {
        this.ui.NewName.string = this.model.myInfo.NewName;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_changeNameCtrl = function(_super) {
      __extends(Prefab_changeNameCtrl, _super);
      function Prefab_changeNameCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.origin_name = null;
        _this.NewName = null;
        _this.btnConfirm = null;
        _this.btnCancel = null;
        _this.btnRandom = null;
        return _this;
      }
      Prefab_changeNameCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_changeNameCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqMyInfo": this.http_reqMyInfo
        };
      };
      Prefab_changeNameCtrl.prototype.http_reqMyInfo = function(msg) {
        this.model.updateMyInfo();
        this.view.updateMyInfo();
      };
      Prefab_changeNameCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_changeNameCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btnCancel, this.node_cancel_cb, "取消");
        this.connect(G_UiType.image, this.ui.btnConfirm, this.node_confirm_cb, "确认");
        this.connect(G_UiType.image, this.ui.btnRandom, this.btnRandom_cb, "点击随机");
        this.connect(G_UiType.edit, this.ui.NewName.node, this.NewName_cb, "点击真实姓名");
      };
      Prefab_changeNameCtrl.prototype.start = function() {
        this.view.updateMyInfo();
      };
      Prefab_changeNameCtrl.prototype.node_cancel_cb = function(event) {
        this.finish();
      };
      Prefab_changeNameCtrl.prototype.node_confirm_cb = function() {
        if (null == this.ui.NewName.string || "" == this.ui.NewName.string) {
          console.log("请填写真实名");
          return;
        }
        console.log(this.ui.NewName.string);
        console.log("node_submit_submit");
      };
      Prefab_changeNameCtrl.prototype.NewName_cb = function() {
        console.log("realName_cb");
      };
      Prefab_changeNameCtrl.prototype.btnRandom_cb = function() {
        console.log("randomName_cb");
        var name = "";
        var count = 499;
        var str = [ "first", "center", "last" ];
        var idx = [ 11301001, 11302001, 11303001 ];
        for (var i = 0; i < 3; ++i) {
          var random = Math.floor(Math.random() * count);
          var nameidx = idx[i] + random;
          var nameList = NameCfg_1.default.getInstance().getName();
          name += nameList[0][str[i]][nameidx.toString()];
        }
        this.model.myInfo.NewName = name;
        this.view.updateNewName();
      };
      __decorate([ property(cc.Label) ], Prefab_changeNameCtrl.prototype, "origin_name", void 0);
      __decorate([ property(cc.EditBox) ], Prefab_changeNameCtrl.prototype, "NewName", void 0);
      __decorate([ property({
        tooltip: "确定按钮",
        type: cc.Node
      }) ], Prefab_changeNameCtrl.prototype, "btnConfirm", void 0);
      __decorate([ property({
        tooltip: "取消按钮",
        type: cc.Node
      }) ], Prefab_changeNameCtrl.prototype, "btnCancel", void 0);
      __decorate([ property({
        tooltip: "随机",
        type: cc.Node
      }) ], Prefab_changeNameCtrl.prototype, "btnRandom", void 0);
      Prefab_changeNameCtrl = __decorate([ ccclass ], Prefab_changeNameCtrl);
      return Prefab_changeNameCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_changeNameCtrl;
    cc._RF.pop();
  }, {
    "../../CfgMgrs/NameCfg": "NameCfg",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_goinviteCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0657flbqjBLNrn073a9kSx0", "Prefab_goinviteCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var shareMgr_1 = require("../../GameMgrs/shareMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.curClickData = null;
        _this.inviteInfo = null;
        _this.curClickData = shareMgr_1.default.getInstance().getCurClickData();
        _this.inviteInfo = shareMgr_1.default.getInstance().getShareTaskData();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          tipsLabel: ctrl.tipsLabel,
          btnquedin: ctrl.btnquedin,
          reward: ctrl.reward
        };
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        var count = this.model.curClickData.target - this.model.inviteInfo.number;
        count < 0 && (count = 0);
        this.ui.reward.getChildByName("count").getComponent(cc.Label).string = this.model.curClickData.amount;
        this.ui.tipsLabel.getComponent(cc.Label).string = "当前任务未完成，再分享" + count + "次可获得以下奖励。（每日首次分享可获得次数）";
      };
      return View;
    }(BaseView_1.default);
    var Prefab_goinviteCtrl = function(_super) {
      __extends(Prefab_goinviteCtrl, _super);
      function Prefab_goinviteCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.tipsLabel = null;
        _this.btnquedin = null;
        _this.reward = null;
        return _this;
      }
      Prefab_goinviteCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_goinviteCtrl.prototype.defineNetEvents = function() {};
      Prefab_goinviteCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_goinviteCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btnquedin, this.btnquedinCB, "确定");
      };
      Prefab_goinviteCtrl.prototype.start = function() {};
      Prefab_goinviteCtrl.prototype.btnquedinCB = function() {
        this.finish();
      };
      __decorate([ property({
        tooltip: "任务未达到提示",
        type: cc.Label
      }) ], Prefab_goinviteCtrl.prototype, "tipsLabel", void 0);
      __decorate([ property({
        tooltip: "确定按钮",
        type: cc.Node
      }) ], Prefab_goinviteCtrl.prototype, "btnquedin", void 0);
      __decorate([ property({
        tooltip: "奖励父节点",
        type: cc.Node
      }) ], Prefab_goinviteCtrl.prototype, "reward", void 0);
      Prefab_goinviteCtrl = __decorate([ ccclass ], Prefab_goinviteCtrl);
      return Prefab_goinviteCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_goinviteCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/shareMgr": "ShareMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_luckDrawTipCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d79fbowigtENbj3yhwisoEX", "Prefab_luckDrawTipCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.content = null;
        _this.timeString = null;
        _this.buttonlab = null;
        _this.buttonlab = "shareBtn";
        return _this;
      }
      Model.prototype.setContentLab = function(content, timeLab) {
        this.content = content;
        this.timeString = timeLab;
      };
      Model.prototype.setButtonLab = function(buttonlab) {
        this.buttonlab = buttonlab;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          label_contentLab: null,
          button_shareBtn: null,
          label_buttonLab: null,
          button_knowBtn: null,
          label_awardTime: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.label_contentLab = ctrl.contentLab;
        this.ui.button_shareBtn = ctrl.shareBtn;
        this.ui.label_buttonLab = ctrl.buttonLab;
        this.ui.button_knowBtn = ctrl.knowBtn;
        this.ui.label_awardTime = ctrl.awardTimeLab;
      };
      View.prototype.updateContent = function() {
        this.ui.label_contentLab.string = this.model.content;
        this.ui.label_awardTime.string = this.model.timeString;
      };
      View.prototype.addGrayLayer = function() {
        var _this = this;
        cc.loader.loadRes("Icons/singleColor", cc.SpriteFrame, function(err, spriteFrame) {
          if (err) cc.error(err); else {
            var _grayLayer_1 = new cc.Node();
            _grayLayer_1.addComponent(cc.Sprite).spriteFrame = spriteFrame;
            _grayLayer_1.parent = _this.node;
            var _size = cc.director.getVisibleSize();
            _grayLayer_1.width = _size.width;
            _grayLayer_1.height = _size.height;
            _grayLayer_1.color = cc.Color.BLACK;
            _grayLayer_1.opacity = 120;
            _grayLayer_1.zIndex = -1;
            _grayLayer_1.on(cc.Node.EventType.TOUCH_START, function() {
              _grayLayer_1.parent.destroy();
            }, _this);
          }
        });
      };
      return View;
    }(BaseView_1.default);
    var Prefab_luckDrawTipCtrl = function(_super) {
      __extends(Prefab_luckDrawTipCtrl, _super);
      function Prefab_luckDrawTipCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.contentLab = null;
        _this.shareBtn = null;
        _this.knowBtn = null;
        _this.awardTimeLab = null;
        _this._cb_response = null;
        return _this;
      }
      Prefab_luckDrawTipCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.model = new Model();
        this.view = new View(this.model);
        this.ui = this.view.ui;
        this.defineNetEvents();
        this.defineGlobalEvents();
        this.regAllEvents();
        this.connectUi();
      };
      Prefab_luckDrawTipCtrl.prototype.defineNetEvents = function() {};
      Prefab_luckDrawTipCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_luckDrawTipCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.button_shareBtn, this.onClickCB, "点击分享");
        this.connect(G_UiType.button, this.ui.button_knowBtn, this.onClickCB, "点击确认");
      };
      Prefab_luckDrawTipCtrl.prototype.showTip = function(content, cb, buttonLab, awardTimeLab) {
        this._cb_response = cb;
        buttonLab = buttonLab || this.model.buttonlab;
        this.ui.button_shareBtn.active = "shareBtn" == buttonLab;
        this.ui.button_knowBtn.active = "knowBtn" == buttonLab;
        this.model.setContentLab(content, awardTimeLab);
        this.view.updateContent();
      };
      Prefab_luckDrawTipCtrl.prototype.start = function() {};
      Prefab_luckDrawTipCtrl.prototype.onClickCB = function(event) {
        if ("shareBtn" == this.model.buttonlab) {
          console.log("分享");
          this._doFinish();
        } else {
          console.log("确认");
          this.finish();
        }
      };
      Prefab_luckDrawTipCtrl.prototype._doFinish = function() {
        this._cb_response && this._cb_response();
        this.finish();
      };
      __decorate([ property(cc.Label) ], Prefab_luckDrawTipCtrl.prototype, "contentLab", void 0);
      __decorate([ property(cc.Node) ], Prefab_luckDrawTipCtrl.prototype, "shareBtn", void 0);
      __decorate([ property(cc.Node) ], Prefab_luckDrawTipCtrl.prototype, "knowBtn", void 0);
      __decorate([ property(cc.Label) ], Prefab_luckDrawTipCtrl.prototype, "awardTimeLab", void 0);
      Prefab_luckDrawTipCtrl = __decorate([ ccclass ], Prefab_luckDrawTipCtrl);
      return Prefab_luckDrawTipCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_luckDrawTipCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_maimatankuangCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "70475FymIJLWY9ySkfb9Ajn", "Prefab_maimatankuangCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_bigCount: null,
          btn_smallCount: null,
          btn_close: null,
          node_frame: null
        };
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.btn_bigCount = ctrl.btn_bigCount;
        this.ui.btn_smallCount = ctrl.btn_smallCount;
        this.ui.btn_close = ctrl.btn_close;
        this.ui.node_frame = ctrl.node_frame;
      };
      View.prototype.setPos = function(pos) {
        this.ui.node_frame.position = pos;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_maimatankuangCtrl = function(_super) {
      __extends(Prefab_maimatankuangCtrl, _super);
      function Prefab_maimatankuangCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_smallCount = null;
        _this.btn_bigCount = null;
        _this.btn_close = null;
        _this.node_frame = null;
        return _this;
      }
      Prefab_maimatankuangCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_maimatankuangCtrl.prototype.defineNetEvents = function() {
        this.n_events = {};
      };
      Prefab_maimatankuangCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_maimatankuangCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.btn_bigCount, this.btn_bigCount_cb, "码数较大的");
        this.connect(G_UiType.button, this.ui.btn_smallCount, this.btn_smallCount_cb, "码数较小的");
        this.connect(G_UiType.button, this.ui.btn_close, this.btn_close_cb, "关闭");
      };
      Prefab_maimatankuangCtrl.prototype.setPos = function(pos) {
        this.view.setPos(pos);
      };
      Prefab_maimatankuangCtrl.prototype.btn_bigCount_cb = function() {
        this.gemit("onMaimaclose");
      };
      Prefab_maimatankuangCtrl.prototype.btn_smallCount_cb = function() {
        this.gemit("onMaimaclose");
      };
      Prefab_maimatankuangCtrl.prototype.btn_close_cb = function() {
        this.finish();
      };
      __decorate([ property(cc.Node) ], Prefab_maimatankuangCtrl.prototype, "btn_smallCount", void 0);
      __decorate([ property(cc.Node) ], Prefab_maimatankuangCtrl.prototype, "btn_bigCount", void 0);
      __decorate([ property(cc.Node) ], Prefab_maimatankuangCtrl.prototype, "btn_close", void 0);
      __decorate([ property(cc.Node) ], Prefab_maimatankuangCtrl.prototype, "node_frame", void 0);
      Prefab_maimatankuangCtrl = __decorate([ ccclass ], Prefab_maimatankuangCtrl);
      return Prefab_maimatankuangCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_maimatankuangCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView"
  } ],
  Prefab_marqueeCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "80efb/IQwlE+qdGwv9A/eiw", "Prefab_marqueeCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var MarqueMgr_1 = require("../../GameMgrs/MarqueMgr");
    var SwitchMgr_1 = require("../../GameMgrs/SwitchMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.marqueeSwitch = SwitchMgr_1.default.getInstance().get_switch_horse_race_lamp();
        return _this;
      }
      Model.prototype.updateSwitch = function(msg) {
        this.marqueeSwitch = msg.cfg.switch_horse_race_lamp;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this._marqueePos = null;
        _this._delayTime = null;
        _this._moveDistanceX = null;
        _this._moveTime = null;
        _this.ui = {
          node_marquee: null,
          node_mask: null,
          node_laba: null,
          node_tishidi: null
        };
        _this.node = ctrl.node;
        _this.initUi();
        _this._marqueePos = _this.ui.node_marquee.position;
        _this._delayTime = 3;
        _this._moveDistanceX = -(_this.ui.node_mask.width + _this.ui.node_marquee.width);
        _this._moveTime = 5;
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_marquee = ctrl.Marquee;
        this.ui.node_mask = ctrl.Mask;
        this.ui.node_laba = ctrl.laba;
        this.ui.node_tishidi = ctrl.tishidi;
        this.ui.node_mask.active = false;
        this.ui.node_laba.active = false;
        this.ui.node_tishidi.active = false;
      };
      View.prototype.setMarqueePos = function() {
        this.ui.node_marquee.position = this._marqueePos;
      };
      View.prototype.move = function() {
        var _this = this;
        var callback = cc.callFunc(function() {
          _this.setMarqueePos();
        });
        var moveBy = cc.moveBy(this._moveTime, this._moveDistanceX, 0);
        var delayTime = cc.delayTime(this._delayTime);
        var seq = cc.repeatForever(cc.sequence(moveBy, delayTime, callback));
        this.ui.node_marquee.runAction(seq);
      };
      View.prototype.showMarquee = function() {
        var bool = 1 == this.model.marqueeSwitch;
        if (!bool) return;
        this.ui.node_mask.active = true;
        this.ui.node_laba.active = true;
        this.ui.node_tishidi.active = true;
        var text = MarqueMgr_1.default.getInstance().getMarqueeText();
        this.ui.node_marquee.getComponent(cc.Label).string = text;
      };
      View.prototype.showSwitch = function() {
        if (this.ui.node_mask.active) {
          var bool = 1 == this.model.marqueeSwitch;
          this.ui.node_mask.active = bool;
          this.ui.node_laba.active = bool;
          this.ui.node_tishidi.active = bool;
        }
      };
      return View;
    }(BaseView_1.default);
    var MarqueeCtrl = function(_super) {
      __extends(MarqueeCtrl, _super);
      function MarqueeCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.Marquee = null;
        _this.Mask = null;
        _this.laba = null;
        _this.tishidi = null;
        return _this;
      }
      MarqueeCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.view.move();
      };
      MarqueeCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqHorseRaceLamp": this.http_reqHorseRaceLamp,
          "http.reqGameSwitch": this.http_reqGameSwitch
        };
      };
      MarqueeCtrl.prototype.defineGlobalEvents = function() {};
      MarqueeCtrl.prototype.connectUi = function() {};
      MarqueeCtrl.prototype.http_reqHorseRaceLamp = function(msg) {
        this.view.showMarquee();
      };
      MarqueeCtrl.prototype.http_reqGameSwitch = function(msg) {
        this.model.updateSwitch(msg);
        this.view.showSwitch();
      };
      __decorate([ property({
        tooltip: "跑马灯",
        type: cc.Node
      }) ], MarqueeCtrl.prototype, "Marquee", void 0);
      __decorate([ property({
        tooltip: "遮罩层",
        type: cc.Node
      }) ], MarqueeCtrl.prototype, "Mask", void 0);
      __decorate([ property({
        tooltip: "喇叭",
        type: cc.Node
      }) ], MarqueeCtrl.prototype, "laba", void 0);
      __decorate([ property({
        tooltip: "提示地",
        type: cc.Node
      }) ], MarqueeCtrl.prototype, "tishidi", void 0);
      MarqueeCtrl = __decorate([ ccclass ], MarqueeCtrl);
      return MarqueeCtrl;
    }(BaseCtrl_1.default);
    exports.default = MarqueeCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/MarqueMgr": "MarqueMgr",
    "../../GameMgrs/SwitchMgr": "SwitchMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_notifySettingCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "023a2RJjFNM/JOfPObIb0sy", "Prefab_notifySettingCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var SettingMgr_1 = require("../../GameMgrs/SettingMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.notifyInfo = null;
        _this.notifyInfo = SettingMgr_1.default.getInstance().getNotifyInfo();
        console.log("notifyInfo", _this.notifyInfo);
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_MatchAd: null,
          node_MatchBegin: null,
          node_ClubMatchSignUp: null,
          node_ClubMatchInvite: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_MatchAd = ctrl.MatchAd;
        this.ui.node_MatchBegin = ctrl.MatchBegin;
        this.ui.node_ClubMatchSignUp = ctrl.ClubMatchSignUp;
        this.ui.node_ClubMatchInvite = ctrl.ClubMatchInvite;
        this.ui.node_MatchAd.getComponent(cc.Toggle).isChecked = this.model.notifyInfo.bMatchAD;
        this.ui.node_MatchBegin.getComponent(cc.Toggle).isChecked = this.model.notifyInfo.bMatchBegin;
        this.ui.node_ClubMatchSignUp.getComponent(cc.Toggle).isChecked = this.model.notifyInfo.bClubMatchSignUp;
        this.ui.node_ClubMatchInvite.getComponent(cc.Toggle).isChecked = this.model.notifyInfo.bClubMatchInvite;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_notifySettingCtrl = function(_super) {
      __extends(Prefab_notifySettingCtrl, _super);
      function Prefab_notifySettingCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.MatchAd = null;
        _this.MatchBegin = null;
        _this.ClubMatchSignUp = null;
        _this.ClubMatchInvite = null;
        return _this;
      }
      Prefab_notifySettingCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_notifySettingCtrl.prototype.defineNetEvents = function() {};
      Prefab_notifySettingCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_notifySettingCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.toggle, this.ui.node_MatchAd, this.switchCB, "点击大奖赛广告开关");
        this.connect(G_UiType.toggle, this.ui.node_MatchBegin, this.switchCB, "点击比赛开始提示开关");
        this.connect(G_UiType.toggle, this.ui.node_ClubMatchSignUp, this.switchCB, "点击茶馆赛报名提示开关");
        this.connect(G_UiType.toggle, this.ui.node_ClubMatchInvite, this.switchCB, "点击茶馆赛邀请开关");
      };
      Prefab_notifySettingCtrl.prototype.start = function() {};
      Prefab_notifySettingCtrl.prototype.switchCB = function(event) {
        console.log(event.currentTarget.name);
        var clickNode = event.currentTarget;
        switch (event.currentTarget.name) {
         case "gameMatch":
          console.log("大奖赛开关设置");
          SettingMgr_1.default.getInstance().setProperty(!this.model.notifyInfo.bMatchAD, "notifyInfo", "bMatchAD");
          break;

         case "matchBeginTip":
          console.log("比赛开始提示开关");
          SettingMgr_1.default.getInstance().setProperty(!this.model.notifyInfo.bMatchBegin, "notifyInfo", "bMatchBegin");
          break;

         case "clubMatchMsg":
          console.log("茶馆赛报名提示开关");
          SettingMgr_1.default.getInstance().setProperty(!this.model.notifyInfo.bClubMatchSignUp, "notifyInfo", "bClubMatchSignUp");
          break;

         case "clubInviteMsg":
          console.log("茶馆赛邀请开关");
          SettingMgr_1.default.getInstance().setProperty(!this.model.notifyInfo.bClubMatchInvite, "notifyInfo", "bClubMatchInvite");
        }
        this.model.notifyInfo = SettingMgr_1.default.getInstance().getNotifyInfo();
        console.log("notifyInfo:", this.model.notifyInfo);
      };
      __decorate([ property({
        tooltip: "大奖赛广告",
        type: cc.Node
      }) ], Prefab_notifySettingCtrl.prototype, "MatchAd", void 0);
      __decorate([ property({
        tooltip: "大奖赛比赛开赛提醒",
        type: cc.Node
      }) ], Prefab_notifySettingCtrl.prototype, "MatchBegin", void 0);
      __decorate([ property({
        tooltip: "茶馆比赛开赛提醒",
        type: cc.Node
      }) ], Prefab_notifySettingCtrl.prototype, "ClubMatchSignUp", void 0);
      __decorate([ property({
        tooltip: "茶馆房间邀请信息",
        type: cc.Node
      }) ], Prefab_notifySettingCtrl.prototype, "ClubMatchInvite", void 0);
      Prefab_notifySettingCtrl = __decorate([ ccclass ], Prefab_notifySettingCtrl);
      return Prefab_notifySettingCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_notifySettingCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/SettingMgr": "SettingMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_playerDetailCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2acf5++42FK95e9EaXnLY2j", "Prefab_playerDetailCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var UiMgr_1 = require("../../GameMgrs/UiMgr");
    var GpsSdk_1 = require("../../../Plat/SdkMgrs/GpsSdk");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var LoginMgr_1 = require("../../GameMgrs/LoginMgr");
    var SwitchMgr_1 = require("../../GameMgrs/SwitchMgr");
    var LocalStorage_1 = require("../../Libs/LocalStorage");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.myInfo = null;
        _this.editString = null;
        _this.lastSignature = null;
        _this.bingAccount = null;
        UserMgr_1.default.getInstance().reqMyInfo();
        _this.bingAccount = SwitchMgr_1.default.getInstance().get_switch_bing_account();
        return _this;
      }
      Model.prototype.updateMyInfo = function() {
        this.myInfo = UserMgr_1.default.getInstance().getMyInfo();
        this.editString = this.myInfo.signature;
        this.lastSignature = this.myInfo.signature;
        console.log("editString", this.editString);
        console.log("lastSignature", this.lastSignature);
        this._check();
      };
      Model.prototype.updateSwitch = function(msg) {
        this.bingAccount = msg.cfg.switch_bing_account;
      };
      Model.prototype._check = function() {
        this.myInfo.idstatus = this.myInfo.idstatus ? this.myInfo.idstatus : 1;
        this.myInfo.headid = this.myInfo.headid ? this.myInfo.headid : 1;
        this.myInfo.headurl = this.myInfo.headurl ? this.myInfo.headurl : cc.url.raw("resources/Icons/img_rwtx.png");
        this.myInfo.signature = this.myInfo.signature ? this.myInfo.signature : "";
        this.myInfo.sex = this.myInfo.sex ? this.myInfo.sex : 2;
        this.myInfo.nickname = this.myInfo.nickname ? this.myInfo.nickname : "unknow";
        this.myInfo.phone = this.myInfo.phone ? this.myInfo.phone : "未绑定";
        this.myInfo.name = this.myInfo.name ? this.myInfo.name : "未认证";
        this.myInfo.city = this.myInfo.city ? this.myInfo.city : "未知";
        this.myInfo.sub_city = this.myInfo.sub_city ? this.myInfo.sub_city : "";
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          editBox_info: null,
          node_img_head: null,
          lab_id: null,
          lab_sex: null,
          lab_nickName: null,
          lab_iphone: null,
          lab_realyName: null,
          lab_address: null,
          btn_realyName: null,
          node_btn_iphone: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_img_head = ctrl.node_img_head;
        this.ui.editBox_info = ctrl.editBox_info;
        this.ui.lab_id = ctrl.lab_id;
        this.ui.lab_sex = ctrl.lab_sex;
        this.ui.lab_nickName = ctrl.lab_nickName;
        this.ui.lab_iphone = ctrl.lab_iphone;
        this.ui.lab_realyName = ctrl.lab_realyName;
        this.ui.lab_address = ctrl.lab_address;
        this.ui.btn_realyName = ctrl.node_btn_realyName;
        this.ui.node_btn_iphone = ctrl.node_btn_iphone;
        this.ui.node_btn_iphone.active = false;
        this.showBingAccount();
      };
      View.prototype.updateMyInfo = function() {
        this.updateHead();
        this.updateSignature();
        this.updateID();
        this.updateSex();
        this.updateNickName();
        this.updateIphone();
        this.updateRealyName();
        this.updateAddress();
        this.updataIdstatus();
      };
      View.prototype.updateHead = function() {
        console.log("我的头像刷新了", this.model.myInfo);
        UiMgr_1.default.getInstance().setUserHead(this.ui.node_img_head, this.model.myInfo.headid, this.model.myInfo.headurl);
      };
      View.prototype.updateSignature = function() {
        this.ui.editBox_info.string = this.model.myInfo.signature.trim();
      };
      View.prototype.updateID = function() {
        this.ui.lab_id.string = this.model.myInfo.logicid;
      };
      View.prototype.updateSex = function() {
        console.log("mySex", this.model.myInfo.sex);
        switch (this.model.myInfo.sex) {
         case 1:
          this.ui.lab_sex.string = "男";
          break;

         case 2:
         default:
          this.ui.lab_sex.string = "女";
        }
        console.log("mySex--", this.ui.lab_sex.string);
      };
      View.prototype.updateNickName = function() {
        this.ui.lab_nickName.string = this.model.myInfo.nickname.substring(0, 6);
      };
      View.prototype.updateIphone = function() {
        this.ui.lab_iphone.string = this.model.myInfo.phone;
      };
      View.prototype.updateRealyName = function() {
        this.ui.lab_realyName.string = this.model.myInfo.name;
      };
      View.prototype.updateAddress = function() {
        this.ui.lab_address.string = this.model.myInfo.city + this.model.myInfo.sub_city;
      };
      View.prototype.updataIdstatus = function() {
        this.ui.btn_realyName.active = 2 != this.model.myInfo.idstatus;
      };
      View.prototype.showBingAccount = function() {
        this.ui.node_btn_iphone.active = 1 == this.model.bingAccount;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_playerDetailCtrl = function(_super) {
      __extends(Prefab_playerDetailCtrl, _super);
      function Prefab_playerDetailCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_img_head = null;
        _this.editBox_info = null;
        _this.lab_id = null;
        _this.lab_sex = null;
        _this.lab_nickName = null;
        _this.lab_iphone = null;
        _this.lab_realyName = null;
        _this.lab_address = null;
        _this.node_btn_copy = null;
        _this.node_btn_nickName = null;
        _this.node_btn_realyName = null;
        _this.node_btn_address = null;
        _this.node_btn_iphone = null;
        _this.node_btn_close = null;
        return _this;
      }
      Prefab_playerDetailCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_playerDetailCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqMyInfo": this.http_reqMyInfo,
          "http.reqGameSwitch": this.http_reqGameSwitch,
          "http.reqSyncUser": this.http_reqSyncUser
        };
      };
      Prefab_playerDetailCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          locationResult: this.locationResult,
          weChat_empowerment_success: this.weChat_empowerment_success
        };
      };
      Prefab_playerDetailCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.edit, this.ui.editBox_info.node, this.editBox_info_cb, "输入个人签名完毕");
        this.connect(G_UiType.image, this.node_btn_copy, this.node_btn_copy_cb, "点击复制");
        this.connect(G_UiType.image, this.node_btn_nickName, this.node_btn_nickName_cb, "点击刷新昵称");
        this.connect(G_UiType.image, this.node_btn_iphone, this.node_btn_iphone_cb, "点击电话");
        this.connect(G_UiType.image, this.node_btn_realyName, this.node_btn_realyName_cb, "点击实名");
        this.connect(G_UiType.image, this.node_btn_address, this.node_btn_address_cb, "点击地址");
        this.connect(G_UiType.image, this.node_btn_close, this.node_close_cb, "点击关闭");
      };
      Prefab_playerDetailCtrl.prototype.start = function() {
        this.updateInfo();
      };
      Prefab_playerDetailCtrl.prototype.http_reqMyInfo = function(msg) {
        console.log("myinfoMsg", msg.sex, msg.nickname);
        this.updateInfo();
      };
      Prefab_playerDetailCtrl.prototype.http_reqGameSwitch = function(msg) {
        this.model.updateSwitch(msg);
        this.view.showBingAccount();
      };
      Prefab_playerDetailCtrl.prototype.http_reqSyncUser = function() {
        UserMgr_1.default.getInstance().reqEditHeadUrl(this.model.myInfo.headurl);
        UserMgr_1.default.getInstance().reqEditNickname(this.model.myInfo.nickname);
        UserMgr_1.default.getInstance().reqEditSex(this.model.myInfo.sex);
        UserMgr_1.default.getInstance().reqEditSignature(this.model.editString);
        FrameMgr_1.default.getInstance().showTips("刷新成功", null, 35, cc.color(0, 255, 30));
      };
      Prefab_playerDetailCtrl.prototype.locationResult = function() {
        var address = GpsSdk_1.default.getInstance().getAddress();
        address && (this.lab_address.string = address);
      };
      Prefab_playerDetailCtrl.prototype.weChat_empowerment_success = function(msg) {
        var loginCache = LocalStorage_1.default.getInstance().getWeChatToken();
        console.log("loginCache", loginCache.username, msg.username);
        if (loginCache.username != msg.username) {
          FrameMgr_1.default.getInstance().showDialog("登陆信息不合法,请重新登陆!", function() {
            LoginMgr_1.default.getInstance().logOut();
          }, "刷新失败");
          return;
        }
        UserMgr_1.default.getInstance().reqSyncUser(msg);
        msg.uid = LoginMgr_1.default.getInstance().getUid();
        msg.token = LoginMgr_1.default.getInstance().getToken();
        msg.gate_host = LoginMgr_1.default.getInstance().getHost();
        msg.gate_port = LoginMgr_1.default.getInstance().getPort();
        LocalStorage_1.default.getInstance().setWeChatToken(msg);
        console.log("LocalStorage1", msg, "LocalStorage2", msg.uid, msg.token, msg.gate_host, msg.gate_port);
      };
      Prefab_playerDetailCtrl.prototype.editBox_info_cb = function(name, event) {
        console.log("editBox_info_cb", event.getUserData().string);
        console.log("editString--", this.model.editString);
        console.log("lastSignature--", this.model.lastSignature);
        this.model.editString = event.getUserData().string;
        this.model.editString != this.model.lastSignature && UserMgr_1.default.getInstance().reqEditSignature(this.model.editString);
      };
      Prefab_playerDetailCtrl.prototype.node_btn_copy_cb = function() {
        console.log("node_btn_copy_cb");
        console.log("复制了微信号");
        cc.sys.isNative && G_PLATFORM.copyToClipboard(this.model.myInfo.logicid);
      };
      Prefab_playerDetailCtrl.prototype.node_btn_nickName_cb = function() {
        console.log("node_btn_nickName_cb");
        cc.sys.isNative && G_PLATFORM.weChatLogin();
      };
      Prefab_playerDetailCtrl.prototype.node_btn_iphone_cb = function() {
        console.log("node_btn_iphone_cb");
        this.start_sub_module(G_MODULE.bingPhone);
      };
      Prefab_playerDetailCtrl.prototype.node_btn_realyName_cb = function() {
        console.log("node_btn_realyName_cb");
        this.start_sub_module(G_MODULE.shimingRenZheng);
      };
      Prefab_playerDetailCtrl.prototype.node_btn_address_cb = function() {
        console.log("node_btn_address_cb");
        cc.sys.isNative && G_PLATFORM.startLocation(0);
      };
      Prefab_playerDetailCtrl.prototype.node_close_cb = function() {
        this.finish();
      };
      Prefab_playerDetailCtrl.prototype.updateInfo = function() {
        this.model.updateMyInfo();
        this.view.updateMyInfo();
      };
      __decorate([ property({
        tooltip: "头像",
        type: cc.Node
      }) ], Prefab_playerDetailCtrl.prototype, "node_img_head", void 0);
      __decorate([ property({
        tooltip: "个性签名",
        type: cc.EditBox
      }) ], Prefab_playerDetailCtrl.prototype, "editBox_info", void 0);
      __decorate([ property({
        tooltip: "ID",
        type: cc.Label
      }) ], Prefab_playerDetailCtrl.prototype, "lab_id", void 0);
      __decorate([ property({
        tooltip: "性别",
        type: cc.Label
      }) ], Prefab_playerDetailCtrl.prototype, "lab_sex", void 0);
      __decorate([ property({
        tooltip: "昵称",
        type: cc.Label
      }) ], Prefab_playerDetailCtrl.prototype, "lab_nickName", void 0);
      __decorate([ property({
        tooltip: "手机号",
        type: cc.Label
      }) ], Prefab_playerDetailCtrl.prototype, "lab_iphone", void 0);
      __decorate([ property({
        tooltip: "实名",
        type: cc.Label
      }) ], Prefab_playerDetailCtrl.prototype, "lab_realyName", void 0);
      __decorate([ property({
        tooltip: "所在地",
        type: cc.Label
      }) ], Prefab_playerDetailCtrl.prototype, "lab_address", void 0);
      __decorate([ property({
        tooltip: "复制ID按钮",
        type: cc.Node
      }) ], Prefab_playerDetailCtrl.prototype, "node_btn_copy", void 0);
      __decorate([ property({
        tooltip: "昵称修改按钮",
        type: cc.Node
      }) ], Prefab_playerDetailCtrl.prototype, "node_btn_nickName", void 0);
      __decorate([ property({
        tooltip: "实名认证按钮",
        type: cc.Node
      }) ], Prefab_playerDetailCtrl.prototype, "node_btn_realyName", void 0);
      __decorate([ property({
        tooltip: "定位按钮",
        type: cc.Node
      }) ], Prefab_playerDetailCtrl.prototype, "node_btn_address", void 0);
      __decorate([ property({
        tooltip: "绑定手机号按钮",
        type: cc.Node
      }) ], Prefab_playerDetailCtrl.prototype, "node_btn_iphone", void 0);
      __decorate([ property({
        tooltip: "关闭按钮",
        type: cc.Node
      }) ], Prefab_playerDetailCtrl.prototype, "node_btn_close", void 0);
      Prefab_playerDetailCtrl = __decorate([ ccclass ], Prefab_playerDetailCtrl);
      return Prefab_playerDetailCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_playerDetailCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/SdkMgrs/GpsSdk": "GpsSdk",
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/LoginMgr": "LoginMgr",
    "../../GameMgrs/SwitchMgr": "SwitchMgr",
    "../../GameMgrs/UiMgr": "UiMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView",
    "../../Libs/LocalStorage": "LocalStorage"
  } ],
  Prefab_plazaSettingCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "86966jejRRHWJtdJnHouVZK", "Prefab_plazaSettingCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var SettingMgr_1 = require("../../GameMgrs/SettingMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_CloseBtn: null,
          button_ControlSetting: null,
          button_MusicSetting: null,
          button_NotifySetting: null,
          prefab_MusicItem: null,
          prefab_OptionItem: null,
          prefab_NotifyItem: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_CloseBtn = ctrl.CloseBtn;
        this.ui.button_ControlSetting = ctrl.ControlSetting;
        this.ui.button_ControlSetting.interactable = false;
        this.ui.button_MusicSetting = ctrl.MusicSetting;
        this.ui.button_NotifySetting = ctrl.NotifySetting;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_SettingCtrl = function(_super) {
      __extends(Prefab_SettingCtrl, _super);
      function Prefab_SettingCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.CloseBtn = null;
        _this.ControlSetting = null;
        _this.MusicSetting = null;
        _this.NotifySetting = null;
        _this.Prefab_MusicItem = null;
        _this.Prefab_OptionItem = null;
        _this.Prefab_NotifyItem = null;
        return _this;
      }
      Prefab_SettingCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        console.log("myInfo:", this.model.myInfo);
        this.showChildView(this.Prefab_OptionItem);
        SettingMgr_1.default.getInstance().setIsPlaza(true);
      };
      Prefab_SettingCtrl.prototype.showChildView = function(prefabItem) {
        this.node.getChildByName("sub_view_item") && this.node.getChildByName("sub_view_item").removeFromParent();
        if (!prefabItem) return;
        var item = cc.instantiate(prefabItem);
        item.setName("sub_view_item");
        this.node.addChild(item);
      };
      Prefab_SettingCtrl.prototype.defineNetEvents = function() {};
      Prefab_SettingCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_SettingCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.node_CloseBtn, this._onClick_Close, "点击关闭");
        this.connect(G_UiType.button, this.ui.button_ControlSetting, this.ControlSetting_cb, "切换到操作设置");
        this.connect(G_UiType.button, this.ui.button_MusicSetting, this.MusicSetting_cb, "切换到音乐设置");
        this.connect(G_UiType.button, this.ui.button_NotifySetting, this.NotifySetting_cb, "切换到推送设置");
      };
      Prefab_SettingCtrl.prototype.start = function() {};
      Prefab_SettingCtrl.prototype._onClick_Close = function(event) {
        var msg = {
          controlInfo: null,
          musicInfo: null,
          notifyInfo: null
        };
        msg.controlInfo = SettingMgr_1.default.getInstance().getControlInfo();
        msg.musicInfo = SettingMgr_1.default.getInstance().getMusicInfo();
        msg.notifyInfo = SettingMgr_1.default.getInstance().getNotifyInfo();
        this.finish();
      };
      Prefab_SettingCtrl.prototype.ControlSetting_cb = function() {
        this.showChildView(this.Prefab_OptionItem);
        console.log("ControlSetting");
      };
      Prefab_SettingCtrl.prototype.MusicSetting_cb = function() {
        this.showChildView(this.Prefab_MusicItem);
        console.log("MusicSetting");
      };
      Prefab_SettingCtrl.prototype.NotifySetting_cb = function() {
        this.showChildView(this.Prefab_NotifyItem);
        console.log("NotifySetting");
      };
      __decorate([ property({
        tooltip: "关闭界面按钮",
        type: cc.Node
      }) ], Prefab_SettingCtrl.prototype, "CloseBtn", void 0);
      __decorate([ property({
        tooltip: "切换到操作设置",
        type: cc.Node
      }) ], Prefab_SettingCtrl.prototype, "ControlSetting", void 0);
      __decorate([ property({
        tooltip: "切换到游戏声音",
        type: cc.Node
      }) ], Prefab_SettingCtrl.prototype, "MusicSetting", void 0);
      __decorate([ property({
        tooltip: "切换到推送通知",
        type: cc.Node
      }) ], Prefab_SettingCtrl.prototype, "NotifySetting", void 0);
      __decorate([ property({
        tooltip: "游戏声音部件",
        type: cc.Prefab
      }) ], Prefab_SettingCtrl.prototype, "Prefab_MusicItem", void 0);
      __decorate([ property({
        tooltip: "操作设置部件",
        type: cc.Prefab
      }) ], Prefab_SettingCtrl.prototype, "Prefab_OptionItem", void 0);
      __decorate([ property({
        tooltip: "推送通知部件",
        type: cc.Prefab
      }) ], Prefab_SettingCtrl.prototype, "Prefab_NotifyItem", void 0);
      Prefab_SettingCtrl = __decorate([ ccclass ], Prefab_SettingCtrl);
      return Prefab_SettingCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_SettingCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/SettingMgr": "SettingMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_rankCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "35a5f73aQtHT7CXWdFynNuT", "Prefab_rankCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var RANK_LIST_TYPE = cc.Enum({
      RankData: 0,
      RankType: 1
    });
    var RANK_TYPE = cc.Enum({
      RankMj: 0,
      RankDdz: 1
    });
    var RANK_FILTE = cc.Enum({
      RankAll: 0,
      RankRoom: 1
    });
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.rank_type = null;
        _this.rank_filte = null;
        _this.rank_begin = null;
        _this.rank_record = true;
        _this.rank_type_call = true;
        _this.rank_list = null;
        _this.rank_type = RANK_LIST_TYPE.RankData;
        _this.rank_filte = RANK_FILTE.RankAll;
        _this.rank_list = new Array();
        _this.rank_begin = 0;
        _this.rank_record = true;
        _this.rank_type_call = false;
        _this.addRankData();
        return _this;
      }
      Model.prototype.cutRankType = function() {
        this.rank_type == RANK_LIST_TYPE.RankData ? this.rank_type = RANK_LIST_TYPE.RankType : this.rank_type = RANK_LIST_TYPE.RankData;
        return this.rank_type;
      };
      Model.prototype.getRankType = function() {
        return this.rank_type;
      };
      Model.prototype.cutRankFilte = function(state) {
        this.rank_filte = state;
      };
      Model.prototype.getRankFilte = function() {
        return this.rank_filte;
      };
      Model.prototype.getRankBegin = function() {
        return this.rank_begin;
      };
      Model.prototype.setRankBegin = function(num) {
        this.rank_begin = num;
      };
      Model.prototype.setRankRecord = function(state) {
        this.rank_record = state;
      };
      Model.prototype.getRankRecord = function() {
        return this.rank_record;
      };
      Model.prototype.setRankTypeCall = function(state) {
        this.rank_type_call = state;
      };
      Model.prototype.getRankTypeCall = function() {
        return this.rank_type_call;
      };
      Model.prototype.setRankData = function() {
        this.rank_list.splice(0, this.rank_list.length);
        this.addRankData();
      };
      Model.prototype.addRankData = function() {
        var count = 20;
        for (var i = this.rank_begin; i < this.rank_begin + count; i++) this.rank_list[i] = {
          _index: i + 1,
          _id: i + 1,
          _icon: i,
          _name: "逗比" + i,
          _award: "这是个文本",
          _sex: i % 2 == 1 ? "男" : "女",
          _site: "国外" + i
        };
      };
      Model.prototype.getRankData = function() {
        return this.rank_list;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_sprite_all: null,
          node_left_close: null,
          node_right_close: null,
          node_topCutTypeBtns: null,
          node_topCutBtns: null,
          node_rankView: null,
          node_typeView: null,
          node_rankList: null,
          node_typeList: null,
          player_data: null,
          scroll_rankView: null,
          node_select1: null,
          node_select2: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_sprite_all = ctrl.node_sprite_all;
        this.ui.node_left_close = ctrl.node_left_close;
        this.ui.node_right_close = ctrl.node_right_close;
        this.ui.node_topCutTypeBtns = ctrl.node_topCutTypeBtns;
        this.ui.node_topCutBtns = ctrl.node_topCutBtns;
        this.ui.node_rankView = ctrl.node_rankView;
        this.ui.node_typeView = ctrl.node_typeView;
        this.ui.node_rankList = ctrl.node_rankList;
        this.ui.node_typeList = ctrl.node_typeList;
        this.ui.player_data = ctrl.player_data;
        this.ui.scroll_rankView = ctrl.scroll_rankView;
        this.ui.node_select1 = ctrl.node_select1;
        this.ui.node_select2 = ctrl.node_select2;
        this.enterRankAction();
      };
      View.prototype.enterRankAction = function() {
        var _this = this;
        this.ui.node_sprite_all.x -= this.ui.node_sprite_all.width;
        this.ui.node_sprite_all.pauseSystemEvents(true);
        var moveBy = cc.moveBy(.3, cc.p(this.ui.node_sprite_all.width, 0));
        var callback = cc.callFunc(function() {
          _this.ui.node_sprite_all.resumeSystemEvents(true);
        });
        this.ui.node_sprite_all.runAction(cc.sequence(moveBy, callback));
      };
      View.prototype.exitRankAction = function(exitCall) {
        this.ui.node_sprite_all.pauseSystemEvents(true);
        var moveBy = cc.moveBy(.3, cc.p(-this.ui.node_sprite_all.width, 0));
        var callback = cc.callFunc(function() {
          exitCall();
        });
        this.ui.node_sprite_all.runAction(cc.sequence(moveBy, callback));
      };
      View.prototype.cutRankType = function() {
        this.ui.node_rankView.active = false;
        this.ui.node_typeView.active = false;
        var rank_type = this.model.cutRankType();
        rank_type == RANK_LIST_TYPE.RankData ? this.ui.node_rankView.active = true : this.ui.node_typeView.active = true;
      };
      View.prototype.cutRankFilte = function() {
        var rank_filte = this.model.getRankFilte();
        rank_filte = rank_filte == RANK_FILTE.RankRoom ? RANK_FILTE.RankAll : RANK_FILTE.RankRoom;
        this.model.cutRankFilte(rank_filte);
        this.ui.node_select1.active = false;
        this.ui.node_select2.active = false;
        rank_filte == RANK_FILTE.RankAll ? this.ui.node_select1.active = true : this.ui.node_select2.active = true;
        this.clearRankList();
        this.model.setRankData();
      };
      View.prototype.addRankPlayer = function(i) {
        var curNode = cc.instantiate(this.ui.player_data);
        curNode.parent = this.ui.node_rankList;
        return curNode;
      };
      View.prototype.setRankHeight = function(count) {
        var curNode = cc.instantiate(this.ui.player_data), layout = this.ui.node_rankList.getComponent(cc.Layout), layoutGap = layout.spacingY;
        this.ui.node_rankList.height = count * (curNode.height + layoutGap);
      };
      View.prototype.clearRankList = function() {
        this.ui.node_rankList.destroyAllChildren();
        this.model.setRankBegin(0);
        this.model.setRankRecord(true);
      };
      View.prototype.RankScrollTop = function() {
        this.ui.scroll_rankView.stopAutoScroll();
        this.ui.scroll_rankView.scrollToTop(0);
      };
      return View;
    }(BaseView_1.default);
    var Prefab_rankCtrl = function(_super) {
      __extends(Prefab_rankCtrl, _super);
      function Prefab_rankCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_sprite_all = null;
        _this.node_left_close = null;
        _this.node_right_close = null;
        _this.node_topCutTypeBtns = null;
        _this.node_topCutBtns = null;
        _this.node_rankView = null;
        _this.node_typeView = null;
        _this.node_rankList = null;
        _this.node_typeList = null;
        _this.player_data = null;
        _this.node_select1 = null;
        _this.node_select2 = null;
        _this.scroll_rankView = null;
        return _this;
      }
      Prefab_rankCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_rankCtrl.prototype.defineNetEvents = function() {
        this.n_events = {};
        this.http_reqRankDataCB();
      };
      Prefab_rankCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_rankCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.node_left_close, this.node_close_cb, "左关闭界面");
        this.connect(G_UiType.image, this.ui.node_right_close, this.node_close_cb, "右关闭界面");
        this.connect(G_UiType.image, this.ui.node_topCutTypeBtns, this.cut_type_cb, "切换列表类型");
        this.connect(G_UiType.image, this.ui.node_topCutBtns, this.cut_filte_cb, "切换列表内容");
        this.connect(G_UiType.scroll, this.ui.node_rankList, this.rank_view_cb, "切换列表内容");
        this.connect(G_UiType.button, this.node_sprite_all, function() {}, "屏蔽层");
      };
      Prefab_rankCtrl.prototype.start = function() {};
      Prefab_rankCtrl.prototype.addTypeCallBak = function() {
        if (true == this.model.getRankTypeCall()) return;
        var node_list = this.ui.node_typeList.children;
        var node_count = this.ui.node_typeList.childrenCount;
        for (var i = 0; i < node_count; i++) {
          var node_data = node_list[i];
          this.connect(G_UiType.image, node_data, this.rank_type_item_cb, "切换列表内容2");
        }
        this.model.setRankTypeCall(true);
      };
      Prefab_rankCtrl.prototype.http_reqRankDataCB = function() {
        this.refreshRank();
      };
      Prefab_rankCtrl.prototype.refreshRank = function() {
        var _this = this;
        var rank_list = this.model.getRankData();
        var itemNum = rank_list.length;
        this.view.setRankHeight(itemNum);
        var begin_num = this.model.getRankBegin();
        0 == begin_num && this.view.RankScrollTop();
        var _loop_1 = function(i) {
          odd = rank_list[i];
          BehaviorMgr_1.default.getInstance().setRankItemData(odd);
          var curItemComp = this_1.view.addRankPlayer(odd._index);
          this_1.connect(G_UiType.image, curItemComp, function(node, event) {
            var index = i;
            _this._onClick_item(index, node, event);
          }, "切换玩家" + i);
        };
        var this_1 = this, odd;
        for (var i = begin_num; i < itemNum; i++) _loop_1(i);
        this.model.setRankBegin(itemNum);
        this.model.setRankRecord(true);
      };
      Prefab_rankCtrl.prototype.node_close_cb = function(node, event) {
        var _this = this;
        console.log("node_close_cb");
        this.view.exitRankAction(function() {
          _this.finish();
        });
      };
      Prefab_rankCtrl.prototype.rank_view_cb = function(node, event) {
        if (event.type == cc.Node.EventType.TOUCH_MOVE) {
          var rank_list = this.model.getRankData();
          var itemNum = rank_list.length;
          var node_height = node.height - this.ui.node_rankView.height;
          if (.25 * node_height * 4 < node.y && true == this.model.getRankRecord() && itemNum < 100) {
            this.model.setRankRecord(false);
            this.model.addRankData();
            this.refreshRank();
          }
        }
      };
      Prefab_rankCtrl.prototype.cut_filte_cb = function(node, event) {
        this.view.cutRankFilte();
        this.refreshRank();
      };
      Prefab_rankCtrl.prototype.rank_type_item_cb = function(node, event) {
        this.view.cutRankType();
        switch (node.name) {
         case "Prefab_mj":
         case "Prefab_ddz":
          this.view.clearRankList();
          this.model.setRankData();
          this.refreshRank();
        }
      };
      Prefab_rankCtrl.prototype._onClick_item = function(index, node, event) {
        if ("touchcancel" == event.type) return;
        var rank_list = this.model.getRankData();
        var odd = rank_list[index];
        BehaviorMgr_1.default.getInstance().setRankItemData(odd);
        this.start_sub_module(G_MODULE.RoleDetail);
      };
      Prefab_rankCtrl.prototype.cut_type_cb = function(node, event) {
        this.view.cutRankType();
        this.addTypeCallBak();
      };
      __decorate([ property(cc.Node) ], Prefab_rankCtrl.prototype, "node_sprite_all", void 0);
      __decorate([ property(cc.Node) ], Prefab_rankCtrl.prototype, "node_left_close", void 0);
      __decorate([ property(cc.Node) ], Prefab_rankCtrl.prototype, "node_right_close", void 0);
      __decorate([ property(cc.Node) ], Prefab_rankCtrl.prototype, "node_topCutTypeBtns", void 0);
      __decorate([ property(cc.Node) ], Prefab_rankCtrl.prototype, "node_topCutBtns", void 0);
      __decorate([ property(cc.Node) ], Prefab_rankCtrl.prototype, "node_rankView", void 0);
      __decorate([ property(cc.Node) ], Prefab_rankCtrl.prototype, "node_typeView", void 0);
      __decorate([ property(cc.Node) ], Prefab_rankCtrl.prototype, "node_rankList", void 0);
      __decorate([ property(cc.Node) ], Prefab_rankCtrl.prototype, "node_typeList", void 0);
      __decorate([ property(cc.Prefab) ], Prefab_rankCtrl.prototype, "player_data", void 0);
      __decorate([ property(cc.Node) ], Prefab_rankCtrl.prototype, "node_select1", void 0);
      __decorate([ property(cc.Node) ], Prefab_rankCtrl.prototype, "node_select2", void 0);
      __decorate([ property(cc.ScrollView) ], Prefab_rankCtrl.prototype, "scroll_rankView", void 0);
      Prefab_rankCtrl = __decorate([ ccclass ], Prefab_rankCtrl);
      return Prefab_rankCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_rankCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_rankItemCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "13896LAD5xIKb0l03F/+mZe", "Prefab_rankItemCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var UiMgr_1 = require("../../GameMgrs/UiMgr");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.m_rank = null;
        _this.m_icon = null;
        _this.m_name = null;
        _this.m_award = null;
        var player_data = BehaviorMgr_1.default.getInstance().getRankItemData();
        _this.m_rank = player_data._index;
        _this.m_icon = player_data._icon;
        _this.m_name = player_data._name;
        _this.m_award = player_data._award;
        return _this;
      }
      Model.prototype.getRankIndex = function() {
        return this.m_rank;
      };
      Model.prototype.getRankIcon = function() {
        return this.m_icon;
      };
      Model.prototype.getRankName = function() {
        return this.m_name;
      };
      Model.prototype.getRankAward = function() {
        return this.m_award;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_rank_pic: null,
          node_rank_text: null,
          rank_text: null,
          rank_pic: null,
          player_icon: null,
          player_name: null,
          award_text: null,
          spriteFrame_rank1: null,
          spriteFrame_rank2: null,
          spriteFrame_rank3: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_rank_pic = ctrl.node_rank_pic;
        this.ui.node_rank_text = ctrl.node_rank_text;
        this.ui.rank_text = ctrl.rank_text;
        this.ui.rank_pic = ctrl.rank_pic;
        this.ui.player_icon = ctrl.player_icon;
        this.ui.player_name = ctrl.player_name;
        this.ui.award_text = ctrl.award_text;
        this.ui.spriteFrame_rank1 = ctrl.spriteFrame_rank1;
        this.ui.spriteFrame_rank2 = ctrl.spriteFrame_rank2;
        this.ui.spriteFrame_rank3 = ctrl.spriteFrame_rank3;
        this.refreshRankIndex();
        this.refreshRankIcon();
        this.refreshRankName();
        this.refreshRankAward();
      };
      View.prototype.refreshRankIndex = function() {
        var index = this.model.getRankIndex();
        this.ui.node_rank_pic.active = false;
        this.ui.node_rank_text.active = false;
        if (1 == index) {
          this.ui.node_rank_pic.active = true;
          this.ui.spriteFrame_rank1 && (this.ui.rank_pic.spriteFrame = this.ui.spriteFrame_rank1);
        } else if (2 == index) {
          this.ui.node_rank_pic.active = true;
          this.ui.spriteFrame_rank2 && (this.ui.rank_pic.spriteFrame = this.ui.spriteFrame_rank2);
        } else if (3 == index) {
          this.ui.node_rank_pic.active = true;
          this.ui.spriteFrame_rank3 && (this.ui.rank_pic.spriteFrame = this.ui.spriteFrame_rank3);
        } else {
          this.ui.node_rank_text.active = true;
          this.ui.rank_text.string = index;
        }
      };
      View.prototype.refreshRankIcon = function() {
        var myInfo = UserMgr_1.default.getInstance().getMyInfo();
        UiMgr_1.default.getInstance().setUserHead(this.ui.player_icon, myInfo.headid, myInfo.headurl);
      };
      View.prototype.refreshRankName = function() {
        this.ui.player_name.string = this.model.getRankName();
      };
      View.prototype.refreshRankAward = function() {
        this.ui.award_text.string = this.model.getRankAward();
      };
      return View;
    }(BaseView_1.default);
    var Prefab_rankItemCtrl = function(_super) {
      __extends(Prefab_rankItemCtrl, _super);
      function Prefab_rankItemCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_rank_pic = null;
        _this.node_rank_text = null;
        _this.rank_text = null;
        _this.rank_pic = null;
        _this.player_icon = null;
        _this.player_name = null;
        _this.award_text = null;
        _this.spriteFrame_rank1 = null;
        _this.spriteFrame_rank2 = null;
        _this.spriteFrame_rank3 = null;
        return _this;
      }
      Prefab_rankItemCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_rankItemCtrl.prototype.defineNetEvents = function() {};
      Prefab_rankItemCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_rankItemCtrl.prototype.connectUi = function() {};
      Prefab_rankItemCtrl.prototype.start = function() {};
      __decorate([ property(cc.Node) ], Prefab_rankItemCtrl.prototype, "node_rank_pic", void 0);
      __decorate([ property(cc.Node) ], Prefab_rankItemCtrl.prototype, "node_rank_text", void 0);
      __decorate([ property(cc.Label) ], Prefab_rankItemCtrl.prototype, "rank_text", void 0);
      __decorate([ property(cc.Sprite) ], Prefab_rankItemCtrl.prototype, "rank_pic", void 0);
      __decorate([ property(cc.Node) ], Prefab_rankItemCtrl.prototype, "player_icon", void 0);
      __decorate([ property(cc.Label) ], Prefab_rankItemCtrl.prototype, "player_name", void 0);
      __decorate([ property(cc.Label) ], Prefab_rankItemCtrl.prototype, "award_text", void 0);
      __decorate([ property(cc.SpriteFrame) ], Prefab_rankItemCtrl.prototype, "spriteFrame_rank1", void 0);
      __decorate([ property(cc.SpriteFrame) ], Prefab_rankItemCtrl.prototype, "spriteFrame_rank2", void 0);
      __decorate([ property(cc.SpriteFrame) ], Prefab_rankItemCtrl.prototype, "spriteFrame_rank3", void 0);
      Prefab_rankItemCtrl = __decorate([ ccclass ], Prefab_rankItemCtrl);
      return Prefab_rankItemCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_rankItemCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/UiMgr": "UiMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_rankRoleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2fc70iFr15K4IYtn2CfhOGc", "Prefab_rankRoleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var UiMgr_1 = require("../../GameMgrs/UiMgr");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.m_id = null;
        _this.m_icon = null;
        _this.m_name = null;
        _this.m_sex = null;
        _this.m_site = null;
        var role_data = BehaviorMgr_1.default.getInstance().getRankItemData();
        _this.m_id = role_data._id;
        _this.m_icon = role_data._icon;
        _this.m_name = role_data._name;
        _this.m_sex = role_data._sex;
        _this.m_site = role_data._site;
        return _this;
      }
      Model.prototype.getRoleId = function() {
        return this.m_id;
      };
      Model.prototype.getRoleIcon = function() {
        return this.m_icon;
      };
      Model.prototype.getRoleName = function() {
        return this.m_name;
      };
      Model.prototype.getRoleSex = function() {
        return this.m_sex;
      };
      Model.prototype.getRoleSite = function() {
        return this.m_site;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_rank_close: null,
          role_icon: null,
          role_id: null,
          role_name: null,
          role_sex: null,
          role_site: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_rank_close = ctrl.node_rank_close;
        this.ui.role_icon = ctrl.role_icon;
        this.ui.role_id = ctrl.role_id;
        this.ui.role_name = ctrl.role_name;
        this.ui.role_sex = ctrl.role_sex;
        this.ui.role_site = ctrl.role_site;
        this.refreshIcon();
        this.refreshId();
        this.refreshName();
        this.refreshSex();
        this.refreshSite();
      };
      View.prototype.refreshIcon = function() {
        var myInfo = UserMgr_1.default.getInstance().getMyInfo();
        UiMgr_1.default.getInstance().setUserHead(this.ui.role_icon, myInfo.headid, myInfo.headurl);
      };
      View.prototype.refreshId = function() {
        this.ui.role_id.string = this.model.getRoleId();
      };
      View.prototype.refreshName = function() {
        this.ui.role_name.string = this.model.getRoleName();
      };
      View.prototype.refreshSex = function() {
        this.ui.role_sex.string = this.model.getRoleSex();
      };
      View.prototype.refreshSite = function() {
        this.ui.role_site.string = this.model.getRoleSite();
      };
      return View;
    }(BaseView_1.default);
    var Prefab_rankRoleCtrl = function(_super) {
      __extends(Prefab_rankRoleCtrl, _super);
      function Prefab_rankRoleCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_rank_close = null;
        _this.role_icon = null;
        _this.role_id = null;
        _this.role_name = null;
        _this.role_sex = null;
        _this.role_site = null;
        return _this;
      }
      Prefab_rankRoleCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_rankRoleCtrl.prototype.defineNetEvents = function() {};
      Prefab_rankRoleCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_rankRoleCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.node_rank_close, this.node_close_cb, "关闭界面");
      };
      Prefab_rankRoleCtrl.prototype.start = function() {};
      Prefab_rankRoleCtrl.prototype.node_close_cb = function(node, event) {
        console.log("node_close_cb");
        this.finish();
      };
      __decorate([ property(cc.Node) ], Prefab_rankRoleCtrl.prototype, "node_rank_close", void 0);
      __decorate([ property(cc.Node) ], Prefab_rankRoleCtrl.prototype, "role_icon", void 0);
      __decorate([ property(cc.Label) ], Prefab_rankRoleCtrl.prototype, "role_id", void 0);
      __decorate([ property(cc.Label) ], Prefab_rankRoleCtrl.prototype, "role_name", void 0);
      __decorate([ property(cc.Label) ], Prefab_rankRoleCtrl.prototype, "role_sex", void 0);
      __decorate([ property(cc.Label) ], Prefab_rankRoleCtrl.prototype, "role_site", void 0);
      Prefab_rankRoleCtrl = __decorate([ ccclass ], Prefab_rankRoleCtrl);
      return Prefab_rankRoleCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_rankRoleCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/UiMgr": "UiMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_rechargeRecordCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2dfbcTjgLlHIp5vNvWkwVgy", "Prefab_rechargeRecordCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_close: ctrl.btn_close
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {};
      return View;
    }(BaseView_1.default);
    var Prefab_rechargeRecordCtrl = function(_super) {
      __extends(Prefab_rechargeRecordCtrl, _super);
      function Prefab_rechargeRecordCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.btn_close = null;
        return _this;
      }
      Prefab_rechargeRecordCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_rechargeRecordCtrl.prototype.defineNetEvents = function() {};
      Prefab_rechargeRecordCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_rechargeRecordCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.btn_close, this.btn_close_cb, "关闭");
      };
      Prefab_rechargeRecordCtrl.prototype.start = function() {};
      Prefab_rechargeRecordCtrl.prototype.btn_close_cb = function() {
        this.finish();
      };
      __decorate([ property(cc.Node) ], Prefab_rechargeRecordCtrl.prototype, "btn_close", void 0);
      Prefab_rechargeRecordCtrl = __decorate([ ccclass ], Prefab_rechargeRecordCtrl);
      return Prefab_rechargeRecordCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_rechargeRecordCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_reliefMoneyCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "80997TN+9hLE4GbL9/iXzIG", "Prefab_reliefMoneyCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          lab_content: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.lab_content = ctrl.lab_content;
      };
      View.prototype.updateContent = function() {
        this.ui.lab_content.string = this.model.str_content;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_reliefMoneyCtrl = function(_super) {
      __extends(Prefab_reliefMoneyCtrl, _super);
      function Prefab_reliefMoneyCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_close = null;
        _this.node_btn_rec = null;
        _this.lab_content = null;
        _this._rec_cb = null;
        return _this;
      }
      Prefab_reliefMoneyCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_reliefMoneyCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqGetRelief": this.http_reqGetRelief
        };
      };
      Prefab_reliefMoneyCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_reliefMoneyCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.node_close, this.node_close_cb, "点击关闭");
        this.connect(G_UiType.image, this.node_btn_rec, this.node_btn_rec_cb, "点击领取");
      };
      Prefab_reliefMoneyCtrl.prototype.start = function() {};
      Prefab_reliefMoneyCtrl.prototype.node_close_cb = function() {
        this.finish();
      };
      Prefab_reliefMoneyCtrl.prototype.node_btn_rec_cb = function() {
        UserMgr_1.default.getInstance().reqGetRelief();
      };
      Prefab_reliefMoneyCtrl.prototype.http_reqGetRelief = function(msg) {
        console.log("http_reqGetRelief msg=", msg);
        this.finish();
      };
      __decorate([ property(cc.Node) ], Prefab_reliefMoneyCtrl.prototype, "node_close", void 0);
      __decorate([ property(cc.Node) ], Prefab_reliefMoneyCtrl.prototype, "node_btn_rec", void 0);
      __decorate([ property(cc.Label) ], Prefab_reliefMoneyCtrl.prototype, "lab_content", void 0);
      Prefab_reliefMoneyCtrl = __decorate([ ccclass ], Prefab_reliefMoneyCtrl);
      return Prefab_reliefMoneyCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_reliefMoneyCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_shareTipCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e6dfeOjpxlPpoFtye/X9UvU", "Prefab_shareTipCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_confirm: ctrl.btn_confirm,
          btn_cancel: ctrl.btn_cancel
        };
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {};
      return View;
    }(BaseView_1.default);
    var Prefab_shareTipCtrl = function(_super) {
      __extends(Prefab_shareTipCtrl, _super);
      function Prefab_shareTipCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_confirm = null;
        _this.btn_cancel = null;
        return _this;
      }
      Prefab_shareTipCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_shareTipCtrl.prototype.defineNetEvents = function() {};
      Prefab_shareTipCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_shareTipCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.btn_confirm, this.btn_confirm_cb, "点击确定按钮");
        this.connect(G_UiType.button, this.ui.btn_cancel, this.btn_cancel_cb, "点击取消按钮");
      };
      Prefab_shareTipCtrl.prototype.btn_confirm_cb = function() {
        this.start_sub_module(G_MODULE.Shared);
        this.finish();
      };
      Prefab_shareTipCtrl.prototype.btn_cancel_cb = function() {
        this.finish();
      };
      __decorate([ property({
        tooltip: "确定按钮",
        type: cc.Node
      }) ], Prefab_shareTipCtrl.prototype, "btn_confirm", void 0);
      __decorate([ property({
        tooltip: "取消按钮",
        type: cc.Node
      }) ], Prefab_shareTipCtrl.prototype, "btn_cancel", void 0);
      Prefab_shareTipCtrl = __decorate([ ccclass ], Prefab_shareTipCtrl);
      return Prefab_shareTipCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_shareTipCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_sharedCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e3d67uhISJBcopgGI+qw88h", "Prefab_sharedCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_friendCircle: null,
          node_click: null,
          node_weixin: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_click = ctrl.node_click;
        this.ui.node_weixin = ctrl.node_weixin;
        this.ui.node_friendCircle = ctrl.node_friendCircle;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_sharedCtrl = function(_super) {
      __extends(Prefab_sharedCtrl, _super);
      function Prefab_sharedCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_weixin = null;
        _this.node_friendCircle = null;
        _this.node_click = null;
        return _this;
      }
      Prefab_sharedCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_sharedCtrl.prototype.defineNetEvents = function() {};
      Prefab_sharedCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_sharedCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.node_weixin, this.node_weixin_cb, "点击微信好友分享");
        this.connect(G_UiType.image, this.node_friendCircle, this.node_friendCircle_cb, "点击朋友圈分享");
        this.connect(G_UiType.image, this.node_click, this.node_close_cb, "点击关闭");
      };
      Prefab_sharedCtrl.prototype.start = function() {};
      Prefab_sharedCtrl.prototype.node_close_cb = function(event) {
        console.log("node_close_cb");
        this.finish();
      };
      Prefab_sharedCtrl.prototype.node_weixin_cb = function(event) {
        console.log("node_weixin_cb");
        if (cc.sys.isNative) {
          this.finish();
          G_PLATFORM.wxShareSpecificImage(G_PLATFORM.WX_SHARE_TYPE.WXSceneSession, "");
        }
      };
      Prefab_sharedCtrl.prototype.node_friendCircle_cb = function(event) {
        console.log("node_phone_cb");
        if (cc.sys.isNative) {
          this.finish();
          G_PLATFORM.wxShareSpecificImage(G_PLATFORM.WX_SHARE_TYPE.WXSceneSession, "");
        }
      };
      __decorate([ property(cc.Node) ], Prefab_sharedCtrl.prototype, "node_weixin", void 0);
      __decorate([ property(cc.Node) ], Prefab_sharedCtrl.prototype, "node_friendCircle", void 0);
      __decorate([ property(cc.Node) ], Prefab_sharedCtrl.prototype, "node_click", void 0);
      Prefab_sharedCtrl = __decorate([ ccclass ], Prefab_sharedCtrl);
      return Prefab_sharedCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_sharedCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_shimingRenZhengCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "96f10jlbrJDw6gTD2VkaX83", "Prefab_shimingRenZhengCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.realName = null;
        _this.PersonID = null;
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_submit: null,
          node_cancel: null,
          realName: null,
          PersonID: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_submit = ctrl.node_submit;
        this.ui.node_cancel = ctrl.node_cancel;
        this.ui.realName = ctrl.realName;
        this.ui.PersonID = ctrl.PersonID;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_shimingRenZhengCtrl = function(_super) {
      __extends(Prefab_shimingRenZhengCtrl, _super);
      function Prefab_shimingRenZhengCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_submit = null;
        _this.node_cancel = null;
        _this.realName = null;
        _this.PersonID = null;
        return _this;
      }
      Prefab_shimingRenZhengCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_shimingRenZhengCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.ReqIdCardRegistration": this.http_ReqIdCardRegistration
        };
      };
      Prefab_shimingRenZhengCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_shimingRenZhengCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.node_cancel, this.node_cancel_cb, "点击取消");
        this.connect(G_UiType.image, this.ui.node_submit, this.node_submit_cb, "点击认证");
        this.connect(G_UiType.edit, this.ui.realName.node, this.realName_cb, "输入真实姓名");
        this.connect(G_UiType.edit, this.ui.PersonID.node, this.PersonID_cb, "输入身份证号");
      };
      Prefab_shimingRenZhengCtrl.prototype.start = function() {};
      Prefab_shimingRenZhengCtrl.prototype.node_cancel_cb = function(event) {
        this.finish();
      };
      Prefab_shimingRenZhengCtrl.prototype.node_submit_cb = function() {
        if (null == this.model.realName || "" == this.model.realName) {
          console.log("请填写真实名");
          FrameMgr_1.default.getInstance().showTips("请填写真实名!", null, 35, cc.color(255, 36, 0));
          return;
        }
        if (null == this.model.PersonID || "" == this.model.PersonID) {
          console.log("请填写身份证");
          FrameMgr_1.default.getInstance().showTips("请填写身份证!", null, 35, cc.color(255, 36, 0));
          return;
        }
        console.log("真实姓名", this.model.realName.length);
        console.log("身份证", this.model.PersonID);
        console.log("node_submit_cb");
        UserMgr_1.default.getInstance().ReqIdCardRegistration({
          name: this.model.realName,
          card: this.model.PersonID
        });
      };
      Prefab_shimingRenZhengCtrl.prototype.realName_cb = function(eventtype, event) {
        console.log("realName_cb", event.target.getComponent(cc.EditBox).string);
        "text-changed" == eventtype && true == this.clearEmoji(event.target.getComponent(cc.EditBox).string) && (event.target.getComponent(cc.EditBox).string = "");
        if ("editing-did-ended" == eventtype) {
          console.log(event.target.getComponent(cc.EditBox).string);
          this.model.realName = event.target.getComponent(cc.EditBox).string;
        }
      };
      Prefab_shimingRenZhengCtrl.prototype.PersonID_cb = function(eventtype, event) {
        console.log("PersonID_cb");
        "editing-did-ended" == eventtype && (this.model.PersonID = event.target.getComponent(cc.EditBox).string);
      };
      Prefab_shimingRenZhengCtrl.prototype.clearEmoji = function(emoji) {
        for (var i = 0; i < emoji.length; i++) {
          var hs = emoji.charCodeAt(i);
          if (55296 <= hs && hs <= 56319) {
            if (emoji.length > 1) {
              var ls = emoji.charCodeAt(i + 1);
              var uc = 1024 * (hs - 55296) + (ls - 56320) + 65536;
              if (118784 <= uc && uc <= 128895) return true;
            }
          } else if (emoji.length > 1) {
            var ls = emoji.charCodeAt(i + 1);
            if (8419 == ls) return true;
          } else {
            if (8448 <= hs && hs <= 10239) return true;
            if (11013 <= hs && hs <= 11015) return true;
            if (10548 <= hs && hs <= 10549) return true;
            if (12951 <= hs && hs <= 12953) return true;
            if (169 == hs || 174 == hs || 12349 == hs || 12336 == hs || 11093 == hs || 11036 == hs || 11035 == hs || 11088 == hs) return true;
          }
        }
      };
      Prefab_shimingRenZhengCtrl.prototype.http_ReqIdCardRegistration = function() {
        console.log("认证成功");
        FrameMgr_1.default.getInstance().showTips("实名认证成功!", null, 35, cc.color(0, 255, 30));
        UserMgr_1.default.getInstance().reqMyInfo();
        this.finish();
      };
      __decorate([ property({
        tooltip: "认证按钮",
        type: cc.Node
      }) ], Prefab_shimingRenZhengCtrl.prototype, "node_submit", void 0);
      __decorate([ property({
        tooltip: "取消按钮",
        type: cc.Node
      }) ], Prefab_shimingRenZhengCtrl.prototype, "node_cancel", void 0);
      __decorate([ property({
        tooltip: "真实姓名",
        type: cc.EditBox
      }) ], Prefab_shimingRenZhengCtrl.prototype, "realName", void 0);
      __decorate([ property({
        tooltip: "身份证号",
        type: cc.EditBox
      }) ], Prefab_shimingRenZhengCtrl.prototype, "PersonID", void 0);
      Prefab_shimingRenZhengCtrl = __decorate([ ccclass ], Prefab_shimingRenZhengCtrl);
      return Prefab_shimingRenZhengCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_shimingRenZhengCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_shopCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "940f0RmWIVHbJHEqD5/ApE/", "Prefab_shopCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var RechargeMgr_1 = require("../../GameMgrs/RechargeMgr");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var STR_BtnIndex = "_btnIndex";
    var STR_ItemInfo = "_itemInfo";
    var BUY_TYPE = cc.Enum({
      buyCoin: 0,
      buyGold: 1
    });
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.myinfo = null;
        _this.infoList = null;
        _this.updateMyInfo();
        _this.infoList = RechargeMgr_1.default.getInstance().getGoodsList();
        return _this;
      }
      Model.prototype.updateMyInfo = function() {
        this.myinfo = UserMgr_1.default.getInstance().getMyInfo();
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this._showItemNum = null;
        _this._itemHeight = null;
        _this._itemWidth = null;
        _this._itemOffX = null;
        _this._itemOffY = null;
        _this._startPosX = null;
        _this._clickType = null;
        _this._lineNum = null;
        _this._addRecord = null;
        _this.ui = {
          node_leftBtns: null,
          node_goldList: null,
          node_coinList: null,
          node_goldContent: null,
          node_coinContent: null,
          lab_money1: null,
          lab_money2: null,
          lab_money3: null,
          prefab_item: null,
          prefab_itemDetail: null,
          node_close: null,
          node_btn_record: null,
          node_btn_bag: null,
          prefab_loading: null,
          node_loading: null,
          node_btn_bindagent: null
        };
        _this.node = null;
        _this._lineNum = 4;
        _this._itemOffX = 30;
        _this._itemOffY = 20;
        _this._showItemNum = 0;
        _this._addRecord = new Array(false, false);
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_leftBtns = ctrl.node_leftBtns;
        this.ui.node_goldList = ctrl.node_goldList;
        this.ui.node_coinList = ctrl.node_coinList;
        this.ui.node_goldContent = ctrl.node_goldContent;
        this.ui.node_coinContent = ctrl.node_coinContent;
        this.ui.lab_money1 = ctrl.lab_money1;
        this.ui.lab_money2 = ctrl.lab_money2;
        this.ui.lab_money3 = ctrl.lab_money3;
        this.ui.prefab_item = ctrl.prefab_item;
        this.ui.prefab_itemDetail = ctrl.prefab_itemDetail;
        this.ui.node_close = ctrl.node_close;
        this.ui.node_btn_record = ctrl.node_btn_record;
        this.ui.node_btn_bag = ctrl.node_btn_bag;
        this.ui.prefab_loading = ctrl.prefab_loading;
        this.ui.node_btn_bindagent = ctrl.node_btn_bindagent;
        this.initGoods();
        this.updateMyInfo();
        this.initLoading();
      };
      View.prototype.updateMyInfo = function() {
        this.updateMoney2();
      };
      View.prototype.updateMoney2 = function() {
        this.ui.lab_money2.string = this.model.myinfo.gold;
      };
      View.prototype.initGoods = function() {
        for (var i = 0; i < this.model.infoList.length; i++) {
          BehaviorMgr_1.default.getInstance().setGoodsItemData(i, "gold");
          BehaviorMgr_1.default.getInstance().setGoodsBuyData(i + 1, "gold");
          var curNode = cc.instantiate(this.ui.prefab_item);
          curNode.parent = this.ui.node_goldContent;
        }
        console.log("infoList", this.model.infoList.length, this.model.infoList);
      };
      View.prototype.popLoading = function() {
        if (null != this.ui.node_loading) {
          var prefabcomp = this.ui.node_loading.getComponent(this.ui.node_loading.name);
          prefabcomp.updateJuHua(false);
        }
      };
      View.prototype.showLoading = function() {
        if (null != this.ui.node_loading) {
          var prefabcomp = this.ui.node_loading.getComponent(this.ui.node_loading.name);
          prefabcomp.updateJuHua(true);
        }
      };
      View.prototype.initLoading = function() {
        if (null == this.ui.node_loading) {
          this.ui.node_loading = cc.instantiate(this.ui.prefab_loading);
          this.ui.node_loading.parent = this.node;
          this.ui.node_loading.position = cc.p(0, 0);
        }
      };
      return View;
    }(BaseView_1.default);
    var Prefab_shopCtrl = function(_super) {
      __extends(Prefab_shopCtrl, _super);
      function Prefab_shopCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.lab_money1 = null;
        _this.lab_money2 = null;
        _this.lab_money3 = null;
        _this.node_leftBtns = null;
        _this.node_btn_record = null;
        _this.node_goldList = null;
        _this.node_coinList = null;
        _this.node_goldContent = null;
        _this.node_coinContent = null;
        _this.prefab_item = null;
        _this.node_close = null;
        _this.node_btn_bag = null;
        _this.node_btn_bindagent = null;
        _this.prefab_itemDetail = null;
        _this.prefab_loading = null;
        return _this;
      }
      Prefab_shopCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_shopCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqMyInfo": this.http_reqMyInfo
        };
      };
      Prefab_shopCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          apple_receipt: this.apple_receipt
        };
      };
      Prefab_shopCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.node_btn_record, this.node_btn_record_cb, "点击前往充值记录");
        this.connect(G_UiType.button, this.ui.node_close, this.node_close_cb, "点击关闭");
        this.connect(G_UiType.button, this.ui.node_btn_bag, this.node_btn_bag_cb, "点击前往背包");
        this.connect(G_UiType.button, this.ui.node_btn_bindagent, this.btn_bindagentCb, "点击绑定代理");
      };
      Prefab_shopCtrl.prototype.start = function() {};
      Prefab_shopCtrl.prototype.btn_bindagentCb = function() {
        this.start_sub_module(G_MODULE.bindAgent);
      };
      Prefab_shopCtrl.prototype.http_reqMyInfo = function(msg) {
        this.model.updateMyInfo();
        this.view.updateMyInfo();
      };
      Prefab_shopCtrl.prototype.apple_receipt = function(msg) {
        console.log("apple_receipt");
        msg.state ? this.view.showLoading() : this.view.popLoading();
      };
      Prefab_shopCtrl.prototype.node_btn_record_cb = function(node) {
        console.log("node_btn_record_cb");
        this.start_sub_module(G_MODULE.RechargeRecord);
      };
      Prefab_shopCtrl.prototype.node_close_cb = function(node) {
        console.log("node_close_cb");
        this.finish();
      };
      Prefab_shopCtrl.prototype.node_btn_bag_cb = function() {
        this.start_sub_module(G_MODULE.Bag);
      };
      __decorate([ property(cc.Label) ], Prefab_shopCtrl.prototype, "lab_money1", void 0);
      __decorate([ property(cc.Label) ], Prefab_shopCtrl.prototype, "lab_money2", void 0);
      __decorate([ property(cc.Label) ], Prefab_shopCtrl.prototype, "lab_money3", void 0);
      __decorate([ property(cc.Node) ], Prefab_shopCtrl.prototype, "node_leftBtns", void 0);
      __decorate([ property(cc.Node) ], Prefab_shopCtrl.prototype, "node_btn_record", void 0);
      __decorate([ property(cc.Node) ], Prefab_shopCtrl.prototype, "node_goldList", void 0);
      __decorate([ property(cc.Node) ], Prefab_shopCtrl.prototype, "node_coinList", void 0);
      __decorate([ property(cc.Node) ], Prefab_shopCtrl.prototype, "node_goldContent", void 0);
      __decorate([ property(cc.Node) ], Prefab_shopCtrl.prototype, "node_coinContent", void 0);
      __decorate([ property(cc.Prefab) ], Prefab_shopCtrl.prototype, "prefab_item", void 0);
      __decorate([ property(cc.Node) ], Prefab_shopCtrl.prototype, "node_close", void 0);
      __decorate([ property(cc.Node) ], Prefab_shopCtrl.prototype, "node_btn_bag", void 0);
      __decorate([ property(cc.Node) ], Prefab_shopCtrl.prototype, "node_btn_bindagent", void 0);
      __decorate([ property(cc.Prefab) ], Prefab_shopCtrl.prototype, "prefab_itemDetail", void 0);
      __decorate([ property(cc.Prefab) ], Prefab_shopCtrl.prototype, "prefab_loading", void 0);
      Prefab_shopCtrl = __decorate([ ccclass ], Prefab_shopCtrl);
      return Prefab_shopCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_shopCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/RechargeMgr": "RechargeMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_shopDetailCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8f9b5i3Nn1LVIlIaZYjcLhm", "Prefab_shopDetailCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var GoodsCfg_1 = require("../../CfgMgrs/GoodsCfg");
    var RechargeMgr_1 = require("../../GameMgrs/RechargeMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.m_type = null;
        _this.m_goodsId = null;
        _this.m_Name = null;
        _this.m_Explain = null;
        _this.m_lastMoney = null;
        _this.m_nowMoney = null;
        _this.m_leaveNum = null;
        _this.m_price = null;
        _this.m_buyNum = null;
        var infoList = null;
        var buy_data = BehaviorMgr_1.default.getInstance().getGoodsBuyData();
        _this.m_goodsId = buy_data[0];
        _this.m_type = buy_data[1];
        "coin" == _this.m_type ? infoList = GoodsCfg_1.default.getInstance().getCoinCfg() : "gold" == _this.m_type && (infoList = GoodsCfg_1.default.getInstance().getGoldCfg());
        var infoObj = infoList[_this.m_goodsId];
        _this.m_Name = infoObj.name;
        _this.m_Explain = infoObj.explain;
        _this.m_lastMoney = infoObj.oprice;
        _this.m_nowMoney = infoObj.price;
        _this.m_leaveNum = infoObj.amount;
        _this.m_price = infoObj.price;
        _this.m_buyNum = 1;
        return _this;
      }
      Model.prototype.getTotalPrice = function() {
        if (null == this.m_nowMoney) return 0;
        return this.m_buyNum * this.m_nowMoney;
      };
      Model.prototype.addToBuyNum = function(toNum) {
        void 0 === toNum && (toNum = 1);
        this.m_buyNum += toNum;
        this.m_buyNum = Math.min(this.m_buyNum, 99);
      };
      Model.prototype.delToBuyNum = function(delNum) {
        void 0 === delNum && (delNum = 1);
        this.m_buyNum -= delNum;
        this.m_buyNum = Math.max(this.m_buyNum, 0);
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          sprite_money: null,
          lab_moneyName: null,
          lab_leaveNum: null,
          lab_lastMoney: null,
          lab_nowMoney: null,
          lab_detail: null,
          lab_buyNum: null,
          lab_totalPrice: null,
          spriteFrame_jewel: null,
          btn_buy: null,
          node_btnNum: null,
          node_btn_add: null,
          node_btn_del: null,
          node_close: null
        };
        _this.node = null;
        _this._spriteFrame_gold = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.sprite_money = ctrl.sprite_money;
        this.ui.lab_moneyName = ctrl.lab_moneyName;
        this.ui.lab_leaveNum = ctrl.lab_leaveNum;
        this.ui.lab_lastMoney = ctrl.lab_lastMoney;
        this.ui.lab_nowMoney = ctrl.lab_nowMoney;
        this.ui.lab_detail = ctrl.lab_detail;
        this.ui.lab_buyNum = ctrl.lab_buyNum;
        this.ui.lab_totalPrice = ctrl.lab_totalPrice;
        this.ui.spriteFrame_jewel = ctrl.spriteFrame_jewel;
        this.ui.btn_buy = ctrl.btn_buy;
        this.ui.node_close = ctrl.node_close;
        this.ui.node_btnNum = ctrl.node_btnNum;
        this.ui.node_btn_add = ctrl.node_btn_add;
        this.ui.node_btn_del = ctrl.node_btn_del;
        this.showJewelImg();
        this.updateMoneyName();
        this.updateLeaveNum();
        this.updateLastMoney();
        this.updateNowMoney();
        this.updateItemDetail();
        this.updateToBuyNum();
        this.updateTotalPrive();
        "coin" == this.model.m_type ? this.showGoldImg() : this.showJewelImg();
      };
      View.prototype.showGoldImg = function() {
        this._spriteFrame_gold && (this.ui.sprite_money.spriteFrame = this._spriteFrame_gold);
        this.ui.node_btnNum.active = true;
      };
      View.prototype.showJewelImg = function() {
        this._spriteFrame_gold || (this._spriteFrame_gold = this.ui.sprite_money.spriteFrame);
        this.ui.sprite_money.spriteFrame = this.ui.spriteFrame_jewel;
        this.ui.node_btnNum.active = false;
      };
      View.prototype.updateMoneyName = function() {
        this.ui.lab_moneyName.string = this.model.m_Name;
      };
      View.prototype.updateLeaveNum = function() {
        this.ui.lab_leaveNum.string = this.model.m_leaveNum;
      };
      View.prototype.updateLastMoney = function() {
        this.ui.lab_lastMoney.string = this.model.m_lastMoney;
      };
      View.prototype.updateNowMoney = function() {
        this.ui.lab_nowMoney.string = this.model.m_nowMoney;
      };
      View.prototype.updateItemDetail = function() {
        this.ui.lab_detail.string = this.model.m_Explain;
      };
      View.prototype.updateToBuyNum = function() {
        this.ui.lab_buyNum.string = this.model.m_buyNum;
        this.updateTotalPrive();
      };
      View.prototype.updateTotalPrive = function() {
        this.ui.lab_totalPrice.string = this.model.getTotalPrice();
      };
      return View;
    }(BaseView_1.default);
    var Prefab_shopDetailCtrl = function(_super) {
      __extends(Prefab_shopDetailCtrl, _super);
      function Prefab_shopDetailCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sprite_money = null;
        _this.node_btn_add = null;
        _this.node_btn_del = null;
        _this.lab_moneyName = null;
        _this.lab_leaveNum = null;
        _this.lab_lastMoney = null;
        _this.lab_nowMoney = null;
        _this.lab_detail = null;
        _this.lab_buyNum = null;
        _this.lab_totalPrice = null;
        _this.spriteFrame_jewel = null;
        _this.btn_buy = null;
        _this.node_close = null;
        _this.node_btnNum = null;
        return _this;
      }
      Prefab_shopDetailCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_shopDetailCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqGameSwitch": this.http_reqGameSwitch
        };
      };
      Prefab_shopDetailCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_shopDetailCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.node_btn_add, this.node_btn_add_cb, "点击增加");
        this.connect(G_UiType.image, this.ui.node_btn_del, this.node_btn_del_cb, "点击减少");
        this.connect(G_UiType.image, this.ui.node_close, this.node_close_cb, "点击关闭");
        this.connect(G_UiType.image, this.ui.btn_buy, this.btn_buy_cb, "点击购买");
      };
      Prefab_shopDetailCtrl.prototype.start = function() {};
      Prefab_shopDetailCtrl.prototype.http_reqGameSwitch = function(msg) {
        this.model.updateSwtich(msg);
      };
      Prefab_shopDetailCtrl.prototype.setInfo = function(infoObj) {};
      Prefab_shopDetailCtrl.prototype.node_btn_add_cb = function() {
        console.log("node_btn_add_cb");
        this.model.addToBuyNum();
        this.view.updateToBuyNum();
      };
      Prefab_shopDetailCtrl.prototype.node_btn_del_cb = function() {
        console.log("node_btn_del_cb");
        this.model.delToBuyNum();
        this.view.updateToBuyNum();
      };
      Prefab_shopDetailCtrl.prototype.node_close_cb = function() {
        console.log("node_btn_del_cb");
        this.finish();
      };
      Prefab_shopDetailCtrl.prototype.BuyItem = function() {
        if ("coin" == this.model.m_type) RechargeMgr_1.default.getInstance().reqBuyGoods(3, this.model.m_goodsId, this.model.m_buyNum); else if ("gold" == this.model.m_type) {
          var uid = UserMgr_1.default.getInstance().getUid();
          RechargeMgr_1.default.getInstance().reqRechargeApi(uid, this.model.m_goodsId, 1);
        }
      };
      Prefab_shopDetailCtrl.prototype.btn_buy_cb = function() {
        console.log("btn_buy_cb");
        console.log("m_goodsId:" + this.model.m_goodsId + "+_type:" + this.model.m_type);
        if ("coin" == this.model.m_type) if (UserMgr_1.default.getInstance().getMyInfo().gold >= this.model.m_price) this.BuyItem(); else {
          this.node_close_cb();
          FrameMgr_1.default.getInstance().showMsgBox("钻石不足");
        } else this.BuyItem();
      };
      __decorate([ property(cc.Sprite) ], Prefab_shopDetailCtrl.prototype, "sprite_money", void 0);
      __decorate([ property(cc.Node) ], Prefab_shopDetailCtrl.prototype, "node_btn_add", void 0);
      __decorate([ property(cc.Node) ], Prefab_shopDetailCtrl.prototype, "node_btn_del", void 0);
      __decorate([ property(cc.Label) ], Prefab_shopDetailCtrl.prototype, "lab_moneyName", void 0);
      __decorate([ property(cc.Label) ], Prefab_shopDetailCtrl.prototype, "lab_leaveNum", void 0);
      __decorate([ property(cc.Label) ], Prefab_shopDetailCtrl.prototype, "lab_lastMoney", void 0);
      __decorate([ property(cc.Label) ], Prefab_shopDetailCtrl.prototype, "lab_nowMoney", void 0);
      __decorate([ property(cc.Label) ], Prefab_shopDetailCtrl.prototype, "lab_detail", void 0);
      __decorate([ property(cc.Label) ], Prefab_shopDetailCtrl.prototype, "lab_buyNum", void 0);
      __decorate([ property(cc.Label) ], Prefab_shopDetailCtrl.prototype, "lab_totalPrice", void 0);
      __decorate([ property(cc.SpriteFrame) ], Prefab_shopDetailCtrl.prototype, "spriteFrame_jewel", void 0);
      __decorate([ property(cc.Node) ], Prefab_shopDetailCtrl.prototype, "btn_buy", void 0);
      __decorate([ property(cc.Node) ], Prefab_shopDetailCtrl.prototype, "node_close", void 0);
      __decorate([ property(cc.Node) ], Prefab_shopDetailCtrl.prototype, "node_btnNum", void 0);
      Prefab_shopDetailCtrl = __decorate([ ccclass ], Prefab_shopDetailCtrl);
      return Prefab_shopDetailCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_shopDetailCtrl;
    cc._RF.pop();
  }, {
    "../../CfgMgrs/GoodsCfg": "GoodsCfg",
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/RechargeMgr": "RechargeMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  Prefab_shopItemCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a01aatU5cREspkdazyDnq7+", "Prefab_shopItemCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BehaviorMgr_1 = require("../../GameMgrs/BehaviorMgr");
    var GoodsCfg_1 = require("../../CfgMgrs/GoodsCfg");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var RechargeMgr_1 = require("../../GameMgrs/RechargeMgr");
    var SwitchMgr_1 = require("../../GameMgrs/SwitchMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.m_goodsType = null;
        _this.goodsId = null;
        _this.m_moneyName = null;
        _this.m_lastMoney = null;
        _this.m_nowMoney = null;
        _this.m_leaveNum = null;
        _this.m_goodsId = null;
        var infoList = null;
        var item_data = BehaviorMgr_1.default.getInstance().getGoodsItemData();
        var buy_data = BehaviorMgr_1.default.getInstance().getGoodsBuyData();
        _this.m_goodsId = buy_data[0];
        _this.goodsId = item_data[0];
        _this.m_goodsType = item_data[1];
        "coin" == _this.m_goodsType ? infoList = GoodsCfg_1.default.getInstance().getCoinCfg() : "gold" == _this.m_goodsType && (infoList = GoodsCfg_1.default.getInstance().getGoldCfg());
        var infoObj = infoList[_this.goodsId];
        _this.m_moneyName = infoObj.name + ":" + infoObj.amount;
        _this.m_lastMoney = infoObj.oprice;
        _this.m_nowMoney = infoObj.price;
        _this.m_leaveNum = infoObj.amount;
        return _this;
      }
      Model.prototype.getIsActivity = function() {
        var bool = this.m_lastMoney != this.m_nowMoney;
        return bool;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          lab_name: null,
          lab_last: null,
          lab_now: null,
          node_lab_now: null,
          node_lab_last: null,
          node_img_activity: null,
          spriteFrame_moneyType2: null,
          sprite_buy: null,
          btn_buy: null,
          spriteFrame_buyType2: null,
          itemSprite: null,
          label_goodNum: null,
          node_spark: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.lab_name = ctrl.lab_name;
        this.ui.lab_last = ctrl.lab_last;
        this.ui.lab_now = ctrl.lab_now;
        this.ui.node_lab_now = ctrl.node_lab_now;
        this.ui.node_lab_last = ctrl.node_lab_last;
        this.ui.node_img_activity = ctrl.node_img_activity;
        this.ui.sprite_buy = ctrl.sprite_buy;
        this.ui.btn_buy = ctrl.btn_buy;
        this.ui.itemSprite = ctrl.itemSprite;
        this.ui.label_goodNum = ctrl.label_goodNum;
        this.ui.node_spark = ctrl.node_spark;
        this.updateName();
        this.updateLastMoney();
        this.updateNowMoney();
        this.updateActivity();
        this.updategoodNum();
        this.updatediscountInfo();
        "coin" == this.model.m_goodsType ? this.showGoldImg() : this.showJewelImg();
      };
      View.prototype.updatediscountInfo = function() {
        var childrenList = this.ui.node_spark.children;
        if (parseInt(this.model.goodsId) >= 3) return;
        childrenList[parseInt(this.model.goodsId)].active = true;
      };
      View.prototype.updateName = function() {
        this.ui.lab_name.string = this.model.m_moneyName;
      };
      View.prototype.updateLastMoney = function() {
        this.ui.lab_last.string = "原价  " + this.model.m_lastMoney + "元";
      };
      View.prototype.updateNowMoney = function() {
        this.ui.lab_now.string = this.model.m_nowMoney + "元";
      };
      View.prototype.updateActivity = function() {
        this.ui.node_img_activity.active = false;
        this.ui.node_lab_last.active = false;
      };
      View.prototype.showJewelImg = function() {
        var _this = this;
        var path = "Plat/shop/gold_" + this.model.goodsId;
        cc.loader.loadRes(path, cc.SpriteFrame, function(err, assets) {
          err ? cc.error(err) : _this.ui.itemSprite.getComponent(cc.Sprite).spriteFrame = assets;
        });
      };
      View.prototype.updategoodNum = function() {
        this.ui.label_goodNum.string = this.model.m_leaveNum + "个";
      };
      View.prototype.showGoldImg = function() {};
      return View;
    }(BaseView_1.default);
    var Prefab_shopItemCtrl = function(_super) {
      __extends(Prefab_shopItemCtrl, _super);
      function Prefab_shopItemCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.lab_name = null;
        _this.lab_last = null;
        _this.lab_now = null;
        _this.node_lab_now = null;
        _this.node_lab_last = null;
        _this.node_img_activity = null;
        _this.node_spark = null;
        _this.sprite_buy = null;
        _this.label_goodNum = null;
        _this.btn_buy = null;
        _this.itemSprite = null;
        return _this;
      }
      Prefab_shopItemCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_shopItemCtrl.prototype.defineNetEvents = function() {};
      Prefab_shopItemCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_shopItemCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.btn_buy, this.btn_buyCB, "购买");
      };
      Prefab_shopItemCtrl.prototype.start = function() {};
      Prefab_shopItemCtrl.prototype.btn_buyCB = function() {
        var uid = UserMgr_1.default.getInstance().getUid();
        var apple = SwitchMgr_1.default.getInstance().get_switch_apple_pay_outside();
        console.log("reqRechargeApi:apple:", apple);
        if (cc.sys.OS_IOS == cc.sys.os && 2 == apple) {
          var goodsList = GoodsCfg_1.default.getInstance().getGoldCfg(), payid = "";
          for (var i = 0; i < goodsList.length; i++) if (this.model.m_goodsId == goodsList[i].id) {
            payid = goodsList[i].payid;
            break;
          }
          if ("" != payid) {
            RechargeMgr_1.default.getInstance().Ios_Recharge(payid);
            this.gemit("apple_receipt", {
              state: true
            });
          } else console.log("rechargeapi ios id null", payid);
        } else {
          if (0 == this.model.goodsId) {
            cc.sys.openURL("" + RechargeMgr_1.default.getInstance().getGoodsList()[0].href);
            console.log("href0", RechargeMgr_1.default.getInstance().getGoodsList()[0].href);
          } else if (1 == this.model.goodsId) {
            cc.sys.openURL("" + RechargeMgr_1.default.getInstance().getGoodsList()[1].href);
            console.log("href1", RechargeMgr_1.default.getInstance().getGoodsList()[1].href);
          } else if (2 == this.model.goodsId) {
            cc.sys.openURL("" + RechargeMgr_1.default.getInstance().getGoodsList()[2].href);
            console.log("href2", RechargeMgr_1.default.getInstance().getGoodsList()[2].href);
          }
          RechargeMgr_1.default.getInstance().reqReqGoodsList();
          console.log("goodsId", this.model.goodsId);
        }
      };
      __decorate([ property(cc.Label) ], Prefab_shopItemCtrl.prototype, "lab_name", void 0);
      __decorate([ property(cc.Label) ], Prefab_shopItemCtrl.prototype, "lab_last", void 0);
      __decorate([ property(cc.Label) ], Prefab_shopItemCtrl.prototype, "lab_now", void 0);
      __decorate([ property(cc.Node) ], Prefab_shopItemCtrl.prototype, "node_lab_now", void 0);
      __decorate([ property(cc.Node) ], Prefab_shopItemCtrl.prototype, "node_lab_last", void 0);
      __decorate([ property(cc.Node) ], Prefab_shopItemCtrl.prototype, "node_img_activity", void 0);
      __decorate([ property(cc.Node) ], Prefab_shopItemCtrl.prototype, "node_spark", void 0);
      __decorate([ property(cc.Sprite) ], Prefab_shopItemCtrl.prototype, "sprite_buy", void 0);
      __decorate([ property(cc.Label) ], Prefab_shopItemCtrl.prototype, "label_goodNum", void 0);
      __decorate([ property({
        tooltip: "购买按钮",
        type: cc.Node
      }) ], Prefab_shopItemCtrl.prototype, "btn_buy", void 0);
      __decorate([ property({
        tooltip: "商品图标",
        type: cc.Node
      }) ], Prefab_shopItemCtrl.prototype, "itemSprite", void 0);
      Prefab_shopItemCtrl = __decorate([ ccclass ], Prefab_shopItemCtrl);
      return Prefab_shopItemCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_shopItemCtrl;
    cc._RF.pop();
  }, {
    "../../CfgMgrs/GoodsCfg": "GoodsCfg",
    "../../GameMgrs/BehaviorMgr": "BehaviorMgr",
    "../../GameMgrs/RechargeMgr": "RechargeMgr",
    "../../GameMgrs/SwitchMgr": "SwitchMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  ProductSettingCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a7d03BGDcNPYKFiXL015kW3", "ProductSettingCfg");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCfg_1 = require("../Libs/BaseCfg");
    var ServerMgr_1 = require("../../AppStart/AppMgrs/ServerMgr");
    var ProductSettingCfg = function(_super) {
      __extends(ProductSettingCfg, _super);
      function ProductSettingCfg() {
        var _this = _super.call(this) || this;
        _this.productsettingPath = null;
        _this.productSettings = null;
        _this.productsettingPath = _this.getFullPath("productsetting");
        return _this;
      }
      ProductSettingCfg.getInstance = function() {
        this._instance || (this._instance = new ProductSettingCfg());
        return this._instance;
      };
      ProductSettingCfg.prototype.loadCb = function(name, data) {
        this.loaded = true;
        this.productSettings = data[ServerMgr_1.default.getInstance().getProductTag()];
      };
      ProductSettingCfg.prototype.isContainGame = function(game) {
        if (null == this.productSettings) return true;
        var games = this.productSettings.games;
        for (var i = 0; i < games.length; ++i) if (games[i] == game) return true;
        return false;
      };
      ProductSettingCfg.prototype.load = function() {
        this.loadRes(this.productsettingPath, this.loadCb);
      };
      return ProductSettingCfg;
    }(BaseCfg_1.default);
    exports.default = ProductSettingCfg;
    cc._RF.pop();
  }, {
    "../../AppStart/AppMgrs/ServerMgr": "ServerMgr",
    "../Libs/BaseCfg": "BaseCfg"
  } ],
  QgmjCards: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c6947HA721PYY4351JQxs+e", "QgmjCards");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MahjongCards_1 = require("../../../GameCommon/Mahjong/MahjongCards");
    var QgmjCards = function(_super) {
      __extends(QgmjCards, _super);
      function QgmjCards(cardcount) {
        return _super.call(this, cardcount) || this;
      }
      return QgmjCards;
    }(MahjongCards_1.default);
    exports.default = QgmjCards;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Mahjong/MahjongCards": "MahjongCards"
  } ],
  QgmjEntry: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2fa5c8nhU5PVaG6NIEGs9U/", "QgmjEntry");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ModuleMgr_1 = require("../../Plat/GameMgrs/ModuleMgr");
    var modules = {
      Settle: "SubLayer/Games/Qgmj/QgmjSettle",
      GambleRecord: "SubLayer/Games/Qgmj/QgmjGambleRecord"
    };
    var QgmjEntry = function() {
      function QgmjEntry() {}
      QgmjEntry.getInstance = function() {
        this._instance || (this._instance = new QgmjEntry());
        return this._instance;
      };
      QgmjEntry.prototype.registerModules = function() {
        ModuleMgr_1.default.getInstance().registerGame(modules);
      };
      return QgmjEntry;
    }();
    exports.default = QgmjEntry;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/ModuleMgr": "ModuleMgr"
  } ],
  QgmjGambleRecordCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ef525EUG31DtLMRhRsWrIgM", "QgmjGambleRecordCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var UserMgr_1 = require("../../../Plat/GameMgrs/UserMgr");
    var Green = new cc.Color(24, 221, 40), Red = new cc.Color(255, 78, 0), Yellow = new cc.Color(255, 222, 0);
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.leap = 68;
        _this.gameResultData = RoomMgr_1.default.getInstance().getBunchInfo();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_content: null,
          node_yellowBattleResult: null,
          node_yellowLightBattleResult: null,
          btn_close: null,
          node_panel: null,
          lbl_score0s: [],
          lbl_score1s: [],
          lbl_score2s: [],
          lbl_score3s: [],
          lbl_roundindexes: [],
          lbl_times: [],
          lbl_names: {},
          lbl_nameSigns: {}
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        console.log("winlog");
        this.ui.btn_close = ctrl.btn_close;
        this.ui.node_content = ctrl.node_content;
        this.ui.node_yellowBattleResult = ctrl.node_yellowBattleResult;
        this.ui.node_yellowLightBattleResult = ctrl.node_yellowLightBattleResult;
        this.ui.node_panel = ctrl.node_panel;
        if (null == this.model.gameResultData || void 0 == this.model.gameResultData) return;
        var meiju = this.model.gameResultData.meiju;
        if (null == meiju || void 0 == meiju) return;
        var prefabBarArr = [ this.ui.node_yellowBattleResult, this.ui.node_yellowLightBattleResult ];
        meiju.length > 7 && this.ui.node_content.setContentSize(this.ui.node_content.getContentSize().width, this.model.leap * meiju.length);
        for (var i = 0; i < meiju.length; i++) {
          var colorindex = i % 2;
          var prefabBar = prefabBarArr[colorindex];
          var barItem = cc.instantiate(prefabBar);
          barItem.active = true;
          barItem.setPosition(cc.v2(0, (i + 1) * -this.model.leap));
          this.ui.node_content.addChild(barItem);
          this.ui.lbl_roundindexes[i] = barItem.getChildByName("lbl_roundindex").getComponent(cc.Label);
          this.ui.lbl_times[i] = barItem.getChildByName("lbl_time").getComponent(cc.Label);
          this.ui.lbl_score0s[i] = barItem.getChildByName("lbl_score0").getComponent(cc.Label);
          this.ui.lbl_score1s[i] = barItem.getChildByName("lbl_score1").getComponent(cc.Label);
          this.ui.lbl_score2s[i] = barItem.getChildByName("lbl_score2").getComponent(cc.Label);
          this.ui.lbl_score3s[i] = barItem.getChildByName("lbl_score3").getComponent(cc.Label);
        }
        for (var logicseatid = 0; logicseatid < RoomMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
          this.ui.lbl_names[logicseatid] = this.ui.node_panel.getChildByName("lbl_name" + logicseatid).getComponent(cc.Label);
          this.ui.lbl_nameSigns[logicseatid] = this.ui.node_panel.getChildByName("lbl_nameSign" + logicseatid).getComponent(cc.Label);
        }
      };
      View.prototype.showData = function() {
        var meijuData = this.model.gameResultData.meiju;
        if (null != meijuData && void 0 != meijuData) {
          this.showDetailData(meijuData);
          this.showPlayerInfo();
        }
      };
      View.prototype.showDetailData = function(meijuData) {
        for (var i = 0; i < meijuData.length; ++i) {
          var itemData = meijuData[i];
          var myDate = new Date(itemData[0]);
          var curtime = myDate.getHours().toString() + ":" + myDate.getMinutes();
          this.ui.lbl_times[i].string = "(" + curtime + ")";
          this.ui.lbl_roundindexes[i].string = "第" + (i + 1) + "局";
          var lbl_scores = [ this.ui.lbl_score0s[i], this.ui.lbl_score1s[i], this.ui.lbl_score2s[i], this.ui.lbl_score3s[i] ];
          for (var logicseatid = 0; logicseatid < RoomMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
            var dataItem = itemData[1][logicseatid.toString()];
            var hutime = dataItem[0];
            var score = dataItem[1];
            var yikescore = dataItem[2];
            var yikescorestr = "";
            var hutimestr = "";
            var scorestr = "";
            var lbl_score = lbl_scores[logicseatid];
            lbl_score.node.active = true;
            var prefix = "";
            score > 0 && (prefix = "+");
            if (1 == this.model.gameResultData.scoretype) {
              yikescorestr = "" + yikescore;
              scorestr = "(" + prefix + score + ")";
            } else scorestr = "" + prefix + score;
            null != hutime && (hutimestr = "(" + hutime + ")");
            var wholescore = "" + yikescorestr + scorestr + hutimestr;
            lbl_score.string = wholescore;
            lbl_score.node.color = score >= 0 ? Red : Green;
          }
        }
      };
      View.prototype.showPlayerInfo = function() {
        var viewCalled = [ "(我)", "(下家)", "(对家)", "(上家)" ];
        for (var logicseatid = 0; logicseatid < RoomMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
          var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(logicseatid);
          this.ui.lbl_nameSigns[logicseatid].string = viewCalled[viewSeatId];
          this.ui.lbl_nameSigns[logicseatid].node.active = true;
          var uid = RoomMgr_1.default.getInstance().users[logicseatid];
          if (null == uid || void 0 == uid) continue;
          var user = UserMgr_1.default.getInstance().getUserById(uid);
          this.ui.lbl_names[logicseatid].string = user.nickname;
          this.ui.lbl_names[logicseatid].node.active = true;
        }
      };
      return View;
    }(BaseView_1.default);
    var QgmjGambleRecordCtrl = function(_super) {
      __extends(QgmjGambleRecordCtrl, _super);
      function QgmjGambleRecordCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_content = null;
        _this.node_yellowBattleResult = null;
        _this.node_yellowLightBattleResult = null;
        _this.btn_close = null;
        _this.node_panel = null;
        return _this;
      }
      QgmjGambleRecordCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        null != this.model.gameResultData && void 0 != this.model.gameResultData && this.view.showData();
      };
      QgmjGambleRecordCtrl.prototype.defineNetEvents = function() {};
      QgmjGambleRecordCtrl.prototype.defineGlobalEvents = function() {};
      QgmjGambleRecordCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.btn_close, this.btn_closecb, "点击关闭");
      };
      QgmjGambleRecordCtrl.prototype.start = function() {};
      QgmjGambleRecordCtrl.prototype.btn_closecb = function() {
        this.finish();
      };
      __decorate([ property({
        tooltip: "滚动视图",
        type: cc.Node
      }) ], QgmjGambleRecordCtrl.prototype, "node_content", void 0);
      __decorate([ property({
        tooltip: "深色战绩记录",
        type: cc.Node
      }) ], QgmjGambleRecordCtrl.prototype, "node_yellowBattleResult", void 0);
      __decorate([ property({
        tooltip: "浅色战绩记录",
        type: cc.Node
      }) ], QgmjGambleRecordCtrl.prototype, "node_yellowLightBattleResult", void 0);
      __decorate([ property({
        tooltip: "关闭按钮",
        type: cc.Node
      }) ], QgmjGambleRecordCtrl.prototype, "btn_close", void 0);
      __decorate([ property({
        tooltip: "panel",
        type: cc.Node
      }) ], QgmjGambleRecordCtrl.prototype, "node_panel", void 0);
      QgmjGambleRecordCtrl = __decorate([ ccclass ], QgmjGambleRecordCtrl);
      return QgmjGambleRecordCtrl;
    }(BaseCtrl_1.default);
    exports.default = QgmjGambleRecordCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/GameMgrs/UserMgr": "UserMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView"
  } ],
  QgmjLogic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7ca9f/Wy3VCYIetmhWD5cxK", "QgmjLogic");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var QgmjPlayer_1 = require("./QgmjPlayer");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var QgmjProp_1 = require("./QgmjProp");
    var MahjongLogic_1 = require("../../../GameCommon/Mahjong/MahjongLogic");
    var QgmjCards_1 = require("./QgmjCards");
    var QgmjLogic = function(_super) {
      __extends(QgmjLogic, _super);
      function QgmjLogic() {
        return _super.call(this) || this;
      }
      QgmjLogic.getInstance = function() {
        this._instance || (this._instance = new QgmjLogic());
        return this._instance;
      };
      QgmjLogic.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        delete QgmjLogic._instance;
        QgmjLogic._instance = null;
      };
      QgmjLogic.prototype.initMahjong = function() {
        this.mahjongcards = new QgmjCards_1.default(13);
        for (var i = 0; i < this.seatcount; i++) {
          this.players[i] = new QgmjPlayer_1.default();
          this.players[i].init(i, this);
        }
        var cfg = RoomMgr_1.default.getInstance().getFangKaCfg();
        this.prop = new QgmjProp_1.default(cfg);
        this.isMingYou = 1 == this.prop.get_v_youjintype();
      };
      return QgmjLogic;
    }(MahjongLogic_1.default);
    exports.default = QgmjLogic;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Mahjong/MahjongLogic": "MahjongLogic",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "./QgmjCards": "QgmjCards",
    "./QgmjPlayer": "QgmjPlayer",
    "./QgmjProp": "QgmjProp"
  } ],
  QgmjPlayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6a3b1mwmCZPjIp5lBhfdWhM", "QgmjPlayer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MahjongPlayer_1 = require("../../../GameCommon/Mahjong/MahjongPlayer");
    var QgmjPlayer = function(_super) {
      __extends(QgmjPlayer, _super);
      function QgmjPlayer() {
        return _super.call(this) || this;
      }
      return QgmjPlayer;
    }(MahjongPlayer_1.default);
    exports.default = QgmjPlayer;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Mahjong/MahjongPlayer": "MahjongPlayer"
  } ],
  QgmjProp: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cc8b03W5KZJzYSMaZdg9i1v", "QgmjProp");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var QgmjProp = function() {
      function QgmjProp(customcfg) {
        this.customcfg = null;
        this.defaultcfg = {
          v_difen: 5,
          v_huapai: 1,
          v_jinpai: 1,
          v_ziangang: 4,
          v_ptangang: 3,
          v_ziminggang: 3,
          v_ptminggang: 2,
          v_zianke: 2,
          v_ptanke: 1,
          v_zimingke: 1,
          v_ptmingke: 0,
          v_zhuangdifen: 2,
          t_chihu: 1,
          t_zimo: 2,
          t_qiangganghu: 2,
          t_sanjindao: 3,
          t_bazhanghua: 3,
          t_youjin: 3,
          t_shuangyou: 6,
          t_sanyou: 9,
          v_roundcount: 8,
          v_seatcount: 4,
          v_paytype: 1,
          v_youjintype: 0,
          b_hupai: 0,
          v_youjinjiangli: 25,
          v_shasanjiangli: 50,
          b_jinxianzhi: 1,
          b_yike: 0,
          v_fangfei: 99,
          v_genzhuang: 1
        };
        this.customcfg = customcfg;
      }
      QgmjProp.prototype.get_v_difen = function() {
        if (null != this.customcfg["v_difen"]) return this.customcfg["v_difen"];
        return this.defaultcfg["v_difen"];
      };
      QgmjProp.prototype.get_v_huapai = function() {
        if (null != this.customcfg["v_huapai"]) return this.customcfg["v_huapai"];
        return this.defaultcfg["v_huapai"];
      };
      QgmjProp.prototype.get_v_jinpai = function() {
        if (null != this.customcfg["v_jinpai"]) return this.customcfg["v_jinpai"];
        return this.defaultcfg["v_jinpai"];
      };
      QgmjProp.prototype.get_v_ziangang = function() {
        if (null != this.customcfg["v_ziangang"]) return this.customcfg["v_ziangang"];
        return this.defaultcfg["v_ziangang"];
      };
      QgmjProp.prototype.get_v_ptangang = function() {
        if (null != this.customcfg["v_ptangang"]) return this.customcfg["v_ptangang"];
        return this.defaultcfg["v_ptangang"];
      };
      QgmjProp.prototype.get_v_ziminggang = function() {
        if (null != this.customcfg["v_ziminggang"]) return this.customcfg["v_ziminggang"];
        return this.defaultcfg["v_ziminggang"];
      };
      QgmjProp.prototype.get_v_ptminggang = function() {
        if (null != this.customcfg["v_ptminggang"]) return this.customcfg["v_ptminggang"];
        return this.defaultcfg["v_ptminggang"];
      };
      QgmjProp.prototype.get_v_zianke = function() {
        if (null != this.customcfg["v_zianke"]) return this.customcfg["v_zianke"];
        return this.defaultcfg["v_zianke"];
      };
      QgmjProp.prototype.get_v_ptanke = function() {
        if (null != this.customcfg["v_ptanke"]) return this.customcfg["v_ptanke"];
        return this.defaultcfg["v_ptanke"];
      };
      QgmjProp.prototype.get_v_zimingke = function() {
        if (null != this.customcfg["v_zimingke"]) return this.customcfg["v_zimingke"];
        return this.defaultcfg["v_zimingke"];
      };
      QgmjProp.prototype.get_v_ptmingke = function() {
        if (null != this.customcfg["v_ptmingke"]) return this.customcfg["v_ptmingke"];
        return this.defaultcfg["v_ptmingke"];
      };
      QgmjProp.prototype.get_v_zhuangdifen = function() {
        if (null != this.customcfg["v_zhuangdifen"]) return this.customcfg["v_zhuangdifen"];
        return this.defaultcfg["v_zhuangdifen"];
      };
      QgmjProp.prototype.get_t_chihu = function() {
        if (null != this.customcfg["t_chihu"]) return this.customcfg["t_chihu"];
        return this.defaultcfg["t_chihu"];
      };
      QgmjProp.prototype.get_t_zimo = function() {
        if (null != this.customcfg["t_zimo"]) return this.customcfg["t_zimo"];
        return this.defaultcfg["t_zimo"];
      };
      QgmjProp.prototype.get_t_qiangganghu = function() {
        if (null != this.customcfg["t_qiangganghu"]) return this.customcfg["t_qiangganghu"];
        return this.defaultcfg["t_qiangganghu"];
      };
      QgmjProp.prototype.get_t_sanjindao = function() {
        if (null != this.customcfg["t_sanjindao"]) return this.customcfg["t_sanjindao"];
        return this.defaultcfg["t_sanjindao"];
      };
      QgmjProp.prototype.get_t_bazhanghua = function() {
        if (null != this.customcfg["t_bazhanghua"]) return this.customcfg["t_bazhanghua"];
        return this.defaultcfg["t_bazhanghua"];
      };
      QgmjProp.prototype.get_t_youjin = function() {
        if (null != this.customcfg["t_youjin"]) return this.customcfg["t_youjin"];
        return this.defaultcfg["t_youjin"];
      };
      QgmjProp.prototype.get_t_shuangyou = function() {
        if (null != this.customcfg["t_shuangyou"]) return this.customcfg["t_shuangyou"];
        return this.defaultcfg["t_shuangyou"];
      };
      QgmjProp.prototype.get_t_sanyou = function() {
        if (null != this.customcfg["t_sanyou"]) return this.customcfg["t_sanyou"];
        return this.defaultcfg["t_sanyou"];
      };
      QgmjProp.prototype.get_v_roundcount = function() {
        if (null != this.customcfg["v_roundcount"]) return this.customcfg["v_roundcount"];
        return this.defaultcfg["v_roundcount"];
      };
      QgmjProp.prototype.get_v_seatcount = function() {
        if (null != this.customcfg["v_seatcount"]) return this.customcfg["v_seatcount"];
        return this.defaultcfg["v_seatcount"];
      };
      QgmjProp.prototype.get_v_paytype = function() {
        if (null != this.customcfg["v_paytype"]) return this.customcfg["v_paytype"];
        return this.defaultcfg["v_paytype"];
      };
      QgmjProp.prototype.get_v_youjintype = function() {
        if (null != this.customcfg["v_youjintype"]) return this.customcfg["v_youjintype"];
        return this.defaultcfg["v_youjintype"];
      };
      QgmjProp.prototype.get_b_hupai = function() {
        if (null != this.customcfg["b_hupai"]) return this.customcfg["b_hupai"];
        return this.defaultcfg["b_hupai"];
      };
      QgmjProp.prototype.get_v_youjinjiangli = function() {
        if (null != this.customcfg["v_youjinjiangli"]) return this.customcfg["v_youjinjiangli"];
        return this.defaultcfg["v_youjinjiangli"];
      };
      QgmjProp.prototype.get_v_shasanjiangli = function() {
        if (null != this.customcfg["v_shasanjiangli"]) return this.customcfg["v_shasanjiangli"];
        return this.defaultcfg["v_shasanjiangli"];
      };
      QgmjProp.prototype.get_b_jinxianzhi = function() {
        if (null != this.customcfg["b_jinxianzhi"]) return this.customcfg["b_jinxianzhi"];
        return this.defaultcfg["b_jinxianzhi"];
      };
      QgmjProp.prototype.get_b_yike = function() {
        if (null != this.customcfg["b_yike"]) return this.customcfg["b_yike"];
        return this.defaultcfg["b_yike"];
      };
      QgmjProp.prototype.get_v_fangfei = function() {
        if (null != this.customcfg["v_fangfei"]) return this.customcfg["v_fangfei"];
        return this.defaultcfg["v_fangfei"];
      };
      QgmjProp.prototype.get_v_genzhuang = function() {
        if (null != this.customcfg["v_genzhuang"]) return this.customcfg["v_genzhuang"];
        return this.defaultcfg["v_genzhuang"];
      };
      return QgmjProp;
    }();
    exports.default = QgmjProp;
    cc._RF.pop();
  }, {} ],
  QgmjRoomCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9e5c9CydMJDTa3AZeHSx5Hv", "QgmjRoomCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var QgmjLogic_1 = require("../QgmjMgr/QgmjLogic");
    var MahjongResMgr_1 = require("../../../GameCommon/Mahjong/MahjongResMgr");
    var MahjongDef_1 = require("../../../GameCommon/Mahjong/MahjongDef");
    var MahjongAudio_1 = require("../../../GameCommon/Mahjong/MahjongAudio");
    var QgmjCards_1 = require("../QgmjMgr/QgmjCards");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          mahjongRoom: null
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.showComponents = function() {
        this.ui.mahjongRoom = cc.instantiate(ctrl.MahjongRoom);
        this.node.addChild(this.ui.mahjongRoom);
      };
      View.prototype.initUi = function() {};
      return View;
    }(BaseView_1.default);
    var QgmjRoomCtrl = function(_super) {
      __extends(QgmjRoomCtrl, _super);
      function QgmjRoomCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.MahjongRoom = null;
        return _this;
      }
      QgmjRoomCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        RoomMgr_1.default.getInstance().setGameLibs(MahjongDef_1.MahjongDef, MahjongResMgr_1.default, QgmjLogic_1.default, MahjongAudio_1.default, QgmjCards_1.default);
        this.view.showComponents();
      };
      QgmjRoomCtrl.prototype.defineNetEvents = function() {};
      QgmjRoomCtrl.prototype.defineGlobalEvents = function() {};
      QgmjRoomCtrl.prototype.connectUi = function() {};
      QgmjRoomCtrl.prototype.start = function() {
        this.isIPhoneX() && this.resetDesignResolution(this.node.getComponent(cc.Canvas));
      };
      __decorate([ property(cc.Prefab) ], QgmjRoomCtrl.prototype, "MahjongRoom", void 0);
      QgmjRoomCtrl = __decorate([ ccclass ], QgmjRoomCtrl);
      return QgmjRoomCtrl;
    }(BaseCtrl_1.default);
    exports.default = QgmjRoomCtrl;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Mahjong/MahjongAudio": "MahjongAudio",
    "../../../GameCommon/Mahjong/MahjongDef": "MahjongDef",
    "../../../GameCommon/Mahjong/MahjongResMgr": "MahjongResMgr",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../QgmjMgr/QgmjCards": "QgmjCards",
    "../QgmjMgr/QgmjLogic": "QgmjLogic"
  } ],
  QgmjSettleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c95a8O9+05I34sbuLG4lLGc", "QgmjSettleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var QgmjLogic_1 = require("../QgmjMgr/QgmjLogic");
    var SwitchMgr_1 = require("../../../Plat/GameMgrs/SwitchMgr");
    var MahjongDef_1 = require("../../../GameCommon/Mahjong/MahjongDef");
    var Green = new cc.Color(24, 221, 40), Red = new cc.Color(255, 78, 0), Yellow = new cc.Color(255, 222, 0);
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.playerSettleInfos = null;
        _this.win_seatid = 0;
        _this.seatcount = 0;
        _this.b_drawGame = false;
        _this.sharingSwitch = null;
        _this.bViewAgain = false;
        _this.mahjongDef = RoomMgr_1.default.getInstance().getDef();
        _this.initData();
        _this.sharingSwitch = SwitchMgr_1.default.getInstance().get_switch_settlement_sharing();
        return _this;
      }
      Model.prototype.initData = function() {
        var qzmjLogicInstance = QgmjLogic_1.default.getInstance();
        if (null != qzmjLogicInstance) {
          this.win_seatid = qzmjLogicInstance.win_seatid;
          null == this.win_seatid && (this.b_drawGame = true);
          this.playerSettleInfos = qzmjLogicInstance.roundSettle.wanjiashuis;
          console.log("玩家信息：", this.playerSettleInfos);
          this.seatcount = qzmjLogicInstance.seatcount;
        }
      };
      Model.prototype.setAsViewAgain = function() {
        this.bViewAgain = true;
      };
      Model.prototype.updateSwitch = function(msg) {
        this.sharingSwitch = msg.cfg.switch_settlement_sharing;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_drawgame: ctrl.node_drawgame,
          img_liuju: null,
          btn_gameInfo: null,
          btn_share: null,
          btn_again: null,
          node_score: null,
          btn_close: null,
          btn_exit: null,
          node_userList: null,
          winNodes: [],
          win_bg: null,
          win_totalInfo: [],
          win_totalShui: [],
          win_detailShui: [],
          win_genzhuang: [],
          win_hutime: [],
          loseNodes: [],
          lose_bg: null,
          lose_totalInfo: [],
          lose_forEachOtherShui: [],
          lose_detailShui: [],
          lose_totalShui: [],
          lose_genzhuang: [],
          node_CheatPrevetion: null,
          sprite_zjs: null,
          clippingNode: null,
          lbl_js: null,
          lbl_zjs: null,
          lbl_hide: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.lbl_hide = ctrl.lbl_hide;
        this.ui.lbl_hide.node.active = false;
        this.ui.clippingNode = this.node.getChildByName("backgroudClickNode");
        this.ui.node_drawgame.active = this.model.b_drawGame;
        this.ui.img_liuju = this.ui.node_drawgame.getChildByName("img_liuju").getComponent(cc.Animation);
        this.model.b_drawGame && this.ui.img_liuju.play();
        this.ui.btn_gameInfo = ctrl.btn_gameInfo;
        this.ui.btn_share = ctrl.btn_share;
        this.ui.btn_again = ctrl.btn_again;
        this.ui.node_score = ctrl.node_score;
        this.ui.btn_close = ctrl.btn_close;
        this.ui.btn_exit = ctrl.btn_exit;
        this.ui.sprite_zjs = ctrl.sprite_zjs;
        this.ui.sprite_zjs.node.active = false;
        this.ui.lbl_zjs = ctrl.lbl_zjs;
        this.ui.lbl_js = ctrl.lbl_js;
        this.ui.lbl_zjs.node.active = false;
        this.ui.lbl_js.node.active = true;
        if (RoomMgr_1.default.getInstance().isBunchFinish()) {
          this.ui.sprite_zjs.node.active = true;
          this.ui.lbl_zjs.node.active = true;
          this.ui.lbl_js.node.active = false;
        }
        this.ui.node_userList = [];
        this.ui.node_userList.push(ctrl.node_user_0);
        this.ui.node_userList.push(ctrl.node_user_1);
        this.ui.node_userList.push(ctrl.node_user_2);
        this.ui.node_userList.push(ctrl.node_user_3);
        ctrl.node_user_0.active = false;
        ctrl.node_user_1.active = false;
        ctrl.node_user_2.active = false;
        ctrl.node_user_3.active = false;
        if (this.model.b_drawGame) return;
        for (var logicseatid = 0; logicseatid < this.model.seatcount; ++logicseatid) {
          var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(logicseatid);
          var node_user = this.ui.node_userList[viewSeatId];
          node_user.active = true;
          var winNode = node_user.getChildByName("win");
          var loseNode = node_user.getChildByName("lose");
          this.ui.winNodes[viewSeatId] = winNode;
          this.ui.loseNodes[viewSeatId] = loseNode;
          this.ui.win_totalInfo[viewSeatId] = winNode.getChildByName("totalInfo").getComponent(cc.Label);
          this.ui.win_totalShui[viewSeatId] = winNode.getChildByName("totalShui").getComponent(cc.Label);
          this.ui.win_detailShui[viewSeatId] = winNode.getChildByName("detailShui").getComponent(cc.Label);
          this.ui.win_genzhuang[viewSeatId] = winNode.getChildByName("genzhuang").getComponent(cc.Label);
          this.ui.win_hutime[viewSeatId] = winNode.getChildByName("hutime").getChildByName("img_hutime").getComponent(cc.Sprite);
          this.ui.lose_totalInfo[viewSeatId] = loseNode.getChildByName("totalInfo").getComponent(cc.Label);
          this.ui.lose_forEachOtherShui[viewSeatId] = loseNode.getChildByName("forEachOtherShui").getComponent(cc.Label);
          this.ui.lose_detailShui[viewSeatId] = loseNode.getChildByName("detailShui").getComponent(cc.Label);
          this.ui.lose_totalShui[viewSeatId] = loseNode.getChildByName("totalShui").getComponent(cc.Label);
          this.ui.lose_genzhuang[viewSeatId] = loseNode.getChildByName("genzhuang").getComponent(cc.Label);
        }
        this.showUserInfo();
        this.showShareBtn();
      };
      View.prototype.updateTipLabel = function() {
        if (this.model.bViewAgain) {
          this.ui.lbl_hide.node.active = true;
          this.ui.lbl_js.node.active = false;
          this.ui.lbl_zjs.node.active = false;
        }
      };
      View.prototype.showUserInfo = function() {
        for (var logicseatid = 0; logicseatid < this.model.seatcount; ++logicseatid) {
          var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(logicseatid);
          var winflag = false;
          if (logicseatid == this.model.win_seatid) {
            this.ui.winNodes[viewSeatId].active = true;
            this.ui.loseNodes[viewSeatId].active = false;
            winflag = true;
          } else {
            this.ui.winNodes[viewSeatId].active = false;
            this.ui.loseNodes[viewSeatId].active = true;
            winflag = false;
          }
          this.showfan(viewSeatId, logicseatid);
          this.showTotalloseWin(viewSeatId, logicseatid);
        }
      };
      View.prototype.showfan = function(viewid, logicseatid) {
        var playerSettleInfo = this.model.playerSettleInfos[logicseatid.toString()];
        var shui = "";
        var winOrLoseNode = null;
        winOrLoseNode = 1 == playerSettleInfo.winflag ? this.ui.win_detailShui[viewid] : this.ui.lose_detailShui[viewid];
        for (var fanIdx = 0; fanIdx < playerSettleInfo.xijieshui.length; fanIdx++) {
          winOrLoseNode.node.active = true;
          shui = shui + MahjongDef_1.MahjongDef.gangkenames[playerSettleInfo.xijieshui[fanIdx][0]] + "(" + playerSettleInfo.xijieshui[fanIdx][2] + "),";
        }
        winOrLoseNode.string = shui.substring(0, shui.length - 1);
        winOrLoseNode.string || (winOrLoseNode.string = "无");
      };
      View.prototype.showTotalloseWin = function(viewid, logicseatid) {
        var _this = this;
        var playerSettleInfo = this.model.playerSettleInfos[logicseatid.toString()];
        var hutime = "";
        var yingzhuangjia = "";
        var yingxianjia = "";
        var shuyingfenshu = "";
        var yingbeishu = "";
        var difen = "";
        var lianzhuang = "";
        var yingjiapaifen = "";
        var shuyingjiafen = "";
        var paifen = "";
        if (1 == playerSettleInfo.winflag) {
          this.ui.win_hutime[viewid].string = playerSettleInfo.hutime;
          cc.loader.loadRes("GameCommon/Mahjong/Textures/JieSuan/img_hutime_" + this.ui.win_hutime[viewid].string, cc.SpriteFrame, function(err, sprite) {
            if (err) return cc.error("no find GameCommon/Mahjong/Textures/JieSuan/img_hutime_" + _this.ui.win_hutime[viewid].string);
            _this.ui.win_hutime[viewid].spriteFrame = sprite;
          });
          yingzhuangjia = playerSettleInfo.yingzhuangjia <= 0 ? "" : "赢庄家(" + playerSettleInfo.yingzhuangjia + ")";
          var index = 0;
          for (var fanIdx = 0; fanIdx < playerSettleInfo.yingxianjia.length; fanIdx++) index += playerSettleInfo.yingxianjia[fanIdx];
          yingxianjia = playerSettleInfo.yingxianjia <= 0 ? "" : "赢闲家(" + Math.abs(index) + ")";
          this.ui.win_totalInfo[viewid].string = yingzhuangjia && yingxianjia ? yingzhuangjia + "+" + yingxianjia : yingzhuangjia + yingxianjia;
          this.ui.win_totalShui[viewid].string = playerSettleInfo.shuyingfenshu + "水";
          this.ui.win_genzhuang[viewid].string = "跟庄:" + playerSettleInfo.gengzhuang + "水";
          this.ui.win_genzhuang[viewid].node.active = true;
          0 == playerSettleInfo.gengzhuang && (this.ui.win_genzhuang[viewid].node.active = false);
        } else {
          difen = "-[底" + (0 == playerSettleInfo.zhuangflag ? playerSettleInfo.difan : playerSettleInfo.difan / Math.pow(2, playerSettleInfo.lianzhuang + 1));
          0 == playerSettleInfo.lianzhuang ? lianzhuang = "×庄家2" : playerSettleInfo.lianzhuang > 0 && (lianzhuang = "×连庄" + Math.pow(2, playerSettleInfo.lianzhuang + 1));
          playerSettleInfo.zhuangflag || this.model.win_seatid == QgmjLogic_1.default.getInstance().zhuangseat || (lianzhuang = "");
          yingjiapaifen = "+赢家牌分" + Math.abs(playerSettleInfo.zongshui) + "]";
          hutime = "×" + MahjongDef_1.MahjongDef.hutimenames[playerSettleInfo.hutime];
          yingbeishu = playerSettleInfo.yingbeishu;
          shuyingjiafen = "=" + playerSettleInfo.shujiashuyingjiafen;
          this.ui.lose_totalInfo[viewid].string = difen + lianzhuang + yingjiapaifen + hutime + yingbeishu + shuyingjiafen;
          this.ui.lose_totalShui[viewid].string = playerSettleInfo.shuyingfenshu + "水";
          this.ui.lose_genzhuang[viewid].string = "跟庄:" + playerSettleInfo.gengzhuang + "水";
          0 == playerSettleInfo.gengzhuang && (this.ui.lose_genzhuang[viewid].node.active = false);
          var index = 0;
          for (var fanIdx = 0; fanIdx < playerSettleInfo.xijieshui.length; fanIdx++) index += playerSettleInfo.xijieshui[fanIdx][2];
          this.ui.lose_forEachOtherShui[viewid].string = "牌分(" + index + "),输家互算：" + playerSettleInfo.xianghusuanshui;
        }
      };
      View.prototype.showShareBtn = function() {
        this.ui.btn_share.active = 1 == this.model.sharingSwitch;
      };
      return View;
    }(BaseView_1.default);
    var QgmjSettleCtrl = function(_super) {
      __extends(QgmjSettleCtrl, _super);
      function QgmjSettleCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_drawgame = null;
        _this.btn_gameInfo = null;
        _this.btn_share = null;
        _this.btn_again = null;
        _this.node_score = null;
        _this.btn_close = null;
        _this.btn_exit = null;
        _this.node_user_0 = null;
        _this.node_user_1 = null;
        _this.node_user_2 = null;
        _this.node_user_3 = null;
        _this.sprite_zjs = null;
        _this.lbl_zjs = null;
        _this.lbl_js = null;
        _this.lbl_hide = null;
        return _this;
      }
      QgmjSettleCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      QgmjSettleCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onProcess: this.onProcess
        };
      };
      QgmjSettleCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          usersUpdated: this.usersUpdated,
          "http.reqGameSwitch": this.http_reqGameSwitch
        };
      };
      QgmjSettleCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.btn_gameInfo, this.btn_gameInfo_cb, "详细结算信息");
        this.connect(G_UiType.image, this.btn_share, this.btn_share_cb, "微信分享");
        this.connect(G_UiType.image, this.btn_again, this.btn_again_cb, "再来一局");
        this.connect(G_UiType.image, this.btn_exit, this.btn_exit_cb, "退出");
        this.connect(G_UiType.image, this.ui.clippingNode, this.btn_again_cb, "再来一局");
      };
      QgmjSettleCtrl.prototype.start = function() {};
      QgmjSettleCtrl.prototype.usersUpdated = function() {
        this.finish();
      };
      QgmjSettleCtrl.prototype.setAsViewAgain = function() {
        this.model.setAsViewAgain();
        this.view.updateTipLabel();
      };
      QgmjSettleCtrl.prototype.http_reqGameSwitch = function(msg) {
        this.model.updateSwitch(msg);
        this.view.showShareBtn();
      };
      QgmjSettleCtrl.prototype.onProcess = function(msg) {
        msg.process == MahjongDef_1.MahjongDef.process_ready && this.process_ready();
      };
      QgmjSettleCtrl.prototype.process_ready = function() {
        this.finish();
      };
      QgmjSettleCtrl.prototype.btn_gameInfo_cb = function() {
        console.log("btn_gameInfo_cb");
      };
      QgmjSettleCtrl.prototype.btn_share_cb = function() {
        console.log("btn_share_cb");
        this.start_sub_module(G_MODULE.Shared);
      };
      QgmjSettleCtrl.prototype.btn_again_cb = function() {
        if (this.model.bViewAgain) this.finish(); else if (RoomMgr_1.default.getInstance().isBunchFinish()) {
          RoomMgr_1.default.getInstance().showFinalSettle();
          this.finish();
        } else RoomMgr_1.default.getInstance().nextRound();
      };
      QgmjSettleCtrl.prototype.btn_exit_cb = function() {};
      __decorate([ property({
        tooltip: "流局",
        type: cc.Node
      }) ], QgmjSettleCtrl.prototype, "node_drawgame", void 0);
      __decorate([ property({
        tooltip: "详细结算信息",
        type: cc.Node
      }) ], QgmjSettleCtrl.prototype, "btn_gameInfo", void 0);
      __decorate([ property({
        tooltip: "微信分享",
        type: cc.Node
      }) ], QgmjSettleCtrl.prototype, "btn_share", void 0);
      __decorate([ property({
        tooltip: "再来一局",
        type: cc.Node
      }) ], QgmjSettleCtrl.prototype, "btn_again", void 0);
      __decorate([ property({
        tooltip: "分数",
        type: cc.Node
      }) ], QgmjSettleCtrl.prototype, "node_score", void 0);
      __decorate([ property({
        tooltip: "关闭",
        type: cc.Node
      }) ], QgmjSettleCtrl.prototype, "btn_close", void 0);
      __decorate([ property({
        tooltip: "退出",
        type: cc.Node
      }) ], QgmjSettleCtrl.prototype, "btn_exit", void 0);
      __decorate([ property({
        tooltip: "玩家0",
        type: cc.Node
      }) ], QgmjSettleCtrl.prototype, "node_user_0", void 0);
      __decorate([ property({
        tooltip: "玩家1",
        type: cc.Node
      }) ], QgmjSettleCtrl.prototype, "node_user_1", void 0);
      __decorate([ property({
        tooltip: "玩家2",
        type: cc.Node
      }) ], QgmjSettleCtrl.prototype, "node_user_2", void 0);
      __decorate([ property({
        tooltip: "玩家3",
        type: cc.Node
      }) ], QgmjSettleCtrl.prototype, "node_user_3", void 0);
      __decorate([ property({
        tooltip: "总结算图片",
        type: cc.Sprite
      }) ], QgmjSettleCtrl.prototype, "sprite_zjs", void 0);
      __decorate([ property({
        tooltip: "总结算提示",
        type: cc.Label
      }) ], QgmjSettleCtrl.prototype, "lbl_zjs", void 0);
      __decorate([ property({
        tooltip: "结算提示",
        type: cc.Label
      }) ], QgmjSettleCtrl.prototype, "lbl_js", void 0);
      __decorate([ property({
        tooltip: "隐藏结算",
        type: cc.Label
      }) ], QgmjSettleCtrl.prototype, "lbl_hide", void 0);
      QgmjSettleCtrl = __decorate([ ccclass ], QgmjSettleCtrl);
      return QgmjSettleCtrl;
    }(BaseCtrl_1.default);
    exports.default = QgmjSettleCtrl;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Mahjong/MahjongDef": "MahjongDef",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/GameMgrs/SwitchMgr": "SwitchMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../QgmjMgr/QgmjLogic": "QgmjLogic"
  } ],
  QuickAudioCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ef8fcOBHexIQ7zp4KlXNUbV", "QuickAudioCfg");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCfg_1 = require("../Libs/BaseCfg");
    var GameCateCfg_1 = require("./GameCateCfg");
    var GameAudioCfg_1 = require("./GameAudioCfg");
    var SettingMgr_1 = require("../GameMgrs/SettingMgr");
    var QuickAudioCfg = function(_super) {
      __extends(QuickAudioCfg, _super);
      function QuickAudioCfg() {
        var _this = _super.call(this) || this;
        _this.quickaudioData = null;
        _this.quickaudioPath = null;
        _this.gamecode = null;
        _this.curCfg = null;
        _this.cfgmap = null;
        _this.quickaudiodic = null;
        _this.quickaudioName = null;
        _this.sexmap = {
          1: 0,
          2: 1,
          3: 1
        };
        _this.sextype = 1;
        _this.language = 0;
        _this.quickaudioPath = _this.getFullPath("quickaudio");
        return _this;
      }
      QuickAudioCfg.getInstance = function() {
        this._instance || (this._instance = new QuickAudioCfg());
        return this._instance;
      };
      QuickAudioCfg.prototype.loadCb = function(name, data) {
        this.loaded = true;
        this.quickaudioData = data;
      };
      QuickAudioCfg.prototype.getData = function() {
        return this.quickaudioData;
      };
      QuickAudioCfg.prototype.load = function() {
        this.loadRes(this.quickaudioPath, this.loadCb);
      };
      QuickAudioCfg.prototype.setGameId = function(gameid) {
        this.quickaudioName = {};
        var game = GameCateCfg_1.default.getInstance().getGameById(gameid);
        this.gamecode = game.code;
        this.curCfg = this.quickaudioData[this.gamecode];
        this.quickaudiodic = GameAudioCfg_1.default.getInstance().getQuickAudioDic();
        if (!this.curCfg) {
          console.log("没有此类游戏的快捷聊天音频配置");
          return;
        }
        for (var i = 0; i < this.curCfg.length; i++) {
          var line = this.curCfg[i];
          var id = line.id;
          var name = line.name;
          this.quickaudioName[id] || (this.quickaudioName[id] = null);
          this.quickaudioName[id] = line.name;
        }
      };
      QuickAudioCfg.prototype.getCfg = function() {
        return this.curCfg;
      };
      QuickAudioCfg.prototype.play = function(id, sex) {
        var name = this.quickaudioName[id];
        var sextype = this.sexmap[sex];
        var cfgbyname = this.quickaudiodic[name];
        console.log("进来了");
        if (!cfgbyname) {
          console.log("找不到" + name + "的音频资源");
          return;
        }
        var cfgbysex = cfgbyname[sextype];
        if (!cfgbysex) {
          console.log("找不到" + name + "的性别" + sex + "快捷聊天音频资源");
          return;
        }
        var audios = cfgbysex;
        var langstrs = [ "pth", "pth" ];
        var rootPath = "resources/audio/Games/" + this.gamecode;
        var index = Math.floor(1e5 * Math.random() % audios.length);
        var filename = rootPath + "/" + audios[index] + ".mp3";
        var url = cc.url.raw(filename);
        cc.loader.load(url, function(err, data) {
          if (err) return;
          var volume = SettingMgr_1.default.getInstance().getMusicInfo().yyVolume / 100;
          SettingMgr_1.default.getInstance().getMusicInfo().bYySwitch || (volume = 0);
          cc.audioEngine.play(url, false, volume);
        }.bind(this));
      };
      return QuickAudioCfg;
    }(BaseCfg_1.default);
    exports.default = QuickAudioCfg;
    cc._RF.pop();
  }, {
    "../GameMgrs/SettingMgr": "SettingMgr",
    "../Libs/BaseCfg": "BaseCfg",
    "./GameAudioCfg": "GameAudioCfg",
    "./GameCateCfg": "GameCateCfg"
  } ],
  QuitMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "72a18QcRWhMGbkvwXPCommW", "QuitMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var RoomMgr_1 = require("./RoomMgr");
    var FrameMgr_1 = require("./FrameMgr");
    var UserMgr_1 = require("./UserMgr");
    var QuitMgr = function(_super) {
      __extends(QuitMgr, _super);
      function QuitMgr() {
        var _this = _super.call(this) || this;
        _this.routes = {};
        return _this;
      }
      QuitMgr.prototype.quitAfterBunchStarted = function(roominfo) {
        var roomtype = roominfo.roomtype;
        switch (roominfo.roomtype) {
         case 1:
          var okcb = function() {
            RoomMgr_1.default.getInstance().exitRoom();
          };
          FrameMgr_1.default.getInstance().showDialog("游戏已经开始了,此时退出游戏,你的牌局将交由机器管家代打,输了怪我咯!", okcb.bind(this), "退出房间");
          break;

         case 2:
         case 3:
          RoomMgr_1.default.getInstance().isWather() ? RoomMgr_1.default.getInstance().exitRoom() : RoomMgr_1.default.getInstance().applyDissolutionRoom();
        }
      };
      QuitMgr.prototype.quitBeforeBunchStarted = function(roominfo) {
        var roomvalue = RoomMgr_1.default.getInstance().getFangKaCfg();
        switch (roominfo.roomtype) {
         case 1:
          RoomMgr_1.default.getInstance().exitRoom();
          break;

         case 2:
         case 3:
          var roomPayType = roomvalue.v_paytype;
          var isOwner = roominfo.owner == UserMgr_1.default.getInstance().getUid();
          isOwner ? this.ownerQuit(roomPayType) : this.noOwnerQuit(roomPayType);
        }
      };
      QuitMgr.prototype.ownerQuit = function(roomPayType) {
        var contentArr = [ "由于本房间为房主支付房间，并且游戏未开始，所以房主退出将会解散房间，本次房间不会扣除你任何费用，是否确定解散房间!", "由于本房间为AA支付房间，并且游戏未开始，所以可以自由退出房间，本次房间不会扣除您任何费用，是否确定退出房间？", "由于本房间为赢家支付房间，并且游戏未开始，所以可以自由退出房间，本次房间不会扣除您任何费用，是否确定退出房间？" ];
        var titalArr = [ "解散房间", "退出房间", "退出房间" ];
        cc.error("房间支付类型？？", roomPayType);
        var okcb = function() {
          RoomMgr_1.default.getInstance().exitRoom();
        };
        FrameMgr_1.default.getInstance().showDialog(contentArr[roomPayType], okcb, titalArr[roomPayType]);
      };
      QuitMgr.prototype.noOwnerQuit = function(roomPayType) {
        var contentArr = [ "由于本房间为房主支付房间，并且游戏未开始，你不是房主，可以自由退出，本次房间将不会扣除您任何费用，是否确定退出房间?", "由于本房间为AA支付房间，并且游戏未开始，所以可以自由退出房间，本次房间不会扣除您任何费用，是否确定退出房间？", "由于本房间为赢家支付房间，并且游戏未开始，所以可以自由退出房间，本次房间不会扣除您任何费用，是否确定退出房间？" ];
        var okcb = function() {
          RoomMgr_1.default.getInstance().exitRoom();
        };
        FrameMgr_1.default.getInstance().showDialog(contentArr[roomPayType], okcb, "退出房间");
      };
      QuitMgr.prototype.quit = function() {
        var roominfo = RoomMgr_1.default.getInstance().roominfo;
        RoomMgr_1.default.getInstance().isBunchStarted() ? this.quitAfterBunchStarted(roominfo) : this.quitBeforeBunchStarted(roominfo);
      };
      QuitMgr.getInstance = function() {
        this._instance || (this._instance = new QuitMgr());
        return this._instance;
      };
      return QuitMgr;
    }(BaseMgr_1.default);
    exports.default = QuitMgr;
    cc._RF.pop();
  }, {
    "../Libs/BaseMgr": "BaseMgr",
    "./FrameMgr": "FrameMgr",
    "./RoomMgr": "RoomMgr",
    "./UserMgr": "UserMgr"
  } ],
  QzmjCards: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3d4fcEjl45Er7v3ti21crZS", "QzmjCards");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MahjongCards_1 = require("../../../GameCommon/Mahjong/MahjongCards");
    var QzmjCards = function(_super) {
      __extends(QzmjCards, _super);
      function QzmjCards(cardcount) {
        var _this = this;
        console.log("cardcount=", cardcount);
        _this = _super.call(this, cardcount) || this;
        return _this;
      }
      return QzmjCards;
    }(MahjongCards_1.default);
    exports.default = QzmjCards;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Mahjong/MahjongCards": "MahjongCards"
  } ],
  QzmjEntry: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "de0b9DbLshJnretIgEDLdRk", "QzmjEntry");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ModuleMgr_1 = require("../../Plat/GameMgrs/ModuleMgr");
    var modules = {
      Settle: "SubLayer/Games/Qzmj/QzmjSettle",
      GambleRecord: "SubLayer/Games/Qzmj/QzmjGambleRecord"
    };
    var QzmjEntry = function() {
      function QzmjEntry() {}
      QzmjEntry.getInstance = function() {
        this._instance || (this._instance = new QzmjEntry());
        return this._instance;
      };
      QzmjEntry.prototype.registerModules = function() {
        ModuleMgr_1.default.getInstance().registerGame(modules);
      };
      return QzmjEntry;
    }();
    exports.default = QzmjEntry;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/ModuleMgr": "ModuleMgr"
  } ],
  QzmjFinalSettleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2f7918Y92ZFb42NOWX4z+mV", "QzmjFinalSettleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BunchInfoMgr_1 = require("../../Plat/GameMgrs/BunchInfoMgr");
    var SwitchMgr_1 = require("../../Plat/GameMgrs/SwitchMgr");
    var LoginMgr_1 = require("../../Plat/GameMgrs/LoginMgr");
    var Green = new cc.Color(24, 221, 40), Red = new cc.Color(255, 78, 0), Yellow = new cc.Color(255, 222, 0);
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.roomOption = null;
        _this.shareSwitch = null;
        _this.roomValue = null;
        _this.roomid = null;
        _this.roundIndex = null;
        _this.shareSwitch = SwitchMgr_1.default.getInstance().get_switch_performance_sharing();
        _this.roomOption = BunchInfoMgr_1.default.getInstance().getRoomOption();
        _this.roomid = BunchInfoMgr_1.default.getInstance().getRoomId();
        _this.roundIndex = BunchInfoMgr_1.default.getInstance().getBunchInfo().roundIndex;
        _this.roomValue = BunchInfoMgr_1.default.getInstance().getBunchInfo().roomValue;
        return _this;
      }
      Model.prototype.updateSwitch = function(msg) {
        this.shareSwitch = msg.cfg.switch_performance_sharing;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_ztj: null,
          btn_mjjf: null,
          btn_share: null,
          btn_exit: null,
          node_content: null,
          prefab_QzmjRoundsSettle: null,
          prefab_QzmjStatisticsSettle: null,
          ztjNormalSprite: null,
          ztjPressSprite: null,
          mjjfNormalSprite: null,
          mjjfPressSprite: null,
          btn_close: null,
          lab_look_video: null,
          lbl_roomInfo: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.btn_ztj = ctrl.btn_ztj.getComponent(cc.Sprite);
        this.ui.btn_mjjf = ctrl.btn_mjjf.getComponent(cc.Sprite);
        this.ui.btn_share = ctrl.btn_share;
        this.ui.lab_look_video = ctrl.lab_look_video;
        this.ui.lab_look_video.node.active = false;
        this.ui.btn_exit = ctrl.btn_exit;
        this.ui.btn_exit.active = false;
        this.ui.node_content = ctrl.node_content;
        this.ui.btn_close = ctrl.btn_close;
        this.ui.btn_close.active = true;
        this.ui.lbl_roomInfo = ctrl.lbl_roomInfo;
        if (BunchInfoMgr_1.default.getInstance().getplazzaFlag()) {
          this.ui.btn_close.active = true;
          this.ui.lab_look_video.node.active = true;
        }
        this.ui.prefab_QzmjRoundsSettle = ctrl.prefab_QzmjRoundsSettle;
        this.ui.prefab_QzmjStatisticsSettle = ctrl.prefab_QzmjStatisticsSettle;
        this.ui.ztjNormalSprite = this.ui.btn_ztj.node.getChildByName("totalBtn_normalSprite");
        this.ui.ztjPressSprite = this.ui.btn_ztj.node.getChildByName("totalBtn_pressSprite");
        this.ui.mjjfNormalSprite = this.ui.btn_mjjf.node.getChildByName("detailBtn_normalSprite");
        this.ui.mjjfPressSprite = this.ui.btn_mjjf.node.getChildByName("detailBtn_pressSprite");
        this.initViewWithStatistics();
        this.showShareBtn();
        this.showroomInfo();
      };
      View.prototype.initViewWithRounds = function() {
        this.ui.node_content.removeAllChildren();
        var QzmjRounds = cc.instantiate(this.ui.prefab_QzmjRoundsSettle);
        this.ui.node_content.addChild(QzmjRounds);
        var QzmjRoundsCtrl = QzmjRounds.getComponent("QzmjRoundsSettleCtrl");
        this.ui.ztjNormalSprite.active = true;
        this.ui.ztjPressSprite.active = false;
        this.ui.mjjfNormalSprite.active = false;
        this.ui.mjjfPressSprite.active = true;
      };
      View.prototype.initViewWithStatistics = function() {
        this.ui.node_content.removeAllChildren();
        var QzmjStatistics = cc.instantiate(this.ui.prefab_QzmjStatisticsSettle);
        var QzmjStatisticsSettleCtrl = QzmjStatistics.getComponent("QzmjStatisticsSettleCtrl");
        console.log("QzmjStatistics=", QzmjStatistics, this.ui.node_content);
        this.ui.node_content.addChild(QzmjStatistics);
        this.ui.ztjNormalSprite.active = false;
        this.ui.ztjPressSprite.active = true;
        this.ui.mjjfNormalSprite.active = true;
        this.ui.mjjfPressSprite.active = false;
      };
      View.prototype.showShareBtn = function() {
        this.ui.btn_share.active = 1 == this.model.shareSwitch;
      };
      View.prototype.formatDate = function() {
        var time = new Date();
        var year = time.getFullYear();
        var month = time.getMonth() + 1;
        var date = time.getDate();
        var hour = time.getHours();
        var minute = time.getMinutes();
        var second = time.getSeconds();
        return year + "-" + month + "-" + date + " " + hour + ":" + minute + ":" + second;
      };
      View.prototype.showroomInfo = function() {
        var roomOptionDesc = this.model.roomOption.toString().replace(new RegExp(",", "g"), " ").replace(new RegExp("，", "g"), " ").replace(new RegExp("。", "g"), " ");
        var dattime = this.formatDate();
        this.ui.lbl_roomInfo.string = "房号" + this.model.roomid + "  第" + this.model.roundIndex + "/" + this.model.roomValue.v_roundcount + "局\n\n" + roomOptionDesc + "\n\n" + dattime;
        0 != this.model.roomValue.v_roundcount && void 0 != this.model.roomValue.v_roundcount || (this.ui.lbl_roomInfo.string = "房号" + this.model.roomid + "  一课\n\n" + roomOptionDesc + "\n\n" + dattime);
        console.log("roomid", this.model.roomid);
        console.log("roundIndex", this.model.roundIndex, " / ", this.model.roomValue.v_roundcount);
        console.log("roomOptionDesc", roomOptionDesc);
        console.log("dattime", dattime);
      };
      return View;
    }(BaseView_1.default);
    var QzmjFinalSettleCtrl = function(_super) {
      __extends(QzmjFinalSettleCtrl, _super);
      function QzmjFinalSettleCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_content = null;
        _this.btn_ztj = null;
        _this.btn_mjjf = null;
        _this.btn_share = null;
        _this.btn_exit = null;
        _this.prefab_QzmjRoundsSettle = null;
        _this.prefab_QzmjStatisticsSettle = null;
        _this.btn_close = null;
        _this.lab_look_video = null;
        _this.lbl_roomInfo = null;
        return _this;
      }
      QzmjFinalSettleCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      QzmjFinalSettleCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqGameSwitch": this.http_reqGameSwitch
        };
      };
      QzmjFinalSettleCtrl.prototype.defineGlobalEvents = function() {};
      QzmjFinalSettleCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.btn_ztj, this.btn_ztj_cb, "总统计");
        this.connect(G_UiType.image, this.btn_mjjf, this.btn_mjjf_cb, "每局积分");
        this.connect(G_UiType.image, this.btn_share, this.btn_share_cb, "分享");
        this.connect(G_UiType.image, this.btn_exit, this.btn_exit_cb, "退出");
        this.connect(G_UiType.image, this.btn_close, this.btn_close_cb, "退出");
      };
      QzmjFinalSettleCtrl.prototype.start = function() {};
      QzmjFinalSettleCtrl.prototype.http_reqGameSwitch = function(msg) {
        this.model.updateSwitch(msg);
        this.view.showShareBtn();
      };
      QzmjFinalSettleCtrl.prototype.btn_exit_cb = function() {
        BunchInfoMgr_1.default.getInstance().clear();
        LoginMgr_1.default.getInstance().disconnectGameSvr();
      };
      QzmjFinalSettleCtrl.prototype.btn_ztj_cb = function() {
        console.log("btn_ztj_cb");
        this.view.initViewWithStatistics();
      };
      QzmjFinalSettleCtrl.prototype.btn_mjjf_cb = function() {
        console.log("btn_mjjf_cb");
        this.view.initViewWithRounds();
      };
      QzmjFinalSettleCtrl.prototype.btn_share_cb = function() {
        console.log("btn_share_cb");
        this.start_sub_module(G_MODULE.Shared);
      };
      QzmjFinalSettleCtrl.prototype.showDefaultView = function() {
        this.view.initViewWithStatistics();
      };
      QzmjFinalSettleCtrl.prototype.btn_close_cb = function() {
        BunchInfoMgr_1.default.getInstance().clear();
        this.finish();
        this.start_module(G_MODULE.Plaza);
      };
      __decorate([ property({
        tooltip: "content",
        type: cc.Node
      }) ], QzmjFinalSettleCtrl.prototype, "node_content", void 0);
      __decorate([ property({
        tooltip: "btn_ztj",
        type: cc.Node
      }) ], QzmjFinalSettleCtrl.prototype, "btn_ztj", void 0);
      __decorate([ property({
        tooltip: "btn_mjjf",
        type: cc.Node
      }) ], QzmjFinalSettleCtrl.prototype, "btn_mjjf", void 0);
      __decorate([ property({
        tooltip: "btn_share",
        type: cc.Node
      }) ], QzmjFinalSettleCtrl.prototype, "btn_share", void 0);
      __decorate([ property({
        tooltip: "btn_exit",
        type: cc.Node
      }) ], QzmjFinalSettleCtrl.prototype, "btn_exit", void 0);
      __decorate([ property({
        tooltip: "每局明细",
        type: cc.Prefab
      }) ], QzmjFinalSettleCtrl.prototype, "prefab_QzmjRoundsSettle", void 0);
      __decorate([ property({
        tooltip: "总统计",
        type: cc.Prefab
      }) ], QzmjFinalSettleCtrl.prototype, "prefab_QzmjStatisticsSettle", void 0);
      __decorate([ property({
        tooltip: "btn_close",
        type: cc.Node
      }) ], QzmjFinalSettleCtrl.prototype, "btn_close", void 0);
      __decorate([ property({
        tooltip: "录像提示",
        type: cc.Label
      }) ], QzmjFinalSettleCtrl.prototype, "lab_look_video", void 0);
      __decorate([ property({
        tooltip: "房间信息",
        type: cc.Label
      }) ], QzmjFinalSettleCtrl.prototype, "lbl_roomInfo", void 0);
      QzmjFinalSettleCtrl = __decorate([ ccclass ], QzmjFinalSettleCtrl);
      return QzmjFinalSettleCtrl;
    }(BaseCtrl_1.default);
    exports.default = QzmjFinalSettleCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../Plat/GameMgrs/LoginMgr": "LoginMgr",
    "../../Plat/GameMgrs/SwitchMgr": "SwitchMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView"
  } ],
  QzmjGambleRecordCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c8b49x5nCVO/LhsaC2ODkZP", "QzmjGambleRecordCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var UserMgr_1 = require("../../../Plat/GameMgrs/UserMgr");
    var Green = new cc.Color(24, 221, 40), Red = new cc.Color(255, 78, 0), Yellow = new cc.Color(255, 222, 0);
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.leap = 68;
        _this.gameResultData = RoomMgr_1.default.getInstance().getBunchInfo();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_content: null,
          node_yellowBattleResult: null,
          node_yellowLightBattleResult: null,
          btn_close: null,
          node_panel: null,
          lbl_score0s: [],
          lbl_score1s: [],
          lbl_score2s: [],
          lbl_score3s: [],
          lbl_roundindexes: [],
          lbl_times: [],
          lbl_names: {},
          lbl_nameSigns: {}
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        console.log("winlog");
        this.ui.btn_close = ctrl.btn_close;
        this.ui.node_content = ctrl.node_content;
        this.ui.node_yellowBattleResult = ctrl.node_yellowBattleResult;
        this.ui.node_yellowLightBattleResult = ctrl.node_yellowLightBattleResult;
        this.ui.node_panel = ctrl.node_panel;
        if (null == this.model.gameResultData || void 0 == this.model.gameResultData) return;
        var meiju = this.model.gameResultData.meiju;
        if (null == meiju || void 0 == meiju) return;
        var prefabBarArr = [ this.ui.node_yellowBattleResult, this.ui.node_yellowLightBattleResult ];
        meiju.length > 7 && this.ui.node_content.setContentSize(this.ui.node_content.getContentSize().width, this.model.leap * meiju.length);
        for (var i = 0; i < meiju.length; i++) {
          var colorindex = i % 2;
          var prefabBar = prefabBarArr[colorindex];
          var barItem = cc.instantiate(prefabBar);
          barItem.active = true;
          barItem.setPosition(cc.v2(0, (i + 1) * -this.model.leap));
          this.ui.node_content.addChild(barItem);
          this.ui.lbl_roundindexes[i] = barItem.getChildByName("lbl_roundindex").getComponent(cc.Label);
          this.ui.lbl_times[i] = barItem.getChildByName("lbl_time").getComponent(cc.Label);
          this.ui.lbl_score0s[i] = barItem.getChildByName("lbl_score0").getComponent(cc.Label);
          this.ui.lbl_score1s[i] = barItem.getChildByName("lbl_score1").getComponent(cc.Label);
          this.ui.lbl_score2s[i] = barItem.getChildByName("lbl_score2").getComponent(cc.Label);
          this.ui.lbl_score3s[i] = barItem.getChildByName("lbl_score3").getComponent(cc.Label);
        }
        for (var logicseatid = 0; logicseatid < RoomMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
          this.ui.lbl_names[logicseatid] = this.ui.node_panel.getChildByName("lbl_name" + logicseatid).getComponent(cc.Label);
          this.ui.lbl_nameSigns[logicseatid] = this.ui.node_panel.getChildByName("lbl_nameSign" + logicseatid).getComponent(cc.Label);
        }
      };
      View.prototype.showData = function() {
        var meijuData = this.model.gameResultData.meiju;
        if (null != meijuData && void 0 != meijuData) {
          this.showDetailData(meijuData);
          this.showPlayerInfo();
        }
      };
      View.prototype.showDetailData = function(meijuData) {
        for (var i = 0; i < meijuData.length; ++i) {
          var itemData = meijuData[i];
          var myDate = new Date(itemData[0]);
          var curtime = myDate.getHours().toString() + ":" + myDate.getMinutes();
          this.ui.lbl_times[i].string = "(" + curtime + ")";
          this.ui.lbl_roundindexes[i].string = "第" + (i + 1) + "局";
          var lbl_scores = [ this.ui.lbl_score0s[i], this.ui.lbl_score1s[i], this.ui.lbl_score2s[i], this.ui.lbl_score3s[i] ];
          for (var logicseatid = 0; logicseatid < RoomMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
            var dataItem = itemData[1][logicseatid.toString()];
            var hutime = dataItem[0];
            var score = dataItem[1];
            var yikescore = dataItem[2];
            var yikescorestr = "";
            var hutimestr = "";
            var scorestr = "";
            var lbl_score = lbl_scores[logicseatid];
            lbl_score.node.active = true;
            var prefix = "";
            score > 0 && (prefix = "+");
            if (1 == this.model.gameResultData.scoretype) {
              yikescorestr = "" + yikescore;
              scorestr = "(" + prefix + score + ")";
            } else scorestr = "" + prefix + score;
            hutime && (hutimestr = "(" + hutime + ")");
            var wholescore = "" + yikescorestr + scorestr + hutimestr;
            lbl_score.string = wholescore;
            lbl_score.node.color = score >= 0 ? Red : Green;
          }
        }
      };
      View.prototype.showPlayerInfo = function() {
        var viewCalled = [ "(我)", "(下家)", "(对家)", "(上家)" ];
        for (var logicseatid = 0; logicseatid < RoomMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
          var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(logicseatid);
          this.ui.lbl_nameSigns[logicseatid].string = viewCalled[viewSeatId];
          this.ui.lbl_nameSigns[logicseatid].node.active = true;
          var uid = RoomMgr_1.default.getInstance().users[logicseatid];
          if (null == uid || void 0 == uid) continue;
          var user = UserMgr_1.default.getInstance().getUserById(uid);
          this.ui.lbl_names[logicseatid].string = user.nickname;
          this.ui.lbl_names[logicseatid].node.active = true;
        }
      };
      return View;
    }(BaseView_1.default);
    var QzmjGambleRecordCtrl = function(_super) {
      __extends(QzmjGambleRecordCtrl, _super);
      function QzmjGambleRecordCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_content = null;
        _this.node_yellowBattleResult = null;
        _this.node_yellowLightBattleResult = null;
        _this.btn_close = null;
        _this.node_panel = null;
        return _this;
      }
      QzmjGambleRecordCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        null != this.model.gameResultData && void 0 != this.model.gameResultData && this.view.showData();
      };
      QzmjGambleRecordCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onStartGame: this.onStartGame,
          onDissolutionRoom: this.onDissolutionRoom,
          onGameFinished: this.onGameFinished
        };
      };
      QzmjGambleRecordCtrl.prototype.defineGlobalEvents = function() {};
      QzmjGambleRecordCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.btn_close, this.btn_closecb, "点击关闭");
      };
      QzmjGambleRecordCtrl.prototype.start = function() {};
      QzmjGambleRecordCtrl.prototype.onStartGame = function(msg) {
        this.finish();
      };
      QzmjGambleRecordCtrl.prototype.onDissolutionRoom = function(msg) {
        msg.result && this.finish();
      };
      QzmjGambleRecordCtrl.prototype.onGameFinished = function(msg) {
        this.finish();
      };
      QzmjGambleRecordCtrl.prototype.btn_closecb = function() {
        this.finish();
      };
      __decorate([ property({
        tooltip: "滚动视图",
        type: cc.Node
      }) ], QzmjGambleRecordCtrl.prototype, "node_content", void 0);
      __decorate([ property({
        tooltip: "深色战绩记录",
        type: cc.Node
      }) ], QzmjGambleRecordCtrl.prototype, "node_yellowBattleResult", void 0);
      __decorate([ property({
        tooltip: "浅色战绩记录",
        type: cc.Node
      }) ], QzmjGambleRecordCtrl.prototype, "node_yellowLightBattleResult", void 0);
      __decorate([ property({
        tooltip: "关闭按钮",
        type: cc.Node
      }) ], QzmjGambleRecordCtrl.prototype, "btn_close", void 0);
      __decorate([ property({
        tooltip: "panel",
        type: cc.Node
      }) ], QzmjGambleRecordCtrl.prototype, "node_panel", void 0);
      QzmjGambleRecordCtrl = __decorate([ ccclass ], QzmjGambleRecordCtrl);
      return QzmjGambleRecordCtrl;
    }(BaseCtrl_1.default);
    exports.default = QzmjGambleRecordCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/GameMgrs/UserMgr": "UserMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView"
  } ],
  QzmjLogic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7cf2ewEtA1Pl6gB91KOFlFQ", "QzmjLogic");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var QzmjPlayer_1 = require("./QzmjPlayer");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var QzmjProp_1 = require("./QzmjProp");
    var MahjongLogic_1 = require("../../../GameCommon/Mahjong/MahjongLogic");
    var QzmjCards_1 = require("./QzmjCards");
    var QzmjLogic = function(_super) {
      __extends(QzmjLogic, _super);
      function QzmjLogic() {
        return _super.call(this) || this;
      }
      QzmjLogic.getInstance = function() {
        this._instance || (this._instance = new QzmjLogic());
        return this._instance;
      };
      QzmjLogic.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        delete QzmjLogic._instance;
        QzmjLogic._instance = null;
      };
      QzmjLogic.prototype.initMahjong = function() {
        this.mahjongcards = new QzmjCards_1.default(16);
        for (var i = 0; i < this.seatcount; i++) {
          this.players[i] = new QzmjPlayer_1.default();
          this.players[i].init(i, this);
        }
        var cfg = RoomMgr_1.default.getInstance().getFangKaCfg();
        this.prop = new QzmjProp_1.default(cfg);
        this.isMingYou = 1 == this.prop.get_v_youjintype();
      };
      return QzmjLogic;
    }(MahjongLogic_1.default);
    exports.default = QzmjLogic;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Mahjong/MahjongLogic": "MahjongLogic",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "./QzmjCards": "QzmjCards",
    "./QzmjPlayer": "QzmjPlayer",
    "./QzmjProp": "QzmjProp"
  } ],
  QzmjOption: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ae085qRBeVOKrnD2EyT8RIQ", "QzmjOption");
    var getCfg = function(roomCfg) {
      var simpleCfg = [ "游金:明游", "倍数:游金四倍" ];
      var fullCfg = [ {
        title: "游金:明游",
        des: [ "当拥有游金牌型时,可直接选择游金,然后按顺序进行", "最后一轮摸牌,摸到花算水" ]
      }, {
        title: "倍数:游金四倍",
        des: [ "游金4倍,双游8倍，三游12倍" ]
      } ];
      var cfg = {
        simpleCfg: simpleCfg,
        fullCfg: fullCfg
      };
      return cfg;
    };
    cc._RF.pop();
  }, {} ],
  QzmjPlayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4429e1eCY9APLYRYv1P/f3J", "QzmjPlayer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MahjongPlayer_1 = require("../../../GameCommon/Mahjong/MahjongPlayer");
    var QzmjPlayer = function(_super) {
      __extends(QzmjPlayer, _super);
      function QzmjPlayer() {
        return _super.call(this) || this;
      }
      return QzmjPlayer;
    }(MahjongPlayer_1.default);
    exports.default = QzmjPlayer;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Mahjong/MahjongPlayer": "MahjongPlayer"
  } ],
  QzmjProp: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0153fUHICBP5rNys/gC6mnW", "QzmjProp");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var QzmjProp = function() {
      function QzmjProp(customcfg) {
        this.customcfg = null;
        this.defaultcfg = {
          v_difen: 5,
          v_huapai: 1,
          v_jinpai: 1,
          v_ziangang: 4,
          v_ptangang: 3,
          v_ziminggang: 3,
          v_ptminggang: 2,
          v_zianke: 2,
          v_ptanke: 1,
          v_zimingke: 1,
          v_ptmingke: 0,
          v_zhuangdifen: 2,
          t_chihu: 1,
          t_zimo: 2,
          t_qiangganghu: 2,
          t_sanjindao: 3,
          t_bazhanghua: 3,
          t_youjin: 3,
          t_shuangyou: 6,
          t_sanyou: 9,
          v_roundcount: 8,
          v_seatcount: 4,
          v_paytype: 1,
          v_youjintype: 0,
          b_hupai: 0,
          v_youjinjiangli: 25,
          v_shasanjiangli: 50,
          b_jinxianzhi: 1,
          b_yike: 0,
          v_fangfei: 99,
          v_genzhuang: 1
        };
        this.customcfg = customcfg;
      }
      QzmjProp.prototype.get_v_difen = function() {
        if (null != this.customcfg["v_difen"]) return this.customcfg["v_difen"];
        return this.defaultcfg["v_difen"];
      };
      QzmjProp.prototype.get_v_huapai = function() {
        if (null != this.customcfg["v_huapai"]) return this.customcfg["v_huapai"];
        return this.defaultcfg["v_huapai"];
      };
      QzmjProp.prototype.get_v_jinpai = function() {
        if (null != this.customcfg["v_jinpai"]) return this.customcfg["v_jinpai"];
        return this.defaultcfg["v_jinpai"];
      };
      QzmjProp.prototype.get_v_ziangang = function() {
        if (null != this.customcfg["v_ziangang"]) return this.customcfg["v_ziangang"];
        return this.defaultcfg["v_ziangang"];
      };
      QzmjProp.prototype.get_v_ptangang = function() {
        if (null != this.customcfg["v_ptangang"]) return this.customcfg["v_ptangang"];
        return this.defaultcfg["v_ptangang"];
      };
      QzmjProp.prototype.get_v_ziminggang = function() {
        if (null != this.customcfg["v_ziminggang"]) return this.customcfg["v_ziminggang"];
        return this.defaultcfg["v_ziminggang"];
      };
      QzmjProp.prototype.get_v_ptminggang = function() {
        if (null != this.customcfg["v_ptminggang"]) return this.customcfg["v_ptminggang"];
        return this.defaultcfg["v_ptminggang"];
      };
      QzmjProp.prototype.get_v_zianke = function() {
        if (null != this.customcfg["v_zianke"]) return this.customcfg["v_zianke"];
        return this.defaultcfg["v_zianke"];
      };
      QzmjProp.prototype.get_v_ptanke = function() {
        if (null != this.customcfg["v_ptanke"]) return this.customcfg["v_ptanke"];
        return this.defaultcfg["v_ptanke"];
      };
      QzmjProp.prototype.get_v_zimingke = function() {
        if (null != this.customcfg["v_zimingke"]) return this.customcfg["v_zimingke"];
        return this.defaultcfg["v_zimingke"];
      };
      QzmjProp.prototype.get_v_ptmingke = function() {
        if (null != this.customcfg["v_ptmingke"]) return this.customcfg["v_ptmingke"];
        return this.defaultcfg["v_ptmingke"];
      };
      QzmjProp.prototype.get_v_zhuangdifen = function() {
        if (null != this.customcfg["v_zhuangdifen"]) return this.customcfg["v_zhuangdifen"];
        return this.defaultcfg["v_zhuangdifen"];
      };
      QzmjProp.prototype.get_t_chihu = function() {
        if (null != this.customcfg["t_chihu"]) return this.customcfg["t_chihu"];
        return this.defaultcfg["t_chihu"];
      };
      QzmjProp.prototype.get_t_zimo = function() {
        if (null != this.customcfg["t_zimo"]) return this.customcfg["t_zimo"];
        return this.defaultcfg["t_zimo"];
      };
      QzmjProp.prototype.get_t_qiangganghu = function() {
        if (null != this.customcfg["t_qiangganghu"]) return this.customcfg["t_qiangganghu"];
        return this.defaultcfg["t_qiangganghu"];
      };
      QzmjProp.prototype.get_t_sanjindao = function() {
        if (null != this.customcfg["t_sanjindao"]) return this.customcfg["t_sanjindao"];
        return this.defaultcfg["t_sanjindao"];
      };
      QzmjProp.prototype.get_t_bazhanghua = function() {
        if (null != this.customcfg["t_bazhanghua"]) return this.customcfg["t_bazhanghua"];
        return this.defaultcfg["t_bazhanghua"];
      };
      QzmjProp.prototype.get_t_youjin = function() {
        if (null != this.customcfg["t_youjin"]) return this.customcfg["t_youjin"];
        return this.defaultcfg["t_youjin"];
      };
      QzmjProp.prototype.get_t_shuangyou = function() {
        if (null != this.customcfg["t_shuangyou"]) return this.customcfg["t_shuangyou"];
        return this.defaultcfg["t_shuangyou"];
      };
      QzmjProp.prototype.get_t_sanyou = function() {
        if (null != this.customcfg["t_sanyou"]) return this.customcfg["t_sanyou"];
        return this.defaultcfg["t_sanyou"];
      };
      QzmjProp.prototype.get_v_roundcount = function() {
        if (null != this.customcfg["v_roundcount"]) return this.customcfg["v_roundcount"];
        return this.defaultcfg["v_roundcount"];
      };
      QzmjProp.prototype.get_v_seatcount = function() {
        if (null != this.customcfg["v_seatcount"]) return this.customcfg["v_seatcount"];
        return this.defaultcfg["v_seatcount"];
      };
      QzmjProp.prototype.get_v_paytype = function() {
        if (null != this.customcfg["v_paytype"]) return this.customcfg["v_paytype"];
        return this.defaultcfg["v_paytype"];
      };
      QzmjProp.prototype.get_v_youjintype = function() {
        if (null != this.customcfg["v_youjintype"]) return this.customcfg["v_youjintype"];
        return this.defaultcfg["v_youjintype"];
      };
      QzmjProp.prototype.get_b_hupai = function() {
        if (null != this.customcfg["b_hupai"]) return this.customcfg["b_hupai"];
        return this.defaultcfg["b_hupai"];
      };
      QzmjProp.prototype.get_v_youjinjiangli = function() {
        if (null != this.customcfg["v_youjinjiangli"]) return this.customcfg["v_youjinjiangli"];
        return this.defaultcfg["v_youjinjiangli"];
      };
      QzmjProp.prototype.get_v_shasanjiangli = function() {
        if (null != this.customcfg["v_shasanjiangli"]) return this.customcfg["v_shasanjiangli"];
        return this.defaultcfg["v_shasanjiangli"];
      };
      QzmjProp.prototype.get_b_jinxianzhi = function() {
        if (null != this.customcfg["b_jinxianzhi"]) return this.customcfg["b_jinxianzhi"];
        return this.defaultcfg["b_jinxianzhi"];
      };
      QzmjProp.prototype.get_b_yike = function() {
        if (null != this.customcfg["b_yike"]) return this.customcfg["b_yike"];
        return this.defaultcfg["b_yike"];
      };
      QzmjProp.prototype.get_v_fangfei = function() {
        if (null != this.customcfg["v_fangfei"]) return this.customcfg["v_fangfei"];
        return this.defaultcfg["v_fangfei"];
      };
      QzmjProp.prototype.get_v_genzhuang = function() {
        if (null != this.customcfg["v_genzhuang"]) return this.customcfg["v_genzhuang"];
        return this.defaultcfg["v_genzhuang"];
      };
      return QzmjProp;
    }();
    exports.default = QzmjProp;
    cc._RF.pop();
  }, {} ],
  QzmjRoomCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2456b1Q1EtJgL6GOLb3itIu", "QzmjRoomCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var QzmjLogic_1 = require("../QzmjMgr/QzmjLogic");
    var MahjongResMgr_1 = require("../../../GameCommon/Mahjong/MahjongResMgr");
    var MahjongDef_1 = require("../../../GameCommon/Mahjong/MahjongDef");
    var MahjongAudio_1 = require("../../../GameCommon/Mahjong/MahjongAudio");
    var QzmjCards_1 = require("../QzmjMgr/QzmjCards");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          mahjongRoom: null
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.showComponents = function() {
        this.ui.mahjongRoom = cc.instantiate(ctrl.MahjongRoom);
        this.node.addChild(this.ui.mahjongRoom);
      };
      View.prototype.initUi = function() {};
      return View;
    }(BaseView_1.default);
    var QzmjRoomCtrl = function(_super) {
      __extends(QzmjRoomCtrl, _super);
      function QzmjRoomCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.MahjongRoom = null;
        return _this;
      }
      QzmjRoomCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        RoomMgr_1.default.getInstance().setGameLibs(MahjongDef_1.MahjongDef, MahjongResMgr_1.default, QzmjLogic_1.default, MahjongAudio_1.default, QzmjCards_1.default);
        this.view.showComponents();
      };
      QzmjRoomCtrl.prototype.defineNetEvents = function() {};
      QzmjRoomCtrl.prototype.defineGlobalEvents = function() {};
      QzmjRoomCtrl.prototype.connectUi = function() {};
      QzmjRoomCtrl.prototype.start = function() {
        this.isIPhoneX() && this.resetDesignResolution(this.node.getComponent(cc.Canvas));
      };
      __decorate([ property(cc.Prefab) ], QzmjRoomCtrl.prototype, "MahjongRoom", void 0);
      QzmjRoomCtrl = __decorate([ ccclass ], QzmjRoomCtrl);
      return QzmjRoomCtrl;
    }(BaseCtrl_1.default);
    exports.default = QzmjRoomCtrl;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Mahjong/MahjongAudio": "MahjongAudio",
    "../../../GameCommon/Mahjong/MahjongDef": "MahjongDef",
    "../../../GameCommon/Mahjong/MahjongResMgr": "MahjongResMgr",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../QzmjMgr/QzmjCards": "QzmjCards",
    "../QzmjMgr/QzmjLogic": "QzmjLogic"
  } ],
  QzmjRoundsSettleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d5f5d3FSORJTbSa+rFcMZfg", "QzmjRoundsSettleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var GameCateCfg_1 = require("../../Plat/CfgMgrs/GameCateCfg");
    var BunchInfoMgr_1 = require("../../Plat/GameMgrs/BunchInfoMgr");
    var viewLogicSeatConvertMgr_1 = require("../../Plat/GameMgrs/viewLogicSeatConvertMgr");
    var RecordMgr_1 = require("../../Plat/GameMgrs/RecordMgr");
    var Green = new cc.Color(1, 146, 7), Red = new cc.Color(255, 36, 0), Yellow = new cc.Color(255, 222, 0);
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.gameResultData = null;
        _this.leap = 90;
        return _this;
      }
      Model.prototype.setgameResultData = function(data) {
        this.gameResultData = null == data ? RoomMgr_1.default.getInstance().getBunchInfo() : data;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_ztj: null,
          btn_mjjf: null,
          btn_share: null,
          btn_exit: null,
          node_content: null,
          node_yellowBattleResult: null,
          node_yellowLightBattleResult: null,
          btn_close: null,
          node_panel: null,
          lbl_score0s: [],
          lbl_score1s: [],
          lbl_score2s: [],
          lbl_score3s: [],
          lbl_roundindexes: [],
          lbl_times: [],
          totalScores: {},
          lbl_names: {},
          lbl_nameSigns: {},
          waterMarkForWins: {},
          waterMarkForLosts: {},
          node_waterMark: null,
          lbl_totalScores: []
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_content = ctrl.node_content;
        this.ui.node_yellowBattleResult = ctrl.node_yellowBattleResult;
        this.ui.node_yellowLightBattleResult = ctrl.node_yellowLightBattleResult;
        this.ui.node_panel = ctrl.node_panel;
        this.ui.node_waterMark = ctrl.node_waterMark;
      };
      View.prototype.initUIwithData = function() {
        var meiju = this.model.gameResultData.meiju;
        var prefabBarArr = [ this.ui.node_yellowBattleResult, this.ui.node_yellowLightBattleResult ];
        meiju.length > 3 && this.ui.node_content.setContentSize(this.ui.node_content.getContentSize().width, this.model.leap * meiju.length);
        this.model.itemData = [];
        for (var i = 0; i < meiju.length; i++) {
          var colorindex = i % 2;
          var itemData = meiju[i];
          var prefabBar = prefabBarArr[colorindex];
          var barItem = cc.instantiate(prefabBar);
          this.model.itemData.push(itemData[2]);
          barItem.active = true;
          barItem.setPosition(cc.v2(0, (i + 1) * -this.model.leap));
          this.ui.node_content.addChild(barItem);
          this.ui.lbl_roundindexes[i] = barItem.getChildByName("lbl_roundindex").getComponent(cc.Label);
          this.ui.lbl_times[i] = barItem.getChildByName("lbl_time").getComponent(cc.Label);
          this.ui.lbl_score0s[i] = barItem.getChildByName("lbl_score0").getComponent(cc.Label);
          this.ui.lbl_score1s[i] = barItem.getChildByName("lbl_score1").getComponent(cc.Label);
          this.ui.lbl_score2s[i] = barItem.getChildByName("lbl_score2").getComponent(cc.Label);
          this.ui.lbl_score3s[i] = barItem.getChildByName("lbl_score3").getComponent(cc.Label);
        }
        for (var logicseatid = 0; logicseatid < BunchInfoMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
          this.ui.totalScores[logicseatid] = this.ui.node_panel.getChildByName("lbl_totalScore" + logicseatid).getComponent(cc.Label);
          this.ui.lbl_names[logicseatid] = this.ui.node_panel.getChildByName("lbl_name" + logicseatid).getComponent(cc.Label);
          this.ui.lbl_nameSigns[logicseatid] = this.ui.node_panel.getChildByName("lbl_nameSign" + logicseatid).getComponent(cc.Label);
          this.ui.waterMarkForWins[logicseatid] = this.ui.node_waterMark.getChildByName("user" + logicseatid).getChildByName("zjs_seal_win");
          this.ui.waterMarkForLosts[logicseatid] = this.ui.node_waterMark.getChildByName("user" + logicseatid).getChildByName("zjs_seal_loser");
          this.ui.lbl_totalScores[logicseatid] = this.ui.node_panel.getChildByName("lbl_totalScore" + logicseatid).getComponent(cc.Label);
        }
      };
      View.prototype.showData = function() {
        this.initUIwithData();
        var meijuData = this.model.gameResultData.meiju;
        if (null != meijuData && void 0 != meijuData) {
          this.showDetailData(meijuData);
          this.showPlayerInfo();
        }
      };
      View.prototype.showDetailData = function(meijuData) {
        for (var i = 0; i < meijuData.length; ++i) {
          var itemData = meijuData[i];
          var myDate = new Date(itemData[0]);
          var curtime = myDate.getHours().toString() + ":" + myDate.getMinutes();
          this.ui.lbl_times[i].string = "(" + curtime + ")";
          this.ui.lbl_roundindexes[i].string = "第" + (i + 1) + "局";
          var lbl_scores = [ this.ui.lbl_score0s[i], this.ui.lbl_score1s[i], this.ui.lbl_score2s[i], this.ui.lbl_score3s[i] ];
          for (var logicseatid = 0; logicseatid < BunchInfoMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
            var dataItem = itemData[1][logicseatid.toString()];
            var hutime = dataItem[0];
            var score = dataItem[1];
            var yikescore = dataItem[2];
            var yikescorestr = "";
            var hutimestr = "";
            var scorestr = "";
            var lbl_score = lbl_scores[logicseatid];
            lbl_score.node.active = true;
            var prefix = "";
            score > 0 && (prefix = "+");
            if (1 == this.model.gameResultData.scoretype) {
              yikescorestr = "" + yikescore;
              scorestr = "(" + prefix + score + ")";
            } else scorestr = "" + prefix + score;
            null != hutime && (hutimestr = "(" + hutime + ")");
            var wholescore = "" + yikescorestr + scorestr + hutimestr;
            lbl_score.string = wholescore;
            lbl_score.node.color = score >= 0 ? Red : Green;
          }
        }
      };
      View.prototype.showPlayerInfo = function() {
        var leijiData = this.model.gameResultData.leiji;
        var viewCalled = [ "(我)", "(下家)", "(对家)", "(上家)" ];
        for (var logicseatid = 0; logicseatid < BunchInfoMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
          var viewSeatId = viewLogicSeatConvertMgr_1.default.getInstance().getViewSeatId(logicseatid);
          var users = BunchInfoMgr_1.default.getInstance().getMembelist();
          if (null == users) return;
          this.ui.lbl_nameSigns[logicseatid].string = viewCalled[viewSeatId];
          this.ui.lbl_nameSigns[logicseatid].node.active = true;
          this.ui.lbl_names[logicseatid].string = users[logicseatid].nickname;
          this.ui.lbl_names[logicseatid].node.active = true;
          if (1 == leijiData[logicseatid].title) {
            this.ui.waterMarkForWins[logicseatid].active = true;
            this.ui.waterMarkForLosts[logicseatid].active = false;
          } else if (2 == leijiData[logicseatid].title) {
            this.ui.waterMarkForWins[logicseatid].active = false;
            this.ui.waterMarkForLosts[logicseatid].active = true;
          }
          this.ui.lbl_totalScores[logicseatid].string = leijiData[logicseatid].zongshuying;
          this.ui.lbl_totalScores[logicseatid].node.active = true;
          leijiData[logicseatid].zongshuying >= 0 ? this.ui.lbl_totalScores[logicseatid].node.color = Red : this.ui.lbl_totalScores[logicseatid].node.color = Green;
        }
      };
      return View;
    }(BaseView_1.default);
    var QzmjRoundsSettleCtrl = function(_super) {
      __extends(QzmjRoundsSettleCtrl, _super);
      function QzmjRoundsSettleCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_content = null;
        _this.node_yellowBattleResult = null;
        _this.node_yellowLightBattleResult = null;
        _this.node_panel = null;
        _this.node_waterMark = null;
        return _this;
      }
      QzmjRoundsSettleCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        var resultData = BunchInfoMgr_1.default.getInstance().getBunchInfo();
        console.log(resultData);
        this.showView(resultData);
      };
      QzmjRoundsSettleCtrl.prototype.defineNetEvents = function() {};
      QzmjRoundsSettleCtrl.prototype.defineGlobalEvents = function() {};
      QzmjRoundsSettleCtrl.prototype.connectUi = function() {};
      QzmjRoundsSettleCtrl.prototype.start = function() {};
      QzmjRoundsSettleCtrl.prototype.bindUi = function() {
        var barList = this.ui.node_content.children;
        var self = this;
        var game = GameCateCfg_1.default.getInstance().getGameById(BunchInfoMgr_1.default.getInstance().getGameId());
        var _loop_1 = function(i) {
          barList[i].on(cc.Node.EventType.TOUCH_END, function(event) {
            RecordMgr_1.default.getInstance().reqMatchRecord(game, self.model.itemData[i]);
          }, this_1);
        };
        var this_1 = this;
        for (var i = 0; i < barList.length; i++) _loop_1(i);
      };
      QzmjRoundsSettleCtrl.prototype.showView = function(data) {
        this.model.setgameResultData(data);
        this.view.showData();
        BunchInfoMgr_1.default.getInstance().getplazzaFlag() && this.bindUi();
      };
      __decorate([ property({
        tooltip: "滚动视图",
        type: cc.Node
      }) ], QzmjRoundsSettleCtrl.prototype, "node_content", void 0);
      __decorate([ property({
        tooltip: "深色战绩记录",
        type: cc.Node
      }) ], QzmjRoundsSettleCtrl.prototype, "node_yellowBattleResult", void 0);
      __decorate([ property({
        tooltip: "浅色战绩记录",
        type: cc.Node
      }) ], QzmjRoundsSettleCtrl.prototype, "node_yellowLightBattleResult", void 0);
      __decorate([ property({
        tooltip: "panel",
        type: cc.Node
      }) ], QzmjRoundsSettleCtrl.prototype, "node_panel", void 0);
      __decorate([ property({
        tooltip: "waterMark",
        type: cc.Node
      }) ], QzmjRoundsSettleCtrl.prototype, "node_waterMark", void 0);
      QzmjRoundsSettleCtrl = __decorate([ ccclass ], QzmjRoundsSettleCtrl);
      return QzmjRoundsSettleCtrl;
    }(BaseCtrl_1.default);
    exports.default = QzmjRoundsSettleCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/CfgMgrs/GameCateCfg": "GameCateCfg",
    "../../Plat/GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../Plat/GameMgrs/RecordMgr": "RecordMgr",
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/GameMgrs/viewLogicSeatConvertMgr": "viewLogicSeatConvertMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView"
  } ],
  QzmjSettleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9fbf0uqUh5N+KjC4oDBrq5I", "QzmjSettleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var QzmjLogic_1 = require("../QzmjMgr/QzmjLogic");
    var Gfun_1 = require("../../../Plat/Libs/Gfun");
    var UserMgr_1 = require("../../../Plat/GameMgrs/UserMgr");
    var SwitchMgr_1 = require("../../../Plat/GameMgrs/SwitchMgr");
    var MahjongDef_1 = require("../../../GameCommon/Mahjong/MahjongDef");
    var MahjongResMgr_1 = require("../../../GameCommon/Mahjong/MahjongResMgr");
    var Green = new cc.Color(24, 221, 40), Red = new cc.Color(255, 0, 0), Yellow = new cc.Color(255, 222, 0), Blue = new cc.Color(4, 152, 177);
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.playerSettleInfos = null;
        _this.win_seatid = 0;
        _this.seatcount = 0;
        _this.b_drawGame = false;
        _this.sharingSwitch = null;
        _this.bViewAgain = false;
        _this.curcard = null;
        _this.opcardarr = null;
        _this.handcards = null;
        _this.initData();
        _this.sharingSwitch = SwitchMgr_1.default.getInstance().get_switch_settlement_sharing();
        return _this;
      }
      Model.prototype.initData = function() {
        var qzmjLogicInstance = QzmjLogic_1.default.getInstance();
        if (null != qzmjLogicInstance) {
          this.win_seatid = qzmjLogicInstance.win_seatid;
          null == this.win_seatid && (this.b_drawGame = true);
          this.playerSettleInfos = qzmjLogicInstance.roundSettle.wanjiashuis;
          console.log("玩家信息：", this.playerSettleInfos);
          this.seatcount = qzmjLogicInstance.seatcount;
          this.curcard = qzmjLogicInstance.curcard;
          this.opcardarr = qzmjLogicInstance.roundSettle.opcards;
          this.handcards = Gfun_1.g_deepClone(qzmjLogicInstance.roundSettle.handcards);
        }
      };
      Model.prototype.setAsViewAgain = function() {
        this.bViewAgain = true;
      };
      Model.prototype.updateSwitch = function(msg) {
        this.sharingSwitch = msg.cfg.switch_settlement_sharing;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_drawgame: ctrl.node_drawgame,
          img_liuju: null,
          btn_share: null,
          btn_again: null,
          node_userList: null,
          clippingNode: null,
          lbl_js: null,
          lbl_hide: null,
          settletip: null,
          nodePlayer1Cards: null,
          nodePlayer2Cards: null,
          nodePlayer3Cards: null,
          nodePlayer4Cards: null,
          nodePlayer1head: null,
          nodePlayer2head: null,
          nodePlayer3head: null,
          nodePlayer4head: null,
          imgBanker: null,
          fanInfos: [],
          difans: [],
          playerNames: [],
          totalpanvalues: [],
          txtScores: [],
          lbl_winTimes: null,
          sprite_huType: null,
          node_bg: null,
          node_hutype: null,
          button_close: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.nodePlayer1Cards = ctrl.nodePlayer1Cards;
        this.ui.nodePlayer2Cards = ctrl.nodePlayer2Cards;
        this.ui.nodePlayer3Cards = ctrl.nodePlayer3Cards;
        this.ui.nodePlayer4Cards = ctrl.nodePlayer4Cards;
        this.ui.nodePlayer1head = ctrl.nodePlayer1head;
        this.ui.nodePlayer2head = ctrl.nodePlayer2head;
        this.ui.nodePlayer3head = ctrl.nodePlayer3head;
        this.ui.nodePlayer4head = ctrl.nodePlayer4head;
        this.ui.lbl_winTimes = ctrl.lbl_winTimes;
        this.ui.sprite_huType = ctrl.sprite_huType;
        this.ui.node_hutype = ctrl.node_hutype;
        this.ui.node_bg = ctrl.node_bg;
        this.ui.btn_share = ctrl.btn_share;
        this.ui.btn_again = ctrl.btn_again;
        this.ui.button_close = ctrl.button_close;
        if (QzmjLogic_1.default.getInstance().bViewMode) {
          this.ui.button_close.active = true;
          this.ui.btn_again.active = false;
        }
        this.ui.node_userList = [];
        this.ui.node_userList.push(ctrl.nodePlayer1Cards);
        this.ui.node_userList.push(ctrl.nodePlayer2Cards);
        this.ui.node_userList.push(ctrl.nodePlayer3Cards);
        this.ui.node_userList.push(ctrl.nodePlayer4Cards);
        this.ui.totalpanvalues.push(ctrl.nodePlayer1Cards.getChildByName("totalpan_value").getComponent(cc.Label));
        this.ui.totalpanvalues.push(ctrl.nodePlayer2Cards.getChildByName("totalpan_value").getComponent(cc.Label));
        this.ui.totalpanvalues.push(ctrl.nodePlayer3Cards.getChildByName("totalpan_value").getComponent(cc.Label));
        this.ui.totalpanvalues.push(ctrl.nodePlayer4Cards.getChildByName("totalpan_value").getComponent(cc.Label));
        this.ui.txtScores.push(ctrl.nodePlayer1Cards.getChildByName("txt_score").getComponent(cc.Label));
        this.ui.txtScores.push(ctrl.nodePlayer2Cards.getChildByName("txt_score").getComponent(cc.Label));
        this.ui.txtScores.push(ctrl.nodePlayer3Cards.getChildByName("txt_score").getComponent(cc.Label));
        this.ui.txtScores.push(ctrl.nodePlayer4Cards.getChildByName("txt_score").getComponent(cc.Label));
        this.ui.fanInfos.push(ctrl.nodePlayer1Cards.getChildByName("fanInfo").getComponent(cc.Label));
        this.ui.fanInfos.push(ctrl.nodePlayer2Cards.getChildByName("fanInfo").getComponent(cc.Label));
        this.ui.fanInfos.push(ctrl.nodePlayer3Cards.getChildByName("fanInfo").getComponent(cc.Label));
        this.ui.fanInfos.push(ctrl.nodePlayer4Cards.getChildByName("fanInfo").getComponent(cc.Label));
        this.ui.difans.push(ctrl.nodePlayer1head.getChildByName("difan").getComponent(cc.Label));
        this.ui.difans.push(ctrl.nodePlayer2head.getChildByName("difan").getComponent(cc.Label));
        this.ui.difans.push(ctrl.nodePlayer3head.getChildByName("difan").getComponent(cc.Label));
        this.ui.difans.push(ctrl.nodePlayer4head.getChildByName("difan").getComponent(cc.Label));
        this.ui.playerNames.push(ctrl.nodePlayer1head.getChildByName("txt_name").getComponent(cc.Label));
        this.ui.playerNames.push(ctrl.nodePlayer2head.getChildByName("txt_name").getComponent(cc.Label));
        this.ui.playerNames.push(ctrl.nodePlayer3head.getChildByName("txt_name").getComponent(cc.Label));
        this.ui.playerNames.push(ctrl.nodePlayer4head.getChildByName("txt_name").getComponent(cc.Label));
        this.ui.imgBanker = ctrl.imgBanker;
        this.ui.lbl_hide = ctrl.lbl_hide;
        this.ui.lbl_hide.node.active = false;
        this.ui.clippingNode = this.node.getChildByName("backgroudClickNode");
        this.ui.settletip = this.node.getChildByName("settletip");
        this.ui.clippingNode.active = !RoomMgr_1.default.getInstance().getVideoMode();
        this.ui.settletip.active = false;
        this.ui.node_drawgame.active = this.model.b_drawGame;
        this.ui.img_liuju = this.ui.node_drawgame.getChildByName("img_liuju").getComponent(cc.Animation);
        if (this.model.b_drawGame) {
          this.ui.img_liuju.play();
          ctrl.nodePlayer1Cards.active = false;
          ctrl.nodePlayer2Cards.active = false;
          ctrl.nodePlayer3Cards.active = false;
          ctrl.nodePlayer4Cards.active = false;
          ctrl.nodePlayer1head.active = false;
          ctrl.nodePlayer2head.active = false;
          ctrl.nodePlayer3head.active = false;
          ctrl.nodePlayer4head.active = false;
          ctrl.node_bg.active = false;
          ctrl.imgBanker.node.active = false;
          ctrl.node_hutype.active = false;
          return;
        }
        this.showUserInfo();
        this.showShareBtn();
      };
      View.prototype.updateTipLabel = function() {};
      View.prototype.showUserInfo = function() {
        for (var logicseatid in this.model.playerSettleInfos) {
          var uid = RoomMgr_1.default.getInstance().getUidBySeatId(logicseatid);
          var info = UserMgr_1.default.getInstance().getUserById(uid);
          info || (info = {
            id: uid,
            headid: 1,
            nickname: ""
          });
          this.ui.playerNames[logicseatid].string = info.nickname;
          this.showfan(logicseatid);
          this.showHandCards(logicseatid);
          this.showTotalloseWin(parseInt(logicseatid));
        }
      };
      View.prototype.showfan = function(logicseatid) {
        var playerSettleInfo = this.model.playerSettleInfos[logicseatid.toString()];
        var shui = "";
        if (playerSettleInfo.zhuangflag) {
          var userNode_1 = this.ui.node_userList[logicseatid];
          cc.loader.loadRes("GameCommon/Mahjong/Textures/settle/greenRect", cc.SpriteFrame, function(err, spriteFrame) {
            if (err) {
              cc.error(err.message || err);
              return;
            }
            userNode_1.getComponent(cc.Sprite).spriteFrame = spriteFrame;
          });
          var zhuangPos = this.ui.imgBanker.node.getPosition();
          this.ui.imgBanker.node.setPositionY(zhuangPos.y - 130 * logicseatid);
          1 == playerSettleInfo.winflag && playerSettleInfo.lianzhuang > 0 && (shui = "连庄" + Math.pow(2, playerSettleInfo.lianzhuang) + " ");
        }
        for (var fanIdx = 0; fanIdx < playerSettleInfo.xijieshui.length; fanIdx++) {
          this.ui.fanInfos[logicseatid].node.active = true;
          shui = shui + MahjongDef_1.MahjongDef.gangkenames[playerSettleInfo.xijieshui[fanIdx][0]] + "" + playerSettleInfo.xijieshui[fanIdx][2] + " ";
        }
        this.ui.fanInfos[logicseatid].node.active = true;
        this.ui.fanInfos[logicseatid].string = shui.substring(0, shui.length - 1);
        this.ui.fanInfos[logicseatid].string || (this.ui.fanInfos[logicseatid].string = "无");
        this.ui.difans[logicseatid].node.active = true;
        this.ui.difans[logicseatid].string = playerSettleInfo.difan + "底";
      };
      View.prototype.showTotalloseWin = function(logicseatid) {
        var playerSettleInfo = this.model.playerSettleInfos[logicseatid.toString()];
        var score = 0;
        this.ui.txtScores[logicseatid].node.active = true;
        this.ui.totalpanvalues[logicseatid].node.active = true;
        this.ui.totalpanvalues[logicseatid].node.parent.getChildByName("txt_totalpan").active = true;
        if (playerSettleInfo.shuyingfenshu > 0) {
          score = "+" + playerSettleInfo.shuyingfenshu;
          this.ui.txtScores[logicseatid].node.color = Red;
        } else {
          score = playerSettleInfo.shuyingfenshu;
          this.ui.txtScores[logicseatid].node.color = Blue;
        }
        this.ui.txtScores[logicseatid].string = score;
        this.ui.totalpanvalues[logicseatid].string = playerSettleInfo.zongshui;
        if (1 == playerSettleInfo.winflag) {
          this.ui.lbl_winTimes.string = "/" + playerSettleInfo.yingbeishu;
          var self_1 = this;
          cc.loader.loadRes("GameCommon/Mahjong/Textures/settle/hu" + playerSettleInfo.hutime, cc.SpriteFrame, function(err, spriteFrame) {
            if (err) {
              cc.error(err.message || err);
              return;
            }
            self_1.ui.sprite_huType.spriteFrame = spriteFrame;
          });
        }
      };
      View.prototype.showShareBtn = function() {
        this.ui.btn_share.active = 1 == this.model.sharingSwitch;
      };
      View.prototype.showHandCards = function(playeridx) {
        var playerSettleInfo = this.model.playerSettleInfos[playeridx.toString()];
        var nodeleap = 10;
        var nodeNum = 1;
        var cardList = null;
        cardList = this.ui.node_userList[playeridx].getChildByName("cardList");
        for (var j = 0; j < this.model.opcardarr[playeridx].length; j++) switch (this.model.opcardarr[playeridx][j]["op"]) {
         case MahjongDef_1.MahjongDef.op_angang:
          for (var k = 1; k <= 4; k++) {
            var cardNode = cardList.getChildByName("node" + nodeNum).getChildByName("card" + k);
            cardList.getChildByName("node" + nodeNum).getChildByName("angangNode").active = true;
            cardNode.active = true;
            var spriteFrame = MahjongResMgr_1.default.getInstance().getCardSpriteFrame(this.model.opcardarr[playeridx][j]["value"]);
            cardNode.getChildByName("sprite").getComponent(cc.Sprite).spriteFrame = spriteFrame;
          }
          nodeNum++;
          break;

         case MahjongDef_1.MahjongDef.op_gang:
          for (var k = 1; k <= 4; k++) {
            var cardNode = cardList.getChildByName("node" + nodeNum).getChildByName("card" + k);
            cardNode.active = true;
            var spriteFrame = MahjongResMgr_1.default.getInstance().getCardSpriteFrame(this.model.opcardarr[playeridx][j]["value"]);
            cardNode.getChildByName("sprite").getComponent(cc.Sprite).spriteFrame = spriteFrame;
          }
          nodeNum++;
          break;

         case MahjongDef_1.MahjongDef.op_peng:
          for (var k = 1; k <= 3; k++) {
            var cardNode = cardList.getChildByName("node" + nodeNum).getChildByName("card" + k);
            cardNode.active = true;
            var spriteFrame = MahjongResMgr_1.default.getInstance().getCardSpriteFrame(this.model.opcardarr[playeridx][j]["value"]);
            cardNode.getChildByName("sprite").getComponent(cc.Sprite).spriteFrame = spriteFrame;
          }
          nodeNum++;
          break;

         case MahjongDef_1.MahjongDef.op_chi:
          for (var k = 1; k <= 3; k++) {
            var cardNode = cardList.getChildByName("node" + nodeNum).getChildByName("card" + k);
            cardNode.active = true;
            var spriteFrame = MahjongResMgr_1.default.getInstance().getCardSpriteFrame(this.model.opcardarr[playeridx][j]["value"][k - 1]);
            cardNode.getChildByName("sprite").getComponent(cc.Sprite).spriteFrame = spriteFrame;
          }
          nodeNum++;
        }
        null != this.model.curcard && playerSettleInfo.winflag && this.model.handcards[playeridx].removeByValue(this.model.curcard);
        var k = 1;
        var HandCardLoop = 0;
        for (var j = 0; j < this.model.handcards[playeridx].length; j++) {
          if (0 != j && j % 3 == 0) {
            nodeNum++;
            HandCardLoop++;
            k = 1;
            var node = cardList.getChildByName("node" + nodeNum);
            node.setPosition(cc.v2(node.getPosition().x - nodeleap * HandCardLoop, node.getPosition().y));
          }
          6 == nodeNum && 2 == k && (cardList.getChildByName("node" + nodeNum).getChildByName("hucardFrame").active = true);
          var cardNode = cardList.getChildByName("node" + nodeNum).getChildByName("card" + k);
          cardNode.active = true;
          var spriteFrame = MahjongResMgr_1.default.getInstance().getCardSpriteFrame(this.model.handcards[playeridx][j]);
          cardNode.getChildByName("sprite").getComponent(cc.Sprite).spriteFrame = spriteFrame;
          k++;
        }
        if (null != this.model.curcard && playerSettleInfo.winflag) {
          var cardNode = cardList.getChildByName("node" + nodeNum).getChildByName("card2");
          cardNode.active = true;
          cardList.getChildByName("node" + nodeNum).getChildByName("hucardFrame").active = true;
          var spriteFrame = MahjongResMgr_1.default.getInstance().getCardSpriteFrame(this.model.curcard);
          cardNode.getChildByName("sprite").getComponent(cc.Sprite).spriteFrame = spriteFrame;
        }
      };
      return View;
    }(BaseView_1.default);
    var QzmjSettleCtrl = function(_super) {
      __extends(QzmjSettleCtrl, _super);
      function QzmjSettleCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_drawgame = null;
        _this.btn_share = null;
        _this.btn_again = null;
        _this.lbl_js = null;
        _this.lbl_hide = null;
        _this.nodePlayer1Cards = null;
        _this.nodePlayer2Cards = null;
        _this.nodePlayer3Cards = null;
        _this.nodePlayer4Cards = null;
        _this.nodePlayer1head = null;
        _this.nodePlayer2head = null;
        _this.nodePlayer3head = null;
        _this.nodePlayer4head = null;
        _this.imgBanker = null;
        _this.sprite_huType = null;
        _this.lbl_winTimes = null;
        _this.node_bg = null;
        _this.node_hutype = null;
        _this.button_close = null;
        return _this;
      }
      QzmjSettleCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      QzmjSettleCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onProcess: this.onProcess,
          onSyncData: this.onSyncData
        };
      };
      QzmjSettleCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          usersUpdated: this.usersUpdated,
          "http.reqGameSwitch": this.http_reqGameSwitch
        };
      };
      QzmjSettleCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.btn_share, this.btn_share_cb, "微信分享");
        this.connect(G_UiType.image, this.btn_again, this.btn_again_cb, "再来一局");
        this.connect(G_UiType.image, this.ui.clippingNode, this.btn_again_cb, "再来一局");
        this.connect(G_UiType.button, this.ui.button_close, this.finish, "关闭泉州麻将每局结算");
      };
      QzmjSettleCtrl.prototype.onSyncData = function() {
        this.finish();
      };
      QzmjSettleCtrl.prototype.start = function() {};
      QzmjSettleCtrl.prototype.usersUpdated = function() {
        this.finish();
      };
      QzmjSettleCtrl.prototype.setAsViewAgain = function() {
        this.model.setAsViewAgain();
        this.view.updateTipLabel();
      };
      QzmjSettleCtrl.prototype.http_reqGameSwitch = function(msg) {
        this.model.updateSwitch(msg);
        this.view.showShareBtn();
      };
      QzmjSettleCtrl.prototype.onProcess = function(msg) {
        msg.process == MahjongDef_1.MahjongDef.process_ready && this.process_ready();
      };
      QzmjSettleCtrl.prototype.process_ready = function() {
        this.finish();
      };
      QzmjSettleCtrl.prototype.btn_share_cb = function() {
        console.log("btn_share_cb");
        this.start_sub_module(G_MODULE.Shared);
      };
      QzmjSettleCtrl.prototype.btn_again_cb = function() {
        if (this.model.bViewAgain) this.finish(); else if (RoomMgr_1.default.getInstance().isBunchFinish()) {
          RoomMgr_1.default.getInstance().showFinalSettle();
          this.finish();
        } else RoomMgr_1.default.getInstance().nextRound();
      };
      __decorate([ property({
        tooltip: "流局",
        type: cc.Node
      }) ], QzmjSettleCtrl.prototype, "node_drawgame", void 0);
      __decorate([ property({
        tooltip: "微信分享",
        type: cc.Node
      }) ], QzmjSettleCtrl.prototype, "btn_share", void 0);
      __decorate([ property({
        tooltip: "再来一局",
        type: cc.Node
      }) ], QzmjSettleCtrl.prototype, "btn_again", void 0);
      __decorate([ property({
        tooltip: "结算提示",
        type: cc.Label
      }) ], QzmjSettleCtrl.prototype, "lbl_js", void 0);
      __decorate([ property({
        tooltip: "隐藏结算",
        type: cc.Label
      }) ], QzmjSettleCtrl.prototype, "lbl_hide", void 0);
      __decorate([ property({
        tooltip: "玩家牌数据1",
        type: cc.Node
      }) ], QzmjSettleCtrl.prototype, "nodePlayer1Cards", void 0);
      __decorate([ property({
        tooltip: "玩家牌数据2",
        type: cc.Node
      }) ], QzmjSettleCtrl.prototype, "nodePlayer2Cards", void 0);
      __decorate([ property({
        tooltip: "玩家牌数据3",
        type: cc.Node
      }) ], QzmjSettleCtrl.prototype, "nodePlayer3Cards", void 0);
      __decorate([ property({
        tooltip: "玩家牌数据4",
        type: cc.Node
      }) ], QzmjSettleCtrl.prototype, "nodePlayer4Cards", void 0);
      __decorate([ property({
        tooltip: "玩家头像1",
        type: cc.Node
      }) ], QzmjSettleCtrl.prototype, "nodePlayer1head", void 0);
      __decorate([ property({
        tooltip: "玩家头像2",
        type: cc.Node
      }) ], QzmjSettleCtrl.prototype, "nodePlayer2head", void 0);
      __decorate([ property({
        tooltip: "玩家头像3",
        type: cc.Node
      }) ], QzmjSettleCtrl.prototype, "nodePlayer3head", void 0);
      __decorate([ property({
        tooltip: "玩家头像4",
        type: cc.Node
      }) ], QzmjSettleCtrl.prototype, "nodePlayer4head", void 0);
      __decorate([ property({
        tooltip: "庄家图片",
        type: cc.Sprite
      }) ], QzmjSettleCtrl.prototype, "imgBanker", void 0);
      __decorate([ property({
        tooltip: "胡牌类型",
        type: cc.Sprite
      }) ], QzmjSettleCtrl.prototype, "sprite_huType", void 0);
      __decorate([ property({
        tooltip: "胡牌倍数",
        type: cc.Label
      }) ], QzmjSettleCtrl.prototype, "lbl_winTimes", void 0);
      __decorate([ property({
        tooltip: "背景",
        type: cc.Node
      }) ], QzmjSettleCtrl.prototype, "node_bg", void 0);
      __decorate([ property({
        tooltip: "胡节点",
        type: cc.Node
      }) ], QzmjSettleCtrl.prototype, "node_hutype", void 0);
      __decorate([ property({
        tooltip: "关闭按钮",
        type: cc.Node
      }) ], QzmjSettleCtrl.prototype, "button_close", void 0);
      QzmjSettleCtrl = __decorate([ ccclass ], QzmjSettleCtrl);
      return QzmjSettleCtrl;
    }(BaseCtrl_1.default);
    exports.default = QzmjSettleCtrl;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Mahjong/MahjongDef": "MahjongDef",
    "../../../GameCommon/Mahjong/MahjongResMgr": "MahjongResMgr",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/GameMgrs/SwitchMgr": "SwitchMgr",
    "../../../Plat/GameMgrs/UserMgr": "UserMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../../../Plat/Libs/Gfun": "Gfun",
    "../QzmjMgr/QzmjLogic": "QzmjLogic"
  } ],
  QzmjStatisticsSettleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "90523dQs61FupVkzmwtVFq6", "QzmjStatisticsSettleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var BunchInfoMgr_1 = require("../../Plat/GameMgrs/BunchInfoMgr");
    var viewLogicSeatConvertMgr_1 = require("../../Plat/GameMgrs/viewLogicSeatConvertMgr");
    var UiMgr_1 = require("../../Plat/GameMgrs/UiMgr");
    var Green = new cc.Color(1, 146, 7), Red = new cc.Color(255, 36, 0), Yellow = new cc.Color(255, 222, 0);
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.gameResultData = null;
        _this.hutypenodeLeap = 0;
        _this.hutypenodeLeap = ctrl.Int_hutypeLeap;
        return _this;
      }
      Model.prototype.setgameResultData = function(data) {
        this.gameResultData = null == data ? RoomMgr_1.default.getInstance().getBunchInfo() : data;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_panel: null,
          lbl_chihus: {},
          lbl_zimos: {},
          lbl_youjins: {},
          lbl_shuangyous: {},
          lbl_sanyous: {},
          lbl_scores: {},
          lbl_names: {},
          img_heads: [],
          lbl_IDs: {},
          waterMarkForWins: {},
          waterMarkForLosts: {},
          node_waterMark: null,
          sprite_fz: {},
          node_hutypeList: [],
          img_wu: []
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_panel = ctrl.node_panel;
        this.ui.node_waterMark = ctrl.node_waterMark;
        this.ui.node_hutypeList.push(ctrl.node_hutype0);
        ctrl.node_hutype0.active = false;
        this.ui.node_hutypeList.push(ctrl.node_hutype1);
        ctrl.node_hutype1.active = false;
        this.ui.node_hutypeList.push(ctrl.node_hutype2);
        ctrl.node_hutype2.active = false;
        this.ui.node_hutypeList.push(ctrl.node_hutype3);
        ctrl.node_hutype3.active = false;
        for (var logicseatid = 0; logicseatid < BunchInfoMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
          var playerNode = this.ui.node_panel.getChildByName("player" + logicseatid);
          playerNode.active = true;
          playerNode.getChildByName("playerInfo").active = true;
          this.ui.lbl_scores[logicseatid] = playerNode.getChildByName("txt_score").getComponent(cc.Label);
          this.ui.lbl_names[logicseatid] = playerNode.getChildByName("playerInfo").getChildByName("lbl_name").getComponent(cc.Label);
          this.ui.img_heads[logicseatid] = playerNode.getChildByName("playerInfo").getChildByName("img_rwtx").getComponent(cc.Sprite);
          this.ui.lbl_names[logicseatid].node.active = false;
          this.ui.lbl_IDs[logicseatid] = playerNode.getChildByName("playerInfo").getChildByName("lbl_ID").getComponent(cc.Label);
          this.ui.waterMarkForWins[logicseatid] = this.ui.node_waterMark.getChildByName("user" + logicseatid).getChildByName("zjs_seal_win");
          this.ui.waterMarkForLosts[logicseatid] = this.ui.node_waterMark.getChildByName("user" + logicseatid).getChildByName("zjs_seal_loser");
          this.ui.sprite_fz[logicseatid] = playerNode.getChildByName("playerInfo").getChildByName("fz").getComponent(cc.Sprite);
          this.ui.sprite_fz[logicseatid].node.active = false;
          this.ui.img_wu[logicseatid] = playerNode.getChildByName("img_wu");
          this.ui.img_wu[logicseatid].active = false;
        }
      };
      View.prototype.showPlayerInfo = function() {
        var leijiData = this.model.gameResultData.leiji;
        if (null == leijiData || void 0 == leijiData) return;
        for (var logicseatid = 0; logicseatid < BunchInfoMgr_1.default.getInstance().getSeatCount(); ++logicseatid) {
          var users = BunchInfoMgr_1.default.getInstance().getMembelist();
          if (null == users) return;
          var viewSeatId = viewLogicSeatConvertMgr_1.default.getInstance().getViewSeatId(logicseatid);
          this.ui.lbl_names[logicseatid].node.active = true;
          this.ui.lbl_names[logicseatid].string = users[logicseatid].nickname;
          parseInt(this.model.gameResultData.roomOwner) == parseInt(users[logicseatid].id) && (this.ui.sprite_fz[logicseatid].node.active = true);
          this.ui.lbl_IDs[logicseatid].string = "ID:" + users[logicseatid].logicid;
          users[logicseatid].headid, users[logicseatid].headurl ? UiMgr_1.default.getInstance().setUserHead(this.ui.img_heads[logicseatid], users[logicseatid].headid, users[logicseatid].headurl) : UiMgr_1.default.getInstance().setUserHead(this.ui.img_heads[logicseatid], users[logicseatid].id, users[logicseatid].url);
          var leijiItem = this.model.gameResultData.leiji[logicseatid];
          var leijiItemList = [];
          leijiItemList.push([ "吃胡", leijiItem.chihu ]);
          leijiItemList.push([ "自摸", leijiItem.zimo ]);
          leijiItemList.push([ "游金", leijiItem.youjin ]);
          leijiItemList.push([ "双游", leijiItem.shuangyou ]);
          leijiItemList.push([ "三游", leijiItem.sanyou ]);
          var hutypenode = this.ui.node_hutypeList[logicseatid];
          var nodeCount = 0;
          for (var i = 0; i < leijiItemList.length; i++) {
            var leijiItemCube = leijiItemList[i];
            if (leijiItemCube[1] > 0) {
              var node = cc.instantiate(hutypenode);
              node.active = true;
              var nodePos = node.getPosition();
              hutypenode.parent.addChild(node);
              node.getChildByName("lbl_hu").getComponent(cc.Label).string = leijiItemCube[0];
              node.getChildByName("hu_Num").getComponent(cc.Label).string = leijiItemCube[1];
              node.getChildByName("hu_Num").color = Red;
              node.setPosition(nodePos.x, nodePos.y - this.model.hutypenodeLeap * nodeCount);
              nodeCount++;
            }
          }
          if (1 == leijiData[logicseatid].title) {
            this.ui.waterMarkForWins[logicseatid].active = true;
            this.ui.waterMarkForLosts[logicseatid].active = false;
          } else if (2 == leijiData[logicseatid].title) {
            this.ui.waterMarkForWins[logicseatid].active = false;
            this.ui.waterMarkForLosts[logicseatid].active = true;
          }
          this.ui.lbl_scores[logicseatid].string = leijiData[logicseatid].zongshuying;
          leijiData[logicseatid].zongshuying >= 0 ? this.ui.lbl_scores[logicseatid].node.color = Red : this.ui.lbl_scores[logicseatid].node.color = Green;
        }
      };
      return View;
    }(BaseView_1.default);
    var QzmjStatisticsSettleCtrl = function(_super) {
      __extends(QzmjStatisticsSettleCtrl, _super);
      function QzmjStatisticsSettleCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_panel = null;
        _this.node_waterMark = null;
        _this.node_hutype0 = null;
        _this.node_hutype1 = null;
        _this.node_hutype2 = null;
        _this.node_hutype3 = null;
        _this.Int_hutypeLeap = 0;
        return _this;
      }
      QzmjStatisticsSettleCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        var resultData = BunchInfoMgr_1.default.getInstance().getBunchInfo();
        console.log("getBunchInfo", resultData);
        this.showView(resultData);
      };
      QzmjStatisticsSettleCtrl.prototype.defineNetEvents = function() {};
      QzmjStatisticsSettleCtrl.prototype.defineGlobalEvents = function() {};
      QzmjStatisticsSettleCtrl.prototype.connectUi = function() {};
      QzmjStatisticsSettleCtrl.prototype.start = function() {};
      QzmjStatisticsSettleCtrl.prototype.showView = function(data) {
        this.model.setgameResultData(data);
        this.view.showPlayerInfo();
      };
      __decorate([ property({
        tooltip: "panel",
        type: cc.Node
      }) ], QzmjStatisticsSettleCtrl.prototype, "node_panel", void 0);
      __decorate([ property({
        tooltip: "waterMark",
        type: cc.Node
      }) ], QzmjStatisticsSettleCtrl.prototype, "node_waterMark", void 0);
      __decorate([ property({
        tooltip: "hutype",
        type: cc.Node
      }) ], QzmjStatisticsSettleCtrl.prototype, "node_hutype0", void 0);
      __decorate([ property({
        tooltip: "hutype",
        type: cc.Node
      }) ], QzmjStatisticsSettleCtrl.prototype, "node_hutype1", void 0);
      __decorate([ property({
        tooltip: "hutype",
        type: cc.Node
      }) ], QzmjStatisticsSettleCtrl.prototype, "node_hutype2", void 0);
      __decorate([ property({
        tooltip: "hutype",
        type: cc.Node
      }) ], QzmjStatisticsSettleCtrl.prototype, "node_hutype3", void 0);
      __decorate([ property({
        tooltip: "hutype",
        type: cc.Integer
      }) ], QzmjStatisticsSettleCtrl.prototype, "Int_hutypeLeap", void 0);
      QzmjStatisticsSettleCtrl = __decorate([ ccclass ], QzmjStatisticsSettleCtrl);
      return QzmjStatisticsSettleCtrl;
    }(BaseCtrl_1.default);
    exports.default = QzmjStatisticsSettleCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/GameMgrs/UiMgr": "UiMgr",
    "../../Plat/GameMgrs/viewLogicSeatConvertMgr": "viewLogicSeatConvertMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView"
  } ],
  QznnConst: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9d5b9TPXo1P3ZjKr+rh45I0", "QznnConst");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = {
      gameType: {
        normal: 1,
        grabDealer: 2
      },
      clientEvent: {
        onInitRoom_qznn: "onInitRoom_qznn",
        onStart: "onStart_qznn",
        onPeopleGrab: "onPeopleGrab_qznn",
        onConfirmDealer: "onConfirmDealer_qznn",
        onPeopleChooseChip: "onPeopleChooseChip_qznn",
        onGiveCards: "onGiveCards_qznn",
        onProcess: "onProcess_qznn",
        onSettle: "onSettle_qznn",
        onTanPai: "onTanPai_qznn"
      },
      process: {
        start: 1,
        grabDealer: 2,
        chooseChip: 3,
        giveCards: 4,
        settle: 5
      },
      oprEvent: {
        oprTanPai: 1,
        oprPrepare: 2,
        oprGrabDealer: 3,
        oprChooseChip: 4
      },
      config: {
        bigCardOffWRate: .4,
        minCardOffWRate: .4,
        maxGroupCardsNum: 5,
        cardIntervalTime: .1,
        cardMoveTime: .25
      }
    };
    cc._RF.pop();
  }, {} ],
  QznnEntry: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1ec4cI7HNFBUYgUSVHPr+sL", "QznnEntry");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ModuleMgr_1 = require("../../Plat/GameMgrs/ModuleMgr");
    var modules = {
      BullRoom: "QznnRoom",
      Bull_calculate: "SubLayer/Plat/GameRoomCommon/Bull_calculateCtrl",
      Bull_settle: "SubLayer/Games/Bull/Prefab_bull_settleCtrl",
      qznn_chooseGrab: "SubLayer/Games/Qznn/Prefab_bull_chooseGrabCtrl",
      qznn_chooseChip: "SubLayer/Games/Qznn/Prefab_bull_chooseChipCtrl",
      qznn_grabFlag: "SubLayer/Games/Qznn/Prefab_qznn_grabFlag",
      qznn_dealerWord: "SubLayer/Games/Qznn/Bull_dealerWord",
      qznn_dealerSelected: "SubLayer/Games/Qznn/Bull_dealerSelected",
      Bull_totalSettle: "SubLayer/Games/Qznn/Qznn_totalSettle",
      Bull_cuopai: "SubLayer/Plat/GameRoomCommon/Bull_cuopai",
      Bull_goldFalsh: "Plat/GameRoomCommom/Bull_ani_coinFlash/"
    };
    var QznnEntry = function() {
      function QznnEntry() {}
      QznnEntry.getInstance = function() {
        this._instance || (this._instance = new QznnEntry());
        return this._instance;
      };
      QznnEntry.prototype.registerModules = function() {
        ModuleMgr_1.default.getInstance().registerGame(modules);
      };
      return QznnEntry;
    }();
    exports.default = QznnEntry;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/ModuleMgr": "ModuleMgr"
  } ],
  QznnLogic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "126e4VL4iBIebvuAq5eOjoG", "QznnLogic");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../../../Plat/Libs/BaseMgr");
    var QznnPlayer_1 = require("./QznnPlayer");
    var QznnConst_1 = require("./QznnConst");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var GEventDef_1 = require("../../../Plat/GameMgrs/GEventDef");
    var LoginMgr_1 = require("../../../Plat/GameMgrs/LoginMgr");
    var QznnLogic = function(_super) {
      __extends(QznnLogic, _super);
      function QznnLogic() {
        var _this = _super.call(this) || this;
        _this.seatcount = null;
        _this.players = null;
        _this.curDealerLogicSeatId = null;
        _this.cur_chipList = null;
        _this.cur_waitTime = null;
        _this.cur_waitTime = 0;
        _this.curWinId = -1;
        _this.players = {};
        _this.seatcount = RoomMgr_1.default.getInstance().getSeatCount();
        for (var i = 0; i < _this.seatcount; i++) {
          _this.players[i] = new QznnPlayer_1.default();
          _this.players[i].init(i, _this);
        }
        _this.routes = {
          onSyncData: _this.onSyncData
        };
        _this.routes[QznnConst_1.default.clientEvent.onInitRoom_qznn] = _this.onInitRoom_qznn;
        _this.routes[QznnConst_1.default.clientEvent.onConfirmDealer] = _this.onConfirmDealer;
        _this.routes[QznnConst_1.default.clientEvent.onProcess] = _this.onProcess;
        _this.routes[QznnConst_1.default.clientEvent.onSettle] = _this.onSettle_bull;
        _this.routes["onPrepare"] = _this.onPrepare;
        return _this;
      }
      QznnLogic.prototype.clearData = function() {
        this.curDealerLogicSeatId = null;
        this.cur_waitTime = 0;
      };
      QznnLogic.prototype.clear = function() {
        delete QznnLogic._instance;
        QznnLogic._instance = null;
      };
      QznnLogic.prototype.reqGrab = function(isGrab) {
        var grabIndex = isGrab ? 1 : 0;
        this.send_msg("room.roomHandler.playerOp", {
          oprType: QznnConst_1.default.oprEvent.oprGrabDealer,
          isGrab: grabIndex
        });
      };
      QznnLogic.prototype.reqTanpai = function() {
        this.send_msg("room.roomHandler.playerOp", {
          oprType: QznnConst_1.default.oprEvent.oprTanPai
        });
      };
      QznnLogic.prototype.reqChooseChip = function(value) {
        this.send_msg("room.roomHandler.playerOp", {
          oprType: QznnConst_1.default.oprEvent.oprChooseChip,
          chipValue: value
        });
      };
      QznnLogic.prototype.emit_showResultType = function(data) {
        G_FRAME.globalEmitter.emit("modules_showResultType", data);
      };
      QznnLogic.prototype.emit_flyGold = function(startPos, targetPos, tagStr) {
        G_FRAME.globalEmitter.emit(GEventDef_1.default.bull_flyGold, {
          startPos: startPos,
          targetPos: targetPos,
          tagStr: tagStr
        });
      };
      QznnLogic.prototype.emit_flyGoldEnd = function(tagStr) {
        G_FRAME.globalEmitter.emit(GEventDef_1.default.bull_flyGoldEnd, tagStr);
      };
      QznnLogic.prototype.emit_cuopai = function(msg) {
        G_FRAME.globalEmitter.emit(GEventDef_1.default.bull_cuopai, msg);
      };
      QznnLogic.prototype.emit_cuopaiEnd = function(msg) {
        G_FRAME.globalEmitter.emit(GEventDef_1.default.bull_cuopaiEnd, msg);
      };
      QznnLogic.prototype.openGoldFalsh = function(cb) {
        this.start_sub_module(G_MODULE.Bull_goldFalsh, cb);
      };
      QznnLogic.prototype.openChooseGrab = function() {
        this.start_sub_module(G_MODULE.qznn_chooseGrab);
      };
      QznnLogic.prototype.openSettle = function(cb) {
        this.start_sub_module(G_MODULE.Bull_settle, cb, "Prefab_bull_settleCtrl");
      };
      QznnLogic.prototype.openCalculate = function(cb) {
        this.start_sub_module(G_MODULE.Bull_calculate, cb, "Bull_calculateCtrl");
      };
      QznnLogic.prototype.addGrabFlag = function(cb) {
        this.start_sub_module(G_MODULE.qznn_grabFlag, cb);
      };
      QznnLogic.prototype.addDealerWord = function(cb) {
        this.start_sub_module(G_MODULE.qznn_dealerWord, cb);
      };
      QznnLogic.prototype.addDealerSelect = function(cb) {
        this.start_sub_module(G_MODULE.qznn_dealerSelected, cb);
      };
      QznnLogic.prototype.toPlaza = function() {
        LoginMgr_1.default.getInstance().disconnectGameSvr();
      };
      QznnLogic.prototype.openChooseChipUI = function() {
        this.start_sub_module(G_MODULE.qznn_chooseChip);
      };
      QznnLogic.prototype.openClock = function() {
        this.start_sub_module("SubLayer/Plat/GameRoomCommon/Bull_clockCtrl");
      };
      QznnLogic.prototype.openTotalSettle = function() {
        this.start_sub_module(G_MODULE.Bull_totalSettle);
      };
      QznnLogic.prototype.openCuopai = function(cb) {
        this.start_sub_module(G_MODULE.Bull_cuopai, cb);
      };
      QznnLogic.prototype.onInitRoom_qznn = function(msg) {
        this.cur_chipList = msg.chipValueList;
      };
      QznnLogic.prototype.onSyncData = function(msg) {
        console.log("===================");
        console.log(msg);
      };
      QznnLogic.prototype.onConfirmDealer = function(msg) {
        this.curDealerLogicSeatId = msg.dealerSeatId;
      };
      QznnLogic.prototype.onPrepare = function(msg) {
        msg.seatid == RoomMgr_1.default.getInstance().getMySeatId() && this.clearData();
      };
      QznnLogic.prototype.onProcess = function(msg) {
        switch (msg.process) {
         case QznnConst_1.default.process.start:
          this.cur_waitTime = 0;
          this.curWinId - 1;
          break;

         case QznnConst_1.default.process.grabDealer:
         case QznnConst_1.default.process.chooseChip:
         case QznnConst_1.default.process.giveCards:
          this.cur_waitTime = msg.waitTime;
          break;

         case QznnConst_1.default.process.settle:
          this.cur_waitTime = 0;
        }
      };
      QznnLogic.prototype.onSettle_bull = function(msg) {
        console.log("****************onSettle = ", msg);
        this.curWinId = msg.winSeatId;
      };
      QznnLogic.prototype.getPlayerInfo = function(seatId) {
        return this.players[seatId];
      };
      QznnLogic.prototype.getIsDealer = function() {
        return Boolean(this.curDealerLogicSeatId == RoomMgr_1.default.getInstance().getMySeatId());
      };
      QznnLogic.prototype.getDealerViewSeatId = function() {
        return RoomMgr_1.default.getInstance().getViewSeatId(this.curDealerLogicSeatId);
      };
      QznnLogic.prototype.getChipValueList = function() {
        return this.cur_chipList;
      };
      QznnLogic.prototype.getCurWaitTime = function() {
        return Math.ceil((this.cur_waitTime - Date.now()) / 1e3);
      };
      QznnLogic.prototype.getMyLogicSeatId = function() {
        return RoomMgr_1.default.getInstance().getMySeatId();
      };
      QznnLogic.prototype.getCurChipInfo = function() {
        return this.dict_curChipValue;
      };
      QznnLogic.prototype.getIsMyWin = function() {
        return RoomMgr_1.default.getInstance().getMySeatId() == this.curWinId;
      };
      QznnLogic.getInstance = function() {
        this._instance || (this._instance = new QznnLogic());
        return this._instance;
      };
      return QznnLogic;
    }(BaseMgr_1.default);
    exports.default = QznnLogic;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/GEventDef": "GEventDef",
    "../../../Plat/GameMgrs/LoginMgr": "LoginMgr",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseMgr": "BaseMgr",
    "./QznnConst": "QznnConst",
    "./QznnPlayer": "QznnPlayer"
  } ],
  QznnModulesInstallCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "68e87xPF31PRqXAtq7rNZCo", "QznnModulesInstallCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.resultGoldUpH = null;
        _this.resultGoldUpH = 100;
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.node_resultGold = null;
        _this.ui = {
          node_parent_bg: null,
          node_parent_seat: null,
          node_parent_upUi: null,
          prefab_background: null,
          prefab_roomInfo: null,
          prefab_tipClock: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_parent_bg = ctrl.node_parent_bg;
        this.ui.node_parent_seat = ctrl.node_parent_seat;
        this.ui.node_parent_upUi = ctrl.node_parent_upUi;
        this.ui.prefab_roomInfo = ctrl.prefab_roomInfo;
        this.ui.prefab_background = ctrl.prefab_background;
        this.ui.prefab_tipClock = ctrl.prefab_tipClock;
      };
      View.prototype.initModules = function(cb) {
        var curNode = cc.instantiate(this.ui.prefab_background);
        curNode.parent = this.ui.node_parent_bg;
        curNode.active = true;
        curNode = cc.instantiate(this.ui.prefab_roomInfo);
        curNode.parent = this.ui.node_parent_bg;
        curNode = cc.instantiate(this.ui.prefab_tipClock);
        curNode.parent = this.ui.node_parent_upUi;
        cb();
        cb = null;
      };
      View.prototype.playResultGoldAni = function(curNode) {
        curNode.active = true;
        curNode["_initPosY"] ? curNode.y = curNode["_initPosY"] : curNode["_initPosY"] = curNode.y;
        curNode.scale = .2;
        var time1 = .5;
        var act1 = cc.moveTo(time1, curNode.x, curNode.y + this.model.resultGoldUpH);
        var act2 = cc.scaleTo(time1, 1);
        var act3 = cc.delayTime(time1 + .5);
        var act4 = cc.callFunc(function() {
          curNode.active = false;
        }, this);
        curNode.runAction(cc.spawn(act1, act2));
        curNode.runAction(cc.sequence(act3, act4));
      };
      return View;
    }(BaseView_1.default);
    var QznnModulesInstallCtrl = function(_super) {
      __extends(QznnModulesInstallCtrl, _super);
      function QznnModulesInstallCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.node_parent_bg = null;
        _this.node_parent_seat = null;
        _this.node_parent_upUi = null;
        _this.prefab_background = null;
        _this.prefab_roomInfo = null;
        _this.prefab_tipClock = null;
        return _this;
      }
      QznnModulesInstallCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      QznnModulesInstallCtrl.prototype.defineNetEvents = function() {};
      QznnModulesInstallCtrl.prototype.defineGlobalEvents = function() {};
      QznnModulesInstallCtrl.prototype.connectUi = function() {};
      QznnModulesInstallCtrl.prototype.start = function() {
        var _this = this;
        this.view.initModules(function() {
          _this.startGame();
        });
      };
      QznnModulesInstallCtrl.prototype.startGame = function() {
        RoomMgr_1.default.getInstance().enterRoom();
      };
      __decorate([ property({
        type: cc.Node,
        displayName: "background"
      }) ], QznnModulesInstallCtrl.prototype, "node_parent_bg", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "seatParent"
      }) ], QznnModulesInstallCtrl.prototype, "node_parent_seat", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "upUi"
      }) ], QznnModulesInstallCtrl.prototype, "node_parent_upUi", void 0);
      __decorate([ property({
        type: cc.Prefab,
        displayName: "roomBG"
      }) ], QznnModulesInstallCtrl.prototype, "prefab_background", void 0);
      __decorate([ property({
        type: cc.Prefab,
        displayName: "roomInfo"
      }) ], QznnModulesInstallCtrl.prototype, "prefab_roomInfo", void 0);
      __decorate([ property({
        type: cc.Prefab,
        displayName: "tipClock"
      }) ], QznnModulesInstallCtrl.prototype, "prefab_tipClock", void 0);
      QznnModulesInstallCtrl = __decorate([ ccclass ], QznnModulesInstallCtrl);
      return QznnModulesInstallCtrl;
    }(BaseCtrl_1.default);
    exports.default = QznnModulesInstallCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView"
  } ],
  QznnPlayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4d6d9rD0e1Ol6Xyd3jWj6Jt", "QznnPlayer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var QznnPlayer = function() {
      function QznnPlayer() {
        this.uid = null;
        this.seatid = null;
        this.logic = null;
        this.uid = null;
        this.seatid = null;
      }
      QznnPlayer.prototype.init = function(seatid, logic) {
        this.seatid = seatid;
        this.logic = logic;
      };
      return QznnPlayer;
    }();
    exports.default = QznnPlayer;
    cc._RF.pop();
  }, {} ],
  QznnProp: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6925dejH0xHK6r54UVFsT3X", "QznnProp");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var QznnProp = function() {
      function QznnProp(customcfg) {
        this.customcfg = null;
        this.defaultcfg = {
          v_difen: 1,
          t_niu_0: 1,
          t_niu_1: 1,
          t_niu_2: 1,
          t_niu_3: 1,
          t_niu_4: 1,
          t_niu_5: 1,
          t_niu_6: 1,
          t_niu_7: 2,
          t_niu_8: 2,
          t_niu_9: 3,
          t_niu_10: 4,
          t_niu_12: 5,
          t_niu_13: 5,
          t_niu_14: 6,
          t_niu_15: 6,
          t_niu_17: 5,
          t_niu_18: 8
        };
        this.customcfg = customcfg;
      }
      QznnProp.prototype.get_v_difen = function() {
        if (null != this.customcfg["v_difen"]) return this.customcfg["v_difen"];
        return this.defaultcfg["v_difen"];
      };
      QznnProp.prototype.get_t_niu_0 = function() {
        if (null != this.customcfg["t_niu_0"]) return this.customcfg["t_niu_0"];
        return this.defaultcfg["t_niu_0"];
      };
      QznnProp.prototype.get_t_niu_1 = function() {
        if (null != this.customcfg["t_niu_1"]) return this.customcfg["t_niu_1"];
        return this.defaultcfg["t_niu_1"];
      };
      QznnProp.prototype.get_t_niu_2 = function() {
        if (null != this.customcfg["t_niu_2"]) return this.customcfg["t_niu_2"];
        return this.defaultcfg["t_niu_2"];
      };
      QznnProp.prototype.get_t_niu_3 = function() {
        if (null != this.customcfg["t_niu_3"]) return this.customcfg["t_niu_3"];
        return this.defaultcfg["t_niu_3"];
      };
      QznnProp.prototype.get_t_niu_4 = function() {
        if (null != this.customcfg["t_niu_4"]) return this.customcfg["t_niu_4"];
        return this.defaultcfg["t_niu_4"];
      };
      QznnProp.prototype.get_t_niu_5 = function() {
        if (null != this.customcfg["t_niu_5"]) return this.customcfg["t_niu_5"];
        return this.defaultcfg["t_niu_5"];
      };
      QznnProp.prototype.get_t_niu_6 = function() {
        if (null != this.customcfg["t_niu_6"]) return this.customcfg["t_niu_6"];
        return this.defaultcfg["t_niu_6"];
      };
      QznnProp.prototype.get_t_niu_7 = function() {
        if (null != this.customcfg["t_niu_7"]) return this.customcfg["t_niu_7"];
        return this.defaultcfg["t_niu_7"];
      };
      QznnProp.prototype.get_t_niu_8 = function() {
        if (null != this.customcfg["t_niu_8"]) return this.customcfg["t_niu_8"];
        return this.defaultcfg["t_niu_8"];
      };
      QznnProp.prototype.get_t_niu_9 = function() {
        if (null != this.customcfg["t_niu_9"]) return this.customcfg["t_niu_9"];
        return this.defaultcfg["t_niu_9"];
      };
      QznnProp.prototype.get_t_niu_10 = function() {
        if (null != this.customcfg["t_niu_10"]) return this.customcfg["t_niu_10"];
        return this.defaultcfg["t_niu_10"];
      };
      QznnProp.prototype.get_t_niu_12 = function() {
        if (null != this.customcfg["t_niu_12"]) return this.customcfg["t_niu_12"];
        return this.defaultcfg["t_niu_12"];
      };
      QznnProp.prototype.get_t_niu_13 = function() {
        if (null != this.customcfg["t_niu_13"]) return this.customcfg["t_niu_13"];
        return this.defaultcfg["t_niu_13"];
      };
      QznnProp.prototype.get_t_niu_14 = function() {
        if (null != this.customcfg["t_niu_14"]) return this.customcfg["t_niu_14"];
        return this.defaultcfg["t_niu_14"];
      };
      QznnProp.prototype.get_t_niu_15 = function() {
        if (null != this.customcfg["t_niu_15"]) return this.customcfg["t_niu_15"];
        return this.defaultcfg["t_niu_15"];
      };
      QznnProp.prototype.get_t_niu_17 = function() {
        if (null != this.customcfg["t_niu_17"]) return this.customcfg["t_niu_17"];
        return this.defaultcfg["t_niu_17"];
      };
      QznnProp.prototype.get_t_niu_18 = function() {
        if (null != this.customcfg["t_niu_18"]) return this.customcfg["t_niu_18"];
        return this.defaultcfg["t_niu_18"];
      };
      return QznnProp;
    }();
    exports.default = QznnProp;
    cc._RF.pop();
  }, {} ],
  QznnRoomCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fa08aieCIhGLpOk32I0saw+", "QznnRoomCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var QznnLogic_1 = require("../QznnMgr/QznnLogic");
    var QznnConst_1 = require("../QznnMgr/QznnConst");
    var BullPosMgr_1 = require("../../../GameCommon/Bull/BullPosMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.roomInfo = null;
        _this.roomid = null;
        _this.curRound = null;
        _this.mySeatId = null;
        _this.myPrepared = null;
        _this.myself = null;
        _this.time_startAni = null;
        _this.time_startAni = .5;
        return _this;
      }
      Model.prototype.getSeatCount = function() {
        return RoomMgr_1.default.getInstance().getSeatCount();
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.dict_readyTag = null;
        _this.intervalID = null;
        _this.ui = {
          node_seatsConfig: null,
          node_seatParent: null,
          prefab_seat: null,
          node_giveCardPosConfig: null,
          node_btn_prepare: null,
          node_btn_close: null,
          node_chipValuePos: null,
          node_resultTypePos: null,
          node_btn_sitDown: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_seatsConfig = ctrl.node_seatsConfig;
        this.ui.node_seatParent = ctrl.node_seatParent;
        this.ui.prefab_seat = ctrl.prefab_seat;
        this.ui.node_btn_prepare = ctrl.node_btn_prepare;
        this.ui.node_giveCardPosConfig = ctrl.node_giveCardPosConfig;
        this.ui.node_btn_close = ctrl.node_btn_close;
        this.ui.node_chipValuePos = ctrl.node_chipValuePos;
        this.ui.node_resultTypePos = ctrl.node_resultTypePos;
        this.ui.node_btn_sitDown = ctrl.node_btn_sitDown;
        BullPosMgr_1.default.getInstance().setSeatConfigs(this.ui.node_seatsConfig);
        BullPosMgr_1.default.getInstance().setGiveCardPosCfg(this.ui.node_giveCardPosConfig);
        BullPosMgr_1.default.getInstance().setChipValuePosCfg(this.ui.node_chipValuePos);
        BullPosMgr_1.default.getInstance().setResultTypePosCfg(this.ui.node_resultTypePos);
        this.initSeats();
      };
      View.prototype.updateMyPrepared = function() {
        this.ui.node_btn_prepare.active = !RoomMgr_1.default.getInstance().preparemap[RoomMgr_1.default.getInstance().getMySeatId()];
      };
      View.prototype.setMyPreparedShow = function(isShow) {
        this.ui.node_btn_prepare.active = isShow;
      };
      View.prototype.initSeats = function() {
        var seatCount = this.model.getSeatCount();
        for (var i = 0; i < seatCount; i++) {
          var curNode = cc.instantiate(this.ui.prefab_seat);
          curNode.parent = this.ui.node_seatParent;
          curNode.position = BullPosMgr_1.default.getInstance().getSeatPos(i);
        }
      };
      return View;
    }(BaseView_1.default);
    var QznnRoomCtrl = function(_super) {
      __extends(QznnRoomCtrl, _super);
      function QznnRoomCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.clockCtrl = null;
        _this.node_seatsConfig = null;
        _this.node_giveCardPosConfig = null;
        _this.node_chipValuePos = null;
        _this.node_resultTypePos = null;
        _this.node_seatParent = null;
        _this.prefab_seat = null;
        _this.node_btn_prepare = null;
        _this.node_btn_sitDown = null;
        _this.node_btn_close = null;
        return _this;
      }
      QznnRoomCtrl.prototype.onLoad = function() {
        ctrl = this;
        RoomMgr_1.default.getInstance().setGameLibs(QznnConst_1.default, null, QznnLogic_1.default, null);
        this.initMvc(Model, View);
      };
      QznnRoomCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "room.roomHandler.exitRoom": this.room_roomHandler_exitRoom,
          "http.reqDisbandRoom": this.http_reqDisbandRoom,
          "http.reqRoomInfo": this.http_reqRoomInfo
        };
        this.n_events["onPrepare"] = this.onPrepare;
      };
      QznnRoomCtrl.prototype.defineGlobalEvents = function() {};
      QznnRoomCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.node_btn_prepare, this.node_btn_prepare_cb, "点击准备");
        this.connect(G_UiType.image, this.ui.node_btn_close, this.node_btn_close_cb, "点击关闭");
        this.connect(G_UiType.image, this.ui.node_btn_sitDown, this.node_btn_sitDown_cb, "点击关闭");
      };
      QznnRoomCtrl.prototype.start = function() {
        cc.director.setDisplayStats(false);
      };
      QznnRoomCtrl.prototype.http_reqRoomInfo = function() {
        console.log("RoomMgr.getInstance().roomtype=", RoomMgr_1.default.getInstance().roomtype);
      };
      QznnRoomCtrl.prototype.http_reqDisbandRoom = function() {
        QznnLogic_1.default.getInstance().toPlaza();
      };
      QznnRoomCtrl.prototype.room_roomHandler_exitRoom = function() {
        QznnLogic_1.default.getInstance().toPlaza();
      };
      QznnRoomCtrl.prototype.onPrepare = function(msg) {
        msg.seatid == RoomMgr_1.default.getInstance().getMySeatId() && this.view.setMyPreparedShow(false);
      };
      QznnRoomCtrl.prototype.onReqSettle = function(msg) {
        console.log("onReqSettle", msg);
        if (RoomMgr_1.default.getInstance().isBunchFinish()) {
          console.log("进入总结算");
          QznnLogic_1.default.getInstance().openTotalSettle();
        } else {
          QznnLogic_1.default.getInstance().openSettle(function(curCtrl) {
            QznnLogic_1.default.getInstance().getIsMyWin() ? curCtrl.showWin() : curCtrl.showFail();
          });
          this.view.setMyPreparedShow(true);
        }
      };
      QznnRoomCtrl.prototype.node_btn_sitDown_cb = function(btnNode) {
        btnNode.active = false;
        RoomMgr_1.default.getInstance().isBunchFinish() || RoomMgr_1.default.getInstance().prepare();
      };
      QznnRoomCtrl.prototype.node_btn_prepare_cb = function(btnNode) {
        btnNode.active = false;
        if (RoomMgr_1.default.getInstance().isBunchFinish()) ; else {
          RoomMgr_1.default.getInstance().prepare();
          console.log("结算走准备=====");
        }
      };
      __decorate([ property({
        type: cc.Node,
        displayName: "seatsConfig"
      }) ], QznnRoomCtrl.prototype, "node_seatsConfig", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "giveCardPosCfg"
      }) ], QznnRoomCtrl.prototype, "node_giveCardPosConfig", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "chipValuePos"
      }) ], QznnRoomCtrl.prototype, "node_chipValuePos", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "resultTypePos"
      }) ], QznnRoomCtrl.prototype, "node_resultTypePos", void 0);
      __decorate([ property(cc.Node) ], QznnRoomCtrl.prototype, "node_seatParent", void 0);
      __decorate([ property(cc.Prefab) ], QznnRoomCtrl.prototype, "prefab_seat", void 0);
      __decorate([ property(cc.Node) ], QznnRoomCtrl.prototype, "node_btn_prepare", void 0);
      __decorate([ property(cc.Node) ], QznnRoomCtrl.prototype, "node_btn_sitDown", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "closeBtn"
      }) ], QznnRoomCtrl.prototype, "node_btn_close", void 0);
      QznnRoomCtrl = __decorate([ ccclass ], QznnRoomCtrl);
      return QznnRoomCtrl;
    }(BaseCtrl_1.default);
    exports.default = QznnRoomCtrl;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Bull/BullPosMgr": "BullPosMgr",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../QznnMgr/QznnConst": "QznnConst",
    "../QznnMgr/QznnLogic": "QznnLogic"
  } ],
  Qznn_MyCardsCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4386eFBbrFAcZUDXx39jQW0", "Qznn_MyCardsCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var QznnConst_1 = require("../QznnMgr/QznnConst");
    var QznnLogic_1 = require("../QznnMgr/QznnLogic");
    var GEventDef_1 = require("../../../Plat/GameMgrs/GEventDef");
    var BullCardsMgr_1 = require("../../../GameCommon/Bull/BullCardsMgr");
    var BullPosMgr_1 = require("../../../GameCommon/Bull/BullPosMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var C_cardAttr = "_cardInfo";
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.maxHandlerCardNum = null;
        _this.cardOffRate = null;
        _this.moveStartPos = null;
        _this.touchUpY = null;
        _this.myViewSeatId = null;
        _this.touchUpNum = null;
        _this.maxTouchUpNum = null;
        _this.list_cardsLogicId = null;
        _this.seatCount = null;
        _this.myViewSeatId = 0;
        _this.maxHandlerCardNum = 5;
        _this.cardOffRate = QznnConst_1.default.config.bigCardOffWRate;
        _this.moveStartPos = cc.p(0, 0);
        _this.touchUpY = 15;
        _this.maxTouchUpNum = 3;
        _this.touchUpNum = 0;
        _this.seatCount = RoomMgr_1.default.getInstance().getSeatCount();
        return _this;
      }
      Model.prototype.resetData = function() {
        this.list_cardsLogicId = null;
        this.touchUpNum = 0;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.list_myCards = null;
        _this.list_hideCards = null;
        _this.num_showCards = null;
        _this.ui = {
          atlas_cards: null,
          node_btn_tanpai: null,
          node_btn_tanpaiTip: null,
          node_btn_cuopai: null,
          node_btn_openCard: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.list_hideCards = [];
        _this.list_myCards = [];
        _this.num_showCards = 0;
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.atlas_cards = ctrl.atlas_cards;
        this.ui.node_btn_tanpai = ctrl.node_btn_tanpai;
        this.ui.node_btn_tanpaiTip = ctrl.node_btn_tanpaiTip;
        this.ui.node_btn_cuopai = ctrl.node_btn_cuopai;
        this.ui.node_btn_openCard = ctrl.node_btn_openCard;
      };
      View.prototype.showCard = function(cardsNum) {
        var i, cardNode;
        for (i = 0; i < this.model.maxHandlerCardNum; i++) {
          cardNode = this.list_myCards[i];
          if (!cardNode) {
            cardNode = BullCardsMgr_1.default.addMyCard();
            this.list_myCards.push(cardNode);
          }
          cardNode.zIndex = i;
          if (cardsNum > 0 && false == cardNode.active) {
            cardsNum -= 1;
            cardNode.active = true;
            cardNode.opacity = 255;
            cardNode.color = cc.Color.WHITE;
            cardNode[C_cardAttr].logicValue = 0;
            cardNode[C_cardAttr].isOpen = false;
            BullCardsMgr_1.default.setCardValue(cardNode);
          }
        }
      };
      View.prototype.giveCards = function(giveNum) {
        var i, cardNode, startPos, targetPos, endPos, moveTime, intervalTime;
        startPos = this.model.moveStartPos;
        targetPos = this.getGiveTargetPos(0);
        moveTime = QznnConst_1.default.config.cardIntervalTime;
        intervalTime = QznnConst_1.default.config.cardMoveTime;
        this.showCard(giveNum);
        for (i = 0; i < giveNum; i++) {
          cardNode = this.list_myCards[giveNum - i - 1];
          if (cardNode) {
            cardNode.position = startPos;
            cardNode.zIndex = i + 1;
            endPos = cc.p(targetPos.x, targetPos.y);
            endPos.x += i * this.model.cardOffRate * cardNode.width;
            var act1 = cc.delayTime(i * intervalTime);
            var act2 = cc.moveTo(moveTime, endPos);
            if (i == giveNum - 1) {
              var act3 = cc.callFunc(ctrl.onMyGiveCardEnd, ctrl);
              cardNode.runAction(cc.sequence(act1, act2, act3));
            } else cardNode.runAction(cc.sequence(act1, act2));
          }
        }
      };
      View.prototype.hideAllCards = function() {
        for (var i = 0; i < this.list_myCards.length; i++) {
          var card = this.list_myCards[i];
          card.active = false;
        }
      };
      View.prototype.openAllCards = function(valueList, cb) {
        BullCardsMgr_1.default.openCards(this.list_myCards, valueList, cb);
      };
      View.prototype.exchangeTouchState = function(cardNode) {
        if (cardNode[C_cardAttr].initPosY) {
          cardNode.y = cardNode[C_cardAttr].initPosY;
          cardNode[C_cardAttr].initPosY = null;
          this.model.touchUpNum -= 1;
          this.model.touchUpNum = Math.max(this.model.touchUpNum, 0);
        } else if (this.model.touchUpNum < this.model.maxTouchUpNum) {
          cardNode[C_cardAttr].initPosY = cardNode.y;
          cardNode.y += this.model.touchUpY;
          this.model.touchUpNum += 1;
        }
      };
      View.prototype.coverAllCards = function() {
        BullCardsMgr_1.default.coverCards(this.list_myCards);
      };
      View.prototype.openTouch = function() {
        this.node.on(cc.Node.EventType.TOUCH_START, ctrl.onTouchStart, ctrl);
        this.node.on(cc.Node.EventType.TOUCH_MOVE, ctrl.onTouchMove, ctrl);
        this.node.on(cc.Node.EventType.TOUCH_END, ctrl.onTouchEnd, ctrl);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, ctrl.onTouchCancel, ctrl);
      };
      View.prototype.closeTouch = function() {
        this.node.off(cc.Node.EventType.TOUCH_START, ctrl.onTouchStart, ctrl);
        this.node.off(cc.Node.EventType.TOUCH_MOVE, ctrl.onTouchMove, ctrl);
        this.node.off(cc.Node.EventType.TOUCH_END, ctrl.onTouchEnd, ctrl);
        this.node.off(cc.Node.EventType.TOUCH_CANCEL, ctrl.onTouchCancel, ctrl);
      };
      View.prototype.getGiveTargetPos = function(viewSeatId) {
        return BullPosMgr_1.default.getInstance().getGiveCardPos(viewSeatId);
      };
      View.prototype.setTanpaiBtnShow = function(isShow) {
        this.ui.node_btn_tanpai.active = isShow;
        this.ui.node_btn_tanpaiTip.active = isShow;
      };
      View.prototype.showTiShi = function() {
        var cardsList = this.model.list_cardsLogicId;
        var resultObj = BullCardsMgr_1.default.getCardResult(cardsList);
        QznnLogic_1.default.getInstance().emit_showResultType(resultObj.resultType);
        if (0 != resultObj.resultType) {
          var curCard = void 0, startList = resultObj.cardIdList.slice(0, 3);
          for (var i = 0; i < this.list_myCards.length; i++) {
            curCard = this.list_myCards[i];
            for (var j = 0; j < startList.length; j++) if (startList[j] == curCard[C_cardAttr].logicValue) {
              curCard.opacity = 190;
              startList.splice(j, 1);
              break;
            }
          }
        }
      };
      View.prototype.setCuoPaiBtnShow = function(isShow) {
        this.ui.node_btn_cuopai.active = isShow;
      };
      View.prototype.setOpenCardBtnShow = function(isShow) {
        this.ui.node_btn_openCard.active = isShow;
      };
      return View;
    }(BaseView_1.default);
    var QznnMyCardsCtrl = function(_super) {
      __extends(QznnMyCardsCtrl, _super);
      function QznnMyCardsCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.model = null;
        _this.view = null;
        _this.list_touchPos = null;
        _this.ctrl_calculate = null;
        _this.atlas_cards = null;
        _this.node_btn_tanpai = null;
        _this.node_btn_tanpaiTip = null;
        _this.node_btn_cuopai = null;
        _this.node_btn_openCard = null;
        return _this;
      }
      QznnMyCardsCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        BullCardsMgr_1.default.initData(this, this.ui.atlas_cards);
      };
      QznnMyCardsCtrl.prototype.defineNetEvents = function() {
        this.n_events = {};
        this.n_events[QznnConst_1.default.clientEvent.onGiveCards] = this.onStartGive;
        this.n_events[QznnConst_1.default.clientEvent.onSettle] = this.onSettle_bull;
        this.n_events[QznnConst_1.default.clientEvent.onTanPai] = this.onTanPai;
        this.n_events[QznnConst_1.default.clientEvent.onStart] = this.onStart;
        this.n_events[QznnConst_1.default.clientEvent.onProcess] = this.onProcess;
        this.n_events["onPrepare"] = this.onPrepare;
      };
      QznnMyCardsCtrl.prototype.defineGlobalEvents = function() {
        this.g_events[GEventDef_1.default.bull_cuopaiEnd] = this.onCuopaiEnd;
      };
      QznnMyCardsCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.node_btn_tanpai, this.node_btn_tanpai_cb, "点击摊牌");
        this.connect(G_UiType.image, this.ui.node_btn_tanpaiTip, this.node_btn_tanpaiTip_cb, "点击摊牌提示");
        this.connect(G_UiType.image, this.ui.node_btn_cuopai, this.node_btn_cuopai_cb, "点击搓牌");
        this.connect(G_UiType.image, this.ui.node_btn_openCard, this.node_btn_openCard_cb, "点击翻牌");
      };
      QznnMyCardsCtrl.prototype.start = function() {};
      QznnMyCardsCtrl.prototype.onStart = function() {
        this.view.hideAllCards();
      };
      QznnMyCardsCtrl.prototype.onPrepare = function(msg) {
        msg.seatid == RoomMgr_1.default.getInstance().getMySeatId() && this.view.hideAllCards();
      };
      QznnMyCardsCtrl.prototype.onProcess = function(msg) {
        if (msg.process == QznnConst_1.default.process.start) {
          this.view.hideAllCards();
          this.model.touchUpNum = 0;
        } else msg.process == QznnConst_1.default.process.grabDealer ? QznnLogic_1.default.getInstance().openChooseGrab() : msg.process == QznnConst_1.default.process.chooseChip;
      };
      QznnMyCardsCtrl.prototype.onStartGive = function(msg) {
        var _this = this;
        console.log("********on my  StartGive* = ", msg);
        this.model.list_cardsLogicId = msg.myCardsList;
        this.view.giveCards(msg.myCardsList.length);
        var time = QznnConst_1.default.config.cardIntervalTime * QznnConst_1.default.config.maxGroupCardsNum + QznnConst_1.default.config.cardMoveTime;
        time *= this.model.seatCount;
        setTimeout(function() {
          _this.onGiveAllCardEnd();
        }, 1e3 * time);
      };
      QznnMyCardsCtrl.prototype.onGiveAllCardEnd = function() {
        console.log("onGiveCardEnd===");
        this.view.openTouch();
        this.view.setTanpaiBtnShow(true);
      };
      QznnMyCardsCtrl.prototype.onTanPai = function(msg) {
        console.log("onTanPai=== ", msg);
        if (msg.seatId == RoomMgr_1.default.getInstance().myseatid) {
          this.view.closeTouch();
          if (this.ctrl_calculate) {
            this.ctrl_calculate.finish();
            this.ctrl_calculate = null;
          }
          var targetPos = this.view.getGiveTargetPos(this.model.myViewSeatId);
          BullCardsMgr_1.default.showTanPai(this.view.list_myCards, msg.cardLogicIdList, targetPos);
        }
      };
      QznnMyCardsCtrl.prototype.onSettle_bull = function(msg) {
        console.log("****************onSettle = ", msg);
        var logicId = RoomMgr_1.default.getInstance().getMySeatId();
        var resultObj = msg.dict_notTanPai[logicId];
        if (resultObj) {
          var targetPos = this.view.getGiveTargetPos(this.model.myViewSeatId);
          BullCardsMgr_1.default.showTanPai(this.view.list_myCards, resultObj.cardIdList, targetPos);
          this.view.setTanpaiBtnShow(false);
        }
        this.view.closeTouch();
        if (this.ctrl_calculate) {
          this.ctrl_calculate.finish();
          this.ctrl_calculate = null;
        }
        QznnLogic_1.default.getInstance().openSettle(function(uiCtrl) {
          msg.winSeatId == logicId ? uiCtrl.showWin() : uiCtrl.showFail();
        });
      };
      QznnMyCardsCtrl.prototype.onCuopaiEnd = function(msg) {
        1 == msg && this.node_btn_openCard_cb();
      };
      QznnMyCardsCtrl.prototype.node_btn_openCard_cb = function() {
        var _this = this;
        this.view.setOpenCardBtnShow(false);
        this.view.setCuoPaiBtnShow(false);
        this.view.openAllCards(this.model.list_cardsLogicId, function() {
          _this.view.openTouch();
          _this.view.setTanpaiBtnShow(true);
        });
      };
      QznnMyCardsCtrl.prototype.node_btn_cuopai_cb = function() {
        var _this = this;
        this.view.setCuoPaiBtnShow(false);
        QznnLogic_1.default.getInstance().openCuopai(function() {
          QznnLogic_1.default.getInstance().emit_cuopai(_this.model.list_cardsLogicId);
        });
      };
      QznnMyCardsCtrl.prototype.node_btn_tanpai_cb = function(curNode) {
        console.log("node_btn_tanpai_cb===");
        this.view.setTanpaiBtnShow(false);
        QznnLogic_1.default.getInstance().reqTanpai();
      };
      QznnMyCardsCtrl.prototype.node_btn_tanpaiTip_cb = function(curNode) {
        console.log("点击摊牌提示");
        this.view.showTiShi();
      };
      QznnMyCardsCtrl.prototype.onMyGiveCardEnd = function() {
        console.log("on_giveCardsEnd", this.model.list_cardsLogicId);
      };
      QznnMyCardsCtrl.prototype.onTouchStart = function(event) {
        var pos = event.touch.getLocation();
        this.list_touchPos = [];
        this.list_touchPos.push(pos);
      };
      QznnMyCardsCtrl.prototype.onTouchMove = function(event) {};
      QznnMyCardsCtrl.prototype.onTouchEnd = function(event) {
        var _this = this;
        var cards = this.checkCardsTouch(this.view.list_myCards, this.list_touchPos);
        var i, list_down = [], list_up = [];
        for (i = 0; i < cards.length; i++) {
          var isDown = Boolean(cards[i][C_cardAttr].initPosY);
          isDown ? list_down.push(this._getCardValue(cards[i][C_cardAttr].logicValue)) : list_up.push(this._getCardValue(cards[i][C_cardAttr].logicValue));
        }
        if (cards.length > 0) if (this.ctrl_calculate) {
          this.ctrl_calculate.delValues(list_down);
          this.ctrl_calculate.addValues(list_up);
        } else QznnLogic_1.default.getInstance().openCalculate(function(ctrl) {
          _this.ctrl_calculate = ctrl;
          _this.ctrl_calculate.delValues(list_down);
          _this.ctrl_calculate.addValues(list_up);
        });
        for (var i_1 = 0; i_1 < cards.length; i_1++) {
          cards[i_1].opacity = 255;
          console.log("click card VALUE= ", BullCardsMgr_1.default.getSixValue(cards[i_1][C_cardAttr].logicValue));
          this.view.exchangeTouchState(cards[i_1]);
        }
        this.list_touchPos = null;
      };
      QznnMyCardsCtrl.prototype.onTouchCancel = function(event) {
        this.list_touchPos = null;
      };
      QznnMyCardsCtrl.prototype._getCardValue = function(logicValue) {
        var sixValue = BullCardsMgr_1.default.getSixValue(logicValue);
        return sixValue.slice(-1);
      };
      QznnMyCardsCtrl.prototype.checkCardsTouch = function(cardsList, posList) {
        var i, j, cardNode = null, cardRect, winSizeW2 = cc.director.getWinSize().width / 2, winSizeH2 = cc.director.getWinSize().height / 2, curX, curY, list_touchCards = [];
        for (i = 0; i < cardsList.length; i++) {
          cardNode = cardsList[i];
          if (cardNode.active && cardNode[C_cardAttr].isOpen) {
            curX = cardNode.x + winSizeW2 - cardNode.width / 2;
            curY = cardNode.y + winSizeH2 - cardNode.height / 2;
            cardRect = cardNode.zIndex == this.model.maxHandlerCardNum ? cc.rect(curX, curY, cardNode.width, cardNode.height) : cc.rect(curX, curY, this.model.cardOffRate * cardNode.width, cardNode.height);
            for (j = 0; j < posList.length; j++) if (cc.rectContainsPoint(cardRect, posList[j])) {
              cardNode.opacity = 120;
              list_touchCards.push(cardNode);
              break;
            }
          }
        }
        return list_touchCards;
      };
      QznnMyCardsCtrl.prototype.onDestroy = function() {
        BullCardsMgr_1.default.clearData();
        _super.prototype.onDestroy.call(this);
      };
      __decorate([ property({
        type: cc.SpriteAtlas,
        displayName: "cardsAtlas"
      }) ], QznnMyCardsCtrl.prototype, "atlas_cards", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "tanpaiBtn"
      }) ], QznnMyCardsCtrl.prototype, "node_btn_tanpai", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "tanpaiTipBtn"
      }) ], QznnMyCardsCtrl.prototype, "node_btn_tanpaiTip", void 0);
      __decorate([ property(cc.Node) ], QznnMyCardsCtrl.prototype, "node_btn_cuopai", void 0);
      __decorate([ property(cc.Node) ], QznnMyCardsCtrl.prototype, "node_btn_openCard", void 0);
      QznnMyCardsCtrl = __decorate([ ccclass ], QznnMyCardsCtrl);
      return QznnMyCardsCtrl;
    }(BaseCtrl_1.default);
    exports.default = QznnMyCardsCtrl;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Bull/BullCardsMgr": "BullCardsMgr",
    "../../../GameCommon/Bull/BullPosMgr": "BullPosMgr",
    "../../../Plat/GameMgrs/GEventDef": "GEventDef",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../QznnMgr/QznnConst": "QznnConst",
    "../QznnMgr/QznnLogic": "QznnLogic"
  } ],
  Qznn_OthersCardsCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5dfd5N4so5PLZH6IfLx2jNw", "Qznn_OthersCardsCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var QznnConst_1 = require("../QznnMgr/QznnConst");
    var BullCardsMgr_1 = require("../../../GameCommon/Bull/BullCardsMgr");
    var BullPosMgr_1 = require("../../../GameCommon/Bull/BullPosMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var C_cardAttr = "_cardInfo";
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.moveStartPos = null;
        _this.maxHandlerCardNum = null;
        _this.cardOffRate = null;
        _this.lowScaleRate = null;
        _this.curGiveCardsNum = null;
        _this.seatsCount = null;
        _this.timeoutId = null;
        _this.moveStartPos = cc.p(0, 0);
        _this.maxHandlerCardNum = 5;
        _this.cardOffRate = QznnConst_1.default.config.minCardOffWRate;
        _this.lowScaleRate = .5;
        _this.seatsCount = RoomMgr_1.default.getInstance().getSeatCount();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.dict_cards = null;
        _this.ui = {
          atlas_cards: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.dict_cards = {};
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.atlas_cards = ctrl.atlas_cards;
      };
      View.prototype.showCard = function(viewSeatId, cardsNum) {
        this.dict_cards[viewSeatId] || (this.dict_cards[viewSeatId] = []);
        var i, cardNode;
        for (i = 0; i < this.model.maxHandlerCardNum; i++) {
          cardNode = this.dict_cards[viewSeatId][i];
          if (!cardNode) {
            cardNode = BullCardsMgr_1.default.addOtherCard();
            this.dict_cards[viewSeatId].push(cardNode);
          }
          cardNode.zIndex = i;
          if (cardsNum > 0 && false == cardNode.active) {
            cardsNum -= 1;
            cardNode.active = true;
            cardNode.active = true;
            cardNode.opacity = 255;
            cardNode[C_cardAttr].logicValue = 0;
            cardNode[C_cardAttr].isOpen = false;
            BullCardsMgr_1.default.setCardValue(cardNode);
          }
        }
      };
      View.prototype.giveCards = function(viewSeatId, giveNum) {
        var i, cardNode, startPos, targetPos, endPos, moveTime, intervalTime;
        startPos = this.model.moveStartPos;
        targetPos = this.getGiveTargetPos(viewSeatId);
        moveTime = QznnConst_1.default.config.cardMoveTime;
        intervalTime = QznnConst_1.default.config.cardIntervalTime;
        this.showCard(viewSeatId, giveNum);
        for (i = 0; i < giveNum; i++) {
          cardNode = this.dict_cards[viewSeatId][giveNum - i - 1];
          if (cardNode) {
            cardNode.position = startPos;
            cardNode.zIndex = i + 1;
            endPos = cc.p(targetPos.x, targetPos.y);
            endPos.x += i * this.model.cardOffRate * cardNode.width;
            var act1 = cc.delayTime(i * intervalTime);
            var act2 = cc.moveTo(moveTime, endPos);
            if (i == giveNum - 1) {
              var act3 = cc.callFunc(ctrl.onGiveCardsEnd, ctrl);
              cardNode.runAction(cc.sequence(act1, act2, act3));
            } else cardNode.runAction(cc.sequence(act1, act2));
          }
        }
      };
      View.prototype.coverAllCards = function(viewSeatId) {
        BullCardsMgr_1.default.coverCards(this.dict_cards[viewSeatId]);
      };
      View.prototype.hideAllCards = function() {
        for (var seatId in this.dict_cards) {
          var cardsList = this.dict_cards[seatId];
          for (var i = 0; i < cardsList.length; i++) {
            var card = cardsList[i];
            card.active = false;
          }
        }
      };
      View.prototype.getGiveTargetPos = function(viewSeatId) {
        return BullPosMgr_1.default.getInstance().getGiveCardPos(viewSeatId);
      };
      View.prototype.getCardListByViewId = function(viewSeatId) {
        return this.dict_cards[viewSeatId];
      };
      return View;
    }(BaseView_1.default);
    var Qznn_OthersCardsCtrl = function(_super) {
      __extends(Qznn_OthersCardsCtrl, _super);
      function Qznn_OthersCardsCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.model = null;
        _this.view = null;
        _this.list_giveSeatId = null;
        _this.roundIndex = null;
        _this.atlas_cards = null;
        return _this;
      }
      Qznn_OthersCardsCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        BullCardsMgr_1.default.setOtherCardsAtlas(this.ui.atlas_cards);
      };
      Qznn_OthersCardsCtrl.prototype.defineNetEvents = function() {
        this.n_events = {};
        this.n_events[QznnConst_1.default.clientEvent.onGiveCards] = this.onStartGive;
        this.n_events[QznnConst_1.default.clientEvent.onTanPai] = this.onTanPai;
        this.n_events[QznnConst_1.default.clientEvent.onStart] = this.onStart;
        this.n_events[QznnConst_1.default.clientEvent.onSettle] = this.onSettle_bull;
        this.n_events["onPrepare"] = this.onPrepare;
      };
      Qznn_OthersCardsCtrl.prototype.defineGlobalEvents = function() {};
      Qznn_OthersCardsCtrl.prototype.connectUi = function() {};
      Qznn_OthersCardsCtrl.prototype.start = function() {};
      Qznn_OthersCardsCtrl.prototype.onStart = function() {
        this.clearData();
        this.view.hideAllCards();
      };
      Qznn_OthersCardsCtrl.prototype.onPrepare = function(msg) {
        if (msg.seatid == RoomMgr_1.default.getInstance().getMySeatId()) {
          this.clearData();
          this.view.hideAllCards();
        }
      };
      Qznn_OthersCardsCtrl.prototype.onStartGive = function(msg) {
        var _this = this;
        console.log("开始给牌=====", msg);
        var time = QznnConst_1.default.config.cardIntervalTime * QznnConst_1.default.config.maxGroupCardsNum + QznnConst_1.default.config.cardMoveTime;
        this.model.timeoutId = setTimeout(function() {
          _this.model.curGiveCardsNum = msg.cardNum;
          _this.roundIndex = 1;
          _this._inGiveRound();
        }, 1e3 * time);
      };
      Qznn_OthersCardsCtrl.prototype.onTanPai = function(msg) {
        console.log("onTanPai=== ", msg);
        var id = msg.seatId;
        if (id != RoomMgr_1.default.getInstance().myseatid) {
          var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(id);
          var nodeList = this.view.dict_cards[viewSeatId];
          var targetPos = this.view.getGiveTargetPos(viewSeatId);
          BullCardsMgr_1.default.showTanPai(nodeList, msg.cardLogicIdList, targetPos);
        }
      };
      Qznn_OthersCardsCtrl.prototype.onSettle_bull = function(msg) {
        console.log("********others********onSettle = ", msg);
        var myLogicId = RoomMgr_1.default.getInstance().getMySeatId();
        var seatId, resultObj, viewSeatId;
        for (seatId in msg.dict_notTanPai) if (seatId != myLogicId) {
          resultObj = msg.dict_notTanPai[seatId];
          viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(seatId);
          var targetPos = this.view.getGiveTargetPos(viewSeatId);
          BullCardsMgr_1.default.showTanPai(this.view.getCardListByViewId(viewSeatId), resultObj.cardIdList, targetPos);
        }
      };
      Qznn_OthersCardsCtrl.prototype.onGiveCardsEnd = function() {
        console.log("on_giveCardsEnd");
        this._inGiveRound();
      };
      Qznn_OthersCardsCtrl.prototype.clearData = function() {
        clearTimeout(this.model.timeoutId);
      };
      Qznn_OthersCardsCtrl.prototype._inGiveRound = function() {
        if (this.roundIndex >= this.model.seatsCount) ; else {
          this.view.giveCards(this.roundIndex, this.model.curGiveCardsNum);
          this.roundIndex += 1;
        }
      };
      Qznn_OthersCardsCtrl.prototype.onDestroy = function() {
        clearTimeout(this.model.timeoutId);
        _super.prototype.onDestroy.call(this);
      };
      __decorate([ property({
        type: cc.SpriteAtlas,
        displayName: "cardsAtlas"
      }) ], Qznn_OthersCardsCtrl.prototype, "atlas_cards", void 0);
      Qznn_OthersCardsCtrl = __decorate([ ccclass ], Qznn_OthersCardsCtrl);
      return Qznn_OthersCardsCtrl;
    }(BaseCtrl_1.default);
    exports.default = Qznn_OthersCardsCtrl;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Bull/BullCardsMgr": "BullCardsMgr",
    "../../../GameCommon/Bull/BullPosMgr": "BullPosMgr",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../QznnMgr/QznnConst": "QznnConst"
  } ],
  Qznn_TopUiCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7c6baC9/TtKdLGIqThg9ZRc", "Qznn_TopUiCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var QznnConst_1 = require("../QznnMgr/QznnConst");
    var QznnLogic_1 = require("../QznnMgr/QznnLogic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.intervalID = null;
        return _this;
      }
      Model.prototype.getIsMyPrepare = function() {
        var seatId = RoomMgr_1.default.getInstance().getMySeatId();
        return RoomMgr_1.default.getInstance().preparemap[seatId];
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.intervalID = null;
        _this.node_grabFlag = null;
        _this.node_dealerWord = null;
        _this.ui = {
          node_seats: null,
          node_img_grabAni: null,
          node_dealerFlag: null,
          sprite_thinking: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_seats = ctrl.node_seats;
        this.ui.node_img_grabAni = ctrl.node_img_grabAni;
        this.ui.node_dealerFlag = ctrl.node_dealerFlag;
      };
      View.prototype.showGrabAni = function(startViewSeatId, endViewSeatId) {
        var _this = this;
        var maxSeatCount = this.ui.node_seats.children.length;
        var intervalTime = 1e3;
        var intervalTimes = endViewSeatId > startViewSeatId ? endViewSeatId - startViewSeatId + 1 : maxSeatCount - 1 - endViewSeatId + startViewSeatId;
        var curTimes = 0;
        this.ui.node_img_grabAni.active = true;
        var curPos = this.getGrabAniPos(startViewSeatId);
        this.ui.node_img_grabAni.position = curPos;
        this.model.intervalID = setInterval(function() {
          curTimes += 1;
          if (curTimes >= intervalTimes) {
            clearInterval(_this.model.intervalID);
            _this.ui.node_img_grabAni.active = false;
            _this.showConfirmDealer();
          } else {
            curPos = _this.getGrabAniPos((startViewSeatId + curTimes) % maxSeatCount);
            _this.ui.node_img_grabAni.position = curPos;
          }
        }, intervalTime);
      };
      View.prototype.showOneGrabFlag = function(viewSeatId, grabIndex) {
        var _this = this;
        if (this.node_grabFlag) {
          var flg = this.node_grabFlag.children[viewSeatId];
          if (flg) {
            flg.active = true;
            var isGrab = Boolean(grabIndex);
            flg.children[0].active = isGrab;
            flg.children[1].active = !isGrab;
          }
        } else QznnLogic_1.default.getInstance().addGrabFlag(function(prefab, prefabNode) {
          _this.node_grabFlag = prefabNode;
          var flg = _this.node_grabFlag.children[viewSeatId];
          if (flg) {
            flg.active = true;
            var isGrab = Boolean(grabIndex);
            flg.children[0].active = isGrab;
            flg.children[1].active = !isGrab;
          }
        });
      };
      View.prototype.clearGrabFlag = function() {
        if (this.node_grabFlag) {
          this.node_grabFlag.destroy();
          this.node_grabFlag = null;
        }
      };
      View.prototype.setDealerFlag = function(viewSeatId) {
        var _this = this;
        var pos = this.ui.node_seats.children[viewSeatId].position;
        this.node_dealerWord || QznnLogic_1.default.getInstance().addDealerWord(function(prefab, prefabNode) {
          _this.node_dealerWord = prefabNode;
          _this.node_dealerWord.position = pos;
          _this.node_dealerWord.parent = _this.node;
        });
      };
      View.prototype.clearDealerFlag = function() {
        this.node_dealerWord = null;
      };
      View.prototype.clear = function() {
        this.clearGrabFlag();
        this.clearDealerFlag();
      };
      View.prototype.showConfirmDealer = function() {
        var _this = this;
        this.ui.node_img_grabAni.active = true;
        var time1 = .5;
        var act1 = cc.scaleTo(time1, 2);
        var act2 = cc.callFunc(function() {
          _this.ui.node_img_grabAni.scale = 1;
          _this.ui.node_img_grabAni.active = false;
          ctrl.onGrabAniEnd();
        }, this);
        this.ui.node_img_grabAni.runAction(cc.sequence(act1, act2));
      };
      View.prototype.getMasterPos = function(viewSeatId) {
        var seatNode = this.ui.node_seats.children[viewSeatId];
        return cc.p(seatNode.x + seatNode.width / 2, seatNode.y + seatNode.height / 2);
      };
      View.prototype.getGrabAniPos = function(viewSeatId) {
        return this.ui.node_seats.children[viewSeatId].position;
      };
      return View;
    }(BaseView_1.default);
    var QznnTopUiCtrl = function(_super) {
      __extends(QznnTopUiCtrl, _super);
      function QznnTopUiCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.node_seats = null;
        _this.node_img_grabAni = null;
        _this.node_dealerFlag = null;
        _this.Prefab_thinking = null;
        return _this;
      }
      QznnTopUiCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      QznnTopUiCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onPrepare: this.onPrepare
        };
        this.n_events[QznnConst_1.default.clientEvent.onProcess] = this.onProcess;
        this.n_events[QznnConst_1.default.clientEvent.onPeopleGrab] = this.onPeopleGrab;
        this.n_events[QznnConst_1.default.clientEvent.onConfirmDealer] = this.onConfirmDealer;
      };
      QznnTopUiCtrl.prototype.defineGlobalEvents = function() {};
      QznnTopUiCtrl.prototype.connectUi = function() {};
      QznnTopUiCtrl.prototype.start = function() {};
      QznnTopUiCtrl.prototype.onPrepare = function(msg) {
        msg.seatid == RoomMgr_1.default.getInstance().getMySeatId() && this.view.clear();
      };
      QznnTopUiCtrl.prototype.onPeopleGrab = function(msg) {
        console.log("有玩家选择了是否抢庄onPeopleGrab == ", msg);
        var seatId = msg.grabSeatId;
        var grabIndex = parseInt(msg.isGrab);
        this.view.showOneGrabFlag(RoomMgr_1.default.getInstance().getViewSeatId(seatId), grabIndex);
      };
      QznnTopUiCtrl.prototype.onConfirmDealer = function(msg) {
        this.view.showGrabAni(0, RoomMgr_1.default.getInstance().getViewSeatId(msg.dealerSeatId));
      };
      QznnTopUiCtrl.prototype.onProcess = function(msg) {
        msg.process == QznnConst_1.default.process.start ? this.view.clear() : msg.process == QznnConst_1.default.process.grabDealer || msg.process == QznnConst_1.default.process.chooseChip;
      };
      QznnTopUiCtrl.prototype.onGrabAniEnd = function() {
        console.log("抢庄动画结束");
        var viewSeatId = 3;
        null != viewSeatId && this.view.setDealerFlag(viewSeatId);
      };
      QznnTopUiCtrl.prototype.onDestroy = function() {
        clearInterval(this.model.intervalID);
        _super.prototype.onDestroy.call(this);
      };
      __decorate([ property(cc.Node) ], QznnTopUiCtrl.prototype, "node_seats", void 0);
      __decorate([ property(cc.Node) ], QznnTopUiCtrl.prototype, "node_img_grabAni", void 0);
      __decorate([ property(cc.Node) ], QznnTopUiCtrl.prototype, "node_dealerFlag", void 0);
      __decorate([ property(cc.Prefab) ], QznnTopUiCtrl.prototype, "Prefab_thinking", void 0);
      QznnTopUiCtrl = __decorate([ ccclass ], QznnTopUiCtrl);
      return QznnTopUiCtrl;
    }(BaseCtrl_1.default);
    exports.default = QznnTopUiCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../QznnMgr/QznnConst": "QznnConst",
    "../QznnMgr/QznnLogic": "QznnLogic"
  } ],
  Qznn_chipValueCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "332b3YI5ndNuYcLTBK0U5Si", "Qznn_chipValueCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var GEventDef_1 = require("../../../Plat/GameMgrs/GEventDef");
    var QznnLogic_1 = require("../QznnMgr/QznnLogic");
    var QznnConst_1 = require("../QznnMgr/QznnConst");
    var BullPosMgr_1 = require("../../../GameCommon/Bull/BullPosMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var BullConst = null;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.seatsCount = RoomMgr_1.default.getInstance().getSeatCount();
        BullConst = QznnConst_1.default;
        _this.curLogic = QznnLogic_1.default.getInstance();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {};
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.curNodeCfg = this.node.getChildByName("seats_" + this.model.seatsCount);
      };
      View.prototype.setChipValue = function(viewSeatId, chipValue) {
        var curNode = this.curNodeCfg.children[viewSeatId];
        if (curNode) {
          var startPos = BullPosMgr_1.default.getInstance().getSeatPos(viewSeatId);
          var targetPos = curNode.position;
          var tagStr = "chipValue_" + viewSeatId;
          this.model.curLogic.emit_flyGold(startPos, targetPos, tagStr);
          curNode.children[0].children[0].getComponent(cc.Label).string = chipValue + "";
          curNode.active = false;
        }
      };
      View.prototype.showChipVlaue = function(viewSeatId) {
        this.curNodeCfg.children[viewSeatId].active = true;
      };
      View.prototype.showAllChipValue = function() {
        var dict = QznnLogic_1.default.getInstance().getCurChipInfo();
        for (var viewSeatId = 0; viewSeatId < this.model.seatsCount; viewSeatId++) null == RoomMgr_1.default.getInstance().getLogicSeatId(viewSeatId) || this.setChipValue(viewSeatId, dict[viewSeatId]);
      };
      return View;
    }(BaseView_1.default);
    var Tbnn_chipValueCtrl = function(_super) {
      __extends(Tbnn_chipValueCtrl, _super);
      function Tbnn_chipValueCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        return _this;
      }
      Tbnn_chipValueCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Tbnn_chipValueCtrl.prototype.defineNetEvents = function() {
        this.n_events = {};
        this.n_events[BullConst.clientEvent.onProcess] = this.onProcess;
      };
      Tbnn_chipValueCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {};
        this.g_events[GEventDef_1.default.bull_flyGoldEnd] = this.onModules_flyGoldEnd;
      };
      Tbnn_chipValueCtrl.prototype.connectUi = function() {};
      Tbnn_chipValueCtrl.prototype.start = function() {};
      Tbnn_chipValueCtrl.prototype.onProcess = function(msg) {
        switch (msg.process) {
         case BullConst.process.start:
          this.view.showAllChipValue();
        }
      };
      Tbnn_chipValueCtrl.prototype.onModules_flyGoldEnd = function(msg) {
        console.log("金币飞行结束onModules_flyGoldEnd", msg);
        var viewSeatId = msg.split("_")[1];
        this.view.showChipVlaue(viewSeatId);
      };
      Tbnn_chipValueCtrl = __decorate([ ccclass ], Tbnn_chipValueCtrl);
      return Tbnn_chipValueCtrl;
    }(BaseCtrl_1.default);
    exports.default = Tbnn_chipValueCtrl;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Bull/BullPosMgr": "BullPosMgr",
    "../../../Plat/GameMgrs/GEventDef": "GEventDef",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../QznnMgr/QznnConst": "QznnConst",
    "../QznnMgr/QznnLogic": "QznnLogic"
  } ],
  Qznn_goldPoolCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "45c0bnr0bpDAJ5DkkKCxqcA", "Qznn_goldPoolCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var QznnConst_1 = require("../../Qznn/QznnMgr/QznnConst");
    var QznnLogic_1 = require("../QznnMgr/QznnLogic");
    var GEventDef_1 = require("../../../Plat/GameMgrs/GEventDef");
    var BullPosMgr_1 = require("../../../GameCommon/Bull/BullPosMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.onceFlyNum = null;
        _this.minFlySpeed = null;
        _this.maxFlySpeed = null;
        _this.chipFlyNum = null;
        _this.onceFlyNum = 7;
        _this.minFlySpeed = 30;
        _this.maxFlySpeed = 70;
        _this.chipFlyNum = 8;
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this._list_cache = null;
        _this._list_hideGold = null;
        _this.ui = {
          sprite_goldImg: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this._list_cache = [];
        _this._list_hideGold = [];
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.sprite_goldImg = ctrl.sprite_goldImg;
      };
      View.prototype.flyGold = function(startViewId, targetViewId, cb, endCb) {
        var startPos = this.getPosByViewSeatId(startViewId);
        var targetPos = this.getPosByViewSeatId(targetViewId);
        var golds = this._createGroupGold(this.model.onceFlyNum, startPos);
        this.flyGroupToTarget(golds, targetPos, cb, endCb);
      };
      View.prototype.flyChips = function(startSeatId, targetPos, cb, endCb) {
        var startPos = this.getPosByViewSeatId(startSeatId);
        this.flyByPos(startPos, targetPos, cb);
      };
      View.prototype.flyByPos = function(startPos, targetPos, cb, endCb) {
        var golds = this._createGroupGold(this.model.chipFlyNum, startPos);
        this.flyGroupToTarget(golds, targetPos, cb, endCb);
      };
      View.prototype.getMaxSeatsCount = function() {
        return RoomMgr_1.default.getInstance().getSeatCount();
      };
      View.prototype.getPosByViewSeatId = function(viewSeatId) {
        return BullPosMgr_1.default.getInstance().getSeatPos(viewSeatId);
      };
      View.prototype.flyGroupToTarget = function(groupList, targetPos, cb, endCb) {
        var i, curNodeNum = groupList.length;
        var _loop_1 = function() {
          var goldNode = groupList[i];
          var act1 = cc.moveTo(this_1.getRandomArea(this_1.model.minFlySpeed, this_1.model.maxFlySpeed) / 100, targetPos);
          var act2 = cc.callFunc(function() {
            this._hideOneGold(goldNode);
            curNodeNum -= 1;
            if (curNodeNum < 1 && endCb) {
              endCb();
              endCb = null;
            }
            if (cb) {
              cb();
              cb = null;
            }
          }, this_1);
          goldNode.runAction(cc.sequence(act1, act2));
        };
        var this_1 = this;
        for (i = 0; i < groupList.length; i++) _loop_1();
      };
      View.prototype._createGroupGold = function(num, targetPos) {
        var i, goldNode, list_golds = [];
        for (i = 0; i < num; i++) {
          goldNode = this._getOneGold();
          goldNode.position = this._getRandomPos(targetPos);
          list_golds.push(goldNode);
        }
        return list_golds;
      };
      View.prototype._getOneGold = function() {
        var curNode = this._list_hideGold.pop();
        if (!curNode) {
          curNode = new cc.Node();
          curNode.parent = this.node;
          curNode.addComponent(cc.Sprite).spriteFrame = this.ui.sprite_goldImg;
          this._list_cache.push(curNode);
        }
        curNode.active = true;
        return curNode;
      };
      View.prototype._hideOneGold = function(curNode) {
        curNode.active = false;
        this._list_hideGold.push(curNode);
      };
      View.prototype._getRandomPos = function(curPos) {
        var curW = 25, curH = 50;
        var nodeW = this.getRandomArea(0, curW) * (Math.random() > .5 ? 1 : -1), nodeH = this.getRandomArea(0, curH) * (Math.random() > .5 ? 1 : -1);
        return cc.p(curPos.x + nodeW, curPos.y + nodeH);
      };
      View.prototype.getRandomArea = function(downNum, upNum) {
        return parseInt(Math.random() * (upNum - downNum + 1) + downNum);
      };
      return View;
    }(BaseView_1.default);
    var Qznn_goldPoolCtrl = function(_super) {
      __extends(Qznn_goldPoolCtrl, _super);
      function Qznn_goldPoolCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.sprite_goldImg = null;
        return _this;
      }
      Qznn_goldPoolCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Qznn_goldPoolCtrl.prototype.defineNetEvents = function() {
        this.n_events = {};
        this.n_events[QznnConst_1.default.clientEvent.onSettle] = this.onSettle_bull;
      };
      Qznn_goldPoolCtrl.prototype.defineGlobalEvents = function() {
        this.g_events[GEventDef_1.default.bull_flyGold] = this.onModules_flyGold;
      };
      Qznn_goldPoolCtrl.prototype.connectUi = function() {};
      Qznn_goldPoolCtrl.prototype.start = function() {};
      Qznn_goldPoolCtrl.prototype.onSettle_bull = function(msg) {
        console.log("onSettle_bull金币结算==", msg);
        var winViewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(msg.winSeatId);
        var failIdList = [];
        var maxSeatNum = this.view.getMaxSeatsCount();
        for (var i = 0; i < maxSeatNum; i++) i != winViewSeatId && failIdList.push(i);
        var dataList = [ {
          winId: winViewSeatId,
          failIdList: failIdList
        } ];
        this.flyGolds(dataList);
      };
      Qznn_goldPoolCtrl.prototype.onModules_flyGold = function(msg) {
        console.log("接收到金币飞行的消息", msg);
        var startPos = msg.startPos;
        var targetPos = msg.targetPos;
        var tagStr = msg.tagStr;
        this.view.flyByPos(startPos, targetPos, null, function() {
          console.log("飞行结束，发送消息", tagStr);
          QznnLogic_1.default.getInstance().emit_flyGoldEnd(tagStr);
        });
      };
      Qznn_goldPoolCtrl.prototype.flyGolds = function(dataList) {
        var _this = this;
        dataList = dataList.concat([]);
        var flyData;
        var flyFunc = function() {
          var i, j, curId, curGroupNum;
          curGroupNum = flyData.failIdList.length;
          for (j = 0; j < flyData.failIdList.length; j++) {
            curId = flyData.failIdList[j];
            _this.view.flyGold(curId, flyData.winId, function() {}, function() {
              _this.dict_anis || (_this.dict_anis = {});
              _this.dict_anis[flyData.winId] ? _this.dict_anis[flyData.winId].play() : QznnLogic_1.default.getInstance().openGoldFalsh(function(curPrefab, curNode) {
                _this.dict_anis[flyData.winId] = curNode.getComponent(cc.Animation);
                curNode.position = _this.view.getPosByViewSeatId(flyData.winId);
              });
              curGroupNum -= 1;
              if (curGroupNum < 1) {
                flyData = dataList.splice(0, 1)[0];
                flyData && flyFunc();
              }
            });
          }
        };
        flyData = dataList.splice(0, 1)[0];
        flyData && flyFunc();
      };
      Qznn_goldPoolCtrl.prototype.chooseChip = function(startSeatId, targetPos, cb) {
        this.view.flyChips(startSeatId, targetPos, cb);
      };
      __decorate([ property({
        type: cc.SpriteFrame,
        displayName: "goldImg"
      }) ], Qznn_goldPoolCtrl.prototype, "sprite_goldImg", void 0);
      Qznn_goldPoolCtrl = __decorate([ ccclass ], Qznn_goldPoolCtrl);
      return Qznn_goldPoolCtrl;
    }(BaseCtrl_1.default);
    exports.default = Qznn_goldPoolCtrl;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Bull/BullPosMgr": "BullPosMgr",
    "../../../Plat/GameMgrs/GEventDef": "GEventDef",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../../Qznn/QznnMgr/QznnConst": "QznnConst",
    "../QznnMgr/QznnLogic": "QznnLogic"
  } ],
  Qznn_tipClock: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8c3885yBiBOI4q3d1SSasjR", "Qznn_tipClock");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var GEventDef_1 = require("../../../Plat/GameMgrs/GEventDef");
    var UserMgr_1 = require("../../../Plat/GameMgrs/UserMgr");
    var QznnLogic_1 = require("../QznnMgr/QznnLogic");
    var QznnConst_1 = require("../QznnMgr/QznnConst");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var TipStr = {
      idle: "旁观中",
      waitStart: "等待房主%s开始游戏",
      waitChooseChip: "等待玩家下注",
      thinking: "查看手牌:%s",
      waitTanpai: "等待玩家摊牌:%s",
      waitRestart: "等待重新开始"
    };
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      Model.prototype.getCurWaitTime = function() {
        return QznnLogic_1.default.getInstance().getCurWaitTime();
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          lbl_info: null
        };
        _this.node = null;
        _this.intervalID = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.lbl_info = ctrl.lbl_info;
      };
      View.prototype.setInfo = function(info) {
        this.node.active = true;
        this.ui.lbl_info.string = info;
      };
      View.prototype.startCountDown = function(curStr) {
        void 0 === curStr && (curStr = "%s");
        this.clearCountDown();
        this.node.active = true;
        this.countDownStr = curStr;
        var time = this.model.getCurWaitTime();
        time > 0 ? this.showCountDown(time) : ctrl.finish();
      };
      View.prototype.hideTipInfo = function() {
        this.node.active = false;
      };
      View.prototype.clearCountDown = function() {
        clearInterval(this.intervalID);
        this.intervalID = null;
        this.hideTipInfo();
      };
      View.prototype.showCountDown = function(time) {
        var _this = this;
        var curTime = time;
        this.ui.lbl_info.string = this.formatStr(this.countDownStr, curTime);
        this.intervalID = setInterval(function() {
          if (curTime > 0) {
            curTime -= 1;
            _this.ui.lbl_info.string = _this.formatStr(_this.countDownStr, curTime);
          } else _this.clearCountDown();
        }, 1e3);
      };
      View.prototype.formatStr = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
        var t = args, e = t.length;
        if (e < 1) return "";
        var i = /(%d)|(%s)/, n = 1, r = t[0], s = "string" == typeof r && i.test(r);
        if (s) for (var o = /%s/; n < e; ++n) {
          var a = t[n], c = "number" == typeof a ? i : o;
          c.test(r) ? r = r.replace(c, a) : r += " " + a;
        } else if (e > 1) for (;n < e; ++n) r += " " + t[n]; else r = "" + r;
        return r;
      };
      return View;
    }(BaseView_1.default);
    var Qznn_tipClock = function(_super) {
      __extends(Qznn_tipClock, _super);
      function Qznn_tipClock() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.lbl_info = null;
        return _this;
      }
      Qznn_tipClock.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Qznn_tipClock.prototype.defineNetEvents = function() {
        this.n_events = {};
        this.n_events[QznnConst_1.default.clientEvent.onProcess] = this.onProcess;
        this.n_events["onPrepare"] = this.onPrepare;
        this.n_events[QznnConst_1.default.clientEvent.onTanPai] = this.onTanPai;
      };
      Qznn_tipClock.prototype.defineGlobalEvents = function() {
        this.g_events = {};
        this.g_events[GEventDef_1.default.bull_giveCardEnd] = this.onGiveCardEnd;
      };
      Qznn_tipClock.prototype.connectUi = function() {};
      Qznn_tipClock.prototype.start = function() {
        this.view.setInfo(TipStr.idle);
      };
      Qznn_tipClock.prototype.onProcess = function(msg) {
        var _this = this;
        switch (msg.process) {
         case QznnConst_1.default.process.start:
          this.view.setInfo(TipStr.waitChooseChip);
          this.waitId = setTimeout(function() {
            _this.view.hideTipInfo();
          }, 300);
          break;

         case QznnConst_1.default.process.giveCards:
          clearTimeout(this.waitId);
          this.waitId = null;
          break;

         case QznnConst_1.default.process.settle:
          this.view.clearCountDown();
          this.view.setInfo(TipStr.waitRestart);
        }
      };
      Qznn_tipClock.prototype.onPrepare = function(msg) {
        if (msg.seatid == QznnLogic_1.default.getInstance().getMyLogicSeatId()) {
          var uid = RoomMgr_1.default.getInstance().getRoomOwner();
          var curStr = this.view.formatStr(TipStr.waitStart, UserMgr_1.default.getInstance().getUserById(uid).nickname);
          this.view.setInfo(curStr);
        }
      };
      Qznn_tipClock.prototype.onTanPai = function(msg) {
        msg.seatId == QznnLogic_1.default.getInstance().getMyLogicSeatId() && this.view.startCountDown(TipStr.waitTanpai);
      };
      Qznn_tipClock.prototype.onGiveCardEnd = function() {
        var time = QznnLogic_1.default.getInstance().getCurWaitTime();
        this.view.startCountDown(TipStr.thinking);
      };
      Qznn_tipClock.prototype.onDestroy = function() {
        clearInterval(this.view.intervalID);
        clearTimeout(this.waitId);
        this.view.intervalID = null;
        this.waitId = null;
        _super.prototype.onDestroy.call(this);
      };
      __decorate([ property(cc.Label) ], Qznn_tipClock.prototype, "lbl_info", void 0);
      Qznn_tipClock = __decorate([ ccclass ], Qznn_tipClock);
      return Qznn_tipClock;
    }(BaseCtrl_1.default);
    exports.default = Qznn_tipClock;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/GEventDef": "GEventDef",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/GameMgrs/UserMgr": "UserMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../QznnMgr/QznnConst": "QznnConst",
    "../QznnMgr/QznnLogic": "QznnLogic"
  } ],
  Rank_list: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5cdcdf8SkpCcb8IVH9vluwQ", "Rank_list");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.rank_begin = null;
        _this.rank_end = null;
        _this.icon_width = null;
        _this.icon_height = null;
        _this.rank_record = null;
        _this.scroll_move_bol = null;
        _this.scroll_bol = null;
        _this.rank_list = null;
        _this.rank_list = new Array();
        _this.rank_begin = 0;
        _this.rank_end = 50;
        _this.icon_width = 70;
        _this.icon_height = 70;
        _this.rank_record = true;
        _this.scroll_move_bol = false;
        _this.scroll_bol = true;
        return _this;
      }
      Model.prototype.addRankData = function() {
        var count = 10;
        var myInfo = UserMgr_1.default.getInstance().getMyInfo();
        for (var i = this.rank_begin; i < this.rank_begin + count; i++) this.rank_list[i] = {
          index: i + 1,
          id: 1,
          icon: myInfo.headid,
          url_icon: myInfo.headurl
        };
      };
      Model.prototype.getRankBegin = function() {
        return this.rank_begin;
      };
      Model.prototype.setRankBegin = function(num) {
        this.rank_begin = num;
      };
      Model.prototype.getRankEnd = function() {
        return this.rank_end;
      };
      Model.prototype.setRankRecord = function(state) {
        this.rank_record = state;
      };
      Model.prototype.getRankRecord = function() {
        return this.rank_record;
      };
      Model.prototype.setBolScroll = function(state) {
        this.scroll_bol = state;
      };
      Model.prototype.getBolScroll = function() {
        return this.scroll_bol;
      };
      Model.prototype.setBolScrollMove = function(state) {
        this.scroll_move_bol = state;
      };
      Model.prototype.getBolScrollMove = function() {
        return this.scroll_move_bol;
      };
      Model.prototype.getRankData = function() {
        return this.rank_list;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_rankOpen: null,
          node_rankView: null,
          node_rankList: null,
          spriteFrame_rank1: null,
          spriteFrame_rank2: null,
          spriteFrame_rank3: null,
          rank_pos: null,
          rank_size: null,
          rank_icon_size: null
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_rankOpen = ctrl.node_rankOpen;
        this.ui.node_rankView = ctrl.node_rankView;
        this.ui.node_rankList = ctrl.node_rankList;
        this.ui.spriteFrame_rank1 = ctrl.spriteFrame_rank1;
        this.ui.spriteFrame_rank2 = ctrl.spriteFrame_rank2;
        this.ui.spriteFrame_rank3 = ctrl.spriteFrame_rank3;
        this.ui.rank_pos = ctrl.rank_pos;
        this.ui.rank_size = ctrl.rank_size;
        this.ui.rank_icon_size = ctrl.rank_icon_size;
      };
      View.prototype.addRankPlayer = function(i, icon, url) {
        var _this = this;
        var curNode = new cc.Node();
        var curPprite = curNode.addComponent(cc.Sprite);
        curNode.parent = this.ui.node_rankList;
        cc.loader.loadRes("Icons/img_mrtx_1", cc.SpriteFrame, function(err, spriteFrame) {
          if (err) cc.error(err); else {
            curPprite.spriteFrame = spriteFrame;
            curNode.width = _this.ui.rank_icon_size.width;
            curNode.height = _this.ui.rank_icon_size.height;
          }
        });
        if (i <= 3) {
          var picNode = new cc.Node();
          picNode.addComponent(cc.Sprite);
          picNode.parent = curNode;
          picNode.position = cc.p(this.ui.rank_pos.x, this.ui.rank_pos.y);
          var picSprite = picNode.getComponent(cc.Sprite);
          1 == i ? picSprite.spriteFrame = this.ui.spriteFrame_rank1 : 2 == i ? picSprite.spriteFrame = this.ui.spriteFrame_rank2 : 3 == i && (picSprite.spriteFrame = this.ui.spriteFrame_rank3);
          picNode.width = this.ui.rank_size.width;
          picNode.height = this.ui.rank_size.height;
        }
        return curNode;
      };
      View.prototype.setRankHeight = function(count) {
        var layout = this.ui.node_rankList.getComponent(cc.Layout), height = layout.paddingTop + layout.paddingBottom;
        this.ui.node_rankList.height = height - layout.spacingY + count * (this.ui.rank_icon_size.height + layout.spacingY);
      };
      View.prototype.refreshRank = function() {
        var rank_list = this.model.getRankData();
        var itemNum = rank_list.length;
        this.setRankHeight(itemNum);
        var begin_num = this.model.getRankBegin();
        for (var i = begin_num; i < itemNum; i++) {
          var odd = rank_list[i];
          var curItemComp = this.addRankPlayer(odd.index, odd.icon, odd.url_icon);
        }
        this.model.setRankBegin(itemNum);
        this.model.setRankRecord(true);
      };
      return View;
    }(BaseView_1.default);
    var RankCtrl = function(_super) {
      __extends(RankCtrl, _super);
      function RankCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_rankOpen = null;
        _this.node_rankView = null;
        _this.node_rankList = null;
        _this.spriteFrame_rank1 = null;
        _this.spriteFrame_rank2 = null;
        _this.spriteFrame_rank3 = null;
        _this.rank_pos = null;
        _this.rank_size = null;
        _this.rank_icon_size = null;
        return _this;
      }
      RankCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.model.addRankData();
        this.view.refreshRank();
      };
      RankCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqMyInfo": this.http_reqMyInfo
        };
      };
      RankCtrl.prototype.defineGlobalEvents = function() {};
      RankCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.node_rankOpen, this.btn_rankOpen_cb, "点击小按钮打开排行榜");
        this.connect(G_UiType.scroll, this.ui.node_rankList, this.rank_view_cb, "切换列表内容");
      };
      RankCtrl.prototype.btn_rankOpen_cb = function(node, event) {
        this.start_sub_module(G_MODULE.Rank);
      };
      RankCtrl.prototype.http_reqMyInfo = function(msg) {};
      RankCtrl.prototype.rank_view_cb = function(node, event) {
        console.log("rank_view_cb:" + event.type);
        if (event.type == cc.Node.EventType.TOUCH_MOVE) {
          var rank_list = this.model.getRankData();
          var itemNum = rank_list.length;
          var node_height = node.height - this.ui.node_rankView.height;
          if (.25 * node_height * 4 < node.y && true == this.model.getRankRecord() && itemNum < this.model.getRankEnd() && itemNum > 0) {
            this.model.setRankRecord(false);
            this.model.addRankData();
            this.view.refreshRank();
          }
          this.model.getBolScrollMove() && this.model.setBolScroll(false);
          this.model.setBolScrollMove(true);
        }
        if (event.type == cc.Node.EventType.TOUCH_END) {
          true == this.model.getBolScroll() && this.start_sub_module(G_MODULE.Rank);
          this.model.setBolScroll(true);
          this.model.setBolScrollMove(false);
        }
        if (event.type == cc.Node.EventType.TOUCH_CANCEL) {
          this.model.setBolScroll(true);
          this.model.setBolScrollMove(false);
        }
      };
      __decorate([ property(cc.Node) ], RankCtrl.prototype, "node_rankOpen", void 0);
      __decorate([ property(cc.Node) ], RankCtrl.prototype, "node_rankView", void 0);
      __decorate([ property(cc.Node) ], RankCtrl.prototype, "node_rankList", void 0);
      __decorate([ property(cc.SpriteFrame) ], RankCtrl.prototype, "spriteFrame_rank1", void 0);
      __decorate([ property(cc.SpriteFrame) ], RankCtrl.prototype, "spriteFrame_rank2", void 0);
      __decorate([ property(cc.SpriteFrame) ], RankCtrl.prototype, "spriteFrame_rank3", void 0);
      __decorate([ property(cc.p) ], RankCtrl.prototype, "rank_pos", void 0);
      __decorate([ property(cc.Size) ], RankCtrl.prototype, "rank_size", void 0);
      __decorate([ property(cc.Size) ], RankCtrl.prototype, "rank_icon_size", void 0);
      RankCtrl = __decorate([ ccclass ], RankCtrl);
      return RankCtrl;
    }(BaseCtrl_1.default);
    exports.default = RankCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  RechargeMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3fbae8hfgFCBpPoWafmv0nC", "RechargeMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var UserMgr_1 = require("./UserMgr");
    var MyMd5_1 = require("../Libs/MyMd5");
    var FrameMgr_1 = require("./FrameMgr");
    var RechargeMgr = function(_super) {
      __extends(RechargeMgr, _super);
      function RechargeMgr() {
        var _this = _super.call(this) || this;
        _this.billid = null;
        _this.routes = null;
        _this.infoList = null;
        _this.billid = null;
        _this.routes = {
          "http.reqBill": _this.http_reqBill,
          onPay: _this.onPay,
          "http.reqIosRecharge": _this.http_reqIosRecharge,
          "http.reqGoodsList": _this.http_reqGoodsList,
          onNotify: _this.onNotify
        };
        _this.infoList = null;
        return _this;
      }
      RechargeMgr.prototype.onPay = function(msg) {};
      RechargeMgr.prototype.http_reqBill = function(msg) {
        this.billid = msg.billid;
        this.send_msg("http.reqPay", {
          billid: this.billid
        });
      };
      RechargeMgr.prototype.http_reqIosRecharge = function(msg) {
        console.log("http_reqIosRecharge", msg);
      };
      RechargeMgr.prototype.http_reqGoodsList = function(msg) {
        this.infoList = msg.result;
        console.log("http_reqGoodsList", this.infoList);
      };
      RechargeMgr.prototype.getGoodsList = function() {
        return this.infoList;
      };
      RechargeMgr.prototype.onNotify = function(msg) {
        console.log("onNotify");
        if (7 == msg.type) if (0 == msg.state) {
          FrameMgr_1.default.getInstance().showMsgBox("充值成功！此次充值获得" + msg.gold + "钻", function() {}, "恭喜");
          UserMgr_1.default.getInstance().reqMyInfo();
        } else FrameMgr_1.default.getInstance().showMsgBox("充值失败", function() {}, "提示");
      };
      RechargeMgr.prototype.reqBill = function(id) {
        var billinfo = {
          id: id
        };
        this.send_msg("http.reqBill", billinfo);
      };
      RechargeMgr.prototype.reqPay = function(billid) {
        var billinfo = {
          billid: billid
        };
        this.send_msg("http.reqPay", billinfo);
      };
      RechargeMgr.prototype.reqBuyGoods = function(goodstype, goodsid, goodnum) {
        if (cc.sys.os == cc.sys.OS_IOS) this.Ios_Recharge(); else {
          var goodsinfo = {
            goodstype: goodstype,
            goodsid: goodsid,
            goodnum: goodnum
          };
          this.send_msg("http.reqBuyGoods", goodsinfo);
        }
      };
      RechargeMgr.prototype.tsMd5 = function(str) {
        var md5 = MyMd5_1.default(str);
        md5 = md5.slice(5);
        return md5.toUpperCase();
      };
      RechargeMgr.prototype.reqReqGoodsList = function() {
        this.send_msg("http.reqGoodsList");
      };
      RechargeMgr.prototype.reqRechargeApi = function(uid, gameid, count) {
        var strData = "?";
        var timestamp = Date.parse(new Date()) / 1e3;
        strData = strData + "time=" + timestamp + "&";
        strData = strData + "count=" + count + "&";
        strData = strData + "guid=" + uid + "&";
        strData = strData + "gpid=" + gameid + "&";
        var str = "" + uid + timestamp;
        console.log(strData);
        strData = strData + "sign=" + this.tsMd5(str);
        console.log(strData);
        cc.sys.openURL("http://pay.088wanmei.com/api" + strData);
      };
      RechargeMgr.prototype.Ios_Recharge = function(ios_pay_id) {
        console.log("ios getBatteryPercent");
        jsb.reflection.callStaticMethod("AppController", "Charge:title:", "ios_recharge", ios_pay_id);
      };
      RechargeMgr.prototype.toIosrecharge = function(msg) {
        if ("" == msg) console.log("ios 内购失败！"); else {
          console.log("ios 内购成功！");
          var info = {
            apple_receipt: msg
          };
          this.send_msg("http.reqIosRecharge", info);
        }
        this.gemit("apple_receipt", {
          state: false
        });
      };
      RechargeMgr.getInstance = function() {
        this._instance || (this._instance = new RechargeMgr());
        return this._instance;
      };
      return RechargeMgr;
    }(BaseMgr_1.default);
    exports.default = RechargeMgr;
    window["ios_recharge"] = function ios_recharge(msg) {
      RechargeMgr.getInstance().toIosrecharge(msg);
    };
    cc._RF.pop();
  }, {
    "../Libs/BaseMgr": "BaseMgr",
    "../Libs/MyMd5": "MyMd5",
    "./FrameMgr": "FrameMgr",
    "./UserMgr": "UserMgr"
  } ],
  RecordMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9658bgig1BLF5Hz+7ieEj0s", "RecordMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var NetNotify_1 = require("../NetCenter/NetNotify");
    var RoomMgr_1 = require("./RoomMgr");
    var GEventDef_1 = require("./GEventDef");
    var GameNet_1 = require("../NetCenter/GameNet");
    var BetMgr_1 = require("./BetMgr");
    var MahjongDef_1 = require("../../GameCommon/Mahjong/MahjongDef");
    var UserMgr_1 = require("./UserMgr");
    var RecordMgr = function(_super) {
      __extends(RecordMgr, _super);
      function RecordMgr() {
        var _this = _super.call(this) || this;
        _this.process = null;
        _this.buhuaIndex = 0;
        _this.loopIndex = 0;
        _this.recordFrags = [];
        _this.loopInfos = null;
        _this.loopCount = 0;
        _this.looptimer = null;
        _this.loopInterTime = 600;
        _this.recordcode = "";
        _this.mahjongLogic = null;
        _this.bVideoMode = false;
        _this.gameId = null;
        _this.seats = null;
        _this.mySeatId = null;
        _this.routes = {
          "http.reqMatchRecord": _this.http_reqMatchRecord
        };
        return _this;
      }
      RecordMgr.prototype.isVideoMode = function() {
        return this.bVideoMode;
      };
      RecordMgr.prototype.getRecordCode = function() {
        return this.recordcode;
      };
      RecordMgr.prototype.getLoopIndex = function() {
        return this.loopIndex;
      };
      RecordMgr.prototype.getLoopCount = function() {
        return this.loopCount;
      };
      RecordMgr.prototype.reqMatchRecord = function(game, recordCode) {
        this.gameId = game.id;
        this.recordcode = recordCode;
        console.log("请求录像的信息=", game, recordCode);
        var msg = {
          recordcode: this.recordcode
        };
        this.send_msg("http.reqMatchRecord", msg);
      };
      RecordMgr.prototype.http_reqMatchRecord = function(msg) {
        this.mySeatId = 0;
        var record = JSON.parse(msg.record);
        var cache = record.cache;
        var seatInfos = record.seats;
        var roundIndex = record.roundindex;
        var seatCount = 0;
        this.seats = {};
        for (var key in seatInfos) {
          var uid = seatInfos[key].uid;
          this.seats[key] = uid;
          uid == UserMgr_1.default.getInstance().getUid() && (this.mySeatId = parseInt(key));
          seatCount++;
        }
        this.recordcode = "" + this.recordcode + this.mySeatId;
        this.record = {};
        for (var key in cache) {
          var process = parseInt(key);
          var myLoopInfos = [];
          if (process == MahjongDef_1.MahjongDef.process_loop) {
            var loopInfos = cache[key];
            for (var i = 0; i < loopInfos.length; ++i) {
              var item = loopInfos[i];
              var type = item[0];
              if (type == MahjongDef_1.MahjongDef.looprc_event) {
                var value = item[1];
                if (value.seatId == this.mySeatId) {
                  var param = value.param;
                  var events = param.events;
                  var finalEvents = [];
                  for (var j = 0; j < events.length; ++j) {
                    var event = events[j];
                    if (event == MahjongDef_1.MahjongDef.event_chupai || event == MahjongDef_1.MahjongDef.event_gaipai) {
                      console.log("哈哈是出牌");
                      continue;
                    }
                    finalEvents.push(event);
                  }
                  if (finalEvents.length > 0) {
                    var disablepass = param.disablepass;
                    myLoopInfos.push([ type, {
                      events: finalEvents,
                      disablepass: disablepass
                    } ]);
                  }
                } else console.log("哈哈不是自己的事件");
              } else myLoopInfos.push(item);
            }
            this.record[process] = myLoopInfos;
          } else this.record[process] = cache[key];
        }
        this.bVideoMode = true;
        BetMgr_1.default.getInstance().setGameId(this.gameId);
        RoomMgr_1.default.getInstance().setVideoMode(true);
        var roomInfo = {
          seatcount: seatCount,
          v_roundcount: 1,
          roomtype: 2,
          gamecate: 1
        };
        RoomMgr_1.default.getInstance().setRoomInfo(roomInfo);
        RoomMgr_1.default.getInstance().setFangKaCfg({});
        this.start_sub_module(G_MODULE.LoadingGame);
      };
      RecordMgr.prototype.startPlaying = function() {
        RoomMgr_1.default.getInstance().updateRoomUsers({
          seats: this.seats
        });
        console.log("哈哈哈=", this.record, MahjongDef_1.MahjongDef.process_kaijin);
        var jin = this.record[MahjongDef_1.MahjongDef.process_kaijin].jin;
        var handcards = this.record[MahjongDef_1.MahjongDef.process_fapai].handcards;
        for (var i = 0; i < handcards.length; ++i) {
          var handcard = handcards[i];
          for (var j = 0; j < handcard.length; ++j) 0 == handcard[j] && (handcard[j] = jin);
        }
        this.loopInfos = this.record[MahjongDef_1.MahjongDef.process_loop];
        this.loopCount = this.loopInfos.length;
        this.mahjongLogic = RoomMgr_1.default.getInstance().getLogic().getInstance();
        this.setProcess(MahjongDef_1.MahjongDef.process_fapai);
      };
      RecordMgr.prototype.getRecord = function() {
        return this.record;
      };
      RecordMgr.getInstance = function() {
        this._instance || (this._instance = new RecordMgr());
        return this._instance;
      };
      RecordMgr.prototype.setProcess = function(process) {
        this.process = process;
        switch (process) {
         case MahjongDef_1.MahjongDef.process_fapai:
          this.process_fapai();
          break;

         case MahjongDef_1.MahjongDef.process_buhua:
          this.process_buhua();
          break;

         case MahjongDef_1.MahjongDef.process_kaijin:
          this.process_kaijin();
          break;

         case MahjongDef_1.MahjongDef.process_loop:
          this.process_loop();
          break;

         case MahjongDef_1.MahjongDef.process_gamesettle:
          this.process_gamesettle();
        }
      };
      RecordMgr.prototype.process_dingzhuang = function() {
        var data = this.record[MahjongDef_1.MahjongDef.process_dingzhuang];
        var next = function() {
          this.setProcess(MahjongDef_1.MahjongDef.process_fapai);
        };
        this.broadCast(MahjongDef_1.MahjongDef.onProcess, data, 0, next);
      };
      RecordMgr.prototype.process_fapai = function() {
        var data = this.record[MahjongDef_1.MahjongDef.process_fapai];
        console.log("data=", data);
        var next = function() {
          this.setProcess(MahjongDef_1.MahjongDef.process_buhua);
        }.bind(this);
        this.broadCast(MahjongDef_1.MahjongDef.onProcess, data, 2, next);
      };
      RecordMgr.prototype.process_buhua = function() {
        var needbuhua = false;
        var buhuaarr = this.record[MahjongDef_1.MahjongDef.process_buhua];
        null == buhuaarr ? needbuhua = false : this.buhuaIndex < buhuaarr.length && (needbuhua = true);
        if (needbuhua) {
          var huapaiarr = buhuaarr[this.buhuaIndex].value[0];
          var bupaiarr = buhuaarr[this.buhuaIndex].value[1];
          this.buhuaIndex++;
          var param = {
            process: this.process,
            huapaiarr: huapaiarr,
            bupaiarr: bupaiarr
          };
          console.log("param=", param);
          var next = function() {
            this.setProcess(MahjongDef_1.MahjongDef.process_buhua);
          };
          this.broadCast(MahjongDef_1.MahjongDef.onProcess, param, 2, next);
          return;
        }
        this.setProcess(MahjongDef_1.MahjongDef.process_kaijin);
      };
      RecordMgr.prototype.process_kaijin = function() {
        var param = this.record[MahjongDef_1.MahjongDef.process_kaijin];
        var next = function() {
          this.setProcess(MahjongDef_1.MahjongDef.process_loop);
        };
        this.broadCast(MahjongDef_1.MahjongDef.onProcess, param, 2, next);
      };
      RecordMgr.prototype.process_loop = function() {
        var param = {
          process: this.process
        };
        this.broadCast(MahjongDef_1.MahjongDef.onProcess, param);
        this.startLoop();
      };
      RecordMgr.prototype.clearLoopTimer = function() {
        if (null != this.looptimer) {
          clearInterval(this.looptimer);
          this.looptimer = null;
        }
      };
      RecordMgr.prototype.destroy = function() {
        this.clearLoopTimer();
        delete RecordMgr._instance;
        RecordMgr._instance = null;
      };
      RecordMgr.prototype.runLoop = function() {
        if (this.loopIndex >= this.loopCount) {
          this.clearLoopTimer();
          this.setProcess(MahjongDef_1.MahjongDef.process_gamesettle);
          return;
        }
        var loopType = this.loopInfos[this.loopIndex][0];
        var loopData = this.loopInfos[this.loopIndex][1];
        loopData.card && (loopData.card = parseInt(loopData.card));
        var event = null;
        switch (loopType) {
         case MahjongDef_1.MahjongDef.looprc_op:
          event = MahjongDef_1.MahjongDef.onOp;
          break;

         case MahjongDef_1.MahjongDef.looprc_seatchange:
          event = MahjongDef_1.MahjongDef.onSeatChange;
          break;

         case MahjongDef_1.MahjongDef.looprc_event:
          event = MahjongDef_1.MahjongDef.onEvent;
        }
        console.log("event=", event);
        var frag = this.mahjongLogic.getRecordFrag();
        this.recordFrags[this.loopIndex] = frag;
        NetNotify_1.default.getInstance().dealResp(event, loopData);
        GameNet_1.default.getInstance().emit(event, loopData);
        this.loopIndex++;
        this.gemit(GEventDef_1.default.loopChanged);
      };
      RecordMgr.prototype.startLoop = function() {
        this.looptimer = setInterval(this.runLoop.bind(this), this.loopInterTime);
      };
      RecordMgr.prototype.stopLoop = function() {
        this.clearLoopTimer();
      };
      RecordMgr.prototype.process_gamesettle = function() {
        var param = {
          process: this.process
        };
        this.broadCast(MahjongDef_1.MahjongDef.onProcess, param);
        this.broadCast("http.reqSettle", {
          settle: JSON.stringify(this.record[MahjongDef_1.MahjongDef.process_gamesettle].value)
        });
      };
      RecordMgr.prototype.broadCast = function(route, param, time, next) {
        var _this = this;
        void 0 === time && (time = 0);
        void 0 === next && (next = null);
        param || (param = {});
        var dofun = function() {
          NetNotify_1.default.getInstance().dealResp(route, param);
          GameNet_1.default.getInstance().emit(route, param);
        };
        var timer = setTimeout(function() {
          clearTimeout(timer);
          dofun.bind(_this)();
          next && next.bind(_this)();
        }, 1e3 * time);
      };
      RecordMgr.prototype.gotoPreStep = function() {
        if (this.loopIndex <= 0) return;
        this.loopIndex = this.loopIndex - 1;
        var data = this.recordFrags[this.loopIndex];
        console.log("this.loopIndex=", this.loopIndex);
        this.broadCast("onSyncData", JSON.parse(data));
      };
      RecordMgr.prototype.gotoNextStep = function() {
        this.runLoop();
      };
      RecordMgr.prototype.replay = function() {
        this.loopIndex = 0;
        var data = this.recordFrags[this.loopIndex];
        console.log("this.loopIndex=", this.loopIndex);
        this.broadCast("onSyncData", JSON.parse(data));
        this.setProcess(MahjongDef_1.MahjongDef.process_loop);
      };
      return RecordMgr;
    }(BaseMgr_1.default);
    exports.default = RecordMgr;
    cc._RF.pop();
  }, {
    "../../GameCommon/Mahjong/MahjongDef": "MahjongDef",
    "../Libs/BaseMgr": "BaseMgr",
    "../NetCenter/GameNet": "GameNet",
    "../NetCenter/NetNotify": "NetNotify",
    "./BetMgr": "BetMgr",
    "./GEventDef": "GEventDef",
    "./RoomMgr": "RoomMgr",
    "./UserMgr": "UserMgr"
  } ],
  RichIconCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "12fac+Auf9BRoxJwL/B87dR", "RichIconCfg");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCfg_1 = require("../Libs/BaseCfg");
    var RichIconCfg = function(_super) {
      __extends(RichIconCfg, _super);
      function RichIconCfg() {
        var _this = _super.call(this) || this;
        _this.richPath = null;
        _this.richdata = null;
        _this.richPath = _this.getFullPath("richtext");
        return _this;
      }
      RichIconCfg.getInstance = function() {
        this._instance || (this._instance = new RichIconCfg());
        return this._instance;
      };
      RichIconCfg.prototype.loadCb = function(name, data) {
        this.loaded = true;
        this.richdata = data;
        console.log("RichIconCfg", this.richdata);
      };
      RichIconCfg.prototype.load = function() {
        this.loadRes(this.richPath, this.loadCb);
      };
      RichIconCfg.prototype.getRichCfg = function() {
        return this.richdata;
      };
      return RichIconCfg;
    }(BaseCfg_1.default);
    exports.default = RichIconCfg;
    cc._RF.pop();
  }, {
    "../Libs/BaseCfg": "BaseCfg"
  } ],
  RichTextMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "98e99KzRRhMcbvw0oPzwnmG", "RichTextMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var RichIconCfg_1 = require("../CfgMgrs/RichIconCfg");
    var RichTextMgr = function() {
      function RichTextMgr() {
        this.ICON_LIST = RichIconCfg_1.default.getInstance().getRichCfg();
      }
      RichTextMgr.getInstance = function() {
        this._instance || (this._instance = new RichTextMgr());
        return this._instance;
      };
      RichTextMgr.prototype.richTextPicToName = function(strData) {
        var count = this.ICON_LIST.length;
        for (var i = 0; i < count; i++) {
          var data = this.ICON_LIST[i];
          if (strData == data.pic) return data.text;
        }
        return "";
      };
      RichTextMgr.prototype.richTextColor = function(strData, color) {
        void 0 === color && (color = "#ffffff");
        if ("" == strData) return "";
        var strContent = "";
        strContent = "<color=" + color + ">" + strData + "</color>";
        return strContent;
      };
      RichTextMgr.prototype.richTextImg = function(strData, color) {
        void 0 === color && (color = "#ffffff");
        if ("" == strData) return "";
        var strContent = "", strGap = "", bolIcon = false, count = this.ICON_LIST.length;
        for (var i = 0; i < count; i++) {
          var data = this.ICON_LIST[i];
          if (strData == data.text) {
            strGap = data.pic;
            bolIcon = true;
            break;
          }
        }
        strContent = bolIcon ? "<img src='" + strGap + "' />" : "<color=" + color + ">" + strData + "</color>";
        return strContent;
      };
      RichTextMgr.prototype.richTextBlend = function(strData, color) {
        void 0 === color && (color = "#ffffff");
        var strContent = "", strGap = "", strIcon = "", bolIcon = false;
        for (var i = 0; i < strData.length; i++) {
          var str = strData.charAt(i);
          if (bolIcon) if ("]" == str) {
            bolIcon = false;
            strIcon += str;
            strContent += this.richTextImg(strIcon, color);
            strIcon = "";
          } else if ("[" == str) {
            strContent += this.richTextColor(strIcon, color);
            strIcon = str;
          } else strIcon += str; else if ("[" == str) {
            bolIcon = true;
            strIcon = str;
            strContent += this.richTextColor(strGap, color);
            strGap = "";
          } else strGap += str;
        }
        if ("" != strGap || "" != strIcon) {
          strContent += this.richTextColor(strIcon, color);
          strContent += this.richTextColor(strGap, color);
        }
        return strContent;
      };
      return RichTextMgr;
    }();
    exports.default = RichTextMgr;
    cc._RF.pop();
  }, {
    "../CfgMgrs/RichIconCfg": "RichIconCfg"
  } ],
  RoomApplyDissolutionCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2cf0feDsG9FEpo00d+Gw0hQ", "RoomApplyDissolutionCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var RoomMgr_1 = require("../../GameMgrs/RoomMgr");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.mySeatId = null;
        _this.applySeatId = null;
        _this.applySeats = null;
        _this.offline = null;
        _this.b_iHaveVote = false;
        _this.time = null;
        _this.spritechilds = null;
        _this.spriteparent = null;
        _this.time = 15;
        _this.mySeatId = RoomMgr_1.default.getInstance().getMySeatId();
        _this.applySeatId = RoomMgr_1.default.getInstance().getApplyDissolutionSeatId();
        _this.offline = RoomMgr_1.default.getInstance().getoffline();
        _this.updateApplySeats();
        console.log("3this.offline", _this.offline);
        return _this;
      }
      Model.prototype.getPlayerInfo = function(seatId) {
        var uid = RoomMgr_1.default.getInstance().users[seatId];
        var userinfo = UserMgr_1.default.getInstance().getUserById(uid);
        return userinfo;
      };
      Model.prototype.updateApplySeats = function() {
        this.applySeats = RoomMgr_1.default.getInstance().getApplySeats();
        for (var seatId in this.applySeats) if (seatId == this.mySeatId) {
          this.b_iHaveVote = true;
          break;
        }
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          richText_title: ctrl.RichText_title,
          node_tip: ctrl.Node_tip,
          btn_agree: ctrl.Button_agree,
          btn_refuse: ctrl.Button_refuse,
          spriteFrame_ash: ctrl.SpriteFrame_ash,
          spriteFrame_orange: ctrl.SpriteFrame_orange,
          spriteFrame_green: ctrl.SpriteFrame_green,
          spriteFrame_lixian: ctrl.SpriteFrame_lixian,
          Waittips: ctrl.Waittips,
          time: ctrl.time,
          seats: []
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.btn_agree.active = true;
        this.ui.btn_refuse.active = true;
        this.ui.time.node.active = true;
        ctrl.schedule(this.showTime, 1);
        this.ui.Waittips.active = false;
        var playercount = RoomMgr_1.default.getInstance().getSeatCount();
        var tip = this.ui.node_tip.getChildByName("tip_" + playercount);
        tip.active = true;
        this.model.spriteparent = tip.getChildren();
        var playerInfo = this.model.getPlayerInfo(this.model.applySeatId);
        var name = playerInfo.nickname;
        this.ui.richText_title.string = "(<color=#DB0F30>" + name + "</color>)发起解散房间投票";
        console.log("this.model.applySeats=", this.model.applySeats);
        console.log("this.model.offline=", this.model.offline);
        for (var seatId = 0; seatId < RoomMgr_1.default.getInstance().getSeatCount(); ++seatId) {
          var seat_data = RoomMgr_1.default.getInstance().getUidBySeatId(seatId);
          if (null != seat_data) {
            var count = this.model.offline.length;
            if (null != count) for (var i = 0; i < count; i++) if (seatId == this.model.offline[i]) {
              this.model.spriteparent[seatId].getChildByName("lixian").active = true;
              break;
            }
            var state = this.model.applySeats[seatId];
            1 == state && (this.model.spriteparent[seatId].getChildByName("agree").active = true);
            2 == state && (this.model.spriteparent[seatId].getChildByName("refuse").active = true);
          } else this.model.spriteparent[seatId].getChildByName("lixian").active = true;
        }
        this.updateAgreeButtons();
      };
      View.prototype.updateAgreeButtons = function() {
        if (this.model.b_iHaveVote) {
          this.ui.btn_agree.active = false;
          this.ui.btn_refuse.active = false;
          this.ui.time.node.active = false;
          this.ui.Waittips.active = true;
        }
      };
      View.prototype.updateTip = function(seatId) {
        console.log("updateTip 1", seatId);
        console.log("updateTip 2", this.model.spriteparent);
        console.log("updateTip 3", this.model.applySeats);
        var state = this.model.applySeats[seatId];
        1 == state && (this.model.spriteparent[seatId].getChildByName("agree").active = true);
        2 == state && (this.model.spriteparent[seatId].getChildByName("refuse").active = true);
        this.updateAgreeButtons();
      };
      View.prototype.showTime = function() {
        this.model.time--;
        if (this.model.time < 0) ctrl.unscheduleAllCallbacks(); else {
          console.log("这是ui的事件" + this.ui.time);
          this.ui.time.string = "(" + this.model.time + ")";
        }
      };
      return View;
    }(BaseView_1.default);
    var Prefab_ApplyDissolutionRoom = function(_super) {
      __extends(Prefab_ApplyDissolutionRoom, _super);
      function Prefab_ApplyDissolutionRoom() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.RichText_title = null;
        _this.Node_tip = null;
        _this.Button_agree = null;
        _this.Button_refuse = null;
        _this.SpriteFrame_ash = null;
        _this.SpriteFrame_orange = null;
        _this.SpriteFrame_green = null;
        _this.SpriteFrame_lixian = null;
        _this.Waittips = null;
        _this.time = null;
        return _this;
      }
      Prefab_ApplyDissolutionRoom.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_ApplyDissolutionRoom.prototype.defineNetEvents = function() {
        this.n_events = {
          onAgreeDissolutionRoom: this.onAgreeDissolutionRoom,
          onRefuseDissolutionRoom: this.onRefuseDissolutionRoom,
          onDissolutionRoom: this.onDissolutionRoom,
          "connector.entryHandler.enterRoom": this.connector_entryHandler_enterRoom,
          onUserOffLine: this.onUserOffLine
        };
      };
      Prefab_ApplyDissolutionRoom.prototype.onUserOffLine = function(msg) {
        console.log("这是服务起发过来的离线玩家消息", msg);
      };
      Prefab_ApplyDissolutionRoom.prototype.defineGlobalEvents = function() {};
      Prefab_ApplyDissolutionRoom.prototype.connector_entryHandler_enterRoom = function() {
        this.finish();
      };
      Prefab_ApplyDissolutionRoom.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.btn_agree, this.btn_agree_cb, "同意解散房间");
        this.connect(G_UiType.button, this.ui.btn_refuse, this.btn_refuse_cb, "拒绝解散房间");
      };
      Prefab_ApplyDissolutionRoom.prototype.onAgreeDissolutionRoom = function(msg) {
        this.model.updateApplySeats();
        this.view.updateTip(msg.seatId);
      };
      Prefab_ApplyDissolutionRoom.prototype.onRefuseDissolutionRoom = function(msg) {
        this.model.updateApplySeats();
        this.view.updateTip(msg.seatId);
      };
      Prefab_ApplyDissolutionRoom.prototype.onDissolutionRoom = function(msg) {
        var _this = this;
        var callback = cc.callFunc(function() {
          _this.node.active = false;
          _this.view.initUi();
          console.log("移除了自己onDissolutionRoom", msg);
          msg.result || FrameMgr_1.default.getInstance().showTips("有玩家拒绝解散房间，解散失败！", null, 35, cc.color(220, 24, 63), cc.p(0, 0), "Arial", 1500);
        });
        var delaytime = cc.delayTime(2);
        var seq = cc.sequence(delaytime, callback);
        this.node.runAction(seq);
      };
      Prefab_ApplyDissolutionRoom.prototype.btn_agree_cb = function() {
        RoomMgr_1.default.getInstance().agreeDissolutionRoom();
      };
      Prefab_ApplyDissolutionRoom.prototype.btn_refuse_cb = function() {
        RoomMgr_1.default.getInstance().refuseDissolutionRoom();
      };
      __decorate([ property(cc.RichText) ], Prefab_ApplyDissolutionRoom.prototype, "RichText_title", void 0);
      __decorate([ property(cc.Node) ], Prefab_ApplyDissolutionRoom.prototype, "Node_tip", void 0);
      __decorate([ property(cc.Node) ], Prefab_ApplyDissolutionRoom.prototype, "Button_agree", void 0);
      __decorate([ property(cc.Node) ], Prefab_ApplyDissolutionRoom.prototype, "Button_refuse", void 0);
      __decorate([ property(cc.SpriteFrame) ], Prefab_ApplyDissolutionRoom.prototype, "SpriteFrame_ash", void 0);
      __decorate([ property(cc.SpriteFrame) ], Prefab_ApplyDissolutionRoom.prototype, "SpriteFrame_orange", void 0);
      __decorate([ property(cc.SpriteFrame) ], Prefab_ApplyDissolutionRoom.prototype, "SpriteFrame_green", void 0);
      __decorate([ property(cc.SpriteFrame) ], Prefab_ApplyDissolutionRoom.prototype, "SpriteFrame_lixian", void 0);
      __decorate([ property(cc.Node) ], Prefab_ApplyDissolutionRoom.prototype, "Waittips", void 0);
      __decorate([ property(cc.Label) ], Prefab_ApplyDissolutionRoom.prototype, "time", void 0);
      Prefab_ApplyDissolutionRoom = __decorate([ ccclass ], Prefab_ApplyDissolutionRoom);
      return Prefab_ApplyDissolutionRoom;
    }(BaseCtrl_1.default);
    exports.default = Prefab_ApplyDissolutionRoom;
    cc._RF.pop();
  }, {
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/RoomMgr": "RoomMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  RoomAudioSettingCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1e6f1tw7pdKvIyeHUBmtM/1", "RoomAudioSettingCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var SettingMgr_1 = require("../../GameMgrs/SettingMgr");
    var AudioMgr_1 = require("../../GameMgrs/AudioMgr");
    var GameAudioCfg_1 = require("../../CfgMgrs/GameAudioCfg");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.musicSettingInfo = null;
        _this.totalVolume = 100;
        _this.yySliderValue = 0;
        _this.musicSettingInfo = SettingMgr_1.default.getInstance().getMusicInfo();
        console.log("musicSettingInfo", _this.musicSettingInfo);
        return _this;
      }
      Model.prototype.getPercent = function(type) {
        switch (type) {
         case "music":
          return this.musicSettingInfo.musicVolume / this.totalVolume;

         case "effect":
          return this.musicSettingInfo.effectVolume / this.totalVolume;

         case "yy":
          return this.musicSettingInfo.yyVolume / this.totalVolume;
        }
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          button_MusicSwitch: null,
          node_MusicVolume: null,
          node_MusicVolume_Progress: null,
          button_MusicVolumeHandle: null,
          button_EffectSwitch: null,
          node_EffectVolume: null,
          node_EffectVolume_Progress: null,
          button_EffectVolumeHandle: null,
          button_yySwitch: null,
          node_yyVolume: null,
          node_yyVolume_Progress: null,
          button_yyVolumeHandle: null,
          button_TipSwitch: null,
          button_TopolectSwitch: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.initMusicControlUi();
        this.initEffectControlUi();
        this.initYyControlUi();
        this.ui.button_TipSwitch = ctrl.TipSwitch;
        this.ui.button_TopolectSwitch = ctrl.TopolectSwitch;
        this.ui.button_TipSwitch.getComponent(cc.Toggle).isChecked = this.model.musicSettingInfo.bTipSwitch;
        this.ui.button_TopolectSwitch.getComponent(cc.Toggle).isChecked = this.model.musicSettingInfo.bTopolectSwitch;
      };
      View.prototype.initMusicControlUi = function() {
        var bMusicSwitch = this.model.musicSettingInfo.bMusicSwitch;
        this.ui.button_MusicSwitch = ctrl.MusicSwitch;
        this.ui.node_MusicVolume = ctrl.MusicVolume;
        this.ui.node_MusicVolume_Progress = ctrl.MusicVolumeProgress;
        this.ui.button_MusicSwitch.getComponent(cc.Toggle).isChecked = bMusicSwitch;
        this.ui.node_MusicVolume.getComponent(cc.Slider).progress = bMusicSwitch ? this.model.getPercent("music") : 0;
        this.ui.node_MusicVolume_Progress.progress = bMusicSwitch ? this.model.getPercent("music") : 0;
        this.ui.node_MusicVolume.getComponent(cc.Slider).enabled = bMusicSwitch;
        this.ui.node_MusicVolume_Progress.enabled = bMusicSwitch;
      };
      View.prototype.initEffectControlUi = function() {
        var bEffectSwitch = this.model.musicSettingInfo.bEffectSwitch;
        this.ui.button_EffectSwitch = ctrl.EffectSwitch;
        this.ui.node_EffectVolume = ctrl.EffectVolume;
        this.ui.node_EffectVolume_Progress = ctrl.EffectVolumeProgress;
        this.ui.button_EffectSwitch.getComponent(cc.Toggle).isChecked = bEffectSwitch;
        this.ui.node_EffectVolume.getComponent(cc.Slider).progress = bEffectSwitch ? this.model.getPercent("effect") : 0;
        this.ui.node_EffectVolume_Progress.progress = bEffectSwitch ? this.model.getPercent("effect") : 0;
        this.ui.node_EffectVolume.getComponent(cc.Slider).enabled = bEffectSwitch;
        this.ui.node_EffectVolume_Progress.enabled = bEffectSwitch;
      };
      View.prototype.initYyControlUi = function() {
        var bYySwitch = this.model.musicSettingInfo.bYySwitch;
        this.ui.button_yySwitch = ctrl.yySwitch;
        this.ui.node_yyVolume = ctrl.yyVolume;
        this.ui.node_yyVolume_Progress = ctrl.yyVolumeProgress;
        this.ui.button_yySwitch.getComponent(cc.Toggle).isChecked = bYySwitch;
        this.ui.node_yyVolume.getComponent(cc.Slider).progress = bYySwitch ? this.model.getPercent("yy") : 0;
        this.ui.node_yyVolume_Progress.progress = bYySwitch ? this.model.getPercent("yy") : 0;
        this.ui.node_yyVolume.getComponent(cc.Slider).enabled = bYySwitch;
        this.ui.node_yyVolume_Progress.enabled = bYySwitch;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_MusicSettingCtrl = function(_super) {
      __extends(Prefab_MusicSettingCtrl, _super);
      function Prefab_MusicSettingCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.MusicSwitch = null;
        _this.MusicVolume = null;
        _this.MusicVolumeProgress = null;
        _this.EffectSwitch = null;
        _this.EffectVolume = null;
        _this.EffectVolumeProgress = null;
        _this.yySwitch = null;
        _this.yyVolume = null;
        _this.yyVolumeProgress = null;
        _this.TipSwitch = null;
        _this.TopolectSwitch = null;
        return _this;
      }
      Prefab_MusicSettingCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_MusicSettingCtrl.prototype.defineNetEvents = function() {};
      Prefab_MusicSettingCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_MusicSettingCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.toggle, this.ui.button_MusicSwitch, this.SwitchCB, "切换音乐开关设置");
        this.connect(G_UiType.slider, this.ui.node_MusicVolume, this.VolumeCB, "切换音乐音量大小设置");
        this.connect(G_UiType.toggle, this.ui.button_EffectSwitch, this.SwitchCB, "切换音效开关设置");
        this.connect(G_UiType.slider, this.ui.node_EffectVolume, this.VolumeCB, "切换音效音量大小设置");
        this.connect(G_UiType.toggle, this.ui.button_yySwitch, this.SwitchCB, "切换语音开关设置");
        this.connect(G_UiType.slider, this.ui.node_yyVolume, this.VolumeCB, "切换语音音量大小设置");
        this.connect(G_UiType.toggle, this.ui.button_TipSwitch, this.SwitchCB, "切换提示音开关设置");
        this.connect(G_UiType.toggle, this.ui.button_TopolectSwitch, this.SwitchCB, "切换方言设置");
      };
      Prefab_MusicSettingCtrl.prototype.start = function() {};
      Prefab_MusicSettingCtrl.prototype.noTopolectOption = function() {
        console.log("roomAudiosetting");
        if (13 == SettingMgr_1.default.getInstance().getGameID() || 20 == SettingMgr_1.default.getInstance().getGameID() || 19 == SettingMgr_1.default.getInstance().getGameID() || 6 == SettingMgr_1.default.getInstance().getGameID() || 5 == SettingMgr_1.default.getInstance().getGameID()) {
          SettingMgr_1.default.getInstance().setProperty(false, "musicInfo", "bTopolectSwitch");
          console.log(SettingMgr_1.default.getInstance().getMusicInfo().bTopolectSwitch);
          this.ui.button_TopolectSwitch.getComponent(cc.Toggle).isChecked = SettingMgr_1.default.getInstance().getMusicInfo().bTopolectSwitch;
          this.ui.button_TopolectSwitch.active = false;
        }
      };
      Prefab_MusicSettingCtrl.prototype.SssClosePanel = function() {
        SettingMgr_1.default.getInstance().setProperty(true, "musicInfo", "bTopolectSwitch");
        console.log(SettingMgr_1.default.getInstance().getMusicInfo().bTopolectSwitch);
        this.ui.button_TopolectSwitch.getComponent(cc.Toggle).isChecked = SettingMgr_1.default.getInstance().getMusicInfo().bTopolectSwitch;
        this.ui.button_TopolectSwitch.active = true;
      };
      Prefab_MusicSettingCtrl.prototype.SwitchCB = function(event) {
        console.log(event.currentTarget);
        switch (event.currentTarget.name) {
         case "musicSwitch":
          var bMusicSwitch = this.model.musicSettingInfo.bMusicSwitch;
          var prog = bMusicSwitch ? 0 : this.model.getPercent("music");
          var node_musicVolume = this.ui.node_MusicVolume.getComponent(cc.Slider);
          node_musicVolume.progress = prog;
          this.ui.node_MusicVolume_Progress.progress = prog;
          node_musicVolume.enabled = !bMusicSwitch;
          this.ui.node_MusicVolume_Progress.enabled = !bMusicSwitch;
          SettingMgr_1.default.getInstance().setProperty(!bMusicSwitch, "musicInfo", "bMusicSwitch");
          bMusicSwitch ? SettingMgr_1.default.getInstance().getIsPlaza() ? AudioMgr_1.default.getInstance().pausebackgroudMusic() : GameAudioCfg_1.default.getInstance().pausebackgroudMusic() : SettingMgr_1.default.getInstance().getIsPlaza() ? AudioMgr_1.default.getInstance().resumebackgroudMusic() : GameAudioCfg_1.default.getInstance().resumebackgroudMusic();
          break;

         case "effectSwitch":
          var bEffectSwitch = this.model.musicSettingInfo.bEffectSwitch;
          var prog = bEffectSwitch ? 0 : this.model.getPercent("effect");
          var node_effectVolume = this.ui.node_EffectVolume.getComponent(cc.Slider);
          node_effectVolume.progress = prog;
          this.ui.node_EffectVolume_Progress.progress = prog;
          node_effectVolume.enabled = !bEffectSwitch;
          this.ui.node_EffectVolume_Progress.enabled = !bEffectSwitch;
          SettingMgr_1.default.getInstance().setProperty(!bEffectSwitch, "musicInfo", "bEffectSwitch");
          break;

         case "yySwitch":
          var bYySwitch = this.model.musicSettingInfo.bYySwitch;
          var prog = bYySwitch ? 0 : this.model.getPercent("yy");
          var node_yyVolume = this.ui.node_yyVolume.getComponent(cc.Slider);
          node_yyVolume.progress = prog;
          this.ui.node_yyVolume_Progress.progress = prog;
          node_yyVolume.enabled = !bYySwitch;
          this.ui.node_yyVolume_Progress.enabled = !bYySwitch;
          SettingMgr_1.default.getInstance().setProperty(!bYySwitch, "musicInfo", "bYySwitch");
          break;

         case "tipSwitch":
          console.log("tipSwitch");
          var bTipSwitch = this.model.musicSettingInfo.bTipSwitch;
          SettingMgr_1.default.getInstance().setProperty(!bTipSwitch, "musicInfo", "bTipSwitch");
          break;

         case "topolectSwitch":
          console.log("topolectSwitch");
          var bTopolectSwitch = this.model.musicSettingInfo.bTopolectSwitch;
          SettingMgr_1.default.getInstance().setProperty(!bTopolectSwitch, "musicInfo", "bTopolectSwitch");
        }
        this.model.musicSettingInfo = SettingMgr_1.default.getInstance().getMusicInfo();
        console.log("musicInfo开关:", this.model.musicSettingInfo);
      };
      Prefab_MusicSettingCtrl.prototype.VolumeCB = function(event) {
        console.log(event.currentTarget);
        if ("musicSlider" == event.currentTarget.name) {
          this.ui.node_MusicVolume_Progress.progress = this.ui.node_MusicVolume.getComponent(cc.Slider).progress;
          var value = 100 * this.ui.node_MusicVolume_Progress.progress;
          SettingMgr_1.default.getInstance().setProperty(value, "musicInfo", "musicVolume");
          0 == value ? SettingMgr_1.default.getInstance().getIsPlaza() ? AudioMgr_1.default.getInstance().pausebackgroudMusic() : GameAudioCfg_1.default.getInstance().pausebackgroudMusic() : SettingMgr_1.default.getInstance().getIsPlaza() ? AudioMgr_1.default.getInstance().resumebackgroudMusic() : GameAudioCfg_1.default.getInstance().resumebackgroudMusic();
        } else if ("effectSlider" == event.currentTarget.name) {
          this.ui.node_EffectVolume_Progress.progress = this.ui.node_EffectVolume.getComponent(cc.Slider).progress;
          var value = 100 * this.ui.node_EffectVolume_Progress.progress;
          SettingMgr_1.default.getInstance().setProperty(value, "musicInfo", "effectVolume");
        } else if ("yySlider" == event.currentTarget.name) {
          this.ui.node_yyVolume_Progress.progress = this.ui.node_yyVolume.getComponent(cc.Slider).progress;
          var value = 100 * this.ui.node_yyVolume_Progress.progress;
          SettingMgr_1.default.getInstance().setProperty(value, "musicInfo", "yyVolume");
        }
        this.model.musicSettingInfo = SettingMgr_1.default.getInstance().getMusicInfo();
        console.log("musicInfo音量:", this.model.musicSettingInfo);
      };
      __decorate([ property({
        tooltip: "音乐开关",
        type: cc.Node
      }) ], Prefab_MusicSettingCtrl.prototype, "MusicSwitch", void 0);
      __decorate([ property({
        tooltip: "音量控制条",
        type: cc.Node
      }) ], Prefab_MusicSettingCtrl.prototype, "MusicVolume", void 0);
      __decorate([ property({
        tooltip: "音量进度条",
        type: cc.ProgressBar
      }) ], Prefab_MusicSettingCtrl.prototype, "MusicVolumeProgress", void 0);
      __decorate([ property({
        tooltip: "音效开关",
        type: cc.Node
      }) ], Prefab_MusicSettingCtrl.prototype, "EffectSwitch", void 0);
      __decorate([ property({
        tooltip: "音效音量控制条",
        type: cc.Node
      }) ], Prefab_MusicSettingCtrl.prototype, "EffectVolume", void 0);
      __decorate([ property({
        tooltip: "音效音量进度条",
        type: cc.ProgressBar
      }) ], Prefab_MusicSettingCtrl.prototype, "EffectVolumeProgress", void 0);
      __decorate([ property({
        tooltip: "语音开关",
        type: cc.Node
      }) ], Prefab_MusicSettingCtrl.prototype, "yySwitch", void 0);
      __decorate([ property({
        tooltip: "语音音量控制条",
        type: cc.Node
      }) ], Prefab_MusicSettingCtrl.prototype, "yyVolume", void 0);
      __decorate([ property({
        tooltip: "语音音量进度条",
        type: cc.ProgressBar
      }) ], Prefab_MusicSettingCtrl.prototype, "yyVolumeProgress", void 0);
      __decorate([ property({
        tooltip: "提示音开关",
        type: cc.Node
      }) ], Prefab_MusicSettingCtrl.prototype, "TipSwitch", void 0);
      __decorate([ property({
        tooltip: "方言开关",
        type: cc.Node
      }) ], Prefab_MusicSettingCtrl.prototype, "TopolectSwitch", void 0);
      Prefab_MusicSettingCtrl = __decorate([ ccclass ], Prefab_MusicSettingCtrl);
      return Prefab_MusicSettingCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_MusicSettingCtrl;
    cc._RF.pop();
  }, {
    "../../CfgMgrs/GameAudioCfg": "GameAudioCfg",
    "../../GameMgrs/AudioMgr": "AudioMgr",
    "../../GameMgrs/SettingMgr": "SettingMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  RoomChatNodeCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8042aU2I3FLwYzAjsBR8knp", "RoomChatNodeCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var RoomMgr_1 = require("../../GameMgrs/RoomMgr");
    var QuickAudioCfg_1 = require("../../CfgMgrs/QuickAudioCfg");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var SssDef_1 = require("../../../Games/Sss/SssMgr/SssDef");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.chatcfg = null;
        _this.userSex = null;
        _this.ExpressionLen = 29;
        _this.userSex = UserMgr_1.default.getInstance().getMySex();
        _this.chatcfg = QuickAudioCfg_1.default.getInstance().getCfg();
        return _this;
      }
      Model.prototype.getTextById = function(id) {
        for (var i = 0; i < this.chatcfg.length; ++i) {
          var item = this.chatcfg[i];
          if (item.id == id) return item;
        }
        return null;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          scroll_Expression: null,
          scroll_Text: null,
          atlas_Expression: null,
          prefab_ChatText: null,
          panel_text: null,
          chattextlist: [],
          chatexpressionlist: []
        };
        _this.node = ctrl.node;
        _this.model = model;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.atlas_Expression = ctrl.ExpressionAtlas;
        this.ui.scroll_Expression = ctrl.ExpressionScroll;
        this.ui.panel_text = ctrl.panel_text;
        this.ui.scroll_Text = ctrl.TextScroll;
        this.ui.scroll_Text.node.active = false;
        this.allHeight = 0;
        this.initText();
        this.initExpression();
      };
      View.prototype.initText = function() {
        var list = this.model.chatcfg;
        for (var i = 0; i < list.length; ++i) {
          var text = list[i].text;
          var id = list[i].id;
          var panel_text = cc.instantiate(this.ui.panel_text);
          panel_text.position = cc.p(233, 0);
          this.addText(id, text, panel_text);
          this.ui.chattextlist.push(panel_text);
        }
      };
      View.prototype.initExpression = function() {
        var index = 5;
        var len = this.model.ExpressionLen;
        for (var i = 1; i < len + 1; i++) {
          var node = new cc.Node();
          node.name = i + "";
          var expression = node.addComponent(cc.Sprite);
          index--;
          this.ui.chatexpressionlist.push(expression);
          this.addExpress(index, i, expression);
          0 == index && (index = 5);
        }
      };
      View.prototype.addExpress = function(index, i, expression) {
        var spacingY = this.ui.scroll_Expression.content.getComponent(cc.Layout).spacingY, nodeHeight = 0;
        this.ui.scroll_Expression.content.height = 0;
        var node = expression.node;
        node.tag = i;
        expression.spriteFrame = this.ui.atlas_Expression.getSpriteFrame(i);
        this.ui.scroll_Expression.content.addChild(node);
        0 == index && (this.allHeight += node.height + spacingY);
        nodeHeight = node.height;
        this.ui.scroll_Expression.content.height = this.allHeight + nodeHeight + 280;
      };
      View.prototype.addText = function(i, text, TextItem) {
        var node = this.ui.scroll_Text.content;
        node.addChild(TextItem);
        TextItem.getChildByName("content").getComponent(cc.Label).string = text;
        TextItem.tag = i;
        node.height += node.getComponent(cc.Layout).spacingY + TextItem.getChildByName("content").getComponent(cc.Label).lineHeight + 5;
      };
      View.prototype.showExpression = function() {
        this.ui.scroll_Expression.node.active = true;
        this.ui.scroll_Text.node.active = false;
      };
      View.prototype.showText = function() {
        this.ui.scroll_Expression.node.active = false;
        this.ui.scroll_Text.node.active = true;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_ChatNodeCtrl = function(_super) {
      __extends(Prefab_ChatNodeCtrl, _super);
      function Prefab_ChatNodeCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.ChatType = null;
        _this.ExpressionBtn = null;
        _this.TextBtn = null;
        _this.ExpressionAtlas = null;
        _this.ExpressionScroll = null;
        _this.TextScroll = null;
        _this.bg = null;
        _this.panel_text = null;
        _this.chatOver = true;
        return _this;
      }
      Prefab_ChatNodeCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_ChatNodeCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onProcess: this.onProcess,
          onStartGame: this.onStartGame,
          onDissolutionRoom: this.onDissolutionRoom,
          onGameFinished: this.onGameFinished
        };
      };
      Prefab_ChatNodeCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_ChatNodeCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ExpressionBtn, this.ExpressionBtn_cb, "切换表情类型");
        this.connect(G_UiType.image, this.TextBtn, this.TextBtn_cb, "切换文本类型");
        this.connect(G_UiType.image, this.bg, this.bg_bc, "点击背景关闭界面");
        for (var i = 0; i < this.ui.chattextlist.length; ++i) this.connect(G_UiType.image, this.ui.chattextlist[i], this.prefab_ChatText_cb, "点击聊天文本");
        for (var i = 0; i < this.ui.chatexpressionlist.length; ++i) this.connect(G_UiType.image, this.ui.chatexpressionlist[i].node, this.expression_cb, "点击表情文本");
      };
      Prefab_ChatNodeCtrl.prototype.start = function() {};
      Prefab_ChatNodeCtrl.prototype.onProcess = function(msg) {
        msg.process == SssDef_1.SssDef.process_peipai ? this.finish() : msg.process == SssDef_1.SssDef.process_gamesettle && this.finish();
      };
      Prefab_ChatNodeCtrl.prototype.onStartGame = function(msg) {
        this.finish();
      };
      Prefab_ChatNodeCtrl.prototype.onDissolutionRoom = function(msg) {
        msg.result && this.finish();
      };
      Prefab_ChatNodeCtrl.prototype.onGameFinished = function(msg) {
        this.finish();
      };
      Prefab_ChatNodeCtrl.prototype.ExpressionBtn_cb = function() {
        this.view.showExpression();
      };
      Prefab_ChatNodeCtrl.prototype.TextBtn_cb = function() {
        this.view.showText();
      };
      Prefab_ChatNodeCtrl.prototype.prefab_ChatText_cb = function(node, event) {
        if (this.TextScroll.isScrolling() || this.TextScroll.isAutoScrolling()) return;
        var item = this.model.getTextById(node.tag);
        var msg = {
          type: 1,
          id: item.id
        };
        RoomMgr_1.default.getInstance().roomChat(msg);
        this.finish();
      };
      Prefab_ChatNodeCtrl.prototype.expression_cb = function(node, event) {
        if (this.ExpressionScroll.isScrolling() || this.ExpressionScroll.isAutoScrolling()) return;
        var msg = {
          type: 2,
          id: node.tag
        };
        RoomMgr_1.default.getInstance().roomChat(msg);
        this.finish();
      };
      Prefab_ChatNodeCtrl.prototype.bg_bc = function(node, event) {
        this.finish();
      };
      __decorate([ property({
        tooltip: "聊天类型，表情还是文本",
        type: cc.ToggleGroup
      }) ], Prefab_ChatNodeCtrl.prototype, "ChatType", void 0);
      __decorate([ property({
        tooltip: "聊天类型，表情按钮",
        type: cc.Node
      }) ], Prefab_ChatNodeCtrl.prototype, "ExpressionBtn", void 0);
      __decorate([ property({
        tooltip: "聊天类型，文本按钮",
        type: cc.Node
      }) ], Prefab_ChatNodeCtrl.prototype, "TextBtn", void 0);
      __decorate([ property({
        tooltip: "表情图集",
        type: cc.SpriteAtlas
      }) ], Prefab_ChatNodeCtrl.prototype, "ExpressionAtlas", void 0);
      __decorate([ property({
        tooltip: "表情容器",
        type: cc.ScrollView
      }) ], Prefab_ChatNodeCtrl.prototype, "ExpressionScroll", void 0);
      __decorate([ property({
        tooltip: "文本容器",
        type: cc.ScrollView
      }) ], Prefab_ChatNodeCtrl.prototype, "TextScroll", void 0);
      __decorate([ property(cc.Node) ], Prefab_ChatNodeCtrl.prototype, "bg", void 0);
      __decorate([ property(cc.Node) ], Prefab_ChatNodeCtrl.prototype, "panel_text", void 0);
      Prefab_ChatNodeCtrl = __decorate([ ccclass ], Prefab_ChatNodeCtrl);
      return Prefab_ChatNodeCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_ChatNodeCtrl;
    cc._RF.pop();
  }, {
    "../../../Games/Sss/SssMgr/SssDef": "SssDef",
    "../../CfgMgrs/QuickAudioCfg": "QuickAudioCfg",
    "../../GameMgrs/RoomMgr": "RoomMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  RoomControlSettingCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4ab7aoNUnZIWZ8AP4Tl465b", "RoomControlSettingCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var SettingMgr_1 = require("../../GameMgrs/SettingMgr");
    var FrameMgr_1 = require("../../GameMgrs/FrameMgr");
    var RoomMgr_1 = require("../../GameMgrs/RoomMgr");
    var QuitMgr_1 = require("../../GameMgrs/QuitMgr");
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var GEventDef_1 = require("../../GameMgrs/GEventDef");
    var SwitchMgr_1 = require("../../GameMgrs/SwitchMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.controlInfo = null;
        _this.playMethodSwitch = null;
        _this.controlInfo = SettingMgr_1.default.getInstance().getControlInfo();
        _this.playMethodSwitch = SwitchMgr_1.default.getInstance().get_switch_play_method();
        return _this;
      }
      Model.prototype.updateSwitch = function(msg) {
        this.playMethodSwitch = msg.cfg.switch_play_method;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          button_BtnExit: null,
          button_BtnRule: null,
          button_BtnCheating: null,
          prefab_mahjongSetting: null,
          prefab_bullSetting: null,
          prefab_sssSetting: null,
          node_content: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.button_BtnExit = ctrl.BtnExit;
        this.ui.button_BtnRule = ctrl.BtnRule;
        this.ui.button_BtnRule.active = false;
        this.ui.button_BtnCheating = ctrl.BtnCheating;
        this.ui.prefab_bullSetting = ctrl.prefab_bullSetting;
        this.ui.prefab_mahjongSetting = ctrl.prefab_mahjongSetting;
        this.ui.prefab_sssSetting = ctrl.prefab_sssSetting;
        this.ui.node_content = ctrl.node_content;
        console.log("controlInfo", this.model.controlInfo);
        var setting = null;
        switch (SettingMgr_1.default.getInstance().getGameID()) {
         case 1:
         case 2:
          setting = cc.instantiate(ctrl.prefab_mahjongSetting);
          break;

         case 13:
          setting = cc.instantiate(ctrl.prefab_sssSetting);
          break;

         case 18:
         case 19:
         case 20:
          setting = cc.instantiate(ctrl.prefab_bullSetting);
          break;

         default:
          setting = cc.instantiate(ctrl.prefab_mahjongSetting);
        }
        this.ui.node_content.addChild(setting);
        this.showSwitch();
      };
      View.prototype.showSwitch = function() {
        this.ui.button_BtnRule.active = 1 == this.model.playMethodSwitch;
      };
      return View;
    }(BaseView_1.default);
    var RoomControlSettingCtrl = function(_super) {
      __extends(RoomControlSettingCtrl, _super);
      function RoomControlSettingCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.BtnExit = null;
        _this.BtnRule = null;
        _this.BtnCheating = null;
        _this.prefab_bullSetting = null;
        _this.prefab_mahjongSetting = null;
        _this.prefab_sssSetting = null;
        _this.node_content = null;
        return _this;
      }
      RoomControlSettingCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      RoomControlSettingCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqGameSwitch": this.http_reqGameSwitch
        };
      };
      RoomControlSettingCtrl.prototype.defineGlobalEvents = function() {};
      RoomControlSettingCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.button_BtnExit, this.onBtnExit_cb, "退出房间");
        this.connect(G_UiType.button, this.ui.button_BtnRule, this.onBtnRule_cb, "点击游戏玩法");
        this.connect(G_UiType.button, this.ui.button_BtnCheating, this.onBtnCheating_cb, "点击防作弊检测");
      };
      RoomControlSettingCtrl.prototype.start = function() {};
      RoomControlSettingCtrl.prototype.http_reqGameSwitch = function(msg) {
        this.model.updateSwitch(msg);
        this.view.showSwitch();
      };
      RoomControlSettingCtrl.prototype.onBtnExit_cb = function(event) {
        var _this = this;
        var draw = RoomMgr_1.default.getInstance().isGameStarted;
        console.log("这是开始游戏的证明======", draw);
        if (RoomMgr_1.default.getInstance().isGameStarted()) RoomMgr_1.default.getInstance().isWather() ? FrameMgr_1.default.getInstance().showDialog("你还未参与游戏,可以自由退出", function() {
          _this.gemit(GEventDef_1.default.room_closesetting);
          QuitMgr_1.default.getInstance().quit();
        }, "解散房间") : FrameMgr_1.default.getInstance().showDialog("      游戏已经开始，需要全部玩家用以后才可解散房间，是否确定发起解散房间投票？（第一局结束之前解散不会收取房费，第一局结束之后收取的房费不会返还。）", function() {
          _this.gemit(GEventDef_1.default.room_closesetting);
          QuitMgr_1.default.getInstance().quit();
        }, "解散房间"); else {
          var roundindex = RoomMgr_1.default.getInstance().getRoundIndex();
          0 == roundindex ? QuitMgr_1.default.getInstance().quit() : roundindex > 0 && FrameMgr_1.default.getInstance().showDialog("      游戏已经开始，需要全部玩家用以后才可解散房间，是否确定发起解散房间投票？（第一局结束之前解散不会收取房费，第一局结束之后收取的房费不会返还。）", function() {
            _this.gemit(GEventDef_1.default.room_closesetting);
            QuitMgr_1.default.getInstance().quit();
          }, "解散房间");
        }
      };
      RoomControlSettingCtrl.prototype.onBtnRule_cb = function(event) {
        this.gemit(GEventDef_1.default.room_closesetting);
        this.start_sub_module(G_MODULE.RuleDescription);
      };
      RoomControlSettingCtrl.prototype.onBtnCheating_cb = function(event) {
        this.gemit(GEventDef_1.default.room_closesetting);
        this.start_sub_module(G_MODULE.RoomPreventionCheating);
      };
      __decorate([ property({
        tooltip: "退出房间",
        type: cc.Node
      }) ], RoomControlSettingCtrl.prototype, "BtnExit", void 0);
      __decorate([ property({
        tooltip: "游戏玩法",
        type: cc.Node
      }) ], RoomControlSettingCtrl.prototype, "BtnRule", void 0);
      __decorate([ property({
        tooltip: "防作弊检测",
        type: cc.Node
      }) ], RoomControlSettingCtrl.prototype, "BtnCheating", void 0);
      __decorate([ property({
        tooltip: "牛牛设置",
        type: cc.Prefab
      }) ], RoomControlSettingCtrl.prototype, "prefab_bullSetting", void 0);
      __decorate([ property({
        tooltip: "麻将设置",
        type: cc.Prefab
      }) ], RoomControlSettingCtrl.prototype, "prefab_mahjongSetting", void 0);
      __decorate([ property({
        tooltip: "大菠萝设置",
        type: cc.Prefab
      }) ], RoomControlSettingCtrl.prototype, "prefab_sssSetting", void 0);
      __decorate([ property({
        tooltip: "content",
        type: cc.Node
      }) ], RoomControlSettingCtrl.prototype, "node_content", void 0);
      RoomControlSettingCtrl = __decorate([ ccclass ], RoomControlSettingCtrl);
      return RoomControlSettingCtrl;
    }(BaseCtrl_1.default);
    exports.default = RoomControlSettingCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/FrameMgr": "FrameMgr",
    "../../GameMgrs/GEventDef": "GEventDef",
    "../../GameMgrs/QuitMgr": "QuitMgr",
    "../../GameMgrs/RoomMgr": "RoomMgr",
    "../../GameMgrs/SettingMgr": "SettingMgr",
    "../../GameMgrs/SwitchMgr": "SwitchMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  RoomCostCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f5cf09kIQRHCZxQ1LxnGj8k", "RoomCostCfg");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCfg_1 = require("../Libs/BaseCfg");
    var RoomCostCfg = function(_super) {
      __extends(RoomCostCfg, _super);
      function RoomCostCfg() {
        var _this = _super.call(this) || this;
        _this.roomcostPath = null;
        _this.roomcost = null;
        _this.roomcostPath = _this.getFullPath("roomcost");
        return _this;
      }
      RoomCostCfg.getInstance = function() {
        this._instance || (this._instance = new RoomCostCfg());
        return this._instance;
      };
      RoomCostCfg.prototype.loadCb = function(name, data) {
        this.loaded = true;
        this.roomcost = data;
      };
      RoomCostCfg.prototype.getRoomCost = function(gamename, yike, roundcount, playercount, paytype) {
        0 == roundcount && (yike = 1);
        var info = this.roomcost[gamename];
        for (var i = 0; i < info.length; i++) if (info[i].special == yike && info[i].roundcount == roundcount && info[i].playercount == playercount && info[i].type == paytype) return info[i].price;
      };
      RoomCostCfg.prototype.load = function() {
        this.loadRes(this.roomcostPath, this.loadCb);
      };
      return RoomCostCfg;
    }(BaseCfg_1.default);
    exports.default = RoomCostCfg;
    cc._RF.pop();
  }, {
    "../Libs/BaseCfg": "BaseCfg"
  } ],
  RoomDepositCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "359d4SlUNJAPLriuGeTyk7r", "RoomDepositCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var RoomMgr_1 = require("../../GameMgrs/RoomMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.mahjongResMgr = RoomMgr_1.default.getInstance().getResMgr();
        _this.mahjongLogic = RoomMgr_1.default.getInstance().getLogic();
        _this.mahjongDef = RoomMgr_1.default.getInstance().getDef();
        _this.mahjongAudio = RoomMgr_1.default.getInstance().getAudio();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_quxiaotuoguan: null
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.node.active = false;
        this.ui.btn_quxiaotuoguan = ctrl.btn_quxiaotuoguan;
      };
      View.prototype.show = function(bShow) {
        void 0 === bShow && (bShow = true);
        this.node.active = bShow;
      };
      return View;
    }(BaseView_1.default);
    var QzmjDepositCtrl = function(_super) {
      __extends(QzmjDepositCtrl, _super);
      function QzmjDepositCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_quxiaotuoguan = null;
        return _this;
      }
      QzmjDepositCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      QzmjDepositCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onDeposit: this.onDeposit,
          onProcess: this.onProcess,
          onGameFinished: this.onGameFinished
        };
      };
      QzmjDepositCtrl.prototype.defineGlobalEvents = function() {};
      QzmjDepositCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_quxiaotuoguan, this.btn_quxiaotuoguan_cb, "取消托管");
      };
      QzmjDepositCtrl.prototype.start = function() {};
      QzmjDepositCtrl.prototype.onGameFinished = function() {
        this.view.show(false);
      };
      QzmjDepositCtrl.prototype.onProcess = function(msg) {
        msg.process == this.model.mahjongDef.process_ready && this.view.show(false);
      };
      QzmjDepositCtrl.prototype.onDeposit = function(msg) {
        this.view.show(msg.deposit);
      };
      QzmjDepositCtrl.prototype.btn_quxiaotuoguan_cb = function() {
        this.model.mahjongLogic.getInstance().tuoGuan(false);
      };
      __decorate([ property(cc.Node) ], QzmjDepositCtrl.prototype, "btn_quxiaotuoguan", void 0);
      QzmjDepositCtrl = __decorate([ ccclass ], QzmjDepositCtrl);
      return QzmjDepositCtrl;
    }(BaseCtrl_1.default);
    exports.default = QzmjDepositCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/RoomMgr": "RoomMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  RoomMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e30392IhkJPlJy6oCCezzUX", "RoomMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var UserMgr_1 = require("./UserMgr");
    var BetMgr_1 = require("./BetMgr");
    var LoginMgr_1 = require("./LoginMgr");
    var VerifyMgr_1 = require("./VerifyMgr");
    var CreateRoomMgr_1 = require("./CreateRoomMgr");
    var YySdk_1 = require("../SdkMgrs/YySdk");
    var FrameMgr_1 = require("./FrameMgr");
    var GameCateCfg_1 = require("../CfgMgrs/GameCateCfg");
    var SeatMgr_1 = require("./SeatMgr");
    var viewLogicSeatConvertMgr_1 = require("./viewLogicSeatConvertMgr");
    var BunchInfoMgr_1 = require("./BunchInfoMgr");
    var GEventDef_1 = require("./GEventDef");
    var UserDefaultCfg_1 = require("../CfgMgrs/UserDefaultCfg");
    var NetNotify_1 = require("../NetCenter/NetNotify");
    var LocalStorage_1 = require("../Libs/LocalStorage");
    var GameAudioCfg_1 = require("../CfgMgrs/GameAudioCfg");
    var GameNet_1 = require("../NetCenter/GameNet");
    var GEventDef_2 = require("./GEventDef");
    var RecordMgr_1 = require("./RecordMgr");
    var Other_player_enter = "other_player_enter";
    var Other_player_leave = "other_player_leave";
    var Win = "win";
    var Lose = "lose";
    var liuju = "liuju";
    var RoomMgr = function(_super) {
      __extends(RoomMgr, _super);
      function RoomMgr() {
        var _this = _super.call(this) || this;
        _this.bVideoMode = false;
        _this.DefCls = null;
        _this.LogicCls = null;
        _this.ResMgrCls = null;
        _this.AudioCls = null;
        _this.CardsCls = null;
        _this.roominfo = null;
        _this.roomtype = null;
        _this.fangKaCfg = null;
        _this.routes = {};
        _this.password = null;
        _this.users = {};
        _this.preparemap = {};
        _this.myseatid = null;
        _this.bGameIsStarted = null;
        _this.rid = null;
        _this.autoPrepare = false;
        _this.roundindex = 0;
        _this.playercount = 0;
        _this.bunchInfo = null;
        _this.bunchFinish = false;
        _this.enterFangKaGameId = null;
        _this.voicestates = {};
        _this.matchid = null;
        _this.ipWarnningSeats = {};
        _this.distWarningSeats = {};
        _this.uidseatmap = {};
        _this.enterFangKaClubId = null;
        _this.enterFangKaPaysource = null;
        _this.b_inRoom = false;
        _this.b_bunchStarted = false;
        _this.m_applyDissolutionSeatId = null;
        _this.m_applySeats = {};
        _this.fangzhuroomtype = null;
        _this.fangzhuroomstart = false;
        _this.inrooms = {};
        _this.m_offline = null;
        _this.seatCount = null;
        _this.willBackFromHide = false;
        _this.bwatch = false;
        _this.bLoadingGame = false;
        _this.roundindex = 0;
        _this.roominfo = null;
        _this.enterFangKaClubId = 0;
        _this.enterFangKaPaysource = 0;
        _this.m_offline = new Array();
        _this.resetData();
        _this.routes = {
          "http.reqCreateFangKaVerify": _this.http_reqCreateFangKaVerify,
          onEnterRoom: _this.onEnterRoom,
          onReEnterRoom: _this.onReEnterRoom,
          onLeaveRoom: _this.onLeaveRoom,
          onPrepare: _this.onPrepare,
          onSyncData: _this.onSyncData,
          onStartGame: _this.onStartGame,
          "connector.entryHandler.enterRoom": _this.connector_entryHandler_enterRoom,
          "room.roomHandler.nextRound": _this.room_roomHandler_nextRound,
          onGameFinished: _this.onGameFinished,
          "http.reqFangKaEntry": _this.http_reqFangKaEntry,
          "http.reqCreateFangKaRoom": _this.http_reqCreateFangKaRoom,
          "http.reqFangKaVerify": _this.http_reqFangKaVerify,
          "http.reqRoomInfo": _this.http_reqRoomInfo,
          "room.roomHandler.exitRoom": _this.room_roomHandler_exitRoom,
          "http.reqFangKaCfg": _this.http_reqFangKaCfg,
          onDisbandRoom: _this.onDisbandRoom,
          onVoiceStateChanged: _this.onVoiceStateChanged,
          "http.reqCheating": _this.http_reqCheating,
          "connector.entryHandler.enterPlat": _this.connector_entryHandler_enterPlat,
          "connector.entryHandler.enterGameSvr": _this.connector_entryHandler_enterGameSvr,
          onApplyDissolutionRoom: _this.onApplyDissolutionRoom,
          onAgreeDissolutionRoom: _this.onAgreeDissolutionRoom,
          onRefuseDissolutionRoom: _this.onRefuseDissolutionRoom,
          onDissolutionRoom: _this.onDissolutionRoom,
          onCancelPrepare: _this.onCancelPrepare,
          onUserOffLine: _this.onUserOffLine,
          "http.reqSettle": _this.http_reqSettle,
          onChangeRoomMaster: _this.onChangeRoomMaster
        };
        G_FRAME.globalEmitter.on("EnterBackground", _this.EnterBackground.bind(_this), _this);
        G_FRAME.globalEmitter.on("EnterForeground", _this.EnterForeground.bind(_this), _this);
        G_FRAME.globalEmitter.on(GEventDef_2.default.voice_JoinRoomOk, _this.onJoinVoiceRoom.bind(_this), _this);
        return _this;
      }
      RoomMgr.prototype.setLoadingGame = function(bValue) {
        this.bLoadingGame = bValue;
      };
      RoomMgr.prototype.isLoadingGame = function() {
        return this.bLoadingGame;
      };
      RoomMgr.prototype.setVideoMode = function(bVideoMode) {
        this.bVideoMode = bVideoMode;
      };
      RoomMgr.prototype.getVideoMode = function() {
        return this.bVideoMode;
      };
      RoomMgr.prototype.setMySeatId = function(seatId) {
        this.myseatid = seatId;
      };
      RoomMgr.prototype.setRoomInfo = function(roomInfo) {
        this.roominfo = roomInfo;
        SeatMgr_1.default.getInstance().setRoomInfo(this.roominfo);
      };
      RoomMgr.prototype.setFangKaCfg = function(fangKaCfg) {
        this.fangKaCfg = fangKaCfg;
        console.log("fangKaCfg", fangKaCfg);
      };
      RoomMgr.prototype.setRoundIndex = function(roundindex) {
        this.roundindex = roundindex;
      };
      RoomMgr.prototype.EnterBackground = function() {
        this.willBackFromHide = true;
      };
      RoomMgr.prototype.EnterForeground = function() {
        this.willBackFromHide && GameNet_1.default.getInstance().disconnect();
        this.willBackFromHide = false;
      };
      RoomMgr.prototype.onJoinVoiceRoom = function() {
        console.log("Listener : js成功初始化房间语音");
        YySdk_1.default.getInstance().setVoiceInitOk();
      };
      RoomMgr.prototype.onChangeRoomMaster = function(msg) {
        this.roominfo.owner = msg.newMasterUid;
      };
      RoomMgr.prototype.http_reqSettle = function(msg) {
        var settle = JSON.parse(msg.settle);
        var win_seatid = settle.win_seatid;
        if (null == win_seatid) {
          GameAudioCfg_1.default.getInstance().playGameProcessAudio(liuju, false);
          console.log("流局", win_seatid);
        } else if (win_seatid == this.myseatid) {
          GameAudioCfg_1.default.getInstance().playGameProcessAudio(Win, false);
          console.log("胜利", win_seatid);
        } else {
          GameAudioCfg_1.default.getInstance().playGameProcessAudio(Lose, false);
          console.log("失败", win_seatid);
        }
      };
      RoomMgr.prototype.onUserOffLine = function(msg) {
        var count = msg.seatIDs.length;
        for (var i = 0; i < count; i++) this.m_offline.push(msg.seatIDs[i]);
        console.log("1this.m_offline:", this.m_offline);
      };
      RoomMgr.prototype.getoffline = function() {
        console.log("2this.m_offline:", this.m_offline);
        return this.m_offline;
      };
      RoomMgr.prototype.manualStart = function() {
        this.send_msg("room.roomHandler.manualStart");
      };
      RoomMgr.prototype.connector_entryHandler_enterPlat = function() {
        this.b_inRoom && this.enterRoom();
      };
      RoomMgr.prototype.connector_entryHandler_enterGameSvr = function() {
        this.b_inRoom && this.enterRoom();
      };
      RoomMgr.prototype.isRoomFull = function() {
        for (var seatId = 0; seatId < this.roominfo.seatcount; ++seatId) if (null == this.users[seatId]) return false;
        return true;
      };
      RoomMgr.prototype.onAgreeDissolutionRoom = function(msg) {
        this.m_applySeats[msg.seatId] = 1;
      };
      RoomMgr.prototype.onRefuseDissolutionRoom = function(msg) {
        this.m_applySeats[msg.seatId] = 2;
      };
      RoomMgr.prototype.onDissolutionRoom = function(msg) {
        this.m_applySeats = {};
        this.m_applyDissolutionSeatId = null;
      };
      RoomMgr.prototype.destroy = function() {
        console.log("清理房间roommgr");
        delete RoomMgr._instance;
        RoomMgr._instance = null;
        NetNotify_1.default.getInstance().unregNotifyListener(this);
        RoomMgr.getInstance();
        SeatMgr_1.default.getInstance().clear();
        viewLogicSeatConvertMgr_1.default.getInstance().clear();
        YySdk_1.default.getInstance().LeaveRoom();
        this.AudioCls && this.AudioCls.getInstance().destroy();
        RecordMgr_1.default.getInstance().destroy();
        console.log("destroy 罗积累=", this.LogicCls);
        this.LogicCls.getInstance().destroy();
      };
      RoomMgr.prototype.swithVoiceState = function(voicestate) {
        var msg = {
          voicestate: voicestate
        };
        LocalStorage_1.default.getInstance().setVoicestateCfg(voicestate);
        this.send_msg("room.roomHandler.swithVoiceState", msg);
      };
      RoomMgr.prototype.getVoiceState = function(seatId) {
        return this.voicestates[seatId];
      };
      RoomMgr.prototype.onVoiceStateChanged = function(msg) {
        this.voicestates[msg.seatid] = msg.voicestate;
      };
      RoomMgr.prototype.setGameLibs = function(defcls, resmgrcls, logiccls, audiocls, cardscls) {
        this.DefCls = defcls;
        this.ResMgrCls = resmgrcls;
        this.LogicCls = logiccls;
        this.AudioCls = audiocls;
        this.CardsCls = cardscls;
        logiccls.getInstance();
        console.log("罗积累=", this.LogicCls);
      };
      RoomMgr.prototype.getDef = function() {
        return this.DefCls;
      };
      RoomMgr.prototype.getResMgr = function() {
        return this.ResMgrCls;
      };
      RoomMgr.prototype.getLogic = function() {
        return this.LogicCls;
      };
      RoomMgr.prototype.getAudio = function() {
        return this.AudioCls;
      };
      RoomMgr.prototype.getCards = function() {
        return this.CardsCls;
      };
      RoomMgr.prototype.isBunchFinish = function() {
        return this.bunchFinish;
      };
      RoomMgr.prototype.getBunchInfo = function() {
        return this.bunchInfo;
      };
      RoomMgr.prototype.getRoundIndex = function() {
        return this.roundindex;
      };
      RoomMgr.prototype.isFirstRound = function() {
        return 0 == this.roundindex;
      };
      RoomMgr.prototype.showFinalSettle = function() {
        var gameid = BetMgr_1.default.getInstance().getGameId();
        BunchInfoMgr_1.default.getInstance().showFinalSettle(gameid);
      };
      RoomMgr.prototype.onDisbandRoom = function(msg) {
        var _this = this;
        if (this.roundindex > 0) window.setTimeout(function() {
          _this.DisbandRoomCall(_this, msg);
        }, 2e3); else if (0 == this.roundindex && null != this.fangKaCfg.v_paytype && 0 != this.fangKaCfg.v_paytype) window.setTimeout(function() {
          _this.DisbandRoomCall(_this, msg);
        }, 2e3); else if (0 == this.roundindex && 0 == this.fangKaCfg.v_paytype) {
          var okcb = function() {
            LoginMgr_1.default.getInstance().disconnectGameSvr();
          };
          this.fangzhuroomstart ? window.setTimeout(function() {
            _this.DisbandRoomCall(_this, msg);
          }, 2e3) : this.isRoomOwner(this.myseatid) || FrameMgr_1.default.getInstance().showMsgBox("房主已经解散房间，本次房间您无需支付任何费用，确定后返回大厅", okcb.bind(this));
        }
      };
      RoomMgr.prototype.DisbandRoomCall = function(data, msg) {
        if (msg.needfianlsettle) FrameMgr_1.default.getInstance().showHintBox("全部玩家同意解散房间，房间解散，确定后进行房间总结算", function() {
          data.showFinalSettle();
        }); else {
          var okcb = function() {
            LoginMgr_1.default.getInstance().disconnectGameSvr();
          };
          FrameMgr_1.default.getInstance().showHintBox("全部玩家同意解散房间，本次房间您无需支付任何费用，确定后返回大厅。", okcb.bind(this));
          data.m_offline = null;
        }
      };
      RoomMgr.prototype.setAutoPrepare = function(bPrepare) {
        this.autoPrepare = bPrepare;
      };
      RoomMgr.prototype.http_reqFangKaEntry = function(msg) {
        console.log("http_reqFangKaEntry msg=", msg);
        this.rid = msg.rid;
        LoginMgr_1.default.getInstance().disconnectDaTing();
      };
      RoomMgr.prototype.http_reqCreateFangKaRoom = function(msg) {
        console.log("reqCreateFangKaRoom msg=", msg);
        this.rid = msg.rid;
        LoginMgr_1.default.getInstance().disconnectDaTing();
      };
      RoomMgr.prototype.roomChat = function(msg) {
        this.send_msg("room.roomHandler.roomChat", msg);
      };
      RoomMgr.prototype.reqCheating = function() {
        var msg = {
          rid: this.rid
        };
        this.send_msg("http.reqCheating", msg);
      };
      RoomMgr.prototype.reqMyRoomState = function() {
        this.send_msg("http.reqMyRoomState");
      };
      RoomMgr.prototype.reqFangKaEntry = function() {
        this.send_msg("http.reqFangKaEntry");
      };
      RoomMgr.prototype.http_reqFangKaVerify = function() {
        this.reqFangKaEntry();
      };
      RoomMgr.prototype.reqFangKaVerify = function(password) {
        BetMgr_1.default.getInstance().setGameId(this.enterFangKaGameId);
        this.password = password;
        var msg = {
          password: password
        };
        this.send_msg("http.reqFangKaVerify", msg);
      };
      RoomMgr.prototype.http_reqFangKaCfg = function(msg) {
        console.log("http_reqFangKaCfg msg-=", msg);
        this.enterFangKaGameId = msg.cfg.gameid;
        this.enterFangKaClubId = msg.cfg.clubid;
        this.enterFangKaPaysource = msg.cfg.pay_source;
        this.fangKaCfg = JSON.parse(msg.cfg.cfg);
        this.fangzhuroomtype = this.fangKaCfg.v_paytype;
      };
      RoomMgr.prototype.getEnterFangKaClubId = function() {
        return this.enterFangKaClubId;
      };
      RoomMgr.prototype.getEnterFangKaPaysource = function() {
        return this.enterFangKaPaysource;
      };
      RoomMgr.prototype.getFangKaPassword = function() {
        return this.password;
      };
      RoomMgr.prototype.getEnterFangKaGameId = function() {
        return this.enterFangKaGameId;
      };
      RoomMgr.prototype.getFangKaCfg = function() {
        return this.fangKaCfg;
      };
      RoomMgr.prototype.reqFangKaCfg = function(password) {
        this.password = password;
        var msg = {
          password: password
        };
        this.send_msg("http.reqFangKaCfg", msg);
      };
      RoomMgr.prototype.resetData = function() {
        this.users = {};
        this.preparemap = {};
        this.myseatid = null;
        this.m_applyDissolutionSeatId = null;
        if (this.bunchFinish) {
          this.bunchInfo = null;
          this.bunchFinish = false;
        }
      };
      RoomMgr.prototype.onApplyDissolutionRoom = function(msg) {
        this.m_applySeats[msg.seatId] = 1;
        this.m_applyDissolutionSeatId = msg.seatId;
        this.start_sub_module(G_MODULE.ApplyDisbandRoom);
      };
      RoomMgr.prototype.getApplyDissolutionSeatId = function() {
        return this.m_applyDissolutionSeatId;
      };
      RoomMgr.prototype.isGameStarted = function() {
        return this.bGameIsStarted;
      };
      RoomMgr.prototype.onSyncData = function(msg) {
        this.b_bunchStarted = true;
      };
      RoomMgr.prototype.http_reqRoomInfo = function(msg) {
        this.roominfo = msg.roominfo;
        this.rid = this.roominfo.id;
        console.log("设置了房间号this.rid=", this.rid);
        SeatMgr_1.default.getInstance().setRoomInfo(this.roominfo);
      };
      RoomMgr.prototype.updateSeatCount = function() {};
      RoomMgr.prototype.reqRoomInfo = function() {
        this.send_msg("http.reqRoomInfo");
      };
      RoomMgr.prototype.onStartGame = function(msg) {
        this.bwatch = false;
        this.bGameIsStarted = true;
        this.b_bunchStarted = true;
        this.roundindex = msg.roundindex;
        this.playercount = msg.playercount;
        this.fangzhuroomstart = true;
      };
      RoomMgr.prototype.isWather = function() {
        return this.bwatch;
      };
      RoomMgr.prototype.reqSettle = function() {
        var msg = {
          matchid: this.matchid
        };
        this.send_msg("http.reqSettle", msg);
      };
      RoomMgr.prototype.onGameFinished = function(msg) {
        this.bwatch = false;
        this.preparemap = {};
        this.bGameIsStarted = false;
        this.matchid = msg.matchid;
        var memberList = [];
        for (var logicseatid in this.users) {
          var uid = this.users[logicseatid];
          memberList[logicseatid] = {};
          var info = UserMgr_1.default.getInstance().getUserById(uid);
          info || (info = {
            id: uid,
            headid: 1,
            nickname: ""
          });
          memberList[logicseatid] = info;
          memberList[logicseatid].bowner = false;
          this.isRoomOwner(logicseatid) && (memberList[logicseatid].bowner = true);
          console.log("userlist", UserMgr_1.default.getInstance().getUserById(uid));
        }
        BunchInfoMgr_1.default.getInstance().setMembelist(memberList);
        this.updateBunchInfo(msg.bunchInfo);
        UserMgr_1.default.getInstance().reqMyInfo();
        this.reqSettle();
      };
      RoomMgr.prototype.movieFinished = function() {
        this.send_msg("room.roomHandler.movieFinished");
      };
      RoomMgr.prototype.nextRound = function() {
        this.send_msg("room.roomHandler.nextRound");
      };
      RoomMgr.prototype.onPrepare = function(msg) {
        this.preparemap[msg.seatid] = true;
      };
      RoomMgr.prototype.onCancelPrepare = function(msg) {
        this.preparemap[msg.seatid] = false;
      };
      RoomMgr.prototype.prepare = function() {
        this.send_msg("room.roomHandler.prepare");
      };
      RoomMgr.prototype.cancelprepare = function() {
        this.send_msg("room.roomHandler.cancelprepare", null);
      };
      RoomMgr.prototype.onEnterRoom = function(msg) {
        this.willBackFromHide || GameAudioCfg_1.default.getInstance().playGameProcessAudio(Other_player_enter, false);
        console.log("有人进来了=", msg);
        var uid = msg.user;
        this.users[msg.seatid] = uid;
        this.uidseatmap[uid] = msg.seatid;
        this.voicestates[msg.seatid] = msg.voicestate;
        this.inrooms[msg.seatid] = true;
        UserMgr_1.default.getInstance().reqUsers([ uid ]);
      };
      RoomMgr.prototype.onReEnterRoom = function(msg) {
        this.preparemap[msg.seatid] = true;
        console.log("onReEnterRoom", msg);
      };
      RoomMgr.prototype.onLeaveRoom = function(msg) {
        console.log("这是解散房间的消息===========", msg);
        GameAudioCfg_1.default.getInstance().playGameProcessAudio(Other_player_leave, false);
        delete this.users[msg.seatid];
        delete this.preparemap[msg.seatid];
      };
      RoomMgr.prototype.updateRoomUsers = function(msg) {
        console.log("更新玩家信息的", msg, "啊呵呵=", msg.seats);
        this.resetData();
        var uids = [];
        var memberList = [];
        for (var key in msg.seats) {
          var seatid = parseInt(key);
          var uid_1 = msg.seats[key];
          console.log("updateRoomUsersuid=", uid_1);
          this.uidseatmap[uid_1] = seatid;
          if (null != uid_1) {
            this.users[seatid] = uid_1;
            msg.prepares && (this.preparemap[seatid] = msg.prepares[key]);
            msg.voicestates && (this.voicestates[seatid] = msg.voicestates[key]);
            uids.push(uid_1);
            memberList[seatid] = {};
            var info = UserMgr_1.default.getInstance().getUserById(uid_1);
            info || (info = {
              id: uid_1,
              headid: 1,
              nickname: ""
            });
            memberList[seatid] = info;
          }
        }
        BunchInfoMgr_1.default.getInstance().setMembelist(memberList);
        var myuid = LoginMgr_1.default.getInstance().getUid();
        for (var logicseatid in this.users) {
          var uid = this.users[logicseatid];
          if (uid && myuid == uid) {
            this.myseatid = parseInt(logicseatid);
            console.log("我找到了自己位置this.myseatid=", this.myseatid);
            SeatMgr_1.default.getInstance().setMySeatId(this.myseatid);
            viewLogicSeatConvertMgr_1.default.getInstance().setMySeatId(this.myseatid, this.roominfo.seatcount);
            break;
          }
        }
        UserMgr_1.default.getInstance().reqUsers(uids);
        console.log("哈哈哈=-", uids);
        this.gemit(GEventDef_1.default.usersUpdated);
      };
      RoomMgr.prototype.getMySeatId = function() {
        return this.myseatid;
      };
      RoomMgr.prototype.isBunchStarted = function() {
        return this.b_bunchStarted;
      };
      RoomMgr.prototype.exitRoom = function() {
        this.send_msg("room.roomHandler.exitRoom");
      };
      RoomMgr.prototype.applyDissolutionRoom = function() {
        this.send_msg("room.roomHandler.applyDissolutionRoom");
      };
      RoomMgr.prototype.agreeDissolutionRoom = function() {
        this.send_msg("room.roomHandler.agreeDissolutionRoom");
      };
      RoomMgr.prototype.refuseDissolutionRoom = function() {
        this.send_msg("room.roomHandler.refuseDissolutionRoom");
      };
      RoomMgr.prototype.room_roomHandler_exitRoom = function(msg) {
        LoginMgr_1.default.getInstance().disconnectGameSvr();
      };
      RoomMgr.prototype.getRoundCount = function() {
        return this.roominfo.v_roundcount;
      };
      RoomMgr.prototype.getSeatCount = function() {
        return this.roominfo.seatcount;
      };
      RoomMgr.prototype.getApplySeats = function() {
        return this.m_applySeats;
      };
      RoomMgr.prototype.getPlayerCount = function() {
        return this.playercount;
      };
      RoomMgr.prototype.getViewSeatId = function(logicSeatId) {
        return SeatMgr_1.default.getInstance().getViewSeatId(logicSeatId);
      };
      RoomMgr.prototype.getLogicSeatId = function(viewSeatId) {
        return SeatMgr_1.default.getInstance().getLogicSeatId(viewSeatId);
      };
      RoomMgr.prototype.getRoomInfo = function() {
        return this.roominfo;
      };
      RoomMgr.prototype.isRoomOwner = function(seatId) {
        var uid = this.users[seatId];
        return uid == this.roominfo.owner;
      };
      RoomMgr.prototype.getRoomOwner = function() {
        return this.roominfo.owner;
      };
      RoomMgr.prototype.getFangFei = function() {
        return this.roominfo.fangfei;
      };
      RoomMgr.prototype.isSeatPlaying = function(seatViewId) {
        return Boolean(this.users[this.getLogicSeatId(seatViewId)]);
      };
      RoomMgr.prototype.getGameName = function() {
        return GameCateCfg_1.default.getInstance().getGameById(BetMgr_1.default.getInstance().getGameId()).name;
      };
      RoomMgr.prototype.isShowStartBtn = function() {
        if (this.bGameIsStarted || !this.isFirstRound()) return false;
        var gameid = BetMgr_1.default.getInstance().getGameId();
        var gameCate = GameCateCfg_1.default.getInstance().getGameById(gameid).cate;
        if (2 == gameCate && 0 == this.fangKaCfg.v_startModel && this.isRoomOwner(this.myseatid)) {
          var prepareNum = 0;
          for (var key in this.preparemap) this.preparemap[key] && (prepareNum += 1);
          if (prepareNum >= 2 && prepareNum == Object.keys(this.users).length) return true;
        }
        return false;
      };
      RoomMgr.prototype.isAllPlayerPrepare = function() {
        var prepareNum = 0;
        for (var key in this.preparemap) this.preparemap[key] && (prepareNum += 1);
        if (prepareNum >= 2 && prepareNum == Object.keys(this.users).length) return true;
        return false;
      };
      RoomMgr.prototype.isPlayerPrepare = function() {
        var seatid = this.myseatid;
        if (this.preparemap[seatid]) return true;
        return false;
      };
      RoomMgr.prototype.http_reqCheating = function(msg) {
        var result = msg.result;
        for (var key in result) {
          var uid = parseInt(key);
          var info = result[key];
          var seatid = this.uidseatmap[uid];
          if (info.ip_res) {
            var userinfo = UserMgr_1.default.getInstance().getUserById(uid);
            this.ipWarnningSeats[seatid] = true;
          }
          if (info.lal_res) {
            var userinfo = UserMgr_1.default.getInstance().getUserById(uid);
            this.distWarningSeats[seatid] = true;
          }
        }
      };
      RoomMgr.prototype.getIpWarnningBySeatId = function(seatid) {
        return this.ipWarnningSeats[seatid];
      };
      RoomMgr.prototype.getDistWarnningBySeatId = function(seatid) {
        return this.distWarningSeats[seatid];
      };
      RoomMgr.prototype.isInRoom = function() {
        return this.b_inRoom;
      };
      RoomMgr.prototype.enterRoom = function() {
        console.log("发送了enterRoom");
        this.b_inRoom = true;
        var voiceState = UserDefaultCfg_1.default.getInstance().getVoiceState();
        LocalStorage_1.default.getInstance().getVoicestateCfg() && (voiceState = LocalStorage_1.default.getInstance().getVoicestateCfg());
        var msg = {
          voicestate: voiceState
        };
        this.send_msg("connector.entryHandler.enterRoom", msg);
      };
      RoomMgr.prototype.getUidBySeatId = function(seatId) {
        return this.users[seatId];
      };
      RoomMgr.prototype.getSeatIdByUid = function(uid) {
        for (var seatId in this.users) if (uid == this.users[seatId]) return seatId;
        return null;
      };
      RoomMgr.prototype.updateBunchInfo = function(bunchInfo) {
        var leiji = {};
        for (var k in bunchInfo.leiji) leiji[parseInt(k)] = bunchInfo.leiji[k];
        var meiju = [];
        for (var i = 0; i < bunchInfo.meiju.length; ++i) {
          var item = {};
          var tmpitem = bunchInfo.meiju[i];
          for (var k in tmpitem) item[parseInt(k)] = tmpitem[k];
          meiju.push(item);
        }
        this.bunchInfo = bunchInfo;
        this.bunchInfo.seatcount = this.roominfo.seatcount;
        this.bunchInfo.meiju = meiju;
        this.bunchInfo.leiji = leiji;
        this.roundindex = bunchInfo.roundIndex;
        this.bunchFinish = false;
        this.bunchInfo.roomOwner = this.roominfo.owner;
        this.bunchInfo.roomValue = this.fangKaCfg;
        console.log("fangKaCfg1", this.fangKaCfg);
        this.fangKaCfg.b_yike ? this.bunchInfo.scorefinish && (this.bunchFinish = true) : this.roundindex == this.fangKaCfg.v_roundcount && (this.bunchFinish = true);
        BunchInfoMgr_1.default.getInstance().setBunchInfo(this.bunchInfo);
        BunchInfoMgr_1.default.getInstance().setRoomId(this.roominfo.password);
        return false;
      };
      RoomMgr.prototype.connector_entryHandler_enterRoom = function(msg) {
        console.log("connector_entryHandler_enterRoom seats=", msg);
        this.b_bunchStarted = msg.bunchStarted;
        this.bwatch = msg.bwatch;
        this.updateBunchInfo(msg.bunchInfo);
        this.updateRoomUsers(msg);
        this.startYaYaSdk();
        this.bGameIsStarted = msg.gamestarted;
        console.log("游戏开始了=", this.bGameIsStarted, msg.gamestarted);
        this.m_applySeats = {};
        if (null != msg.applyseatId) {
          this.m_applyDissolutionSeatId = msg.applyseatId;
          console.log("m_applySeats=" + this.m_applySeats);
          for (var key in msg.applySeats) {
            var seatid = parseInt(key);
            this.m_applySeats[seatid] = msg.applySeats[seatid];
          }
          this.start_sub_module(G_MODULE.ApplyDisbandRoom);
        }
      };
      RoomMgr.prototype.room_roomHandler_nextRound = function(msg) {
        this.updateRoomUsers(msg);
      };
      RoomMgr.prototype.reqCreateFangKaRoom = function() {
        this.send_msg("http.reqCreateFangKaRoom");
      };
      RoomMgr.prototype.http_reqCreateFangKaVerify = function(msg) {
        this.reqCreateFangKaRoom();
      };
      RoomMgr.prototype.reqCreateFangKaVerify = function() {
        var gameid = BetMgr_1.default.getInstance().getGameId();
        var roomRuleInfo = CreateRoomMgr_1.default.getInstance().getRoomRuleInfo(gameid);
        var clubid = CreateRoomMgr_1.default.getInstance().getClubId();
        var paysource = CreateRoomMgr_1.default.getInstance().getClubPaysource();
        if (2 == paysource && clubid) {
          var clubGold = VerifyMgr_1.default.getInstance().checkClubGold(clubid, roomRuleInfo.v_fangfei);
          if (!clubGold) {
            FrameMgr_1.default.getInstance().showTips("茶馆钻石不足");
            return;
          }
          console.log("这是公费创建房间");
        } else {
          var costJudge = VerifyMgr_1.default.getInstance().checkGold(roomRuleInfo.v_fangfei);
          if (!costJudge) {
            var okcb = function() {
              this.start_sub_module(G_MODULE.Shop);
            };
            FrameMgr_1.default.getInstance().showDialog("钻石不足，是否前往充值？", okcb, "钻石不足", null);
            return;
          }
          console.log("这是自费创建房间");
        }
        if (13 == gameid) if (3 == roomRuleInfo.v_extendRule) {
          if (!this.sssPeihua(roomRuleInfo)) {
            var text = "配花数量不足";
            FrameMgr_1.default.getInstance().showTips(text, null, 35, cc.color(255, 0, 0), cc.p(0, 0), "Arial", 1500);
            return;
          }
        } else roomRuleInfo.v_allotFlowerData = [ 1, 1, 1, 1 ];
        var msg = {
          gameid: gameid,
          roomvalue: roomRuleInfo,
          clubid: clubid,
          paysource: paysource
        };
        console.log("创建包厢上传数据", msg);
        this.send_msg("http.reqCreateFangKaVerify", msg);
        CreateRoomMgr_1.default.getInstance().setProperty(1, "paysource");
        CreateRoomMgr_1.default.getInstance().setProperty(0, "clubId");
        var gameCode = GameCateCfg_1.default.getInstance().getGameById(gameid).code;
        var roomRuleInfoGroups = CreateRoomMgr_1.default.getInstance().getInfoGroups(gameid);
        roomRuleInfoGroups[LoginMgr_1.default.getInstance().getUid().toString()] = roomRuleInfo;
        LocalStorage_1.default.getInstance().setRoomRuleInfoGroups(gameCode, roomRuleInfoGroups);
        console.log("存入本地的数据", roomRuleInfo);
      };
      RoomMgr.prototype.sssPeihua = function(roomRuleInfo) {
        if (3 == roomRuleInfo.v_extendRule) {
          var isOK = false;
          var peiHuaCount = 0;
          var peiHuaData = roomRuleInfo.v_allotFlowerData;
          for (var i = 0; i < peiHuaData.length; i++) peiHuaCount += peiHuaData[i];
          isOK = roomRuleInfo.v_seatcount <= 4 ? 4 == peiHuaCount : peiHuaCount == roomRuleInfo.v_seatcount;
          return isOK;
        }
      };
      RoomMgr.prototype.startYaYaSdk = function() {
        var userinfo = UserMgr_1.default.getInstance().getMyInfo();
        console.log(userinfo.id, userinfo.nickname, this.rid);
        YySdk_1.default.getInstance().InitYaYaSdk(userinfo.id, userinfo.nickname, this.rid);
      };
      RoomMgr.getInstance = function() {
        this._instance || (this._instance = new RoomMgr());
        return this._instance;
      };
      return RoomMgr;
    }(BaseMgr_1.default);
    exports.default = RoomMgr;
    cc._RF.pop();
  }, {
    "../CfgMgrs/GameAudioCfg": "GameAudioCfg",
    "../CfgMgrs/GameCateCfg": "GameCateCfg",
    "../CfgMgrs/UserDefaultCfg": "UserDefaultCfg",
    "../Libs/BaseMgr": "BaseMgr",
    "../Libs/LocalStorage": "LocalStorage",
    "../NetCenter/GameNet": "GameNet",
    "../NetCenter/NetNotify": "NetNotify",
    "../SdkMgrs/YySdk": "YySdk",
    "./BetMgr": "BetMgr",
    "./BunchInfoMgr": "BunchInfoMgr",
    "./CreateRoomMgr": "CreateRoomMgr",
    "./FrameMgr": "FrameMgr",
    "./GEventDef": "GEventDef",
    "./LoginMgr": "LoginMgr",
    "./RecordMgr": "RecordMgr",
    "./SeatMgr": "SeatMgr",
    "./UserMgr": "UserMgr",
    "./VerifyMgr": "VerifyMgr",
    "./viewLogicSeatConvertMgr": "viewLogicSeatConvertMgr"
  } ],
  RoomOptionCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "11bf2qIUEpNDZ2TYT9qnmCs", "RoomOptionCfg");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCfg_1 = require("../Libs/BaseCfg");
    var RoomMgr_1 = require("../GameMgrs/RoomMgr");
    var RoomOptionCfg = function(_super) {
      __extends(RoomOptionCfg, _super);
      function RoomOptionCfg() {
        var _this = _super.call(this) || this;
        _this.roomOptionPath = null;
        _this.content = null;
        _this.data = null;
        _this.title = null;
        _this.payTypeInfo = [ "首局结算时房主支付", "首局结算时所有玩家各支付", "总结算时赢家按比例共支付" ];
        _this.roomOptionPath = _this.getFullPath("roomoption");
        return _this;
      }
      RoomOptionCfg.getInstance = function() {
        this._instance || (this._instance = new RoomOptionCfg());
        return this._instance;
      };
      RoomOptionCfg.prototype.loadCb = function(name, data) {
        this.loaded = true;
        this.data = data;
      };
      RoomOptionCfg.prototype.getGameRoomOption = function(gameId) {
        return this.data[gameId];
      };
      RoomOptionCfg.prototype.getContentTransToString = function(gameId, roomInfo) {
        this.content = [];
        var gameData = this.data[gameId];
        for (var key in roomInfo) {
          var value = roomInfo[key];
          var clubid = RoomMgr_1.default.getInstance().getEnterFangKaClubId();
          var paysource = RoomMgr_1.default.getInstance().getEnterFangKaPaysource();
          if ("v_paytype" == key && 0 != clubid && paysource > 1) value = 3; else if ("v_youjinjiangli" == key) ; else if ("v_shasanjiangli" == key && 1 == gameId) ; else if ("v_allotFlowerData" == key) {
            if (3 == roomInfo.v_extendRule) {
              var contentString = "方块+" + roomInfo[key][0] + "梅花+" + roomInfo[key][1] + "红桃+" + roomInfo[key][2] + "黑桃+" + roomInfo[key][3];
              this.content.push(contentString);
            }
          } else if ("v_buyHorseData" == key) {
            if (roomInfo.v_buyHorse) {
              var contentString = gameData.content[key][value.toString()];
              this.content.push(contentString);
            }
          } else if ("b_yike" == key || "t_bazhanghua" == key || "v_paytype" == key || "v_fangfei" == key || "b_hupai" == key || "v_playerbuyLimit" == key || "t_youjin" == key) ; else if ("v_fullstart" == key && 13 == gameId) ; else if ("v_startModel" == key && 13 != gameId) ; else if (null != gameData.content[key] && void 0 != gameData.content[key]) {
            var contentString = gameData.content[key][value.toString()];
            this.content.push(contentString);
          }
        }
        return this.content;
      };
      RoomOptionCfg.prototype.getRoomDescToString = function(gameId, roomInfo) {
        this.content = [];
        var gameData = this.data[gameId];
        for (var key in roomInfo) {
          var value = roomInfo[key];
          var clubid = RoomMgr_1.default.getInstance().getEnterFangKaClubId();
          var paysource = RoomMgr_1.default.getInstance().getEnterFangKaPaysource();
          if ("v_paytype" == key && 0 != clubid && paysource > 1) value = 3; else if ("v_youjinjiangli" == key) ; else if ("v_shasanjiangli" == key && 1 == gameId) ; else if ("v_allotFlowerData" == key) {
            if (3 == roomInfo.v_extendRule) {
              var contentString = "方块+" + roomInfo[key][0] + "梅花+" + roomInfo[key][1] + "红桃+" + roomInfo[key][2] + "黑桃+" + roomInfo[key][3];
              this.content.push(contentString);
            }
          } else if ("v_buyHorseData" == key) {
            if (roomInfo.v_buyHorse) {
              var contentString = gameData.content[key][value.toString()];
              this.content.push(contentString);
            }
          } else if ("b_yike" == key || "t_bazhanghua" == key || "v_paytype" == key || "v_fangfei" == key || "b_hupai" == key || "v_playerbuyLimit" == key || "v_roundcount" == key || "v_seatcount" == key) ; else if ("v_fullstart" == key && 13 == gameId) ; else if ("t_youjin" == key || "v_youjintype" == key) {
            if (!!gameData.content[key]) {
              var contentString = gameData.content[key][value.toString()];
              this.content.push(contentString);
            }
          } else if ("v_startModel" == key && 13 != gameId) ; else if (null != gameData.content[key] && void 0 != gameData.content[key]) if (gameData.content[key]["describe"]) {
            var contentString = gameData.content[key]["describe"][value.toString()];
            this.content.push(contentString);
          } else {
            var contentString = gameData.content[key][value.toString()];
            this.content.push(contentString);
          }
        }
        return this.content;
      };
      RoomOptionCfg.prototype.getTitleTransToString = function(gameId, roomInfo) {
        this.title = [];
        var gameData = this.data[gameId];
        for (var key in roomInfo) {
          var value = roomInfo[key];
          if ("v_youjinjiangli" == key) ; else if ("v_shasanjiangli" == key && 1 == gameId) ; else if ("v_allotFlowerData" == key) {
            if (3 == roomInfo.v_extendRule) {
              var titleString = gameData.title[key];
              this.title.push(titleString);
            }
          } else if ("v_buyHorseData" == key) {
            if (roomInfo.v_buyHorse) {
              var titleString = gameData.title[key];
              this.title.push(titleString);
            }
          } else if ("b_yike" == key || "t_bazhanghua" == key || "v_paytype" == key || "v_fangfei" == key || "b_hupai" == key || "v_playerbuyLimit" == key || "t_youjin" == key) ; else if ("v_fullstart" == key && 13 == gameId) ; else if ("v_startModel" == key && 13 != gameId) ; else {
            var titleString = gameData.title[key];
            this.title.push(titleString);
          }
        }
        return this.title;
      };
      RoomOptionCfg.prototype.getFanfei = function(gameId, roomInfo) {
        var gameData = this.data[gameId];
        var text = this.payTypeInfo[roomInfo.v_paytype] + roomInfo["v_fangfei"] + "钻石";
        return text;
      };
      RoomOptionCfg.prototype.load = function() {
        this.loadRes(this.roomOptionPath, this.loadCb);
      };
      return RoomOptionCfg;
    }(BaseCfg_1.default);
    exports.default = RoomOptionCfg;
    cc._RF.pop();
  }, {
    "../GameMgrs/RoomMgr": "RoomMgr",
    "../Libs/BaseCfg": "BaseCfg"
  } ],
  RoomOptionCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "73d36IO8bVDup8syCL91cVJ", "RoomOptionCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var RoomMgr_1 = require("../../GameMgrs/RoomMgr");
    var BetMgr_1 = require("../../GameMgrs/BetMgr");
    var RoomOptionCfg_1 = require("../../CfgMgrs/RoomOptionCfg");
    var GameFreeMgr_1 = require("../../GameMgrs/GameFreeMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.roomOptionData = {};
        _this.roomInfo = {};
        _this.gameId = null;
        _this.gameId = BetMgr_1.default.getInstance().getGameId();
        _this.roomOptionData = RoomOptionCfg_1.default.getInstance().getGameRoomOption(_this.gameId);
        _this.roomInfo = RoomMgr_1.default.getInstance().getFangKaCfg();
        return _this;
      }
      Model.prototype.getContent = function(key) {
        return this.roomOptionData.content[key];
      };
      Model.prototype.getTitle = function(key) {
        return this.roomOptionData.title[key];
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.node = null;
        _this.ui = {
          roomOptionItem: ctrl.RoomOptionItem,
          btnOpen: ctrl.BtnOpen,
          btnPackup: ctrl.BtnPackup,
          optionContent: ctrl.OptionContent,
          btnClose: ctrl.BtnClose,
          arrItem: []
        };
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.initOptionItem();
      };
      View.prototype.initOptionItem = function() {
        console.log("房间配置信息", this.model.roomInfo);
        for (var key in this.model.roomInfo) {
          var item = cc.instantiate(this.ui.roomOptionItem);
          item.parent = this.ui.optionContent;
          var content = this.model.getContent(key);
          var title = this.model.getTitle(key);
          var value = this.model.roomInfo[key];
          var itemComp = item.getComponent("RoomOptionItemCtrl");
          var clubid = RoomMgr_1.default.getInstance().getEnterFangKaClubId();
          var paysource = RoomMgr_1.default.getInstance().getEnterFangKaPaysource();
          "v_paytype" == key && 0 != clubid && paysource > 1 && (value = 3);
          if ("v_fangfei" == key) {
            itemComp.Title.string = title;
            GameFreeMgr_1.default.getInstance().isFree(this.model.gameId) ? itemComp.ItemValue.string = "限时免费无需支付房费" : itemComp.ItemValue.string = this.model.roomInfo[key] + "钻石";
            itemComp.Describe.string = "开设房间所需要的费用";
          } else if ("v_youjinjiangli" == key) ; else if ("v_shasanjiangli" == key) ; else if ("b_yike" == key || "t_bazhanghua" == key || "b_hupai" == key || "t_youjin" == key) {
            console.log("不显示" + key);
            itemComp.finish();
          } else if ("v_fullstart" == key && 13 == this.model.gameId) {
            console.log("不显示" + key);
            itemComp.finish();
          } else if ("t_youjin" == key && 6 == this.model.gameId) console.log("不显示" + key); else if ("v_startModel" == key && 13 != this.model.gameId) {
            console.log("不显示" + key);
            itemComp.finish();
          } else if ("v_playerbuyLimit" == key && 19 == this.model.gameId) {
            console.log("暂时不显示" + key);
            itemComp.finish();
          } else if ("v_allotFlowerData" == key) {
            itemComp.Title.string = title;
            itemComp.ItemValue.string = "";
            itemComp.Describe.string = "";
            for (var i = 0; i < value.length; i++) itemComp.ItemValue.string += value[i] ? content[i + 1] : content[0];
            for (var i = 0; i < value.length; i++) itemComp.Describe.string += content.describe[i] + "x" + value[i] + " ";
          } else if ("v_buyHorseData" == key) {
            itemComp.Title.string = title;
            var buyHorse = parseInt(this.model.roomInfo["v_buyHorse"]);
            itemComp.ItemValue.string = buyHorse ? content[value.toString()] : "无";
            itemComp.Describe.string = buyHorse ? content[value.toString()] : "无码牌";
          } else if (null != content && void 0 != content) {
            itemComp.Title.string = title;
            itemComp.ItemValue.string = content[value.toString()];
            itemComp.Describe.string = content.describe[value.toString()];
          }
          this.ui.arrItem.push(item);
        }
      };
      return View;
    }(BaseView_1.default);
    var RoomOptionCtrl = function(_super) {
      __extends(RoomOptionCtrl, _super);
      function RoomOptionCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.RoomOptionItem = null;
        _this.BtnOpen = null;
        _this.BtnPackup = null;
        _this.OptionContent = null;
        _this.BtnClose = null;
        return _this;
      }
      RoomOptionCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      RoomOptionCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onStartGame: this.onStartGame,
          onDissolutionRoom: this.onDissolutionRoom,
          onGameFinished: this.onGameFinished
        };
      };
      RoomOptionCtrl.prototype.defineGlobalEvents = function() {};
      RoomOptionCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.btnOpen, this.btnOpen_cb, "切换展开规则");
        this.connect(G_UiType.button, this.ui.btnPackup, this.BtnPackup_cb, "切换收起规则");
        this.connect(G_UiType.button, this.ui.btnClose, this.btnClose_cb, "关闭按钮");
      };
      RoomOptionCtrl.prototype.start = function() {};
      RoomOptionCtrl.prototype.onGameFinished = function(msg) {
        this.finish();
      };
      RoomOptionCtrl.prototype.btnOpen_cb = function(event) {
        for (var i = 0; i < this.ui.arrItem.length; i++) if ("" != this.ui.arrItem[i].name) {
          var value = this.ui.arrItem[i].getChildByName("describe").getComponent(cc.Label).string;
          var content = this.ui.arrItem[i].getChildByName("shortNode").getChildByName("centent");
          content.color = new cc.Color(168, 68, 55);
          this.ui.btnOpen.active = false;
          this.ui.btnPackup.active = true;
          "" != value && (this.ui.arrItem[i].getChildByName("describe").active = true);
        }
      };
      RoomOptionCtrl.prototype.BtnPackup_cb = function(event) {
        for (var i = 0; i < this.ui.arrItem.length; i++) if ("" != this.ui.arrItem[i].name) {
          this.ui.arrItem[i].getChildByName("describe").active = false;
          var content = this.ui.arrItem[i].getChildByName("shortNode").getChildByName("centent");
          content.color = new cc.Color(147, 96, 35);
        }
        this.ui.btnOpen.active = true;
        this.ui.btnPackup.active = false;
      };
      RoomOptionCtrl.prototype.btnClose_cb = function(event) {
        this.finish();
      };
      RoomOptionCtrl.prototype.onStartGame = function(msg) {
        this.finish();
      };
      RoomOptionCtrl.prototype.onDissolutionRoom = function(msg) {
        msg.result && this.finish();
      };
      __decorate([ property({
        tooltip: "",
        type: cc.Prefab
      }) ], RoomOptionCtrl.prototype, "RoomOptionItem", void 0);
      __decorate([ property({
        tooltip: "",
        type: cc.Node
      }) ], RoomOptionCtrl.prototype, "BtnOpen", void 0);
      __decorate([ property({
        tooltip: "",
        type: cc.Node
      }) ], RoomOptionCtrl.prototype, "BtnPackup", void 0);
      __decorate([ property({
        tooltip: "",
        type: cc.Node
      }) ], RoomOptionCtrl.prototype, "OptionContent", void 0);
      __decorate([ property({
        tooltip: "",
        type: cc.Node
      }) ], RoomOptionCtrl.prototype, "BtnClose", void 0);
      RoomOptionCtrl = __decorate([ ccclass ], RoomOptionCtrl);
      return RoomOptionCtrl;
    }(BaseCtrl_1.default);
    exports.default = RoomOptionCtrl;
    cc._RF.pop();
  }, {
    "../../CfgMgrs/RoomOptionCfg": "RoomOptionCfg",
    "../../GameMgrs/BetMgr": "BetMgr",
    "../../GameMgrs/GameFreeMgr": "GameFreeMgr",
    "../../GameMgrs/RoomMgr": "RoomMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  RoomOptionItemCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d7d82UQ2SZJ84dT8wKOplow", "RoomOptionItemCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var BetMgr_1 = require("../../GameMgrs/BetMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.title = null;
        _this.conetne = null;
        _this.describe = null;
        _this.gameId = null;
        _this.gameId = BetMgr_1.default.getInstance().getGameId();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.node = null;
        _this.ui = {
          title: ctrl.Title,
          itemValue: ctrl.ItemValue,
          describe: ctrl.Describe
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {};
      return View;
    }(BaseView_1.default);
    var RoomOptionItemCtrl = function(_super) {
      __extends(RoomOptionItemCtrl, _super);
      function RoomOptionItemCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.Title = null;
        _this.ItemValue = null;
        _this.Describe = null;
        return _this;
      }
      RoomOptionItemCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      RoomOptionItemCtrl.prototype.defineNetEvents = function() {};
      RoomOptionItemCtrl.prototype.defineGlobalEvents = function() {};
      RoomOptionItemCtrl.prototype.connectUI = function() {};
      RoomOptionItemCtrl.prototype.start = function() {};
      __decorate([ property({
        tooltip: "",
        type: cc.Label
      }) ], RoomOptionItemCtrl.prototype, "Title", void 0);
      __decorate([ property({
        tooltip: "",
        type: cc.Label
      }) ], RoomOptionItemCtrl.prototype, "ItemValue", void 0);
      __decorate([ property({
        tooltip: "",
        type: cc.Label
      }) ], RoomOptionItemCtrl.prototype, "Describe", void 0);
      RoomOptionItemCtrl = __decorate([ ccclass ], RoomOptionItemCtrl);
      return RoomOptionItemCtrl;
    }(BaseCtrl_1.default);
    exports.default = RoomOptionItemCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/BetMgr": "BetMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  RoomPreventionCheatingCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c3e9cmpLTtDCZEaYeARorq4", "RoomPreventionCheatingCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var UiMgr_1 = require("../../GameMgrs/UiMgr");
    var RoomMgr_1 = require("../../GameMgrs/RoomMgr");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.users = null;
        _this.userInfo = null;
        _this.logicseatid = null;
        _this.viewSeatId = null;
        _this.uid = null;
        _this.userCheatList = null;
        _this.samedistusers = [];
        _this.sameipusers = [];
        _this.poscfg = {
          2: [ {
            x: -340,
            y: 165
          }, {
            x: -341,
            y: -142
          } ],
          3: [ {
            x: -340,
            y: -139
          }, {
            x: -494,
            y: 12
          }, {
            x: -194,
            y: 12
          } ],
          4: [ {
            x: -340,
            y: -139
          }, {
            x: -494,
            y: 12
          }, {
            x: -194,
            y: 12
          }, {
            x: -340,
            y: 165
          } ],
          5: [ {
            x: -340,
            y: -139
          }, {
            x: -494,
            y: 12
          }, {
            x: -194,
            y: 12
          }, {
            x: -340,
            y: 165
          }, {
            x: -446,
            y: 114
          } ],
          6: [ {
            x: -340,
            y: -139
          }, {
            x: -494,
            y: 12
          }, {
            x: -194,
            y: 12
          }, {
            x: -340,
            y: 165
          }, {
            x: -446,
            y: 114
          }, {
            x: -216,
            y: 114
          } ],
          7: [ {
            x: -340,
            y: -139
          }, {
            x: -494,
            y: 12
          }, {
            x: -194,
            y: 12
          }, {
            x: -340,
            y: 165
          }, {
            x: -446,
            y: 114
          }, {
            x: -216,
            y: 114
          }, {
            x: -448,
            y: -98
          } ],
          8: [ {
            x: -340,
            y: -139
          }, {
            x: -494,
            y: 12
          }, {
            x: -194,
            y: 12
          }, {
            x: -340,
            y: 165
          }, {
            x: -446,
            y: 114
          }, {
            x: -216,
            y: 114
          }, {
            x: -448,
            y: -98
          }, {
            x: -228,
            y: -98
          } ],
          9: [ {
            x: -340,
            y: 165
          }, {
            x: -446,
            y: 114
          }, {
            x: -223,
            y: 114
          }, {
            x: -494,
            y: 12
          }, {
            x: -194,
            y: 12
          }, {
            x: -461,
            y: -73
          }, {
            x: -213,
            y: -73
          }, {
            x: -391,
            y: -145
          }, {
            x: -275,
            y: -145
          } ],
          10: [ {
            x: -391,
            y: 155
          }, {
            x: -275,
            y: 156
          }, {
            x: -466,
            y: 87
          }, {
            x: -220,
            y: 85
          }, {
            x: -494,
            y: 12
          }, {
            x: -194,
            y: 12
          }, {
            x: -461,
            y: -73
          }, {
            x: -213,
            y: -73
          }, {
            x: -391,
            y: -145
          }, {
            x: -275,
            y: -145
          } ]
        };
        return _this;
      }
      Model.prototype.updateCheat = function(msg) {
        var result = msg.result;
        for (var key in result) {
          var uid = parseInt(key);
          var info = result[key];
          if (info.ip_res) {
            var userinfo = UserMgr_1.default.getInstance().getUserById(uid);
            if (!userinfo) return;
            this.sameipusers.push(userinfo);
          }
          if (info.lal_res) {
            var userinfo = UserMgr_1.default.getInstance().getUserById(uid);
            this.samedistusers.push(userinfo);
          }
        }
        console.log("消息=", msg);
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          label_external: null,
          label_positioning: null,
          label_ip: null,
          img_sao: null,
          externalPlayerNode: null,
          positioningPlayerNode: null,
          IpPlayerNode: null,
          SaoPlayerNode: null,
          img_playerheads: null,
          heads: {},
          lbl_testingwaigua: null,
          lbl_testingdist: null,
          lbl_testingip: null,
          img_distheads: null,
          img_ipheads: null,
          external: null,
          positioning: null,
          ip: null,
          tips: null,
          distheads: [],
          ipheads: []
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.label_external = ctrl.label_external;
        this.ui.label_positioning = ctrl.label_positioning;
        this.ui.label_ip = ctrl.label_ip;
        this.ui.img_sao = ctrl.img_sao;
        this.ui.externalPlayerNode = ctrl.externalPlayerNode;
        this.ui.positioningPlayerNode = ctrl.positioningPlayerNode;
        this.ui.IpPlayerNode = ctrl.IpPlayerNode;
        this.ui.img_playerheads = ctrl.img_playerheads;
        this.ui.lbl_testingip = ctrl.lbl_testingip;
        this.ui.lbl_testingdist = ctrl.lbl_testingdist;
        this.ui.lbl_testingwaigua = ctrl.lbl_testingwaigua;
        this.ui.img_distheads = ctrl.img_distheads;
        this.ui.img_ipheads = ctrl.img_ipheads;
        this.ui.external = ctrl.external;
        this.ui.positioning = ctrl.positioning;
        this.ui.ip = ctrl.ip;
        this.ui.tips = ctrl.tips;
        this.ui.external.active = false;
        this.ui.positioning.active = false;
        this.ui.ip.active = false;
        this.ui.label_external.node.active = false;
        this.ui.label_positioning.node.active = false;
        this.ui.label_ip.node.active = false;
        this.ui.img_distheads.active = false;
        this.ui.img_ipheads.active = false;
        var curPlayerCount = RoomMgr_1.default.getInstance().getPlayerCount();
        for (var i = 0; i < 10; ++i) {
          var headnode = this.ui.img_playerheads.getChildByName("player" + i);
          this.ui.heads[i] = headnode;
          headnode.active = false;
        }
        for (var i = 0; i < curPlayerCount; ++i) {
          var headnode = this.ui.heads[i];
          if (i < curPlayerCount) {
            headnode.setPosition(this.model.poscfg[curPlayerCount][i]);
            var uid = RoomMgr_1.default.getInstance().getUidBySeatId(i);
            if (uid) {
              var userinfo = UserMgr_1.default.getInstance().getUserById(uid);
              UiMgr_1.default.getInstance().setUserHead(headnode, userinfo.headid, userinfo.headurl);
            }
          }
          headnode.active = i < curPlayerCount;
        }
        for (var index = 0; index < this.ui.img_distheads.children.length; ++index) {
          var headnode = this.ui.img_distheads.children[index];
          headnode.active = false;
          this.ui.distheads.push(headnode);
        }
        for (var index = 0; index < this.ui.img_ipheads.children.length; ++index) {
          var headnode = this.ui.img_ipheads.children[index];
          headnode.active = false;
          this.ui.ipheads.push(headnode);
        }
      };
      View.prototype.updateCheat = function() {
        this.ui.lbl_testingdist.node.active = false;
        this.ui.lbl_testingwaigua.node.active = false;
        this.ui.lbl_testingip.node.active = false;
        for (var i = 0; i < this.model.sameipusers.length; ++i) {
          this.ui.ipheads[i].active = true;
          var userinfo = this.model.sameipusers[i];
          UiMgr_1.default.getInstance().setUserHead(this.ui.ipheads[i], userinfo.headid, userinfo.headurl);
        }
        for (var i = 0; i < this.model.samedistusers.length; ++i) {
          this.ui.distheads[i].active = true;
          var userinfo = this.model.samedistusers[i];
          UiMgr_1.default.getInstance().setUserHead(this.ui.distheads[i], userinfo.headid, userinfo.headurl);
        }
      };
      View.prototype.runAction = function() {
        this.ui.img_sao.runAction(cc.rotateBy(3, 1080));
      };
      return View;
    }(BaseView_1.default);
    var Prefab_PreventionCheatingCtrl = function(_super) {
      __extends(Prefab_PreventionCheatingCtrl, _super);
      function Prefab_PreventionCheatingCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.label_external = null;
        _this.label_positioning = null;
        _this.label_ip = null;
        _this.img_sao = null;
        _this.externalPlayerNode = null;
        _this.positioningPlayerNode = null;
        _this.IpPlayerNode = null;
        _this.img_playerheads = null;
        _this.lbl_testingwaigua = null;
        _this.lbl_testingdist = null;
        _this.lbl_testingip = null;
        _this.img_distheads = null;
        _this.img_ipheads = null;
        _this.external = null;
        _this.positioning = null;
        _this.ip = null;
        _this.tips = null;
        _this.timer_delay = null;
        return _this;
      }
      Prefab_PreventionCheatingCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_PreventionCheatingCtrl.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        if (null != this.timer_delay) {
          clearTimeout(this.timer_delay);
          this.timer_delay = null;
        }
      };
      Prefab_PreventionCheatingCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqCheating": this.http_reqCheating
        };
      };
      Prefab_PreventionCheatingCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_PreventionCheatingCtrl.prototype.connectUi = function() {};
      Prefab_PreventionCheatingCtrl.prototype.start = function() {
        var _this = this;
        var curDate = new Date();
        console.log("roompreventing", curDate.getTime());
        this.view.runAction();
        RoomMgr_1.default.getInstance().reqCheating();
        var number = 0;
        var next = function() {
          var cb = null;
          cb = number > 2 ? _this.timeout : taskArr[number];
          setTimeout(function() {
            cb.bind(_this)();
            number++;
            number < 4 && next();
          }, 450);
        };
        var task1 = function() {
          this.ui.external.active = true;
          this.ui.label_external.node.active = true;
        };
        var task2 = function() {
          this.ui.positioning.active = true;
          var count = 0;
          for (var i = 0; i < this.ui.distheads.length; i++) {
            var draw = this.ui.distheads[i].active;
            if (draw) {
              this.ui.img_distheads.active = true;
              break;
            }
            count++;
          }
          count >= this.ui.distheads.length && (this.ui.label_positioning.node.active = true);
        };
        var task3 = function() {
          this.ui.ip.active = true;
          var count = 0;
          for (var i = 0; i < this.ui.ipheads.length; i++) {
            var draw = this.ui.ipheads[i].active;
            if (draw) {
              this.ui.img_ipheads.active = true;
              break;
            }
            count++;
          }
          count >= this.ui.ipheads.length && (this.ui.label_ip.node.active = true);
        };
        var taskArr = [ task1, task2, task3 ];
        next();
      };
      Prefab_PreventionCheatingCtrl.prototype.timeout = function() {
        this.finish();
      };
      Prefab_PreventionCheatingCtrl.prototype.http_reqCheating = function(msg) {
        this.model.updateCheat(msg);
        this.view.updateCheat();
      };
      __decorate([ property(cc.Label) ], Prefab_PreventionCheatingCtrl.prototype, "label_external", void 0);
      __decorate([ property(cc.Label) ], Prefab_PreventionCheatingCtrl.prototype, "label_positioning", void 0);
      __decorate([ property(cc.Label) ], Prefab_PreventionCheatingCtrl.prototype, "label_ip", void 0);
      __decorate([ property(cc.Node) ], Prefab_PreventionCheatingCtrl.prototype, "img_sao", void 0);
      __decorate([ property(cc.Node) ], Prefab_PreventionCheatingCtrl.prototype, "externalPlayerNode", void 0);
      __decorate([ property(cc.Node) ], Prefab_PreventionCheatingCtrl.prototype, "positioningPlayerNode", void 0);
      __decorate([ property(cc.Node) ], Prefab_PreventionCheatingCtrl.prototype, "IpPlayerNode", void 0);
      __decorate([ property(cc.Node) ], Prefab_PreventionCheatingCtrl.prototype, "img_playerheads", void 0);
      __decorate([ property(cc.Label) ], Prefab_PreventionCheatingCtrl.prototype, "lbl_testingwaigua", void 0);
      __decorate([ property(cc.Label) ], Prefab_PreventionCheatingCtrl.prototype, "lbl_testingdist", void 0);
      __decorate([ property(cc.Label) ], Prefab_PreventionCheatingCtrl.prototype, "lbl_testingip", void 0);
      __decorate([ property(cc.Node) ], Prefab_PreventionCheatingCtrl.prototype, "img_distheads", void 0);
      __decorate([ property(cc.Node) ], Prefab_PreventionCheatingCtrl.prototype, "img_ipheads", void 0);
      __decorate([ property(cc.Node) ], Prefab_PreventionCheatingCtrl.prototype, "external", void 0);
      __decorate([ property(cc.Node) ], Prefab_PreventionCheatingCtrl.prototype, "positioning", void 0);
      __decorate([ property(cc.Node) ], Prefab_PreventionCheatingCtrl.prototype, "ip", void 0);
      __decorate([ property(cc.Label) ], Prefab_PreventionCheatingCtrl.prototype, "tips", void 0);
      Prefab_PreventionCheatingCtrl = __decorate([ ccclass ], Prefab_PreventionCheatingCtrl);
      return Prefab_PreventionCheatingCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_PreventionCheatingCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/RoomMgr": "RoomMgr",
    "../../GameMgrs/UiMgr": "UiMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  RoomRuleCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b9dedz/DStAXbtt7coAavw2", "RoomRuleCfg");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCfg_1 = require("../Libs/BaseCfg");
    var RoomRuleCfg = function(_super) {
      __extends(RoomRuleCfg, _super);
      function RoomRuleCfg() {
        var _this = _super.call(this) || this;
        _this.roomrulePath = null;
        _this.roomRules = null;
        _this.roomrulePath = _this.getFullPath("roomrule");
        return _this;
      }
      RoomRuleCfg.getInstance = function() {
        this._instance || (this._instance = new RoomRuleCfg());
        return this._instance;
      };
      RoomRuleCfg.prototype.loadCb = function(name, data) {
        this.loaded = true;
        this.roomRules = {};
        for (var key in data) this.roomRules[key] = data[key];
      };
      RoomRuleCfg.prototype.getRoomRuleById = function(id) {
        return this.roomRules[id];
      };
      RoomRuleCfg.prototype.load = function() {
        this.loadRes(this.roomrulePath, this.loadCb);
      };
      return RoomRuleCfg;
    }(BaseCfg_1.default);
    exports.default = RoomRuleCfg;
    cc._RF.pop();
  }, {
    "../Libs/BaseCfg": "BaseCfg"
  } ],
  RoomRuleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "566fdapdvBIGIyX5KwzeOjN", "RoomRuleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var ServerMgr_1 = require("../../../AppStart/AppMgrs/ServerMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          BtnExit: null,
          BtnOpen: null,
          BtnRetract: null,
          content: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.BtnExit = ctrl.BtnExit;
        this.ui.BtnOpen = ctrl.BtnOpen;
        this.ui.BtnRetract = ctrl.BtnRetract;
        this.ui.content = ctrl.content;
      };
      View.prototype.showContent = function(type) {
        var url = ServerMgr_1.default.getInstance().getGameRuleUrl("qzmj", type);
        if (1 == type) {
          this.ui.content.url = url;
          this.ui.BtnOpen.active = true;
          this.ui.BtnRetract.active = false;
        } else {
          this.ui.content.url = url;
          this.ui.BtnOpen.active = false;
          this.ui.BtnRetract.active = true;
        }
      };
      return View;
    }(BaseView_1.default);
    var Prefab_QzmjRuleCtrl = function(_super) {
      __extends(Prefab_QzmjRuleCtrl, _super);
      function Prefab_QzmjRuleCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.BtnExit = null;
        _this.BtnOpen = null;
        _this.BtnRetract = null;
        _this.content = null;
        _this.Prefab_autograph = null;
        return _this;
      }
      Prefab_QzmjRuleCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_QzmjRuleCtrl.prototype.defineNetEvents = function() {};
      Prefab_QzmjRuleCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_QzmjRuleCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.BtnExit, this.onBtnExit_cb, "退出房间");
        this.connect(G_UiType.button, this.ui.BtnOpen, this.onBtnOpen_cb, "展开规则");
        this.connect(G_UiType.button, this.ui.BtnRetract, this.onBtnRetract_cb, "收起规则");
      };
      Prefab_QzmjRuleCtrl.prototype.start = function() {
        this.view.showContent(1);
      };
      Prefab_QzmjRuleCtrl.prototype.onBtnExit_cb = function(event) {
        this.finish();
      };
      Prefab_QzmjRuleCtrl.prototype.onBtnOpen_cb = function(event) {
        this.view.showContent(2);
      };
      Prefab_QzmjRuleCtrl.prototype.onBtnRetract_cb = function(event) {
        this.view.showContent(1);
      };
      __decorate([ property({
        tooltip: "关闭按钮",
        type: cc.Node
      }) ], Prefab_QzmjRuleCtrl.prototype, "BtnExit", void 0);
      __decorate([ property({
        tooltip: "展开按钮",
        type: cc.Node
      }) ], Prefab_QzmjRuleCtrl.prototype, "BtnOpen", void 0);
      __decorate([ property({
        tooltip: "收起按钮",
        type: cc.Node
      }) ], Prefab_QzmjRuleCtrl.prototype, "BtnRetract", void 0);
      __decorate([ property({
        tooltip: "规则内容",
        type: cc.WebView
      }) ], Prefab_QzmjRuleCtrl.prototype, "content", void 0);
      __decorate([ property({
        tooltip: "内容预制体",
        type: cc.Prefab
      }) ], Prefab_QzmjRuleCtrl.prototype, "Prefab_autograph", void 0);
      Prefab_QzmjRuleCtrl = __decorate([ ccclass ], Prefab_QzmjRuleCtrl);
      return Prefab_QzmjRuleCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_QzmjRuleCtrl;
    cc._RF.pop();
  }, {
    "../../../AppStart/AppMgrs/ServerMgr": "ServerMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  RoomRuleMoreSuggestionCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8f8f3m0h5dNwIgoXWwpTLJI", "RoomRuleMoreSuggestionCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_label: null,
          node_sure: null,
          node_close: null,
          node_edit: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_label = ctrl.Label;
        this.ui.node_close = ctrl.Btn_Close;
        this.ui.node_sure = ctrl.Btn_Sure;
        this.ui.node_edit = ctrl.Edit;
      };
      return View;
    }(BaseView_1.default);
    var RoomRuleMoreSuggestionCtrl = function(_super) {
      __extends(RoomRuleMoreSuggestionCtrl, _super);
      function RoomRuleMoreSuggestionCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.Btn_Sure = null;
        _this.Btn_Close = null;
        _this.Edit = null;
        _this.Label = null;
        return _this;
      }
      RoomRuleMoreSuggestionCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      RoomRuleMoreSuggestionCtrl.prototype.defineNetEvents = function() {};
      RoomRuleMoreSuggestionCtrl.prototype.defineGlobalEvents = function() {};
      RoomRuleMoreSuggestionCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.Btn_Close, this.Btn_Close_cb, "关闭");
        this.connect(G_UiType.image, this.Btn_Sure, this.Btn_Sure_cb, "确定");
        this.connect(G_UiType.edit, this.Edit, this.editTextChenge_cb, "确定");
        this.connect(G_UiType.button, this.node, this.bg_cb, "更多界面的背景");
      };
      RoomRuleMoreSuggestionCtrl.prototype.start = function() {};
      RoomRuleMoreSuggestionCtrl.prototype.Btn_Close_cb = function() {
        this.finish();
      };
      RoomRuleMoreSuggestionCtrl.prototype.Btn_Sure_cb = function() {
        this.finish();
      };
      RoomRuleMoreSuggestionCtrl.prototype.editTextChenge_cb = function(event) {
        var length = this.ui.node_edit.getComponent(cc.EditBox).string.length;
        this.ui.node_label.getComponent(cc.Label).string = "(" + length + "/200)";
      };
      RoomRuleMoreSuggestionCtrl.prototype.bg_cb = function() {};
      __decorate([ property({
        tooltip: "确定按钮",
        type: cc.Node
      }) ], RoomRuleMoreSuggestionCtrl.prototype, "Btn_Sure", void 0);
      __decorate([ property({
        tooltip: "关闭按钮",
        type: cc.Node
      }) ], RoomRuleMoreSuggestionCtrl.prototype, "Btn_Close", void 0);
      __decorate([ property({
        tooltip: "输入框",
        type: cc.Node
      }) ], RoomRuleMoreSuggestionCtrl.prototype, "Edit", void 0);
      __decorate([ property({
        tooltip: "字数文本",
        type: cc.Node
      }) ], RoomRuleMoreSuggestionCtrl.prototype, "Label", void 0);
      RoomRuleMoreSuggestionCtrl = __decorate([ ccclass ], RoomRuleMoreSuggestionCtrl);
      return RoomRuleMoreSuggestionCtrl;
    }(BaseCtrl_1.default);
    exports.default = RoomRuleMoreSuggestionCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  RoomSettingCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8cf5cWfTNNM14DXnI0sD1hO", "RoomSettingCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var SettingMgr_1 = require("../../GameMgrs/SettingMgr");
    var SssDef_1 = require("../../../Games/Sss/SssMgr/SssDef");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CONFIGS = {
      option: {
        baseCtrl: 1,
        audioCtrl: 2
      }
    };
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_CloseBtn: null,
          node_toggle1: null,
          node_toggle2: null,
          Prefab_audioCtrl: null,
          Prefab_baseCtrl: null,
          node_content: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_CloseBtn = ctrl.CloseBtn;
        this.ui.node_toggle1 = ctrl.node_toggle1;
        this.ui.node_toggle2 = ctrl.node_toggle2;
        this.ui.node_content = ctrl.node_content;
        this.ui.Prefab_baseCtrl = ctrl.Prefab_baseCtrl;
        this.ui.Prefab_audioCtrl = ctrl.Prefab_audioCtrl;
      };
      View.prototype.setOption = function(chooseOption) {
        if (this.curOption == chooseOption) return;
        this.curOption = chooseOption;
        this.updateOptionBtn();
        switch (chooseOption) {
         case CONFIGS.option.baseCtrl:
          this.addBaseCtrl();
          break;

         case CONFIGS.option.audioCtrl:
          this.addAudioCtrl();
        }
      };
      View.prototype.updateOptionBtn = function() {
        var toggleList1 = this.ui.node_toggle1.children, toggleList2 = this.ui.node_toggle2.children;
        switch (this.curOption) {
         case CONFIGS.option.baseCtrl:
          toggleList1[1].active = true;
          toggleList2[1].active = false;
          break;

         case CONFIGS.option.audioCtrl:
          toggleList1[1].active = false;
          toggleList2[1].active = true;
        }
      };
      View.prototype.addBaseCtrl = function() {
        if (!this.node_baseCtrl) {
          this.node_baseCtrl = cc.instantiate(this.ui.Prefab_baseCtrl);
          this.node_baseCtrl.parent = this.ui.node_content;
        }
        this.node_baseCtrl.active = true;
        this.node_audioCtrl && (this.node_audioCtrl.active = false);
      };
      View.prototype.addAudioCtrl = function() {
        if (!this.node_audioCtrl) {
          this.node_audioCtrl = cc.instantiate(this.ui.Prefab_audioCtrl);
          this.node_audioCtrl.parent = this.ui.node_content;
        }
        this.node_audioCtrl.active = true;
        this.node_baseCtrl && (this.node_baseCtrl.active = false);
      };
      return View;
    }(BaseView_1.default);
    var Prefab_SettingCtrl = function(_super) {
      __extends(Prefab_SettingCtrl, _super);
      function Prefab_SettingCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.CloseBtn = null;
        _this.node_toggle1 = null;
        _this.node_toggle2 = null;
        _this.node_content = null;
        _this.Prefab_audioCtrl = null;
        _this.Prefab_baseCtrl = null;
        return _this;
      }
      Prefab_SettingCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.view.setOption(CONFIGS.option.baseCtrl);
        SettingMgr_1.default.getInstance().setIsPlaza(false);
      };
      Prefab_SettingCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onProcess: this.onProcess,
          onStartGame: this.onStartGame,
          onDissolutionRoom: this.onDissolutionRoom,
          onGameFinished: this.onGameFinished
        };
      };
      Prefab_SettingCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          room_closesetting: this.room_closesetting
        };
      };
      Prefab_SettingCtrl.prototype.room_closesetting = function() {
        this.finish();
      };
      Prefab_SettingCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.node_CloseBtn, this._onClick_Close, "点击关闭");
        this.connect(G_UiType.image, this.ui.node_toggle1, this.ControlSetting_cb, "切换到操作设置");
        this.connect(G_UiType.image, this.ui.node_toggle2, this.MusicSetting_cb, "切换到音乐设置");
      };
      Prefab_SettingCtrl.prototype.start = function() {};
      Prefab_SettingCtrl.prototype.onProcess = function(msg) {
        msg.process == SssDef_1.SssDef.process_peipai ? this.finish() : msg.process == SssDef_1.SssDef.process_gamesettle && this.finish();
      };
      Prefab_SettingCtrl.prototype.onStartGame = function(msg) {
        this.finish();
      };
      Prefab_SettingCtrl.prototype.onDissolutionRoom = function(msg) {
        msg.result && this.finish();
      };
      Prefab_SettingCtrl.prototype.onGameFinished = function(msg) {
        this.finish();
      };
      Prefab_SettingCtrl.prototype._onClick_Close = function(event) {
        13 == SettingMgr_1.default.getInstance().getGameID() && this.view.node_audioCtrl && this.view.node_audioCtrl.getComponent("RoomAudioSettingCtrl").SssClosePanel();
        var msg = {
          controlInfo: null,
          musicInfo: null,
          notifyInfo: null
        };
        msg.controlInfo = SettingMgr_1.default.getInstance().getControlInfo();
        msg.musicInfo = SettingMgr_1.default.getInstance().getMusicInfo();
        msg.notifyInfo = SettingMgr_1.default.getInstance().getNotifyInfo();
        this.finish();
      };
      Prefab_SettingCtrl.prototype.ControlSetting_cb = function() {
        console.log("ControlSetting");
        this.view.setOption(CONFIGS.option.baseCtrl);
      };
      Prefab_SettingCtrl.prototype.MusicSetting_cb = function() {
        console.log("MusicSetting");
        this.view.setOption(CONFIGS.option.audioCtrl);
        this.view.node_audioCtrl.getComponent("RoomAudioSettingCtrl").noTopolectOption();
      };
      __decorate([ property({
        tooltip: "关闭界面按钮",
        type: cc.Node
      }) ], Prefab_SettingCtrl.prototype, "CloseBtn", void 0);
      __decorate([ property(cc.Node) ], Prefab_SettingCtrl.prototype, "node_toggle1", void 0);
      __decorate([ property(cc.Node) ], Prefab_SettingCtrl.prototype, "node_toggle2", void 0);
      __decorate([ property(cc.Node) ], Prefab_SettingCtrl.prototype, "node_content", void 0);
      __decorate([ property({
        tooltip: "游戏声音部件",
        type: cc.Prefab
      }) ], Prefab_SettingCtrl.prototype, "Prefab_audioCtrl", void 0);
      __decorate([ property({
        tooltip: "操作设置部件",
        type: cc.Prefab
      }) ], Prefab_SettingCtrl.prototype, "Prefab_baseCtrl", void 0);
      Prefab_SettingCtrl = __decorate([ ccclass ], Prefab_SettingCtrl);
      return Prefab_SettingCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_SettingCtrl;
    cc._RF.pop();
  }, {
    "../../../Games/Sss/SssMgr/SssDef": "SssDef",
    "../../GameMgrs/SettingMgr": "SettingMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  RoomSetting_bullControlCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c4df1l74YlBsIR/pjachpAY", "RoomSetting_bullControlCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var LocalStorage_1 = require("../../Libs/LocalStorage");
    var BullCardsMgr_1 = require("../../../GameCommon/Bull/BullCardsMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var POKEBACK = cc.Enum({
      ORANGE_01: 1,
      BULE_01: 2,
      ORANGE_02: 3,
      BULE_02: 4
    });
    var CONFIGS = {
      localBGName: "bull_backgroundTable"
    };
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.pokeBack = null;
        _this.tableState = null;
        _this.pokeBack = LocalStorage_1.default.getInstance().getBullCardBGCfg();
        _this.tableState = LocalStorage_1.default.getInstance().getBullRoomBGCfg();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          changePoke: null,
          changeTable: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.initPoketoggleCheck(_this.model.pokeBack);
        _this.initTableToggleCheck(_this.model.tableState);
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.changePoke = ctrl.changePoke;
        this.ui.changeTable = ctrl.changeTable;
      };
      View.prototype.initPoketoggleCheck = function(state) {
        state == POKEBACK.ORANGE_01 ? this.ui.changePoke.children[0].getComponent(cc.Toggle).check() : state == POKEBACK.BULE_01 ? this.ui.changePoke.children[1].getComponent(cc.Toggle).check() : state == POKEBACK.ORANGE_02 ? this.ui.changePoke.children[2].getComponent(cc.Toggle).check() : state == POKEBACK.BULE_02 && this.ui.changePoke.children[3].getComponent(cc.Toggle).check();
      };
      View.prototype.initTableToggleCheck = function(state) {
        1 == state ? this.ui.changeTable.children[0].getComponent(cc.Toggle).check() : 2 == state && this.ui.changeTable.children[1].getComponent(cc.Toggle).check();
      };
      return View;
    }(BaseView_1.default);
    var RoomSetting_bullControlCtrl = function(_super) {
      __extends(RoomSetting_bullControlCtrl, _super);
      function RoomSetting_bullControlCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.changePoke = null;
        _this.changeTable = null;
        return _this;
      }
      RoomSetting_bullControlCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      RoomSetting_bullControlCtrl.prototype.defineNetEvents = function() {};
      RoomSetting_bullControlCtrl.prototype.defineGlobalEvents = function() {};
      RoomSetting_bullControlCtrl.prototype.connectUi = function() {
        for (var i = 0; i < this.changePoke.childrenCount; i++) {
          var Toggle = this.changePoke.children[i];
          this.connect(G_UiType.toggle, Toggle, this.changePoke_cb, "更换扑克牌");
        }
        for (var i = 0; i < this.changeTable.childrenCount; i++) {
          var Toggle = this.changeTable.children[i];
          this.connect(G_UiType.toggle, Toggle, this.changeTable_cb, "更换牌桌");
        }
      };
      RoomSetting_bullControlCtrl.prototype.start = function() {};
      RoomSetting_bullControlCtrl.prototype.changePoke_cb = function() {
        this.changePoke.children[0].getComponent(cc.Toggle).isChecked ? BullCardsMgr_1.default.setSpriteFrameState(1) : this.changePoke.children[1].getComponent(cc.Toggle).isChecked ? BullCardsMgr_1.default.setSpriteFrameState(2) : this.changePoke.children[2].getComponent(cc.Toggle).isChecked ? BullCardsMgr_1.default.setSpriteFrameState(3) : this.changePoke.children[3].getComponent(cc.Toggle).isChecked && BullCardsMgr_1.default.setSpriteFrameState(4);
      };
      RoomSetting_bullControlCtrl.prototype.changeTable_cb = function() {
        if (this.changeTable.children[0].getComponent(cc.Toggle).isChecked) {
          LocalStorage_1.default.getInstance().setBullRoomBGCfg(1);
          G_FRAME.globalEmitter.emit("setBackGroundSpriteFrame");
          G_FRAME.globalEmitter.emit("setAllTableLaebl");
          G_FRAME.globalEmitter.emit("setRoomInfoFont");
        } else if (this.changeTable.children[1].getComponent(cc.Toggle).isChecked) {
          LocalStorage_1.default.getInstance().setBullRoomBGCfg(2);
          G_FRAME.globalEmitter.emit("setBackGroundSpriteFrame");
          G_FRAME.globalEmitter.emit("setAllTableLaebl");
          G_FRAME.globalEmitter.emit("setRoomInfoFont");
        }
      };
      __decorate([ property({
        tooltip: "更换扑克牌",
        type: cc.Node
      }) ], RoomSetting_bullControlCtrl.prototype, "changePoke", void 0);
      __decorate([ property({
        tooltip: "更换牌桌",
        type: cc.Node
      }) ], RoomSetting_bullControlCtrl.prototype, "changeTable", void 0);
      RoomSetting_bullControlCtrl = __decorate([ ccclass ], RoomSetting_bullControlCtrl);
      return RoomSetting_bullControlCtrl;
    }(BaseCtrl_1.default);
    exports.default = RoomSetting_bullControlCtrl;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Bull/BullCardsMgr": "BullCardsMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView",
    "../../Libs/LocalStorage": "LocalStorage"
  } ],
  RoomSetting_mjCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a1fefRcgVNO/ZgpJu5hbt18", "RoomSetting_mjCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var SettingMgr_1 = require("../../GameMgrs/SettingMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.controlInfo = null;
        _this.controlInfo = SettingMgr_1.default.getInstance().getControlInfo();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          button_mjClickToggle: null,
          button_mjDragToggle: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.button_mjClickToggle = ctrl.mjClickToggle;
        this.ui.button_mjDragToggle = ctrl.mjDragToggle;
        this.ui.button_mjClickToggle.getComponent(cc.Toggle).isChecked = this.model.controlInfo.bMjClick;
        this.ui.button_mjDragToggle.getComponent(cc.Toggle).isChecked = this.model.controlInfo.bMjDrag;
        this.ui.button_mjClickToggle.getComponent(cc.Toggle).enabled = !this.model.controlInfo.bMjClick;
        this.ui.button_mjDragToggle.getComponent(cc.Toggle).enabled = !this.model.controlInfo.bMjDrag;
        if (this.model.controlInfo.bMjClick && this.model.controlInfo.bMjDrag) {
          this.ui.button_mjClickToggle.getComponent(cc.Toggle).enabled = true;
          this.ui.button_mjDragToggle.getComponent(cc.Toggle).enabled = true;
        }
      };
      return View;
    }(BaseView_1.default);
    var RoomSetting_mjCtrl = function(_super) {
      __extends(RoomSetting_mjCtrl, _super);
      function RoomSetting_mjCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.mjClickToggle = null;
        _this.mjDragToggle = null;
        return _this;
      }
      RoomSetting_mjCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      RoomSetting_mjCtrl.prototype.defineNetEvents = function() {};
      RoomSetting_mjCtrl.prototype.defineGlobalEvents = function() {};
      RoomSetting_mjCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.toggle, this.ui.button_mjClickToggle, this.mjControl_cb, "点击出牌设置");
        this.connect(G_UiType.toggle, this.ui.button_mjDragToggle, this.mjControl_cb, "点击拖动出牌设置");
      };
      RoomSetting_mjCtrl.prototype.start = function() {};
      RoomSetting_mjCtrl.prototype.mjControl_cb = function(event) {
        var mjClickToggle = this.ui.button_mjClickToggle.getComponent(cc.Toggle);
        var mjDragToggle = this.ui.button_mjDragToggle.getComponent(cc.Toggle);
        var clickNode = event.currentTarget;
        "clickToggle" == clickNode.name && SettingMgr_1.default.getInstance().setProperty(!this.model.controlInfo.bMjClick, "controlInfo", "bMjClick");
        "dragToggle" == clickNode.name && SettingMgr_1.default.getInstance().setProperty(!this.model.controlInfo.bMjDrag, "controlInfo", "bMjDrag");
        this.model.controlInfo = SettingMgr_1.default.getInstance().getControlInfo();
        mjClickToggle.enabled = "clickToggle" == clickNode.name;
        mjDragToggle.enabled = "dragToggle" == clickNode.name;
        if (this.model.controlInfo.bMjClick && this.model.controlInfo.bMjDrag) {
          mjClickToggle.enabled = true;
          mjDragToggle.enabled = true;
        }
        console.log("controlInfo:", this.model.controlInfo);
      };
      __decorate([ property({
        tooltip: "点击出牌",
        type: cc.Node
      }) ], RoomSetting_mjCtrl.prototype, "mjClickToggle", void 0);
      __decorate([ property({
        tooltip: "拖动出牌",
        type: cc.Node
      }) ], RoomSetting_mjCtrl.prototype, "mjDragToggle", void 0);
      RoomSetting_mjCtrl = __decorate([ ccclass ], RoomSetting_mjCtrl);
      return RoomSetting_mjCtrl;
    }(BaseCtrl_1.default);
    exports.default = RoomSetting_mjCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/SettingMgr": "SettingMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  RoomSetting_sssControlCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b3fa5vvWRJAW5+iOapWutV3", "RoomSetting_sssControlCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var LocalStorage_1 = require("../../Libs/LocalStorage");
    var GEventDef_1 = require("../../GameMgrs/GEventDef");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var POKEBACK = cc.Enum({
      ORANGE_01: 1,
      BULE_01: 2,
      ORANGE_02: 3,
      BULE_02: 4
    });
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.pokeBack = null;
        _this.tableState = null;
        _this.pokeBack = LocalStorage_1.default.getInstance().getSssCardBGCfg() || 3;
        _this.tableState = LocalStorage_1.default.getInstance().getSssRoomBGCfg() || 1;
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          changePoke: null,
          changeTable: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.initPoketoggleCheck(_this.model.pokeBack);
        _this.initTableToggleCheck(_this.model.tableState);
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.changePoke = ctrl.changePoke;
        this.ui.changeTable = ctrl.changeTable;
      };
      View.prototype.initPoketoggleCheck = function(state) {
        state == POKEBACK.ORANGE_01 ? this.ui.changePoke.children[0].getComponent(cc.Toggle).check() : state == POKEBACK.BULE_01 ? this.ui.changePoke.children[1].getComponent(cc.Toggle).check() : state == POKEBACK.ORANGE_02 ? this.ui.changePoke.children[2].getComponent(cc.Toggle).check() : state == POKEBACK.BULE_02 && this.ui.changePoke.children[3].getComponent(cc.Toggle).check();
      };
      View.prototype.initTableToggleCheck = function(state) {
        1 == state ? this.ui.changeTable.children[0].getComponent(cc.Toggle).check() : 2 == state && this.ui.changeTable.children[1].getComponent(cc.Toggle).check();
      };
      return View;
    }(BaseView_1.default);
    var RoomSetting_sssControlCtrl = function(_super) {
      __extends(RoomSetting_sssControlCtrl, _super);
      function RoomSetting_sssControlCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.changePoke = null;
        _this.changeTable = null;
        return _this;
      }
      RoomSetting_sssControlCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      RoomSetting_sssControlCtrl.prototype.defineNetEvents = function() {};
      RoomSetting_sssControlCtrl.prototype.defineGlobalEvents = function() {};
      RoomSetting_sssControlCtrl.prototype.connectUi = function() {
        for (var i = 0; i < this.changePoke.childrenCount; i++) {
          var Toggle = this.changePoke.children[i];
          this.connect(G_UiType.toggle, Toggle, this.changePoke_cb, "更换扑克牌");
        }
        for (var i = 0; i < this.changeTable.childrenCount; i++) {
          var Toggle = this.changeTable.children[i];
          this.connect(G_UiType.toggle, Toggle, this.changeTable_cb, "更换牌桌");
        }
      };
      RoomSetting_sssControlCtrl.prototype.start = function() {};
      RoomSetting_sssControlCtrl.prototype.changePoke_cb = function() {
        if (this.changePoke.children[0].getComponent(cc.Toggle).isChecked) {
          LocalStorage_1.default.getInstance().setSssCardBGCfg(1);
          G_FRAME.globalEmitter.emit(GEventDef_1.default.sss_changeCardBg);
        } else if (this.changePoke.children[1].getComponent(cc.Toggle).isChecked) {
          LocalStorage_1.default.getInstance().setSssCardBGCfg(2);
          G_FRAME.globalEmitter.emit(GEventDef_1.default.sss_changeCardBg);
        } else if (this.changePoke.children[2].getComponent(cc.Toggle).isChecked) {
          LocalStorage_1.default.getInstance().setSssCardBGCfg(3);
          G_FRAME.globalEmitter.emit(GEventDef_1.default.sss_changeCardBg);
        } else if (this.changePoke.children[3].getComponent(cc.Toggle).isChecked) {
          LocalStorage_1.default.getInstance().setSssCardBGCfg(4);
          G_FRAME.globalEmitter.emit(GEventDef_1.default.sss_changeCardBg);
        }
      };
      RoomSetting_sssControlCtrl.prototype.changeTable_cb = function() {
        if (this.changeTable.children[0].getComponent(cc.Toggle).isChecked) {
          LocalStorage_1.default.getInstance().setSssRoomBGCfg(1);
          G_FRAME.globalEmitter.emit(GEventDef_1.default.sss_changeTableBg);
        } else if (this.changeTable.children[1].getComponent(cc.Toggle).isChecked) {
          LocalStorage_1.default.getInstance().setSssRoomBGCfg(2);
          G_FRAME.globalEmitter.emit(GEventDef_1.default.sss_changeTableBg);
        }
      };
      __decorate([ property({
        tooltip: "更换扑克牌",
        type: cc.Node
      }) ], RoomSetting_sssControlCtrl.prototype, "changePoke", void 0);
      __decorate([ property({
        tooltip: "更换牌桌",
        type: cc.Node
      }) ], RoomSetting_sssControlCtrl.prototype, "changeTable", void 0);
      RoomSetting_sssControlCtrl = __decorate([ ccclass ], RoomSetting_sssControlCtrl);
      return RoomSetting_sssControlCtrl;
    }(BaseCtrl_1.default);
    exports.default = RoomSetting_sssControlCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/GEventDef": "GEventDef",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView",
    "../../Libs/LocalStorage": "LocalStorage"
  } ],
  RoomUserInfoCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5d9cf8MrMlK4Jf89iZGSjuT", "RoomUserInfoCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var UiMgr_1 = require("../../GameMgrs/UiMgr");
    var RoomMgr_1 = require("../../GameMgrs/RoomMgr");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var GpsSdk_1 = require("../../SdkMgrs/GpsSdk");
    var SssDef_1 = require("../../../Games/Sss/SssMgr/SssDef");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.userInfo = null;
        return _this;
      }
      Model.prototype.setUid = function(uid) {
        this.userInfo = UserMgr_1.default.getInstance().getUserById(uid);
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          lbl_name: null,
          lbl_id: null,
          lbl_address: null,
          lbl_content: null,
          node_head: null,
          lbl_gender: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.lbl_name = ctrl.lbl_name;
        this.ui.lbl_id = ctrl.lbl_id;
        this.ui.lbl_address = ctrl.lbl_address;
        this.ui.lbl_content = ctrl.lbl_content;
        this.ui.node_head = ctrl.node_head;
        this.ui.lbl_gender = ctrl.lbl_gender;
        this.addGrayLayer();
      };
      View.prototype.updateInfo = function() {
        console.log("我的信息：", this.model.userInfo);
        var userInfo = this.model.userInfo;
        switch (userInfo.sex) {
         case 1:
          this.ui.lbl_gender.string = "男";
          break;

         case 2:
         default:
          this.ui.lbl_gender.string = "女";
        }
        this.ui.lbl_id.string = userInfo.logicid;
        this.ui.lbl_name.string = userInfo.nickname ? userInfo.nickname : "unknow";
        console.log("isNative", cc.sys.isNative);
        console.log("getUid", UserMgr_1.default.getInstance().getUid());
        console.log("logicid", this.model.userInfo.logicid);
        if (cc.sys.isNative) if (UserMgr_1.default.getInstance().getUid() == this.model.userInfo.id) {
          this.ui.lbl_address.string = "" == GpsSdk_1.default.getInstance().getAddress() ? "未知" : GpsSdk_1.default.getInstance().getAddress();
          console.log("lbl_address", this.ui.lbl_address.string);
          console.log("getAddress", GpsSdk_1.default.getInstance().getAddress());
        } else this.ui.lbl_address.string = "" == this.model.userInfo.city && "" == this.model.userInfo.sub_city ? "未知" : this.model.userInfo.city + this.model.userInfo.sub_city; else this.ui.lbl_address.string = "未知";
        this.ui.lbl_content.string = userInfo.signature.trim();
        null != userInfo.signature.trim() && void 0 != userInfo.signature.trim() || (this.ui.lbl_content.string = "");
        this.updateHead();
      };
      View.prototype.updateHead = function() {
        UiMgr_1.default.getInstance().setUserHead(this.ui.node_head, this.model.userInfo.headid, this.model.userInfo.headurl);
      };
      return View;
    }(BaseView_1.default);
    var RoomUserInfoCtrl = function(_super) {
      __extends(RoomUserInfoCtrl, _super);
      function RoomUserInfoCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.lbl_name = null;
        _this.lbl_id = null;
        _this.lbl_address = null;
        _this.lbl_content = null;
        _this.node_head = null;
        _this.node_close = null;
        _this.lbl_gender = null;
        return _this;
      }
      RoomUserInfoCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      RoomUserInfoCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onProcess: this.onProcess,
          onStartGame: this.onStartGame,
          onDissolutionRoom: this.onDissolutionRoom,
          onGameFinished: this.onGameFinished
        };
      };
      RoomUserInfoCtrl.prototype.defineGlobalEvents = function() {};
      RoomUserInfoCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.node_close, this.finish, "点击关闭");
      };
      RoomUserInfoCtrl.prototype.start = function() {};
      RoomUserInfoCtrl.prototype.onProcess = function(msg) {
        msg.process == SssDef_1.SssDef.process_peipai ? this.finish() : msg.process == SssDef_1.SssDef.process_gamesettle && this.finish();
      };
      RoomUserInfoCtrl.prototype.onStartGame = function(msg) {
        this.finish();
      };
      RoomUserInfoCtrl.prototype.onDissolutionRoom = function(msg) {
        msg.result && this.finish();
      };
      RoomUserInfoCtrl.prototype.onGameFinished = function(msg) {
        this.finish();
      };
      RoomUserInfoCtrl.prototype.node_changecard_cb = function() {
        if (RoomMgr_1.default.getInstance().getMySeatId() == this.model.userInfo.seatId) return;
        this.start_sub_module(G_MODULE.QzmjSwitchCardWithPlayerGm, function(uiCtrl) {
          uiCtrl.setTargetSeatId(this.model.userInfo.seatId);
        }, "QzmjSwitchCardWithPlayerGmCtrl");
      };
      RoomUserInfoCtrl.prototype.setUid = function(uid) {
        this.model.setUid(uid);
        this.view.updateInfo();
        UserMgr_1.default.getInstance().getUid() == uid;
      };
      __decorate([ property(cc.Label) ], RoomUserInfoCtrl.prototype, "lbl_name", void 0);
      __decorate([ property(cc.Label) ], RoomUserInfoCtrl.prototype, "lbl_id", void 0);
      __decorate([ property(cc.Label) ], RoomUserInfoCtrl.prototype, "lbl_address", void 0);
      __decorate([ property(cc.Label) ], RoomUserInfoCtrl.prototype, "lbl_content", void 0);
      __decorate([ property(cc.Node) ], RoomUserInfoCtrl.prototype, "node_head", void 0);
      __decorate([ property(cc.Node) ], RoomUserInfoCtrl.prototype, "node_close", void 0);
      __decorate([ property(cc.Label) ], RoomUserInfoCtrl.prototype, "lbl_gender", void 0);
      RoomUserInfoCtrl = __decorate([ ccclass ], RoomUserInfoCtrl);
      return RoomUserInfoCtrl;
    }(BaseCtrl_1.default);
    exports.default = RoomUserInfoCtrl;
    cc._RF.pop();
  }, {
    "../../../Games/Sss/SssMgr/SssDef": "SssDef",
    "../../GameMgrs/RoomMgr": "RoomMgr",
    "../../GameMgrs/UiMgr": "UiMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView",
    "../../SdkMgrs/GpsSdk": "GpsSdk"
  } ],
  SeatMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f9cabWW9aBMFKn8nmrFQAcw", "SeatMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SeatMgr = function() {
      function SeatMgr() {
        this.myseatid = null;
        this.roominfo = null;
        this.viewSeatCount = null;
        this.viewlogicMap = {};
        this.logicViewMap = {};
      }
      SeatMgr.prototype.setRoomInfo = function(roominfo) {
        this.roominfo = roominfo;
        switch (roominfo.gamecate) {
         case 1:
          this.viewSeatCount = 4;
          break;

         case 2:
          this.viewSeatCount = roominfo.seatcount;
        }
      };
      SeatMgr.prototype.clear = function() {
        delete SeatMgr._instance;
        SeatMgr._instance = null;
      };
      SeatMgr.prototype.updateSeatCount = function(viewSeatCount) {
        this.viewSeatCount = viewSeatCount;
      };
      SeatMgr.prototype.setMySeatId = function(seatId) {
        console.log("seatmgr设置了自己的额位置=", seatId, this.viewSeatCount);
        this.myseatid = seatId;
        var viewseatarr = [];
        if (this.roominfo.seatcount <= this.viewSeatCount / 4) for (var index = 0; index < this.viewSeatCount; ++index) index % 4 == 0 && viewseatarr.push(index); else if (this.roominfo.seatcount <= this.viewSeatCount / 2) for (var index = 0; index < this.viewSeatCount; ++index) index % 2 == 0 && viewseatarr.push(index); else for (var index = 0; index < this.viewSeatCount; ++index) viewseatarr.push(index);
        for (var viewSeatId = 0; viewSeatId < this.viewSeatCount; ++viewSeatId) {
          var offset = null;
          for (var i = 0; i < viewseatarr.length; ++i) viewseatarr[i] == viewSeatId && (offset = i);
          if (null == offset) continue;
          var logicSeatId = (offset + this.myseatid) % viewseatarr.length;
          if (logicSeatId >= this.roominfo.seatcount) continue;
          this.viewlogicMap[logicSeatId] = viewSeatId;
          this.logicViewMap[viewSeatId] = logicSeatId;
        }
      };
      SeatMgr.prototype.getViewSeatCount = function() {
        return this.viewSeatCount;
      };
      SeatMgr.prototype.getViewSeatId = function(logicSeatId) {
        return this.viewlogicMap[logicSeatId];
      };
      SeatMgr.prototype.getLogicSeatId = function(viewSeatId) {
        return this.logicViewMap[viewSeatId];
      };
      SeatMgr.getInstance = function() {
        this._instance || (this._instance = new SeatMgr());
        return this._instance;
      };
      return SeatMgr;
    }();
    exports.default = SeatMgr;
    cc._RF.pop();
  }, {} ],
  ServerMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6c1a0iTyw9OnYf9i6t9lwHf", "ServerMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ServerMgr = function() {
      function ServerMgr() {
        this.settingPath = "Configs/AppStart/localsetting";
        this.localsetting = null;
        this.callback = null;
        this.servercfg = null;
        this.b_enableHotUpdate = false;
        this.timer_delay = null;
        this.b_enableHotUpdate = cc.sys.isNative && cc.sys.isMobile;
      }
      ServerMgr.getInstance = function() {
        this._instance || (this._instance = new ServerMgr());
        return this._instance;
      };
      ServerMgr.prototype.loadLoacalSetting = function(callback) {
        this.callback = callback;
        this.loadRes(this.settingPath, this.loadSettingCb);
      };
      ServerMgr.prototype.clearTimer = function() {
        if (null != this.timer_delay) {
          clearTimeout(this.timer_delay);
          this.timer_delay = null;
        }
      };
      ServerMgr.prototype.timeout = function() {
        this.clearTimer();
        this.callback(-1);
      };
      ServerMgr.prototype.newTimer = function() {
        null == this.timer_delay && (this.timer_delay = setTimeout(this.timeout.bind(this), 1e4));
      };
      ServerMgr.prototype.loadRes = function(name, cb) {
        cc.loader.loadRes(name, function(err, data) {
          err ? console.log("cc.loader.loadRes err=," + JSON.stringify(err) + "," + name) : cb.bind(this)(name, data);
        }.bind(this));
      };
      ServerMgr.prototype.getHotupdateVersionUrl = function() {
        return "" + this.servercfg.hotUrl;
      };
      ServerMgr.prototype.getProductTag = function() {
        return this.localsetting.producttag;
      };
      ServerMgr.prototype.getSubGameCfg = function(gamecode) {
        return this.servercfg.subgamesvrsettings[gamecode];
      };
      ServerMgr.prototype.loadSettingCb = function(name, data) {
        var _this = this;
        this.newTimer();
        this.localsetting = data;
        var xhr = cc.loader.getXMLHttpRequest();
        xhr.onreadystatechange = function() {
          cc.log("xhr.readyState=" + xhr.readyState + "  xhr.status=" + xhr.status);
          if (4 === xhr.readyState && xhr.status >= 200 && xhr.status < 300) {
            var respone = xhr.responseText;
            this.servercfg = JSON.parse(respone);
            this.clearTimer();
            this.callback(0);
          }
        }.bind(this);
        xhr.timeout = 5e3;
        xhr.onerror = function(error) {
          console.log("loadSettingCb 出错啦");
          _this.clearTimer();
          _this.callback(-1);
        };
        xhr.ontimeout = function() {
          console.log("loadSettingCb 超时啦");
          _this.clearTimer();
          _this.callback(-1);
        };
        var URLProducttag = data.producttag;
        if (!cc.sys.isNative && window && window.location && window.location.href) {
          URLProducttag = this.analysisURLParameter(window.location.href).args.producttag;
          console.log("哈哈哈=", URLProducttag, data.producttag);
        }
        var wholeurl = data.cfgurl + "/products/" + (URLProducttag || data.producttag) + ".json";
        console.log("wholeurl=", wholeurl);
        xhr.open("GET", wholeurl, true);
        xhr.send();
      };
      ServerMgr.prototype.analysisURLParameter = function(URL) {
        var arr = URL.split("?");
        var obj = {
          url: null,
          args: {}
        };
        obj.url = arr[0];
        if (arr.length < 2) return obj;
        var mapArr = arr[1].split("&");
        for (var i = 0; i < mapArr.length; i++) {
          var parameter = mapArr[i].split("=");
          obj.args[parameter[0]] = parameter[1];
        }
        console.log("解析URL", obj);
        return obj;
      };
      ServerMgr.prototype.isEnableHotUpdate = function() {
        return this.b_enableHotUpdate;
      };
      ServerMgr.prototype.getServerCfg = function() {
        return this.servercfg;
      };
      ServerMgr.prototype.getGameRuleUrl = function(name, ruletype) {
        return "http://sv.088wanmei.com/gamerule/" + name + "/" + ruletype + ".html";
      };
      ServerMgr.prototype.gettiaokuanUrl = function() {
        return "http://sv.088wanmei.com/service.html";
      };
      ServerMgr.prototype.getzhengceUrl = function() {
        return "http://sv.088wanmei.com/privacy.html";
      };
      ServerMgr.prototype.getDownLoadPage = function() {
        return this.servercfg.downLoadPage;
      };
      ServerMgr.prototype.getInviteFriendJoinUrl = function(uid, password) {
        return "http://xiamen.088wanmei.com/share/index.html?uid=" + uid + "&action=joingame&password=" + password;
      };
      ServerMgr.prototype.getClubInviteFriendJoinUrl = function(uid, clubid) {
        return "http://xiamen.088wanmei.com/clubshare/index.html?uid=" + uid + "&action=clubjoingame&clubid=" + clubid;
      };
      ServerMgr.prototype.getGameVideoUrl = function(gamecode, recordcode) {
        var platSvrHost = this.servercfg.platSvrHost;
        var platSvrPort = this.servercfg.platSvrPort;
        var originhost = null;
        originhost = platSvrHost.indexOf(".com") >= 0 ? platSvrHost : platSvrHost = "http://" + platSvrHost + ":" + platSvrPort;
        var host = encodeURI(originhost);
        var url = this.servercfg.resUrl + "/gamevideo?host=" + host + "&gamecode=" + gamecode + "&recordcode=" + recordcode;
        console.log("video url=", url);
        return url;
      };
      return ServerMgr;
    }();
    exports.default = ServerMgr;
    cc._RF.pop();
  }, {} ],
  SettingMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1e9cfg4/ptOn6imzUoBZoos", "SettingMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var BetMgr_1 = require("./BetMgr");
    var LocalStorage_1 = require("../Libs/LocalStorage");
    var SettingMgr = function(_super) {
      __extends(SettingMgr, _super);
      function SettingMgr() {
        var _this = _super.call(this) || this;
        _this.controlInfo = {};
        _this.notifyInfo = {};
        _this.musicInfo = {};
        _this.defaultInfo = {};
        _this.routes = null;
        _this.isPlaza = true;
        _this.uid = null;
        _this.controlInfo = {
          bMjClick: true,
          bMjDrag: true,
          bSssAutoMate: true
        };
        _this.notifyInfo = {
          bMatchAD: false,
          bMatchBegin: true,
          bClubMatchSignUp: true,
          bClubMatchInvite: false
        };
        _this.musicInfo = {
          bMusicSwitch: true,
          musicVolume: 50,
          bEffectSwitch: true,
          effectVolume: 50,
          bYySwitch: true,
          yyVolume: 60,
          bTipSwitch: true,
          bTopolectSwitch: true
        };
        if (LocalStorage_1.default.getInstance().getControlInfoCfg()) {
          _this.controlInfo = LocalStorage_1.default.getInstance().getControlInfoCfg().controlInfo;
          _this.notifyInfo = LocalStorage_1.default.getInstance().getControlInfoCfg().notifyInfo;
          _this.musicInfo = LocalStorage_1.default.getInstance().getControlInfoCfg().musicInfo;
        }
        _this.routes = {};
        return _this;
      }
      SettingMgr.prototype.getControlInfo = function() {
        if (LocalStorage_1.default.getInstance().getControlInfoCfg()) {
          var setting = LocalStorage_1.default.getInstance().getControlInfoCfg();
          return setting.controlInfo;
        }
        return this.controlInfo;
      };
      SettingMgr.prototype.getNotifyInfo = function() {
        if (LocalStorage_1.default.getInstance().getControlInfoCfg()) {
          var setting = LocalStorage_1.default.getInstance().getControlInfoCfg();
          return setting.notifyInfo;
        }
        return this.notifyInfo;
      };
      SettingMgr.prototype.getMusicInfo = function() {
        if (LocalStorage_1.default.getInstance().getControlInfoCfg()) {
          var setting = LocalStorage_1.default.getInstance().getControlInfoCfg();
          return setting.musicInfo;
        }
        return this.musicInfo;
      };
      SettingMgr.prototype.setProperty = function(value, PropertyName, childProName) {
        if (isNaN(value)) return console.log("value 不能为空");
        if (!PropertyName) return console.log("PropertyName 不能为空");
        childProName ? this[PropertyName][childProName] = value : this[PropertyName] = value;
        var setting = {};
        setting.controlInfo = this.controlInfo;
        setting.notifyInfo = this.notifyInfo;
        setting.musicInfo = this.musicInfo;
        LocalStorage_1.default.getInstance().setControlInfoCfg(setting);
      };
      SettingMgr.prototype.getGameID = function() {
        return BetMgr_1.default.getInstance().getGameId();
      };
      SettingMgr.prototype.setIsPlaza = function(name) {
        this.isPlaza = name;
      };
      SettingMgr.prototype.getIsPlaza = function() {
        return this.isPlaza;
      };
      SettingMgr.getInstance = function() {
        this._instance || (this._instance = new SettingMgr());
        return this._instance;
      };
      return SettingMgr;
    }(BaseMgr_1.default);
    exports.default = SettingMgr;
    cc._RF.pop();
  }, {
    "../Libs/BaseMgr": "BaseMgr",
    "../Libs/LocalStorage": "LocalStorage",
    "./BetMgr": "BetMgr"
  } ],
  ShareMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e1f1c/R2C9AdYrxawrw/1sY", "ShareMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var ShareMgr = function(_super) {
      __extends(ShareMgr, _super);
      function ShareMgr() {
        var _this = _super.call(this) || this;
        _this.curClickItem = null;
        _this.inviteGiftInfo = {};
        _this.isShare = null;
        _this.routes = {
          "http.reqInviteGiftInfo": _this.http_reqInviteGiftInfo,
          "http.reqAddInviteGift": _this.http_reqAddInviteGift,
          "http.reqReceiveInviteGift": _this.http_reqReceiveInviteGift,
          "http.reqCheckDailyShare": _this.http_reqCheckDailyShare
        };
        _this.inviteGiftInfo = {};
        _this.curClickItem = 0;
        _this.isShare = 0;
        return _this;
      }
      ShareMgr.getInstance = function() {
        if (!this._instance) {
          this._instance = new ShareMgr();
          this._instance.sendReqInviteGiftInfo();
        }
        return this._instance;
      };
      ShareMgr.prototype.shareSuccess = function() {
        this.send_msg("http.reqDailyShare", {});
        this.sendReqAddInviteGift();
      };
      ShareMgr.prototype.sendReqInviteGiftInfo = function() {
        this.send_msg("http.reqInviteGiftInfo", {});
      };
      ShareMgr.prototype.http_reqInviteGiftInfo = function(msg) {
        cc.log("获取邀请有礼详情", msg);
        this.inviteGiftInfo = msg;
      };
      ShareMgr.prototype.sendReqAddInviteGift = function() {
        this.send_msg("http.reqAddInviteGift", {});
      };
      ShareMgr.prototype.http_reqAddInviteGift = function(msg) {
        this.sendReqInviteGiftInfo();
      };
      ShareMgr.prototype.sendReqReceiveInviteGift = function(msg) {
        this.send_msg("http.reqReceiveInviteGift", msg);
      };
      ShareMgr.prototype.http_reqReceiveInviteGift = function(msg) {
        this.sendReqInviteGiftInfo();
      };
      ShareMgr.prototype.sendReqCheckDailyShare = function() {
        this.send_msg("http.reqCheckDailyShare");
      };
      ShareMgr.prototype.http_reqCheckDailyShare = function(msg) {};
      ShareMgr.prototype.setCheckDailyShare = function(isShare) {
        this.isShare = isShare;
      };
      ShareMgr.prototype.getCheckDailyShare = function() {
        return this.isShare;
      };
      ShareMgr.prototype.setCurClick = function(target) {
        this.curClickItem = target;
      };
      ShareMgr.prototype.getCurClick = function() {
        return this.curClickItem;
      };
      ShareMgr.prototype.getCurClickData = function() {
        return this.inviteGiftInfo.targets[this.curClickItem];
      };
      ShareMgr.prototype.getShareTaskData = function() {
        return this.inviteGiftInfo;
      };
      ShareMgr.prototype.ReceiveShareTask = function() {
        var data = {
          targetID: 1
        };
        G_FRAME.globalEmitter.emit("", data);
      };
      return ShareMgr;
    }(BaseMgr_1.default);
    exports.default = ShareMgr;
    cc._RF.pop();
  }, {
    "../Libs/BaseMgr": "BaseMgr"
  } ],
  SocketNet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d457efBA+FBxL4OgRVhYHkF", "SocketNet");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var NetNotify_1 = require("./NetNotify");
    var SocketNet = function() {
      function SocketNet() {
        this.SocketList = {};
        this.EneterSocket = null;
        this.bColse = false;
      }
      SocketNet.prototype.emit = function(route, msg) {
        G_FRAME.netEmitter.emit(route, msg);
        return true;
      };
      SocketNet.prototype.onOpen = function(msg, strUrl) {
        this.SocketList[strUrl] = this.EneterSocket;
        this.EneterSocket = null;
        console.log("this.onOpen", this.SocketList, strUrl, this.EneterSocket);
        NetNotify_1.default.getInstance().dealResp("webSocketOpen", {});
      };
      SocketNet.prototype.onClose = function(msg, strUrl) {
        console.log("onClose", msg);
        null != this.SocketList[strUrl] && delete this.SocketList[strUrl];
        null != this.EneterSocket && delete this.EneterSocket;
        console.log("this.SocketList1", this.SocketList, strUrl, this.EneterSocket);
        this.bColse ? this.bColse = false : this.initWebSocket(strUrl);
      };
      SocketNet.prototype.onMessage = function(msg) {
        var resp = JSON.parse(msg.data);
        var route = resp.head.route;
        var data = resp.body;
        NetNotify_1.default.getInstance().dealResp(route, data);
        this.emit(route, data);
        console.log("websocket", route, data);
      };
      SocketNet.prototype.onError = function(msg, strUrl) {
        console.log("onError", msg);
        null != this.SocketList[strUrl] && delete this.SocketList[strUrl];
      };
      SocketNet.prototype.initWebSocket = function(strUrl) {
        var _this = this;
        console.log("连接", strUrl, this.SocketList);
        if (null != this.SocketList[strUrl]) {
          console.log("已建立连接");
          return;
        }
        var _web = new WebSocket(strUrl);
        _web.onopen = function(evt) {
          _this.onOpen(evt, strUrl);
        };
        _web.onclose = function(evt) {
          _this.onClose(evt, strUrl);
        };
        _web.onmessage = function(evt) {
          _this.onMessage(evt);
        };
        _web.onerror = function(evt) {
          _this.onError(evt, strUrl);
        };
        console.log("initWebSocket", _web, strUrl);
        this.EneterSocket = _web;
      };
      SocketNet.prototype.send_msg = function(route, msg) {
        if (null == msg.url || "" == msg.url) {
          console.log("连接地址有误", msg.url);
          return;
        }
        var websocket = this.SocketList[msg.url];
        if (null == websocket) {
          console.log("尚未连接该地址", msg.url);
          return;
        }
        msg.url = null;
        var info = {
          action: route,
          data: msg
        };
        websocket.send(JSON.stringify(info));
      };
      SocketNet.prototype.closeWebSocket = function(strUrl) {
        var websocket = this.SocketList[strUrl];
        console.log("连接地址有误", websocket, strUrl);
        if (null == websocket) {
          console.log("无需清理，无连接", strUrl);
          return;
        }
        this.bColse = true;
        websocket.close();
        delete this.SocketList[strUrl];
      };
      SocketNet.prototype.heartbeat = function(data) {
        if (false == data.SocketList) return;
        for (var wx in data.SocketList) {
          var websocket = data.SocketList[wx];
          if (null == websocket) return;
          websocket.send(JSON.stringify({}));
        }
      };
      SocketNet.prototype.heartbeatSchedule = function() {
        var _this = this;
        window.setInterval(function() {
          _this.heartbeat(_this);
        }, 12e4);
      };
      SocketNet.getInstance = function() {
        if (null == SocketNet._instance) {
          SocketNet._instance = new SocketNet();
          SocketNet._instance.heartbeatSchedule();
        }
        return SocketNet._instance;
      };
      SocketNet._instance = null;
      return SocketNet;
    }();
    exports.default = SocketNet;
    cc._RF.pop();
  }, {
    "./NetNotify": "NetNotify"
  } ],
  SssAudio: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b57deHgMpROY6aDijcP7eJI", "SssAudio");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../../../Plat/Libs/BaseMgr");
    var GameAudioCfg_1 = require("../../../Plat/CfgMgrs/GameAudioCfg");
    var cardTypeDict = {
      1: "SAN_PAI",
      2: "DUI_ZI",
      3: "LIANG_DUI",
      4: "SAN_TIAO",
      5: "SHUN_ZI",
      8: "TONG_HUA",
      9: "HU_LU",
      10: "TIE_ZHI",
      11: "TONG_HUA_SHUN",
      14: "CHONG_SAN",
      19: "ZHONG_DUN_HU_LU",
      44: "WU_TONG"
    };
    var specialCardTypeDict = {
      214: "SAN_SHUN_ZI",
      215: "SAN_TONG_HUA",
      216: "LIU_DUI_BAN",
      217: "5DUI_3TIAO",
      218: "CHOU_YI_SE",
      219: "QUAN_XIAO",
      220: "QUAN_DA",
      321: "SAN_TONG_HUA_SHUN",
      322: "12HUANG_ZU",
      423: "SAN_FEN_TIAN_XIA",
      424: "4TAO_3TIAO",
      425: "YI_TIAO_LONG",
      526: "ZHI_ZUN_QING_LONG"
    };
    var gunDict = {
      gunReady: "GAME_GUNREADY",
      gun: "GAME_GUN"
    };
    var BGMName = "BK_MUSIC";
    var GameStart = "GAME_START";
    var Clock = "GAME_WARN";
    var OutCard = "OUT_CARD";
    var ChangeScore = "score";
    var SpecialBGM = "teshupai";
    var CompareCard = "start_compare";
    var GameShuffle = "GAME_SHUFFLE";
    var QuanLeiDa = "QUAN_LEI_DA";
    var GameFaPai = "GAME_CARD";
    var GamePeiPai = "throw";
    var GameWin = "win";
    var GameLose = "lose";
    var processAudio = [ "", "", "", "", "" ];
    var SssAudio = function(_super) {
      __extends(SssAudio, _super);
      function SssAudio() {
        var _this = _super.call(this) || this;
        _this.routes = {
          onProcess: _this.onProcess,
          onStartGame: _this.onStartGame
        };
        return _this;
      }
      SssAudio.getInstance = function() {
        this._instance || (this._instance = new SssAudio());
        return this._instance;
      };
      SssAudio.prototype.destroy = function() {
        GameAudioCfg_1.default.getInstance().stopbackgroudMusic();
        _super.prototype.destroy.call(this);
        SssAudio._instance = null;
        delete SssAudio._instance;
      };
      SssAudio.prototype.uncacheAll = function() {};
      SssAudio.prototype.playGameProcessAudio = function(name, flag) {
        GameAudioCfg_1.default.getInstance().playGameProcessAudio(name, flag);
      };
      SssAudio.prototype.playCardTypeAudio = function(code, type) {
        var cfg = type ? specialCardTypeDict : cardTypeDict;
        GameAudioCfg_1.default.getInstance().play(cfg[code.toString()], 1);
      };
      SssAudio.prototype.playBGM = function() {
        GameAudioCfg_1.default.getInstance().playBGM(BGMName);
      };
      SssAudio.prototype.onProcess = function(msg) {
        if (!processAudio[msg.process]) return;
        this.playGameProcessAudio(processAudio[msg.process], false);
      };
      SssAudio.prototype.onStartGame = function() {
        this.playGameProcessAudio(GameStart, false);
      };
      SssAudio.prototype.playGun = function() {
        var _this = this;
        this.playGameProcessAudio(gunDict.gunReady, false);
        setTimeout(function() {
          _this.playGameProcessAudio(gunDict.gun, false);
        }, 300);
      };
      SssAudio.prototype.playOutCard = function() {
        this.playGameProcessAudio(OutCard, false);
      };
      SssAudio.prototype.playChangeScore = function() {
        this.playGameProcessAudio(ChangeScore, false);
      };
      SssAudio.prototype.playClock = function() {
        this.playGameProcessAudio(Clock, false);
      };
      SssAudio.prototype.playSpecialBGM = function() {
        this.playGameProcessAudio(SpecialBGM, false);
      };
      SssAudio.prototype.playStartCompare = function() {
        GameAudioCfg_1.default.getInstance().play(CompareCard, 1);
      };
      SssAudio.prototype.playXiPai = function() {
        this.playGameProcessAudio(GameShuffle, false);
      };
      SssAudio.prototype.playQuanLeiDa = function() {
        GameAudioCfg_1.default.getInstance().play(QuanLeiDa, 1);
      };
      SssAudio.prototype.playGameFaPai = function() {
        this.playGameProcessAudio(GameFaPai, false);
      };
      SssAudio.prototype.playGameAddToPier = function() {
        this.playGameProcessAudio(GamePeiPai, false);
      };
      SssAudio.prototype.playCompareWin = function() {
        this.playGameProcessAudio(GameWin, false);
      };
      SssAudio.prototype.playCompareLose = function() {
        this.playGameProcessAudio(GameLose, false);
      };
      return SssAudio;
    }(BaseMgr_1.default);
    exports.default = SssAudio;
    cc._RF.pop();
  }, {
    "../../../Plat/CfgMgrs/GameAudioCfg": "GameAudioCfg",
    "../../../Plat/Libs/BaseMgr": "BaseMgr"
  } ],
  SssCards: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4c9b6iNorhPMbPQDLS/YlUj", "SssCards");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SssDef_1 = require("./SssDef");
    var SssLib_1 = require("./SssLib");
    var sizeof_BYTE = 1;
    var HAND_CARD_COUNT = 13;
    var tagAnalyseData = function() {
      function tagAnalyseData() {
        this.bOneCount = 0;
        this.bTwoCount = 0;
        this.bThreeCount = 0;
        this.bFourCount = 0;
        this.bFiveCount = 0;
        this.bOneFirst = SssLib_1.SssLib.oneDArr(13);
        this.bTwoFirst = SssLib_1.SssLib.oneDArr(13);
        this.bThreeFirst = SssLib_1.SssLib.oneDArr(13);
        this.bFourFirst = SssLib_1.SssLib.oneDArr(13);
        this.bFiveFirst = SssLib_1.SssLib.oneDArr(13);
        this.bStraight = 0;
      }
      return tagAnalyseData;
    }();
    var tagAnalyseResult = function() {
      function tagAnalyseResult() {
        this.cbFourCount = 0;
        this.cbThreeCount = 0;
        this.cbDoubleCount = 0;
        this.cbSignedCount = 0;
        this.cbFourCardData = SssLib_1.SssLib.oneDArr(13);
        this.cbThreeCardData = SssLib_1.SssLib.oneDArr(13);
        this.cbDoubleCardData = SssLib_1.SssLib.oneDArr(13);
        this.cbSignedCardData = SssLib_1.SssLib.oneDArr(13);
      }
      return tagAnalyseResult;
    }();
    var tagAnalyseType = function() {
      function tagAnalyseType() {
        this.bOnePare = 0;
        this.bTwoPare = 0;
        this.bThreeSame = 0;
        this.bStraight = 0;
        this.bFlush = 0;
        this.bGourd = 0;
        this.bFourSame = 0;
        this.bStraightFlush = 0;
        this.bFiveSame = 0;
        this.cbOnePare = SssLib_1.SssLib.oneDArr(100);
        this.cbTwoPare = SssLib_1.SssLib.oneDArr(100);
        this.cbThreeSame = SssLib_1.SssLib.oneDArr(100);
        this.cbStraight = SssLib_1.SssLib.oneDArr(100);
        this.cbFlush = SssLib_1.SssLib.oneDArr(100);
        this.cbGourd = SssLib_1.SssLib.oneDArr(100);
        this.cbFourSame = SssLib_1.SssLib.oneDArr(100);
        this.cbStraightFlush = SssLib_1.SssLib.oneDArr(100);
        this.cbFiveSame = SssLib_1.SssLib.oneDArr(100);
        this.bbOnePare = SssLib_1.SssLib.oneDArr(20);
        this.bbTwoPare = SssLib_1.SssLib.oneDArr(20);
        this.bbThreeSame = SssLib_1.SssLib.oneDArr(20);
        this.bbStraight = SssLib_1.SssLib.oneDArr(20);
        this.bbFlush = SssLib_1.SssLib.oneDArr(20);
        this.bbGourd = SssLib_1.SssLib.oneDArr(20);
        this.bbFourSame = SssLib_1.SssLib.oneDArr(20);
        this.bbStraightFlush = SssLib_1.SssLib.oneDArr(20);
        this.bbFiveSame = SssLib_1.SssLib.oneDArr(20);
        this.btOnePare = 0;
        this.btThreeSame = 0;
        this.btTwoPare = 0;
        this.btStraight = 0;
        this.btFlush = 0;
        this.btGourd = 0;
        this.btFourSame = 0;
        this.btStraightFlush = 0;
        this.btFiveSame = 0;
      }
      return tagAnalyseType;
    }();
    var NULL = null;
    var SssCards = function() {
      function SssCards(bCardListData) {
        this.m_bCardListData = null;
        this.btrue = 1;
        this.bfalse = 0;
        this.enDescend = 0;
        this.enAscend = 1;
        this.enColor = 2;
        this.m_bCardListData = bCardListData;
        this.btCardSpecialData = SssLib_1.SssLib.oneDArr(13);
        SssLib_1.SssLib.ZeroMemory(this.btCardSpecialData, SssLib_1.SssLib.sizeof(this.btCardSpecialData));
      }
      SssCards.prototype.GetCardValue = function(bCardData) {
        return bCardData & SssDef_1.SssDef.CARD_MASK_VALUE;
      };
      SssCards.prototype.GetCardColor = function(bCardData) {
        return (bCardData & SssDef_1.SssDef.CARD_MASK_COLOR) >> 4;
      };
      SssCards.prototype.GetCardType = function(bCardData, bCardCount, btSpecialCard) {
        SssLib_1.SssLib.ASSERT(3 == bCardCount || 5 == bCardCount || 13 == bCardCount);
        if (3 != bCardCount && 5 != bCardCount && 13 != bCardCount) return SssDef_1.SssDef.CT_INVALID;
        var AnalyseData = new tagAnalyseData();
        SssLib_1.SssLib.memset(AnalyseData, 0, SssLib_1.SssLib.sizeof(tagAnalyseData));
        this.SortCardList(bCardData, bCardCount, this.enDescend);
        this.AnalyseCard(bCardData, bCardCount, AnalyseData);
        switch (bCardCount) {
         case 3:
          if (3 == AnalyseData.bOneCount) return SssDef_1.SssDef.CT_SINGLE;
          if (1 == AnalyseData.bTwoCount && 1 == AnalyseData.bOneCount) return SssDef_1.SssDef.CT_ONE_DOUBLE;
          if (1 == AnalyseData.bThreeCount) return SssDef_1.SssDef.CT_THREE;
          return SssDef_1.SssDef.CT_INVALID;

         case 5:
          var bFlushNoA = this.bfalse, bFlushFirstA = this.bfalse, bFlushBackA = this.bfalse;
          if (this.GetCardLogicValue(bCardData[0]) >= SssDef_1.SssDef.CARD_XW && this.GetCardLogicValue(bCardData[1]) < SssDef_1.SssDef.CARD_XW) if (10 != this.GetCardLogicValue(bCardData[4]) && 11 != this.GetCardLogicValue(bCardData[4]) || 14 != this.GetCardLogicValue(bCardData[1])) if (14 == this.GetCardLogicValue(bCardData[1]) && 5 >= this.GetCardLogicValue(bCardData[2])) {
            bFlushFirstA = this.btrue;
            for (var i = 2; i < 4; ++i) {
              var nValue = this.GetCardLogicValue(bCardData[i]) - this.GetCardLogicValue(bCardData[i + 1]);
              if (1 != nValue && 2 != nValue) {
                bFlushFirstA = this.bfalse;
                break;
              }
            }
          } else {
            bFlushNoA = this.btrue;
            var bRes = this.bfalse;
            var count = 0;
            for (var i = 1; i < 4; ++i) {
              var A = this.GetCardLogicValue(bCardData[i]);
              var B = this.GetCardLogicValue(bCardData[i + 1]);
              var nValue = A - B;
              1 == nValue && count++;
              if (2 == nValue) {
                if (!bRes) {
                  bRes = this.btrue;
                  continue;
                }
                bFlushNoA = this.bfalse;
                break;
              }
              if (1 != nValue) {
                bFlushNoA = this.bfalse;
                break;
              }
            }
            if (3 == count && 5 == this.GetCardLogicValue(bCardData[1]) && 2 == this.GetCardLogicValue(bCardData[4])) {
              bFlushNoA = false;
              bFlushFirstA = true;
            } else if (3 == count && this.GetCardLogicValue(bCardData[2]) <= 13 && this.GetCardLogicValue(bCardData[4] >= 10)) {
              bFlushNoA = false;
              bFlushBackA = true;
            }
          } else {
            bFlushBackA = this.btrue;
            for (var i = 1; i < 4; ++i) {
              var nValue = this.GetCardLogicValue(bCardData[i]) - this.GetCardLogicValue(bCardData[i + 1]);
              if (1 != nValue && 2 != nValue) {
                bFlushBackA = this.bfalse;
                break;
              }
            }
          } else if (this.GetCardLogicValue(bCardData[0]) == SssDef_1.SssDef.CARD_DW && this.GetCardLogicValue(bCardData[1]) == SssDef_1.SssDef.CARD_XW) if (10 != this.GetCardLogicValue(bCardData[4]) && 11 != this.GetCardLogicValue(bCardData[4]) && 12 != this.GetCardLogicValue(bCardData[4]) || !this.GetCardLogicValue(14 == bCardData[2])) if (14 == this.GetCardLogicValue(bCardData[2]) && 5 >= this.GetCardLogicValue(bCardData[3])) {
            bFlushFirstA = this.btrue;
            for (var i = 3; i < 4; ++i) {
              var nValue = this.GetCardLogicValue(bCardData[i]) - this.GetCardLogicValue(bCardData[i + 1]);
              if (1 != nValue && 2 != nValue && 3 != nValue) {
                bFlushFirstA = this.bfalse;
                break;
              }
            }
          } else {
            bFlushNoA = this.btrue;
            var bRes1 = this.bfalse;
            var bRes2 = this.bfalse;
            var count = 0;
            for (var i = 2; i < 4; ++i) {
              var A = this.GetCardLogicValue(bCardData[i]);
              var B = this.GetCardLogicValue(bCardData[i + 1]);
              var nValue = A - B;
              1 == nValue && count++;
              if (3 == nValue) {
                if (!bRes1 && !bRes2) {
                  bRes1 = this.btrue;
                  bRes2 = this.btrue;
                  continue;
                }
                bFlushNoA = this.bfalse;
                break;
              }
              if (2 == nValue) {
                if (!bRes1) {
                  bRes1 = this.btrue;
                  count++;
                  continue;
                }
                if (!bRes2) {
                  bRes2 = this.btrue;
                  count++;
                  continue;
                }
                bFlushNoA = this.bfalse;
                break;
              }
              if (1 != nValue && 2 != nValue && 3 != nValue) {
                bFlushNoA = this.bfalse;
                break;
              }
            }
            if (2 == count && this.GetCardLogicValue(bCardData[2]) <= 5 && this.GetCardLogicValue(bCardData[4] >= 2)) {
              bFlushNoA = false;
              bFlushFirstA = true;
            } else if (2 == count && this.GetCardLogicValue(bCardData[2]) <= 13 && this.GetCardLogicValue(bCardData[4] >= 10)) {
              bFlushNoA = false;
              bFlushBackA = true;
            }
          } else {
            bFlushBackA = this.btrue;
            for (var i = 2; i < 4; ++i) {
              var nValue = this.GetCardLogicValue(bCardData[i]) - this.GetCardLogicValue(bCardData[i + 1]);
              if (1 != nValue && 2 != nValue && 3 != nValue) {
                bFlushBackA = this.bfalse;
                break;
              }
            }
          } else {
            14 == this.GetCardLogicValue(bCardData[0]) && 10 == this.GetCardLogicValue(bCardData[4]) ? bFlushBackA = this.btrue : bFlushNoA = this.btrue;
            for (var i = 0; i < 4; ++i) {
              var nValue = this.GetCardLogicValue(bCardData[i]) - this.GetCardLogicValue(bCardData[i + 1]);
              if (1 != nValue) {
                bFlushBackA = this.bfalse;
                bFlushNoA = this.bfalse;
                break;
              }
            }
            if (this.bfalse == bFlushBackA && this.bfalse == bFlushNoA && 14 == this.GetCardLogicValue(bCardData[0])) {
              bFlushFirstA = this.btrue;
              for (var i = 1; i < 4; ++i) 1 != this.GetCardLogicValue(bCardData[i]) - this.GetCardLogicValue(bCardData[i + 1]) && (bFlushFirstA = this.bfalse);
              2 != this.GetCardLogicValue(bCardData[4]) && (bFlushFirstA = this.bfalse);
            }
          }
          if (1 == AnalyseData.bFiveCount) return SssDef_1.SssDef.CT_FIVE_BOMB;
          if (this.bfalse == bFlushBackA && this.bfalse == bFlushNoA && this.bfalse == bFlushFirstA) {
            if (1 == AnalyseData.bFourCount && 1 == AnalyseData.bOneCount) return SssDef_1.SssDef.CT_FIVE_FOUR_ONE;
            if (1 == AnalyseData.bThreeCount && 1 == AnalyseData.bTwoCount) return SssDef_1.SssDef.CT_FIVE_THREE_DEOUBLE;
            if (this.btrue == AnalyseData.bStraight) return SssDef_1.SssDef.CT_FIVE_FLUSH;
          } else {
            if (this.btrue == bFlushNoA) return this.bfalse == AnalyseData.bStraight ? SssDef_1.SssDef.CT_FIVE_MIXED_FLUSH_NO_A : SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_NO_A;
            if (this.btrue == bFlushFirstA) return this.bfalse == AnalyseData.bStraight ? SssDef_1.SssDef.CT_FIVE_MIXED_FLUSH_FIRST_A : SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_FIRST_A;
            if (this.btrue == bFlushBackA) return this.bfalse == AnalyseData.bStraight ? SssDef_1.SssDef.CT_FIVE_MIXED_FLUSH_BACK_A : SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_BACK_A;
          }
          if (1 == AnalyseData.bThreeCount && 2 == AnalyseData.bOneCount) return SssDef_1.SssDef.CT_THREE;
          if (2 == AnalyseData.bTwoCount && 1 == AnalyseData.bOneCount) return SssDef_1.SssDef.CT_FIVE_TWO_DOUBLE;
          if (1 == AnalyseData.bTwoCount && 3 == AnalyseData.bOneCount) return SssDef_1.SssDef.CT_ONE_DOUBLE;
          if (5 == AnalyseData.bOneCount && this.bfalse == AnalyseData.bStraight) return SssDef_1.SssDef.CT_SINGLE;
          return SssDef_1.SssDef.CT_INVALID;

         case 13:
          var TwelveKing = this.bfalse;
          if (13 == AnalyseData.bOneCount && this.btrue == AnalyseData.bStraight) return SssDef_1.SssDef.CT_THIRTEEN_FLUSH;
          if (13 == AnalyseData.bOneCount) return SssDef_1.SssDef.CT_THIRTEEN;
          TwelveKing = this.btrue;
          for (var i = 0; i < 13; i++) if (this.GetCardLogicValue(bCardData[i]) < 11) {
            TwelveKing = this.bfalse;
            break;
          }
          if (TwelveKing) return SssDef_1.SssDef.CT_TWELVE_KING;
          var bCardList = SssLib_1.SssLib.oneDArr(13);
          SssLib_1.SssLib.memcpy(bCardList, bCardData, 13 * sizeof_BYTE);
          this.SortCardList(bCardList, 13, this.enDescend);
          var bLeftCount = 13;
          var cbStraightFlush = SssLib_1.SssLib.oneDArr(5);
          var bTempCount = 5;
          var tagCardType = this.GetType(bCardList, bLeftCount);
          if (tagCardType.bStraightFlush) for (var i = 0; i < tagCardType.btStraightFlush; ++i) {
            SssLib_1.SssLib.CopyMemory(bCardList, bCardData, SssLib_1.SssLib.sizeof(bCardList));
            bLeftCount = 13;
            this.SortCardList(bCardList, 13, this.enDescend);
            SssLib_1.SssLib.ZeroMemory(cbStraightFlush, SssLib_1.SssLib.sizeof(cbStraightFlush));
            cbStraightFlush[0] = bCardList[tagCardType.cbStraightFlush[5 * i]];
            cbStraightFlush[1] = bCardList[tagCardType.cbStraightFlush[5 * i + 1]];
            cbStraightFlush[2] = bCardList[tagCardType.cbStraightFlush[5 * i + 2]];
            cbStraightFlush[3] = bCardList[tagCardType.cbStraightFlush[5 * i + 3]];
            cbStraightFlush[4] = bCardList[tagCardType.cbStraightFlush[5 * i + 4]];
            this.RemoveCard(cbStraightFlush, bTempCount, bCardList, bLeftCount);
            bLeftCount -= bTempCount;
            var bLeftCardList = SssLib_1.SssLib.oneDArr(13);
            SssLib_1.SssLib.CopyMemory(bLeftCardList, bCardList, bLeftCount);
            var bLeftCount1 = bLeftCount;
            var tagCardType1 = this.GetType(bCardList, bLeftCount);
            if (tagCardType1.bStraightFlush) for (var j = 0; j < tagCardType1.btStraightFlush; ++j) {
              SssLib_1.SssLib.CopyMemory(bCardList, bLeftCardList, bLeftCount1);
              SssLib_1.SssLib.ZeroMemory(cbStraightFlush, SssLib_1.SssLib.sizeof(cbStraightFlush));
              bLeftCount = bLeftCount1;
              cbStraightFlush[0] = bCardList[tagCardType1.cbStraightFlush[5 * j]];
              cbStraightFlush[1] = bCardList[tagCardType1.cbStraightFlush[5 * j + 1]];
              cbStraightFlush[2] = bCardList[tagCardType1.cbStraightFlush[5 * j + 2]];
              cbStraightFlush[3] = bCardList[tagCardType1.cbStraightFlush[5 * j + 3]];
              cbStraightFlush[4] = bCardList[tagCardType1.cbStraightFlush[5 * j + 4]];
              this.RemoveCard(cbStraightFlush, bTempCount, bCardList, bLeftCount);
              bLeftCount -= bTempCount;
              var bThreeStraightFlush = this.bfalse;
              this.SortCardList(bCardList, bLeftCount, this.enDescend);
              this.GetCardLogicValue(bCardList[0]) >= SssDef_1.SssDef.CARD_XW && this.GetCardLogicValue(bCardList[1]) < SssDef_1.SssDef.CARD_XW ? this.GetCardColor(bCardList[1]) == this.GetCardColor(bCardList[2]) && (this.GetCardLogicValue(bCardList[1]) - this.GetCardLogicValue(bCardList[2]) == 1 || this.GetCardLogicValue(bCardList[1]) - this.GetCardLogicValue(bCardList[2]) == 2 || 14 == this.GetCardLogicValue(bCardList[1]) && this.GetCardLogicValue(bCardList[2]) <= 3) && (bThreeStraightFlush = this.btrue) : this.GetCardLogicValue(bCardList[0]) == SssDef_1.SssDef.CARD_DW && this.GetCardLogicValue(bCardList[1]) == SssDef_1.SssDef.CARD_XW ? bThreeStraightFlush = this.btrue : this.GetCardColor(bCardList[0]) == this.GetCardColor(bCardList[1]) && this.GetCardColor(bCardList[0]) == this.GetCardColor(bCardList[2]) && (this.GetCardLogicValue(bCardList[0]) == this.GetCardLogicValue(bCardList[1]) + 1 && this.GetCardLogicValue(bCardList[1]) == this.GetCardLogicValue(bCardList[2]) + 1 || 14 == this.GetCardLogicValue(bCardList[0]) && 3 == this.GetCardLogicValue(bCardList[1]) && 2 == this.GetCardLogicValue(bCardList[2])) && (bThreeStraightFlush = this.btrue);
              if (bThreeStraightFlush) return SssDef_1.SssDef.CT_THREE_STRAIGHTFLUSH;
            }
          }
          if (3 == AnalyseData.bFourCount) return SssDef_1.SssDef.CT_THREE_BOMB;
          var AllBig = this.btrue;
          for (var i = 0; i < 13; i++) if (this.GetCardLogicValue(bCardData[i]) < 8) {
            AllBig = this.bfalse;
            break;
          }
          if (AllBig) return SssDef_1.SssDef.CT_ALL_BIG;
          var AllSmall = this.btrue;
          for (var i = 0; i < 13; i++) if (this.GetCardLogicValue(bCardData[i]) > 8) {
            AllSmall = this.bfalse;
            break;
          }
          if (AllSmall) return SssDef_1.SssDef.CT_ALL_SMALL;
          var Flush = 1;
          var bStartIndex = 0;
          var SColor = 0;
          var bSameColorList = SssLib_1.SssLib.oneDArr(13);
          SssLib_1.SssLib.memcpy(bSameColorList, bCardData, 13 * sizeof_BYTE);
          this.SortCardList(bSameColorList, 13, this.enDescend);
          this.GetCardLogicValue(bSameColorList[0]) >= SssDef_1.SssDef.CARD_XW && this.GetCardLogicValue(bSameColorList[1]) < SssDef_1.SssDef.CARD_XW ? bStartIndex = 1 : this.GetCardLogicValue(bSameColorList[0]) >= SssDef_1.SssDef.CARD_XW && this.GetCardLogicValue(bSameColorList[1]) >= SssDef_1.SssDef.CARD_XW && (bStartIndex = 2);
          SColor = this.GetCardColor(bSameColorList[bStartIndex]);
          for (var i = bStartIndex + 1; i < 13; i++) {
            if (SColor != this.GetCardColor(bSameColorList[i]) && SColor != (this.GetCardColor(bSameColorList[i]) + 2) % 4) break;
            Flush++;
          }
          if (13 - bStartIndex == Flush) return SssDef_1.SssDef.CT_SAME_COLOR;
          if (4 == AnalyseData.bThreeCount || 3 == AnalyseData.bThreeCount && 1 == AnalyseData.bFourCount) return SssDef_1.SssDef.CT_FOUR_THREESAME;
          if (5 == AnalyseData.bTwoCount && 1 == AnalyseData.bThreeCount || 3 == AnalyseData.bTwoCount && 1 == AnalyseData.bFourCount && 1 == AnalyseData.bThreeCount || 1 == AnalyseData.bTwoCount && 2 == AnalyseData.bFourCount && 1 == AnalyseData.bThreeCount) return SssDef_1.SssDef.CT_FIVEPAIR_THREE;
          if (6 == AnalyseData.bTwoCount || 4 == AnalyseData.bTwoCount && 1 == AnalyseData.bFourCount || 2 == AnalyseData.bTwoCount && 2 == AnalyseData.bFourCount || 3 == AnalyseData.bFourCount) return SssDef_1.SssDef.CT_SIXPAIR;
          var bCardList = SssLib_1.SssLib.oneDArr(13);
          SssLib_1.SssLib.memcpy(bCardList, bCardData, 13 * sizeof_BYTE);
          var bLeftCCount = 13;
          var bTempCard = SssLib_1.SssLib.twoDArr(3, 5);
          var bTempCCount = SssLib_1.SssLib.oneDArr(3);
          var Flush = this.btrue;
          for (var i = 0; i < 3; i++) {
            if (!this.IsFlush(bCardList, bLeftCCount, bTempCard[i], bTempCCount[i], 2 == i ? 3 : 5)) {
              Flush = this.bfalse;
              break;
            }
            this.RemoveCard(bTempCard[i], bTempCCount[i], bCardList, bLeftCCount);
            bLeftCCount -= bTempCCount[i];
            i < 2 ? SssLib_1.SssLib.CopyMemory1(btSpecialCard, bTempCard[i], bTempCCount[i], 5 * i) : SssLib_1.SssLib.CopyMemory1(btSpecialCard, bTempCard[i], bTempCCount[i], 10);
          }
          if (Flush) return SssDef_1.SssDef.CT_THREE_FLUSH;
          var bCardList = SssLib_1.SssLib.oneDArr(13);
          SssLib_1.SssLib.memcpy(bCardList, bCardData, 13 * sizeof_BYTE);
          this.SortCardList(bCardList, 13, this.enDescend);
          var bLeftCount = 13;
          var cbStraight = SssLib_1.SssLib.oneDArr(5);
          var bTempCount = 5;
          var Straight = this.btrue;
          var tagCardType = this.GetType(bCardList, bLeftCount);
          if (tagCardType.bStraight) {
            SssLib_1.SssLib.ZeroMemory(btSpecialCard, 13 * sizeof_BYTE);
            for (var i = 0; i < tagCardType.btStraight; ++i) {
              SssLib_1.SssLib.CopyMemory(bCardList, bCardData, SssLib_1.SssLib.sizeof(bCardList));
              bLeftCount = 13;
              this.SortCardList(bCardList, 13, this.enDescend);
              SssLib_1.SssLib.ZeroMemory(cbStraight, SssLib_1.SssLib.sizeof(cbStraight));
              cbStraight[0] = bCardList[tagCardType.cbStraight[5 * i]];
              cbStraight[1] = bCardList[tagCardType.cbStraight[5 * i + 1]];
              cbStraight[2] = bCardList[tagCardType.cbStraight[5 * i + 2]];
              cbStraight[3] = bCardList[tagCardType.cbStraight[5 * i + 3]];
              cbStraight[4] = bCardList[tagCardType.cbStraight[5 * i + 4]];
              this.RemoveCard(cbStraight, bTempCount, bCardList, bLeftCount);
              bLeftCount -= bTempCount;
              SssLib_1.SssLib.CopyMemory(btSpecialCard, cbStraight, bTempCount);
              var bLeftCardList = SssLib_1.SssLib.oneDArr(13);
              SssLib_1.SssLib.CopyMemory(bLeftCardList, bCardList, bLeftCount);
              var bLeftCount1 = bLeftCount;
              var tagCardType1 = this.GetType(bCardList, bLeftCount);
              if (tagCardType1.bStraight) for (var j = 0; j < tagCardType1.btStraight; ++j) {
                SssLib_1.SssLib.CopyMemory(bCardList, bLeftCardList, bLeftCount1);
                SssLib_1.SssLib.ZeroMemory(cbStraight, SssLib_1.SssLib.sizeof(cbStraight));
                bLeftCount = bLeftCount1;
                cbStraight[0] = bCardList[tagCardType1.cbStraight[5 * j]];
                cbStraight[1] = bCardList[tagCardType1.cbStraight[5 * j + 1]];
                cbStraight[2] = bCardList[tagCardType1.cbStraight[5 * j + 2]];
                cbStraight[3] = bCardList[tagCardType1.cbStraight[5 * j + 3]];
                cbStraight[4] = bCardList[tagCardType1.cbStraight[5 * j + 4]];
                this.RemoveCard(cbStraight, bTempCount, bCardList, bLeftCount);
                bLeftCount -= bTempCount;
                SssLib_1.SssLib.CopyMemory(btSpecialCard + 5, cbStraight, bTempCount);
                var bThreeStraight = this.bfalse;
                this.SortCardList(bCardList, bLeftCount, this.enDescend);
                this.GetCardLogicValue(bCardList[0]) >= SssDef_1.SssDef.CARD_XW && this.GetCardLogicValue(bCardList[1]) < SssDef_1.SssDef.CARD_XW ? (this.GetCardLogicValue(bCardList[1]) - this.GetCardLogicValue(bCardList[2]) == 1 || this.GetCardLogicValue(bCardList[1]) - this.GetCardLogicValue(bCardList[2]) == 2 || 14 == this.GetCardLogicValue(bCardList[1]) && this.GetCardLogicValue(bCardList[2]) <= 3) && (bThreeStraight = this.btrue) : this.GetCardLogicValue(bCardList[0]) == SssDef_1.SssDef.CARD_DW && this.GetCardLogicValue(bCardList[1]) == SssDef_1.SssDef.CARD_XW ? bThreeStraight = this.btrue : (this.GetCardLogicValue(bCardList[0]) == this.GetCardLogicValue(bCardList[1]) + 1 && this.GetCardLogicValue(bCardList[1]) == this.GetCardLogicValue(bCardList[2]) + 1 || 14 == this.GetCardLogicValue(bCardList[0]) && 3 == this.GetCardLogicValue(bCardList[1]) && 2 == this.GetCardLogicValue(bCardList[2])) && (bThreeStraight = this.btrue);
                if (bThreeStraight) {
                  SssLib_1.SssLib.CopyMemory(btSpecialCard + 10, bCardList, bLeftCount);
                  return SssDef_1.SssDef.CT_THREE_STRAIGHT;
                }
              }
            }
          }
        }
        return SssDef_1.SssDef.CT_INVALID;
      };
      SssCards.prototype.SortCardList = function(bCardData, bCardCount, SortCardType) {
        SssLib_1.SssLib.ASSERT(bCardCount >= 1 && bCardCount <= 13);
        if (bCardCount < 1 || bCardCount > 13) return;
        var bLogicVolue = SssLib_1.SssLib.oneDArr(13);
        for (var i = 0; i < bCardCount; i++) bLogicVolue[i] = this.GetCardLogicValue(bCardData[i]);
        if (this.enDescend == SortCardType) {
          var bSorted = this.btrue;
          var bTempData = void 0, bLast = bCardCount - 1;
          var m_bCardCount = 1;
          do {
            bSorted = this.btrue;
            for (var i = 0; i < bLast; i++) if (bLogicVolue[i] < bLogicVolue[i + 1] || bLogicVolue[i] == bLogicVolue[i + 1] && bCardData[i] < bCardData[i + 1]) {
              bTempData = bCardData[i];
              bCardData[i] = bCardData[i + 1];
              bCardData[i + 1] = bTempData;
              bTempData = bLogicVolue[i];
              bLogicVolue[i] = bLogicVolue[i + 1];
              bLogicVolue[i + 1] = bTempData;
              bSorted = this.bfalse;
            }
            bLast--;
          } while (bSorted == this.bfalse);
        } else if (this.enAscend == SortCardType) {
          var bSorted = this.btrue;
          var bTempData = void 0, bLast = bCardCount - 1;
          var m_bCardCount = 1;
          do {
            bSorted = this.btrue;
            for (var i = 0; i < bLast; i++) if (bLogicVolue[i] > bLogicVolue[i + 1] || bLogicVolue[i] == bLogicVolue[i + 1] && bCardData[i] > bCardData[i + 1]) {
              bTempData = bCardData[i];
              bCardData[i] = bCardData[i + 1];
              bCardData[i + 1] = bTempData;
              bTempData = bLogicVolue[i];
              bLogicVolue[i] = bLogicVolue[i + 1];
              bLogicVolue[i + 1] = bTempData;
              bSorted = this.bfalse;
            }
            bLast--;
          } while (bSorted == this.bfalse);
        } else if (this.enColor == SortCardType) {
          var bSorted = this.btrue;
          var bTempData = void 0, bLast = bCardCount - 1;
          var m_bCardCount = 1;
          var bColor = SssLib_1.SssLib.oneDArr(13);
          for (var i = 0; i < bCardCount; i++) bColor[i] = this.GetCardColor(bCardData[i]);
          do {
            bSorted = this.btrue;
            for (var i = 0; i < bLast; i++) if (bColor[i] < bColor[i + 1] || bColor[i] == bColor[i + 1] && this.GetCardLogicValue(bCardData[i]) < this.GetCardLogicValue(bCardData[i + 1])) {
              bTempData = bCardData[i];
              bCardData[i] = bCardData[i + 1];
              bCardData[i + 1] = bTempData;
              bTempData = bColor[i];
              bColor[i] = bColor[i + 1];
              bColor[i + 1] = bTempData;
              bSorted = this.bfalse;
            }
            bLast--;
          } while (bSorted == this.bfalse);
        }
        return;
      };
      SssCards.prototype.RandCardList = function(bCardBuffer, bBufferCount) {
        var bCardData = SssLib_1.SssLib.oneDArr(SssLib_1.SssLib.sizeof(this.m_bCardListData));
        SssLib_1.SssLib.CopyMemory(bCardData, this.m_bCardListData, SssLib_1.SssLib.sizeof(this.m_bCardListData));
        var bRandCount = 0, bPosition = 0;
        do {
          bPosition = SssLib_1.SssLib.rand() % (bBufferCount - bRandCount);
          bCardBuffer[bRandCount++] = bCardData[bPosition];
          bCardData[bPosition] = bCardData[bBufferCount - bRandCount];
        } while (bRandCount < bBufferCount);
        return;
      };
      SssCards.prototype.RemoveCard = function(bRemoveCard, bRemoveCount, bCardData, bCardCount) {
        SssLib_1.SssLib.ASSERT(bRemoveCount <= bCardCount);
        var bDeleteCount = 0, bTempCardData = SssLib_1.SssLib.oneDArr(13);
        if (bCardCount > SssLib_1.SssLib.CountArray(bTempCardData)) return this.bfalse;
        SssLib_1.SssLib.CopyMemory(bTempCardData, bCardData, 1 * bCardCount);
        for (var i = 0; i < bRemoveCount; i++) for (var j = 0; j < bCardCount; j++) if (bRemoveCard[i] == bTempCardData[j]) {
          bDeleteCount++;
          bTempCardData[j] = 0;
          break;
        }
        if (bDeleteCount != bRemoveCount) return this.bfalse;
        var bCardPos = 0;
        for (var i = 0; i < bCardCount; i++) 0 != bTempCardData[i] && (bCardData[bCardPos++] = bTempCardData[i]);
        return this.btrue;
      };
      SssCards.prototype.GetCardLogicValue = function(bCardData) {
        var bCardValue = this.GetCardValue(bCardData);
        var bCardColor = this.GetCardColor(bCardData);
        if (4 == bCardColor) return bCardValue + 1;
        return 1 == bCardValue ? bCardValue + 13 : bCardValue;
      };
      SssCards.prototype.CompareCard = function(bInFirstList, bInNextList, bFirstCount, bNextCount, bComperWithOther) {
        var FirstAnalyseData = new tagAnalyseData(), NextAnalyseData = new tagAnalyseData();
        SssLib_1.SssLib.memset(FirstAnalyseData, 0, SssLib_1.SssLib.sizeof(tagAnalyseData));
        SssLib_1.SssLib.memset(NextAnalyseData, 0, SssLib_1.SssLib.sizeof(tagAnalyseData));
        var bFirstList = SssLib_1.SssLib.oneDArr(13), bNextList = SssLib_1.SssLib.oneDArr(13);
        SssLib_1.SssLib.CopyMemory(bFirstList, bInFirstList, bFirstCount);
        SssLib_1.SssLib.CopyMemory(bNextList, bInNextList, bNextCount);
        this.SortCardList(bFirstList, bFirstCount, this.enDescend);
        this.SortCardList(bNextList, bNextCount, this.enDescend);
        SssLib_1.SssLib.ASSERT(3 == bFirstCount || 5 == bFirstCount || 3 == bNextCount || 5 == bNextCount || 13 == bFirstCount || 13 == bNextCount);
        this.AnalyseCard(bFirstList, bFirstCount, FirstAnalyseData);
        this.AnalyseCard(bNextList, bNextCount, NextAnalyseData);
        SssLib_1.SssLib.ASSERT(bFirstCount == FirstAnalyseData.bOneCount + 2 * FirstAnalyseData.bTwoCount + 3 * FirstAnalyseData.bThreeCount + 4 * FirstAnalyseData.bFourCount + 5 * FirstAnalyseData.bFiveCount);
        SssLib_1.SssLib.ASSERT(bNextCount = NextAnalyseData.bOneCount + 2 * NextAnalyseData.bTwoCount + 3 * NextAnalyseData.bThreeCount + 4 * NextAnalyseData.bFourCount + 5 * NextAnalyseData.bFiveCount);
        if (bFirstCount != FirstAnalyseData.bOneCount + 2 * FirstAnalyseData.bTwoCount + 3 * FirstAnalyseData.bThreeCount + 4 * FirstAnalyseData.bFourCount + 5 * FirstAnalyseData.bFiveCount) return this.bfalse;
        if (bNextCount != NextAnalyseData.bOneCount + 2 * NextAnalyseData.bTwoCount + 3 * NextAnalyseData.bThreeCount + 4 * NextAnalyseData.bFourCount + 5 * NextAnalyseData.bFiveCount) return this.bfalse;
        SssLib_1.SssLib.ASSERT(bFirstCount == bNextCount || bFirstCount != bNextCount && (3 == bFirstCount && 5 == bNextCount || 5 == bFirstCount && 3 == bNextCount));
        if (!(bFirstCount == bNextCount || bFirstCount != bNextCount && (3 == bFirstCount && 5 == bNextCount || 5 == bFirstCount && 3 == bNextCount))) return this.bfalse;
        var bNextType = this.GetCardType(bNextList, bNextCount, this.btCardSpecialData);
        var bFirstType = this.GetCardType(bFirstList, bFirstCount, this.btCardSpecialData);
        SssLib_1.SssLib.ASSERT(SssDef_1.SssDef.CT_INVALID != bNextType && SssDef_1.SssDef.CT_INVALID != bFirstType);
        if (SssDef_1.SssDef.CT_INVALID == bFirstType || SssDef_1.SssDef.CT_INVALID == bNextType) return this.bfalse;
        if (this.btrue == bComperWithOther) if (3 == bFirstCount) {
          if (bNextType != bFirstType) return bNextType > bFirstType;
          switch (bFirstType) {
           case SssDef_1.SssDef.CT_SINGLE:
            SssLib_1.SssLib.ASSERT(bNextList[0] != bFirstList[0]);
            var bAllSame = this.btrue;
            for (var i = 0; i < 3; ++i) if (this.GetCardLogicValue(bNextList[i]) != this.GetCardLogicValue(bFirstList[i])) {
              bAllSame = this.bfalse;
              break;
            }
            if (this.btrue == bAllSame) return this.GetCardColor(bNextList[0]) > this.GetCardColor(bFirstList[0]);
            for (var i = 0; i < 3; ++i) if (this.GetCardLogicValue(bNextList[i]) != this.GetCardLogicValue(bFirstList[i])) return this.GetCardLogicValue(bNextList[i]) > this.GetCardLogicValue(bFirstList[i]);
            return this.bfalse;

           case SssDef_1.SssDef.CT_ONE_DOUBLE:
            SssLib_1.SssLib.ASSERT(bNextList[NextAnalyseData.bTwoFirst[0]] != bFirstList[FirstAnalyseData.bTwoFirst[0]]);
            return this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[0]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[0]]) ? this.GetCardLogicValue(bNextList[NextAnalyseData.bOneFirst[0]]) != this.GetCardLogicValue(bFirstList[FirstAnalyseData.bOneFirst[0]]) ? this.GetCardLogicValue(bNextList[NextAnalyseData.bOneFirst[0]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bOneFirst[0]]) : this.GetCardColor(bNextList[NextAnalyseData.bTwoFirst[0]]) > this.GetCardColor(bFirstList[FirstAnalyseData.bTwoFirst[0]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[0]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[0]]);

           case SssDef_1.SssDef.CT_THREE:
            bNextList[NextAnalyseData.bThreeFirst[0]] == bFirstList[FirstAnalyseData.bThreeFirst[0]];
            SssLib_1.SssLib.ASSERT(bNextList[NextAnalyseData.bThreeFirst[0]] != bFirstList[FirstAnalyseData.bThreeFirst[0]]);
            return this.GetCardLogicValue(bNextList[NextAnalyseData.bThreeFirst[0]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bThreeFirst[0]]) ? this.GetCardColor(bNextList[NextAnalyseData.bThreeFirst[0]]) > this.GetCardColor(bFirstList[FirstAnalyseData.bThreeFirst[0]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bThreeFirst[0]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bThreeFirst[0]]);
          }
        } else if (5 == bFirstCount) {
          if (bNextType != bFirstType) return bNextType > bFirstType;
          switch (bFirstType) {
           case SssDef_1.SssDef.CT_SINGLE:
            SssLib_1.SssLib.ASSERT(bNextList[0] != bFirstList[0]);
            var bAllSame = this.btrue;
            for (var i = 0; i < 5; ++i) if (this.GetCardLogicValue(bNextList[i]) != this.GetCardLogicValue(bFirstList[i])) {
              bAllSame = this.bfalse;
              break;
            }
            if (this.btrue == bAllSame) return this.GetCardColor(bNextList[0]) > this.GetCardColor(bFirstList[0]);
            for (var i = 0; i < 5; ++i) if (this.GetCardLogicValue(bNextList[i]) != this.GetCardLogicValue(bFirstList[i])) return this.GetCardLogicValue(bNextList[i]) > this.GetCardLogicValue(bFirstList[i]);
            return this.bfalse;

           case SssDef_1.SssDef.CT_ONE_DOUBLE:
            SssLib_1.SssLib.ASSERT(bNextList[NextAnalyseData.bTwoFirst[0]] != bFirstList[FirstAnalyseData.bTwoFirst[0]]);
            if (this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[0]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[0]])) {
              for (var i = 0; i < 3; ++i) if (this.GetCardLogicValue(bNextList[NextAnalyseData.bOneFirst[i]]) != this.GetCardLogicValue(bFirstList[FirstAnalyseData.bOneFirst[i]])) return this.GetCardLogicValue(bNextList[NextAnalyseData.bOneFirst[i]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bOneFirst[i]]);
              return this.GetCardColor(bNextList[NextAnalyseData.bTwoFirst[0]]) > this.GetCardColor(bFirstList[FirstAnalyseData.bTwoFirst[0]]);
            }
            return this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[0]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[0]]);

           case SssDef_1.SssDef.CT_FIVE_TWO_DOUBLE:
            SssLib_1.SssLib.ASSERT(bNextList[NextAnalyseData.bTwoFirst[0]] != bFirstList[FirstAnalyseData.bTwoFirst[0]]);
            if (this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[0]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[0]])) {
              if (this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[1]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[1]])) {
                if (this.GetCardLogicValue(bNextList[NextAnalyseData.bOneFirst[0]]) != this.GetCardLogicValue(bFirstList[FirstAnalyseData.bOneFirst[0]])) return this.GetCardLogicValue(bNextList[NextAnalyseData.bOneFirst[0]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bOneFirst[0]]);
                return this.GetCardColor(bNextList[NextAnalyseData.bTwoFirst[0]]) > this.GetCardColor(bFirstList[FirstAnalyseData.bTwoFirst[0]]);
              }
              return this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[1]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[1]]);
            }
            return this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[0]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[0]]);

           case SssDef_1.SssDef.CT_THREE:
            bNextList[NextAnalyseData.bThreeFirst[0]] == bFirstList[FirstAnalyseData.bThreeFirst[0]];
            SssLib_1.SssLib.ASSERT(bNextList[NextAnalyseData.bThreeFirst[0]] != bFirstList[FirstAnalyseData.bThreeFirst[0]]);
            return this.GetCardLogicValue(bNextList[NextAnalyseData.bThreeFirst[0]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bThreeFirst[0]]) ? this.GetCardColor(bNextList[NextAnalyseData.bThreeFirst[0]]) > this.GetCardColor(bFirstList[FirstAnalyseData.bThreeFirst[0]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bThreeFirst[0]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bThreeFirst[0]]);

           case SssDef_1.SssDef.CT_FIVE_MIXED_FLUSH_FIRST_A:
           case SssDef_1.SssDef.CT_FIVE_MIXED_FLUSH_NO_A:
           case SssDef_1.SssDef.CT_FIVE_MIXED_FLUSH_BACK_A:
            SssLib_1.SssLib.ASSERT(bNextList[0] != bFirstList[0]);
            return this.GetCardLogicValue(bNextList[0]) == this.GetCardLogicValue(bFirstList[0]) ? this.GetCardColor(bNextList[0]) > this.GetCardColor(bFirstList[0]) : this.GetCardLogicValue(bNextList[0]) > this.GetCardLogicValue(bFirstList[0]);

           case SssDef_1.SssDef.CT_FIVE_FLUSH:
            SssLib_1.SssLib.ASSERT(bNextList[0] != bFirstList[0]);
            for (var i = 0; i < 5; ++i) if (this.GetCardLogicValue(bNextList[i]) != this.GetCardLogicValue(bFirstList[i])) return this.GetCardLogicValue(bNextList[i]) > this.GetCardLogicValue(bFirstList[i]);
            return this.GetCardColor(bNextList[0]) > this.GetCardColor(bFirstList[0]);

           case SssDef_1.SssDef.CT_FIVE_THREE_DEOUBLE:
            SssLib_1.SssLib.ASSERT(bNextList[NextAnalyseData.bThreeFirst[0]] != bFirstList[FirstAnalyseData.bThreeFirst[0]]);
            return this.GetCardLogicValue(bNextList[NextAnalyseData.bThreeFirst[0]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bThreeFirst[0]]) ? this.GetCardColor(bNextList[NextAnalyseData.bThreeFirst[0]]) > this.GetCardColor(bFirstList[FirstAnalyseData.bThreeFirst[0]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bThreeFirst[0]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bThreeFirst[0]]);

           case SssDef_1.SssDef.CT_FIVE_FOUR_ONE:
            SssLib_1.SssLib.ASSERT(bNextList[NextAnalyseData.bFourFirst[0]] != bFirstList[FirstAnalyseData.bFourFirst[0]]);
            return this.GetCardLogicValue(bNextList[NextAnalyseData.bFourFirst[0]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bFourFirst[0]]) ? this.GetCardColor(bNextList[NextAnalyseData.bFourFirst[0]]) > this.GetCardColor(bFirstList[FirstAnalyseData.bFourFirst[0]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bFourFirst[0]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bFourFirst[0]]);

           case SssDef_1.SssDef.CT_FIVE_BOMB:
            SssLib_1.SssLib.ASSERT(bNextList[NextAnalyseData.bFiveFirst[0]] != bFirstList[FirstAnalyseData.bFiveFirst[0]]);
            return this.GetCardLogicValue(bNextList[NextAnalyseData.bFiveFirst[0]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bFiveFirst[0]]) ? this.GetCardColor(bNextList[NextAnalyseData.bFiveFirst[0]]) > this.GetCardColor(bFirstList[FirstAnalyseData.bFiveFirst[0]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bFiveFirst[0]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bFiveFirst[0]]);

           case SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_NO_A:
           case SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_FIRST_A:
           case SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_BACK_A:
            SssLib_1.SssLib.ASSERT(bNextList[0] != bFirstList[0]);
            for (var i = 0; i < 5; ++i) if (this.GetCardLogicValue(bNextList[i]) != this.GetCardLogicValue(bFirstList[i])) return this.GetCardLogicValue(bNextList[i]) > this.GetCardLogicValue(bFirstList[i]);
            return this.GetCardColor(bNextList[0]) > this.GetCardColor(bFirstList[0]);

           default:
            return this.bfalse;
          }
        } else {
          if (bNextType != bFirstType) return bNextType > bFirstType;
          switch (bFirstType) {
           case SssDef_1.SssDef.CT_THIRTEEN_FLUSH:
            return this.GetCardColor(bNextList[0]) > this.GetCardColor(bFirstList[0]);

           case SssDef_1.SssDef.CT_TWELVE_KING:
           case SssDef_1.SssDef.CT_THREE_STRAIGHTFLUSH:
            var AllSame = this.btrue;
            for (var i = 0; i < 13; i++) if (this.GetCardLogicValue(bNextList[i]) != this.GetCardLogicValue(bFirstList[i])) {
              AllSame = this.bfalse;
              return this.GetCardLogicValue(bNextList[i]) > this.GetCardLogicValue(bFirstList[i]);
            }
            if (AllSame) return this.GetCardColor(bNextList[0]) > this.GetCardColor(bFirstList[0]);
            return this.bfalse;

           case SssDef_1.SssDef.CT_THREE_BOMB:
            SssLib_1.SssLib.ASSERT(bNextList[NextAnalyseData.bFourFirst[0]] != bFirstList[FirstAnalyseData.bFourFirst[0]]);
            return this.GetCardLogicValue(bNextList[NextAnalyseData.bFourFirst[0]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bFourFirst[0]]) ? this.GetCardLogicValue(bNextList[NextAnalyseData.bFourFirst[1]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bFourFirst[1]]) ? this.GetCardLogicValue(bNextList[NextAnalyseData.bFourFirst[2]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bFourFirst[2]]) ? this.GetCardLogicValue(bNextList[NextAnalyseData.bOneFirst[0]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bOneFirst[0]]) ? this.GetCardColor(bNextList[NextAnalyseData.bFourFirst[0]]) > this.GetCardColor(bFirstList[FirstAnalyseData.bFourFirst[0]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bOneFirst[0]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bOneFirst[0]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bFourFirst[2]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bFourFirst[2]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bFourFirst[1]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bFourFirst[1]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bFourFirst[0]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bFourFirst[0]]);

           case SssDef_1.SssDef.CT_ALL_BIG:
           case SssDef_1.SssDef.CT_ALL_SMALL:
           case SssDef_1.SssDef.CT_SAME_COLOR:
            var AllSame = this.btrue;
            for (var i = 0; i < 13; i++) if (this.GetCardLogicValue(bNextList[i]) != this.GetCardLogicValue(bFirstList[i])) {
              AllSame = this.bfalse;
              return this.GetCardLogicValue(bNextList[i]) > this.GetCardLogicValue(bFirstList[i]);
            }
            if (AllSame) return this.GetCardColor(bNextList[0]) > this.GetCardColor(bFirstList[0]);
            return this.bfalse;

           case SssDef_1.SssDef.CT_FOUR_THREESAME:
            SssLib_1.SssLib.ASSERT(bNextList[NextAnalyseData.bThreeFirst[0]] != bFirstList[FirstAnalyseData.bThreeFirst[0]]);
            return this.GetCardLogicValue(bNextList[NextAnalyseData.bThreeFirst[0]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bThreeFirst[0]]) ? this.GetCardLogicValue(bNextList[NextAnalyseData.bThreeFirst[1]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bThreeFirst[1]]) ? this.GetCardLogicValue(bNextList[NextAnalyseData.bThreeFirst[2]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bThreeFirst[2]]) ? this.GetCardLogicValue(bNextList[NextAnalyseData.bThreeFirst[3]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bThreeFirst[3]]) ? this.GetCardLogicValue(bNextList[NextAnalyseData.bOneFirst[0]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bOneFirst[0]]) ? this.GetCardColor(bNextList[NextAnalyseData.bThreeFirst[0]]) > this.GetCardColor(bFirstList[FirstAnalyseData.bThreeFirst[0]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bOneFirst[0]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bOneFirst[0]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bThreeFirst[3]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bThreeFirst[3]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bThreeFirst[2]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bThreeFirst[2]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bThreeFirst[1]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bThreeFirst[1]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bThreeFirst[0]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bThreeFirst[0]]);

           case SssDef_1.SssDef.CT_FIVEPAIR_THREE:
            SssLib_1.SssLib.ASSERT(bNextList[NextAnalyseData.bTwoFirst[0]] != bFirstList[FirstAnalyseData.bTwoFirst[0]]);
            return this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[0]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[0]]) ? this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[1]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[1]]) ? this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[2]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[2]]) ? this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[3]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[3]]) ? this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[4]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[4]]) ? this.GetCardLogicValue(bNextList[NextAnalyseData.bThreeFirst[0]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bThreeFirst[0]]) ? this.GetCardColor(bNextList[NextAnalyseData.bTwoFirst[0]]) > this.GetCardColor(bFirstList[FirstAnalyseData.bTwoFirst[0]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bThreeFirst[0]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bThreeFirst[0]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[4]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[4]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[3]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[3]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[2]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[2]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[1]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[1]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[0]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[0]]);

           case SssDef_1.SssDef.CT_SIXPAIR:
            SssLib_1.SssLib.ASSERT(bNextList[NextAnalyseData.bTwoFirst[0]] != bFirstList[FirstAnalyseData.bTwoFirst[0]]);
            return this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[0]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[0]]) ? this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[1]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[1]]) ? this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[2]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[2]]) ? this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[3]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[3]]) ? this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[4]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[4]]) ? this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[5]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[5]]) ? this.GetCardLogicValue(bNextList[NextAnalyseData.bOneFirst[0]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bOneFirst[0]]) ? this.GetCardColor(bNextList[NextAnalyseData.bTwoFirst[0]]) > this.GetCardColor(bFirstList[FirstAnalyseData.bTwoFirst[0]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bOneFirst[0]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bOneFirst[0]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[5]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[5]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[4]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[4]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[3]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[3]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[2]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[2]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[1]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[1]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[0]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[0]]);

           case SssDef_1.SssDef.CT_THREE_FLUSH:
           case SssDef_1.SssDef.CT_THREE_STRAIGHT:
            var AllSame = this.btrue;
            for (var i = 0; i < 13; i++) if (this.GetCardLogicValue(bNextList[i]) != this.GetCardLogicValue(bFirstList[i])) {
              AllSame = this.bfalse;
              return this.GetCardLogicValue(bNextList[i]) > this.GetCardLogicValue(bFirstList[i]);
            }
            if (AllSame) return this.GetCardColor(bNextList[0]) > this.GetCardColor(bFirstList[0]);
            return this.bfalse;
          }
        } else {
          if (bNextType != bFirstType) return bNextType > bFirstType;
          switch (bFirstType) {
           case SssDef_1.SssDef.CT_SINGLE:
            SssLib_1.SssLib.ASSERT(bNextList[0] != bFirstList[0]);
            var bAllSame = this.btrue;
            for (var i = 0; i < 3; ++i) if (this.GetCardLogicValue(bNextList[i]) != this.GetCardLogicValue(bFirstList[i])) {
              bAllSame = this.bfalse;
              break;
            }
            if (this.btrue == bAllSame) return this.GetCardColor(bNextList[0]) > this.GetCardColor(bFirstList[0]);
            for (var i = 0; i < 3; ++i) if (this.GetCardLogicValue(bNextList[i]) != this.GetCardLogicValue(bFirstList[i])) return this.GetCardLogicValue(bNextList[i]) > this.GetCardLogicValue(bFirstList[i]);
            return bNextCount < bFirstCount;

           case SssDef_1.SssDef.CT_ONE_DOUBLE:
            SssLib_1.SssLib.ASSERT(bNextList[NextAnalyseData.bTwoFirst[0]] != bFirstList[FirstAnalyseData.bTwoFirst[0]]);
            if (this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[0]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[0]])) {
              if (this.GetCardLogicValue(bNextList[NextAnalyseData.bOneFirst[0]]) != this.GetCardLogicValue(bFirstList[FirstAnalyseData.bOneFirst[0]])) return this.GetCardLogicValue(bNextList[NextAnalyseData.bOneFirst[0]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bOneFirst[0]]);
              return this.GetCardColor(bNextList[NextAnalyseData.bTwoFirst[0]]) > this.GetCardColor(bFirstList[FirstAnalyseData.bTwoFirst[0]]);
            }
            return this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[0]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[0]]);

           case SssDef_1.SssDef.CT_FIVE_TWO_DOUBLE:
            SssLib_1.SssLib.ASSERT(bNextList[NextAnalyseData.bTwoFirst[0]] != bFirstList[FirstAnalyseData.bTwoFirst[0]]);
            if (this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[0]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[0]])) {
              if (this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[1]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[1]])) {
                if (this.GetCardLogicValue(bNextList[NextAnalyseData.bOneFirst[0]]) != this.GetCardLogicValue(bFirstList[FirstAnalyseData.bOneFirst[0]])) return this.GetCardLogicValue(bNextList[NextAnalyseData.bOneFirst[0]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bOneFirst[0]]);
                return this.GetCardColor(bNextList[NextAnalyseData.bTwoFirst[0]]) > this.GetCardColor(bFirstList[FirstAnalyseData.bTwoFirst[0]]);
              }
              return this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[1]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[1]]);
            }
            return this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[0]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[0]]);

           case SssDef_1.SssDef.CT_THREE:
            bNextList[NextAnalyseData.bThreeFirst[0]] == bFirstList[FirstAnalyseData.bThreeFirst[0]];
            SssLib_1.SssLib.ASSERT(bNextList[NextAnalyseData.bThreeFirst[0]] != bFirstList[FirstAnalyseData.bThreeFirst[0]]);
            return this.GetCardLogicValue(bNextList[NextAnalyseData.bThreeFirst[0]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bThreeFirst[0]]) ? this.GetCardColor(bNextList[NextAnalyseData.bThreeFirst[0]]) > this.GetCardColor(bFirstList[FirstAnalyseData.bThreeFirst[0]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bThreeFirst[0]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bThreeFirst[0]]);

           case SssDef_1.SssDef.CT_FIVE_MIXED_FLUSH_FIRST_A:
           case SssDef_1.SssDef.CT_FIVE_MIXED_FLUSH_NO_A:
           case SssDef_1.SssDef.CT_FIVE_MIXED_FLUSH_BACK_A:
            var FirstJokerCount = 0;
            var NextJokerCount = 0;
            for (var i = 0; i < 2; i++) {
              this.GetCardLogicValue(bFirstList[i]) != SssDef_1.SssDef.CARD_DW && this.GetCardLogicValue(bFirstList[i]) != SssDef_1.SssDef.CARD_XW || FirstJokerCount++;
              this.GetCardLogicValue(bNextList[i]) != SssDef_1.SssDef.CARD_DW && this.GetCardLogicValue(bNextList[i]) != SssDef_1.SssDef.CARD_XW || NextJokerCount++;
            }
            if (FirstJokerCount > 0 || NextJokerCount > 0) {
              var FirstStraight = true;
              var NextStraight = true;
              var FirstTwoValue = false;
              var NextTwoValue = false;
              var FirstbigCard = 0;
              var NextbigCard = 0;
              for (var i = FirstJokerCount; i < 4; i++) if (this.GetCardLogicValue(bFirstList[i]) != this.GetCardLogicValue(bFirstList[i + 1]) + 1) {
                this.GetCardLogicValue(bFirstList[i]) - this.GetCardLogicValue(bFirstList[i + 1]) == 3 && true == FirstTwoValue;
                FirstStraight = false;
              }
              for (var i = NextJokerCount; i < 4; i++) if (this.GetCardLogicValue(bNextList[i]) != this.GetCardLogicValue(bNextList[i + 1]) + 1) {
                this.GetCardLogicValue(bNextList[i]) - this.GetCardLogicValue(bNextList[i + 1]) == 3 && true == NextTwoValue;
                NextStraight = false;
              }
              FirstStraight ? FirstbigCard = this.GetCardLogicValue(bFirstList[FirstJokerCount]) + FirstJokerCount : FirstStraight || (FirstbigCard = 2 != FirstJokerCount || FirstTwoValue ? this.GetCardLogicValue(bFirstList[FirstJokerCount]) : this.GetCardLogicValue(bFirstList[FirstJokerCount]) + 1);
              NextStraight ? NextbigCard = this.GetCardLogicValue(bNextList[NextJokerCount]) + NextJokerCount : NextStraight || (NextbigCard = 2 != NextJokerCount || NextTwoValue ? this.GetCardLogicValue(bNextList[NextJokerCount]) : this.GetCardLogicValue(bNextList[NextJokerCount]) + 1);
              if (FirstbigCard == NextbigCard) {
                if (NextJokerCount == FirstJokerCount) {
                  for (var StraightJoker = FirstJokerCount; StraightJoker < 5; StraightJoker++) {
                    if (this.GetCardLogicValue(bFirstList[StraightJoker]) != this.GetCardLogicValue(bNextList[StraightJoker])) return this.GetCardLogicValue(bFirstList[StraightJoker]) < this.GetCardLogicValue(bNextList[StraightJoker]);
                    if (this.GetCardColor(bFirstList[StraightJoker]) != this.GetCardColor(bNextList[StraightJoker])) return this.GetCardColor(bFirstList[StraightJoker]) < this.GetCardColor(bNextList[StraightJoker]);
                  }
                  return true;
                }
                return FirstJokerCount > NextJokerCount;
              }
              return FirstbigCard < NextbigCard;
            }
            for (var straightnum = 0; straightnum < 5; straightnum++) {
              if (this.GetCardLogicValue(bFirstList[straightnum]) != this.GetCardLogicValue(bNextList[straightnum])) return this.GetCardLogicValue(bFirstList[straightnum]) < this.GetCardLogicValue(bNextList[straightnum]);
              if (this.GetCardColor(bFirstList[straightnum]) != this.GetCardColor(bNextList[straightnum])) return this.GetCardColor(bFirstList[straightnum]) < this.GetCardColor(bNextList[straightnum]);
            }
            return true;

           case SssDef_1.SssDef.CT_FIVE_FLUSH:
            SssLib_1.SssLib.ASSERT(bNextList[0] != bFirstList[0]);
            var FirstThreeCount = FirstAnalyseData.bThreeCount;
            var FirstTwoCount = FirstAnalyseData.bTwoCount;
            var NextThreeCount = NextAnalyseData.bThreeCount;
            var NextTwoCount = NextAnalyseData.bTwoCount;
            if (FirstThreeCount > 0 && NextThreeCount > 0) return this.GetCardLogicValue(bFirstList[FirstAnalyseData.bThreeFirst[0]]) < this.GetCardLogicValue(bNextList[NextAnalyseData.bThreeFirst[0]]);
            if (FirstThreeCount > 0 || NextThreeCount > 0) return FirstThreeCount < NextThreeCount;
            if (0 == FirstThreeCount && 0 == NextThreeCount) {
              if (FirstTwoCount == NextTwoCount && 0 != FirstTwoCount) return this.GetCardLogicValue(bFirstList[FirstAnalyseData.bTwoFirst[0]]) < this.GetCardLogicValue(bNextList[NextAnalyseData.bTwoFirst[0]]);
              if (FirstTwoCount > 0 && NextTwoCount > 0) return FirstTwoCount < NextTwoCount;
            }
            if (FirstTwoCount > 0 && 0 == NextTwoCount) return false;
            if (NextTwoCount > 0 && 0 == FirstTwoCount) return true;
            for (var i = 0; i < 5; ++i) if (this.GetCardLogicValue(bNextList[i]) != this.GetCardLogicValue(bFirstList[i])) return this.GetCardLogicValue(bNextList[i]) > this.GetCardLogicValue(bFirstList[i]);
            return this.GetCardColor(bNextList[0]) > this.GetCardColor(bFirstList[0]);

           case SssDef_1.SssDef.CT_FIVE_THREE_DEOUBLE:
            SssLib_1.SssLib.ASSERT(bNextList[NextAnalyseData.bThreeFirst[0]] != bFirstList[FirstAnalyseData.bThreeFirst[0]]);
            return this.GetCardLogicValue(bNextList[NextAnalyseData.bThreeFirst[0]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bThreeFirst[0]]) ? this.GetCardColor(bNextList[NextAnalyseData.bThreeFirst[0]]) > this.GetCardColor(bFirstList[FirstAnalyseData.bThreeFirst[0]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bThreeFirst[0]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bThreeFirst[0]]);

           case SssDef_1.SssDef.CT_FIVE_FOUR_ONE:
            SssLib_1.SssLib.ASSERT(bNextList[NextAnalyseData.bFourFirst[0]] != bFirstList[FirstAnalyseData.bFourFirst[0]]);
            return this.GetCardLogicValue(bNextList[NextAnalyseData.bFourFirst[0]]) == this.GetCardLogicValue(bFirstList[FirstAnalyseData.bFourFirst[0]]) ? this.GetCardColor(bNextList[NextAnalyseData.bFourFirst[0]]) > this.GetCardColor(bFirstList[FirstAnalyseData.bFourFirst[0]]) : this.GetCardLogicValue(bNextList[NextAnalyseData.bFourFirst[0]]) > this.GetCardLogicValue(bFirstList[FirstAnalyseData.bFourFirst[0]]);

           case SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_NO_A:
           case SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_FIRST_A:
           case SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_BACK_A:
            var FirstJokerCount = 0;
            var NextJokerCount = 0;
            for (var i = 0; i < 2; i++) {
              this.GetCardLogicValue(bFirstList[i]) != SssDef_1.SssDef.CARD_DW && this.GetCardLogicValue(bFirstList[i]) != SssDef_1.SssDef.CARD_XW || FirstJokerCount++;
              this.GetCardLogicValue(bNextList[i]) != SssDef_1.SssDef.CARD_DW && this.GetCardLogicValue(bNextList[i]) != SssDef_1.SssDef.CARD_XW || NextJokerCount++;
            }
            if (FirstJokerCount > 0 || NextJokerCount > 0) {
              var FirstStraight = true;
              var NextStraight = true;
              var FirstTwoValue = false;
              var NextTwoValue = false;
              var FirstbigCard = 0;
              var NextbigCard = 0;
              for (var i = FirstJokerCount; i < 4; i++) if (this.GetCardLogicValue(bFirstList[i]) != this.GetCardLogicValue(bFirstList[i + 1]) + 1) {
                this.GetCardLogicValue(bFirstList[i]) - this.GetCardLogicValue(bFirstList[i + 1]) == 3 && true == FirstTwoValue;
                FirstStraight = false;
              }
              for (var i = NextJokerCount; i < 4; i++) if (this.GetCardLogicValue(bNextList[i]) != this.GetCardLogicValue(bNextList[i + 1]) + 1) {
                this.GetCardLogicValue(bNextList[i]) - this.GetCardLogicValue(bNextList[i + 1]) == 3 && true == NextTwoValue;
                NextStraight = false;
              }
              FirstStraight ? FirstbigCard = this.GetCardLogicValue(bFirstList[FirstJokerCount]) + FirstJokerCount : FirstStraight || (FirstbigCard = 2 != FirstJokerCount || FirstTwoValue ? this.GetCardLogicValue(bFirstList[FirstJokerCount]) : this.GetCardLogicValue(bFirstList[FirstJokerCount]) + 1);
              NextStraight ? NextbigCard = this.GetCardLogicValue(bNextList[NextJokerCount]) + NextJokerCount : NextStraight || (NextbigCard = 2 != NextJokerCount || NextTwoValue ? this.GetCardLogicValue(bNextList[NextJokerCount]) : this.GetCardLogicValue(bNextList[NextJokerCount]) + 1);
              if (FirstbigCard == NextbigCard) return this.GetCardColor(bNextList[2]) > this.GetCardColor(bFirstList[2]);
              return FirstbigCard < NextbigCard;
            }
            for (var i = 0; i < 5; i++) if (this.GetCardLogicValue(bNextList[i]) != this.GetCardLogicValue(bFirstList[i])) return this.GetCardLogicValue(bNextList[i]) > this.GetCardLogicValue(bFirstList[i]);
            return this.GetCardColor(bNextList[0]) > this.GetCardColor(bFirstList[0]);

           default:
            return this.bfalse;
          }
        }
        return this.bfalse;
      };
      SssCards.prototype.AnalyseCard = function(bCardDataList, bCardCount, AnalyseData) {
        var bCardData = SssLib_1.SssLib.oneDArr(13);
        SssLib_1.SssLib.CopyMemory(bCardData, bCardDataList, bCardCount);
        this.SortCardList(bCardData, bCardCount, this.enDescend);
        var bSameCount = 1, bCardValueTemp = 0, bSameColorCount = 1, bFirstCardIndex = 0;
        SssLib_1.SssLib.ASSERT(3 == bCardCount || 5 == bCardCount || 13 == bCardCount);
        SssLib_1.SssLib.memset(AnalyseData, 0, SssLib_1.SssLib.sizeof(AnalyseData));
        if ((this.GetCardLogicValue(bCardData[0]) == SssDef_1.SssDef.CARD_DW || this.GetCardLogicValue(bCardData[0]) == SssDef_1.SssDef.CARD_XW) && this.GetCardLogicValue(bCardData[1]) < SssDef_1.SssDef.CARD_XW) {
          var bLogicValue = this.GetCardLogicValue(bCardData[1]);
          var bCardColor = this.GetCardColor(bCardData[1]);
          bFirstCardIndex = 1;
          for (var i = 2; i < bCardCount; i++) {
            bCardValueTemp = this.GetCardLogicValue(bCardData[i]);
            bCardValueTemp == bLogicValue && bSameCount++;
            if (bCardValueTemp != bLogicValue || i == bCardCount - 1) switch (bSameCount) {
             case 1:
              break;

             case 2:
              AnalyseData.bTwoFirst[AnalyseData.bTwoCount] = bFirstCardIndex;
              AnalyseData.bTwoCount++;
              break;

             case 3:
              AnalyseData.bThreeFirst[AnalyseData.bThreeCount] = bFirstCardIndex;
              AnalyseData.bThreeCount++;
              break;

             case 4:
              AnalyseData.bFourFirst[AnalyseData.bFourCount] = bFirstCardIndex;
              AnalyseData.bFourCount++;
            }
            if (bCardValueTemp != bLogicValue) {
              if (1 == bSameCount) if (i != bCardCount - 1) {
                AnalyseData.bOneFirst[AnalyseData.bOneCount] = bFirstCardIndex;
                AnalyseData.bOneCount++;
              } else {
                AnalyseData.bOneFirst[AnalyseData.bOneCount] = bFirstCardIndex;
                AnalyseData.bOneCount++;
                AnalyseData.bOneFirst[AnalyseData.bOneCount] = i;
                AnalyseData.bOneCount++;
              } else if (i == bCardCount - 1) {
                AnalyseData.bOneFirst[AnalyseData.bOneCount] = i;
                AnalyseData.bOneCount++;
              }
              bSameCount = 1;
              bLogicValue = bCardValueTemp;
              bFirstCardIndex = i;
            }
            this.GetCardColor(bCardData[i]) != bCardColor ? bSameColorCount = 1 : ++bSameColorCount;
          }
          AnalyseData.bStraight = bCardCount - 1 == bSameColorCount ? this.btrue : this.bfalse;
          switch (bCardCount) {
           case 3:
            if (1 == AnalyseData.bTwoCount) {
              AnalyseData.bTwoCount = 0;
              AnalyseData.bThreeCount = 1;
              AnalyseData.bThreeFirst[0] = AnalyseData.bTwoFirst[0];
            }
            if (2 == AnalyseData.bOneCount) {
              AnalyseData.bOneCount = 1;
              AnalyseData.bTwoCount = 1;
              AnalyseData.bTwoFirst[0] = AnalyseData.bOneFirst[0];
              AnalyseData.bOneFirst[0] = AnalyseData.bOneFirst[1];
            }
            return;

           case 5:
            if (1 == AnalyseData.bFourCount) {
              AnalyseData.bFourCount = 0;
              AnalyseData.bFiveCount = 1;
              AnalyseData.bFiveFirst[0] = AnalyseData.bFourFirst[0];
            }
            if (1 == AnalyseData.bThreeCount && 1 == AnalyseData.bOneCount) {
              AnalyseData.bThreeCount = 0;
              AnalyseData.bFourCount = 1;
              AnalyseData.bFourFirst[0] = AnalyseData.bThreeFirst[0];
            } else if (2 == AnalyseData.bTwoCount) {
              AnalyseData.bTwoCount = 1;
              AnalyseData.bThreeCount = 1;
              AnalyseData.bThreeFirst[0] = AnalyseData.bTwoFirst[0];
              AnalyseData.bTwoFirst[0] = AnalyseData.bTwoFirst[1];
            } else if (1 == AnalyseData.bTwoCount && 2 == AnalyseData.bOneCount) {
              AnalyseData.bTwoCount = 0;
              AnalyseData.bThreeCount = 1;
              AnalyseData.bThreeFirst[0] = AnalyseData.bTwoFirst[0];
            } else if (4 == AnalyseData.bOneCount) {
              AnalyseData.bOneCount = 3;
              AnalyseData.bTwoFirst[0] = AnalyseData.bOneFirst[0];
              AnalyseData.bOneFirst[0] = AnalyseData.bOneFirst[1];
              AnalyseData.bOneFirst[1] = AnalyseData.bOneFirst[2];
              AnalyseData.bOneFirst[2] = AnalyseData.bOneFirst[3];
              AnalyseData.bTwoCount = 1;
            }
            return;

           case 13:
            12 == AnalyseData.bOneCount && (AnalyseData.bOneFirst[AnalyseData.bOneCount++] = 0);
            2 == AnalyseData.bFourCount && 1 == AnalyseData.bThreeCount && (AnalyseData.bFourFirst[AnalyseData.bFourCount++] = AnalyseData.bThreeFirst[--AnalyseData.bThreeCount]);
            3 == AnalyseData.bThreeCount && 1 == AnalyseData.bTwoCount && 1 == AnalyseData.bOneCount && (AnalyseData.bThreeFirst[AnalyseData.bThreeCount++] = AnalyseData.bTwoFirst[--AnalyseData.bTwoCount]);
            6 == AnalyseData.bTwoCount && (AnalyseData.bThreeFirst[AnalyseData.bThreeCount++] = AnalyseData.bTwoFirst[--AnalyseData.bTwoCount]);
            4 == AnalyseData.bTwoCount && 1 == AnalyseData.bThreeCount && (AnalyseData.bTwoFirst[AnalyseData.bTwoCount++] = AnalyseData.bOneFirst[--AnalyseData.bOneCount]);
            3 == AnalyseData.bTwoCount && 2 == AnalyseData.bThreeCount && (AnalyseData.bFourFirst[AnalyseData.bFourCount++] = AnalyseData.bThreeFirst[--AnalyseData.bThreeCount]);
            2 == AnalyseData.bTwoCount && 1 == AnalyseData.bFourCount && 1 == AnalyseData.bThreeCount && (AnalyseData.bTwoFirst[AnalyseData.bTwoCount++] = AnalyseData.bOneFirst[--AnalyseData.bOneCount]);
            2 == AnalyseData.bTwoCount && 2 == AnalyseData.bFourCount && (AnalyseData.bThreeFirst[AnalyseData.bThreeCount++] = AnalyseData.bTwoFirst[--AnalyseData.bTwoCount]);
            2 == AnalyseData.bFourCount && 1 == AnalyseData.bThreeCount && (AnalyseData.bTwoFirst[AnalyseData.bTwoCount++] = AnalyseData.bOneFirst[--AnalyseData.bOneCount]);
            5 == AnalyseData.bTwoCount && 2 == AnalyseData.bOneCount && (AnalyseData.bTwoFirst[AnalyseData.bTwoCount++] = AnalyseData.bOneFirst[--AnalyseData.bOneCount]);
            1 == AnalyseData.bTwoCount && 2 == AnalyseData.bFourCount && (AnalyseData.bTwoFirst[AnalyseData.bTwoCount++] = AnalyseData.bOneFirst[--AnalyseData.bOneCount]);
          }
        } else if (this.GetCardLogicValue(bCardData[0]) == SssDef_1.SssDef.CARD_DW && this.GetCardLogicValue(bCardData[1]) == SssDef_1.SssDef.CARD_XW) {
          var bLogicValue = this.GetCardLogicValue(bCardData[2]);
          var bCardColor = this.GetCardColor(bCardData[2]);
          bFirstCardIndex = 2;
          3 == bCardCount && AnalyseData.bOneCount++;
          for (var i = 3; i < bCardCount; i++) {
            bCardValueTemp = this.GetCardLogicValue(bCardData[i]);
            bCardValueTemp == bLogicValue && bSameCount++;
            if (bCardValueTemp != bLogicValue || i == bCardCount - 1) switch (bSameCount) {
             case 1:
              break;

             case 2:
              AnalyseData.bTwoFirst[AnalyseData.bTwoCount] = bFirstCardIndex;
              AnalyseData.bTwoCount++;
              break;

             case 3:
              AnalyseData.bThreeFirst[AnalyseData.bThreeCount] = bFirstCardIndex;
              AnalyseData.bThreeCount++;
              break;

             case 4:
              AnalyseData.bFourFirst[AnalyseData.bFourCount] = bFirstCardIndex;
              AnalyseData.bFourCount++;
            }
            if (bCardValueTemp != bLogicValue) {
              if (1 == bSameCount) if (i != bCardCount - 1) {
                AnalyseData.bOneFirst[AnalyseData.bOneCount] = bFirstCardIndex;
                AnalyseData.bOneCount++;
              } else {
                AnalyseData.bOneFirst[AnalyseData.bOneCount] = bFirstCardIndex;
                AnalyseData.bOneCount++;
                AnalyseData.bOneFirst[AnalyseData.bOneCount] = i;
                AnalyseData.bOneCount++;
              } else if (i == bCardCount - 1) {
                AnalyseData.bOneFirst[AnalyseData.bOneCount] = i;
                AnalyseData.bOneCount++;
              }
              bSameCount = 1;
              bLogicValue = bCardValueTemp;
              bFirstCardIndex = i;
            }
            this.GetCardColor(bCardData[i]) != bCardColor ? bSameColorCount = 1 : ++bSameColorCount;
          }
          AnalyseData.bStraight = bCardCount - 2 == bSameColorCount ? this.btrue : this.bfalse;
          switch (bCardCount) {
           case 3:
            if (1 == AnalyseData.bOneCount) {
              AnalyseData.bOneCount = 0;
              AnalyseData.bThreeCount = 1;
              AnalyseData.bThreeFirst[0] = AnalyseData.bOneFirst[0];
            }
            return;

           case 5:
            if (1 == AnalyseData.bThreeCount) {
              AnalyseData.bThreeCount = 0;
              AnalyseData.bFiveCount = 1;
              AnalyseData.bFiveFirst[0] = AnalyseData.bThreeFirst[0];
            } else if (1 == AnalyseData.bTwoCount && 1 == AnalyseData.bOneCount) {
              AnalyseData.bTwoCount = 0;
              AnalyseData.bFourCount = 1;
              AnalyseData.bFourFirst[0] = AnalyseData.bTwoFirst[0];
            } else if (3 == AnalyseData.bOneCount) {
              AnalyseData.bOneCount = 2;
              AnalyseData.bThreeCount = 1;
              AnalyseData.bThreeFirst[0] = AnalyseData.bOneFirst[0];
              AnalyseData.bOneFirst[0] = AnalyseData.bOneFirst[1];
              AnalyseData.bOneFirst[1] = AnalyseData.bOneFirst[2];
              AnalyseData.bOneFirst[2] = AnalyseData.bOneFirst[3];
            }
            return;

           case 13:
            if (11 == AnalyseData.bOneCount) {
              AnalyseData.bOneFirst[AnalyseData.bOneCount++] = 0;
              AnalyseData.bOneFirst[AnalyseData.bOneCount++] = 1;
            }
            2 == AnalyseData.bFourCount && 1 == AnalyseData.bThreeCount && (AnalyseData.bFourFirst[AnalyseData.bFourCount++] = AnalyseData.bThreeFirst[--AnalyseData.bThreeCount]);
            2 == AnalyseData.bFourCount && 1 == AnalyseData.bTwoCount && (AnalyseData.bFourFirst[AnalyseData.bFourCount++] = AnalyseData.bTwoFirst[--AnalyseData.bTwoCount]);
            if (1 == AnalyseData.bFourCount && 2 == AnalyseData.bThreeCount) {
              AnalyseData.bFourFirst[AnalyseData.bFourCount++] = AnalyseData.bThreeFirst[--AnalyseData.bThreeCount];
              AnalyseData.bFourFirst[AnalyseData.bFourCount++] = AnalyseData.bThreeFirst[--AnalyseData.bThreeCount];
            }
            3 == AnalyseData.bThreeCount && 1 == AnalyseData.bTwoCount && (AnalyseData.bThreeFirst[AnalyseData.bThreeCount++] = AnalyseData.bTwoFirst[--AnalyseData.bTwoCount]);
            3 == AnalyseData.bThreeCount && 2 == AnalyseData.bOneCount && (AnalyseData.bThreeFirst[AnalyseData.bThreeCount++] = AnalyseData.bOneFirst[--AnalyseData.bOneCount]);
            if (2 == AnalyseData.bThreeCount && 2 == AnalyseData.bTwoCount) {
              AnalyseData.bThreeFirst[AnalyseData.bThreeCount++] = AnalyseData.bTwoFirst[--AnalyseData.bTwoCount];
              AnalyseData.bThreeFirst[AnalyseData.bThreeCount++] = AnalyseData.bTwoFirst[--AnalyseData.bTwoCount];
            }
            5 == AnalyseData.bTwoCount && 1 == AnalyseData.bOneCount && (AnalyseData.bThreeFirst[AnalyseData.bThreeCount++] = AnalyseData.bOneFirst[--AnalyseData.bOneCount]);
            4 == AnalyseData.bTwoCount && 1 == AnalyseData.bThreeCount && (AnalyseData.bTwoFirst[AnalyseData.bTwoCount++] = 0);
            if (3 == AnalyseData.bTwoCount && 1 == AnalyseData.bThreeCount) {
              AnalyseData.bTwoFirst[AnalyseData.bTwoCount++] = AnalyseData.bOneFirst[--AnalyseData.bOneCount];
              AnalyseData.bTwoFirst[AnalyseData.bTwoCount++] = AnalyseData.bOneFirst[--AnalyseData.bOneCount];
            }
            if (2 == AnalyseData.bTwoCount && 2 == AnalyseData.bThreeCount) {
              AnalyseData.bTwoFirst[AnalyseData.bTwoCount++] = AnalyseData.bOneFirst[--AnalyseData.bOneCount];
              AnalyseData.bFourFirst[AnalyseData.bFourCount++] = AnalyseData.bThreeFirst[--AnalyseData.bThreeCount];
            }
            2 == AnalyseData.bTwoCount && 1 == AnalyseData.bFourCount && 1 == AnalyseData.bThreeCount && (AnalyseData.bTwoFirst[AnalyseData.bTwoCount++] = 0);
            (3 == AnalyseData.bTwoCount && 1 == AnalyseData.bFourCount || 1 == AnalyseData.bTwoCount && 2 == AnalyseData.bFourCount) && (AnalyseData.bThreeFirst[AnalyseData.bThreeCount++] = AnalyseData.bOneFirst[--AnalyseData.bOneCount]);
            if (4 == AnalyseData.bTwoCount && 3 == AnalyseData.bOneCount || 2 == AnalyseData.bFourCount && 3 == AnalyseData.bOneCount) {
              AnalyseData.bTwoFirst[AnalyseData.bTwoCount++] = AnalyseData.bOneFirst[--AnalyseData.bOneCount];
              AnalyseData.bTwoFirst[AnalyseData.bTwoCount++] = AnalyseData.bOneFirst[--AnalyseData.bOneCount];
            }
          }
        } else {
          var bLogicValue = this.GetCardLogicValue(bCardData[0]);
          var bCardColor = this.GetCardColor(bCardData[0]);
          for (var i = 1; i < bCardCount; i++) {
            bCardValueTemp = this.GetCardLogicValue(bCardData[i]);
            bCardValueTemp == bLogicValue && bSameCount++;
            if (bCardValueTemp != bLogicValue || i == bCardCount - 1) switch (bSameCount) {
             case 1:
              break;

             case 2:
              AnalyseData.bTwoFirst[AnalyseData.bTwoCount] = bFirstCardIndex;
              AnalyseData.bTwoCount++;
              break;

             case 3:
              AnalyseData.bThreeFirst[AnalyseData.bThreeCount] = bFirstCardIndex;
              AnalyseData.bThreeCount++;
              break;

             case 4:
              AnalyseData.bFourFirst[AnalyseData.bFourCount] = bFirstCardIndex;
              AnalyseData.bFourCount++;
              break;

             case 5:
              AnalyseData.bFiveFirst[AnalyseData.bFiveCount] = bFirstCardIndex;
              AnalyseData.bFiveCount++;
            }
            if (bCardValueTemp != bLogicValue) {
              if (1 == bSameCount) if (i != bCardCount - 1) {
                AnalyseData.bOneFirst[AnalyseData.bOneCount] = bFirstCardIndex;
                AnalyseData.bOneCount++;
              } else {
                AnalyseData.bOneFirst[AnalyseData.bOneCount] = bFirstCardIndex;
                AnalyseData.bOneCount++;
                AnalyseData.bOneFirst[AnalyseData.bOneCount] = i;
                AnalyseData.bOneCount++;
              } else if (i == bCardCount - 1) {
                AnalyseData.bOneFirst[AnalyseData.bOneCount] = i;
                AnalyseData.bOneCount++;
              }
              bSameCount = 1;
              bLogicValue = bCardValueTemp;
              bFirstCardIndex = i;
            }
            this.GetCardColor(bCardData[i]) != bCardColor ? bSameColorCount = 1 : ++bSameColorCount;
          }
          AnalyseData.bStraight = bCardCount == bSameColorCount ? this.btrue : this.bfalse;
        }
        return;
      };
      SssCards.prototype.AnalysebCardData = function(cbCardData, cbCardCount, AnalyseResult) {
        SssLib_1.SssLib.ZeroMemory(AnalyseResult, SssLib_1.SssLib.sizeof(AnalyseResult));
        for (var i = 0; i < cbCardCount; i++) {
          var cbSameCount = 1, cbCardValueTemp = 0;
          var cbLogicValue = this.GetCardLogicValue(cbCardData[i]);
          for (var j = i + 1; j < cbCardCount; j++) {
            if (this.GetCardLogicValue(cbCardData[j]) != cbLogicValue) break;
            cbSameCount++;
          }
          switch (cbSameCount) {
           case 1:
            var cbIndex = AnalyseResult.cbSignedCount++;
            AnalyseResult.cbSignedCardData[cbIndex * cbSameCount] = cbCardData[i];
            break;

           case 2:
            var cbIndex = AnalyseResult.cbDoubleCount++;
            AnalyseResult.cbDoubleCardData[cbIndex * cbSameCount] = cbCardData[i];
            AnalyseResult.cbDoubleCardData[cbIndex * cbSameCount + 1] = cbCardData[i + 1];
            break;

           case 3:
            var cbIndex = AnalyseResult.cbThreeCount++;
            AnalyseResult.cbThreeCardData[cbIndex * cbSameCount] = cbCardData[i];
            AnalyseResult.cbThreeCardData[cbIndex * cbSameCount + 1] = cbCardData[i + 1];
            AnalyseResult.cbThreeCardData[cbIndex * cbSameCount + 2] = cbCardData[i + 2];
            break;

           case 4:
            var cbIndex = AnalyseResult.cbFourCount++;
            AnalyseResult.cbFourCardData[cbIndex * cbSameCount] = cbCardData[i];
            AnalyseResult.cbFourCardData[cbIndex * cbSameCount + 1] = cbCardData[i + 1];
            AnalyseResult.cbFourCardData[cbIndex * cbSameCount + 2] = cbCardData[i + 2];
            AnalyseResult.cbFourCardData[cbIndex * cbSameCount + 3] = cbCardData[i + 3];
          }
          i += cbSameCount - 1;
        }
        return;
      };
      SssCards.prototype.GetType = function(bCardData, bCardCount) {
        var Type = new tagAnalyseType();
        SssLib_1.SssLib.ZeroMemory(Type, SssLib_1.SssLib.sizeof(Type));
        if (0 == bCardCount) {
          SssLib_1.SssLib.ZeroMemory(Type, SssLib_1.SssLib.sizeof(Type));
          return Type;
        }
        var CardData = SssLib_1.SssLib.oneDArr(13);
        SssLib_1.SssLib.CopyMemory(CardData, bCardData, bCardCount);
        this.SortCardList(CardData, bCardCount, this.enDescend);
        var Index = SssLib_1.SssLib.oneDArr(13);
        var Number = 0;
        var SameValueCount = 1;
        var Num = SssLib_1.SssLib.oneDArr(9);
        if (this.GetCardLogicValue(CardData[0]) >= SssDef_1.SssDef.CARD_XW && this.GetCardLogicValue(CardData[1]) < SssDef_1.SssDef.CARD_XW) {
          var bLogicValue = this.GetCardLogicValue(CardData[1]);
          Index[Number++] = 1;
          for (var i = 2; i < bCardCount; i++) {
            if (bLogicValue == this.GetCardLogicValue(CardData[i])) {
              SameValueCount++;
              Index[Number++] = i;
            }
            if (bLogicValue != this.GetCardLogicValue(CardData[i]) || i == bCardCount - 1) {
              if (1 == SameValueCount) {
                Type.bOnePare = this.btrue;
                Type.cbOnePare[Num[0]++] = Index[SameValueCount - 1];
                Type.cbOnePare[Num[0]++] = 0;
                Type.btOnePare++;
              } else if (2 == SameValueCount) {
                Type.bOnePare = this.btrue;
                Type.cbOnePare[Num[0]++] = Index[SameValueCount - 2];
                Type.cbOnePare[Num[0]++] = Index[SameValueCount - 1];
                Type.btOnePare++;
                Type.bThreeSame = this.btrue;
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 2];
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 1];
                Type.cbThreeSame[Num[2]++] = 0;
                Type.btThreeSame++;
              } else if (3 == SameValueCount) {
                Type.bOnePare = this.btrue;
                Type.cbOnePare[Num[0]++] = Index[SameValueCount - 3];
                Type.cbOnePare[Num[0]++] = Index[SameValueCount - 2];
                Type.bThreeSame = this.btrue;
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 3];
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 2];
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 1];
                Type.btThreeSame++;
                Type.bFourSame = this.btrue;
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 3];
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 2];
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 1];
                Type.cbFourSame[Num[6]++] = 0;
                Type.btFourSame++;
              } else if (SameValueCount >= 4) {
                Type.bOnePare = this.btrue;
                Type.cbOnePare[Num[0]++] = Index[SameValueCount - 4];
                Type.cbOnePare[Num[0]++] = Index[SameValueCount - 3];
                Type.btOnePare++;
                Type.bThreeSame = this.btrue;
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 4];
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 3];
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 2];
                Type.btThreeSame++;
                Type.bFourSame = this.btrue;
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 4];
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 3];
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 2];
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 1];
                Type.btFourSame++;
                Type.bFiveSame = this.btrue;
                Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 4];
                Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 3];
                Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 2];
                Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 1];
                Type.cbFiveSame[Num[8]++] = 0;
                Type.btFiveSame++;
                if (SameValueCount > 4) {
                  Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 5];
                  Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 4];
                  Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 3];
                  Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 2];
                  Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 1];
                  Type.btFiveSame++;
                }
              }
              Number = 0;
              SssLib_1.SssLib.ZeroMemory(Index, SssLib_1.SssLib.sizeof(Index));
              i < bCardCount - 1 ? Index[Number++] = i : Type.cbOnePare[Num[0]++] = i++;
              SameValueCount = 1;
              bLogicValue = this.GetCardLogicValue(CardData[i]);
            }
          }
        } else if (this.GetCardLogicValue(CardData[0]) == SssDef_1.SssDef.CARD_DW && this.GetCardLogicValue(CardData[1]) == SssDef_1.SssDef.CARD_XW) {
          var bLogicValue = this.GetCardLogicValue(CardData[2]);
          Index[Number++] = 2;
          for (var i = 3; i < bCardCount; i++) {
            if (bLogicValue == this.GetCardLogicValue(CardData[i])) {
              SameValueCount++;
              Index[Number++] = i;
            }
            if (bLogicValue != this.GetCardLogicValue(CardData[i]) || i == bCardCount - 1) {
              if (1 == SameValueCount) {
                Type.bOnePare = this.btrue;
                Type.cbOnePare[Num[0]++] = Index[SameValueCount - 1];
                Type.cbOnePare[Num[0]++] = 0;
                Type.btOnePare++;
              } else if (2 == SameValueCount) {
                Type.bOnePare = this.btrue;
                Type.cbOnePare[Num[0]++] = Index[SameValueCount - 2];
                Type.cbOnePare[Num[0]++] = Index[SameValueCount - 1];
                Type.btOnePare++;
                Type.bThreeSame = this.btrue;
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 2];
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 1];
                Type.cbThreeSame[Num[2]++] = 0;
                Type.btThreeSame++;
                Type.bFourSame = this.btrue;
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 2];
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 1];
                Type.cbFourSame[Num[6]++] = 0;
                Type.cbFourSame[Num[6]++] = 1;
                Type.btFourSame++;
              } else if (3 == SameValueCount) {
                Type.bOnePare = this.btrue;
                Type.cbOnePare[Num[0]++] = Index[SameValueCount - 3];
                Type.cbOnePare[Num[0]++] = Index[SameValueCount - 2];
                Type.btOnePare++;
                Type.bThreeSame = this.btrue;
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 3];
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 2];
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 1];
                Type.btThreeSame++;
                Type.bFourSame = this.btrue;
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 3];
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 2];
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 1];
                Type.cbFourSame[Num[6]++] = 0;
                Type.btFourSame++;
                Type.bFiveSame = this.btrue;
                Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 3];
                Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 2];
                Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 1];
                Type.cbFiveSame[Num[8]++] = 0;
                Type.cbFiveSame[Num[8]++] = 1;
                Type.btFiveSame++;
              } else if (4 == SameValueCount) {
                Type.bOnePare = this.btrue;
                Type.cbOnePare[Num[0]++] = Index[SameValueCount - 4];
                Type.cbOnePare[Num[0]++] = Index[SameValueCount - 3];
                Type.btOnePare++;
                Type.bThreeSame = this.btrue;
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 4];
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 3];
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 2];
                Type.btThreeSame++;
                Type.bFourSame = this.btrue;
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 4];
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 3];
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 2];
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 1];
                Type.btFourSame++;
                Type.bFiveSame = this.btrue;
                Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 4];
                Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 3];
                Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 2];
                Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 1];
                Type.cbFiveSame[Num[8]++] = 0;
                Type.btFiveSame++;
              } else if (SameValueCount > 4) {
                Type.bOnePare = this.btrue;
                Type.cbOnePare[Num[0]++] = Index[SameValueCount - 4];
                Type.cbOnePare[Num[0]++] = Index[SameValueCount - 3];
                Type.btOnePare++;
                Type.bThreeSame = this.btrue;
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 4];
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 3];
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 2];
                Type.btThreeSame++;
                Type.bFourSame = this.btrue;
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 4];
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 3];
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 2];
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 1];
                Type.btFourSame++;
                Type.bFiveSame = this.btrue;
                Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 5];
                Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 4];
                Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 3];
                Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 2];
                Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 1];
                Type.btFiveSame++;
                Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 4];
                Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 3];
                Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 2];
                Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 1];
                Type.cbFiveSame[Num[8]++] = 0;
                Type.btFiveSame++;
              }
              Number = 0;
              SssLib_1.SssLib.ZeroMemory(Index, SssLib_1.SssLib.sizeof(Index));
              i < bCardCount - 1 ? Index[Number++] = i : Type.cbOnePare[Num[0]++] = i++;
              SameValueCount = 1;
              bLogicValue = this.GetCardLogicValue(CardData[i]);
            }
          }
        } else {
          var bLogicValue = this.GetCardLogicValue(CardData[0]);
          Index[Number++] = 0;
          for (var i = 1; i < bCardCount; i++) {
            if (bLogicValue == this.GetCardLogicValue(CardData[i])) {
              SameValueCount++;
              Index[Number++] = i;
            }
            if (bLogicValue != this.GetCardLogicValue(CardData[i]) || i == bCardCount - 1) {
              if (1 == SameValueCount) ; else if (2 == SameValueCount) {
                Type.bOnePare = this.btrue;
                Type.cbOnePare[Num[0]++] = Index[SameValueCount - 2];
                Type.cbOnePare[Num[0]++] = Index[SameValueCount - 1];
                Type.btOnePare++;
              } else if (3 == SameValueCount) {
                Type.bOnePare = this.btrue;
                Type.cbOnePare[Num[0]++] = Index[SameValueCount - 3];
                Type.cbOnePare[Num[0]++] = Index[SameValueCount - 2];
                Type.bThreeSame = this.btrue;
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 3];
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 2];
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 1];
                Type.btThreeSame++;
              } else if (4 == SameValueCount) {
                Type.bOnePare = this.btrue;
                Type.cbOnePare[Num[0]++] = Index[SameValueCount - 4];
                Type.cbOnePare[Num[0]++] = Index[SameValueCount - 3];
                Type.btOnePare++;
                Type.bThreeSame = this.btrue;
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 4];
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 3];
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 2];
                Type.btThreeSame++;
                Type.bFourSame = this.btrue;
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 4];
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 3];
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 2];
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 1];
                Type.btFourSame++;
              } else if (SameValueCount > 4) {
                Type.bOnePare = this.btrue;
                Type.cbOnePare[Num[0]++] = Index[SameValueCount - 5];
                Type.cbOnePare[Num[0]++] = Index[SameValueCount - 4];
                Type.btOnePare++;
                Type.bThreeSame = this.btrue;
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 5];
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 4];
                Type.cbThreeSame[Num[2]++] = Index[SameValueCount - 3];
                Type.btThreeSame++;
                Type.bFourSame = this.btrue;
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 5];
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 4];
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 3];
                Type.cbFourSame[Num[6]++] = Index[SameValueCount - 2];
                Type.btFourSame++;
                Type.bFiveSame = this.btrue;
                Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 5];
                Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 4];
                Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 3];
                Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 2];
                Type.cbFiveSame[Num[8]++] = Index[SameValueCount - 1];
                Type.btFiveSame++;
              }
              Number = 0;
              SssLib_1.SssLib.ZeroMemory(Index, SssLib_1.SssLib.sizeof(Index));
              i < bCardCount - 1 ? Index[Number++] = i : Type.cbOnePare[Num[0]++] = i++;
              SameValueCount = 1;
              bLogicValue = this.GetCardLogicValue(CardData[i]);
            }
          }
        }
        var OnePareCount = parseInt(JSON.stringify(Num[0] / 2));
        var ThreeSameCount = parseInt(JSON.stringify(Num[2] / 3));
        if (OnePareCount >= 2) {
          Type.bTwoPare = this.bfalse;
          for (var i = 0; i < OnePareCount; i++) for (var j = i + 1; j < OnePareCount; j++) {
            if (CardData[Type.cbOnePare[2 * i]] == CardData[Type.cbOnePare[2 * j]] || CardData[Type.cbOnePare[2 * i + 1]] == CardData[Type.cbOnePare[2 * j]] || CardData[Type.cbOnePare[2 * i + 1]] == CardData[Type.cbOnePare[2 * j + 1]] || CardData[Type.cbOnePare[2 * j + 1]] == CardData[Type.cbOnePare[2 * i]]) continue;
            Type.cbTwoPare[Num[1]++] = Type.cbOnePare[2 * i];
            Type.cbTwoPare[Num[1]++] = Type.cbOnePare[2 * i + 1];
            Type.cbTwoPare[Num[1]++] = Type.cbOnePare[2 * j];
            Type.cbTwoPare[Num[1]++] = Type.cbOnePare[2 * j + 1];
            Type.btTwoPare++;
            Type.bTwoPare = this.btrue;
          }
        }
        if (OnePareCount > 0 && ThreeSameCount > 0) for (var i = 0; i < ThreeSameCount; i++) for (var j = 0; j < OnePareCount; j++) {
          if (bCardData[Type.cbThreeSame[3 * i]] == bCardData[Type.cbOnePare[2 * j]] || bCardData[Type.cbThreeSame[3 * i]] == bCardData[Type.cbOnePare[2 * j + 1]] || bCardData[Type.cbThreeSame[3 * i + 1]] == bCardData[Type.cbOnePare[2 * j]] || bCardData[Type.cbThreeSame[3 * i + 1]] == bCardData[Type.cbOnePare[2 * j + 1]] || bCardData[Type.cbThreeSame[3 * i + 2]] == bCardData[Type.cbOnePare[2 * j]] || bCardData[Type.cbThreeSame[3 * i + 2]] == bCardData[Type.cbOnePare[2 * j + 1]] || bCardData[Type.cbOnePare[2 * j]] == bCardData[Type.cbThreeSame[3 * i + 2]]) continue;
          Type.bGourd = this.btrue;
          Type.cbGourd[Num[5]++] = Type.cbThreeSame[3 * i];
          Type.cbGourd[Num[5]++] = Type.cbThreeSame[3 * i + 1];
          Type.cbGourd[Num[5]++] = Type.cbThreeSame[3 * i + 2];
          Type.cbGourd[Num[5]++] = Type.cbOnePare[2 * j];
          Type.cbGourd[Num[5]++] = Type.cbOnePare[2 * j + 1];
          Type.btGourd++;
        }
        Number = 0;
        SssLib_1.SssLib.ZeroMemory(Index, SssLib_1.SssLib.sizeof(Index));
        var Straight = 1;
        var bStraight = this.GetCardLogicValue(CardData[0]);
        if (this.GetCardLogicValue(CardData[0]) >= SssDef_1.SssDef.CARD_XW && this.GetCardLogicValue(CardData[1]) < SssDef_1.SssDef.CARD_XW) {
          bStraight = this.GetCardLogicValue(CardData[1]);
          Index[Number++] = 1;
          var bUsedW = this.bfalse;
          for (var i = 2; i < bCardCount; i++) {
            if (bStraight == this.GetCardLogicValue(CardData[i]) + 1) {
              Straight++;
              Index[Number++] = i;
              bStraight = this.GetCardLogicValue(CardData[i]);
            } else if (bStraight == this.GetCardLogicValue(CardData[i]) + 2 && bUsedW == this.bfalse) {
              bUsedW = this.btrue;
              Straight++;
              Index[Number++] = 0;
              Straight++;
              Index[Number++] = i;
              bStraight = this.GetCardLogicValue(CardData[i]);
            }
            if (bStraight > this.GetCardLogicValue(CardData[i]) + 1 || i == bCardCount - 1) {
              if (4 == Straight && bUsedW == this.bfalse) {
                Straight++;
                Index[Number++] = 0;
              }
              if (Straight >= 5) {
                Type.bStraight = this.btrue;
                for (var j = 0; j < Straight; j++) {
                  if (!(Straight - j >= 5)) break;
                  if (bCardData[Index[j]] == bCardData[Index[j + 1]] || bCardData[Index[j]] == bCardData[Index[j + 2]] || bCardData[Index[j]] == bCardData[Index[j + 3]] || bCardData[Index[j]] == bCardData[Index[j + 4]] || bCardData[Index[j + 1]] == bCardData[Index[j + 2]] || bCardData[Index[j + 1]] == bCardData[Index[j + 3]] || bCardData[Index[j + 1]] == bCardData[Index[j + 4]] || bCardData[Index[j + 2]] == bCardData[Index[j + 3]] || bCardData[Index[j + 2]] == bCardData[Index[j + 4]] || bCardData[Index[j + 3]] == bCardData[Index[j + 4]]) continue;
                  Type.cbStraight[Num[3]++] = Index[j];
                  Type.cbStraight[Num[3]++] = Index[j + 1];
                  Type.cbStraight[Num[3]++] = Index[j + 2];
                  Type.cbStraight[Num[3]++] = Index[j + 3];
                  Type.cbStraight[Num[3]++] = Index[j + 4];
                  Type.btStraight++;
                  for (var k = j; k < j + 5; k++) for (var m = 0; m < bCardCount; m++) if (this.GetCardLogicValue(CardData[Index[k]]) == this.GetCardLogicValue(CardData[m]) && this.GetCardColor(CardData[Index[k]]) != this.GetCardColor(CardData[m])) {
                    for (var n = j; n < j + 5; n++) Type.cbStraight[Num[3]++] = n == k ? m : Index[n];
                    Type.btStraight++;
                  }
                }
              }
              if (bCardCount - i < 5) break;
              bStraight = this.GetCardLogicValue(CardData[i]);
              Straight = 1;
              Number = 0;
              SssLib_1.SssLib.ZeroMemory(Index, SssLib_1.SssLib.sizeof(Index));
              Index[Number++] = i;
              bUsedW = this.bfalse;
            }
          }
          if (2 == this.GetCardLogicValue(CardData[bCardCount - 1])) {
            Number = 0;
            Straight = 2;
            bStraight = this.GetCardLogicValue(CardData[1]);
            SssLib_1.SssLib.ZeroMemory(Index, SssLib_1.SssLib.sizeof(Index));
            var bFind = this.bfalse;
            if (14 == bStraight) {
              Index[Number++] = 1;
              bStraight = this.GetCardLogicValue(CardData[bCardCount - 1]);
              Index[Number++] = bCardCount - 1;
              bUsedW = this.bfalse;
              for (var i = bCardCount - 2; i >= 0; i--) {
                if (bStraight == this.GetCardLogicValue(CardData[i]) - 1) {
                  Straight++;
                  Index[Number++] = i;
                  bStraight = this.GetCardLogicValue(CardData[i]);
                  continue;
                }
                if (bStraight == this.GetCardLogicValue(CardData[i]) - 2 && this.bfalse == bUsedW) {
                  Straight++;
                  Index[Number++] = 0;
                  Straight++;
                  Index[Number++] = i;
                  bStraight = this.GetCardLogicValue(CardData[i]);
                  bUsedW = this.btrue;
                }
              }
              if (4 == Straight && bUsedW == this.bfalse) {
                Straight++;
                Index[Number++] = 0;
              }
            } else {
              Index[Number++] = 0;
              bStraight = this.GetCardLogicValue(CardData[bCardCount - 1]);
              Index[Number++] = bCardCount - 1;
              for (var i = bCardCount - 2; i >= 0; i--) if (bStraight == this.GetCardLogicValue(CardData[i]) - 1) {
                Straight++;
                Index[Number++] = i;
                bStraight = this.GetCardLogicValue(CardData[i]);
              }
            }
            if (Straight >= 5) {
              Type.bStraight = this.btrue;
              for (var j = 0; j < 5; j++) Type.cbStraight[Num[3]++] = Index[j];
              Type.btStraight++;
              for (var k = 0; k < 5; k++) for (var m = 0; m < bCardCount; m++) if (this.GetCardLogicValue(CardData[Index[k]]) == this.GetCardLogicValue(CardData[m]) && this.GetCardColor(CardData[Index[k]]) != this.GetCardColor(CardData[m])) {
                for (var n = 0; n < 5; n++) Type.cbStraight[Num[3]++] = n == k ? m : Index[n];
                Type.btStraight++;
              }
            }
          }
          if (3 == this.GetCardLogicValue(CardData[bCardCount - 1]) && 14 == this.GetCardLogicValue(CardData[1])) {
            Number = 0;
            Straight = 3;
            SssLib_1.SssLib.ZeroMemory(Index, SssLib_1.SssLib.sizeof(Index));
            Index[Number++] = 0;
            Index[Number++] = 1;
            bStraight = this.GetCardLogicValue(CardData[bCardCount - 1]);
            Index[Number++] = bCardCount - 1;
            for (var i = bCardCount - 2; i >= 0; i--) if (bStraight == this.GetCardLogicValue(CardData[i]) - 1) {
              Straight++;
              Index[Number++] = i;
              bStraight = this.GetCardLogicValue(CardData[i]);
            }
            if (Straight >= 5) {
              Type.bStraight = this.btrue;
              for (var j = 0; j < 5; j++) Type.cbStraight[Num[3]++] = Index[j];
              Type.btStraight++;
              for (var k = 0; k < 5; k++) for (var m = 0; m < bCardCount; m++) if (this.GetCardLogicValue(CardData[Index[k]]) == this.GetCardLogicValue(CardData[m]) && this.GetCardColor(CardData[Index[k]]) != this.GetCardColor(CardData[m])) {
                for (var n = 0; n < 5; n++) Type.cbStraight[Num[3]++] = n == k ? m : Index[n];
                Type.btStraight++;
              }
            }
          }
        } else if (this.GetCardLogicValue(CardData[0]) == SssDef_1.SssDef.CARD_DW && this.GetCardLogicValue(CardData[1]) == SssDef_1.SssDef.CARD_XW) {
          bStraight = this.GetCardLogicValue(CardData[2]);
          Index[Number++] = 2;
          var bUsedDW = this.bfalse;
          var bUsedXW = this.bfalse;
          for (var i = 3; i < bCardCount; i++) {
            if (bStraight == this.GetCardLogicValue(CardData[i]) + 1) {
              Straight++;
              Index[Number++] = i;
              bStraight = this.GetCardLogicValue(CardData[i]);
            } else if (bStraight != this.GetCardLogicValue(CardData[i]) + 2 || bUsedDW != this.bfalse && bUsedXW != this.bfalse) {
              if (bStraight == this.GetCardLogicValue(CardData[i] + 3) && bUsedDW == this.bfalse && bUsedXW == this.bfalse) {
                Straight++;
                Index[Number++] = 0;
                Straight++;
                Index[Number++] = 1;
                Straight++;
                Index[Number++] = i;
                bStraight = this.GetCardLogicValue(CardData[i]);
                bUsedDW = this.btrue;
                bUsedXW = this.btrue;
              }
            } else {
              if (bUsedDW == this.bfalse) {
                Straight++;
                Index[Number++] = 0;
                bUsedDW = this.btrue;
              } else if (bUsedXW == this.bfalse) {
                Straight++;
                Index[Number++] = 1;
                bUsedXW = this.btrue;
              }
              Straight++;
              Index[Number++] = i;
              bStraight = this.GetCardLogicValue(CardData[i]);
            }
            if (bStraight > this.GetCardLogicValue(CardData[i]) + 1 || i == bCardCount - 1) {
              if (4 == Straight && (bUsedDW == this.bfalse || bUsedXW == this.bfalse)) if (bUsedDW == this.bfalse) {
                Straight++;
                Index[Number++] = 0;
                bUsedDW = this.btrue;
              } else if (bUsedXW == this.bfalse) {
                Straight++;
                Index[Number++] = 1;
                bUsedXW = this.btrue;
              }
              if (3 == Straight && bUsedDW == this.bfalse && bUsedXW == this.bfalse) {
                Straight++;
                Index[Number++] = 0;
                Straight++;
                Index[Number++] = 1;
              }
              if (Straight >= 5) {
                Type.bStraight = this.btrue;
                for (var j = 0; j < Straight; j++) {
                  if (!(Straight - j >= 5)) break;
                  if (bCardData[Index[j]] == bCardData[Index[j + 1]] || bCardData[Index[j]] == bCardData[Index[j + 2]] || bCardData[Index[j]] == bCardData[Index[j + 3]] || bCardData[Index[j]] == bCardData[Index[j + 4]] || bCardData[Index[j + 1]] == bCardData[Index[j + 2]] || bCardData[Index[j + 1]] == bCardData[Index[j + 3]] || bCardData[Index[j + 1]] == bCardData[Index[j + 4]] || bCardData[Index[j + 2]] == bCardData[Index[j + 3]] || bCardData[Index[j + 2]] == bCardData[Index[j + 4]] || bCardData[Index[j + 3]] == bCardData[Index[j + 4]]) continue;
                  Type.cbStraight[Num[3]++] = Index[j];
                  Type.cbStraight[Num[3]++] = Index[j + 1];
                  Type.cbStraight[Num[3]++] = Index[j + 2];
                  Type.cbStraight[Num[3]++] = Index[j + 3];
                  Type.cbStraight[Num[3]++] = Index[j + 4];
                  Type.btStraight++;
                  for (var k = j; k < j + 5; k++) for (var m = 0; m < bCardCount; m++) if (this.GetCardLogicValue(CardData[Index[k]]) == this.GetCardLogicValue(CardData[m]) && this.GetCardColor(CardData[Index[k]]) != this.GetCardColor(CardData[m])) {
                    for (var n = j; n < j + 5; n++) Type.cbStraight[Num[3]++] = n == k ? m : Index[n];
                    Type.btStraight++;
                  }
                }
              }
              if (bCardCount - i < 5) break;
              bStraight = this.GetCardLogicValue(CardData[i]);
              Straight = 1;
              Number = 0;
              SssLib_1.SssLib.ZeroMemory(Index, SssLib_1.SssLib.sizeof(Index));
              Index[Number++] = i;
              bUsedDW = this.bfalse;
              bUsedXW = this.bfalse;
            }
          }
          if (2 == this.GetCardLogicValue(CardData[bCardCount - 1])) {
            Number = 0;
            Straight = 2;
            bStraight = this.GetCardLogicValue(CardData[2]);
            SssLib_1.SssLib.ZeroMemory(Index, SssLib_1.SssLib.sizeof(Index));
            var bFind = this.bfalse;
            if (14 == bStraight) {
              Index[Number++] = 2;
              bStraight = this.GetCardLogicValue(CardData[bCardCount - 1]);
              Index[Number++] = bCardCount - 1;
              var bDWused = this.bfalse;
              var bXWused = this.bfalse;
              for (var i = bCardCount - 2; i >= 0; i--) {
                if (bStraight == this.GetCardLogicValue(CardData[i]) - 1) {
                  Straight++;
                  Index[Number++] = i;
                  bStraight = this.GetCardLogicValue(CardData[i]);
                  continue;
                }
                if (bStraight != this.GetCardLogicValue(CardData[i]) - 2 || this.bfalse != bDWused && this.bfalse != bDWused) {
                  if (bStraight == this.GetCardLogicValue(CardData[i] - 3) && this.bfalse == bDWused && this.bfalse == bDWused) {
                    Straight++;
                    Index[Number++] = 0;
                    Straight++;
                    Index[Number++] = 1;
                    Straight++;
                    Index[Number++] = i;
                    bStraight = this.GetCardLogicValue(CardData[i]);
                  }
                } else if (bDWused == this.bfalse) {
                  bDWused = this.btrue;
                  Straight++;
                  Index[Number++] = 0;
                  Straight++;
                  Index[Number++] = i;
                  bStraight = this.GetCardLogicValue(CardData[i]);
                } else if (bXWused == this.bfalse) {
                  bXWused = this.btrue;
                  Straight++;
                  Index[Number++] = 1;
                  Straight++;
                  Index[Number++] = i;
                  bStraight = this.GetCardLogicValue(CardData[i]);
                }
              }
            } else {
              Index[Number++] = SssLib_1.SssLib.rand() % 2;
              bStraight = this.GetCardLogicValue(CardData[bCardCount - 1]);
              Index[Number++] = bCardCount - 1;
              for (var i = bCardCount - 2; i >= 0; i--) if (bStraight == this.GetCardLogicValue(CardData[i]) - 1) {
                Straight++;
                Index[Number++] = i;
                bStraight = this.GetCardLogicValue(CardData[i]);
              }
            }
            if (Straight >= 5) {
              Type.bStraight = this.btrue;
              for (var j = 0; j < 5; j++) Type.cbStraight[Num[3]++] = Index[j];
              Type.btStraight++;
              for (var k = 0; k < 5; k++) for (var m = 0; m < bCardCount; m++) if (this.GetCardLogicValue(CardData[Index[k]]) == this.GetCardLogicValue(CardData[m]) && this.GetCardColor(CardData[Index[k]]) != this.GetCardColor(CardData[m])) {
                for (var n = 0; n < 5; n++) Type.cbStraight[Num[3]++] = n == k ? m : Index[n];
                Type.btStraight++;
              }
            }
          }
          if (3 == this.GetCardLogicValue(CardData[bCardCount - 1])) {
            Number = 0;
            Straight = 3;
            bStraight = this.GetCardLogicValue(CardData[2]);
            SssLib_1.SssLib.ZeroMemory(Index, SssLib_1.SssLib.sizeof(Index));
            var bFind = this.bfalse;
            if (14 == bStraight) {
              Index[Number++] = 1;
              Index[Number++] = 2;
              bStraight = this.GetCardLogicValue(CardData[bCardCount - 1]);
              Index[Number++] = bCardCount - 1;
              var bDWused = this.bfalse;
              for (var i = bCardCount - 2; i >= 0; i--) {
                if (bStraight == this.GetCardLogicValue(CardData[i]) - 1) {
                  Straight++;
                  Index[Number++] = i;
                  bStraight = this.GetCardLogicValue(CardData[i]);
                  continue;
                }
                if (bStraight == this.GetCardLogicValue(CardData[i]) - 2 && this.bfalse == bDWused && bDWused == this.bfalse) {
                  bDWused = this.btrue;
                  Straight++;
                  Index[Number++] = 0;
                  Straight++;
                  Index[Number++] = i;
                  bStraight = this.GetCardLogicValue(CardData[i]);
                }
              }
            } else {
              Index[Number++] = 0;
              Index[Number++] = 1;
              bStraight = this.GetCardLogicValue(CardData[bCardCount - 1]);
              Index[Number++] = bCardCount - 1;
              for (var i = bCardCount - 2; i >= 0; i--) if (bStraight == this.GetCardLogicValue(CardData[i]) - 1) {
                Straight++;
                Index[Number++] = i;
                bStraight = this.GetCardLogicValue(CardData[i]);
              }
            }
            if (Straight >= 5) {
              Type.bStraight = this.btrue;
              for (var j = 0; j < 5; j++) Type.cbStraight[Num[3]++] = Index[j];
              Type.btStraight++;
              for (var k = 0; k < 5; k++) for (var m = 0; m < bCardCount; m++) if (this.GetCardLogicValue(CardData[Index[k]]) == this.GetCardLogicValue(CardData[m]) && this.GetCardColor(CardData[Index[k]]) != this.GetCardColor(CardData[m])) {
                for (var n = 0; n < 5; n++) Type.cbStraight[Num[3]++] = n == k ? m : Index[n];
                Type.btStraight++;
              }
            }
          }
          if (4 == this.GetCardLogicValue(CardData[bCardCount - 1]) && 14 == this.GetCardLogicValue(CardData[2])) {
            Number = 0;
            Straight = 4;
            bStraight = this.GetCardLogicValue(CardData[2]);
            SssLib_1.SssLib.ZeroMemory(Index, SssLib_1.SssLib.sizeof(Index));
            Index[Number++] = 0;
            Index[Number++] = 1;
            Index[Number++] = 2;
            bStraight = this.GetCardLogicValue(CardData[bCardCount - 1]);
            Index[Number++] = bCardCount - 1;
            for (var i = bCardCount - 2; i >= 0; i--) if (bStraight == this.GetCardLogicValue(CardData[i]) - 1) {
              Straight++;
              Index[Number++] = i;
              bStraight = this.GetCardLogicValue(CardData[i]);
            }
            if (Straight >= 5) {
              Type.bStraight = this.btrue;
              for (var j = 0; j < 5; j++) Type.cbStraight[Num[3]++] = Index[j];
              Type.btStraight++;
              for (var k = 0; k < 5; k++) for (var m = 0; m < bCardCount; m++) if (this.GetCardLogicValue(CardData[Index[k]]) == this.GetCardLogicValue(CardData[m]) && this.GetCardColor(CardData[Index[k]]) != this.GetCardColor(CardData[m])) {
                for (var n = 0; n < 5; n++) Type.cbStraight[Num[3]++] = n == k ? m : Index[n];
                Type.btStraight++;
              }
            }
          }
        } else {
          bStraight = this.GetCardLogicValue(CardData[0]);
          Index[Number++] = 0;
          if (14 != bStraight) for (var i = 1; i < bCardCount; i++) {
            if (bStraight == this.GetCardLogicValue(CardData[i]) + 1) {
              Straight++;
              Index[Number++] = i;
              bStraight = this.GetCardLogicValue(CardData[i]);
            }
            if (bStraight > this.GetCardLogicValue(CardData[i]) + 1 || i == bCardCount - 1) {
              if (Straight >= 5) {
                Type.bStraight = this.btrue;
                for (var j = 0; j < Straight; j++) {
                  if (!(Straight - j >= 5)) break;
                  Type.cbStraight[Num[3]++] = Index[j];
                  Type.cbStraight[Num[3]++] = Index[j + 1];
                  Type.cbStraight[Num[3]++] = Index[j + 2];
                  Type.cbStraight[Num[3]++] = Index[j + 3];
                  Type.cbStraight[Num[3]++] = Index[j + 4];
                  Type.btStraight++;
                  for (var k = j; k < j + 5; k++) for (var m = 0; m < bCardCount; m++) if (this.GetCardLogicValue(CardData[Index[k]]) == this.GetCardLogicValue(CardData[m]) && this.GetCardColor(CardData[Index[k]]) != this.GetCardColor(CardData[m])) {
                    for (var n = j; n < j + 5; n++) Type.cbStraight[Num[3]++] = n == k ? m : Index[n];
                    Type.btStraight++;
                  }
                }
              }
              if (bCardCount - i < 5) break;
              bStraight = this.GetCardLogicValue(CardData[i]);
              Straight = 1;
              Number = 0;
              SssLib_1.SssLib.ZeroMemory(Index, SssLib_1.SssLib.sizeof(Index));
              Index[Number++] = i;
            }
          }
          if (14 == bStraight) {
            for (var i = 1; i < bCardCount; i++) {
              if (bStraight == this.GetCardLogicValue(CardData[i]) + 1) {
                Straight++;
                Index[Number++] = i;
                bStraight = this.GetCardLogicValue(CardData[i]);
              }
              if (bStraight > this.GetCardLogicValue(CardData[i]) + 1 || i == bCardCount - 1) {
                if (Straight >= 5) {
                  Type.bStraight = this.btrue;
                  for (var j = 0; j < Straight; j++) {
                    if (!(Straight - j >= 5)) break;
                    Type.cbStraight[Num[3]++] = Index[j];
                    Type.cbStraight[Num[3]++] = Index[j + 1];
                    Type.cbStraight[Num[3]++] = Index[j + 2];
                    Type.cbStraight[Num[3]++] = Index[j + 3];
                    Type.cbStraight[Num[3]++] = Index[j + 4];
                    Type.btStraight++;
                    for (var k = j; k < j + 5; k++) for (var m = 0; m < bCardCount; m++) if (this.GetCardLogicValue(CardData[Index[k]]) == this.GetCardLogicValue(CardData[m]) && this.GetCardColor(CardData[Index[k]]) != this.GetCardColor(CardData[m])) {
                      for (var n = j; n < j + 5; n++) Type.cbStraight[Num[3]++] = n == k ? m : Index[n];
                      Type.btStraight++;
                    }
                  }
                }
                if (bCardCount - i < 5) break;
                bStraight = this.GetCardLogicValue(CardData[i]);
                Straight = 1;
                Number = 0;
                SssLib_1.SssLib.ZeroMemory(Index, SssLib_1.SssLib.sizeof(Index));
                Index[Number++] = i;
              }
            }
            if (2 == this.GetCardLogicValue(CardData[bCardCount - 1])) {
              Number = 0;
              var BackA = 1;
              var FrontA = 1;
              bStraight = this.GetCardLogicValue(CardData[0]);
              SssLib_1.SssLib.ZeroMemory(Index, SssLib_1.SssLib.sizeof(Index));
              Index[Number++] = 0;
              bStraight = this.GetCardLogicValue(CardData[bCardCount - 1]);
              Index[Number++] = bCardCount - 1;
              for (var i = bCardCount - 2; i >= 0; i--) if (bStraight == this.GetCardLogicValue(CardData[i]) - 1) {
                FrontA++;
                Index[Number++] = i;
                bStraight = this.GetCardLogicValue(CardData[i]);
              }
              if (FrontA + BackA >= 5) {
                Type.bStraight = this.btrue;
                for (var i = BackA; i > 0; i--) for (var j = 1; j <= FrontA; j++) if (i + j == 5) {
                  for (var k = 0; k < i; k++) Type.cbStraight[Num[3]++] = Index[k];
                  for (var k = 0; k < j; k++) Type.cbStraight[Num[3]++] = Index[k + BackA];
                  break;
                }
                Type.btStraight++;
              }
            }
          }
        }
        Number = 0;
        SssLib_1.SssLib.ZeroMemory(Index, SssLib_1.SssLib.sizeof(Index));
        this.SortCardList(CardData, bCardCount, this.enColor);
        var cbCardData = SssLib_1.SssLib.oneDArr(13);
        SssLib_1.SssLib.CopyMemory(cbCardData, bCardData, bCardCount);
        this.SortCardList(cbCardData, bCardCount, this.enDescend);
        if (this.GetCardLogicValue(CardData[0]) >= SssDef_1.SssDef.CARD_XW && this.GetCardLogicValue(CardData[1]) < SssDef_1.SssDef.CARD_XW) {
          var SameColorCount = 1;
          var bCardColor = this.GetCardColor(CardData[1]);
          Index[Number++] = 1;
          for (var i = 2; i < bCardCount; i++) {
            if (bCardColor == this.GetCardColor(CardData[i])) {
              SameColorCount++;
              Index[Number++] = i;
            }
            if (bCardColor != this.GetCardColor(CardData[i]) || i == bCardCount - 1) {
              if (4 == SameColorCount) {
                SameColorCount++;
                Index[Number++] = 0;
              }
              if (SameColorCount >= 5) {
                Type.bFlush = this.btrue;
                for (var j = 0; j < SameColorCount; j++) for (var k = 0; k < bCardCount; k++) if (this.GetCardLogicValue(CardData[Index[j]]) == this.GetCardLogicValue(cbCardData[k]) && this.GetCardColor(CardData[Index[j]]) == this.GetCardColor(cbCardData[k])) {
                  Index[j] = k;
                  break;
                }
                var SaveIndex = 0;
                for (var j = 0; j < SameColorCount; j++) for (var k = j + 1; k < SameColorCount; k++) if (Index[j] > Index[k]) {
                  SaveIndex = Index[j];
                  Index[j] = Index[k];
                  Index[k] = SaveIndex;
                }
                for (var j = 0; j < SameColorCount; j++) j < SameColorCount - 1 && this.GetCardLogicValue(cbCardData[Index[j]]) == this.GetCardLogicValue(cbCardData[Index[j + 1]]) && (Index[j + 1] = Index[j] + 1);
                if (this.GetCardLogicValue(cbCardData[Index[0]]) >= SssDef_1.SssDef.CARD_XW) {
                  if (14 == this.GetCardLogicValue(cbCardData[Index[1]]) && (5 == this.GetCardLogicValue(cbCardData[Index[2]]) || 4 == this.GetCardLogicValue(cbCardData[Index[2]])) || 4 >= this.GetCardLogicValue(cbCardData[Index[1]]) - this.GetCardLogicValue(cbCardData[Index[4]])) {
                    var bSameCard = false;
                    for (var bSameCardnum = 0; bSameCardnum < 4; bSameCardnum++) if (this.GetCardLogicValue(cbCardData[Index[bSameCardnum]]) == this.GetCardLogicValue(cbCardData[Index[bSameCardnum + 1]]) && this.GetCardColor(cbCardData[Index[bSameCardnum]]) == this.GetCardColor(cbCardData[Index[bSameCardnum + 1]])) {
                      bSameCard = true;
                      break;
                    }
                    if (!bSameCard) {
                      Type.bStraightFlush = this.btrue;
                      Type.cbStraightFlush[Num[7]++] = Index[0];
                      Type.cbStraightFlush[Num[7]++] = Index[1];
                      Type.cbStraightFlush[Num[7]++] = Index[2];
                      Type.cbStraightFlush[Num[7]++] = Index[3];
                      Type.cbStraightFlush[Num[7]++] = Index[4];
                      Type.btStraightFlush++;
                    }
                  }
                } else {
                  if (14 == this.GetCardLogicValue(cbCardData[Index[0]])) for (var i_1 = 1; i_1 < SameColorCount; i_1++) {
                    if (5 == this.GetCardLogicValue(cbCardData[Index[i_1]])) if (SameColorCount - i_1 == 4) {
                      var straightUnfounded = false;
                      for (var j = i_1; j < i_1 + 3; j++) if (this.GetCardLogicValue(cbCardData[Index[j]]) == this.GetCardLogicValue(cbCardData[Index[j + 1]]) && this.GetCardColor(cbCardData[Index[j]]) == this.GetCardColor(cbCardData[Index[j + 1]])) {
                        straightUnfounded = true;
                        break;
                      }
                      if (!straightUnfounded) {
                        Type.bStraightFlush = this.btrue;
                        Type.cbStraightFlush[Num[7]++] = Index[0];
                        Type.cbStraightFlush[Num[7]++] = Index[i_1];
                        Type.cbStraightFlush[Num[7]++] = Index[i_1 + 1];
                        Type.cbStraightFlush[Num[7]++] = Index[i_1 + 2];
                        Type.cbStraightFlush[Num[7]++] = Index[i_1 + 3];
                        Type.btStraightFlush++;
                      }
                    } else if (SameColorCount - i_1 == 3) {
                      var straightUnfounded = false;
                      for (var j = i_1; j < i_1 + 2; j++) if (this.GetCardLogicValue(cbCardData[Index[j]]) == this.GetCardLogicValue(cbCardData[Index[j + 1]]) && this.GetCardColor(cbCardData[Index[j]]) == this.GetCardColor(cbCardData[Index[j + 1]])) {
                        straightUnfounded = true;
                        break;
                      }
                      if (!straightUnfounded) {
                        Type.bStraightFlush = this.btrue;
                        Type.cbStraightFlush[Num[7]++] = 0;
                        Type.cbStraightFlush[Num[7]++] = Index[0];
                        Type.cbStraightFlush[Num[7]++] = Index[i_1];
                        Type.cbStraightFlush[Num[7]++] = Index[i_1 + 1];
                        Type.cbStraightFlush[Num[7]++] = Index[i_1 + 2];
                        Type.btStraightFlush++;
                      }
                    }
                    if (4 == this.GetCardLogicValue(cbCardData[Index[i_1]]) && SameColorCount - i_1 == 3) {
                      var straightUnfounded = false;
                      for (var j = i_1; j < i_1 + 2; j++) if (this.GetCardLogicValue(cbCardData[Index[j]]) == this.GetCardLogicValue(cbCardData[Index[j + 1]]) && this.GetCardColor(cbCardData[Index[j]]) == this.GetCardColor(cbCardData[Index[j + 1]])) {
                        straightUnfounded = true;
                        break;
                      }
                      if (!straightUnfounded) {
                        Type.bStraightFlush = this.btrue;
                        Type.cbStraightFlush[Num[7]++] = 0;
                        Type.cbStraightFlush[Num[7]++] = Index[0];
                        Type.cbStraightFlush[Num[7]++] = Index[i_1];
                        Type.cbStraightFlush[Num[7]++] = Index[i_1 + 1];
                        Type.cbStraightFlush[Num[7]++] = Index[i_1 + 2];
                        Type.btStraightFlush++;
                      }
                    }
                  }
                  for (var i_2 = 0; i_2 < SameColorCount; i_2++) if (SameColorCount - i_2 >= 5) {
                    if (4 == this.GetCardLogicValue(cbCardData[Index[i_2]]) - this.GetCardLogicValue(cbCardData[Index[i_2 + 4]])) {
                      var straightUnfounded = false;
                      for (var j = i_2; j < i_2 + 4; j++) if (this.GetCardLogicValue(cbCardData[Index[j]]) == this.GetCardLogicValue(cbCardData[Index[j + 1]]) && this.GetCardColor(cbCardData[Index[j]]) == this.GetCardColor(cbCardData[Index[j + 1]])) {
                        straightUnfounded = true;
                        break;
                      }
                      if (!straightUnfounded) {
                        Type.bStraightFlush = this.btrue;
                        Type.cbStraightFlush[Num[7]++] = Index[i_2];
                        Type.cbStraightFlush[Num[7]++] = Index[i_2 + 1];
                        Type.cbStraightFlush[Num[7]++] = Index[i_2 + 2];
                        Type.cbStraightFlush[Num[7]++] = Index[i_2 + 3];
                        Type.cbStraightFlush[Num[7]++] = Index[i_2 + 4];
                        Type.btStraightFlush++;
                      }
                    } else if (4 >= this.GetCardLogicValue(cbCardData[Index[i_2]]) - this.GetCardLogicValue(cbCardData[Index[i_2 + 3]])) {
                      var straightUnfounded = false;
                      for (var j = i_2; j < i_2 + 3; j++) if (this.GetCardLogicValue(cbCardData[Index[j]]) == this.GetCardLogicValue(cbCardData[Index[j + 1]]) && this.GetCardColor(cbCardData[Index[j]]) == this.GetCardColor(cbCardData[Index[j + 1]])) {
                        straightUnfounded = true;
                        break;
                      }
                      if (!straightUnfounded) {
                        Type.bStraightFlush = this.btrue;
                        Type.cbStraightFlush[Num[7]++] = 0;
                        Type.cbStraightFlush[Num[7]++] = Index[i_2];
                        Type.cbStraightFlush[Num[7]++] = Index[i_2 + 1];
                        Type.cbStraightFlush[Num[7]++] = Index[i_2 + 2];
                        Type.cbStraightFlush[Num[7]++] = Index[i_2 + 3];
                        Type.btStraightFlush++;
                      }
                    }
                  } else if (SameColorCount - i_2 == 4 && 4 >= this.GetCardLogicValue(cbCardData[Index[i_2]]) - this.GetCardLogicValue(cbCardData[Index[i_2 + 3]])) {
                    var straightUnfounded = false;
                    for (var j = i_2; j < i_2 + 3; j++) if (this.GetCardLogicValue(cbCardData[Index[j]]) == this.GetCardLogicValue(cbCardData[Index[j + 1]]) && this.GetCardColor(cbCardData[Index[j]]) == this.GetCardColor(cbCardData[Index[j + 1]])) {
                      straightUnfounded = true;
                      break;
                    }
                    if (!straightUnfounded) {
                      Type.bStraightFlush = this.btrue;
                      Type.cbStraightFlush[Num[7]++] = 0;
                      Type.cbStraightFlush[Num[7]++] = Index[i_2];
                      Type.cbStraightFlush[Num[7]++] = Index[i_2 + 1];
                      Type.cbStraightFlush[Num[7]++] = Index[i_2 + 2];
                      Type.cbStraightFlush[Num[7]++] = Index[i_2 + 3];
                      Type.btStraightFlush++;
                    }
                  }
                }
                for (var j = 0; j < SameColorCount; j++) {
                  if (!(SameColorCount - j >= 5)) break;
                  Type.cbFlush[Num[4]++] = Index[j];
                  Type.cbFlush[Num[4]++] = Index[j + 1];
                  Type.cbFlush[Num[4]++] = Index[j + 2];
                  Type.cbFlush[Num[4]++] = Index[j + 3];
                  Type.cbFlush[Num[4]++] = Index[j + 4];
                  Type.btFlush++;
                }
              }
              if (bCardCount - i < 4) break;
              Number = 0;
              SssLib_1.SssLib.ZeroMemory(Index, SssLib_1.SssLib.sizeof(Index));
              SameColorCount = 1;
              Index[Number++] = i;
              bCardColor = this.GetCardColor(CardData[i]);
            }
          }
        } else if (this.GetCardLogicValue(CardData[0]) == SssDef_1.SssDef.CARD_DW && this.GetCardLogicValue(CardData[1]) == SssDef_1.SssDef.CARD_XW) {
          var SameColorCount = 1;
          var bCardColor = this.GetCardColor(CardData[2]);
          Index[Number++] = 2;
          for (var i = 3; i < bCardCount; i++) {
            if (bCardColor == this.GetCardColor(CardData[i])) {
              SameColorCount++;
              Index[Number++] = i;
            }
            if (bCardColor != this.GetCardColor(CardData[i]) || i == bCardCount - 1) {
              if (4 == SameColorCount) {
                SameColorCount++;
                Index[Number++] = 0;
              }
              if (3 == SameColorCount) {
                SameColorCount++;
                Index[Number++] = 0;
                SameColorCount++;
                Index[Number++] = 1;
              }
              if (SameColorCount >= 5) {
                Type.bFlush = this.btrue;
                for (var j = 0; j < SameColorCount; j++) for (var k = 0; k < bCardCount; k++) if (this.GetCardLogicValue(CardData[Index[j]]) == this.GetCardLogicValue(cbCardData[k]) && this.GetCardColor(CardData[Index[j]]) == this.GetCardColor(cbCardData[k])) {
                  Index[j] = k;
                  break;
                }
                var SaveIndex = 0;
                for (var j = 0; j < SameColorCount; j++) for (var k = j + 1; k < SameColorCount; k++) if (Index[j] > Index[k]) {
                  SaveIndex = Index[j];
                  Index[j] = Index[k];
                  Index[k] = SaveIndex;
                }
                for (var j = 0; j < SameColorCount; j++) j < SameColorCount - 1 && this.GetCardLogicValue(cbCardData[Index[j]]) == this.GetCardLogicValue(cbCardData[Index[j + 1]]) && (Index[j + 1] = Index[j] + 1);
                if (this.GetCardLogicValue(cbCardData[Index[0]]) == SssDef_1.SssDef.CARD_DW && this.GetCardLogicValue(cbCardData[Index[1]]) == SssDef_1.SssDef.CARD_XW) {
                  if (14 == this.GetCardLogicValue(cbCardData[Index[2]]) && (5 == this.GetCardLogicValue(cbCardData[Index[3]]) || 4 == this.GetCardLogicValue(cbCardData[Index[3]]) || 3 == this.GetCardLogicValue(cbCardData[Index[3]])) || 4 >= this.GetCardLogicValue(cbCardData[Index[2]]) - this.GetCardLogicValue(cbCardData[Index[4]])) {
                    var bSameCard = false;
                    for (var bSameCardnum = 0; bSameCardnum < 4; bSameCardnum++) if (this.GetCardLogicValue(cbCardData[Index[bSameCardnum]]) == this.GetCardLogicValue(cbCardData[Index[bSameCardnum + 1]]) && this.GetCardColor(cbCardData[Index[bSameCardnum]]) == this.GetCardColor(cbCardData[Index[bSameCardnum + 1]])) {
                      bSameCard = true;
                      break;
                    }
                    if (!bSameCard) {
                      Type.bStraightFlush = this.btrue;
                      Type.cbStraightFlush[Num[7]++] = Index[0];
                      Type.cbStraightFlush[Num[7]++] = Index[1];
                      Type.cbStraightFlush[Num[7]++] = Index[2];
                      Type.cbStraightFlush[Num[7]++] = Index[3];
                      Type.cbStraightFlush[Num[7]++] = Index[4];
                      Type.btStraightFlush++;
                    }
                  }
                } else if (this.GetCardLogicValue(cbCardData[Index[0]]) >= SssDef_1.SssDef.CARD_XW && this.GetCardLogicValue(cbCardData[Index[1]]) < SssDef_1.SssDef.CARD_XW) {
                  var bSameCard = false;
                  for (var bSameCardnum = 0; bSameCardnum < 4; bSameCardnum++) if (this.GetCardLogicValue(cbCardData[Index[bSameCardnum]]) == this.GetCardLogicValue(cbCardData[Index[bSameCardnum + 1]]) && this.GetCardColor(cbCardData[Index[bSameCardnum]]) == this.GetCardColor(cbCardData[Index[bSameCardnum + 1]])) {
                    bSameCard = true;
                    break;
                  }
                  if ((14 == this.GetCardLogicValue(cbCardData[Index[1]]) && (5 == this.GetCardLogicValue(cbCardData[Index[2]]) || 4 == this.GetCardLogicValue(cbCardData[Index[2]])) || 4 >= this.GetCardLogicValue(cbCardData[Index[1]]) - this.GetCardLogicValue(cbCardData[Index[4]])) && !bSameCard) {
                    Type.bStraightFlush = this.btrue;
                    Type.cbStraightFlush[Num[7]++] = Index[0];
                    Type.cbStraightFlush[Num[7]++] = Index[1];
                    Type.cbStraightFlush[Num[7]++] = Index[2];
                    Type.cbStraightFlush[Num[7]++] = Index[3];
                    Type.cbStraightFlush[Num[7]++] = Index[4];
                    Type.btStraightFlush++;
                  }
                  if (14 != this.GetCardLogicValue(cbCardData[Index[1]]) && this.GetCardLogicValue(cbCardData[Index[1]]) - this.GetCardLogicValue(cbCardData[Index[4]]) >= 4 && !bSameCard) if (this.GetCardLogicValue(cbCardData[Index[1]]) - this.GetCardLogicValue(cbCardData[Index[3]]) <= 4) {
                    Type.bStraightFlush = true;
                    Type.cbStraightFlush[Num[7]++] = Index[0];
                    Type.cbStraightFlush[Num[7]++] = Index[1];
                    Type.cbStraightFlush[Num[7]++] = Index[2];
                    Type.cbStraightFlush[Num[7]++] = Index[3];
                    Type.cbStraightFlush[Num[7]++] = 1;
                    Type.btStraightFlush++;
                  } else if (this.GetCardLogicValue(cbCardData[Index[2]]) - this.GetCardLogicValue(cbCardData[Index[4]]) <= 4) {
                    Type.bStraightFlush = true;
                    Type.cbStraightFlush[Num[7]++] = Index[0];
                    Type.cbStraightFlush[Num[7]++] = Index[2];
                    Type.cbStraightFlush[Num[7]++] = Index[3];
                    Type.cbStraightFlush[Num[7]++] = Index[4];
                    Type.cbStraightFlush[Num[7]++] = 1;
                    Type.btStraightFlush++;
                  }
                } else {
                  if (14 == this.GetCardLogicValue(cbCardData[Index[0]])) for (var i_3 = 1; i_3 < SameColorCount; i_3++) if (5 == this.GetCardLogicValue(cbCardData[Index[i_3]])) {
                    if (SameColorCount - i_3 == 4) {
                      var straightUnfounded = false;
                      for (var j = i_3; j < i_3 + 3; j++) if (this.GetCardLogicValue(cbCardData[Index[j]]) == this.GetCardLogicValue(cbCardData[Index[j + 1]]) && this.GetCardColor(cbCardData[Index[j]]) == this.GetCardColor(cbCardData[Index[j + 1]])) {
                        straightUnfounded = true;
                        break;
                      }
                      if (!straightUnfounded) {
                        Type.bStraightFlush = this.btrue;
                        Type.cbStraightFlush[Num[7]++] = Index[0];
                        Type.cbStraightFlush[Num[7]++] = Index[i_3];
                        Type.cbStraightFlush[Num[7]++] = Index[i_3 + 1];
                        Type.cbStraightFlush[Num[7]++] = Index[i_3 + 2];
                        Type.cbStraightFlush[Num[7]++] = Index[i_3 + 3];
                        Type.btStraightFlush++;
                      }
                    } else if (SameColorCount - i_3 == 3) {
                      var straightUnfounded = false;
                      for (var j = i_3; j < i_3 + 2; j++) if (this.GetCardLogicValue(cbCardData[Index[j]]) == this.GetCardLogicValue(cbCardData[Index[j + 1]]) && this.GetCardColor(cbCardData[Index[j]]) == this.GetCardColor(cbCardData[Index[j + 1]])) {
                        straightUnfounded = true;
                        break;
                      }
                      if (!straightUnfounded) {
                        Type.bStraightFlush = this.btrue;
                        Type.cbStraightFlush[Num[7]++] = 0;
                        Type.cbStraightFlush[Num[7]++] = Index[0];
                        Type.cbStraightFlush[Num[7]++] = Index[i_3];
                        Type.cbStraightFlush[Num[7]++] = Index[i_3 + 1];
                        Type.cbStraightFlush[Num[7]++] = Index[i_3 + 2];
                        Type.btStraightFlush++;
                      }
                    } else if (SameColorCount - i_3 == 2) {
                      var straightUnfounded = false;
                      for (var j = i_3; j < i_3 + 1; j++) if (this.GetCardLogicValue(cbCardData[Index[j]]) == this.GetCardLogicValue(cbCardData[Index[j + 1]]) && this.GetCardColor(cbCardData[Index[j]]) == this.GetCardColor(cbCardData[Index[j + 1]])) {
                        straightUnfounded = true;
                        break;
                      }
                      if (!straightUnfounded) {
                        Type.bStraightFlush = this.btrue;
                        Type.cbStraightFlush[Num[7]++] = 0;
                        Type.cbStraightFlush[Num[7]++] = 1;
                        Type.cbStraightFlush[Num[7]++] = Index[0];
                        Type.cbStraightFlush[Num[7]++] = Index[i_3];
                        Type.cbStraightFlush[Num[7]++] = Index[i_3 + 1];
                        Type.btStraightFlush++;
                      }
                    }
                  } else if (4 == this.GetCardLogicValue(cbCardData[Index[i_3]])) {
                    if (SameColorCount - i_3 == 3) {
                      var straightUnfounded = false;
                      for (var j = i_3; j < i_3 + 2; j++) if (this.GetCardLogicValue(cbCardData[Index[j]]) == this.GetCardLogicValue(cbCardData[Index[j + 1]]) && this.GetCardColor(cbCardData[Index[j]]) == this.GetCardColor(cbCardData[Index[j + 1]])) {
                        straightUnfounded = true;
                        break;
                      }
                      if (!straightUnfounded) {
                        Type.bStraightFlush = this.btrue;
                        Type.cbStraightFlush[Num[7]++] = 0;
                        Type.cbStraightFlush[Num[7]++] = Index[0];
                        Type.cbStraightFlush[Num[7]++] = Index[i_3];
                        Type.cbStraightFlush[Num[7]++] = Index[i_3 + 1];
                        Type.cbStraightFlush[Num[7]++] = Index[i_3 + 2];
                        Type.btStraightFlush++;
                      }
                    } else if (SameColorCount - i_3 == 2) {
                      var straightUnfounded = false;
                      for (var j = i_3; j < i_3 + 1; j++) if (this.GetCardLogicValue(cbCardData[Index[j]]) == this.GetCardLogicValue(cbCardData[Index[j + 1]]) && this.GetCardColor(cbCardData[Index[j]]) == this.GetCardColor(cbCardData[Index[j + 1]])) {
                        straightUnfounded = true;
                        break;
                      }
                      if (!straightUnfounded) {
                        Type.bStraightFlush = this.btrue;
                        Type.cbStraightFlush[Num[7]++] = 0;
                        Type.cbStraightFlush[Num[7]++] = 1;
                        Type.cbStraightFlush[Num[7]++] = Index[0];
                        Type.cbStraightFlush[Num[7]++] = Index[i_3];
                        Type.cbStraightFlush[Num[7]++] = Index[i_3 + 1];
                        Type.btStraightFlush++;
                      }
                    }
                  } else if (3 == this.GetCardLogicValue(cbCardData[Index[i_3]]) && SameColorCount - i_3 == 2) {
                    var straightUnfounded = false;
                    for (var j = i_3; j < i_3 + 1; j++) if (this.GetCardLogicValue(cbCardData[Index[j]]) == this.GetCardLogicValue(cbCardData[Index[j + 1]]) && this.GetCardColor(cbCardData[Index[j]]) == this.GetCardColor(cbCardData[Index[j + 1]])) {
                      straightUnfounded = true;
                      break;
                    }
                    if (!straightUnfounded) {
                      Type.bStraightFlush = this.btrue;
                      Type.cbStraightFlush[Num[7]++] = 0;
                      Type.cbStraightFlush[Num[7]++] = 1;
                      Type.cbStraightFlush[Num[7]++] = Index[0];
                      Type.cbStraightFlush[Num[7]++] = Index[i_3];
                      Type.cbStraightFlush[Num[7]++] = Index[i_3 + 1];
                      Type.btStraightFlush++;
                    }
                  }
                  for (var i_4 = 0; i_4 < SameColorCount; i_4++) if (SameColorCount - i_4 >= 5) {
                    if (4 == this.GetCardLogicValue(cbCardData[Index[i_4]]) - this.GetCardLogicValue(cbCardData[Index[i_4 + 4]])) {
                      var straightUnfounded = false;
                      for (var j = i_4; j < i_4 + 4; j++) if (this.GetCardLogicValue(cbCardData[Index[j]]) == this.GetCardLogicValue(cbCardData[Index[j + 1]]) && this.GetCardColor(cbCardData[Index[j]]) == this.GetCardColor(cbCardData[Index[j + 1]])) {
                        straightUnfounded = true;
                        break;
                      }
                      if (!straightUnfounded) {
                        Type.bStraightFlush = this.btrue;
                        Type.cbStraightFlush[Num[7]++] = Index[i_4];
                        Type.cbStraightFlush[Num[7]++] = Index[i_4 + 1];
                        Type.cbStraightFlush[Num[7]++] = Index[i_4 + 2];
                        Type.cbStraightFlush[Num[7]++] = Index[i_4 + 3];
                        Type.cbStraightFlush[Num[7]++] = Index[i_4 + 4];
                        Type.btStraightFlush++;
                      }
                    } else if (4 >= this.GetCardLogicValue(cbCardData[Index[i_4]]) - this.GetCardLogicValue(cbCardData[Index[i_4 + 3]])) {
                      var straightUnfounded = false;
                      for (var j = i_4; j < i_4 + 3; j++) if (this.GetCardLogicValue(cbCardData[Index[j]]) == this.GetCardLogicValue(cbCardData[Index[j + 1]]) && this.GetCardColor(cbCardData[Index[j]]) == this.GetCardColor(cbCardData[Index[j + 1]])) {
                        straightUnfounded = true;
                        break;
                      }
                      if (!straightUnfounded) {
                        Type.bStraightFlush = this.btrue;
                        Type.cbStraightFlush[Num[7]++] = 0;
                        Type.cbStraightFlush[Num[7]++] = Index[i_4];
                        Type.cbStraightFlush[Num[7]++] = Index[i_4 + 1];
                        Type.cbStraightFlush[Num[7]++] = Index[i_4 + 2];
                        Type.cbStraightFlush[Num[7]++] = Index[i_4 + 3];
                        Type.btStraightFlush++;
                      }
                    } else if (4 >= this.GetCardLogicValue(cbCardData[Index[i_4]]) - this.GetCardLogicValue(cbCardData[Index[i_4 + 2]])) {
                      var straightUnfounded = false;
                      for (var j = i_4; j < i_4 + 2; j++) if (this.GetCardLogicValue(cbCardData[Index[j]]) == this.GetCardLogicValue(cbCardData[Index[j + 1]]) && this.GetCardColor(cbCardData[Index[j]]) == this.GetCardColor(cbCardData[Index[j + 1]])) {
                        straightUnfounded = true;
                        break;
                      }
                      if (!straightUnfounded) {
                        Type.bStraightFlush = this.btrue;
                        Type.cbStraightFlush[Num[7]++] = 0;
                        Type.cbStraightFlush[Num[7]++] = 1;
                        Type.cbStraightFlush[Num[7]++] = Index[i_4];
                        Type.cbStraightFlush[Num[7]++] = Index[i_4 + 1];
                        Type.cbStraightFlush[Num[7]++] = Index[i_4 + 2];
                        Type.btStraightFlush++;
                      }
                    }
                  } else if (SameColorCount - i_4 == 4) {
                    if (4 >= this.GetCardLogicValue(cbCardData[Index[i_4]]) - this.GetCardLogicValue(cbCardData[Index[i_4 + 3]])) {
                      var straightUnfounded = false;
                      for (var j = i_4; j < i_4 + 3; j++) if (this.GetCardLogicValue(cbCardData[Index[j]]) == this.GetCardLogicValue(cbCardData[Index[j + 1]]) && this.GetCardColor(cbCardData[Index[j]]) == this.GetCardColor(cbCardData[Index[j + 1]])) {
                        straightUnfounded = true;
                        break;
                      }
                      if (!straightUnfounded) {
                        Type.bStraightFlush = this.btrue;
                        Type.cbStraightFlush[Num[7]++] = 0;
                        Type.cbStraightFlush[Num[7]++] = Index[i_4];
                        Type.cbStraightFlush[Num[7]++] = Index[i_4 + 1];
                        Type.cbStraightFlush[Num[7]++] = Index[i_4 + 2];
                        Type.cbStraightFlush[Num[7]++] = Index[i_4 + 3];
                        Type.btStraightFlush++;
                      }
                    } else if (4 >= this.GetCardLogicValue(cbCardData[Index[i_4]]) - this.GetCardLogicValue(cbCardData[Index[i_4 + 2]])) {
                      var straightUnfounded = false;
                      for (var j = i_4; j < i_4 + 2; j++) if (this.GetCardLogicValue(cbCardData[Index[j]]) == this.GetCardLogicValue(cbCardData[Index[j + 1]]) && this.GetCardColor(cbCardData[Index[j]]) == this.GetCardColor(cbCardData[Index[j + 1]])) {
                        straightUnfounded = true;
                        break;
                      }
                      if (!straightUnfounded) {
                        Type.bStraightFlush = this.btrue;
                        Type.cbStraightFlush[Num[7]++] = 0;
                        Type.cbStraightFlush[Num[7]++] = 1;
                        Type.cbStraightFlush[Num[7]++] = Index[i_4];
                        Type.cbStraightFlush[Num[7]++] = Index[i_4 + 1];
                        Type.cbStraightFlush[Num[7]++] = Index[i_4 + 2];
                        Type.btStraightFlush++;
                      }
                    }
                  } else if (SameColorCount - i_4 == 3 && 4 >= this.GetCardLogicValue(cbCardData[Index[i_4]]) - this.GetCardLogicValue(cbCardData[Index[i_4 + 2]])) {
                    var straightUnfounded = false;
                    for (var j = i_4; j < i_4 + 2; j++) if (this.GetCardLogicValue(cbCardData[Index[j]]) == this.GetCardLogicValue(cbCardData[Index[j + 1]]) && this.GetCardColor(cbCardData[Index[j]]) == this.GetCardColor(cbCardData[Index[j + 1]])) {
                      straightUnfounded = true;
                      break;
                    }
                    if (!straightUnfounded) {
                      Type.bStraightFlush = this.btrue;
                      Type.cbStraightFlush[Num[7]++] = 0;
                      Type.cbStraightFlush[Num[7]++] = 1;
                      Type.cbStraightFlush[Num[7]++] = Index[i_4];
                      Type.cbStraightFlush[Num[7]++] = Index[i_4 + 1];
                      Type.cbStraightFlush[Num[7]++] = Index[i_4 + 2];
                      Type.btStraightFlush++;
                    }
                  }
                }
                for (var j = 0; j < SameColorCount; j++) {
                  if (!(SameColorCount - j >= 5)) break;
                  Type.cbFlush[Num[4]++] = Index[j];
                  Type.cbFlush[Num[4]++] = Index[j + 1];
                  Type.cbFlush[Num[4]++] = Index[j + 2];
                  Type.cbFlush[Num[4]++] = Index[j + 3];
                  Type.cbFlush[Num[4]++] = Index[j + 4];
                  Type.btFlush++;
                }
              }
              if (bCardCount - i < 3) break;
              Number = 0;
              SssLib_1.SssLib.ZeroMemory(Index, SssLib_1.SssLib.sizeof(Index));
              SameColorCount = 1;
              Index[Number++] = i;
              bCardColor = this.GetCardColor(CardData[i]);
            }
          }
        } else {
          var SameColorCount = 1;
          var bCardColor = this.GetCardColor(CardData[0]);
          Index[Number++] = 0;
          for (var i = 1; i < bCardCount; i++) {
            if (bCardColor == this.GetCardColor(CardData[i])) {
              SameColorCount++;
              Index[Number++] = i;
            }
            if (bCardColor != this.GetCardColor(CardData[i]) || i == bCardCount - 1) {
              if (SameColorCount >= 5) {
                Type.bFlush = this.btrue;
                for (var j = 0; j < SameColorCount; j++) for (var k = 0; k < bCardCount; k++) if (this.GetCardLogicValue(CardData[Index[j]]) == this.GetCardLogicValue(cbCardData[k]) && this.GetCardColor(CardData[Index[j]]) == this.GetCardColor(cbCardData[k])) {
                  Index[j] = k;
                  break;
                }
                var SaveIndex = 0;
                for (var j = 0; j < SameColorCount; j++) for (var k = j + 1; k < SameColorCount; k++) if (Index[j] > Index[k]) {
                  SaveIndex = Index[j];
                  Index[j] = Index[k];
                  Index[k] = SaveIndex;
                }
                for (var j = 0; j < SameColorCount; j++) j < SameColorCount - 1 && this.GetCardLogicValue(cbCardData[Index[j]]) == this.GetCardLogicValue(cbCardData[Index[j + 1]]) && (Index[j + 1] = Index[j] + 1);
                for (var j = 0; j < SameColorCount; j++) {
                  if (!(SameColorCount - j >= 5)) break;
                  Type.cbFlush[Num[4]++] = Index[j];
                  Type.cbFlush[Num[4]++] = Index[j + 1];
                  Type.cbFlush[Num[4]++] = Index[j + 2];
                  Type.cbFlush[Num[4]++] = Index[j + 3];
                  Type.cbFlush[Num[4]++] = Index[j + 4];
                  Type.btFlush++;
                  if (14 == this.GetCardLogicValue(cbCardData[Index[j]])) for (var i_5 = j + 1; i_5 < SameColorCount; i_5++) if (5 == this.GetCardLogicValue(cbCardData[Index[i_5]]) && SameColorCount - i_5 >= 4) {
                    var straightUnfounded = false;
                    for (var k = i_5; k < i_5 + 3; k++) if (this.GetCardLogicValue(cbCardData[Index[k]]) == this.GetCardLogicValue(cbCardData[Index[k + 1]]) && this.GetCardColor(cbCardData[Index[k]]) == this.GetCardColor(cbCardData[Index[k + 1]])) {
                      straightUnfounded = true;
                      break;
                    }
                    if (!straightUnfounded) {
                      Type.bStraightFlush = this.btrue;
                      Type.cbStraightFlush[Num[7]++] = Index[j];
                      Type.cbStraightFlush[Num[7]++] = Index[i_5];
                      Type.cbStraightFlush[Num[7]++] = Index[i_5 + 1];
                      Type.cbStraightFlush[Num[7]++] = Index[i_5 + 2];
                      Type.cbStraightFlush[Num[7]++] = Index[i_5 + 3];
                      Type.btStraightFlush++;
                    }
                  }
                  if (this.GetCardLogicValue(cbCardData[Index[j]]) - this.GetCardLogicValue(cbCardData[Index[j + 4]]) == 4) {
                    var straightUnfounded = false;
                    for (var k = j; k < j + 4; k++) if (this.GetCardLogicValue(cbCardData[Index[k]]) == this.GetCardLogicValue(cbCardData[Index[k + 1]]) && this.GetCardColor(cbCardData[Index[k]]) == this.GetCardColor(cbCardData[Index[k + 1]])) {
                      straightUnfounded = true;
                      break;
                    }
                    if (!straightUnfounded) {
                      Type.bStraightFlush = this.btrue;
                      Type.cbStraightFlush[Num[7]++] = Index[j];
                      Type.cbStraightFlush[Num[7]++] = Index[j + 1];
                      Type.cbStraightFlush[Num[7]++] = Index[j + 2];
                      Type.cbStraightFlush[Num[7]++] = Index[j + 3];
                      Type.cbStraightFlush[Num[7]++] = Index[j + 4];
                      Type.btStraightFlush++;
                    }
                  }
                }
              }
              if (bCardCount - i < 5) break;
              Number = 0;
              SssLib_1.SssLib.ZeroMemory(Index, SssLib_1.SssLib.sizeof(Index));
              SameColorCount = 1;
              Index[Number++] = i;
              bCardColor = this.GetCardColor(CardData[i]);
            }
          }
        }
        return Type;
      };
      SssCards.prototype.AppendCard = function(bAppendCard, bAppendCount, bCardData, bCardCount) {
        SssLib_1.SssLib.ASSERT(bAppendCount + bCardCount <= 13);
        for (var i = 0; i < bAppendCount; i++) bCardData[bCardCount + i] = bAppendCard[i];
        bCardCount += bAppendCount;
        return this.btrue;
      };
      SssCards.prototype.GetCardCount = function(bCardData) {
        var Number = 0;
        if (0 == this.GetCardLogicValue(bCardData[1]) && 0 == this.GetCardLogicValue(bCardData[2])) return 0;
        for (var i = 0; i < 5; i++) {
          if (!(this.GetCardLogicValue(bCardData[i]) > 0)) break;
          Number++;
        }
        return Number;
      };
      SssCards.prototype.TheBestCard = function(tagCardType, btHandCardData, btHandCardCount, btFrontCard, btMidCard, btBackCard) {
        if (13 != btHandCardCount) return;
        var btCardCount = btHandCardCount;
        var btCardData = SssLib_1.SssLib.oneDArr(13);
        SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
        var btCardData1 = SssLib_1.SssLib.oneDArr(13);
        var btCardData2 = SssLib_1.SssLib.oneDArr(13);
        SssLib_1.SssLib.ZeroMemory(btCardData1, SssLib_1.SssLib.sizeof(btCardData1));
        SssLib_1.SssLib.ZeroMemory(btCardData2, SssLib_1.SssLib.sizeof(btCardData2));
        var btCardCount1 = 0;
        var btCardCount2 = 0;
        var FrontCard = SssLib_1.SssLib.oneDArr(3);
        var MidCard = SssLib_1.SssLib.oneDArr(5);
        var BackCard = SssLib_1.SssLib.oneDArr(5);
        var btAllShuiShu = 0;
        SssLib_1.SssLib.ZeroMemory(FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
        SssLib_1.SssLib.ZeroMemory(MidCard, SssLib_1.SssLib.sizeof(MidCard));
        SssLib_1.SssLib.ZeroMemory(BackCard, SssLib_1.SssLib.sizeof(BackCard));
        var FrontFrontCard = SssLib_1.SssLib.oneDArr(3);
        var FrontMidCard = SssLib_1.SssLib.oneDArr(5);
        var FrontBackCard = SssLib_1.SssLib.oneDArr(5);
        var btFrontAllShuiShu = 0;
        SssLib_1.SssLib.ZeroMemory(FrontFrontCard, SssLib_1.SssLib.sizeof(FrontFrontCard));
        SssLib_1.SssLib.ZeroMemory(FrontMidCard, SssLib_1.SssLib.sizeof(FrontMidCard));
        SssLib_1.SssLib.ZeroMemory(FrontBackCard, SssLib_1.SssLib.sizeof(FrontBackCard));
        var bCycling = this.btrue;
        var bFront = this.bfalse;
        var bMid = this.bfalse;
        var bBack = this.bfalse;
        var bFirst = this.btrue;
        var btFront = 0;
        var btMid = 0;
        var btBack = 0;
        var tagCardType1 = new tagAnalyseType();
        var tagCardType2 = new tagAnalyseType();
        SssLib_1.SssLib.ZeroMemory(tagCardType1, SssLib_1.SssLib.sizeof(tagCardType1));
        SssLib_1.SssLib.ZeroMemory(tagCardType2, SssLib_1.SssLib.sizeof(tagCardType2));
        var btTemp = SssLib_1.SssLib.oneDArr(13);
        SssLib_1.SssLib.ZeroMemory(btTemp, SssLib_1.SssLib.sizeof(btTemp));
        if (tagCardType.bStraightFlush) for (var i = 0; i < tagCardType.btStraightFlush; i++) {
          SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
          btCardCount = btHandCardCount;
          for (var j = 0; j < 5; j++) BackCard[j] = btCardData[tagCardType.cbStraightFlush[5 * i + j]];
          this.RemoveCard(BackCard, 5, btCardData, btCardCount);
          btCardCount1 = btCardCount -= 5;
          SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
          tagCardType1 = this.GetType(btCardData1, btCardCount1);
          if (tagCardType1.bStraightFlush) for (var j = 0; j < tagCardType1.btStraightFlush; j++) {
            btCardCount1 = btCardCount;
            SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
            for (var k = 0; k < 5; k++) MidCard[k] = btCardData1[tagCardType1.cbStraightFlush[5 * j + k]];
            this.RemoveCard(MidCard, 5, btCardData1, btCardCount1);
            for (var k = 0; k < 3; k++) FrontCard[k] = btCardData1[k];
            if (bFirst) {
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                bFirst = this.bfalse;
              }
            } else {
              btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = btAllShuiShu;
              }
            }
          } else if (tagCardType1.bFourSame) for (var j = 0; j < tagCardType1.btFourSame; j++) {
            btCardCount1 = btCardCount;
            SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
            for (var k = 0; k < 4; k++) MidCard[k] = btCardData1[tagCardType1.cbFourSame[4 * j + k]];
            this.RemoveCard(MidCard, 4, btCardData1, btCardCount1);
            btCardCount2 = btCardCount1 -= 4;
            SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
            tagCardType2 = this.GetType(btCardData2, btCardCount2);
            if (tagCardType2.bThreeSame) {
              for (var k = 3; k >= 0; k--) if (this.GetCardLogicValue(btCardData2[k]) != this.GetCardLogicValue(btCardData2[tagCardType2.cbThreeSame[0]])) {
                btTemp[0] = MidCard[4] = btCardData2[k];
                break;
              }
              this.RemoveCard(btTemp, 1, btCardData2, btCardCount2);
              SssLib_1.SssLib.CopyMemory(FrontCard, btCardData2, SssLib_1.SssLib.sizeof(FrontCard));
            } else if (tagCardType2.bTwoPare) {
              MidCard[4] = btCardData2[tagCardType2.cbTwoPare[3]];
              FrontCard[0] = btCardData2[tagCardType2.cbTwoPare[0]];
              FrontCard[1] = btCardData2[tagCardType2.cbTwoPare[1]];
              FrontCard[2] = btCardData2[tagCardType2.cbTwoPare[2]];
            } else if (tagCardType2.bOnePare) {
              for (var k = 3; k >= 0; k--) if (this.GetCardLogicValue(btCardData2[k]) != this.GetCardLogicValue(btCardData2[tagCardType2.cbOnePare[0]])) {
                btTemp[0] = MidCard[4] = btCardData2[k];
                break;
              }
              this.RemoveCard(btTemp, 1, btCardData2, btCardCount2);
              SssLib_1.SssLib.CopyMemory(FrontCard, btCardData2, SssLib_1.SssLib.sizeof(FrontCard));
            } else {
              MidCard[4] = btCardData2[3];
              SssLib_1.SssLib.CopyMemory(FrontCard, btCardData2, SssLib_1.SssLib.sizeof(FrontCard));
            }
            if (bFirst) {
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                bFirst = this.bfalse;
              }
            } else {
              btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = btAllShuiShu;
              }
            }
          } else if (tagCardType1.bGourd) {
            var bThreeSame = this.bfalse;
            for (var j = 0; j < tagCardType1.btThreeSame; j++) {
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              for (var k = 0; k < 3; k++) FrontCard[k] = btCardData1[tagCardType1.cbThreeSame[3 * j + k]];
              this.RemoveCard(FrontCard, 3, btCardData1, btCardCount1);
              btCardCount2 = btCardCount1 -= 3;
              SssLib_1.SssLib.CopyMemory(MidCard, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  bThreeSame = this.btrue;
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                  bFirst = this.bfalse;
                }
              } else {
                btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                  bThreeSame = this.btrue;
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  btFrontAllShuiShu = btAllShuiShu;
                }
              }
            }
            if (bThreeSame == this.bfalse) for (var j = 0; j < tagCardType1.btGourd; j++) {
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              for (var k = 0; k < 5; k++) MidCard[k] = btCardData1[tagCardType1.cbGourd[5 * j + k]];
              this.RemoveCard(MidCard, 5, btCardData1, btCardCount1);
              SssLib_1.SssLib.CopyMemory(FrontCard, btCardData1, SssLib_1.SssLib.sizeof(FrontCard));
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                  bFirst = this.bfalse;
                }
              } else {
                btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  btFrontAllShuiShu = btAllShuiShu;
                }
              }
            }
          } else if (tagCardType1.bFlush) {
            var bThreeSame = this.bfalse;
            if (tagCardType1.bThreeSame) for (var j = 0; j < tagCardType1.btThreeSame; j++) {
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              for (var k = 0; k < 3; k++) FrontCard[k] = btCardData1[tagCardType1.cbThreeSame[3 * j + k]];
              this.RemoveCard(FrontCard, 3, btCardData1, btCardCount1);
              btCardCount2 = btCardCount1 -= 3;
              SssLib_1.SssLib.CopyMemory(MidCard, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  bThreeSame = this.btrue;
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                  bFirst = this.bfalse;
                }
              } else {
                btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                  bThreeSame = this.btrue;
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  btFrontAllShuiShu = btAllShuiShu;
                }
              }
            }
            if (bThreeSame == this.bfalse) {
              for (var j = 0; j < tagCardType1.btFlush; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 5; k++) MidCard[k] = btCardData1[tagCardType1.cbFlush[5 * j + k]];
                this.RemoveCard(MidCard, 5, btCardData1, btCardCount1);
                SssLib_1.SssLib.CopyMemory(FrontCard, btCardData1, SssLib_1.SssLib.sizeof(FrontCard));
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                    bFirst = this.bfalse;
                  }
                } else {
                  btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = btAllShuiShu;
                  }
                }
              }
              if (tagCardType1.bStraight) for (var j = 0; j < tagCardType1.btStraight; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 5; k++) MidCard[k] = btCardData1[tagCardType1.cbStraight[5 * j + k]];
                this.RemoveCard(MidCard, 5, btCardData1, btCardCount1);
                SssLib_1.SssLib.CopyMemory(FrontCard, btCardData1, SssLib_1.SssLib.sizeof(FrontCard));
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                    bFirst = this.bfalse;
                  }
                } else {
                  btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = btAllShuiShu;
                  }
                }
              }
              if (tagCardType1.bThreeSame) for (var j = 0; j < tagCardType1.btThreeSame; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 3; k++) MidCard[k] = btCardData1[tagCardType1.cbThreeSame[3 * j + k]];
                this.RemoveCard(MidCard, 3, btCardData1, btCardCount1);
                MidCard[3] = btCardData1[3];
                MidCard[4] = btCardData1[4];
                SssLib_1.SssLib.CopyMemory(FrontCard, btCardData1, SssLib_1.SssLib.sizeof(FrontCard));
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                    bFirst = this.bfalse;
                  }
                } else {
                  btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = btAllShuiShu;
                  }
                }
              }
            }
          } else if (tagCardType1.bStraight) {
            var bThreeSame = this.bfalse;
            if (tagCardType1.bThreeSame) for (var j = 0; j < tagCardType1.btThreeSame; j++) {
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              for (var k = 0; k < 3; k++) FrontCard[k] = btCardData1[tagCardType1.cbThreeSame[3 * j + k]];
              this.RemoveCard(FrontCard, 3, btCardData1, btCardCount1);
              btCardCount2 = btCardCount1 -= 3;
              SssLib_1.SssLib.CopyMemory(MidCard, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  bThreeSame = this.btrue;
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                  bFirst = this.bfalse;
                }
              } else {
                btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                  bThreeSame = this.btrue;
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  btFrontAllShuiShu = btAllShuiShu;
                }
              }
            }
            if (bThreeSame == this.bfalse) {
              for (var j = 0; j < tagCardType1.btStraight; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 5; k++) MidCard[k] = btCardData1[tagCardType1.cbStraight[5 * j + k]];
                this.RemoveCard(MidCard, 5, btCardData1, btCardCount1);
                SssLib_1.SssLib.CopyMemory(FrontCard, btCardData1, SssLib_1.SssLib.sizeof(FrontCard));
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                    bFirst = this.bfalse;
                  }
                } else {
                  btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = btAllShuiShu;
                  }
                }
              }
              if (tagCardType1.bThreeSame) for (var j = 0; j < tagCardType1.btThreeSame; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 3; k++) MidCard[k] = btCardData1[tagCardType1.cbThreeSame[3 * j + k]];
                this.RemoveCard(MidCard, 3, btCardData1, btCardCount1);
                MidCard[3] = btCardData1[3];
                MidCard[4] = btCardData1[4];
                SssLib_1.SssLib.CopyMemory(FrontCard, btCardData1, SssLib_1.SssLib.sizeof(FrontCard));
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                    bFirst = this.bfalse;
                  }
                } else {
                  btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = btAllShuiShu;
                  }
                }
              }
            }
          } else if (tagCardType1.bThreeSame) for (var j = 0; j < tagCardType1.btThreeSame; j++) {
            btCardCount1 = btCardCount;
            SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
            for (var k = 0; k < 3; k++) MidCard[k] = btCardData1[tagCardType1.cbThreeSame[3 * j + k]];
            this.RemoveCard(MidCard, 3, btCardData1, btCardCount1);
            MidCard[3] = btCardData1[3];
            MidCard[4] = btCardData1[4];
            SssLib_1.SssLib.CopyMemory(FrontCard, btCardData1, SssLib_1.SssLib.sizeof(FrontCard));
            if (bFirst) {
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                bFirst = this.bfalse;
              }
            } else {
              btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = btAllShuiShu;
              }
            }
          } else if (tagCardType1.bTwoPare) if (tagCardType1.btOnePare >= 3) {
            btCardCount1 = btCardCount;
            SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
            btTemp[0] = FrontCard[0] = btCardData1[tagCardType1.cbOnePare[0]];
            btTemp[1] = FrontCard[1] = btCardData1[tagCardType1.cbOnePare[1]];
            btTemp[2] = MidCard[0] = btCardData1[tagCardType1.cbOnePare[2]];
            btTemp[3] = MidCard[1] = btCardData1[tagCardType1.cbOnePare[3]];
            btTemp[4] = MidCard[2] = btCardData1[tagCardType1.cbOnePare[4]];
            btTemp[5] = MidCard[3] = btCardData1[tagCardType1.cbOnePare[5]];
            this.RemoveCard(btTemp, 6, btCardData1, btCardCount1);
            FrontCard[2] = btCardData1[0];
            MidCard[4] = btCardData1[1];
            if (bFirst) {
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                bFirst = this.bfalse;
              }
            } else {
              btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = btAllShuiShu;
              }
            }
          } else for (var j = 0; j < tagCardType1.btTwoPare; j++) {
            btCardCount1 = btCardCount;
            SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
            for (var k = 0; k < 4; k++) MidCard[k] = btCardData1[tagCardType1.cbTwoPare[4 * j + k]];
            this.RemoveCard(MidCard, 4, btCardData1, btCardCount1);
            btCardCount2 = btCardCount1 -= 4;
            SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
            tagCardType2 = this.GetType(btCardData2, btCardCount2);
            if (tagCardType2.bTwoPare) {
              MidCard[4] = btCardData2[tagCardType2.cbTwoPare[3]];
              FrontCard[0] = btCardData2[tagCardType2.cbTwoPare[0]];
              FrontCard[1] = btCardData2[tagCardType2.cbTwoPare[1]];
              FrontCard[2] = btCardData2[tagCardType2.cbTwoPare[2]];
            } else if (tagCardType2.bOnePare) {
              for (var k = 3; k >= 0; k--) if (this.GetCardLogicValue(btCardData2[k]) != this.GetCardLogicValue(btCardData2[tagCardType2.cbOnePare[0]])) {
                btTemp[0] = MidCard[4] = btCardData2[k];
                break;
              }
              this.RemoveCard(btTemp, 1, btCardData2, btCardCount2);
              SssLib_1.SssLib.CopyMemory(FrontCard, btCardData2, SssLib_1.SssLib.sizeof(FrontCard));
            } else {
              MidCard[4] = btCardData2[3];
              SssLib_1.SssLib.CopyMemory(FrontCard, btCardData2, SssLib_1.SssLib.sizeof(FrontCard));
            }
            if (bFirst) {
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                bFirst = this.bfalse;
              }
            } else {
              btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = btAllShuiShu;
              }
            }
          } else if (tagCardType1.bOnePare) for (var j = 0; j < tagCardType1.btOnePare; j++) {
            btCardCount1 = btCardCount;
            SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
            for (var k = 0; k < 2; k++) MidCard[k] = btCardData1[tagCardType1.cbOnePare[2 * j + k]];
            this.RemoveCard(MidCard, 2, btCardData1, btCardCount1);
            btCardCount2 = btCardCount1 -= 2;
            SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
            for (var k = 0; k < 6; k++) k < 3 ? FrontCard[k] = btCardData2[k] : MidCard[k - 1] = btCardData2[k];
            if (bFirst) {
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                bFirst = this.bfalse;
              }
            } else {
              btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = btAllShuiShu;
              }
            }
          } else {
            btCardCount1 = btCardCount;
            SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
            MidCard[0] = btCardData1[0];
            MidCard[1] = btCardData1[4];
            MidCard[2] = btCardData1[5];
            MidCard[3] = btCardData1[6];
            MidCard[4] = btCardData1[7];
            FrontCard[0] = btCardData1[1];
            FrontCard[1] = btCardData1[2];
            FrontCard[2] = btCardData1[3];
            if (bFirst) {
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                bFirst = this.bfalse;
              }
            } else {
              btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = btAllShuiShu;
              }
            }
          }
        } else if (tagCardType.bFourSame) for (var i = 0; i < tagCardType.btFourSame; i++) {
          SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
          btCardCount = btHandCardCount;
          for (var j = 0; j < 4; j++) BackCard[j] = btCardData[tagCardType.cbFourSame[4 * i + j]];
          this.RemoveCard(BackCard, 4, btCardData, btCardCount);
          btCardCount1 = btCardCount -= 4;
          SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
          tagCardType1 = this.GetType(btCardData1, btCardCount1);
          if (tagCardType1.bFourSame) for (var j = 0; j < tagCardType1.btFourSame; j++) {
            btCardCount1 = btCardCount;
            SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
            for (var k = 0; k < 4; k++) MidCard[k] = btCardData1[tagCardType1.cbFourSame[4 * j + k]];
            this.RemoveCard(MidCard, 4, btCardData1, btCardCount1);
            btCardCount2 = btCardCount1 -= 4;
            SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
            tagCardType2 = this.GetType(btCardData2, btCardCount2);
            if (tagCardType2.bFourSame) if (this.GetCardLogicValue(btCardData2[0]) == this.GetCardLogicValue(btCardData2[1])) {
              BackCard[4] = btCardData2[4];
              MidCard[4] = btCardData2[3];
              SssLib_1.SssLib.CopyMemory(FrontCard, btCardData2, SssLib_1.SssLib.sizeof(FrontCard));
            } else {
              BackCard[4] = btCardData2[0];
              MidCard[4] = btCardData2[4];
              SssLib_1.SssLib.CopyMemory2(FrontCard, btCardData2, SssLib_1.SssLib.sizeof(FrontCard), 1);
            } else if (tagCardType2.bGourd) {
              BackCard[4] = btCardData2[tagCardType2.cbGourd[4]];
              MidCard[4] = btCardData2[tagCardType2.cbGourd[3]];
              FrontCard[0] = btCardData2[tagCardType2.cbGourd[0]];
              FrontCard[1] = btCardData2[tagCardType2.cbGourd[1]];
              FrontCard[2] = btCardData2[tagCardType2.cbGourd[2]];
            } else if (tagCardType2.bFlush) {
              BackCard[4] = btCardData2[tagCardType2.cbFlush[4]];
              MidCard[4] = btCardData2[tagCardType2.cbFlush[3]];
              FrontCard[0] = btCardData2[tagCardType2.cbFlush[0]];
              FrontCard[1] = btCardData2[tagCardType2.cbFlush[1]];
              FrontCard[2] = btCardData2[tagCardType2.cbFlush[2]];
            } else if (tagCardType2.bStraight) {
              BackCard[4] = btCardData2[tagCardType2.cbStraight[4]];
              MidCard[4] = btCardData2[tagCardType2.cbStraight[3]];
              FrontCard[0] = btCardData2[tagCardType2.cbStraight[0]];
              FrontCard[1] = btCardData2[tagCardType2.cbStraight[1]];
              FrontCard[2] = btCardData2[tagCardType2.cbStraight[2]];
            } else if (tagCardType2.bThreeSame) {
              for (var k = 0; k < 3; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbThreeSame[k]];
              this.RemoveCard(btTemp, 3, btCardData2, btCardCount2);
              BackCard[4] = btCardData2[1];
              MidCard[4] = btCardData2[0];
            } else if (tagCardType2.bTwoPare) {
              for (var k = 4; k >= 0; k--) if (this.GetCardLogicValue(btCardData2[k]) != this.GetCardLogicValue(btCardData2[tagCardType2.cbTwoPare[0]]) && this.GetCardLogicValue(btCardData2[k]) != this.GetCardLogicValue(btCardData2[tagCardType2.cbTwoPare[2]])) {
                btTemp[0] = BackCard[4] = btCardData2[k];
                break;
              }
              MidCard[4] = btCardData2[tagCardType2.cbTwoPare[3]];
              FrontCard[0] = btCardData2[tagCardType2.cbTwoPare[0]];
              FrontCard[1] = btCardData2[tagCardType2.cbTwoPare[1]];
              FrontCard[2] = btCardData2[tagCardType2.cbTwoPare[2]];
            } else if (tagCardType2.bOnePare) {
              btTemp[0] = FrontCard[0] = btCardData2[tagCardType2.cbOnePare[0]];
              btTemp[1] = FrontCard[1] = btCardData2[tagCardType2.cbOnePare[1]];
              this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
              FrontCard[2] = btCardData2[0];
              BackCard[4] = btCardData2[2];
              MidCard[4] = btCardData2[1];
            } else {
              BackCard[4] = btCardData2[4];
              MidCard[4] = btCardData2[3];
              SssLib_1.SssLib.CopyMemory(FrontCard, btCardData2, SssLib_1.SssLib.sizeof(FrontCard));
            }
            if (bFirst) {
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                bFirst = this.bfalse;
              }
            } else {
              btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = btAllShuiShu;
              }
            }
          } else if (tagCardType1.bGourd) {
            var bThreeSame = this.bfalse;
            for (var j = 0; j < tagCardType1.btThreeSame; j++) {
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              for (var k = 0; k < 3; k++) FrontCard[k] = btCardData1[tagCardType1.cbThreeSame[3 * j + k]];
              this.RemoveCard(FrontCard, 3, btCardData1, btCardCount1);
              btCardCount2 = btCardCount1 -= 3;
              SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
              tagCardType2 = this.GetType(btCardData2, btCardCount2);
              if (tagCardType2.bGourd) {
                for (var k = 0; k < 5; k++) btTemp[k] = MidCard[k] = btCardData2[tagCardType2.cbGourd[k]];
                this.RemoveCard(btTemp, 5, btCardData2, btCardCount2);
                BackCard[4] = btCardData2[0];
              } else if (tagCardType2.bFlush) {
                for (var k = 0; k < 5; k++) btTemp[k] = MidCard[k] = btCardData2[tagCardType2.cbFlush[k]];
                this.RemoveCard(btTemp, 5, btCardData2, btCardCount2);
                BackCard[4] = btCardData2[0];
              } else if (tagCardType2.bStraight) {
                for (var k = 0; k < 5; k++) btTemp[k] = MidCard[k] = btCardData2[tagCardType2.cbStraight[k]];
                this.RemoveCard(btTemp, 5, btCardData2, btCardCount2);
                BackCard[4] = btCardData2[0];
              } else if (tagCardType2.bThreeSame) {
                for (var k = 0; k < 3; k++) btTemp[k] = MidCard[k] = btCardData2[tagCardType2.cbThreeSame[k]];
                this.RemoveCard(btTemp, 3, btCardData2, btCardCount2);
                MidCard[3] = btCardData2[0];
                MidCard[4] = btCardData2[1];
                BackCard[4] = btCardData2[2];
              } else {
                for (var k = 0; k < 5; k++) MidCard[k] = btCardData2[k];
                BackCard[4] = btCardData2[5];
              }
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  bThreeSame = this.btrue;
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                  bFirst = this.bfalse;
                }
              } else {
                btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                  bThreeSame = this.btrue;
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  btFrontAllShuiShu = btAllShuiShu;
                }
              }
            }
            if (bThreeSame == this.bfalse) for (var j = 0; j < tagCardType1.btGourd; j++) {
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              for (var k = 0; k < 5; k++) MidCard[k] = btCardData1[tagCardType1.cbGourd[5 * j + k]];
              this.RemoveCard(MidCard, 5, btCardData1, btCardCount1);
              btCardCount2 = btCardCount1 -= 5;
              SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
              tagCardType2 = this.GetType(btCardData2, btCardCount2);
              if (tagCardType2.bTwoPare) {
                BackCard[4] = btCardData2[tagCardType2.cbTwoPare[3]];
                for (var k = 0; k < 3; k++) FrontCard[k] = btCardData2[tagCardType2.cbTwoPare[k]];
              } else if (tagCardType2.bOnePare) {
                for (var k = 3; k >= 0; k--) if (this.GetCardLogicValue(btCardData2[k]) != this.GetCardLogicValue(btCardData2[tagCardType2.cbOnePare[0]])) {
                  btTemp[0] = BackCard[4] = btCardData2[k];
                  break;
                }
                this.RemoveCard(btTemp, 1, btCardData2, btCardCount2);
                SssLib_1.SssLib.CopyMemory(FrontCard, btCardData2, SssLib_1.SssLib.sizeof(FrontCard));
              } else {
                BackCard[4] = btCardData2[3];
                SssLib_1.SssLib.CopyMemory(FrontCard, btCardData2, SssLib_1.SssLib.sizeof(FrontCard));
              }
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                  bFirst = this.bfalse;
                }
              } else {
                btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  btFrontAllShuiShu = btAllShuiShu;
                }
              }
            }
          } else if (tagCardType1.bFlush) {
            var bThreeSame = this.bfalse;
            if (tagCardType1.bThreeSame) for (var j = 0; j < tagCardType1.btThreeSame; j++) {
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              for (var k = 0; k < 3; k++) FrontCard[k] = btCardData1[tagCardType1.cbThreeSame[3 * j + k]];
              this.RemoveCard(FrontCard, 3, btCardData1, btCardCount1);
              btCardCount2 = btCardCount1 -= 3;
              SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
              tagCardType2 = this.GetType(btCardData2, btCardCount2);
              if (tagCardType2.bFlush) {
                for (var k = 0; k < 5; k++) btTemp[k] = MidCard[k] = btCardData2[tagCardType2.cbFlush[k]];
                this.RemoveCard(btTemp, 5, btCardData2, btCardCount2);
                BackCard[4] = btCardData2[0];
              } else if (tagCardType2.bStraight) {
                for (var k = 0; k < 5; k++) btTemp[k] = MidCard[k] = btCardData2[tagCardType2.cbStraight[k]];
                this.RemoveCard(btTemp, 5, btCardData2, btCardCount2);
                BackCard[4] = btCardData2[0];
              } else {
                for (var k = 0; k < 5; k++) MidCard[k] = btCardData2[k];
                BackCard[4] = btCardData2[5];
              }
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  bThreeSame = this.btrue;
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                  bFirst = this.bfalse;
                }
              } else {
                btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                  bThreeSame = this.btrue;
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  btFrontAllShuiShu = btAllShuiShu;
                }
              }
            }
            if (bThreeSame == this.bfalse) {
              for (var j = 0; j < tagCardType1.btFlush; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 5; k++) MidCard[k] = btCardData1[tagCardType1.cbFlush[5 * j + k]];
                this.RemoveCard(MidCard, 5, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 5;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bTwoPare) {
                  BackCard[4] = btCardData2[tagCardType2.cbTwoPare[3]];
                  for (var k = 0; k < 3; k++) FrontCard[k] = btCardData2[tagCardType2.cbTwoPare[k]];
                } else if (tagCardType2.bOnePare) {
                  for (var k = 3; k >= 0; k--) if (this.GetCardLogicValue(btCardData2[k]) != this.GetCardLogicValue(btCardData2[tagCardType2.cbOnePare[0]])) {
                    btTemp[0] = BackCard[4] = btCardData2[k];
                    break;
                  }
                  this.RemoveCard(btTemp, 1, btCardData2, btCardCount2);
                  SssLib_1.SssLib.CopyMemory(FrontCard, btCardData2, SssLib_1.SssLib.sizeof(FrontCard));
                } else {
                  BackCard[4] = btCardData2[3];
                  SssLib_1.SssLib.CopyMemory(FrontCard, btCardData2, SssLib_1.SssLib.sizeof(FrontCard));
                }
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                    bFirst = this.bfalse;
                  }
                } else {
                  btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = btAllShuiShu;
                  }
                }
              }
              if (tagCardType1.bStraight) for (var j = 0; j < tagCardType1.btStraight; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 5; k++) MidCard[k] = btCardData1[tagCardType1.cbStraight[5 * j + k]];
                this.RemoveCard(MidCard, 5, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 5;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bTwoPare) {
                  BackCard[4] = btCardData2[tagCardType2.cbTwoPare[3]];
                  for (var k = 0; k < 3; k++) FrontCard[k] = btCardData2[tagCardType2.cbTwoPare[k]];
                } else if (tagCardType2.bOnePare) {
                  for (var k = 3; k >= 0; k--) if (this.GetCardLogicValue(btCardData2[k]) != this.GetCardLogicValue(btCardData2[tagCardType2.cbOnePare[0]])) {
                    btTemp[0] = BackCard[4] = btCardData2[k];
                    break;
                  }
                  this.RemoveCard(btTemp, 1, btCardData2, btCardCount2);
                  SssLib_1.SssLib.CopyMemory(FrontCard, btCardData2, SssLib_1.SssLib.sizeof(FrontCard));
                } else {
                  BackCard[4] = btCardData2[3];
                  SssLib_1.SssLib.CopyMemory(FrontCard, btCardData2, SssLib_1.SssLib.sizeof(FrontCard));
                }
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                    bFirst = this.bfalse;
                  }
                } else {
                  btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = btAllShuiShu;
                  }
                }
              }
              if (tagCardType1.bThreeSame) for (var j = 0; j < tagCardType1.btThreeSame; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 3; k++) MidCard[k] = btCardData1[tagCardType1.cbThreeSame[3 * j + k]];
                this.RemoveCard(MidCard, 3, btCardData1, btCardCount1);
                MidCard[3] = btCardData1[3];
                MidCard[4] = btCardData1[4];
                btCardCount2 = btCardCount1 -= 5;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                BackCard[4] = btCardData2[3];
                SssLib_1.SssLib.CopyMemory(FrontCard, btCardData2, SssLib_1.SssLib.sizeof(FrontCard));
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                    bFirst = this.bfalse;
                  }
                } else {
                  btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = btAllShuiShu;
                  }
                }
              }
            }
          } else if (tagCardType1.bStraight) {
            var bThreeSame = this.bfalse;
            if (tagCardType1.bThreeSame) for (var j = 0; j < tagCardType1.btThreeSame; j++) {
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              for (var k = 0; k < 3; k++) FrontCard[k] = btCardData1[tagCardType1.cbThreeSame[3 * j + k]];
              this.RemoveCard(FrontCard, 3, btCardData1, btCardCount1);
              btCardCount2 = btCardCount1 -= 3;
              SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
              tagCardType2 = this.GetType(btCardData2, btCardCount2);
              if (tagCardType2.bStraight) {
                for (var k = 0; k < 5; k++) btTemp[k] = MidCard[k] = btCardData2[tagCardType2.cbStraight[k]];
                this.RemoveCard(btTemp, 5, btCardData2, btCardCount2);
                BackCard[4] = btCardData2[0];
              } else {
                for (var k = 0; k < 5; k++) MidCard[k] = btCardData2[k];
                BackCard[4] = btCardData2[5];
              }
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  bThreeSame = this.btrue;
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                  bFirst = this.bfalse;
                }
              } else {
                btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                  bThreeSame = this.btrue;
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  btFrontAllShuiShu = btAllShuiShu;
                }
              }
            }
            if (bThreeSame == this.bfalse) {
              for (var j = 0; j < tagCardType1.btStraight; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 5; k++) MidCard[k] = btCardData1[tagCardType1.cbStraight[5 * j + k]];
                this.RemoveCard(MidCard, 5, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 5;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bTwoPare) {
                  BackCard[4] = btCardData2[tagCardType2.cbTwoPare[3]];
                  for (var k = 0; k < 3; k++) FrontCard[k] = btCardData2[tagCardType2.cbTwoPare[k]];
                } else if (tagCardType2.bOnePare) {
                  for (var k = 3; k >= 0; k--) if (this.GetCardLogicValue(btCardData2[k]) != this.GetCardLogicValue(btCardData2[tagCardType2.cbOnePare[0]])) {
                    btTemp[0] = BackCard[4] = btCardData2[k];
                    break;
                  }
                  this.RemoveCard(btTemp, 1, btCardData2, btCardCount2);
                  SssLib_1.SssLib.CopyMemory(FrontCard, btCardData2, SssLib_1.SssLib.sizeof(FrontCard));
                } else {
                  BackCard[4] = btCardData2[3];
                  SssLib_1.SssLib.CopyMemory(FrontCard, btCardData2, SssLib_1.SssLib.sizeof(FrontCard));
                }
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                    bFirst = this.bfalse;
                  }
                } else {
                  btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = btAllShuiShu;
                  }
                }
              }
              if (tagCardType1.bThreeSame) for (var j = 0; j < tagCardType1.btThreeSame; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 3; k++) MidCard[k] = btCardData1[tagCardType1.cbThreeSame[3 * j + k]];
                this.RemoveCard(MidCard, 3, btCardData1, btCardCount1);
                MidCard[3] = btCardData1[3];
                MidCard[4] = btCardData1[4];
                btCardCount2 = btCardCount1 -= 5;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                BackCard[4] = btCardData2[3];
                SssLib_1.SssLib.CopyMemory(FrontCard, btCardData2, SssLib_1.SssLib.sizeof(FrontCard));
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                    bFirst = this.bfalse;
                  }
                } else {
                  btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = btAllShuiShu;
                  }
                }
              }
            }
          } else if (tagCardType1.bThreeSame) for (var j = 0; j < tagCardType1.btThreeSame; j++) {
            btCardCount1 = btCardCount;
            SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
            for (var k = 0; k < 3; k++) MidCard[k] = btCardData1[tagCardType1.cbThreeSame[3 * j + k]];
            this.RemoveCard(MidCard, 3, btCardData1, btCardCount1);
            MidCard[3] = btCardData1[3];
            MidCard[4] = btCardData1[4];
            BackCard[4] = btCardData1[5];
            SssLib_1.SssLib.CopyMemory(FrontCard, btCardData1, SssLib_1.SssLib.sizeof(FrontCard));
            if (bFirst) {
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                bFirst = this.bfalse;
              }
            } else {
              btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = btAllShuiShu;
              }
            }
          } else if (tagCardType1.bTwoPare) if (tagCardType1.btOnePare >= 3) {
            btCardCount1 = btCardCount;
            SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
            btTemp[0] = FrontCard[0] = btCardData1[tagCardType1.cbOnePare[0]];
            btTemp[1] = FrontCard[1] = btCardData1[tagCardType1.cbOnePare[1]];
            btTemp[2] = MidCard[0] = btCardData1[tagCardType1.cbOnePare[2]];
            btTemp[3] = MidCard[1] = btCardData1[tagCardType1.cbOnePare[3]];
            btTemp[4] = MidCard[2] = btCardData1[tagCardType1.cbOnePare[4]];
            btTemp[5] = MidCard[3] = btCardData1[tagCardType1.cbOnePare[5]];
            this.RemoveCard(btTemp, 6, btCardData1, btCardCount1);
            FrontCard[2] = btCardData1[0];
            MidCard[4] = btCardData1[1];
            BackCard[4] = btCardData1[2];
            if (bFirst) {
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                bFirst = this.bfalse;
              }
            } else {
              btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = btAllShuiShu;
              }
            }
          } else for (var j = 0; j < tagCardType1.btTwoPare; j++) {
            btCardCount1 = btCardCount;
            SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
            for (var k = 0; k < 4; k++) MidCard[k] = btCardData1[tagCardType1.cbTwoPare[4 * j + k]];
            this.RemoveCard(MidCard, 4, btCardData1, btCardCount1);
            btCardCount2 = btCardCount1 -= 4;
            SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
            tagCardType2 = this.GetType(btCardData2, btCardCount2);
            if (tagCardType2.bTwoPare) {
              btTemp[0] = MidCard[4] = btCardData2[tagCardType2.cbTwoPare[3]];
              btTemp[1] = FrontCard[0] = btCardData2[tagCardType2.cbTwoPare[0]];
              btTemp[2] = FrontCard[1] = btCardData2[tagCardType2.cbTwoPare[1]];
              btTemp[3] = FrontCard[2] = btCardData2[tagCardType2.cbTwoPare[2]];
              this.RemoveCard(btTemp, 4, btCardData2, btCardCount2);
              BackCard[4] = btCardData2[0];
            } else if (tagCardType2.bOnePare) {
              btTemp[0] = FrontCard[0] = btCardData2[tagCardType2.cbOnePare[0]];
              btTemp[1] = FrontCard[1] = btCardData2[tagCardType2.cbOnePare[1]];
              this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
              FrontCard[2] = btCardData2[0];
              MidCard[4] = btCardData2[1];
              BackCard[4] = btCardData2[2];
            } else {
              BackCard[4] = btCardData2[4];
              MidCard[4] = btCardData2[3];
              SssLib_1.SssLib.CopyMemory(FrontCard, btCardData2, SssLib_1.SssLib.sizeof(FrontCard));
            }
            if (bFirst) {
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                bFirst = this.bfalse;
              }
            } else {
              btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = btAllShuiShu;
              }
            }
          } else if (tagCardType1.bOnePare) for (var j = 0; j < tagCardType1.btOnePare; j++) {
            btCardCount1 = btCardCount;
            SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
            for (var k = 0; k < 2; k++) MidCard[k] = btCardData1[tagCardType1.cbOnePare[2 * j + k]];
            this.RemoveCard(MidCard, 2, btCardData1, btCardCount1);
            btCardCount2 = btCardCount1 -= 2;
            SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
            BackCard[4] = btCardData2[6];
            MidCard[2] = btCardData2[5];
            MidCard[3] = btCardData2[4];
            MidCard[4] = btCardData2[3];
            SssLib_1.SssLib.CopyMemory(FrontCard, btCardData2, SssLib_1.SssLib.sizeof(FrontCard));
            if (bFirst) {
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                bFirst = this.bfalse;
              }
            } else {
              btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = btAllShuiShu;
              }
            }
          } else {
            btCardCount1 = btCardCount;
            SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
            BackCard[4] = btCardData1[8];
            MidCard[0] = btCardData1[0];
            MidCard[1] = btCardData1[4];
            MidCard[2] = btCardData1[5];
            MidCard[3] = btCardData1[6];
            MidCard[4] = btCardData1[7];
            FrontCard[0] = btCardData1[1];
            FrontCard[1] = btCardData1[2];
            FrontCard[2] = btCardData1[3];
            if (bFirst) {
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                bFirst = this.bfalse;
              }
            } else {
              btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && (btAllShuiShu > btFrontAllShuiShu || this.CompareCard(FrontFrontCard, FrontCard, 3, 3, this.bfalse) && btAllShuiShu == btFrontAllShuiShu)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = btAllShuiShu;
              }
            }
          }
        } else if (tagCardType.bGourd) {
          var bThreeSame = this.bfalse;
          for (var i = 0; i < tagCardType.btThreeSame; i++) {
            SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
            btCardCount = btHandCardCount;
            for (var j = 0; j < 3; j++) FrontCard[j] = btCardData[tagCardType.cbThreeSame[3 * i + j]];
            this.RemoveCard(FrontCard, 3, btCardData, btCardCount);
            btCardCount1 = btCardCount -= 3;
            SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
            tagCardType1 = this.GetType(btCardData1, btCardCount1);
            if (tagCardType1.bGourd) for (var j = 0; j < tagCardType1.btGourd; j++) {
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              for (var k = 0; k < 5; k++) BackCard[k] = btCardData1[tagCardType1.cbGourd[5 * j + k]];
              this.RemoveCard(BackCard, 5, btCardData1, btCardCount1);
              SssLib_1.SssLib.CopyMemory(MidCard, btCardData1, SssLib_1.SssLib.sizeof(MidCard));
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  bThreeSame = this.btrue;
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  bFirst = this.bfalse;
                }
              } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                bThreeSame = this.btrue;
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = btAllShuiShu;
              }
            }
            if (tagCardType1.bFlush) for (var j = 0; j < tagCardType1.btFlush; j++) {
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              for (var k = 0; k < 5; k++) BackCard[k] = btCardData1[tagCardType1.cbFlush[5 * j + k]];
              this.RemoveCard(BackCard, 5, btCardData1, btCardCount1);
              SssLib_1.SssLib.CopyMemory(MidCard, btCardData1, SssLib_1.SssLib.sizeof(MidCard));
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  bThreeSame = this.btrue;
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  bFirst = this.bfalse;
                }
              } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                bThreeSame = this.btrue;
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = btAllShuiShu;
              }
            }
            if (tagCardType1.bStraight) for (var j = 0; j < tagCardType1.btStraight; j++) {
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              for (var k = 0; k < 5; k++) BackCard[k] = btCardData1[tagCardType1.cbStraight[5 * j + k]];
              this.RemoveCard(BackCard, 5, btCardData1, btCardCount1);
              SssLib_1.SssLib.CopyMemory(MidCard, btCardData1, SssLib_1.SssLib.sizeof(MidCard));
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  bThreeSame = this.btrue;
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  bFirst = this.bfalse;
                }
              } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                bThreeSame = this.btrue;
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = btAllShuiShu;
              }
            }
            if (tagCardType1.bThreeSame) for (var j = 0; j < tagCardType1.btThreeSame; j++) {
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              for (var k = 0; k < 3; k++) BackCard[k] = btCardData1[tagCardType1.cbThreeSame[3 * j + k]];
              this.RemoveCard(BackCard, 3, btCardData1, btCardCount1);
              btCardCount2 = btCardCount1 -= 3;
              SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
              tagCardType2 = this.GetType(btCardData2, btCardCount2);
              if (tagCardType2.bThreeSame) for (var k = 0; k < tagCardType2.btThreeSame; k++) {
                for (var m = 0; m < 3; m++) MidCard[m] = btCardData2[tagCardType2.cbThreeSame[3 * k + m]];
                this.RemoveCard(MidCard, 3, btCardData2, btCardCount2);
                BackCard[3] = btCardData2[2];
                BackCard[4] = btCardData2[3];
                MidCard[3] = btCardData2[0];
                MidCard[4] = btCardData2[1];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    bThreeSame = this.btrue;
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  bThreeSame = this.btrue;
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  btFrontAllShuiShu = btAllShuiShu;
                }
              }
            }
          }
          if (bThreeSame == this.bfalse) {
            for (var i = 0; i < tagCardType.btGourd; i++) {
              SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
              btCardCount = btHandCardCount;
              for (var j = 0; j < 5; j++) BackCard[j] = btCardData[tagCardType.cbGourd[5 * i + j]];
              this.RemoveCard(BackCard, 5, btCardData, btCardCount);
              btCardCount1 = btCardCount -= 5;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              tagCardType1 = this.GetType(btCardData1, btCardCount1);
              if (tagCardType1.bGourd) for (var j = 0; j < tagCardType1.btGourd; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 5; k++) MidCard[k] = btCardData1[tagCardType1.cbGourd[5 * j + k]];
                this.RemoveCard(MidCard, 5, btCardData1, btCardCount1);
                SssLib_1.SssLib.CopyMemory(FrontCard, btCardData1, SssLib_1.SssLib.sizeof(FrontCard));
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              }
              if (tagCardType1.bFlush) for (var j = 0; j < tagCardType1.btFlush; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 5; k++) MidCard[k] = btCardData1[tagCardType1.cbFlush[5 * j + k]];
                this.RemoveCard(MidCard, 5, btCardData1, btCardCount1);
                SssLib_1.SssLib.CopyMemory(FrontCard, btCardData1, SssLib_1.SssLib.sizeof(FrontCard));
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              }
              if (tagCardType1.bStraight) for (var j = 0; j < tagCardType1.btStraight; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 5; k++) MidCard[k] = btCardData1[tagCardType1.cbStraight[5 * j + k]];
                this.RemoveCard(MidCard, 5, btCardData1, btCardCount1);
                SssLib_1.SssLib.CopyMemory(FrontCard, btCardData1, SssLib_1.SssLib.sizeof(FrontCard));
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              }
              if (tagCardType1.bThreeSame) for (var j = 0; j < tagCardType1.btThreeSame; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 3; k++) MidCard[k] = btCardData1[tagCardType1.cbThreeSame[3 * j + k]];
                this.RemoveCard(MidCard, 3, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 3;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bThreeSame) {
                  for (var k = 0; k < 3; k++) FrontCard[k] = btCardData2[tagCardType2.cbThreeSame[k]];
                  this.RemoveCard(FrontCard, 3, btCardData2, btCardCount2);
                  MidCard[3] = btCardData2[0];
                  MidCard[4] = btCardData2[1];
                } else if (tagCardType2.bTwoPare) {
                  for (var k = 0; k < 4; k++) btTemp[k] = k < 2 ? FrontCard[k] = btCardData2[tagCardType2.cbTwoPare[k]] : MidCard[k + 1] = btCardData2[tagCardType2.cbTwoPare[k]];
                  this.RemoveCard(btTemp, 4, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                } else if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[3] = btCardData2[1];
                  MidCard[4] = btCardData2[2];
                } else for (var k = 0; k < 5; k++) k < 3 ? FrontCard[k] = btCardData2[k] : MidCard[k] = btCardData2[k];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              }
              if (tagCardType1.bTwoPare) if (tagCardType1.btOnePare >= 3) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                btTemp[0] = FrontCard[0] = btCardData1[tagCardType1.cbOnePare[0]];
                btTemp[1] = FrontCard[1] = btCardData1[tagCardType1.cbOnePare[1]];
                btTemp[2] = MidCard[0] = btCardData1[tagCardType1.cbOnePare[2]];
                btTemp[3] = MidCard[1] = btCardData1[tagCardType1.cbOnePare[3]];
                btTemp[4] = MidCard[2] = btCardData1[tagCardType1.cbOnePare[4]];
                btTemp[5] = MidCard[3] = btCardData1[tagCardType1.cbOnePare[5]];
                this.RemoveCard(btTemp, 6, btCardData1, btCardCount1);
                FrontCard[2] = btCardData1[0];
                MidCard[4] = btCardData1[1];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                    bFirst = this.bfalse;
                  }
                } else {
                  btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = btAllShuiShu;
                  }
                }
              } else for (var j = 0; j < tagCardType1.btTwoPare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 4; k++) MidCard[k] = btCardData1[tagCardType1.cbTwoPare[4 * j + k]];
                this.RemoveCard(MidCard, 4, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 4;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bTwoPare) for (var k = 0; k < 4; k++) k < 3 ? FrontCard[k] = btCardData2[tagCardType2.cbTwoPare[k]] : MidCard[k + 1] = btCardData2[tagCardType2.cbTwoPare[k]]; else if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[4] = btCardData2[1];
                } else for (var k = 0; k < 4; k++) k < 3 ? FrontCard[k] = btCardData2[k] : MidCard[k + 1] = btCardData2[k];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              }
              if (tagCardType1.bOnePare) for (var j = 0; j < tagCardType1.btOnePare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 2; k++) MidCard[k] = btCardData1[tagCardType1.cbOnePare[2 * j + k]];
                this.RemoveCard(MidCard, 2, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 2;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[2] = btCardData2[1];
                  MidCard[3] = btCardData2[2];
                  MidCard[4] = btCardData2[3];
                } else for (var k = 0; k < 6; k++) k < 3 ? FrontCard[k] = btCardData2[k] : MidCard[k - 1] = btCardData2[k];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              }
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              MidCard[0] = btCardData1[0];
              MidCard[1] = btCardData1[4];
              MidCard[2] = btCardData1[5];
              MidCard[3] = btCardData1[6];
              MidCard[4] = btCardData1[7];
              FrontCard[0] = btCardData1[1];
              FrontCard[1] = btCardData1[2];
              FrontCard[2] = btCardData1[3];
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  bFirst = this.bfalse;
                }
              } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
              }
            }
            if (tagCardType.bFlush) for (var i = 0; i < tagCardType.btFlush; i++) {
              SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
              btCardCount = btHandCardCount;
              for (var j = 0; j < 5; j++) BackCard[j] = btCardData[tagCardType.cbFlush[5 * i + j]];
              this.RemoveCard(BackCard, 5, btCardData, btCardCount);
              btCardCount1 = btCardCount -= 5;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              tagCardType1 = this.GetType(btCardData1, btCardCount1);
              if (tagCardType1.bFlush) for (var j = 0; j < tagCardType1.btFlush; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 5; k++) MidCard[k] = btCardData1[tagCardType1.cbFlush[5 * j + k]];
                this.RemoveCard(MidCard, 5, btCardData1, btCardCount1);
                SssLib_1.SssLib.CopyMemory(FrontCard, btCardData1, SssLib_1.SssLib.sizeof(FrontCard));
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bStraight) for (var j = 0; j < tagCardType1.btStraight; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 5; k++) MidCard[k] = btCardData1[tagCardType1.cbStraight[5 * j + k]];
                this.RemoveCard(MidCard, 5, btCardData1, btCardCount1);
                SssLib_1.SssLib.CopyMemory(FrontCard, btCardData1, SssLib_1.SssLib.sizeof(FrontCard));
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bThreeSame) for (var j = 0; j < tagCardType1.btThreeSame; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 3; k++) MidCard[k] = btCardData1[tagCardType1.cbThreeSame[3 * j + k]];
                this.RemoveCard(MidCard, 3, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 3;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bThreeSame) {
                  for (var k = 0; k < 3; k++) FrontCard[k] = btCardData2[tagCardType2.cbThreeSame[k]];
                  this.RemoveCard(FrontCard, 3, btCardData2, btCardCount2);
                  MidCard[3] = btCardData2[0];
                  MidCard[4] = btCardData2[1];
                } else if (tagCardType2.bTwoPare) {
                  for (var k = 0; k < 4; k++) btTemp[k] = k < 2 ? FrontCard[k] = btCardData2[tagCardType2.cbTwoPare[k]] : MidCard[k + 1] = btCardData2[tagCardType2.cbTwoPare[k]];
                  this.RemoveCard(btTemp, 4, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                } else if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[3] = btCardData2[1];
                  MidCard[4] = btCardData2[2];
                } else for (var k = 0; k < 5; k++) k < 3 ? FrontCard[k] = btCardData2[k] : MidCard[k] = btCardData2[k];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bTwoPare) if (tagCardType1.btOnePare >= 3) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                btTemp[0] = FrontCard[0] = btCardData1[tagCardType1.cbOnePare[0]];
                btTemp[1] = FrontCard[1] = btCardData1[tagCardType1.cbOnePare[1]];
                btTemp[2] = MidCard[0] = btCardData1[tagCardType1.cbOnePare[2]];
                btTemp[3] = MidCard[1] = btCardData1[tagCardType1.cbOnePare[3]];
                btTemp[4] = MidCard[2] = btCardData1[tagCardType1.cbOnePare[4]];
                btTemp[5] = MidCard[3] = btCardData1[tagCardType1.cbOnePare[5]];
                this.RemoveCard(btTemp, 6, btCardData1, btCardCount1);
                FrontCard[2] = btCardData1[0];
                MidCard[4] = btCardData1[1];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                    bFirst = this.bfalse;
                  }
                } else {
                  btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = btAllShuiShu;
                  }
                }
              } else for (var j = 0; j < tagCardType1.btTwoPare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 4; k++) MidCard[k] = btCardData1[tagCardType1.cbTwoPare[4 * j + k]];
                this.RemoveCard(MidCard, 4, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 4;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bTwoPare) for (var k = 0; k < 4; k++) k < 3 ? FrontCard[k] = btCardData2[tagCardType2.cbTwoPare[k]] : MidCard[k + 1] = btCardData2[tagCardType2.cbTwoPare[k]]; else if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[4] = btCardData2[1];
                } else for (var k = 0; k < 4; k++) k < 3 ? FrontCard[k] = btCardData2[k] : MidCard[k + 1] = btCardData2[k];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bOnePare) for (var j = 0; j < tagCardType1.btOnePare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 2; k++) MidCard[k] = btCardData1[tagCardType1.cbOnePare[2 * j + k]];
                this.RemoveCard(MidCard, 2, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 2;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[2] = btCardData2[1];
                  MidCard[3] = btCardData2[2];
                  MidCard[4] = btCardData2[3];
                } else for (var k = 0; k < 6; k++) k < 3 ? FrontCard[k] = btCardData2[k] : MidCard[k - 1] = btCardData2[k];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              }
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              MidCard[0] = btCardData1[0];
              MidCard[1] = btCardData1[4];
              MidCard[2] = btCardData1[5];
              MidCard[3] = btCardData1[6];
              MidCard[4] = btCardData1[7];
              FrontCard[0] = btCardData1[1];
              FrontCard[1] = btCardData1[2];
              FrontCard[2] = btCardData1[3];
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  bFirst = this.bfalse;
                }
              } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
              }
            }
            if (tagCardType.bStraight) for (var i = 0; i < tagCardType.btStraight; i++) {
              SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
              btCardCount = btHandCardCount;
              for (var j = 0; j < 5; j++) BackCard[j] = btCardData[tagCardType.cbStraight[5 * i + j]];
              this.RemoveCard(BackCard, 5, btCardData, btCardCount);
              btCardCount1 = btCardCount -= 5;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              tagCardType1 = this.GetType(btCardData1, btCardCount1);
              if (tagCardType1.bStraight) for (var j = 0; j < tagCardType1.btStraight; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 5; k++) MidCard[k] = btCardData1[tagCardType1.cbStraight[5 * j + k]];
                this.RemoveCard(MidCard, 5, btCardData1, btCardCount1);
                SssLib_1.SssLib.CopyMemory(FrontCard, btCardData1, SssLib_1.SssLib.sizeof(FrontCard));
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bThreeSame) for (var j = 0; j < tagCardType1.btThreeSame; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 3; k++) MidCard[k] = btCardData1[tagCardType1.cbThreeSame[3 * j + k]];
                this.RemoveCard(MidCard, 3, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 3;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bThreeSame) {
                  for (var k = 0; k < 3; k++) FrontCard[k] = btCardData2[tagCardType2.cbThreeSame[k]];
                  this.RemoveCard(FrontCard, 3, btCardData2, btCardCount2);
                  MidCard[3] = btCardData2[0];
                  MidCard[4] = btCardData2[1];
                } else if (tagCardType2.bTwoPare) {
                  for (var k = 0; k < 4; k++) btTemp[k] = k < 2 ? FrontCard[k] = btCardData2[tagCardType2.cbTwoPare[k]] : MidCard[k + 1] = btCardData2[tagCardType2.cbTwoPare[k]];
                  this.RemoveCard(btTemp, 4, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                } else if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[3] = btCardData2[1];
                  MidCard[4] = btCardData2[2];
                } else for (var k = 0; k < 5; k++) k < 3 ? FrontCard[k] = btCardData2[k] : MidCard[k] = btCardData2[k];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bTwoPare) if (tagCardType1.btOnePare >= 3) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                btTemp[0] = FrontCard[0] = btCardData1[tagCardType1.cbOnePare[0]];
                btTemp[1] = FrontCard[1] = btCardData1[tagCardType1.cbOnePare[1]];
                btTemp[2] = MidCard[0] = btCardData1[tagCardType1.cbOnePare[2]];
                btTemp[3] = MidCard[1] = btCardData1[tagCardType1.cbOnePare[3]];
                btTemp[4] = MidCard[2] = btCardData1[tagCardType1.cbOnePare[4]];
                btTemp[5] = MidCard[3] = btCardData1[tagCardType1.cbOnePare[5]];
                this.RemoveCard(btTemp, 6, btCardData1, btCardCount1);
                FrontCard[2] = btCardData1[0];
                MidCard[4] = btCardData1[1];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                    bFirst = this.bfalse;
                  }
                } else {
                  btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = btAllShuiShu;
                  }
                }
              } else for (var j = 0; j < tagCardType1.btTwoPare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 4; k++) MidCard[k] = btCardData1[tagCardType1.cbTwoPare[4 * j + k]];
                this.RemoveCard(MidCard, 4, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 4;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bTwoPare) for (var k = 0; k < 4; k++) k < 3 ? FrontCard[k] = btCardData2[tagCardType2.cbTwoPare[k]] : MidCard[k + 1] = btCardData2[tagCardType2.cbTwoPare[k]]; else if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[4] = btCardData2[1];
                } else for (var k = 0; k < 4; k++) k < 3 ? FrontCard[k] = btCardData2[k] : MidCard[k + 1] = btCardData2[k];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bOnePare) for (var j = 0; j < tagCardType1.btOnePare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 2; k++) MidCard[k] = btCardData1[tagCardType1.cbOnePare[2 * j + k]];
                this.RemoveCard(MidCard, 2, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 2;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[2] = btCardData2[1];
                  MidCard[3] = btCardData2[2];
                  MidCard[4] = btCardData2[3];
                } else for (var k = 0; k < 6; k++) k < 3 ? FrontCard[k] = btCardData2[k] : MidCard[k - 1] = btCardData2[k];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              }
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              MidCard[0] = btCardData1[0];
              MidCard[1] = btCardData1[4];
              MidCard[2] = btCardData1[5];
              MidCard[3] = btCardData1[6];
              MidCard[4] = btCardData1[7];
              FrontCard[0] = btCardData1[1];
              FrontCard[1] = btCardData1[2];
              FrontCard[2] = btCardData1[3];
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  bFirst = this.bfalse;
                }
              } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
              }
            }
            if (tagCardType.bThreeSame) for (var i = 0; i < tagCardType.btThreeSame; i++) {
              SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
              btCardCount = btHandCardCount;
              for (var j = 0; j < 3; j++) BackCard[j] = btCardData[tagCardType.cbThreeSame[3 * i + j]];
              this.RemoveCard(BackCard, 3, btCardData, btCardCount);
              btCardCount1 = btCardCount -= 3;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              tagCardType1 = this.GetType(btCardData1, btCardCount1);
              if (tagCardType1.bThreeSame) for (var j = 0; j < tagCardType1.btThreeSame; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 3; k++) MidCard[k] = btCardData1[tagCardType1.cbThreeSame[3 * j + k]];
                this.RemoveCard(MidCard, 3, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 3;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bThreeSame) {
                  for (var k = 0; k < 3; k++) FrontCard[k] = btCardData2[tagCardType2.cbThreeSame[k]];
                  this.RemoveCard(FrontCard, 3, btCardData2, btCardCount2);
                  MidCard[3] = btCardData2[0];
                  MidCard[4] = btCardData2[1];
                  BackCard[3] = btCardData2[2];
                  BackCard[4] = btCardData2[3];
                } else if (tagCardType2.bTwoPare) {
                  for (var k = 0; k < 4; k++) btTemp[k] = k < 2 ? FrontCard[k] = btCardData2[tagCardType2.cbTwoPare[k]] : BackCard[k + 1] = btCardData2[tagCardType2.cbTwoPare[k]];
                  this.RemoveCard(btTemp, 4, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[3] = btCardData2[1];
                  MidCard[4] = btCardData2[2];
                } else if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[3] = btCardData2[1];
                  MidCard[4] = btCardData2[2];
                  BackCard[3] = btCardData2[3];
                  BackCard[4] = btCardData2[4];
                } else {
                  FrontCard[0] = btCardData2[0];
                  FrontCard[1] = btCardData2[1];
                  FrontCard[2] = btCardData2[2];
                  MidCard[3] = btCardData2[3];
                  MidCard[4] = btCardData2[4];
                  BackCard[3] = btCardData2[5];
                  BackCard[4] = btCardData2[6];
                }
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bTwoPare) if (tagCardType1.btOnePare >= 3) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                btTemp[0] = FrontCard[0] = btCardData1[tagCardType1.cbOnePare[0]];
                btTemp[1] = FrontCard[1] = btCardData1[tagCardType1.cbOnePare[1]];
                btTemp[2] = MidCard[0] = btCardData1[tagCardType1.cbOnePare[2]];
                btTemp[3] = MidCard[1] = btCardData1[tagCardType1.cbOnePare[3]];
                btTemp[4] = MidCard[2] = btCardData1[tagCardType1.cbOnePare[4]];
                btTemp[5] = MidCard[3] = btCardData1[tagCardType1.cbOnePare[5]];
                this.RemoveCard(btTemp, 6, btCardData1, btCardCount1);
                FrontCard[2] = btCardData1[0];
                MidCard[4] = btCardData1[1];
                BackCard[3] = btCardData1[2];
                BackCard[4] = btCardData1[3];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                    bFirst = this.bfalse;
                  }
                } else {
                  btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = btAllShuiShu;
                  }
                }
              } else for (var j = 0; j < tagCardType1.btTwoPare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 4; k++) MidCard[k] = btCardData1[tagCardType1.cbTwoPare[4 * j + k]];
                this.RemoveCard(MidCard, 4, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 4;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bTwoPare) {
                  for (var k = 0; k < 4; k++) btTemp[k] = k < 3 ? FrontCard[k] = btCardData2[tagCardType2.cbTwoPare[k]] : MidCard[k + 1] = btCardData2[tagCardType2.cbTwoPare[k]];
                  this.RemoveCard(btTemp, 4, btCardData2, btCardCount2);
                  BackCard[3] = btCardData2[0];
                  BackCard[4] = btCardData2[1];
                } else if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[4] = btCardData2[1];
                  BackCard[3] = btCardData2[2];
                  BackCard[4] = btCardData2[3];
                } else {
                  FrontCard[0] = btCardData2[0];
                  FrontCard[1] = btCardData2[1];
                  FrontCard[2] = btCardData2[2];
                  MidCard[4] = btCardData2[3];
                  BackCard[3] = btCardData2[4];
                  BackCard[4] = btCardData2[5];
                }
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bOnePare) for (var j = 0; j < tagCardType1.btOnePare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 2; k++) MidCard[k] = btCardData1[tagCardType1.cbOnePare[2 * j + k]];
                this.RemoveCard(MidCard, 2, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 2;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[2] = btCardData2[1];
                  MidCard[3] = btCardData2[2];
                  MidCard[4] = btCardData2[3];
                  BackCard[3] = btCardData2[4];
                  BackCard[4] = btCardData2[5];
                } else {
                  FrontCard[0] = btCardData2[0];
                  FrontCard[1] = btCardData2[1];
                  FrontCard[2] = btCardData2[2];
                  MidCard[2] = btCardData2[3];
                  MidCard[3] = btCardData2[4];
                  MidCard[4] = btCardData2[5];
                  BackCard[3] = btCardData2[6];
                  BackCard[4] = btCardData2[7];
                }
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              }
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              MidCard[0] = btCardData1[0];
              MidCard[1] = btCardData1[4];
              MidCard[2] = btCardData1[5];
              MidCard[3] = btCardData1[6];
              MidCard[4] = btCardData1[7];
              BackCard[3] = btCardData1[8];
              BackCard[4] = btCardData1[9];
              FrontCard[0] = btCardData1[1];
              FrontCard[1] = btCardData1[2];
              FrontCard[2] = btCardData1[3];
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  bFirst = this.bfalse;
                }
              } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
              }
            }
            if (tagCardType.bTwoPare) if (tagCardType.btOnePare < 4) for (var i = 0; i < tagCardType.btTwoPare; i++) {
              SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
              btCardCount = btHandCardCount;
              for (var j = 0; j < 4; j++) BackCard[j] = btCardData[tagCardType.cbTwoPare[4 * i + j]];
              this.RemoveCard(BackCard, 4, btCardData, btCardCount);
              btCardCount1 = btCardCount -= 4;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              tagCardType1 = this.GetType(btCardData1, btCardCount1);
              if (tagCardType1.bTwoPare) if (tagCardType1.btOnePare >= 3) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                btTemp[0] = FrontCard[0] = btCardData1[tagCardType1.cbOnePare[0]];
                btTemp[1] = FrontCard[1] = btCardData1[tagCardType1.cbOnePare[1]];
                btTemp[2] = MidCard[0] = btCardData1[tagCardType1.cbOnePare[2]];
                btTemp[3] = MidCard[1] = btCardData1[tagCardType1.cbOnePare[3]];
                btTemp[4] = MidCard[2] = btCardData1[tagCardType1.cbOnePare[4]];
                btTemp[5] = MidCard[3] = btCardData1[tagCardType1.cbOnePare[5]];
                this.RemoveCard(btTemp, 6, btCardData1, btCardCount1);
                FrontCard[2] = btCardData1[0];
                MidCard[4] = btCardData1[1];
                BackCard[4] = btCardData1[2];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                    bFirst = this.bfalse;
                  }
                } else {
                  btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = btAllShuiShu;
                  }
                }
              } else for (var j = 0; j < tagCardType1.btTwoPare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 4; k++) MidCard[k] = btCardData1[tagCardType1.cbTwoPare[4 * j + k]];
                this.RemoveCard(MidCard, 4, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 4;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bTwoPare) {
                  for (var k = 0; k < 4; k++) btTemp[k] = k < 3 ? FrontCard[k] = btCardData2[tagCardType2.cbTwoPare[k]] : MidCard[k + 1] = btCardData2[tagCardType2.cbTwoPare[k]];
                  this.RemoveCard(btTemp, 4, btCardData2, btCardCount2);
                  BackCard[4] = btCardData2[0];
                } else if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[4] = btCardData2[1];
                  BackCard[4] = btCardData2[2];
                } else {
                  FrontCard[0] = btCardData2[0];
                  FrontCard[1] = btCardData2[1];
                  FrontCard[2] = btCardData2[2];
                  MidCard[4] = btCardData2[3];
                  BackCard[4] = btCardData2[4];
                }
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bOnePare) for (var j = 0; j < tagCardType1.btOnePare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 2; k++) MidCard[k] = btCardData1[tagCardType1.cbOnePare[2 * j + k]];
                this.RemoveCard(MidCard, 2, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 2;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[2] = btCardData2[1];
                  MidCard[3] = btCardData2[2];
                  MidCard[4] = btCardData2[3];
                  BackCard[4] = btCardData2[4];
                } else {
                  FrontCard[0] = btCardData2[0];
                  FrontCard[1] = btCardData2[1];
                  FrontCard[2] = btCardData2[2];
                  MidCard[2] = btCardData2[3];
                  MidCard[3] = btCardData2[4];
                  MidCard[4] = btCardData2[5];
                  BackCard[4] = btCardData2[6];
                }
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              }
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              MidCard[0] = btCardData1[0];
              MidCard[1] = btCardData1[4];
              MidCard[2] = btCardData1[5];
              MidCard[3] = btCardData1[6];
              MidCard[4] = btCardData1[7];
              BackCard[4] = btCardData1[8];
              FrontCard[0] = btCardData1[1];
              FrontCard[1] = btCardData1[2];
              FrontCard[2] = btCardData1[3];
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  bFirst = this.bfalse;
                }
              } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
              }
            } else if (4 == tagCardType.btOnePare) {
              SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
              btCardCount = btHandCardCount;
              btTemp[0] = BackCard[0] = btCardData[tagCardType.cbOnePare[0]];
              btTemp[1] = BackCard[1] = btCardData[tagCardType.cbOnePare[1]];
              btTemp[2] = BackCard[2] = btCardData[tagCardType.cbOnePare[6]];
              btTemp[3] = BackCard[3] = btCardData[tagCardType.cbOnePare[7]];
              btTemp[4] = MidCard[0] = btCardData[tagCardType.cbOnePare[2]];
              btTemp[5] = MidCard[1] = btCardData[tagCardType.cbOnePare[3]];
              btTemp[6] = MidCard[2] = btCardData[tagCardType.cbOnePare[4]];
              btTemp[7] = MidCard[3] = btCardData[tagCardType.cbOnePare[5]];
              this.RemoveCard(btTemp, 8, btCardData, btCardCount);
              FrontCard[0] = btCardData[0];
              FrontCard[1] = btCardData[1];
              FrontCard[2] = btCardData[2];
              MidCard[4] = btCardData[3];
              BackCard[4] = btCardData[4];
              if (14 == this.GetCardLogicValue(FrontCard[0]) && 13 == this.GetCardLogicValue(FrontCard[1])) {
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else {
                SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
                btCardCount = btHandCardCount;
                btTemp[0] = BackCard[0] = btCardData[tagCardType.cbOnePare[4]];
                btTemp[1] = BackCard[1] = btCardData[tagCardType.cbOnePare[5]];
                btTemp[2] = BackCard[2] = btCardData[tagCardType.cbOnePare[6]];
                btTemp[3] = BackCard[3] = btCardData[tagCardType.cbOnePare[7]];
                btTemp[4] = MidCard[0] = btCardData[tagCardType.cbOnePare[0]];
                btTemp[5] = MidCard[1] = btCardData[tagCardType.cbOnePare[1]];
                btTemp[6] = FrontCard[0] = btCardData[tagCardType.cbOnePare[2]];
                btTemp[7] = FrontCard[1] = btCardData[tagCardType.cbOnePare[3]];
                this.RemoveCard(btTemp, 8, btCardData, btCardCount);
                FrontCard[2] = btCardData[0];
                MidCard[2] = btCardData[1];
                MidCard[3] = btCardData[2];
                MidCard[4] = btCardData[3];
                BackCard[4] = btCardData[4];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              }
            } else if (5 == tagCardType.btOnePare) {
              SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
              btCardCount = btHandCardCount;
              btTemp[0] = FrontCard[0] = btCardData[tagCardType.cbOnePare[0]];
              btTemp[1] = FrontCard[1] = btCardData[tagCardType.cbOnePare[1]];
              btTemp[2] = MidCard[0] = btCardData[tagCardType.cbOnePare[4]];
              btTemp[3] = MidCard[1] = btCardData[tagCardType.cbOnePare[5]];
              btTemp[4] = MidCard[2] = btCardData[tagCardType.cbOnePare[6]];
              btTemp[5] = MidCard[3] = btCardData[tagCardType.cbOnePare[7]];
              btTemp[6] = BackCard[0] = btCardData[tagCardType.cbOnePare[2]];
              btTemp[7] = BackCard[1] = btCardData[tagCardType.cbOnePare[3]];
              btTemp[8] = BackCard[2] = btCardData[tagCardType.cbOnePare[8]];
              btTemp[9] = BackCard[3] = btCardData[tagCardType.cbOnePare[9]];
              this.RemoveCard(btTemp, 10, btCardData, btCardCount);
              FrontCard[2] = btCardData[0];
              MidCard[4] = btCardData[1];
              BackCard[4] = btCardData[2];
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  bFirst = this.bfalse;
                }
              } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
              }
            }
            if (tagCardType.bOnePare) for (var i = 0; i < tagCardType.btOnePare; i++) {
              SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
              btCardCount = btHandCardCount;
              for (var j = 0; j < 2; j++) BackCard[j] = btCardData[tagCardType.cbOnePare[2 * i + j]];
              this.RemoveCard(BackCard, 2, btCardData, btCardCount);
              btCardCount1 = btCardCount -= 2;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              tagCardType1 = this.GetType(btCardData1, btCardCount1);
              if (tagCardType1.bOnePare) for (var j = 0; j < tagCardType1.btOnePare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 2; k++) MidCard[k] = btCardData1[tagCardType1.cbOnePare[2 * j + k]];
                this.RemoveCard(MidCard, 2, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 2;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[2] = btCardData2[1];
                  MidCard[3] = btCardData2[2];
                  MidCard[4] = btCardData2[3];
                  BackCard[2] = btCardData2[4];
                  BackCard[3] = btCardData2[5];
                  BackCard[4] = btCardData2[6];
                } else {
                  FrontCard[0] = btCardData2[0];
                  FrontCard[1] = btCardData2[1];
                  FrontCard[2] = btCardData2[2];
                  MidCard[2] = btCardData2[3];
                  MidCard[3] = btCardData2[4];
                  MidCard[4] = btCardData2[5];
                  BackCard[2] = btCardData2[6];
                  BackCard[3] = btCardData2[7];
                  BackCard[4] = btCardData2[8];
                }
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              }
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              MidCard[0] = btCardData1[0];
              MidCard[1] = btCardData1[4];
              MidCard[2] = btCardData1[5];
              MidCard[3] = btCardData1[6];
              MidCard[4] = btCardData1[7];
              BackCard[2] = btCardData1[8];
              BackCard[3] = btCardData1[9];
              BackCard[4] = btCardData1[10];
              FrontCard[0] = btCardData1[1];
              FrontCard[1] = btCardData1[2];
              FrontCard[2] = btCardData1[3];
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  bFirst = this.bfalse;
                }
              } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
              }
            }
          }
        } else if (tagCardType.bFlush) {
          var bThreeSame = this.bfalse;
          for (var i = 0; i < tagCardType.btThreeSame; i++) {
            SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
            btCardCount = btHandCardCount;
            for (var j = 0; j < 3; j++) FrontCard[j] = btCardData[tagCardType.cbThreeSame[3 * i + j]];
            this.RemoveCard(FrontCard, 3, btCardData, btCardCount);
            btCardCount1 = btCardCount -= 3;
            SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
            tagCardType1 = this.GetType(btCardData1, btCardCount1);
            if (tagCardType1.bFlush) for (var j = 0; j < tagCardType1.btFlush; j++) {
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              for (var k = 0; k < 5; k++) BackCard[k] = btCardData1[tagCardType1.cbFlush[5 * j + k]];
              this.RemoveCard(BackCard, 5, btCardData1, btCardCount1);
              SssLib_1.SssLib.CopyMemory(MidCard, btCardData1, SssLib_1.SssLib.sizeof(MidCard));
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  bThreeSame = this.btrue;
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  bFirst = this.bfalse;
                }
              } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                bThreeSame = this.btrue;
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = btAllShuiShu;
              }
            }
            if (tagCardType1.bStraight) for (var j = 0; j < tagCardType1.btStraight; j++) {
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              for (var k = 0; k < 5; k++) BackCard[k] = btCardData1[tagCardType1.cbStraight[5 * j + k]];
              this.RemoveCard(BackCard, 5, btCardData1, btCardCount1);
              SssLib_1.SssLib.CopyMemory(MidCard, btCardData1, SssLib_1.SssLib.sizeof(MidCard));
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  bThreeSame = this.btrue;
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  bFirst = this.bfalse;
                }
              } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                bThreeSame = this.btrue;
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = btAllShuiShu;
              }
            }
            if (tagCardType1.bThreeSame) for (var j = 0; j < tagCardType1.btThreeSame; j++) {
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              for (var k = 0; k < 3; k++) BackCard[k] = btCardData1[tagCardType1.cbThreeSame[3 * j + k]];
              this.RemoveCard(BackCard, 3, btCardData1, btCardCount1);
              btCardCount2 = btCardCount1 -= 3;
              SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
              tagCardType2 = this.GetType(btCardData2, btCardCount2);
              if (tagCardType2.bThreeSame) for (var k = 0; k < tagCardType2.btThreeSame; k++) {
                for (var m = 0; m < 3; m++) MidCard[m] = btCardData2[tagCardType2.cbThreeSame[3 * k + m]];
                this.RemoveCard(MidCard, 3, btCardData2, btCardCount2);
                BackCard[3] = btCardData2[2];
                BackCard[4] = btCardData2[3];
                MidCard[3] = btCardData2[0];
                MidCard[4] = btCardData2[1];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    bThreeSame = this.btrue;
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  bThreeSame = this.btrue;
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  btFrontAllShuiShu = btAllShuiShu;
                }
              }
            }
          }
          if (bThreeSame == this.bfalse) {
            if (tagCardType.bFlush) for (var i = 0; i < tagCardType.btFlush; i++) {
              SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
              btCardCount = btHandCardCount;
              for (var j = 0; j < 5; j++) BackCard[j] = btCardData[tagCardType.cbFlush[5 * i + j]];
              this.RemoveCard(BackCard, 5, btCardData, btCardCount);
              btCardCount1 = btCardCount -= 5;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              tagCardType1 = this.GetType(btCardData1, btCardCount1);
              if (tagCardType1.bFlush) for (var j = 0; j < tagCardType1.btFlush; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 5; k++) MidCard[k] = btCardData1[tagCardType1.cbFlush[5 * j + k]];
                this.RemoveCard(MidCard, 5, btCardData1, btCardCount1);
                SssLib_1.SssLib.CopyMemory(FrontCard, btCardData1, SssLib_1.SssLib.sizeof(FrontCard));
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bStraight) for (var j = 0; j < tagCardType1.btStraight; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 5; k++) MidCard[k] = btCardData1[tagCardType1.cbStraight[5 * j + k]];
                this.RemoveCard(MidCard, 5, btCardData1, btCardCount1);
                SssLib_1.SssLib.CopyMemory(FrontCard, btCardData1, SssLib_1.SssLib.sizeof(FrontCard));
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bThreeSame) for (var j = 0; j < tagCardType1.btThreeSame; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 3; k++) MidCard[k] = btCardData1[tagCardType1.cbThreeSame[3 * j + k]];
                this.RemoveCard(MidCard, 3, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 3;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bThreeSame) {
                  for (var k = 0; k < 3; k++) FrontCard[k] = btCardData2[tagCardType2.cbThreeSame[k]];
                  this.RemoveCard(FrontCard, 3, btCardData2, btCardCount2);
                  MidCard[3] = btCardData2[0];
                  MidCard[4] = btCardData2[1];
                } else if (tagCardType2.bTwoPare) {
                  for (var k = 0; k < 4; k++) btTemp[k] = k < 2 ? FrontCard[k] = btCardData2[tagCardType2.cbTwoPare[k]] : MidCard[k + 1] = btCardData2[tagCardType2.cbTwoPare[k]];
                  this.RemoveCard(btTemp, 4, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                } else if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[3] = btCardData2[1];
                  MidCard[4] = btCardData2[2];
                } else for (var k = 0; k < 5; k++) k < 3 ? FrontCard[k] = btCardData2[k] : MidCard[k] = btCardData2[k];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bTwoPare) if (tagCardType1.btOnePare >= 3) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                btTemp[0] = FrontCard[0] = btCardData1[tagCardType1.cbOnePare[0]];
                btTemp[1] = FrontCard[1] = btCardData1[tagCardType1.cbOnePare[1]];
                btTemp[2] = MidCard[0] = btCardData1[tagCardType1.cbOnePare[2]];
                btTemp[3] = MidCard[1] = btCardData1[tagCardType1.cbOnePare[3]];
                btTemp[4] = MidCard[2] = btCardData1[tagCardType1.cbOnePare[4]];
                btTemp[5] = MidCard[3] = btCardData1[tagCardType1.cbOnePare[5]];
                this.RemoveCard(btTemp, 6, btCardData1, btCardCount1);
                FrontCard[2] = btCardData1[0];
                MidCard[4] = btCardData1[1];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                    bFirst = this.bfalse;
                  }
                } else {
                  btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = btAllShuiShu;
                  }
                }
              } else for (var j = 0; j < tagCardType1.btTwoPare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 4; k++) MidCard[k] = btCardData1[tagCardType1.cbTwoPare[4 * j + k]];
                this.RemoveCard(MidCard, 4, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 4;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bTwoPare) for (var k = 0; k < 4; k++) k < 3 ? FrontCard[k] = btCardData2[tagCardType2.cbTwoPare[k]] : MidCard[k + 1] = btCardData2[tagCardType2.cbTwoPare[k]]; else if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[4] = btCardData2[1];
                } else for (var k = 0; k < 4; k++) k < 3 ? FrontCard[k] = btCardData2[k] : MidCard[k + 1] = btCardData2[k];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bOnePare) for (var j = 0; j < tagCardType1.btOnePare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 2; k++) MidCard[k] = btCardData1[tagCardType1.cbOnePare[2 * j + k]];
                this.RemoveCard(MidCard, 2, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 2;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[2] = btCardData2[1];
                  MidCard[3] = btCardData2[2];
                  MidCard[4] = btCardData2[3];
                } else for (var k = 0; k < 6; k++) k < 3 ? FrontCard[k] = btCardData2[k] : MidCard[k - 1] = btCardData2[k];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              }
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              MidCard[0] = btCardData1[0];
              MidCard[1] = btCardData1[4];
              MidCard[2] = btCardData1[5];
              MidCard[3] = btCardData1[6];
              MidCard[4] = btCardData1[7];
              FrontCard[0] = btCardData1[1];
              FrontCard[1] = btCardData1[2];
              FrontCard[2] = btCardData1[3];
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  bFirst = this.bfalse;
                }
              } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
              }
            }
            if (tagCardType.bStraight) for (var i = 0; i < tagCardType.btStraight; i++) {
              SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
              btCardCount = btHandCardCount;
              for (var j = 0; j < 5; j++) BackCard[j] = btCardData[tagCardType.cbStraight[5 * i + j]];
              this.RemoveCard(BackCard, 5, btCardData, btCardCount);
              btCardCount1 = btCardCount -= 5;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              tagCardType1 = this.GetType(btCardData1, btCardCount1);
              if (tagCardType1.bStraight) for (var j = 0; j < tagCardType1.btStraight; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 5; k++) MidCard[k] = btCardData1[tagCardType1.cbStraight[5 * j + k]];
                this.RemoveCard(MidCard, 5, btCardData1, btCardCount1);
                SssLib_1.SssLib.CopyMemory(FrontCard, btCardData1, SssLib_1.SssLib.sizeof(FrontCard));
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bThreeSame) for (var j = 0; j < tagCardType1.btThreeSame; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 3; k++) MidCard[k] = btCardData1[tagCardType1.cbThreeSame[3 * j + k]];
                this.RemoveCard(MidCard, 3, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 3;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bThreeSame) {
                  for (var k = 0; k < 3; k++) FrontCard[k] = btCardData2[tagCardType2.cbThreeSame[k]];
                  this.RemoveCard(FrontCard, 3, btCardData2, btCardCount2);
                  MidCard[3] = btCardData2[0];
                  MidCard[4] = btCardData2[1];
                } else if (tagCardType2.bTwoPare) {
                  for (var k = 0; k < 4; k++) btTemp[k] = k < 2 ? FrontCard[k] = btCardData2[tagCardType2.cbTwoPare[k]] : MidCard[k + 1] = btCardData2[tagCardType2.cbTwoPare[k]];
                  this.RemoveCard(btTemp, 4, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                } else if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[3] = btCardData2[1];
                  MidCard[4] = btCardData2[2];
                } else for (var k = 0; k < 5; k++) k < 3 ? FrontCard[k] = btCardData2[k] : MidCard[k] = btCardData2[k];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bTwoPare) if (tagCardType1.btOnePare >= 3) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                btTemp[0] = FrontCard[0] = btCardData1[tagCardType1.cbOnePare[0]];
                btTemp[1] = FrontCard[1] = btCardData1[tagCardType1.cbOnePare[1]];
                btTemp[2] = MidCard[0] = btCardData1[tagCardType1.cbOnePare[2]];
                btTemp[3] = MidCard[1] = btCardData1[tagCardType1.cbOnePare[3]];
                btTemp[4] = MidCard[2] = btCardData1[tagCardType1.cbOnePare[4]];
                btTemp[5] = MidCard[3] = btCardData1[tagCardType1.cbOnePare[5]];
                this.RemoveCard(btTemp, 6, btCardData1, btCardCount1);
                FrontCard[2] = btCardData1[0];
                MidCard[4] = btCardData1[1];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                    bFirst = this.bfalse;
                  }
                } else {
                  btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = btAllShuiShu;
                  }
                }
              } else for (var j = 0; j < tagCardType1.btTwoPare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 4; k++) MidCard[k] = btCardData1[tagCardType1.cbTwoPare[4 * j + k]];
                this.RemoveCard(MidCard, 4, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 4;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bTwoPare) for (var k = 0; k < 4; k++) k < 3 ? FrontCard[k] = btCardData2[tagCardType2.cbTwoPare[k]] : MidCard[k + 1] = btCardData2[tagCardType2.cbTwoPare[k]]; else if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[4] = btCardData2[1];
                } else for (var k = 0; k < 4; k++) k < 3 ? FrontCard[k] = btCardData2[k] : MidCard[k + 1] = btCardData2[k];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bOnePare) for (var j = 0; j < tagCardType1.btOnePare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 2; k++) MidCard[k] = btCardData1[tagCardType1.cbOnePare[2 * j + k]];
                this.RemoveCard(MidCard, 2, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 2;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[2] = btCardData2[1];
                  MidCard[3] = btCardData2[2];
                  MidCard[4] = btCardData2[3];
                } else for (var k = 0; k < 6; k++) k < 3 ? FrontCard[k] = btCardData2[k] : MidCard[k - 1] = btCardData2[k];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              }
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              MidCard[0] = btCardData1[0];
              MidCard[1] = btCardData1[4];
              MidCard[2] = btCardData1[5];
              MidCard[3] = btCardData1[6];
              MidCard[4] = btCardData1[7];
              FrontCard[0] = btCardData1[1];
              FrontCard[1] = btCardData1[2];
              FrontCard[2] = btCardData1[3];
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  bFirst = this.bfalse;
                }
              } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
              }
            }
            if (tagCardType.bThreeSame) for (var i = 0; i < tagCardType.btThreeSame; i++) {
              SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
              btCardCount = btHandCardCount;
              for (var j = 0; j < 3; j++) BackCard[j] = btCardData[tagCardType.cbThreeSame[3 * i + j]];
              this.RemoveCard(BackCard, 3, btCardData, btCardCount);
              btCardCount1 = btCardCount -= 3;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              tagCardType1 = this.GetType(btCardData1, btCardCount1);
              if (tagCardType1.bThreeSame) for (var j = 0; j < tagCardType1.btThreeSame; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 3; k++) MidCard[k] = btCardData1[tagCardType1.cbThreeSame[3 * j + k]];
                this.RemoveCard(MidCard, 3, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 3;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bThreeSame) {
                  for (var k = 0; k < 3; k++) FrontCard[k] = btCardData2[tagCardType2.cbThreeSame[k]];
                  this.RemoveCard(FrontCard, 3, btCardData2, btCardCount2);
                  MidCard[3] = btCardData2[0];
                  MidCard[4] = btCardData2[1];
                  BackCard[3] = btCardData2[2];
                  BackCard[4] = btCardData2[3];
                } else if (tagCardType2.bTwoPare) {
                  for (var k = 0; k < 4; k++) btTemp[k] = k < 2 ? FrontCard[k] = btCardData2[tagCardType2.cbTwoPare[k]] : BackCard[k + 1] = btCardData2[tagCardType2.cbTwoPare[k]];
                  this.RemoveCard(btTemp, 4, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[3] = btCardData2[1];
                  MidCard[4] = btCardData2[2];
                } else if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[3] = btCardData2[1];
                  MidCard[4] = btCardData2[2];
                  BackCard[3] = btCardData2[3];
                  BackCard[4] = btCardData2[4];
                } else {
                  FrontCard[0] = btCardData2[0];
                  FrontCard[1] = btCardData2[1];
                  FrontCard[2] = btCardData2[2];
                  MidCard[3] = btCardData2[3];
                  MidCard[4] = btCardData2[4];
                  BackCard[3] = btCardData2[5];
                  BackCard[4] = btCardData2[6];
                }
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bTwoPare) if (tagCardType1.btOnePare >= 3) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                btTemp[0] = FrontCard[0] = btCardData1[tagCardType1.cbOnePare[0]];
                btTemp[1] = FrontCard[1] = btCardData1[tagCardType1.cbOnePare[1]];
                btTemp[2] = MidCard[0] = btCardData1[tagCardType1.cbOnePare[2]];
                btTemp[3] = MidCard[1] = btCardData1[tagCardType1.cbOnePare[3]];
                btTemp[4] = MidCard[2] = btCardData1[tagCardType1.cbOnePare[4]];
                btTemp[5] = MidCard[3] = btCardData1[tagCardType1.cbOnePare[5]];
                this.RemoveCard(btTemp, 6, btCardData1, btCardCount1);
                FrontCard[2] = btCardData1[0];
                MidCard[4] = btCardData1[1];
                BackCard[3] = btCardData1[2];
                BackCard[4] = btCardData1[3];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                    bFirst = this.bfalse;
                  }
                } else {
                  btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = btAllShuiShu;
                  }
                }
              } else for (var j = 0; j < tagCardType1.btTwoPare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 4; k++) MidCard[k] = btCardData1[tagCardType1.cbTwoPare[4 * j + k]];
                this.RemoveCard(MidCard, 4, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 4;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bTwoPare) {
                  for (var k = 0; k < 4; k++) btTemp[k] = k < 3 ? FrontCard[k] = btCardData2[tagCardType2.cbTwoPare[k]] : MidCard[k + 1] = btCardData2[tagCardType2.cbTwoPare[k]];
                  this.RemoveCard(btTemp, 4, btCardData2, btCardCount2);
                  BackCard[3] = btCardData2[0];
                  BackCard[4] = btCardData2[1];
                } else if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[4] = btCardData2[1];
                  BackCard[3] = btCardData2[2];
                  BackCard[4] = btCardData2[3];
                } else {
                  FrontCard[0] = btCardData2[0];
                  FrontCard[1] = btCardData2[1];
                  FrontCard[2] = btCardData2[2];
                  MidCard[4] = btCardData2[3];
                  BackCard[3] = btCardData2[4];
                  BackCard[4] = btCardData2[5];
                }
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bOnePare) for (var j = 0; j < tagCardType1.btOnePare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 2; k++) MidCard[k] = btCardData1[tagCardType1.cbOnePare[2 * j + k]];
                this.RemoveCard(MidCard, 2, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 2;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[2] = btCardData2[1];
                  MidCard[3] = btCardData2[2];
                  MidCard[4] = btCardData2[3];
                  BackCard[3] = btCardData2[4];
                  BackCard[4] = btCardData2[5];
                } else {
                  FrontCard[0] = btCardData2[0];
                  FrontCard[1] = btCardData2[1];
                  FrontCard[2] = btCardData2[2];
                  MidCard[2] = btCardData2[3];
                  MidCard[3] = btCardData2[4];
                  MidCard[4] = btCardData2[5];
                  BackCard[3] = btCardData2[6];
                  BackCard[4] = btCardData2[7];
                }
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              }
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              MidCard[0] = btCardData1[0];
              MidCard[1] = btCardData1[4];
              MidCard[2] = btCardData1[5];
              MidCard[3] = btCardData1[6];
              MidCard[4] = btCardData1[7];
              BackCard[3] = btCardData1[8];
              BackCard[4] = btCardData1[9];
              FrontCard[0] = btCardData1[1];
              FrontCard[1] = btCardData1[2];
              FrontCard[2] = btCardData1[3];
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  bFirst = this.bfalse;
                }
              } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
              }
            }
            if (tagCardType.bTwoPare) if (tagCardType.btOnePare < 4) for (var i = 0; i < tagCardType.btTwoPare; i++) {
              SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
              btCardCount = btHandCardCount;
              for (var j = 0; j < 4; j++) BackCard[j] = btCardData[tagCardType.cbTwoPare[4 * i + j]];
              this.RemoveCard(BackCard, 4, btCardData, btCardCount);
              btCardCount1 = btCardCount -= 4;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              tagCardType1 = this.GetType(btCardData1, btCardCount1);
              if (tagCardType1.bTwoPare) if (tagCardType1.btOnePare >= 3) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                btTemp[0] = FrontCard[0] = btCardData1[tagCardType1.cbOnePare[0]];
                btTemp[1] = FrontCard[1] = btCardData1[tagCardType1.cbOnePare[1]];
                btTemp[2] = MidCard[0] = btCardData1[tagCardType1.cbOnePare[2]];
                btTemp[3] = MidCard[1] = btCardData1[tagCardType1.cbOnePare[3]];
                btTemp[4] = MidCard[2] = btCardData1[tagCardType1.cbOnePare[4]];
                btTemp[5] = MidCard[3] = btCardData1[tagCardType1.cbOnePare[5]];
                this.RemoveCard(btTemp, 6, btCardData1, btCardCount1);
                FrontCard[2] = btCardData1[0];
                MidCard[4] = btCardData1[1];
                BackCard[4] = btCardData1[2];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                    bFirst = this.bfalse;
                  }
                } else {
                  btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = btAllShuiShu;
                  }
                }
              } else for (var j = 0; j < tagCardType1.btTwoPare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 4; k++) MidCard[k] = btCardData1[tagCardType1.cbTwoPare[4 * j + k]];
                this.RemoveCard(MidCard, 4, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 4;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bTwoPare) {
                  for (var k = 0; k < 4; k++) btTemp[k] = k < 3 ? FrontCard[k] = btCardData2[tagCardType2.cbTwoPare[k]] : MidCard[k + 1] = btCardData2[tagCardType2.cbTwoPare[k]];
                  this.RemoveCard(btTemp, 4, btCardData2, btCardCount2);
                  BackCard[4] = btCardData2[0];
                } else if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[4] = btCardData2[1];
                  BackCard[4] = btCardData2[2];
                } else {
                  FrontCard[0] = btCardData2[0];
                  FrontCard[1] = btCardData2[1];
                  FrontCard[2] = btCardData2[2];
                  MidCard[4] = btCardData2[3];
                  BackCard[4] = btCardData2[4];
                }
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bOnePare) for (var j = 0; j < tagCardType1.btOnePare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 2; k++) MidCard[k] = btCardData1[tagCardType1.cbOnePare[2 * j + k]];
                this.RemoveCard(MidCard, 2, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 2;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[2] = btCardData2[1];
                  MidCard[3] = btCardData2[2];
                  MidCard[4] = btCardData2[3];
                  BackCard[4] = btCardData2[4];
                } else {
                  FrontCard[0] = btCardData2[0];
                  FrontCard[1] = btCardData2[1];
                  FrontCard[2] = btCardData2[2];
                  MidCard[2] = btCardData2[3];
                  MidCard[3] = btCardData2[4];
                  MidCard[4] = btCardData2[5];
                  BackCard[4] = btCardData2[6];
                }
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              }
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              MidCard[0] = btCardData1[0];
              MidCard[1] = btCardData1[4];
              MidCard[2] = btCardData1[5];
              MidCard[3] = btCardData1[6];
              MidCard[4] = btCardData1[7];
              BackCard[4] = btCardData1[8];
              FrontCard[0] = btCardData1[1];
              FrontCard[1] = btCardData1[2];
              FrontCard[2] = btCardData1[3];
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  bFirst = this.bfalse;
                }
              } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
              }
            } else if (4 == tagCardType.btOnePare) {
              SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
              btCardCount = btHandCardCount;
              btTemp[0] = BackCard[0] = btCardData[tagCardType.cbOnePare[0]];
              btTemp[1] = BackCard[1] = btCardData[tagCardType.cbOnePare[1]];
              btTemp[2] = BackCard[2] = btCardData[tagCardType.cbOnePare[6]];
              btTemp[3] = BackCard[3] = btCardData[tagCardType.cbOnePare[7]];
              btTemp[4] = MidCard[0] = btCardData[tagCardType.cbOnePare[2]];
              btTemp[5] = MidCard[1] = btCardData[tagCardType.cbOnePare[3]];
              btTemp[6] = MidCard[2] = btCardData[tagCardType.cbOnePare[4]];
              btTemp[7] = MidCard[3] = btCardData[tagCardType.cbOnePare[5]];
              this.RemoveCard(btTemp, 8, btCardData, btCardCount);
              FrontCard[0] = btCardData[0];
              FrontCard[1] = btCardData[1];
              FrontCard[2] = btCardData[2];
              MidCard[4] = btCardData[3];
              BackCard[4] = btCardData[4];
              if (14 == this.GetCardLogicValue(FrontCard[0]) && 13 == this.GetCardLogicValue(FrontCard[1])) {
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else {
                SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
                btCardCount = btHandCardCount;
                btTemp[0] = BackCard[0] = btCardData[tagCardType.cbOnePare[4]];
                btTemp[1] = BackCard[1] = btCardData[tagCardType.cbOnePare[5]];
                btTemp[2] = BackCard[2] = btCardData[tagCardType.cbOnePare[6]];
                btTemp[3] = BackCard[3] = btCardData[tagCardType.cbOnePare[7]];
                btTemp[4] = MidCard[0] = btCardData[tagCardType.cbOnePare[0]];
                btTemp[5] = MidCard[1] = btCardData[tagCardType.cbOnePare[1]];
                btTemp[6] = FrontCard[0] = btCardData[tagCardType.cbOnePare[2]];
                btTemp[7] = FrontCard[1] = btCardData[tagCardType.cbOnePare[3]];
                this.RemoveCard(btTemp, 8, btCardData, btCardCount);
                FrontCard[2] = btCardData[0];
                MidCard[2] = btCardData[1];
                MidCard[3] = btCardData[2];
                MidCard[4] = btCardData[3];
                BackCard[4] = btCardData[4];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              }
            } else if (5 == tagCardType.btOnePare) {
              SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
              btCardCount = btHandCardCount;
              btTemp[0] = FrontCard[0] = btCardData[tagCardType.cbOnePare[0]];
              btTemp[1] = FrontCard[1] = btCardData[tagCardType.cbOnePare[1]];
              btTemp[2] = MidCard[0] = btCardData[tagCardType.cbOnePare[4]];
              btTemp[3] = MidCard[1] = btCardData[tagCardType.cbOnePare[5]];
              btTemp[4] = MidCard[2] = btCardData[tagCardType.cbOnePare[6]];
              btTemp[5] = MidCard[3] = btCardData[tagCardType.cbOnePare[7]];
              btTemp[6] = BackCard[0] = btCardData[tagCardType.cbOnePare[2]];
              btTemp[7] = BackCard[1] = btCardData[tagCardType.cbOnePare[3]];
              btTemp[8] = BackCard[2] = btCardData[tagCardType.cbOnePare[8]];
              btTemp[9] = BackCard[3] = btCardData[tagCardType.cbOnePare[9]];
              this.RemoveCard(btTemp, 10, btCardData, btCardCount);
              FrontCard[2] = btCardData[0];
              MidCard[4] = btCardData[1];
              BackCard[4] = btCardData[2];
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  bFirst = this.bfalse;
                }
              } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
              }
            }
            if (tagCardType.bOnePare) for (var i = 0; i < tagCardType.btOnePare; i++) {
              SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
              btCardCount = btHandCardCount;
              for (var j = 0; j < 2; j++) BackCard[j] = btCardData[tagCardType.cbOnePare[2 * i + j]];
              this.RemoveCard(BackCard, 2, btCardData, btCardCount);
              btCardCount1 = btCardCount -= 2;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              tagCardType1 = this.GetType(btCardData1, btCardCount1);
              if (tagCardType1.bOnePare) for (var j = 0; j < tagCardType1.btOnePare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 2; k++) MidCard[k] = btCardData1[tagCardType1.cbOnePare[2 * j + k]];
                this.RemoveCard(MidCard, 2, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 2;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[2] = btCardData2[1];
                  MidCard[3] = btCardData2[2];
                  MidCard[4] = btCardData2[3];
                  BackCard[2] = btCardData2[4];
                  BackCard[3] = btCardData2[5];
                  BackCard[4] = btCardData2[6];
                } else {
                  FrontCard[0] = btCardData2[0];
                  FrontCard[1] = btCardData2[1];
                  FrontCard[2] = btCardData2[2];
                  MidCard[2] = btCardData2[3];
                  MidCard[3] = btCardData2[4];
                  MidCard[4] = btCardData2[5];
                  BackCard[2] = btCardData2[6];
                  BackCard[3] = btCardData2[7];
                  BackCard[4] = btCardData2[8];
                }
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              }
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              MidCard[0] = btCardData1[0];
              MidCard[1] = btCardData1[4];
              MidCard[2] = btCardData1[5];
              MidCard[3] = btCardData1[6];
              MidCard[4] = btCardData1[7];
              BackCard[2] = btCardData1[8];
              BackCard[3] = btCardData1[9];
              BackCard[4] = btCardData1[10];
              FrontCard[0] = btCardData1[1];
              FrontCard[1] = btCardData1[2];
              FrontCard[2] = btCardData1[3];
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  bFirst = this.bfalse;
                }
              } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
              }
            }
          }
        } else if (tagCardType.bStraight) {
          var bThreeSame = this.bfalse;
          for (var i = 0; i < tagCardType.btThreeSame; i++) {
            SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
            btCardCount = btHandCardCount;
            for (var j = 0; j < 3; j++) FrontCard[j] = btCardData[tagCardType.cbThreeSame[3 * i + j]];
            this.RemoveCard(FrontCard, 3, btCardData, btCardCount);
            btCardCount1 = btCardCount -= 3;
            SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
            tagCardType1 = this.GetType(btCardData1, btCardCount1);
            if (tagCardType1.bStraight) for (var j = 0; j < tagCardType1.btStraight; j++) {
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              for (var k = 0; k < 5; k++) BackCard[k] = btCardData1[tagCardType1.cbStraight[5 * j + k]];
              this.RemoveCard(BackCard, 5, btCardData1, btCardCount1);
              SssLib_1.SssLib.CopyMemory(MidCard, btCardData1, SssLib_1.SssLib.sizeof(MidCard));
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  bThreeSame = this.btrue;
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  bFirst = this.bfalse;
                }
              } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                bThreeSame = this.btrue;
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                btFrontAllShuiShu = btAllShuiShu;
              }
            }
            if (tagCardType1.bThreeSame) for (var j = 0; j < tagCardType1.btThreeSame; j++) {
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              for (var k = 0; k < 3; k++) BackCard[k] = btCardData1[tagCardType1.cbThreeSame[3 * j + k]];
              this.RemoveCard(BackCard, 3, btCardData1, btCardCount1);
              btCardCount2 = btCardCount1 -= 3;
              SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
              tagCardType2 = this.GetType(btCardData2, btCardCount2);
              if (tagCardType2.bThreeSame) for (var k = 0; k < tagCardType2.btThreeSame; k++) {
                for (var m = 0; m < 3; m++) MidCard[m] = btCardData2[tagCardType2.cbThreeSame[3 * k + m]];
                this.RemoveCard(MidCard, 3, btCardData2, btCardCount2);
                BackCard[3] = btCardData2[2];
                BackCard[4] = btCardData2[3];
                MidCard[3] = btCardData2[0];
                MidCard[4] = btCardData2[1];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    bThreeSame = this.btrue;
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  bThreeSame = this.btrue;
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  btFrontAllShuiShu = btAllShuiShu;
                }
              }
            }
          }
          if (bThreeSame == this.bfalse) {
            if (tagCardType.bStraight) for (var i = 0; i < tagCardType.btStraight; i++) {
              SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
              btCardCount = btHandCardCount;
              for (var j = 0; j < 5; j++) BackCard[j] = btCardData[tagCardType.cbStraight[5 * i + j]];
              this.RemoveCard(BackCard, 5, btCardData, btCardCount);
              btCardCount1 = btCardCount -= 5;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              tagCardType1 = this.GetType(btCardData1, btCardCount1);
              if (tagCardType1.bStraight) for (var j = 0; j < tagCardType1.btStraight; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 5; k++) MidCard[k] = btCardData1[tagCardType1.cbStraight[5 * j + k]];
                this.RemoveCard(MidCard, 5, btCardData1, btCardCount1);
                SssLib_1.SssLib.CopyMemory(FrontCard, btCardData1, SssLib_1.SssLib.sizeof(FrontCard));
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bThreeSame) for (var j = 0; j < tagCardType1.btThreeSame; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 3; k++) MidCard[k] = btCardData1[tagCardType1.cbThreeSame[3 * j + k]];
                this.RemoveCard(MidCard, 3, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 3;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bThreeSame) {
                  for (var k = 0; k < 3; k++) FrontCard[k] = btCardData2[tagCardType2.cbThreeSame[k]];
                  this.RemoveCard(FrontCard, 3, btCardData2, btCardCount2);
                  MidCard[3] = btCardData2[0];
                  MidCard[4] = btCardData2[1];
                } else if (tagCardType2.bTwoPare) {
                  for (var k = 0; k < 4; k++) btTemp[k] = k < 2 ? FrontCard[k] = btCardData2[tagCardType2.cbTwoPare[k]] : MidCard[k + 1] = btCardData2[tagCardType2.cbTwoPare[k]];
                  this.RemoveCard(btTemp, 4, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                } else if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[3] = btCardData2[1];
                  MidCard[4] = btCardData2[2];
                } else for (var k = 0; k < 5; k++) k < 3 ? FrontCard[k] = btCardData2[k] : MidCard[k] = btCardData2[k];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bTwoPare) if (tagCardType1.btOnePare >= 3) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                btTemp[0] = FrontCard[0] = btCardData1[tagCardType1.cbOnePare[0]];
                btTemp[1] = FrontCard[1] = btCardData1[tagCardType1.cbOnePare[1]];
                btTemp[2] = MidCard[0] = btCardData1[tagCardType1.cbOnePare[2]];
                btTemp[3] = MidCard[1] = btCardData1[tagCardType1.cbOnePare[3]];
                btTemp[4] = MidCard[2] = btCardData1[tagCardType1.cbOnePare[4]];
                btTemp[5] = MidCard[3] = btCardData1[tagCardType1.cbOnePare[5]];
                this.RemoveCard(btTemp, 6, btCardData1, btCardCount1);
                FrontCard[2] = btCardData1[0];
                MidCard[4] = btCardData1[1];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                    bFirst = this.bfalse;
                  }
                } else {
                  btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = btAllShuiShu;
                  }
                }
              } else for (var j = 0; j < tagCardType1.btTwoPare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 4; k++) MidCard[k] = btCardData1[tagCardType1.cbTwoPare[4 * j + k]];
                this.RemoveCard(MidCard, 4, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 4;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bTwoPare) for (var k = 0; k < 4; k++) k < 3 ? FrontCard[k] = btCardData2[tagCardType2.cbTwoPare[k]] : MidCard[k + 1] = btCardData2[tagCardType2.cbTwoPare[k]]; else if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[4] = btCardData2[1];
                } else for (var k = 0; k < 4; k++) k < 3 ? FrontCard[k] = btCardData2[k] : MidCard[k + 1] = btCardData2[k];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bOnePare) for (var j = 0; j < tagCardType1.btOnePare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 2; k++) MidCard[k] = btCardData1[tagCardType1.cbOnePare[2 * j + k]];
                this.RemoveCard(MidCard, 2, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 2;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[2] = btCardData2[1];
                  MidCard[3] = btCardData2[2];
                  MidCard[4] = btCardData2[3];
                } else for (var k = 0; k < 6; k++) k < 3 ? FrontCard[k] = btCardData2[k] : MidCard[k - 1] = btCardData2[k];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              }
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              MidCard[0] = btCardData1[0];
              MidCard[1] = btCardData1[4];
              MidCard[2] = btCardData1[5];
              MidCard[3] = btCardData1[6];
              MidCard[4] = btCardData1[7];
              FrontCard[0] = btCardData1[1];
              FrontCard[1] = btCardData1[2];
              FrontCard[2] = btCardData1[3];
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  bFirst = this.bfalse;
                }
              } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
              }
            }
            if (tagCardType.bThreeSame) for (var i = 0; i < tagCardType.btThreeSame; i++) {
              SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
              btCardCount = btHandCardCount;
              for (var j = 0; j < 3; j++) BackCard[j] = btCardData[tagCardType.cbThreeSame[3 * i + j]];
              this.RemoveCard(BackCard, 3, btCardData, btCardCount);
              btCardCount1 = btCardCount -= 3;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              tagCardType1 = this.GetType(btCardData1, btCardCount1);
              if (tagCardType1.bThreeSame) for (var j = 0; j < tagCardType1.btThreeSame; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 3; k++) MidCard[k] = btCardData1[tagCardType1.cbThreeSame[3 * j + k]];
                this.RemoveCard(MidCard, 3, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 3;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bThreeSame) {
                  for (var k = 0; k < 3; k++) FrontCard[k] = btCardData2[tagCardType2.cbThreeSame[k]];
                  this.RemoveCard(FrontCard, 3, btCardData2, btCardCount2);
                  MidCard[3] = btCardData2[0];
                  MidCard[4] = btCardData2[1];
                  BackCard[3] = btCardData2[2];
                  BackCard[4] = btCardData2[3];
                } else if (tagCardType2.bTwoPare) {
                  for (var k = 0; k < 4; k++) btTemp[k] = k < 2 ? FrontCard[k] = btCardData2[tagCardType2.cbTwoPare[k]] : BackCard[k + 1] = btCardData2[tagCardType2.cbTwoPare[k]];
                  this.RemoveCard(btTemp, 4, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[3] = btCardData2[1];
                  MidCard[4] = btCardData2[2];
                } else if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[3] = btCardData2[1];
                  MidCard[4] = btCardData2[2];
                  BackCard[3] = btCardData2[3];
                  BackCard[4] = btCardData2[4];
                } else {
                  FrontCard[0] = btCardData2[0];
                  FrontCard[1] = btCardData2[1];
                  FrontCard[2] = btCardData2[2];
                  MidCard[3] = btCardData2[3];
                  MidCard[4] = btCardData2[4];
                  BackCard[3] = btCardData2[5];
                  BackCard[4] = btCardData2[6];
                }
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bTwoPare) if (tagCardType1.btOnePare >= 3) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                btTemp[0] = FrontCard[0] = btCardData1[tagCardType1.cbOnePare[0]];
                btTemp[1] = FrontCard[1] = btCardData1[tagCardType1.cbOnePare[1]];
                btTemp[2] = MidCard[0] = btCardData1[tagCardType1.cbOnePare[2]];
                btTemp[3] = MidCard[1] = btCardData1[tagCardType1.cbOnePare[3]];
                btTemp[4] = MidCard[2] = btCardData1[tagCardType1.cbOnePare[4]];
                btTemp[5] = MidCard[3] = btCardData1[tagCardType1.cbOnePare[5]];
                this.RemoveCard(btTemp, 6, btCardData1, btCardCount1);
                FrontCard[2] = btCardData1[0];
                MidCard[4] = btCardData1[1];
                BackCard[3] = btCardData1[2];
                BackCard[4] = btCardData1[3];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                    bFirst = this.bfalse;
                  }
                } else {
                  btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = btAllShuiShu;
                  }
                }
              } else for (var j = 0; j < tagCardType1.btTwoPare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 4; k++) MidCard[k] = btCardData1[tagCardType1.cbTwoPare[4 * j + k]];
                this.RemoveCard(MidCard, 4, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 4;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bTwoPare) {
                  for (var k = 0; k < 4; k++) btTemp[k] = k < 3 ? FrontCard[k] = btCardData2[tagCardType2.cbTwoPare[k]] : MidCard[k + 1] = btCardData2[tagCardType2.cbTwoPare[k]];
                  this.RemoveCard(btTemp, 4, btCardData2, btCardCount2);
                  BackCard[3] = btCardData2[0];
                  BackCard[4] = btCardData2[1];
                } else if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[4] = btCardData2[1];
                  BackCard[3] = btCardData2[2];
                  BackCard[4] = btCardData2[3];
                } else {
                  FrontCard[0] = btCardData2[0];
                  FrontCard[1] = btCardData2[1];
                  FrontCard[2] = btCardData2[2];
                  MidCard[4] = btCardData2[3];
                  BackCard[3] = btCardData2[4];
                  BackCard[4] = btCardData2[5];
                }
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bOnePare) for (var j = 0; j < tagCardType1.btOnePare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 2; k++) MidCard[k] = btCardData1[tagCardType1.cbOnePare[2 * j + k]];
                this.RemoveCard(MidCard, 2, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 2;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[2] = btCardData2[1];
                  MidCard[3] = btCardData2[2];
                  MidCard[4] = btCardData2[3];
                  BackCard[3] = btCardData2[4];
                  BackCard[4] = btCardData2[5];
                } else {
                  FrontCard[0] = btCardData2[0];
                  FrontCard[1] = btCardData2[1];
                  FrontCard[2] = btCardData2[2];
                  MidCard[2] = btCardData2[3];
                  MidCard[3] = btCardData2[4];
                  MidCard[4] = btCardData2[5];
                  BackCard[3] = btCardData2[6];
                  BackCard[4] = btCardData2[7];
                }
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              }
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              MidCard[0] = btCardData1[0];
              MidCard[1] = btCardData1[4];
              MidCard[2] = btCardData1[5];
              MidCard[3] = btCardData1[6];
              MidCard[4] = btCardData1[7];
              BackCard[3] = btCardData1[8];
              BackCard[4] = btCardData1[9];
              FrontCard[0] = btCardData1[1];
              FrontCard[1] = btCardData1[2];
              FrontCard[2] = btCardData1[3];
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  bFirst = this.bfalse;
                }
              } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
              }
            }
            if (tagCardType.bTwoPare) if (tagCardType.btOnePare < 4) for (var i = 0; i < tagCardType.btTwoPare; i++) {
              SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
              btCardCount = btHandCardCount;
              for (var j = 0; j < 4; j++) BackCard[j] = btCardData[tagCardType.cbTwoPare[4 * i + j]];
              this.RemoveCard(BackCard, 4, btCardData, btCardCount);
              btCardCount1 = btCardCount -= 4;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              tagCardType1 = this.GetType(btCardData1, btCardCount1);
              if (tagCardType1.bTwoPare) if (tagCardType1.btOnePare >= 3) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                btTemp[0] = FrontCard[0] = btCardData1[tagCardType1.cbOnePare[0]];
                btTemp[1] = FrontCard[1] = btCardData1[tagCardType1.cbOnePare[1]];
                btTemp[2] = MidCard[0] = btCardData1[tagCardType1.cbOnePare[2]];
                btTemp[3] = MidCard[1] = btCardData1[tagCardType1.cbOnePare[3]];
                btTemp[4] = MidCard[2] = btCardData1[tagCardType1.cbOnePare[4]];
                btTemp[5] = MidCard[3] = btCardData1[tagCardType1.cbOnePare[5]];
                this.RemoveCard(btTemp, 6, btCardData1, btCardCount1);
                FrontCard[2] = btCardData1[0];
                MidCard[4] = btCardData1[1];
                BackCard[4] = btCardData1[2];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = this.ThreeDunAllShuiShu(FrontFrontCard, FrontMidCard, FrontBackCard);
                    bFirst = this.bfalse;
                  }
                } else {
                  btAllShuiShu = this.ThreeDunAllShuiShu(FrontCard, MidCard, BackCard);
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    btFrontAllShuiShu = btAllShuiShu;
                  }
                }
              } else for (var j = 0; j < tagCardType1.btTwoPare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 4; k++) MidCard[k] = btCardData1[tagCardType1.cbTwoPare[4 * j + k]];
                this.RemoveCard(MidCard, 4, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 4;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bTwoPare) {
                  for (var k = 0; k < 4; k++) btTemp[k] = k < 3 ? FrontCard[k] = btCardData2[tagCardType2.cbTwoPare[k]] : MidCard[k + 1] = btCardData2[tagCardType2.cbTwoPare[k]];
                  this.RemoveCard(btTemp, 4, btCardData2, btCardCount2);
                  BackCard[4] = btCardData2[0];
                } else if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[4] = btCardData2[1];
                  BackCard[4] = btCardData2[2];
                } else {
                  FrontCard[0] = btCardData2[0];
                  FrontCard[1] = btCardData2[1];
                  FrontCard[2] = btCardData2[2];
                  MidCard[4] = btCardData2[3];
                  BackCard[4] = btCardData2[4];
                }
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else if (tagCardType1.bOnePare) for (var j = 0; j < tagCardType1.btOnePare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 2; k++) MidCard[k] = btCardData1[tagCardType1.cbOnePare[2 * j + k]];
                this.RemoveCard(MidCard, 2, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 2;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[2] = btCardData2[1];
                  MidCard[3] = btCardData2[2];
                  MidCard[4] = btCardData2[3];
                  BackCard[4] = btCardData2[4];
                } else {
                  FrontCard[0] = btCardData2[0];
                  FrontCard[1] = btCardData2[1];
                  FrontCard[2] = btCardData2[2];
                  MidCard[2] = btCardData2[3];
                  MidCard[3] = btCardData2[4];
                  MidCard[4] = btCardData2[5];
                  BackCard[4] = btCardData2[6];
                }
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              }
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              MidCard[0] = btCardData1[0];
              MidCard[1] = btCardData1[4];
              MidCard[2] = btCardData1[5];
              MidCard[3] = btCardData1[6];
              MidCard[4] = btCardData1[7];
              BackCard[4] = btCardData1[8];
              FrontCard[0] = btCardData1[1];
              FrontCard[1] = btCardData1[2];
              FrontCard[2] = btCardData1[3];
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  bFirst = this.bfalse;
                }
              } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
              }
            } else if (4 == tagCardType.btOnePare) {
              SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
              btCardCount = btHandCardCount;
              btTemp[0] = BackCard[0] = btCardData[tagCardType.cbOnePare[0]];
              btTemp[1] = BackCard[1] = btCardData[tagCardType.cbOnePare[1]];
              btTemp[2] = BackCard[2] = btCardData[tagCardType.cbOnePare[6]];
              btTemp[3] = BackCard[3] = btCardData[tagCardType.cbOnePare[7]];
              btTemp[4] = MidCard[0] = btCardData[tagCardType.cbOnePare[2]];
              btTemp[5] = MidCard[1] = btCardData[tagCardType.cbOnePare[3]];
              btTemp[6] = MidCard[2] = btCardData[tagCardType.cbOnePare[4]];
              btTemp[7] = MidCard[3] = btCardData[tagCardType.cbOnePare[5]];
              this.RemoveCard(btTemp, 8, btCardData, btCardCount);
              FrontCard[0] = btCardData[0];
              FrontCard[1] = btCardData[1];
              FrontCard[2] = btCardData[2];
              MidCard[4] = btCardData[3];
              BackCard[4] = btCardData[4];
              if (14 == this.GetCardLogicValue(FrontCard[0]) && 13 == this.GetCardLogicValue(FrontCard[1])) {
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              } else {
                SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
                btCardCount = btHandCardCount;
                btTemp[0] = BackCard[0] = btCardData[tagCardType.cbOnePare[4]];
                btTemp[1] = BackCard[1] = btCardData[tagCardType.cbOnePare[5]];
                btTemp[2] = BackCard[2] = btCardData[tagCardType.cbOnePare[6]];
                btTemp[3] = BackCard[3] = btCardData[tagCardType.cbOnePare[7]];
                btTemp[4] = MidCard[0] = btCardData[tagCardType.cbOnePare[0]];
                btTemp[5] = MidCard[1] = btCardData[tagCardType.cbOnePare[1]];
                btTemp[6] = FrontCard[0] = btCardData[tagCardType.cbOnePare[2]];
                btTemp[7] = FrontCard[1] = btCardData[tagCardType.cbOnePare[3]];
                this.RemoveCard(btTemp, 8, btCardData, btCardCount);
                FrontCard[2] = btCardData[0];
                MidCard[2] = btCardData[1];
                MidCard[3] = btCardData[2];
                MidCard[4] = btCardData[3];
                BackCard[4] = btCardData[4];
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              }
            } else if (5 == tagCardType.btOnePare) {
              SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
              btCardCount = btHandCardCount;
              btTemp[0] = FrontCard[0] = btCardData[tagCardType.cbOnePare[0]];
              btTemp[1] = FrontCard[1] = btCardData[tagCardType.cbOnePare[1]];
              btTemp[2] = MidCard[0] = btCardData[tagCardType.cbOnePare[4]];
              btTemp[3] = MidCard[1] = btCardData[tagCardType.cbOnePare[5]];
              btTemp[4] = MidCard[2] = btCardData[tagCardType.cbOnePare[6]];
              btTemp[5] = MidCard[3] = btCardData[tagCardType.cbOnePare[7]];
              btTemp[6] = BackCard[0] = btCardData[tagCardType.cbOnePare[2]];
              btTemp[7] = BackCard[1] = btCardData[tagCardType.cbOnePare[3]];
              btTemp[8] = BackCard[2] = btCardData[tagCardType.cbOnePare[8]];
              btTemp[9] = BackCard[3] = btCardData[tagCardType.cbOnePare[9]];
              this.RemoveCard(btTemp, 10, btCardData, btCardCount);
              FrontCard[2] = btCardData[0];
              MidCard[4] = btCardData[1];
              BackCard[4] = btCardData[2];
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  bFirst = this.bfalse;
                }
              } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
              }
            }
            if (tagCardType.bOnePare) for (var i = 0; i < tagCardType.btOnePare; i++) {
              SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
              btCardCount = btHandCardCount;
              for (var j = 0; j < 2; j++) BackCard[j] = btCardData[tagCardType.cbOnePare[2 * i + j]];
              this.RemoveCard(BackCard, 2, btCardData, btCardCount);
              btCardCount1 = btCardCount -= 2;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              tagCardType1 = this.GetType(btCardData1, btCardCount1);
              if (tagCardType1.bOnePare) for (var j = 0; j < tagCardType1.btOnePare; j++) {
                btCardCount1 = btCardCount;
                SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
                for (var k = 0; k < 2; k++) MidCard[k] = btCardData1[tagCardType1.cbOnePare[2 * j + k]];
                this.RemoveCard(MidCard, 2, btCardData1, btCardCount1);
                btCardCount2 = btCardCount1 -= 2;
                SssLib_1.SssLib.CopyMemory(btCardData2, btCardData1, SssLib_1.SssLib.sizeof(btCardData1[0]) * btCardCount2);
                tagCardType2 = this.GetType(btCardData2, btCardCount2);
                if (tagCardType2.bOnePare) {
                  for (var k = 0; k < 2; k++) btTemp[k] = FrontCard[k] = btCardData2[tagCardType2.cbOnePare[k]];
                  this.RemoveCard(btTemp, 2, btCardData2, btCardCount2);
                  FrontCard[2] = btCardData2[0];
                  MidCard[2] = btCardData2[1];
                  MidCard[3] = btCardData2[2];
                  MidCard[4] = btCardData2[3];
                  BackCard[2] = btCardData2[4];
                  BackCard[3] = btCardData2[5];
                  BackCard[4] = btCardData2[6];
                } else {
                  FrontCard[0] = btCardData2[0];
                  FrontCard[1] = btCardData2[1];
                  FrontCard[2] = btCardData2[2];
                  MidCard[2] = btCardData2[3];
                  MidCard[3] = btCardData2[4];
                  MidCard[4] = btCardData2[5];
                  BackCard[2] = btCardData2[6];
                  BackCard[3] = btCardData2[7];
                  BackCard[4] = btCardData2[8];
                }
                if (bFirst) {
                  if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                    SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                    SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                    SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                    bFirst = this.bfalse;
                  }
                } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                }
              }
              btCardCount1 = btCardCount;
              SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
              MidCard[0] = btCardData1[0];
              MidCard[1] = btCardData1[4];
              MidCard[2] = btCardData1[5];
              MidCard[3] = btCardData1[6];
              MidCard[4] = btCardData1[7];
              BackCard[2] = btCardData1[8];
              BackCard[3] = btCardData1[9];
              BackCard[4] = btCardData1[10];
              FrontCard[0] = btCardData1[1];
              FrontCard[1] = btCardData1[2];
              FrontCard[2] = btCardData1[3];
              if (bFirst) {
                if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                  SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                  SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                  SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                  bFirst = this.bfalse;
                }
              } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
              }
            }
          }
        } else if (tagCardType.bThreeSame) {
          SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
          btCardCount = btHandCardCount;
          for (var i = 0; i < 3; i++) FrontBackCard[i] = btCardData[tagCardType.cbThreeSame[i]];
          this.RemoveCard(BackCard, 3, btCardData, btCardCount);
          btCardCount1 = btCardCount -= 3;
          SssLib_1.SssLib.CopyMemory(btCardData1, btCardData, SssLib_1.SssLib.sizeof(btCardData[0]) * btCardCount1);
          FrontFrontCard[0] = btCardData1[1];
          FrontFrontCard[1] = btCardData1[2];
          FrontFrontCard[2] = btCardData1[3];
          FrontMidCard[0] = btCardData1[0];
          FrontMidCard[1] = btCardData1[4];
          FrontMidCard[2] = btCardData1[5];
          FrontMidCard[3] = btCardData1[6];
          FrontMidCard[4] = btCardData1[7];
          FrontBackCard[3] = btCardData1[8];
          FrontBackCard[4] = btCardData1[9];
        } else if (tagCardType.bTwoPare) if (2 == tagCardType.btOnePare) {
          SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
          btCardCount = btHandCardCount;
          btTemp[0] = FrontBackCard[0] = btCardData[tagCardType.cbOnePare[0]];
          btTemp[1] = FrontBackCard[1] = btCardData[tagCardType.cbOnePare[1]];
          btTemp[2] = FrontMidCard[0] = btCardData[tagCardType.cbOnePare[2]];
          btTemp[3] = FrontMidCard[1] = btCardData[tagCardType.cbOnePare[3]];
          this.RemoveCard(btTemp, 4, btCardData, btCardCount);
          FrontFrontCard[0] = btCardData[0];
          FrontFrontCard[1] = btCardData[1];
          FrontFrontCard[2] = btCardData[2];
          FrontMidCard[2] = btCardData[3];
          FrontMidCard[3] = btCardData[4];
          FrontMidCard[4] = btCardData[5];
          FrontBackCard[2] = btCardData[6];
          FrontBackCard[3] = btCardData[7];
          FrontBackCard[4] = btCardData[8];
        } else if (3 == tagCardType.btOnePare) {
          SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
          btCardCount = btHandCardCount;
          btTemp[0] = FrontBackCard[0] = btCardData[tagCardType.cbOnePare[0]];
          btTemp[1] = FrontBackCard[1] = btCardData[tagCardType.cbOnePare[1]];
          btTemp[2] = FrontMidCard[0] = btCardData[tagCardType.cbOnePare[2]];
          btTemp[3] = FrontMidCard[1] = btCardData[tagCardType.cbOnePare[3]];
          btTemp[4] = FrontFrontCard[0] = btCardData[tagCardType.cbOnePare[4]];
          btTemp[5] = FrontFrontCard[1] = btCardData[tagCardType.cbOnePare[5]];
          this.RemoveCard(btTemp, 6, btCardData, btCardCount);
          FrontFrontCard[2] = btCardData[0];
          FrontMidCard[2] = btCardData[1];
          FrontMidCard[3] = btCardData[2];
          FrontMidCard[4] = btCardData[3];
          FrontBackCard[2] = btCardData[4];
          FrontBackCard[3] = btCardData[5];
          FrontBackCard[4] = btCardData[6];
        } else if (4 == tagCardType.btOnePare) {
          SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
          btCardCount = btHandCardCount;
          btTemp[0] = BackCard[0] = btCardData[tagCardType.cbOnePare[0]];
          btTemp[1] = BackCard[1] = btCardData[tagCardType.cbOnePare[1]];
          btTemp[2] = BackCard[2] = btCardData[tagCardType.cbOnePare[6]];
          btTemp[3] = BackCard[3] = btCardData[tagCardType.cbOnePare[7]];
          btTemp[4] = MidCard[0] = btCardData[tagCardType.cbOnePare[2]];
          btTemp[5] = MidCard[1] = btCardData[tagCardType.cbOnePare[3]];
          btTemp[6] = MidCard[2] = btCardData[tagCardType.cbOnePare[4]];
          btTemp[7] = MidCard[3] = btCardData[tagCardType.cbOnePare[5]];
          this.RemoveCard(btTemp, 8, btCardData, btCardCount);
          FrontCard[0] = btCardData[0];
          FrontCard[1] = btCardData[1];
          FrontCard[2] = btCardData[2];
          MidCard[4] = btCardData[3];
          BackCard[4] = btCardData[4];
          if (14 == this.GetCardLogicValue(FrontCard[0]) && 13 == this.GetCardLogicValue(FrontCard[1])) {
            if (bFirst) {
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                bFirst = this.bfalse;
              }
            } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
              SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
              SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
              SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
            }
          } else {
            SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
            btCardCount = btHandCardCount;
            btTemp[0] = BackCard[0] = btCardData[tagCardType.cbOnePare[4]];
            btTemp[1] = BackCard[1] = btCardData[tagCardType.cbOnePare[5]];
            btTemp[2] = BackCard[2] = btCardData[tagCardType.cbOnePare[6]];
            btTemp[3] = BackCard[3] = btCardData[tagCardType.cbOnePare[7]];
            btTemp[4] = MidCard[0] = btCardData[tagCardType.cbOnePare[0]];
            btTemp[5] = MidCard[1] = btCardData[tagCardType.cbOnePare[1]];
            btTemp[6] = FrontCard[0] = btCardData[tagCardType.cbOnePare[2]];
            btTemp[7] = FrontCard[1] = btCardData[tagCardType.cbOnePare[3]];
            this.RemoveCard(btTemp, 8, btCardData, btCardCount);
            FrontCard[2] = btCardData[0];
            MidCard[2] = btCardData[1];
            MidCard[3] = btCardData[2];
            MidCard[4] = btCardData[3];
            BackCard[4] = btCardData[4];
            if (bFirst) {
              if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse)) {
                SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
                SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
                SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
                bFirst = this.bfalse;
              }
            } else if (this.CompareCard(FrontCard, MidCard, 3, 5, this.bfalse) && this.CompareCard(MidCard, BackCard, 5, 5, this.bfalse) && this.IsBiggerThanFront(FrontFrontCard, FrontMidCard, FrontBackCard, FrontCard, MidCard, BackCard)) {
              SssLib_1.SssLib.CopyMemory(FrontFrontCard, FrontCard, SssLib_1.SssLib.sizeof(FrontCard));
              SssLib_1.SssLib.CopyMemory(FrontMidCard, MidCard, SssLib_1.SssLib.sizeof(MidCard));
              SssLib_1.SssLib.CopyMemory(FrontBackCard, BackCard, SssLib_1.SssLib.sizeof(BackCard));
            }
          }
        } else if (5 == tagCardType.btOnePare) {
          SssLib_1.SssLib.CopyMemory(btCardData, btHandCardData, SssLib_1.SssLib.sizeof(btCardData));
          btCardCount = btHandCardCount;
          btTemp[0] = FrontFrontCard[0] = btCardData[tagCardType.cbOnePare[0]];
          btTemp[1] = FrontFrontCard[1] = btCardData[tagCardType.cbOnePare[1]];
          btTemp[2] = FrontMidCard[0] = btCardData[tagCardType.cbOnePare[4]];
          btTemp[3] = FrontMidCard[1] = btCardData[tagCardType.cbOnePare[5]];
          btTemp[4] = FrontMidCard[2] = btCardData[tagCardType.cbOnePare[6]];
          btTemp[5] = FrontMidCard[3] = btCardData[tagCardType.cbOnePare[7]];
          btTemp[6] = FrontBackCard[0] = btCardData[tagCardType.cbOnePare[2]];
          btTemp[7] = FrontBackCard[1] = btCardData[tagCardType.cbOnePare[3]];
          btTemp[8] = FrontBackCard[2] = btCardData[tagCardType.cbOnePare[8]];
          btTemp[9] = FrontBackCard[3] = btCardData[tagCardType.cbOnePare[9]];
          this.RemoveCard(btTemp, 10, btCardData, btCardCount);
          FrontFrontCard[2] = btCardData[0];
          FrontMidCard[4] = btCardData[1];
          FrontBackCard[4] = btCardData[2];
        }
        this.SortCardList(FrontFrontCard, 3, this.enDescend);
        this.SortCardList(FrontMidCard, 5, this.enDescend);
        this.SortCardList(FrontBackCard, 5, this.enDescend);
        SssLib_1.SssLib.CopyMemory(btFrontCard, FrontFrontCard, SssLib_1.SssLib.sizeof(FrontFrontCard));
        SssLib_1.SssLib.CopyMemory(btMidCard, FrontMidCard, SssLib_1.SssLib.sizeof(FrontMidCard));
        SssLib_1.SssLib.CopyMemory(btBackCard, FrontBackCard, SssLib_1.SssLib.sizeof(FrontBackCard));
      };
      SssCards.prototype.ThreeDunAllShuiShu = function(btFrontCard, btMidCard, btBackCard) {
        var AllShuiShu = 0;
        var tagCardType1 = new tagAnalyseType();
        var tagCardType2 = new tagAnalyseType();
        var tagCardType3 = new tagAnalyseType();
        SssLib_1.SssLib.ZeroMemory(tagCardType1, SssLib_1.SssLib.sizeof(tagCardType1));
        SssLib_1.SssLib.ZeroMemory(tagCardType2, SssLib_1.SssLib.sizeof(tagCardType2));
        SssLib_1.SssLib.ZeroMemory(tagCardType3, SssLib_1.SssLib.sizeof(tagCardType3));
        tagCardType1 = this.GetType(btFrontCard, 3);
        tagCardType2 = this.GetType(btMidCard, 5);
        tagCardType3 = this.GetType(btBackCard, 5);
        tagCardType1.bThreeSame ? AllShuiShu += 3 : AllShuiShu += 1;
        tagCardType2.btFiveSame ? AllShuiShu += 20 : tagCardType2.bStraightFlush ? AllShuiShu += 10 : tagCardType2.bFourSame ? AllShuiShu += 8 : tagCardType2.bGourd ? AllShuiShu += 2 : AllShuiShu += 1;
        tagCardType3.btFiveSame && (AllShuiShu += 10);
        tagCardType3.bStraightFlush ? AllShuiShu += 5 : tagCardType3.bFourSame ? AllShuiShu += 4 : AllShuiShu += 1;
        return AllShuiShu;
      };
      SssCards.prototype.IsBiggerThanFront = function(btFrontFrontCard, btFrontMidCard, btFrontBackCard, btFrontCard, btMidCard, btBackCard) {
        var btFrontShuiShu = this.ThreeDunAllShuiShu(btFrontFrontCard, btFrontMidCard, btFrontBackCard);
        var btShuiShu = this.ThreeDunAllShuiShu(btFrontCard, btMidCard, btBackCard);
        var tagFrontFrontCardType = new tagAnalyseType();
        var tagFrontMidCardType = new tagAnalyseType();
        var tagFrontBackCardType = new tagAnalyseType();
        var tagFrontCardType = new tagAnalyseType();
        var tagMidCardType = new tagAnalyseType();
        var tagBackCardType = new tagAnalyseType();
        SssLib_1.SssLib.ZeroMemory(tagFrontFrontCardType, SssLib_1.SssLib.sizeof(tagFrontFrontCardType));
        SssLib_1.SssLib.ZeroMemory(tagFrontMidCardType, SssLib_1.SssLib.sizeof(tagFrontMidCardType));
        SssLib_1.SssLib.ZeroMemory(tagFrontBackCardType, SssLib_1.SssLib.sizeof(tagFrontBackCardType));
        SssLib_1.SssLib.ZeroMemory(tagFrontCardType, SssLib_1.SssLib.sizeof(tagFrontCardType));
        SssLib_1.SssLib.ZeroMemory(tagMidCardType, SssLib_1.SssLib.sizeof(tagMidCardType));
        SssLib_1.SssLib.ZeroMemory(tagBackCardType, SssLib_1.SssLib.sizeof(tagBackCardType));
        tagFrontFrontCardType = this.GetType(btFrontFrontCard, 3);
        tagFrontMidCardType = this.GetType(btFrontMidCard, 5);
        tagFrontBackCardType = this.GetType(btFrontBackCard, 5);
        tagFrontCardType = this.GetType(btFrontCard, 3);
        tagMidCardType = this.GetType(btMidCard, 5);
        tagBackCardType = this.GetType(btBackCard, 5);
        var btFrontWin = 0;
        var btWin = 0;
        var btCompare = 0;
        var btFrontCanWin = 0;
        var btCanWin = 0;
        this.IsSameCardData(btFrontFrontCard, btFrontCard, 3, 3) == this.bfalse && (tagFrontFrontCardType.bThreeSame && tagFrontCardType.bThreeSame || (this.CompareCard(btFrontFrontCard, btFrontCard, 3, 3, this.btrue) ? btCompare++ : btCompare--));
        if (this.IsSameCardData(btFrontMidCard, btMidCard, 5, 5) == this.bfalse) if (tagFrontMidCardType.bThreeSame && tagMidCardType.bThreeSame) {
          var btSpecialCard = SssLib_1.SssLib.oneDArr(13);
          SssLib_1.SssLib.ZeroMemory(btSpecialCard, SssLib_1.SssLib.sizeof(btSpecialCard));
          this.GetCardType(btMidCard, 5, btSpecialCard) > this.GetCardType(btFrontMidCard, 5, btSpecialCard) ? btCompare++ : this.GetCardType(btMidCard, 5, btSpecialCard) < this.GetCardType(btFrontMidCard, 5, btSpecialCard) && btCompare--;
        } else this.CompareCard(btFrontMidCard, btMidCard, 5, 5, this.btrue) ? btCompare++ : btCompare--;
        if (this.IsSameCardData(btFrontBackCard, btBackCard, 5, 5) == this.bfalse) if (tagFrontBackCardType.bThreeSame && tagBackCardType.bThreeSame) {
          var btSpecialCard = SssLib_1.SssLib.oneDArr(13);
          SssLib_1.SssLib.ZeroMemory(btSpecialCard, SssLib_1.SssLib.sizeof(btSpecialCard));
          this.GetCardType(btBackCard, 5, btSpecialCard) > this.GetCardType(btFrontBackCard, 5, btSpecialCard) ? btCompare++ : this.GetCardType(btBackCard, 5, btSpecialCard) < this.GetCardType(btFrontBackCard, 5, btSpecialCard) && btCompare--;
        } else this.CompareCard(btFrontBackCard, btBackCard, 5, 5, this.btrue) ? btCompare++ : btCompare--;
        if (tagFrontFrontCardType.bThreeSame) {
          btFrontWin += 1;
          btFrontCanWin += 3;
        } else if (tagFrontFrontCardType.bOnePare) {
          btFrontWin += 1;
          btFrontCanWin += 1;
        } else if (14 == this.GetCardLogicValue(btFrontFrontCard[0])) {
          btFrontWin += 0;
          btFrontCanWin += 0;
        } else {
          btFrontWin += -1;
          btFrontCanWin += -1;
        }
        if (tagFrontMidCardType.bFiveSame) {
          btFrontWin += 1;
          btFrontCanWin += 20;
        }
        if (tagFrontMidCardType.bStraightFlush) {
          btFrontWin += 1;
          btFrontCanWin += 10;
        } else if (tagFrontMidCardType.bFourSame) {
          btFrontWin += 1;
          btFrontCanWin += 8;
        } else if (tagFrontMidCardType.bGourd) {
          btFrontWin += 1;
          btFrontCanWin += 5;
        } else if (tagFrontMidCardType.bFlush) {
          btFrontWin += 1;
          btFrontCanWin += 4;
        } else if (tagFrontMidCardType.bStraight) {
          btFrontWin += 1;
          btFrontCanWin += 3;
        } else if (tagFrontMidCardType.bThreeSame) {
          btFrontWin += 1;
          btFrontCanWin += 2;
        } else if (tagFrontMidCardType.bTwoPare) if (this.GetCardLogicValue(btFrontMidCard[tagFrontMidCardType.cbTwoPare[0]]) < 6) {
          btFrontWin += 0;
          btFrontCanWin += 0;
        } else {
          btFrontWin += 1;
          btFrontCanWin += 1;
        } else if (tagFrontMidCardType.bOnePare) if (this.GetCardLogicValue(btFrontMidCard[tagFrontMidCardType.cbOnePare[0]]) < 12) {
          btFrontWin += -1;
          btFrontCanWin += -1;
        } else {
          btFrontWin += 0;
          btFrontCanWin += 0;
        } else {
          btFrontWin += -1;
          btFrontCanWin += -2;
        }
        if (tagFrontBackCardType.bFiveSame) {
          btFrontWin += 1;
          btFrontCanWin += 10;
        }
        if (tagFrontBackCardType.bStraightFlush) {
          btFrontWin += 1;
          btFrontCanWin += 5;
        } else if (tagFrontBackCardType.bFourSame) {
          btFrontWin += 1;
          btFrontCanWin += 4;
        } else if (tagFrontBackCardType.bGourd) {
          btFrontWin += 1;
          btFrontCanWin += 3;
        } else if (tagFrontBackCardType.bFlush) if (this.GetCardLogicValue(btFrontBackCard[tagFrontBackCardType.cbFlush[0]]) < 11) {
          btFrontWin += 0;
          btFrontCanWin += 1;
        } else {
          btFrontWin += 1;
          btFrontCanWin += 2;
        } else if (tagFrontBackCardType.bStraight) if (this.GetCardLogicValue(btFrontBackCard[tagFrontBackCardType.cbStraight[0]]) < 11) {
          btFrontWin += -1;
          btFrontCanWin += -1;
        } else {
          btFrontWin += 0;
          btFrontCanWin += 0;
        } else {
          tagFrontBackCardType.bThreeSame ? btFrontCanWin += -2 : tagFrontBackCardType.bTwoPare ? btFrontCanWin += -3 : tagFrontBackCardType.bOnePare ? btFrontCanWin += -4 : btFrontCanWin += -5;
          btFrontWin += -1;
        }
        if (tagFrontCardType.bThreeSame) {
          btWin += 1;
          btCanWin += 3;
        } else if (tagFrontCardType.bOnePare) {
          btWin += 1;
          btCanWin += 1;
        } else if (14 == this.GetCardLogicValue(btFrontCard[0])) {
          btWin += 0;
          btCanWin += 0;
        } else {
          btWin += -1;
          btCanWin += -1;
        }
        if (tagMidCardType.bFiveSame) {
          btWin += 1;
          btCanWin += 20;
        }
        if (tagMidCardType.bStraightFlush) {
          btWin += 1;
          btCanWin += 10;
        } else if (tagMidCardType.bFourSame) {
          btWin += 1;
          btCanWin += 8;
        } else if (tagMidCardType.bGourd) {
          btWin += 1;
          btCanWin += 5;
        } else if (tagMidCardType.bFlush) {
          btWin += 1;
          btCanWin += 4;
        } else if (tagMidCardType.bStraight) {
          btWin += 1;
          btCanWin += 3;
        } else if (tagMidCardType.bThreeSame) {
          btWin += 1;
          btCanWin += 2;
        } else if (tagMidCardType.bTwoPare) if (this.GetCardLogicValue(btMidCard[tagMidCardType.cbTwoPare[0]]) < 6) {
          btWin += 0;
          btCanWin += 0;
        } else {
          btWin += 1;
          btCanWin += 1;
        } else if (tagMidCardType.bOnePare) if (this.GetCardLogicValue(btMidCard[tagMidCardType.cbOnePare[0]]) < 12) {
          btWin += -1;
          btCanWin += -1;
        } else {
          btWin += 0;
          btCanWin += 0;
        } else {
          btWin += -1;
          btCanWin += -2;
        }
        if (tagBackCardType.bFiveSame) {
          btWin += 1;
          btCanWin += 10;
        }
        if (tagBackCardType.bStraightFlush) {
          btWin += 1;
          btCanWin += 5;
        } else if (tagBackCardType.bFourSame) {
          btWin += 1;
          btCanWin += 4;
        } else if (tagBackCardType.bGourd) {
          btWin += 1;
          btCanWin += 3;
        } else if (tagBackCardType.bFlush) if (this.GetCardLogicValue(btBackCard[tagBackCardType.cbFlush[0]]) < 11) {
          btWin += 0;
          btCanWin += 1;
        } else {
          btWin += 1;
          btCanWin += 2;
        } else if (tagBackCardType.bStraight) if (this.GetCardLogicValue(btBackCard[tagBackCardType.cbStraight[0]]) < 11) {
          btWin += -1;
          btCanWin += -1;
        } else {
          btWin += 0;
          btCanWin += 0;
        } else {
          tagBackCardType.bThreeSame ? btCanWin += -2 : tagBackCardType.bTwoPare ? btCanWin += -3 : tagBackCardType.bOnePare ? btCanWin += -4 : btCanWin += -5;
          btWin += -1;
        }
        if (btShuiShu == btFrontShuiShu) return btWin > btFrontWin ? this.btrue : btWin == btFrontWin ? btCompare >= 1 ? this.btrue : btCanWin > btFrontCanWin ? this.btrue : this.bfalse : this.bfalse;
        if (btShuiShu == btFrontShuiShu + 1) return btFrontWin - btWin >= 4 ? this.bfalse : this.btrue;
        if (btShuiShu + 1 == btFrontShuiShu) return btWin - btFrontWin >= 4 ? this.btrue : this.bfalse;
        if (btShuiShu > btFrontShuiShu) return this.btrue;
        if (btShuiShu < btFrontShuiShu) return this.bfalse;
        return this.bfalse;
      };
      SssCards.prototype.IsSameCardData = function(btFirstCard, btNextCard, btFirstCount, btNextCount) {
        if (btNextCount != btFirstCount) return this.bfalse;
        for (var i = 0; i < btFirstCount; i++) if (btFirstCard[i] != btNextCard[i]) return this.bfalse;
        return this.btrue;
      };
      SssCards.prototype.AutoPutCard = function(btHandCardData, btHandCardCount, btFrontCard, btMidCard, btBackCard) {
        var bCardList = SssLib_1.SssLib.oneDArr(13);
        SssLib_1.SssLib.memcpy(bCardList, btHandCardData, 13 * sizeof_BYTE);
        var bLeftCCount = 13;
        var bTempCard = SssLib_1.SssLib.twoDArr(3, 5);
        var bTempCCount = SssLib_1.SssLib.oneDArr(3);
        var bSigCCount = 0;
        var bCardType = SssLib_1.SssLib.oneDArr(3);
        for (var i = 0; i < 3; i++) {
          var yinyongObj = {
            value: 0
          };
          bCardType[i] = this.GetMaxCardData(bCardList, bLeftCCount, bTempCard[i], yinyongObj, 2 == i ? 3 : 5);
          bTempCCount[i] = yinyongObj.value;
          this.RemoveCard(bTempCard[i], bTempCCount[i], bCardList, bLeftCCount);
          bLeftCCount -= bTempCCount[i];
        }
        SssLib_1.SssLib.ASSERT(bLeftCCount + bTempCCount[0] + bTempCCount[1] + bTempCCount[2] == 13);
        SssLib_1.SssLib.ASSERT(bTempCCount[0] <= 5 && bTempCCount[1] <= 5 && bTempCCount[2] <= 3);
        if (0 == bLeftCCount) return;
        this.SortCardList(bCardList, bLeftCCount, this.enDescend);
        while (bTempCCount[2] < 3) bTempCard[2][bTempCCount[2]++] = bCardList[bSigCCount++];
        while (bTempCCount[0] < 5) bTempCard[0][bTempCCount[0]++] = bCardList[bSigCCount++];
        while (bTempCCount[1] < 5) bTempCard[1][bTempCCount[1]++] = bCardList[bSigCCount++];
        SssLib_1.SssLib.ASSERT(bSigCCount == bLeftCCount);
        SssLib_1.SssLib.memcpy(btFrontCard, bTempCard[2], 3 * sizeof_BYTE);
        SssLib_1.SssLib.memcpy(btMidCard, bTempCard[1], 5 * sizeof_BYTE);
        SssLib_1.SssLib.memcpy(btBackCard, bTempCard[0], 5 * sizeof_BYTE);
        return;
      };
      SssCards.prototype.GetMaxCardData = function(cbCardData, cbCardCount, bMaxCardData, bMaxCardCount, bNeedCCount) {
        SssLib_1.SssLib.ASSERT(cbCardCount <= 13 || cbCardCount > 3);
        var bKCount = 0;
        var evCardList = SssLib_1.SssLib.CListByteArr(15);
        var evColorList = SssLib_1.SssLib.CListByteArr(4);
        var bCardArray = SssLib_1.SssLib.oneDArr(13);
        SssLib_1.SssLib.memcpy(bCardArray, cbCardData, sizeof_BYTE * cbCardCount);
        this.SortCardList(bCardArray, cbCardCount, this.enDescend);
        for (var i = 0; i < cbCardCount; i++) {
          if (78 == bCardArray[i] || 79 == bCardArray[i]) {
            evCardList[0].AddTail(bCardArray[i]);
            continue;
          }
          var bLogicNum = this.GetCardLogicValue(bCardArray[i]);
          var bColor = this.GetCardColor(bCardArray[i]);
          SssLib_1.SssLib.ASSERT(bLogicNum > 1 && bLogicNum < 15 && bColor >= 0 && bColor <= 3);
          SssLib_1.SssLib.ASSERT(evCardList[bLogicNum].Find(bCardArray[i]) == NULL);
          evCardList[bLogicNum].AddTail(bCardArray[i]);
          evColorList[bColor].AddTail(bCardArray[i]);
        }
        SssLib_1.SssLib.ASSERT(evCardList[0].GetCount() <= 2);
        if (5 == bNeedCCount) for (var i = 0; i < 4; i++) if (evColorList[i].GetCount() + evCardList[0].GetCount() >= 5) {
          var bCount = 0;
          if (evCardList[0].GetCount() >= 0 && evColorList[i].GetCount() >= 5) if (1 == this.GetCardValue(evColorList[i].GetHead()) && 5 != this.GetCardLogicValue(evColorList[i].GetAt(evColorList[i].FindIndex(evColorList[i].GetCount() - 4)))) {
            var bFstCard = evColorList[i].GetAt(evColorList[i].FindIndex(0));
            var bLstCard = evColorList[i].GetAt(evColorList[i].FindIndex(4));
            if (this.GetCardLogicValue(bFstCard) - this.GetCardLogicValue(bLstCard) == 4) {
              for (var k = 0; k < 5; k++) bMaxCardData[k] = evColorList[i].GetAt(evColorList[i].FindIndex(k));
              bMaxCardCount.value = 5;
              return SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_BACK_A;
            }
          } else {
            if (1 == this.GetCardValue(evColorList[i].GetHead()) && 5 == this.GetCardLogicValue(evColorList[i].GetAt(evColorList[i].FindIndex(evColorList[i].GetCount() - 4)))) {
              bMaxCardData[0] = evColorList[i].GetHead();
              for (var k = 1; k < 5; k++) bMaxCardData[k] = evColorList[i].GetAt(evColorList[i].FindIndex(evColorList[i].GetCount() - k));
              bMaxCardCount.value = 5;
              return SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_FIRST_A;
            }
            for (var j = 0; j < evColorList[i].GetCount() - 4; j++) {
              var bFstCard = evColorList[i].GetAt(evColorList[i].FindIndex(j));
              var bLstCard = evColorList[i].GetAt(evColorList[i].FindIndex(j + 4));
              if (this.GetCardLogicValue(bFstCard) - this.GetCardLogicValue(bLstCard) == 4) {
                for (var k = 0; k < 5; k++) bMaxCardData[k] = evColorList[i].GetAt(evColorList[i].FindIndex(j + k));
                bMaxCardCount.value = 5;
                return SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_NO_A;
              }
            }
          }
          if (evCardList[0].GetCount() >= 1 && evColorList[i].GetCount() >= 4) {
            if (this.GetCardLogicValue(evColorList[i].GetAt(evColorList[i].FindIndex(3))) >= 10) {
              bMaxCardData[0] = evCardList[0].GetHead();
              bMaxCardData[1] = evColorList[i].GetHead();
              for (var k = 1; k < 4; k++) bMaxCardData[k + 1] = evColorList[i].GetAt(evColorList[i].FindIndex(evColorList[i].GetCount() - k));
              bMaxCardCount.value = 5;
              return SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_BACK_A;
            }
            if (1 == this.GetCardValue(evColorList[i].GetHead()) && this.GetCardLogicValue(evColorList[i].GetAt(evColorList[i].FindIndex(evColorList[i].GetCount() - 3))) <= 5) {
              bMaxCardData[0] = evCardList[0].GetHead();
              bMaxCardData[1] = evColorList[i].GetHead();
              for (var k = 1; k < 4; k++) bMaxCardData[k + 1] = evColorList[i].GetAt(evColorList[i].FindIndex(evColorList[i].GetCount() - k));
              bMaxCardCount.value = 5;
              return SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_FIRST_A;
            }
            if (this.GetCardLogicValue(evColorList[i].GetAt(evColorList[i].FindIndex(evColorList[i].GetCount() - 4))) <= 5) {
              bMaxCardData[0] = evCardList[0].GetHead();
              for (var k = 1; k < 5; k++) bMaxCardData[k] = evColorList[i].GetAt(evColorList[i].FindIndex(evColorList[i].GetCount() - k));
              bMaxCardCount.value = 5;
              return SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_FIRST_A;
            }
            for (var j = 0; j < evColorList[i].GetCount() - 3; j++) {
              var bFstCard = evColorList[i].GetAt(evColorList[i].FindIndex(j));
              var bLstCard = evColorList[i].GetAt(evColorList[i].FindIndex(j + 3));
              if (this.GetCardLogicValue(bFstCard) - this.GetCardLogicValue(bLstCard) == 3 || this.GetCardLogicValue(bFstCard) - this.GetCardLogicValue(bLstCard) == 4) {
                bMaxCardData[0] = evCardList[0].GetHead();
                for (var k = 0; k < 4; k++) bMaxCardData[k + 1] = evColorList[i].GetAt(evColorList[i].FindIndex(j + k));
                bMaxCardCount.value = 5;
                return SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_NO_A;
              }
            }
          }
          if (2 == evCardList[0].GetCount() && evColorList[i].GetCount() >= 3) {
            if (this.GetCardLogicValue(evColorList[i].GetAt(evColorList[i].FindIndex(2))) >= 10) {
              bMaxCardData[0] = evCardList[0].GetHead();
              bMaxCardData[1] = evCardList[0].GetTail();
              for (var k = 1; k < 4; k++) bMaxCardData[k + 1] = evColorList[i].GetAt(evColorList[i].FindIndex(evColorList[i].GetCount() - k));
              bMaxCardCount.value = 5;
              return SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_BACK_A;
            }
            if (1 == this.GetCardValue(evColorList[i].GetHead()) && this.GetCardLogicValue(evColorList[i].GetAt(evColorList[i].FindIndex(evColorList[i].GetCount() - 2))) <= 5) {
              bMaxCardData[0] = evCardList[0].GetHead();
              bMaxCardData[1] = evCardList[0].GetTail();
              bMaxCardData[2] = evColorList[i].GetHead();
              for (var k = 1; k < 3; k++) bMaxCardData[k + 2] = evColorList[i].GetAt(evColorList[i].FindIndex(evColorList[i].GetCount() - k));
              bMaxCardCount.value = 5;
              return SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_FIRST_A;
            }
            if (this.GetCardLogicValue(evColorList[i].GetAt(evColorList[i].FindIndex(evColorList[i].GetCount() - 3))) <= 5) {
              bMaxCardData[0] = evCardList[0].GetHead();
              bMaxCardData[1] = evCardList[0].GetTail();
              for (var k = 1; k < 4; k++) bMaxCardData[k + 2] = evColorList[i].GetAt(evColorList[i].FindIndex(evColorList[i].GetCount() - k));
              bMaxCardCount.value = 5;
              return SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_FIRST_A;
            }
            for (var j = 0; j < evColorList[i].GetCount() - 2; j++) {
              var bFstCard = evColorList[i].GetAt(evColorList[i].FindIndex(j));
              var bLstCard = evColorList[i].GetAt(evColorList[i].FindIndex(j + 2));
              if (this.GetCardLogicValue(bFstCard) - this.GetCardLogicValue(bLstCard) == 2 || this.GetCardLogicValue(bFstCard) - this.GetCardLogicValue(bLstCard) == 3 || this.GetCardLogicValue(bFstCard) - this.GetCardLogicValue(bLstCard) == 4) {
                bMaxCardData[0] = evCardList[0].GetHead();
                bMaxCardData[1] = evCardList[0].GetTail();
                for (var k = 0; k < 3; k++) bMaxCardData[k + 2] = evColorList[i].GetAt(evColorList[i].FindIndex(j + k));
                bMaxCardCount.value = 5;
                return SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_NO_A;
              }
            }
          }
        }
        if (5 == bNeedCCount) {
          for (var i = 14; i > 1; i--) if (4 == evCardList[i].GetCount() && evCardList[0].GetCount() > 0) {
            bMaxCardData[0] = evCardList[0].GetAt(evCardList[0].FindIndex(0));
            for (var k = 0; k < evCardList[i].GetCount(); k++) bMaxCardData[1 + k] = evCardList[i].GetAt(evCardList[i].FindIndex(k));
            bMaxCardCount.value = 5;
            return SssDef_1.SssDef.CT_FIVE_BOMB;
          }
          for (var i = 14; i > 1; i--) if (3 == evCardList[i].GetCount() && 2 == evCardList[0].GetCount()) {
            bMaxCardData[0] = 79;
            bMaxCardData[1] = 78;
            for (var k = 0; k < evCardList[i].GetCount(); k++) bMaxCardData[2 + k] = evCardList[i].GetAt(evCardList[i].FindIndex(k));
            bMaxCardCount.value = 5;
            return SssDef_1.SssDef.CT_FIVE_BOMB;
          }
        }
        if (5 == bNeedCCount) for (var i = 14; i > 1; i--) if (evCardList[i].GetCount() + evCardList[0].GetCount() >= 4) {
          SssLib_1.SssLib.ASSERT(evCardList[i].GetCount() <= 4 && evCardList[i].GetCount() >= 2);
          var j = 0;
          for (;j < 4 - evCardList[i].GetCount(); j++) bMaxCardData[j] = evCardList[0].GetAt(evCardList[0].FindIndex(j));
          for (var k = 0; k < evCardList[i].GetCount(); k++) bMaxCardData[j + k] = evCardList[i].GetAt(evCardList[i].FindIndex(k));
          bMaxCardCount.value = 4;
          return SssDef_1.SssDef.CT_FIVE_FOUR_ONE;
        }
        if (5 == bNeedCCount) for (var i = 14; i > 1; i--) if (evCardList[i].GetCount() + evCardList[0].GetCount() == 3) {
          SssLib_1.SssLib.ASSERT(evCardList[i].GetCount() <= 3 && evCardList[i].GetCount() >= 1);
          var bDoubleLogicCard = 0;
          for (var k = 2; k < 15; k++) {
            if (k == i) continue;
            if (evCardList[k].GetCount() >= 2) {
              bDoubleLogicCard = k;
              break;
            }
          }
          if (0 == bDoubleLogicCard) break;
          var j = 0;
          for (;j < 3 - evCardList[i].GetCount(); j++) bMaxCardData[j] = evCardList[0].GetAt(evCardList[0].FindIndex(j));
          for (var k = 0; k < evCardList[i].GetCount(); k++) bMaxCardData[j + k] = evCardList[i].GetAt(evCardList[i].FindIndex(k));
          bMaxCardData[3] = evCardList[bDoubleLogicCard].GetAt(evCardList[bDoubleLogicCard].FindIndex(0));
          bMaxCardData[4] = evCardList[bDoubleLogicCard].GetAt(evCardList[bDoubleLogicCard].FindIndex(1));
          bMaxCardCount.value = 5;
          return SssDef_1.SssDef.CT_FIVE_THREE_DEOUBLE;
        }
        if (5 == bNeedCCount) {
          var bPossibleCard = SssLib_1.SssLib.twoDArr(4, 5);
          var maxCardColorList = new SssLib_1.SssLib.CList_BYTE();
          for (var i = 0; i < 4; i++) if (evColorList[i].GetCount() + evCardList[0].GetCount() >= 5) {
            if (evColorList[i].GetCount() >= 5) for (var k = 0; k < 5; k++) bPossibleCard[i][k] = evColorList[i].GetAt(evColorList[i].FindIndex(k)); else {
              var j = 0;
              for (;j < 5 - evColorList[i].GetCount(); j++) bPossibleCard[i][j] = evCardList[0].GetAt(evCardList[0].FindIndex(j));
              for (var k = 0; k < evColorList[i].GetCount(); k++) bPossibleCard[i][j + k] = evColorList[i].GetAt(evColorList[i].FindIndex(k));
            }
            maxCardColorList.AddTail(i);
          }
          if (0 != maxCardColorList.GetCount()) {
            var bMax = maxCardColorList.GetAt(maxCardColorList.FindIndex(0));
            for (var i = 1; i < maxCardColorList.GetCount(); i++) {
              var bColor = maxCardColorList.GetAt(maxCardColorList.FindIndex(i));
              this.CompareCard(bPossibleCard[bMax], bPossibleCard[bColor], 5, 5, this.btrue) && (bMax = bColor);
            }
            SssLib_1.SssLib.memcpy(bMaxCardData, bPossibleCard[bMax], 5 * sizeof_BYTE);
            bMaxCardCount.value = 5;
            return SssDef_1.SssDef.CT_FIVE_FLUSH;
          }
        }
        if (5 == bNeedCCount) for (var i = 14; i > 4; i--) {
          var bHaveCard = SssLib_1.SssLib.oneDArr(5);
          for (var k = 0; k < 4; k++) bHaveCard[k] = evCardList[i - k].GetCount() > 0;
          bHaveCard[4] = (5 == i ? evCardList[14].GetCount() : evCardList[i - 4].GetCount()) > 0;
          var bCount = (bHaveCard[0] ? 1 : 0) + (bHaveCard[1] ? 1 : 0) + (bHaveCard[2] ? 1 : 0) + (bHaveCard[3] ? 1 : 0) + (bHaveCard[4] ? 1 : 0);
          if (bCount + evCardList[0].GetCount() >= 5) {
            SssLib_1.SssLib.ASSERT(bCount >= 3 && bCount <= 5);
            var j = 0;
            for (;j < 5 - bCount; j++) bMaxCardData[j] = evCardList[0].GetAt(evCardList[0].FindIndex(j));
            for (var k = 0; k < 4; k++) bHaveCard[k] && (bMaxCardData[j++] = evCardList[i - k].GetHead());
            var bFirstCardNum = 5 == i ? 14 : i - 4;
            bHaveCard[4] && (bMaxCardData[4] = evCardList[bFirstCardNum].GetHead());
            bMaxCardCount.value = 5;
            return 14 == i ? SssDef_1.SssDef.CT_FIVE_MIXED_FLUSH_BACK_A : 5 == i ? SssDef_1.SssDef.CT_FIVE_MIXED_FLUSH_FIRST_A : SssDef_1.SssDef.CT_FIVE_MIXED_FLUSH_NO_A;
          }
        }
        for (var i = 14; i > 1; i--) if (evCardList[i].GetCount() + evCardList[0].GetCount() == 3) {
          SssLib_1.SssLib.ASSERT(evCardList[i].GetCount() <= 3 && evCardList[i].GetCount() >= 1);
          var j = 0;
          for (;j < 3 - evCardList[i].GetCount(); j++) bMaxCardData[j] = evCardList[0].GetAt(evCardList[0].FindIndex(j));
          for (var k = 0; k < evCardList[i].GetCount(); k++) bMaxCardData[j + k] = evCardList[i].GetAt(evCardList[i].FindIndex(k));
          bMaxCardCount.value = 3;
          return SssDef_1.SssDef.CT_THREE;
        }
        if (5 == bNeedCCount) for (var i = 14; i > 1; i--) if (evCardList[i].GetCount() + evCardList[0].GetCount() == 2) {
          SssLib_1.SssLib.ASSERT(evCardList[i].GetCount() <= 2 && evCardList[i].GetCount() >= 0);
          var bDoubleLogicCard = 0;
          for (var k = 2; k < 15; k++) {
            if (k == i) continue;
            if (evCardList[k].GetCount() >= 2) {
              bDoubleLogicCard = k;
              break;
            }
          }
          if (0 == bDoubleLogicCard) break;
          var j = 0;
          for (;j < 2 - evCardList[i].GetCount(); j++) bMaxCardData[j] = evCardList[0].GetAt(evCardList[0].FindIndex(j));
          for (var k = 0; k < evCardList[i].GetCount(); k++) bMaxCardData[j + k] = evCardList[i].GetAt(evCardList[i].FindIndex(k));
          bMaxCardData[2] = evCardList[bDoubleLogicCard].GetAt(evCardList[bDoubleLogicCard].FindIndex(0));
          bMaxCardData[3] = evCardList[bDoubleLogicCard].GetAt(evCardList[bDoubleLogicCard].FindIndex(1));
          bMaxCardCount.value = 4;
          return SssDef_1.SssDef.CT_FIVE_TWO_DOUBLE;
        }
        for (var i = 14; i > 1; i--) if (evCardList[i].GetCount() + evCardList[0].GetCount() == 2) {
          SssLib_1.SssLib.ASSERT(evCardList[i].GetCount() <= 2 && evCardList[i].GetCount() >= 0);
          var j = 0;
          for (;j < 2 - evCardList[i].GetCount(); j++) bMaxCardData[j] = evCardList[0].GetAt(evCardList[0].FindIndex(j));
          for (var k = 0; k < evCardList[i].GetCount(); k++) bMaxCardData[j + k] = evCardList[i].GetAt(evCardList[i].FindIndex(k));
          bMaxCardCount.value = 2;
          return SssDef_1.SssDef.CT_ONE_DOUBLE;
        }
        for (var i = 14; i > 1; i--) if (1 == evCardList[i].GetCount()) {
          bMaxCardCount.value = 1;
          bMaxCardData[0] = evCardList[i].GetHead();
          return SssDef_1.SssDef.CT_SINGLE;
        }
        return SssDef_1.SssDef.CT_INVALID;
      };
      SssCards.prototype.IsFlush = function(cbCardData, cbCardCount, bMaxCardData, bMaxCardCount, bNeedCCount) {
        SssLib_1.SssLib.ASSERT(cbCardCount <= 13 || cbCardCount > 3);
        var bKCount = 0;
        var evCardList = SssLib_1.SssLib.CListByteArr(15);
        var evColorList = SssLib_1.SssLib.CListByteArr(4);
        var bCardArray = SssLib_1.SssLib.oneDArr(13);
        SssLib_1.SssLib.memcpy(bCardArray, cbCardData, sizeof_BYTE * cbCardCount);
        this.SortCardList(bCardArray, cbCardCount, this.enDescend);
        for (var i = 0; i < cbCardCount; i++) {
          if (78 == bCardArray[i] || 79 == bCardArray[i]) {
            evCardList[0].AddTail(bCardArray[i]);
            continue;
          }
          var bLogicNum = this.GetCardLogicValue(bCardArray[i]);
          var bColor = this.GetCardColor(bCardArray[i]);
          SssLib_1.SssLib.ASSERT(bLogicNum > 1 && bLogicNum < 15 && bColor >= 0 && bColor <= 3);
          SssLib_1.SssLib.ASSERT(evCardList[bLogicNum].Find(bCardArray[i]) == NULL);
          evCardList[bLogicNum].AddTail(bCardArray[i]);
          evColorList[bColor].AddTail(bCardArray[i]);
        }
        SssLib_1.SssLib.ASSERT(evCardList[0].GetCount() <= 2);
        var bPossibleCard = SssLib_1.SssLib.twoDArr(4, 5);
        var maxCardColorList = new SssLib_1.SssLib.CList_BYTE();
        for (var i = 0; i < 4; i++) if (evColorList[i].GetCount() + evCardList[0].GetCount() >= bNeedCCount) {
          if (evColorList[i].GetCount() >= bNeedCCount) for (var k = 0; k < bNeedCCount; k++) bPossibleCard[i][k] = evColorList[i].GetAt(evColorList[i].FindIndex(k)); else {
            var j = 0;
            for (;j < bNeedCCount - evColorList[i].GetCount(); j++) bPossibleCard[i][j] = evCardList[0].GetAt(evCardList[0].FindIndex(j));
            for (var k = 0; k < evColorList[i].GetCount(); k++) bPossibleCard[i][j + k] = evColorList[i].GetAt(evColorList[i].FindIndex(k));
          }
          maxCardColorList.AddTail(i);
        }
        if (0 != maxCardColorList.GetCount()) {
          var bMax = maxCardColorList.GetAt(maxCardColorList.FindIndex(0));
          for (var i = 1; i < maxCardColorList.GetCount(); i++) {
            var bColor = maxCardColorList.GetAt(maxCardColorList.FindIndex(i));
            this.CompareCard(bPossibleCard[bMax], bPossibleCard[bColor], bNeedCCount, bNeedCCount, this.btrue) && (bMax = bColor);
          }
          SssLib_1.SssLib.memcpy(bMaxCardData, bPossibleCard[bMax], sizeof_BYTE * bNeedCCount);
          bMaxCardCount = bNeedCCount;
          return this.btrue;
        }
        return this.bfalse;
      };
      SssCards.prototype.IsStraight = function(cbCardData, cbCardCount, cbMaxCardData, bMaxCardCount, bNeedCCount) {
        SssLib_1.SssLib.ASSERT(cbCardCount <= 13 || cbCardCount > 3);
        var bKCount = 0;
        var evCardList = SssLib_1.SssLib.CListByteArr(15);
        var evColorList = SssLib_1.SssLib.CListByteArr(4);
        var bCardArray = SssLib_1.SssLib.oneDArr(13);
        SssLib_1.SssLib.memcpy(bCardArray, cbCardData, sizeof_BYTE * cbCardCount);
        this.SortCardList(bCardArray, cbCardCount, this.enDescend);
        for (var i = 0; i < cbCardCount; i++) {
          if (78 == bCardArray[i] || 79 == bCardArray[i]) {
            evCardList[0].AddTail(bCardArray[i]);
            continue;
          }
          var bLogicNum = this.GetCardLogicValue(bCardArray[i]);
          var bColor = this.GetCardColor(bCardArray[i]);
          SssLib_1.SssLib.ASSERT(bLogicNum > 1 && bLogicNum < 15 && bColor >= 0 && bColor <= 3);
          SssLib_1.SssLib.ASSERT(evCardList[bLogicNum].Find(bCardArray[i]) == NULL);
          evCardList[bLogicNum].AddTail(bCardArray[i]);
          evColorList[bColor].AddTail(bCardArray[i]);
        }
        SssLib_1.SssLib.ASSERT(evCardList[0].GetCount() <= 2);
        for (var i = 14; i > bNeedCCount - 1; i--) {
          var bHaveCard = SssLib_1.SssLib.oneDArr(5);
          for (var k = 0; k < bNeedCCount - 1; k++) bHaveCard[k] = evCardList[i - k].GetCount() > 0;
          bHaveCard[bNeedCCount - 1] = (i == bNeedCCount ? evCardList[14].GetCount() : evCardList[i - bNeedCCount + 1].GetCount()) > 0;
          var bCount = 0;
          for (var m = 0; m < bNeedCCount - 1; m++) bCount += bHaveCard[m] ? 1 : 0;
          if (bCount + evCardList[0].GetCount() >= bNeedCCount) {
            SssLib_1.SssLib.ASSERT(bCount >= bNeedCCount - 2 && bCount <= bNeedCCount);
            var j = 0;
            for (;j < bNeedCCount - bCount; j++) cbMaxCardData[j] = evCardList[0].GetAt(evCardList[0].FindIndex(j));
            for (var k = 0; k < bNeedCCount - 1; k++) bHaveCard[k] && (cbMaxCardData[j++] = evCardList[i - k].GetHead());
            var bFirstCardNum = i == bNeedCCount ? 14 : i - bNeedCCount + 1;
            bHaveCard[bNeedCCount - 1] && (cbMaxCardData[bNeedCCount - 1] = evCardList[bFirstCardNum].GetHead());
            bMaxCardCount = bNeedCCount;
            return this.btrue;
          }
        }
        return this.bfalse;
      };
      SssCards.prototype.IsThreeFlushStraight = function(cbCardData, cbCardCount) {
        SssLib_1.SssLib.ASSERT(cbCardCount <= 13 || cbCardCount > 3);
        var bCardList = SssLib_1.SssLib.oneDArr(13);
        SssLib_1.SssLib.memcpy(bCardList, cbCardData, sizeof_BYTE * cbCardCount);
        this.SortCardList(bCardList, cbCardCount, this.enDescend);
        var bLeftCount = cbCardCount;
        var cbStraightFlush = SssLib_1.SssLib.oneDArr(5);
        var bTempCount = 5;
        var tagCardType = this.GetType(bCardList, bLeftCount);
        if (tagCardType.bStraightFlush) for (var i = 0; i < tagCardType.btStraightFlush; ++i) {
          SssLib_1.SssLib.CopyMemory(bCardList, cbCardData, SssLib_1.SssLib.sizeof(bCardList));
          bLeftCount = 13;
          this.SortCardList(bCardList, 13, this.enDescend);
          SssLib_1.SssLib.ZeroMemory(cbStraightFlush, SssLib_1.SssLib.sizeof(cbStraightFlush));
          cbStraightFlush[0] = bCardList[tagCardType.cbStraightFlush[5 * i]];
          cbStraightFlush[1] = bCardList[tagCardType.cbStraightFlush[5 * i + 1]];
          cbStraightFlush[2] = bCardList[tagCardType.cbStraightFlush[5 * i + 2]];
          cbStraightFlush[3] = bCardList[tagCardType.cbStraightFlush[5 * i + 3]];
          cbStraightFlush[4] = bCardList[tagCardType.cbStraightFlush[5 * i + 4]];
          this.RemoveCard(cbStraightFlush, bTempCount, bCardList, bLeftCount);
          bLeftCount -= bTempCount;
          var bLeftCardList = SssLib_1.SssLib.oneDArr(13);
          SssLib_1.SssLib.CopyMemory(bLeftCardList, bCardList, bLeftCount);
          var bLeftCount1 = bLeftCount;
          var tagCardType1 = this.GetType(bCardList, bLeftCount);
          if (tagCardType1.bStraightFlush) for (var j = 0; j < tagCardType1.btStraightFlush; ++j) {
            SssLib_1.SssLib.CopyMemory(bCardList, bLeftCardList, bLeftCount1);
            SssLib_1.SssLib.ZeroMemory(cbStraightFlush, SssLib_1.SssLib.sizeof(cbStraightFlush));
            bLeftCount = bLeftCount1;
            cbStraightFlush[0] = bCardList[tagCardType1.cbStraightFlush[5 * j]];
            cbStraightFlush[1] = bCardList[tagCardType1.cbStraightFlush[5 * j + 1]];
            cbStraightFlush[2] = bCardList[tagCardType1.cbStraightFlush[5 * j + 2]];
            cbStraightFlush[3] = bCardList[tagCardType1.cbStraightFlush[5 * j + 3]];
            cbStraightFlush[4] = bCardList[tagCardType1.cbStraightFlush[5 * j + 4]];
            this.RemoveCard(cbStraightFlush, bTempCount, bCardList, bLeftCount);
            bLeftCount -= bTempCount;
            var bThreeStraightFlush = this.bfalse;
            this.SortCardList(bCardList, bLeftCount, this.enDescend);
            this.GetCardLogicValue(bCardList[0]) >= SssDef_1.SssDef.CARD_XW && this.GetCardLogicValue(bCardList[1]) < SssDef_1.SssDef.CARD_XW ? this.GetCardColor(bCardList[1]) == this.GetCardColor(bCardList[2]) && (this.GetCardLogicValue(bCardList[1]) - this.GetCardLogicValue(bCardList[2]) == 1 || this.GetCardLogicValue(bCardList[1]) - this.GetCardLogicValue(bCardList[2]) == 2 || 14 == this.GetCardLogicValue(bCardList[1]) && this.GetCardLogicValue(bCardList[2]) <= 3) && (bThreeStraightFlush = this.btrue) : this.GetCardLogicValue(bCardList[0]) == SssDef_1.SssDef.CARD_DW && this.GetCardLogicValue(bCardList[1]) == SssDef_1.SssDef.CARD_XW ? bThreeStraightFlush = this.btrue : this.GetCardColor(bCardList[0]) == this.GetCardColor(bCardList[1]) && this.GetCardColor(bCardList[0]) == this.GetCardColor(bCardList[2]) && (this.GetCardLogicValue(bCardList[0]) == this.GetCardLogicValue(bCardList[1]) + 1 && this.GetCardLogicValue(bCardList[1]) == this.GetCardLogicValue(bCardList[2]) + 1 || 14 == this.GetCardLogicValue(bCardList[0]) && 3 == this.GetCardLogicValue(bCardList[1]) && 2 == this.GetCardLogicValue(bCardList[2])) && (bThreeStraightFlush = this.btrue);
            if (bThreeStraightFlush) return this.btrue;
          }
        }
        return this.bfalse;
      };
      SssCards.prototype.getCardDatas = function() {
        return this.m_bCardListData;
      };
      SssCards.getInstance = function() {
        this._instance || (this._instance = new SssCards());
        return this._instance;
      };
      SssCards.prototype.ShowCard = function(m_bHandCardData, m_bHandCardCount, SEARCHE_COUNT) {
        var bCardDataIndex = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ];
        var bFrontCardType, bMidCardType, bBackCardType;
        var bCardData = SssLib_1.SssLib.thrDArr(SEARCHE_COUNT, 3, 5);
        console.log("bCardData", bCardData);
        var bCardDataQuan = SssLib_1.SssLib.twoDArr(SEARCHE_COUNT, 3);
        var bCardDataType = SssLib_1.SssLib.twoDArr(SEARCHE_COUNT, 3);
        var tempm_bHandCardData = SssLib_1.SssLib.oneDArr(13);
        SssLib_1.SssLib.CopyMemory(tempm_bHandCardData, m_bHandCardData, 13);
        var bSegCount = 0;
        this.SortCardList(tempm_bHandCardData, 13, 0);
        this.SortCardList(m_bHandCardData, 13, 0);
        var chaipuke = function(CardData, bCardCount, self) {
          var newCardData = self.GetType(CardData, bCardCount);
          var btFiveSame = 0;
          var btStraightFlush = 1;
          var btFourSame = 2;
          var btGourd = 3;
          var btFlush = 4;
          var btStraight = 5;
          var btThreeSame = 6;
          var btTwoPare = 7;
          var btOnePare = 8;
          var CardType = {};
          newCardData.btFiveSame > 0 && (CardType[btFiveSame] = newCardData.cbFiveSame);
          newCardData.btStraightFlush > 0 && (CardType[btStraightFlush] = newCardData.cbStraightFlush);
          newCardData.btFourSame > 0 && (CardType[btFourSame] = newCardData.cbFourSame);
          newCardData.btGourd > 0 && (CardType[btGourd] = newCardData.cbGourd);
          newCardData.btFlush > 0 && (CardType[btFlush] = newCardData.cbFlush);
          newCardData.btStraight > 0 && (CardType[btStraight] = newCardData.cbStraight);
          newCardData.btThreeSame > 0 && (CardType[btThreeSame] = newCardData.cbThreeSame);
          newCardData.btTwoPare > 0 && (CardType[btTwoPare] = newCardData.cbTwoPare);
          newCardData.btOnePare > 0 && (CardType[btOnePare] = newCardData.cbOnePare);
          return CardType;
        };
        var CardType = chaipuke(tempm_bHandCardData, 13, this);
        for (var Backi = 0; Backi < 9; Backi++) if (null != CardType[Backi]) {
          var num = this.GetTypeValue(Backi);
          for (var count = 0; count < 5; count++) {
            SssLib_1.SssLib.CopyMemory(tempm_bHandCardData, m_bHandCardData, 13);
            bCardDataIndex = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ];
            if (0 == CardType[Backi][count * num] && 0 == CardType[Backi][count * num + 1]) break;
            var bBackCardType_1 = 0;
            var bMidCardType_1 = 0;
            var bFrontCardType_1 = 0;
            for (var j = 0; j < num; j++) {
              var newnum = num * count + j;
              bCardData[bSegCount][2][j] = m_bHandCardData[CardType[Backi][newnum]];
              bCardDataIndex[CardType[Backi][newnum]] = -1;
            }
            var tempbCardData = SssLib_1.SssLib.oneDArr(5);
            SssLib_1.SssLib.CopyMemory(tempbCardData, bCardData[bSegCount][2], 5);
            this.RemoveCard(tempbCardData, num, tempm_bHandCardData, 13);
            var temppp = SssLib_1.SssLib.oneDArr(13 - num);
            SssLib_1.SssLib.CopyMemory(temppp, tempm_bHandCardData, 13 - num);
            var zhongduntemppp = SssLib_1.SssLib.oneDArr(13 - num);
            this.SortCardList(temppp, 13 - num, 0);
            SssLib_1.SssLib.CopyMemory(zhongduntemppp, temppp, 13 - num);
            var MidCardType = chaipuke(temppp, 13 - num, this);
            var MidCardIndex = [];
            for (var IndexInit = 0; IndexInit < 13 - num; IndexInit++) MidCardIndex.push(IndexInit);
            if ("{}" == JSON.stringify(MidCardType)) {
              bCardData[bSegCount][1][0] = temppp[0];
              bCardData[bSegCount][0][0] = temppp[1];
              for (var i = 2; i < 6; i++) bCardData[bSegCount][1][i - 1] = temppp[i];
              for (var j = 6; j < 8; j++) bCardData[bSegCount][0][j - 5] = temppp[j];
              if (5 != num) {
                var len = temppp.length;
                for (var bBackCard = 8; bBackCard < len; ++bBackCard) bCardData[bSegCount][2][bBackCard + num - 8] = temppp[bBackCard];
              }
              this.checkXiangGongCard(bCardData[bSegCount], 0);
              bBackCardType_1 = this.GetCardType(bCardData[bSegCount][2], 5, this.btCardSpecialData);
              bFrontCardType_1 = this.GetCardType(bCardData[bSegCount][0], 3, this.btCardSpecialData);
              bMidCardType_1 = this.GetCardType(bCardData[bSegCount][1], 5, this.btCardSpecialData);
              var BackNewQuan = this.CheckCardQuan(bCardData[bSegCount][2], 2, bBackCardType_1);
              var MidNewQuan = this.CheckCardQuan(bCardData[bSegCount][1], 1, bMidCardType_1);
              var FrontNewQuan = this.CheckCardQuan(bCardData[bSegCount][0], 0, bFrontCardType_1);
              bCardDataType[bSegCount][2] = bBackCardType_1;
              bCardDataType[bSegCount][1] = bMidCardType_1;
              bCardDataType[bSegCount][0] = bFrontCardType_1;
              bCardDataQuan[bSegCount][2] = BackNewQuan;
              bCardDataQuan[bSegCount][1] = MidNewQuan;
              bCardDataQuan[bSegCount][0] = FrontNewQuan;
              bSegCount++;
              continue;
            }
            for (var midi = 0; midi < 9; midi++) if (null != MidCardType[midi]) {
              var midnum = this.GetTypeValue(midi);
              for (var midcount = 0; midcount < MidCardType[midi].length; midcount++) {
                SssLib_1.SssLib.CopyMemory(zhongduntemppp, temppp, 13 - num);
                for (var IndexInit = 0; IndexInit < 13 - num; IndexInit++) MidCardIndex[IndexInit] = IndexInit;
                if (0 == MidCardType[midi][midcount * midnum] && 0 == MidCardType[midi][midcount * midnum + 1]) break;
                SssLib_1.SssLib.CopyMemory(bCardData[bSegCount][2], tempbCardData, 5);
                for (var midj = 0; midj < midnum; midj++) {
                  var newmidnum = midnum * midcount + midj;
                  bCardData[bSegCount][1][midj] = temppp[MidCardType[midi][newmidnum]];
                  MidCardIndex[MidCardType[midi][newmidnum]] = -1;
                }
                var NoUseCard = [];
                for (var NoUseNum = 0; NoUseNum < 13 - num; NoUseNum++) -1 != MidCardIndex[NoUseNum] && NoUseCard.push(temppp[MidCardIndex[NoUseNum]]);
                var NoUseCardType = chaipuke(NoUseCard, NoUseCard.length, this);
                if (null != NoUseCardType[6]) {
                  for (var bFrontCard = 0; bFrontCard < 3; ++bFrontCard) {
                    bCardData[bSegCount][0][bFrontCard] = NoUseCard[NoUseCardType[6][bFrontCard]];
                    NoUseCard[NoUseCardType[6][bFrontCard]] = -1;
                  }
                  for (var i = 0; i < NoUseCard.length; ++i) if (-1 == NoUseCard[i]) {
                    NoUseCard.splice(i, 1);
                    i = -1;
                  }
                } else if (null != NoUseCardType[8]) {
                  for (var bFrontCard = 0; bFrontCard < 2; ++bFrontCard) {
                    bCardData[bSegCount][0][bFrontCard] = NoUseCard[NoUseCardType[8][bFrontCard]];
                    NoUseCard[NoUseCardType[8][bFrontCard]] = -1;
                  }
                  for (var i = 0; i < NoUseCard.length; ++i) if (-1 == NoUseCard[i]) {
                    NoUseCard.splice(i, 1);
                    i = -1;
                  }
                }
                var NoUseCardWalls = NoUseCard.length;
                this.SortCardList(NoUseCard, NoUseCardWalls, 0);
                if (5 != num) for (var bBackCard = num; bBackCard < 5; ++bBackCard) {
                  bCardData[bSegCount][2][bBackCard] = NoUseCard[NoUseCardWalls - 1];
                  NoUseCardWalls--;
                }
                if (5 != midnum) for (var midCard = midnum; midCard < 5; ++midCard) {
                  bCardData[bSegCount][1][midCard] = NoUseCard[NoUseCardWalls - 1];
                  NoUseCardWalls--;
                }
                if (null != NoUseCard) {
                  var len = NoUseCardWalls;
                  for (var bFrontCard = 0; bFrontCard < len; ++bFrontCard) {
                    bCardData[bSegCount][0][2 - bFrontCard] = NoUseCard[NoUseCardWalls - 1];
                    NoUseCardWalls--;
                  }
                }
                this.checkXiangGongCard(bCardData[bSegCount], 0);
                bBackCardType_1 = this.GetCardType(bCardData[bSegCount][2], 5, this.btCardSpecialData);
                bMidCardType_1 = this.GetCardType(bCardData[bSegCount][1], 5, this.btCardSpecialData);
                bFrontCardType_1 = this.GetCardType(bCardData[bSegCount][0], 3, this.btCardSpecialData);
                var BackNewQuan = this.CheckCardQuan(bCardData[bSegCount][2], 2, bBackCardType_1);
                var MidNewQuan = this.CheckCardQuan(bCardData[bSegCount][1], 1, bMidCardType_1);
                var FrontNewQuan = this.CheckCardQuan(bCardData[bSegCount][0], 0, bFrontCardType_1);
                5 != bMidCardType_1 && 6 != bMidCardType_1 && 7 != bMidCardType_1 || (bMidCardType_1 = 5);
                5 != bBackCardType_1 && 6 != bBackCardType_1 && 7 != bBackCardType_1 || (bBackCardType_1 = 5);
                16 != bMidCardType_1 && 17 != bMidCardType_1 && 18 != bMidCardType_1 || (bMidCardType_1 = 16);
                16 != bBackCardType_1 && 17 != bBackCardType_1 && 18 != bBackCardType_1 || (bBackCardType_1 = 16);
                bCardDataType[bSegCount][2] = bBackCardType_1;
                bCardDataType[bSegCount][1] = bMidCardType_1;
                bCardDataType[bSegCount][0] = bFrontCardType_1;
                bCardDataQuan[bSegCount][2] = BackNewQuan;
                bCardDataQuan[bSegCount][1] = MidNewQuan;
                bCardDataQuan[bSegCount][0] = FrontNewQuan;
                bSegCount++;
                if (bSegCount >= SEARCHE_COUNT) {
                  console.log("bCardDataTypebCardDataTypebCardDataType", bCardDataType, bCardDataQuan);
                  var Quan_1 = this.getNewQuan(bCardDataType, bCardDataQuan);
                  return this.GetNewCardDate(Quan_1, bCardData);
                }
                for (var IndexInit = 0; IndexInit < 13 - num; IndexInit++) MidCardIndex[IndexInit] = IndexInit;
              }
            }
          }
        }
        var Quan = this.getNewQuan(bCardDataType, bCardDataQuan);
        return this.GetNewCardDate(Quan, bCardData);
      };
      SssCards.prototype.GetTypeValue = function(num) {
        switch (num) {
         case 0:
         case 1:
         case 3:
         case 4:
         case 5:
          return 5;

         case 2:
         case 7:
          return 4;

         case 6:
          return 3;

         case 8:
          return 2;
        }
      };
      SssCards.prototype.getNewQuan = function(CardType, quan) {
        var liquan = [];
        for (var i = 0; i < CardType.length; i++) {
          var num = 0;
          var NewQuan = 0;
          for (var j = 0; j < 3; j++) {
            num += CardType[i][j];
            NewQuan += quan[i][j];
          }
          liquan.push({
            count: i,
            Num: num,
            CardQuan: NewQuan
          });
        }
        liquan.sort(function(a, b) {
          return b.CardQuan - a.CardQuan;
        });
        console.log("liquan=", liquan);
        var numtemp = [];
        numtemp.push(liquan[0].count);
        var quantemp = 0;
        for (var i = 1; i < liquan.length - 1; i++) {
          if (CardType[liquan[quantemp].count][2] == CardType[liquan[i].count][2] && CardType[liquan[quantemp].count][1] == CardType[liquan[i].count][1] && CardType[liquan[quantemp].count][0] == CardType[liquan[i].count][0]) continue;
          var Allequal = false;
          for (var j = 0; j < numtemp.length; j++) {
            var quannum = 0;
            for (var k = 0; k < 3; k++) quannum += CardType[numtemp[j]][k];
            if (liquan[i].Num == quannum && CardType[liquan[i].count][2] == CardType[numtemp[j]][2] && CardType[liquan[i].count][1] == CardType[numtemp[j]][1] && CardType[liquan[i].count][0] == CardType[numtemp[j]][0]) {
              Allequal = true;
              break;
            }
          }
          if (Allequal) continue;
          if (0 == liquan[i].Num) break;
          numtemp.push(liquan[i].count);
          quantemp = i;
        }
        console.log("numtemp=", numtemp);
        return numtemp;
      };
      SssCards.prototype.CheckCardQuan = function(CardDate, Dun, CardType) {
        switch (Dun) {
         case 0:
          switch (CardType) {
           case SssDef_1.SssDef.CT_THREE:
            return 80;

           case SssDef_1.SssDef.CT_ONE_DOUBLE:
            var value = .1 * (this.GetCardLogicValue(CardDate[1]) - 1);
            return 25 * (value + .5);

           case SssDef_1.SssDef.CT_SINGLE:
            var value = .1 * (this.GetCardLogicValue(CardDate[0]) - 1);
            return 9 * value;
          }

         case 1:
          switch (CardType) {
           case SssDef_1.SssDef.CT_FIVE_BOMB:
            return 100;

           case SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_BACK_A:
           case SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_FIRST_A:
           case SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_NO_A:
            return 90;

           case SssDef_1.SssDef.CT_FIVE_FOUR_ONE:
            return 80;

           case SssDef_1.SssDef.CT_FIVE_THREE_DEOUBLE:
            return 60;

           case SssDef_1.SssDef.CT_FIVE_FLUSH:
            return 40;

           case SssDef_1.SssDef.CT_FIVE_MIXED_FLUSH_NO_A:
           case SssDef_1.SssDef.CT_FIVE_MIXED_FLUSH_FIRST_A:
           case SssDef_1.SssDef.CT_FIVE_MIXED_FLUSH_BACK_A:
            return 35;

           case SssDef_1.SssDef.CT_THREE:
            return 30;

           case SssDef_1.SssDef.CT_FIVE_TWO_DOUBLE:
            var value = .1 * (this.GetCardLogicValue(CardDate[1]) - 1);
            return 15 * (value + .5);

           case SssDef_1.SssDef.CT_ONE_DOUBLE:
            var value = 0;
            for (var i = 0; i < 4; i++) {
              if (this.GetCardLogicValue(CardDate[0]) >= 15) {
                value = .1 * (this.GetCardLogicValue(CardDate[1]) - 1);
                break;
              }
              if (this.GetCardLogicValue(CardDate[i]) == this.GetCardLogicValue(CardDate[i + 1])) {
                value = .1 * (this.GetCardLogicValue(CardDate[i]) - 1);
                break;
              }
            }
            return 10 * value;

           case SssDef_1.SssDef.CT_SINGLE:
            var value = .1 * (this.GetCardLogicValue(CardDate[0]) - 1);
            return 8 * value;
          }

         case 2:
          switch (CardType) {
           case SssDef_1.SssDef.CT_FIVE_BOMB:
            return 100;

           case SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_BACK_A:
           case SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_NO_A:
           case SssDef_1.SssDef.CT_FIVE_STRAIGHT_FLUSH_FIRST_A:
            return 80;

           case SssDef_1.SssDef.CT_FIVE_FOUR_ONE:
            return 70;

           case SssDef_1.SssDef.CT_FIVE_THREE_DEOUBLE:
            return 40;

           case SssDef_1.SssDef.CT_FIVE_FLUSH:
            return 30;

           case SssDef_1.SssDef.CT_FIVE_MIXED_FLUSH_NO_A:
           case SssDef_1.SssDef.CT_FIVE_MIXED_FLUSH_FIRST_A:
           case SssDef_1.SssDef.CT_FIVE_MIXED_FLUSH_BACK_A:
            return 20;

           case SssDef_1.SssDef.CT_THREE:
            return 14;

           case SssDef_1.SssDef.CT_FIVE_TWO_DOUBLE:
            return 8;

           case SssDef_1.SssDef.CT_ONE_DOUBLE:
            return 5;

           case SssDef_1.SssDef.CT_SINGLE:
            return 1;
          }
        }
      };
      SssCards.prototype.GetNewCardDate = function(NewQuan, bCardData) {
        var lastCardData = [];
        for (var num = 0; num < NewQuan.length; num++) for (var i = 0; i < bCardData.length; i++) NewQuan[num] == i && lastCardData.push(bCardData[i]);
        return this.checkXiangGong(lastCardData);
      };
      SssCards.prototype.checkXiangGong = function(bCardData) {
        for (var i = 0; i < bCardData.length; i++) this.CompareCard(bCardData[i][0], bCardData[i][1], 3, 5, false) && this.CompareCard(bCardData[i][1], bCardData[i][2], 5, 5, false) || bCardData.splice(i, 1);
        return bCardData;
      };
      SssCards.prototype.checkXiangGongCard = function(bCardData, count) {
        var num = count % 2;
        var FirstCard = bCardData[num];
        var SecondCard = bCardData[num + 1];
        var FirstLen = 0;
        FirstLen = 0 == num ? 3 : 5;
        if (this.CompareCard(FirstCard, SecondCard, FirstLen, 5, false)) {
          if (0 == count) {
            count++;
            this.checkXiangGongCard(bCardData, count);
          }
        } else {
          var tempcard = [];
          for (var i = 0; i < FirstLen; i++) {
            tempcard.push(SecondCard[i]);
            SecondCard[i] = FirstCard[i];
            FirstCard[i] = tempcard[i];
          }
          count++;
          this.checkXiangGongCard(bCardData, count);
        }
      };
      return SssCards;
    }();
    exports.default = SssCards;
    cc._RF.pop();
  }, {
    "./SssDef": "SssDef",
    "./SssLib": "SssLib"
  } ],
  SssDef: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f3c29kg4hJH2LboWCv4ZGsV", "SssDef");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SssDef = {};
    SssDef.looprc_op = 1;
    SssDef.cardcount = 13;
    SssDef.gmop_changecard = 1;
    SssDef.gmop_changewallorder = 2;
    SssDef.gmreq_cards = 1;
    SssDef.state_idle = 1;
    SssDef.state_xiazhu = 2;
    SssDef.state_peipai = 3;
    SssDef.state_dengdaijiesuan = 4;
    SssDef.process_cheatcheck = 0;
    SssDef.process_ready = 1;
    SssDef.process_xiazhu = 2;
    SssDef.process_fapai = 3;
    SssDef.process_peipai = 4;
    SssDef.process_dengdaijiesuan = 5;
    SssDef.process_gamesettle = 7;
    SssDef.op_xiazhu = 0;
    SssDef.op_peipai = 1;
    SssDef.op_restartgame = 2;
    SssDef.event_xiazhu = 0;
    SssDef.event_peipai = 1;
    SssDef.onOp = "onOp";
    SssDef.onXiaZhu = "onXiaZhu";
    SssDef.onEvent = "onEvent";
    SssDef.onProcess = "onProcess";
    SssDef.onSyncData = "onSyncData";
    SssDef.onDeposit = "onDeposit";
    SssDef.onGmOp = "onGmOp";
    SssDef.op_cfg = {};
    SssDef.op_cfg[SssDef.event_xiazhu] = SssDef.op_xiazhu;
    SssDef.op_cfg[SssDef.event_peipai] = SssDef.op_peipai;
    SssDef.CT_INVALID = 0;
    SssDef.CT_SINGLE = 1;
    SssDef.CT_ONE_DOUBLE = 2;
    SssDef.CT_FIVE_TWO_DOUBLE = 3;
    SssDef.CT_THREE = 4;
    SssDef.CT_FIVE_MIXED_FLUSH_NO_A = 5;
    SssDef.CT_FIVE_MIXED_FLUSH_FIRST_A = 6;
    SssDef.CT_FIVE_MIXED_FLUSH_BACK_A = 7;
    SssDef.CT_FIVE_FLUSH = 8;
    SssDef.CT_FIVE_THREE_DEOUBLE = 9;
    SssDef.CT_FIVE_FOUR_ONE = 15;
    SssDef.CT_FIVE_STRAIGHT_FLUSH_NO_A = 16;
    SssDef.CT_FIVE_STRAIGHT_FLUSH_FIRST_A = 17;
    SssDef.CT_FIVE_STRAIGHT_FLUSH_BACK_A = 18;
    SssDef.CT_FIVE_BOMB = 44;
    SssDef.CT_FIVE_MID_THREE_DEOUBLE = 100;
    SssDef.CT_THIRTEEN_FLUSH = 526;
    SssDef.CT_THIRTEEN = 425;
    SssDef.CT_FOUR_THREESAME = 424;
    SssDef.CT_THREE_BOMB = 423;
    SssDef.CT_TWELVE_KING = 322;
    SssDef.CT_THREE_STRAIGHTFLUSH = 321;
    SssDef.CT_ALL_BIG = 220;
    SssDef.CT_ALL_SMALL = 219;
    SssDef.CT_SAME_COLOR = 218;
    SssDef.CT_FIVEPAIR_THREE = 217;
    SssDef.CT_SIXPAIR = 216;
    SssDef.CT_THREE_FLUSH = 215;
    SssDef.CT_THREE_STRAIGHT = 214;
    SssDef.LX_ONEPARE = 13;
    SssDef.LX_TWOPARE = 14;
    SssDef.LX_THREESAME = 15;
    SssDef.LX_STRAIGHT = 16;
    SssDef.LX_FLUSH = 17;
    SssDef.LX_GOURD = 18;
    SssDef.LX_FOURSAME = 19;
    SssDef.LX_STRAIGHTFLUSH = 20;
    SssDef.CARD_MASK_COLOR = 240;
    SssDef.CARD_MASK_VALUE = 15;
    SssDef.CARD_DW = 16;
    SssDef.CARD_XW = 15;
    SssDef.CARD_COUNT = 54;
    SssDef.enDescend = 0;
    SssDef.enAscend = 1;
    SssDef.enColor = 2;
    SssDef.cardTypeNames = {};
    SssDef.cardTypeNames[SssDef.CT_SINGLE] = 1;
    SssDef.cardTypeNames[SssDef.CT_ONE_DOUBLE] = 2;
    SssDef.cardTypeNames[SssDef.CT_FIVE_TWO_DOUBLE] = 3;
    SssDef.cardTypeNames[SssDef.CT_THREE] = 4;
    SssDef.cardTypeNames[SssDef.CT_FIVE_MIXED_FLUSH_NO_A] = 5;
    SssDef.cardTypeNames[SssDef.CT_FIVE_MIXED_FLUSH_FIRST_A] = 5;
    SssDef.cardTypeNames[SssDef.CT_FIVE_MIXED_FLUSH_BACK_A] = 5;
    SssDef.cardTypeNames[SssDef.CT_FIVE_FLUSH] = 8;
    SssDef.cardTypeNames[SssDef.CT_FIVE_THREE_DEOUBLE] = 9;
    SssDef.cardTypeNames[SssDef.CT_FIVE_FOUR_ONE] = 10;
    SssDef.cardTypeNames[SssDef.CT_FIVE_STRAIGHT_FLUSH_NO_A] = 11;
    SssDef.cardTypeNames[SssDef.CT_FIVE_STRAIGHT_FLUSH_FIRST_A] = 11;
    SssDef.cardTypeNames[SssDef.CT_FIVE_STRAIGHT_FLUSH_BACK_A] = 11;
    SssDef.cardTypeNames[SssDef.CT_FIVE_BOMB] = 44;
    SssDef.specialCardNames = {};
    SssDef.specialCardNames[SssDef.CT_THIRTEEN_FLUSH] = "清龙";
    SssDef.specialCardNames[SssDef.CT_THIRTEEN] = "一条龙";
    SssDef.specialCardNames[SssDef.CT_FOUR_THREESAME] = "四套三条";
    SssDef.specialCardNames[SssDef.CT_THREE_BOMB] = "三分天下";
    SssDef.specialCardNames[SssDef.CT_TWELVE_KING] = "十二皇族";
    SssDef.specialCardNames[SssDef.CT_THREE_STRAIGHTFLUSH] = "三同花顺";
    SssDef.specialCardNames[SssDef.CT_ALL_BIG] = "全大";
    SssDef.specialCardNames[SssDef.CT_ALL_SMALL] = "全小";
    SssDef.specialCardNames[SssDef.CT_SAME_COLOR] = "凑一色";
    SssDef.specialCardNames[SssDef.CT_FIVEPAIR_THREE] = "五对三条";
    SssDef.specialCardNames[SssDef.CT_SIXPAIR] = "六对半";
    SssDef.specialCardNames[SssDef.CT_THREE_FLUSH] = "三同花";
    SssDef.specialCardNames[SssDef.CT_THREE_STRAIGHT] = "三顺子";
    SssDef.seatCfg = {
      2: [ {
        seatPos: [ -500, -270 ],
        seatType: 1,
        cardPos: [ 0, -200 ],
        cardScale: 1.5
      }, {
        seatPos: [ -200, 270 ],
        seatType: 1,
        cardPos: [ 0, 200 ],
        cardScale: 1.5
      } ],
      3: [ {
        seatPos: [ -500, -270 ],
        seatType: 1,
        cardPos: [ 0, -200 ],
        cardScale: 1.5
      }, {
        seatPos: [ 500, 150 ],
        seatType: 1,
        cardPos: [ 300, 150 ],
        cardScale: 1.5
      }, {
        seatPos: [ -500, 150 ],
        seatType: 1,
        cardPos: [ -300, 150 ],
        cardScale: 1.5
      } ],
      4: [ {
        seatPos: [ -500, -270 ],
        seatType: 1,
        cardPos: [ 0, -200 ],
        cardScale: 1.5
      }, {
        seatPos: [ 590, 0 ],
        seatType: 1,
        cardPos: [ 380, 0 ],
        cardScale: 1.5
      }, {
        seatPos: [ -200, 270 ],
        seatType: 1,
        cardPos: [ 0, 200 ],
        cardScale: 1.5
      }, {
        seatPos: [ -590, 0 ],
        seatType: 1,
        cardPos: [ -380, 0 ],
        cardScale: 1.5
      } ],
      5: [ {
        seatPos: [ -500, -270 ],
        seatType: 1,
        cardPos: [ 0, -200 ],
        cardScale: 1.5
      }, {
        seatPos: [ 590, 0 ],
        seatType: 1,
        cardPos: [ 400, 0 ],
        cardScale: 1.5
      }, {
        seatPos: [ 370, 270 ],
        seatType: 1,
        cardPos: [ 170, 200 ],
        cardScale: 1.5
      }, {
        seatPos: [ -370, 270 ],
        seatType: 1,
        cardPos: [ -170, 200 ],
        cardScale: 1.5
      }, {
        seatPos: [ -590, 0 ],
        seatType: 1,
        cardPos: [ -400, 0 ],
        cardScale: 1.5
      } ],
      6: [ {
        seatPos: [ -500, -270 ],
        seatType: 1,
        cardPos: [ -170, -200 ],
        cardScale: 1.5
      }, {
        seatPos: [ 370, -240 ],
        seatType: 1,
        cardPos: [ 170, -200 ],
        cardScale: 1.5
      }, {
        seatPos: [ 590, 0 ],
        seatType: 1,
        cardPos: [ 400, 0 ],
        cardScale: 1.5
      }, {
        seatPos: [ 370, 270 ],
        seatType: 1,
        cardPos: [ 170, 200 ],
        cardScale: 1.5
      }, {
        seatPos: [ -370, 270 ],
        seatType: 1,
        cardPos: [ -170, 200 ],
        cardScale: 1.5
      }, {
        seatPos: [ -590, 0 ],
        seatType: 1,
        cardPos: [ -400, 0 ],
        cardScale: 1.5
      } ],
      7: [ {
        seatPos: [ -490, -270 ],
        seatType: 0,
        cardPos: [ 0, -196 ],
        cardScale: 1.5
      }, {
        seatPos: [ 597, -127 ],
        seatType: 1,
        cardPos: [ 450, -107 ],
        cardScale: 1
      }, {
        seatPos: [ 597, 96 ],
        seatType: 1,
        cardPos: [ 450, 116 ],
        cardScale: 1
      }, {
        seatPos: [ 208, 320 ],
        seatType: 0,
        cardPos: [ 208, 180 ],
        cardScale: 1
      }, {
        seatPos: [ -208, 320 ],
        seatType: 0,
        cardPos: [ -208, 180 ],
        cardScale: 1
      }, {
        seatPos: [ -597, 96 ],
        seatType: 1,
        cardPos: [ -450, 116 ],
        cardScale: 1
      }, {
        seatPos: [ -597, -127 ],
        seatType: 1,
        cardPos: [ -450, -107 ],
        cardScale: 1
      } ],
      8: [ {
        seatPos: [ -490, -270 ],
        seatType: 0,
        cardPos: [ -175, -196 ],
        cardScale: 1.5
      }, {
        seatPos: [ 253, -320 ],
        seatType: 0,
        cardPos: [ 244, -180 ],
        cardScale: 1
      }, {
        seatPos: [ 597, -127 ],
        seatType: 1,
        cardPos: [ 450, -107 ],
        cardScale: 1
      }, {
        seatPos: [ 597, 96 ],
        seatType: 1,
        cardPos: [ 450, 116 ],
        cardScale: 1
      }, {
        seatPos: [ 208, 320 ],
        seatType: 0,
        cardPos: [ 208, 180 ],
        cardScale: 1
      }, {
        seatPos: [ -208, 320 ],
        seatType: 0,
        cardPos: [ -208, 180 ],
        cardScale: 1
      }, {
        seatPos: [ -597, 96 ],
        seatType: 1,
        cardPos: [ -450, 116 ],
        cardScale: 1
      }, {
        seatPos: [ -597, -127 ],
        seatType: 1,
        cardPos: [ -450, -107 ],
        cardScale: 1
      } ],
      9: [ {
        seatPos: [ -490, -270 ],
        seatType: 0,
        cardPos: [ -175, -196 ],
        cardScale: 1.5
      }, {
        seatPos: [ 253, -320 ],
        seatType: 0,
        cardPos: [ 244, -180 ],
        cardScale: 1
      }, {
        seatPos: [ 597, -127 ],
        seatType: 1,
        cardPos: [ 450, -107 ],
        cardScale: 1
      }, {
        seatPos: [ 597, 96 ],
        seatType: 1,
        cardPos: [ 450, 116 ],
        cardScale: 1
      }, {
        seatPos: [ 253, 320 ],
        seatType: 0,
        cardPos: [ 244, 180 ],
        cardScale: 1
      }, {
        seatPos: [ 0, 320 ],
        seatType: 0,
        cardPos: [ 0, 180 ],
        cardScale: 1
      }, {
        seatPos: [ -253, 320 ],
        seatType: 0,
        cardPos: [ -244, 180 ],
        cardScale: 1
      }, {
        seatPos: [ -597, 96 ],
        seatType: 1,
        cardPos: [ -450, 116 ],
        cardScale: 1
      }, {
        seatPos: [ -597, -127 ],
        seatType: 1,
        cardPos: [ -450, -107 ],
        cardScale: 1
      } ],
      10: [ {
        seatPos: [ -253, -320 ],
        seatType: 0,
        cardPos: [ -244, -180 ],
        cardScale: 1
      }, {
        seatPos: [ 0, -320 ],
        seatType: 0,
        cardPos: [ 0, -180 ],
        cardScale: 1
      }, {
        seatPos: [ 253, -320 ],
        seatType: 0,
        cardPos: [ 244, -180 ],
        cardScale: 1
      }, {
        seatPos: [ 597, -127 ],
        seatType: 1,
        cardPos: [ 450, -107 ],
        cardScale: 1
      }, {
        seatPos: [ 597, 96 ],
        seatType: 1,
        cardPos: [ 450, 116 ],
        cardScale: 1
      }, {
        seatPos: [ 253, 320 ],
        seatType: 0,
        cardPos: [ 244, 180 ],
        cardScale: 1
      }, {
        seatPos: [ 0, 320 ],
        seatType: 0,
        cardPos: [ 0, 180 ],
        cardScale: 1
      }, {
        seatPos: [ -253, 320 ],
        seatType: 0,
        cardPos: [ -244, 180 ],
        cardScale: 1
      }, {
        seatPos: [ -597, 96 ],
        seatType: 1,
        cardPos: [ -450, 116 ],
        cardScale: 1
      }, {
        seatPos: [ -597, -127 ],
        seatType: 1,
        cardPos: [ -450, -107 ],
        cardScale: 1
      } ]
    };
    SssDef.chineseNumber = [ "", "一", "二", "三", "四", "五", "六", "七", "八", "九", "十" ];
    SssDef.cardColor = [ "方块", "草花", "红桃", "黑桃" ];
    SssDef.cardNumber = [ "", "A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K" ];
    exports.SssDef = SssDef;
    cc._RF.pop();
  }, {} ],
  SssEntry: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "256ffRKZOtKq5gaRx/gv6RG", "SssEntry");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ModuleMgr_1 = require("../../Plat/GameMgrs/ModuleMgr");
    var modules = {
      SssSetCard: "SubLayer/Games/Sss/Prefab_SssSetCards",
      SssRecord: "SubLayer/Games/Sss/SssRecord"
    };
    var SssEntry = function() {
      function SssEntry() {}
      SssEntry.getInstance = function() {
        this._instance || (this._instance = new SssEntry());
        return this._instance;
      };
      SssEntry.prototype.registerModules = function() {
        ModuleMgr_1.default.getInstance().registerGame(modules);
        console.log("输出一句log");
      };
      return SssEntry;
    }();
    exports.default = SssEntry;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/ModuleMgr": "ModuleMgr"
  } ],
  SssFinalSettleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "81fa8Evj5NHyZY7mCtlkgdL", "SssFinalSettleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BunchInfoMgr_1 = require("../../Plat/GameMgrs/BunchInfoMgr");
    var SwitchMgr_1 = require("../../Plat/GameMgrs/SwitchMgr");
    var LoginMgr_1 = require("../../Plat/GameMgrs/LoginMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.shareSwitch = null;
        _this.shareSwitch = SwitchMgr_1.default.getInstance().get_switch_performance_sharing();
        return _this;
      }
      Model.prototype.updateSwitch = function(msg) {
        this.shareSwitch = msg.cfg.switch_performance_sharing;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          settleTotal: ctrl.settleTotal,
          settleRound: ctrl.settleRound,
          togglePanel: ctrl.togglePanel,
          content: ctrl.content,
          exitBtn: ctrl.exitBtn,
          shareBtn: ctrl.shareBtn,
          closeBtn: ctrl.closeBtn
        };
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.closeBtn.active = false;
        this.ui.togglePanel.children[0].getComponent(cc.Toggle).check();
        var node = cc.instantiate(this.ui.settleTotal);
        this.ui.content.addChild(node);
        var node2 = cc.instantiate(this.ui.settleRound);
        this.ui.content.addChild(node2);
        node2.active = false;
        if (BunchInfoMgr_1.default.getInstance().getplazzaFlag()) {
          this.ui.exitBtn.active = false;
          this.ui.closeBtn.active = true;
          this.ui.shareBtn.position.x = 0;
        }
        this.showShareBtn();
      };
      View.prototype.updateContent = function(index) {
        this.ui.content.children[0].active = !index;
        this.ui.content.children[1].active = index;
      };
      View.prototype.showShareBtn = function() {
        this.ui.shareBtn.active = 1 == this.model.shareSwitch;
      };
      return View;
    }(BaseView_1.default);
    var Prefab_SssSettlePanelCtrl = function(_super) {
      __extends(Prefab_SssSettlePanelCtrl, _super);
      function Prefab_SssSettlePanelCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.settleTotal = null;
        _this.settleRound = null;
        _this.togglePanel = null;
        _this.content = null;
        _this.exitBtn = null;
        _this.shareBtn = null;
        _this.closeBtn = null;
        return _this;
      }
      Prefab_SssSettlePanelCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_SssSettlePanelCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqGameSwitch": this.http_reqGameSwitch
        };
      };
      Prefab_SssSettlePanelCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_SssSettlePanelCtrl.prototype.connectUi = function() {
        var _this = this;
        var _loop_1 = function(i) {
          this_1.connect(G_UiType.toggle, this_1.ui.togglePanel.children[i], function() {
            _this.toggleCB(i);
          }, "切换内容");
        };
        var this_1 = this;
        for (var i = 0; i < this.ui.togglePanel.children.length; ++i) _loop_1(i);
        this.connect(G_UiType.button, this.ui.exitBtn, this.exitBtnCB, "退出大菠萝总结算");
        this.connect(G_UiType.button, this.ui.shareBtn, this.shareBtnCB, "点击分享结算");
        this.connect(G_UiType.button, this.ui.closeBtn, this.closeBtnCB, "关闭大菠萝总结算");
      };
      Prefab_SssSettlePanelCtrl.prototype.start = function() {};
      Prefab_SssSettlePanelCtrl.prototype.http_reqGameSwitch = function(msg) {
        this.model.updateSwitch(msg);
        this.view.showShareBtn();
      };
      Prefab_SssSettlePanelCtrl.prototype.toggleCB = function(index) {
        this.view.updateContent(index);
      };
      Prefab_SssSettlePanelCtrl.prototype.exitBtnCB = function() {
        BunchInfoMgr_1.default.getInstance().clear();
        LoginMgr_1.default.getInstance().disconnectGameSvr();
      };
      Prefab_SssSettlePanelCtrl.prototype.shareBtnCB = function() {
        console.log("btn_share_cb");
        this.start_sub_module(G_MODULE.Shared);
      };
      Prefab_SssSettlePanelCtrl.prototype.closeBtnCB = function() {
        var curRunScene = cc.director.getScene();
        if ("Plaza" == curRunScene.name) {
          BunchInfoMgr_1.default.getInstance().clear();
          this.finish();
        } else {
          BunchInfoMgr_1.default.getInstance().clear();
          this.finish();
          this.start_module(G_MODULE.Plaza);
        }
      };
      __decorate([ property({
        tooltip: "总统计预制",
        type: cc.Prefab
      }) ], Prefab_SssSettlePanelCtrl.prototype, "settleTotal", void 0);
      __decorate([ property({
        tooltip: "每局统计预制",
        type: cc.Prefab
      }) ], Prefab_SssSettlePanelCtrl.prototype, "settleRound", void 0);
      __decorate([ property({
        tooltip: "侧边按钮父节点",
        type: cc.Node
      }) ], Prefab_SssSettlePanelCtrl.prototype, "togglePanel", void 0);
      __decorate([ property({
        tooltip: "内容父节点",
        type: cc.Node
      }) ], Prefab_SssSettlePanelCtrl.prototype, "content", void 0);
      __decorate([ property({
        tooltip: "退出房间按钮",
        type: cc.Node
      }) ], Prefab_SssSettlePanelCtrl.prototype, "exitBtn", void 0);
      __decorate([ property({
        tooltip: "分享按钮",
        type: cc.Node
      }) ], Prefab_SssSettlePanelCtrl.prototype, "shareBtn", void 0);
      __decorate([ property({
        tooltip: "关闭按钮",
        type: cc.Node
      }) ], Prefab_SssSettlePanelCtrl.prototype, "closeBtn", void 0);
      Prefab_SssSettlePanelCtrl = __decorate([ ccclass ], Prefab_SssSettlePanelCtrl);
      return Prefab_SssSettlePanelCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_SssSettlePanelCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../Plat/GameMgrs/LoginMgr": "LoginMgr",
    "../../Plat/GameMgrs/SwitchMgr": "SwitchMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView"
  } ],
  SssHandCardCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c97beD/rK9AFqxVAhwc+QhA", "SssHandCardCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var SssDef_1 = require("../SssMgr/SssDef");
    var SssLogic_1 = require("../SssMgr/SssLogic");
    var LocalStorage_1 = require("../../../Plat/Libs/LocalStorage");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.roomValue = null;
        _this.seatId = null;
        _this.logicSeatId = null;
        _this.handCard = [];
        _this.finalCard = [];
        _this.cardType = [];
        _this.dunScore = [];
        _this.specialType = 0;
        _this.horseCard = {};
        _this.sssAudio = RoomMgr_1.default.getInstance().getAudio();
        _this.myWatchState = false;
        _this.cardBgState = 3;
        _this.roomValue = SssLogic_1.default.getInstance().getRoomValue();
        _this.seatId = ctrl.seatId;
        _this.logicSeatId = RoomMgr_1.default.getInstance().getLogicSeatId(ctrl.seatId);
        _this.myWatchState = ctrl.myWatchState;
        _this.updateCardBg();
        return _this;
      }
      Model.prototype.updateHandCard = function() {
        this.handCard = SssLogic_1.default.getInstance().getMyHandCard();
      };
      Model.prototype.updateSettleInfo = function() {
        this.finalCard = SssLogic_1.default.getInstance().getFinalCard(this.logicSeatId) || [];
        this.cardType = SssLogic_1.default.getInstance().getCardType(this.logicSeatId);
        this.dunScore = SssLogic_1.default.getInstance().getScore(this.logicSeatId);
        this.horseCard = SssLogic_1.default.getInstance().getMaCardMap();
      };
      Model.prototype.updateCardBg = function() {
        this.cardBgState = LocalStorage_1.default.getInstance().getSssCardBGCfg() || 3;
      };
      Model.prototype.clear = function() {};
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          cardPanel: ctrl.cardPanel,
          cardTypePanel: ctrl.cardTypePanel,
          cardAtlas: ctrl.cardAtlas,
          cardTypeAtlas: ctrl.cardTypeAtlas,
          scorePanel: ctrl.scorePanel,
          scoreFont: ctrl.scoreFont,
          scoreBg: ctrl.scoreBg,
          gun: ctrl.gun,
          dankong: ctrl.dankong,
          specialCard: ctrl.specialCard,
          waitCard: ctrl.waitCard,
          cardTypes: [],
          cardNodes: [],
          scoreLbls: []
        };
        _this.node = ctrl.node;
        _this.initUi();
        _this.daqiangTO = null;
        _this.specialTO = null;
        _this.gunAnimFinish = null;
        return _this;
      }
      View.prototype.initUi = function() {
        for (var i = 0; i < 3; ++i) {
          this.ui.cardPanel.children[i].zIndex = i;
          this.ui.cardNodes.push(this.ui.cardPanel.children[i]);
          this.ui.cardTypes.push(this.ui.cardTypePanel.children[i]);
          this.ui.scoreLbls.push(this.ui.scorePanel.children[i]);
        }
        this.clear();
      };
      View.prototype.clear = function() {
        this.changeAllCard(false);
        this.ui.cardPanel.active = false;
        this.ui.specialCard.active = false;
        for (var i = 0; i < 3; ++i) {
          this.ui.scoreLbls[i].getComponent(cc.Sprite).spriteFrame = this.ui.scoreBg[0];
          this.ui.scoreLbls[i].getChildByName("count").getComponent(cc.Label).font = this.ui.scoreFont[0];
          this.ui.scoreLbls[i].getChildByName("count").getComponent(cc.Label).string = "+0水";
          this.ui.scoreLbls[i].active = false;
          this.ui.cardTypes[i].active = false;
        }
        this.node.getChildByName("qiangkongPanel").destroyAllChildren();
        var cardList = this.ui.waitCard.getChildByName("cardLayout").children;
        var name = 3 == this.model.cardBgState ? "bull_0x00" : "bull_0x00_" + this.model.cardBgState;
        for (var i = 0; i < cardList.length; ++i) cardList[i].getComponent(cc.Sprite).spriteFrame = this.ui.cardAtlas.getSpriteFrame(name);
      };
      View.prototype.recover = function() {};
      View.prototype.flipCard = function(index) {
        var _this = this;
        if (this.model.finalCard.length <= 0) return;
        var node = this.ui.cardNodes[index], cards = this.model.finalCard[index], dunSort = SssLogic_1.default.getInstance().getDunSort(index), time = .45 * dunSort.indexOf(this.model.logicSeatId);
        var delay1 = cc.delayTime(time);
        var cb1 = cc.callFunc(function() {
          node.zIndex += 1;
          for (var i = 0; i < node.children.length; ++i) {
            var name = cards[i] < 16 ? "bull_0x0" + cards[i].toString(16) : "bull_0x" + cards[i].toString(16);
            node.children[i].getComponent(cc.Sprite).spriteFrame = _this.ui.cardAtlas.getSpriteFrame(name);
            if (1 == _this.model.roomValue.v_buyHorse && cards[i] == _this.model.roomValue.v_buyHorseData) {
              node.children[i].children[0].active = true;
              node.children[i].color = cc.color(240, 241, 162);
            }
          }
        }, this);
        var scaleUp = cc.scaleTo(.1, 1.5);
        var cb2 = cc.callFunc(function() {
          var data = _this.model.cardType;
          var code = SssDef_1.SssDef.cardTypeNames[data[index]];
          0 == index && data[index] == SssDef_1.SssDef.CT_THREE && (code = (SssDef_1.SssDef.cardTypeNames[SssDef_1.SssDef.CT_THREE] + 10).toString());
          1 == index && data[index] == SssDef_1.SssDef.CT_FIVE_THREE_DEOUBLE && (code = (SssDef_1.SssDef.cardTypeNames[SssDef_1.SssDef.CT_FIVE_THREE_DEOUBLE] + 10).toString());
          _this.ui.cardTypes[index].getComponent(cc.Sprite).spriteFrame = _this.ui.cardTypeAtlas.getSpriteFrame("cardtype_" + code);
          _this.model.sssAudio.getInstance().playCardTypeAudio(code || "", 0);
          _this.ui.cardTypes[index].active = true;
        }, this);
        var delay2 = cc.delayTime(.2);
        var scaleDown = cc.scaleTo(.1, 1);
        var cb3 = cc.callFunc(function() {
          _this.ui.cardTypes[index].active = false;
          node.zIndex -= 1;
        }, this);
        var action = cc.sequence(delay1, cb1, scaleUp, cb2, delay2, scaleDown, cb3);
        node.runAction(action);
      };
      View.prototype.refreshDunScore = function(index) {
        var _this = this;
        var type;
        if (index < 2) {
          if (this.model.dunScore[index] >= 0) {
            type = 0;
            this.ui.scoreLbls[index].getChildByName("count").getComponent(cc.Label).string = "+" + this.model.dunScore[index] + "水";
          } else {
            type = 1;
            this.ui.scoreLbls[index].getChildByName("count").getComponent(cc.Label).string = this.model.dunScore[index] + "水";
          }
          this.ui.scoreLbls[index].getComponent(cc.Sprite).spriteFrame = this.ui.scoreBg[type];
          this.ui.scoreLbls[index].getChildByName("count").getComponent(cc.Label).font = this.ui.scoreFont[type];
          var p_1 = this.ui.scoreLbls[index].position;
          var delay = cc.delayTime(.2);
          var moveDown = cc.moveTo(.05, cc.p(0, -60.1));
          var cb = cc.callFunc(function() {
            _this.ui.scoreLbls[index].active = false;
            _this.ui.scoreLbls[index].position = p_1;
            0 == index && (_this.ui.scoreLbls[2].active = true);
            _this.refreshTotalScore(_this.model.dunScore[index]);
          });
          var action = cc.sequence(delay, moveDown, cb);
          this.ui.scoreLbls[index].active = true;
          this.ui.scoreLbls[index].runAction(action);
        } else 2 == index && this.refreshTotalScore(this.model.dunScore[index]);
      };
      View.prototype.refreshTotalScore = function(score) {
        var _this = this;
        var totoal = 0;
        var scale1 = cc.scaleTo(.08, 1.5, .5);
        var scale2 = cc.scaleTo(.08, .5, 1.5);
        var scale3 = cc.scaleTo(.08, 1, 1);
        var scorePanel = this.ui.scoreLbls[2];
        var scoreString = scorePanel.getChildByName("count").getComponent(cc.Label).string;
        var curScore = parseInt(scoreString.substring(0, scoreString.length - 1));
        totoal = curScore + score;
        var callback = function() {
          var type;
          if (totoal >= 0) {
            type = 0;
            scorePanel.getChildByName("count").getComponent(cc.Label).string = "+" + totoal + "水";
          } else {
            type = 1;
            scorePanel.getChildByName("count").getComponent(cc.Label).string = totoal + "水";
          }
          scorePanel.getComponent(cc.Sprite).spriteFrame = _this.ui.scoreBg[type];
          scorePanel.getChildByName("count").getComponent(cc.Label).font = _this.ui.scoreFont[type];
        };
        var action = cc.sequence(scale1, scale2, scale3, cc.callFunc(callback));
        scorePanel.runAction(action);
        this.model.sssAudio.getInstance().playChangeScore();
      };
      View.prototype.startDaqiang = function(msg) {
        var _this = this;
        if (msg.seatid == this.model.logicSeatId) {
          this.ui.gun.active = true;
          var anim = this.ui.gun.getComponent(cc.Animation);
          this.gunAnimFinish = function() {
            _this.ui.gun.active = false;
            _this.refreshTotalScore(msg.data.score);
            _this.ui.gun.getComponent(cc.Animation).off("finished", _this.gunAnimFinish, _this);
          };
          anim.on("finished", this.gunAnimFinish, this);
          var cardContainer = this.node.parent;
          var gunSeat = cardContainer.getChildByName("handCard_" + RoomMgr_1.default.getInstance().getViewSeatId(msg.seatid)).getPosition();
          var bGundataSeat = cardContainer.getChildByName("handCard_" + RoomMgr_1.default.getInstance().getViewSeatId(msg.data.seatid)).getPosition();
          var pos = {
            x: bGundataSeat.x - gunSeat.x,
            y: bGundataSeat.y - gunSeat.y
          };
          this.ui.gun.rotation = -(180 * Math.atan2(pos.y, pos.x) / Math.PI - 45);
          this.model.sssAudio.getInstance().playGun();
          var animState = anim.play();
          animState.repeatCount = 3;
        } else if (msg.data.seatid == this.model.logicSeatId) {
          var dankongCB = function() {
            var newNode = new cc.Node();
            _this.node.getChildByName("qiangkongPanel").addChild(newNode);
            var sp = newNode.addComponent(cc.Sprite);
            sp.spriteFrame = _this.ui.dankong;
            var x = 40 - 80 * Math.random();
            var y = 50 - 100 * Math.random();
            newNode.setPosition(x, y);
          };
          ctrl.schedule(dankongCB, .15, 2);
          this.daqiangTO = setTimeout(function() {
            _this.refreshTotalScore(-msg.data.score);
          }, 450);
        }
      };
      View.prototype.showSpecialCard = function(msg) {
        var _this = this;
        var showSpecialLoop = function(i, time) {
          if (i >= msg.length) return;
          if (msg[i].seatid == _this.model.logicSeatId) {
            _this.ui.specialCard.active = false;
            _this.changeAllCard(true);
            _this.ui.scoreLbls[2].active = true;
            _this.refreshTotalScore(msg[i].totalScore);
          } else if (null != _this.model.logicSeatId && msg[i].cardType > _this.model.specialType) {
            var multiple = Math.pow(2, _this.model.horseCard[msg[i].seatid] + _this.model.horseCard[_this.model.logicSeatId]);
            _this.refreshTotalScore(-msg[i].cardTypeScore * multiple);
          }
          _this.specialTO = setTimeout(function() {
            showSpecialLoop(i + 1, time);
          }, time);
        };
        showSpecialLoop(0, 3e3);
      };
      View.prototype.showWaitCard = function() {
        this.ui.waitCard.active = true;
      };
      View.prototype.hideWaitCard = function() {
        this.ui.waitCard.active = false;
        this.ui.cardPanel.active = true;
      };
      View.prototype.changeAllCard = function(brightOrCover) {
        this.model.finalCard = SssLogic_1.default.getInstance().getFinalCard(this.model.logicSeatId);
        var name, cards;
        for (var i = 0; i < this.ui.cardNodes.length; ++i) for (var j = 0; j < this.ui.cardNodes[i].childrenCount; ++j) {
          if (brightOrCover) {
            cards = this.model.finalCard[i];
            name = cards[j] < 16 ? "bull_0x0" + cards[j].toString(16) : "bull_0x" + cards[j].toString(16);
            if (1 == this.model.roomValue.v_buyHorse && cards[j] == this.model.roomValue.v_buyHorseData) {
              this.ui.cardNodes[i].children[j].children[0].active = true;
              this.ui.cardNodes[i].children[j].color = cc.color(240, 241, 162);
            }
          } else {
            name = 3 == this.model.cardBgState ? "bull_0x00" : "bull_0x00_" + this.model.cardBgState;
            this.ui.cardNodes[i].children[j].color = cc.color(255, 255, 255);
            this.ui.cardNodes[i].children[j].children[0].active = false;
          }
          this.ui.cardNodes[i].children[j].getComponent(cc.Sprite).spriteFrame = this.ui.cardAtlas.getSpriteFrame(name);
        }
      };
      View.prototype.clearAllTimeout = function() {
        null !== this.specialTO && clearTimeout(this.specialTO);
        null !== this.daqiangTO && clearTimeout(this.daqiangTO);
      };
      View.prototype.clearAllAction = function() {
        var CNC = this.ui.cardNodes.children;
        if (CNC) for (var key = 0; key < CNC.length; key++) CNC[key].stopAllActions();
        var SLC = this.ui.scoreLbls.children;
        if (SLC) for (var key = 0; key < SLC.length; key++) SLC[key].stopAllActions();
      };
      View.prototype.clearAllAnimation = function() {
        this.ui.gun.getComponent(cc.Animation).off("finished", this.gunAnimFinish, this);
      };
      View.prototype.updateCardBg = function() {
        for (var i = 0; i < this.ui.cardNodes.length; ++i) for (var j = 0; j < this.ui.cardNodes[i].childrenCount; ++j) {
          var bgName = 3 == this.model.cardBgState ? "bull_0x00" : "bull_0x00_" + this.model.cardBgState;
          this.ui.cardNodes[i].children[j].getComponent(cc.Sprite).spriteFrame.name.indexOf("bull_0x00") >= 0 && (this.ui.cardNodes[i].children[j].getComponent(cc.Sprite).spriteFrame = this.ui.cardAtlas.getSpriteFrame(bgName));
        }
        var cardList = this.ui.waitCard.getChildByName("cardLayout").children;
        var name = 3 == this.model.cardBgState ? "bull_0x00" : "bull_0x00_" + this.model.cardBgState;
        for (var i = 0; i < cardList.length; ++i) cardList[i].getComponent(cc.Sprite).spriteFrame = this.ui.cardAtlas.getSpriteFrame(name);
      };
      return View;
    }(BaseView_1.default);
    var SssHandCardCtrl = function(_super) {
      __extends(SssHandCardCtrl, _super);
      function SssHandCardCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.cardPanel = null;
        _this.cardAtlas = null;
        _this.cardTypePanel = null;
        _this.cardTypeAtlas = null;
        _this.scorePanel = null;
        _this.scoreFont = [];
        _this.scoreBg = [];
        _this.gun = null;
        _this.dankong = null;
        _this.specialCard = null;
        _this.waitCard = null;
        _this.touched = false;
        return _this;
      }
      SssHandCardCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.bipaiTo = null;
        this.gameHide = false;
      };
      SssHandCardCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onProcess: this.onProcess,
          onStartGame: this.onStartGame,
          onCardFinish: this.onCardFinish,
          onLeaveRoom: this.onLeaveRoom,
          "http.reqSettle": this.http_reqSettle,
          onSyncData: this.onSyncData,
          onMidEnter: this.onMidEnter
        };
      };
      SssHandCardCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          sss_startBipai: this.room_startbipai,
          sss_startDaqiang: this.room_startdaqiang,
          sss_specialCard: this.room_specialcard,
          sss_quanleida: this.room_quanleida,
          sss_roundEnd: this.sss_roundEnd,
          sss_changeCardBg: this.sss_changeCardBg,
          EnterForeground: this.EnterForeground
        };
      };
      SssHandCardCtrl.prototype.connectUi = function() {};
      SssHandCardCtrl.prototype.clearAllTimeout = function() {
        null !== this.bipaiTo && clearTimeout(this.bipaiTo);
      };
      SssHandCardCtrl.prototype.EnterForeground = function() {
        this.clearAllTimeout();
        this.view.clearAllTimeout();
        this.view.clearAllAction();
        this.view.clearAllAnimation();
        ctrl.unscheduleAllCallbacks();
        this.gameHide = true;
      };
      SssHandCardCtrl.prototype.onProcess = function(msg) {
        msg.process != SssDef_1.SssDef.process_peipai && msg.process != SssDef_1.SssDef.process_dengdaijiesuan || (this.gameHide = false);
        if (this.model.myWatchState) return;
        msg.process == SssDef_1.SssDef.process_fapai ? msg.seatid == this.model.logicSeatId && this.model.updateHandCard() : msg.process == SssDef_1.SssDef.process_peipai && this.view.showWaitCard();
      };
      SssHandCardCtrl.prototype.onStartGame = function() {
        this.model.myWatchState = false;
        this.gameHide = false;
      };
      SssHandCardCtrl.prototype.onCardFinish = function(msg) {
        if (msg.seatid == this.model.logicSeatId && msg.state == SssDef_1.SssDef.state_dengdaijiesuan) {
          this.model.specialType = msg.isSpecial;
          this.view.hideWaitCard();
          if (0 == this.model.seatId) {
            this.ui.specialCard.active = this.model.specialType > 0;
            this.ui.cardPanel.on("touchend", this.touchMyselfCard, this);
          }
        }
      };
      SssHandCardCtrl.prototype.onLeaveRoom = function(msg) {
        if (this.model.logicSeatId == msg.seatid) {
          this.model.clear();
          this.view.clear();
          console.log("leave");
          this.finish();
        }
      };
      SssHandCardCtrl.prototype.http_reqSettle = function() {
        if (RoomMgr_1.default.getInstance().isGameStarted()) return;
        if (this.gameHide) return;
        this.model.updateSettleInfo();
        this.ui.specialCard.active = this.model.specialType > 0;
        if (0 == this.model.seatId) {
          this.ui.cardPanel.off("touchend", this.touchMyselfCard, this);
          this.touched = false;
          this.view.changeAllCard(false);
        }
      };
      SssHandCardCtrl.prototype.onSyncData = function(msg) {
        msg.process != SssDef_1.SssDef.process_peipai && msg.process != SssDef_1.SssDef.process_dengdaijiesuan || (this.gameHide = false);
        if (msg.process == SssDef_1.SssDef.process_peipai) {
          var info = msg.allSeatInfo[this.model.logicSeatId];
          if (info.state == SssDef_1.SssDef.state_peipai) this.view.showWaitCard(); else if (info.state == SssDef_1.SssDef.state_dengdaijiesuan) {
            this.model.specialType = info.IsSpecialCard;
            this.view.hideWaitCard();
            0 == this.model.seatId && this.ui.cardPanel.on("touchend", this.touchMyselfCard, this);
          }
        }
      };
      SssHandCardCtrl.prototype.onMidEnter = function(msg) {
        if (this.model.logicSeatId == msg.seatid) return this.model.myWatchState = true;
        var playerinfo = msg.allSeatInfo[this.model.logicSeatId];
        playerinfo.state == SssDef_1.SssDef.state_peipai && this.view.showWaitCard();
        if (playerinfo.state == SssDef_1.SssDef.state_dengdaijiesuan) {
          this.model.specialType = playerinfo.IsSpecialCard;
          this.view.hideWaitCard();
        }
      };
      SssHandCardCtrl.prototype.room_startbipai = function(msg) {
        var _this = this;
        if (this.model.myWatchState) return;
        if (null == this.model.logicSeatId) return;
        if (0 == this.model.specialType) {
          this.bipaiTo = setTimeout(function() {
            _this.view.refreshDunScore(msg.index);
          }, msg.time);
          this.view.flipCard(msg.index);
        }
      };
      SssHandCardCtrl.prototype.room_startdaqiang = function(msg) {
        if (this.model.myWatchState) return;
        this.view.startDaqiang(msg);
      };
      SssHandCardCtrl.prototype.room_specialcard = function(msg) {
        if (this.model.myWatchState) return;
        this.view.showSpecialCard(msg);
      };
      SssHandCardCtrl.prototype.room_quanleida = function(msg) {
        if (this.model.myWatchState) return;
        null != this.model.logicSeatId && this.view.refreshTotalScore(msg[this.model.logicSeatId]);
      };
      SssHandCardCtrl.prototype.sss_roundEnd = function() {
        this.view.clear();
      };
      SssHandCardCtrl.prototype.sss_changeCardBg = function() {
        this.model.updateCardBg();
        this.view.updateCardBg();
      };
      SssHandCardCtrl.prototype.touchMyselfCard = function() {
        this.view.changeAllCard(!this.touched);
        this.touched = !this.touched;
      };
      SssHandCardCtrl.prototype.setVidAndUid = function(obj) {
        this.uid = obj.uid;
        this.seatId = obj.viewID;
      };
      SssHandCardCtrl.prototype.setWatchState = function(state) {
        this.myWatchState = state;
      };
      __decorate([ property({
        tooltip: "牌的节点",
        type: cc.Node
      }) ], SssHandCardCtrl.prototype, "cardPanel", void 0);
      __decorate([ property({
        tooltip: "扑克牌图集",
        type: cc.SpriteAtlas
      }) ], SssHandCardCtrl.prototype, "cardAtlas", void 0);
      __decorate([ property({
        tooltip: "牌型父节点",
        type: cc.Node
      }) ], SssHandCardCtrl.prototype, "cardTypePanel", void 0);
      __decorate([ property({
        tooltip: "牌型图集",
        type: cc.SpriteAtlas
      }) ], SssHandCardCtrl.prototype, "cardTypeAtlas", void 0);
      __decorate([ property({
        tooltip: "分数label",
        type: cc.Node
      }) ], SssHandCardCtrl.prototype, "scorePanel", void 0);
      __decorate([ property({
        tooltip: "分数字体",
        type: [ cc.Font ]
      }) ], SssHandCardCtrl.prototype, "scoreFont", void 0);
      __decorate([ property({
        tooltip: "分数底",
        type: [ cc.SpriteFrame ]
      }) ], SssHandCardCtrl.prototype, "scoreBg", void 0);
      __decorate([ property({
        tooltip: "枪",
        type: cc.Node
      }) ], SssHandCardCtrl.prototype, "gun", void 0);
      __decorate([ property({
        tooltip: "弹孔",
        type: cc.SpriteFrame
      }) ], SssHandCardCtrl.prototype, "dankong", void 0);
      __decorate([ property({
        tooltip: "特殊牌型",
        type: cc.Node
      }) ], SssHandCardCtrl.prototype, "specialCard", void 0);
      __decorate([ property({
        tooltip: "等待牌",
        type: cc.Node
      }) ], SssHandCardCtrl.prototype, "waitCard", void 0);
      SssHandCardCtrl = __decorate([ ccclass ], SssHandCardCtrl);
      return SssHandCardCtrl;
    }(BaseCtrl_1.default);
    exports.default = SssHandCardCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../../../Plat/Libs/LocalStorage": "LocalStorage",
    "../SssMgr/SssDef": "SssDef",
    "../SssMgr/SssLogic": "SssLogic"
  } ],
  SssLib: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "80d85xCNAxNz4LRp/W8edHL", "SssLib");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SssLib = {};
    Array.prototype.remove = function(index) {
      if (this.length <= 0) return;
      for (var j = index; j < this.length - 1; j++) this[j] = this[j + 1];
      this.length = this.length - 1;
    };
    Array.prototype.erase = function(from, to) {
      to || (to = from + 1);
      var count = to - from;
      for (var j = from; j < to; j++) this.remove(from);
      return this;
    };
    Array.prototype.front = function(from, to) {
      return this[0];
    };
    Array.prototype.back = function(from, to) {
      return this[this.length - 1];
    };
    Array.prototype.insert = function(index, item) {
      this.splice(index, 0, item);
    };
    Array.prototype.empty = function() {
      return 0 == this.length;
    };
    Array.prototype.size = function() {
      return this.length;
    };
    Array.prototype.begin = function() {
      return 0;
    };
    Array.prototype.cbegin = function() {
      return 0;
    };
    Array.prototype.end = function() {
      return this.length;
    };
    Array.prototype.cend = function() {
      return this.length;
    };
    SssLib.sizeof = function(obj) {
      return obj.length;
    };
    SssLib.rand = function() {
      return parseInt(1e6 * Math.random());
    };
    SssLib.ZeroMemory = function(obj, len) {
      for (var i = 0; i < len; ++i) ;
    };
    SssLib.memset = function(obj, value, len) {
      for (var i = 0; i < len; ++i) ;
    };
    SssLib.memcpy = function(dest, src, len) {
      for (var i = 0; i < len; ++i) dest[i] = src[i];
    };
    SssLib.CopyMemory = function(dest, src, len) {
      for (var i = 0; i < len; ++i) dest[i] = src[i];
    };
    SssLib.CopyMemory1 = function(dest, src, len, destStart) {
      for (var i = 0; i < len; ++i) dest[i + destStart] = src[i];
    };
    SssLib.CopyMemory2 = function(dest, src, len, srcStart) {
      for (var i = 0; i < len; ++i) dest[i] = src[i + srcStart];
    };
    SssLib.oneDArr = function(len) {
      var arr = [];
      for (var i = 0; i < len; ++i) arr.push(0);
      return arr;
    };
    SssLib.twoDArr = function(one, two) {
      var arr1 = [];
      for (var i = 0; i < one; ++i) {
        var arr2 = [];
        for (var j = 0; j < two; ++j) arr2.push(0);
        arr1.push(arr2);
      }
      return arr1;
    };
    SssLib.thrDArr = function(one, two, thr) {
      var arr1 = [];
      for (var i = 0; i < one; ++i) {
        var arr2 = [];
        for (var j = 0; j < two; ++j) {
          var arr3 = [];
          for (var k = 0; k < thr; ++k) arr3.push(0);
          arr2.push(arr3);
        }
        arr1.push(arr2);
      }
      return arr1;
    };
    var CList_BYTE = function() {
      this.arr = [];
      this.count = 0;
      this.AddTail = function(obj) {
        this.arr.push(obj);
        this.count++;
      };
      this.GetTail = function() {
        return this.arr[this.count - 1];
      };
      this.GetHead = function() {
        return this.arr[0];
      };
      this.GetCount = function() {
        return this.count;
      };
      this.GetAt = function(index) {
        return this.arr[index];
      };
      this.Find = function(value) {
        for (var i = 0; i < this.count; ++i) if (this.arr[i] == value) return i;
        return null;
      };
      this.FindIndex = function(index) {
        return index;
      };
      this.GetAt = function(index) {
        return this.arr[index];
      };
    };
    SssLib.CList_BYTE = CList_BYTE;
    SssLib.CListByteArr = function(len) {
      var arr = [];
      for (var i = 0; i < len; ++i) {
        var obj = new CList_BYTE();
        arr.push(obj);
      }
      return arr;
    };
    SssLib.CountArray = function(arr) {
      return arr.length;
    };
    SssLib.ASSERT = function() {};
    exports.SssLib = SssLib;
    cc._RF.pop();
  }, {} ],
  SssLogic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3764cZnIBZAmolJmF2n/Rnj", "SssLogic");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../../../Plat/Libs/BaseMgr");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var SssDef_1 = require("./SssDef");
    var GEventDef_1 = require("../../../Plat/GameMgrs/GEventDef");
    var SssCards_1 = require("./SssCards");
    var SssLogic = function(_super) {
      __extends(SssLogic, _super);
      function SssLogic() {
        var _this = _super.call(this) || this;
        _this.routes = {};
        _this.roomInfo = RoomMgr_1.default.getInstance().getRoomInfo();
        _this.roomValue = RoomMgr_1.default.getInstance().getFangKaCfg();
        _this.mySeatId = RoomMgr_1.default.getInstance().getMySeatId();
        _this.myHandCard = [];
        _this.curSpecialType = null;
        _this.curSpecialCard = [ [], [], [] ];
        _this.specialCard = [];
        _this.finalCardList = {};
        _this.cardTypeList = {};
        _this.scoreList = {};
        _this.bunchInfo = null;
        _this.dunSort = [ [], [], [] ];
        _this.daqiangIndex = [];
        _this.quanleida = {};
        _this.quanleidaIndex = null;
        _this.maCard = null;
        _this.maCardCount = null;
        _this.maCardMap = {};
        _this.dissRoom = false;
        _this.gameHide = false;
        _this.nextReadyTime = 0;
        _this.timeDiff = 0;
        _this.movieFinisTO = null;
        _this.bipaiTO = null;
        _this.specialTO = null;
        _this.daqiangTO = null;
        _this.resendMovieFinishTO = null;
        _this.bipaistate = false;
        _this.curProcess = 0;
        _this.routes = {
          onProcess: _this.onProcess,
          onStartGame: _this.onStartGame,
          "http.reqSettle": _this.http_reqSettle,
          onSyncData: _this.onSyncData,
          onDissolutionRoom: _this.onDissolutionRoom
        };
        G_FRAME.globalEmitter.on("EnterForeground", _this.EnterForeground.bind(_this), _this);
        return _this;
      }
      SssLogic.prototype.EnterForeground = function() {
        this.bipaistate = false;
        this.gameHide = true;
        this.clearAllTimeout();
      };
      SssLogic.prototype.clearAllTimeout = function() {
        null !== this.movieFinisTO && clearTimeout(this.movieFinisTO);
        null !== this.bipaiTO && clearTimeout(this.bipaiTO);
        null !== this.specialTO && clearTimeout(this.specialTO);
        null !== this.daqiangTO && clearTimeout(this.daqiangTO);
        null !== this.resendMovieFinishTO && clearTimeout(this.resendMovieFinishTO);
      };
      SssLogic.prototype.onProcess = function(msg) {
        msg.process != SssDef_1.SssDef.process_peipai && msg.process != SssDef_1.SssDef.process_dengdaijiesuan || (this.gameHide = false);
        this.curProcess = msg.process;
        if (msg.process == SssDef_1.SssDef.process_fapai) {
          this.mySeatId = msg.seatid;
          this.myHandCard = msg.handcard;
          this.curSpecialType = msg.teshupaixing;
          this.curSpecialCard = msg.SpecialCard;
          this.maCard = msg.maCard;
          this.maCardCount = msg.maCardCount;
          var serverCurTime = msg.pushCardTime.substring(4);
          var clinetCurTime = Date.now().toString().substring(4);
          this.timeDiff = clinetCurTime - serverCurTime;
        }
        if (msg.process == SssDef_1.SssDef.process_cheatcheck) {
          var serverCurTime = msg.serverCurTime.substring(4);
          var clinetCurTime = Date.now().toString().substring(4);
          this.timeDiff = clinetCurTime - serverCurTime;
        }
      };
      SssLogic.prototype.onStartGame = function() {
        this.gameHide = false;
      };
      SssLogic.prototype.clearSettleData = function() {
        this.finalCardList = {};
        this.scoreList = {};
        this.cardTypeList = {};
        this.daqiangIndex = [];
        this.specialCard = [];
        this.quanleida = {};
        this.quanleidaIndex = null;
        for (var i = 0; i < 3; ++i) this.dunSort[i] = [];
        this.bipaistate = false;
      };
      SssLogic.prototype.http_reqSettle = function(msg) {
        var _this = this;
        this.clearAllTimeout();
        var settle = JSON.parse(msg.settle);
        this.clearSettleData();
        if (RoomMgr_1.default.getInstance().isGameStarted()) return;
        var wanjiasettle = settle.wanjiasettle;
        this.bunchInfo = RoomMgr_1.default.getInstance().getBunchInfo();
        var upPierArr = [], midPierArr = [], downPierArr = [];
        for (var key in wanjiasettle) {
          this.finalCardList[key] = wanjiasettle[key].handcards;
          this.cardTypeList[key] = wanjiasettle[key].allduntype;
          this.scoreList[key] = wanjiasettle[key].alldunfen;
          if ("{}" != JSON.stringify(wanjiasettle[key].daqiangfen)) {
            var data = [];
            for (var seatid in wanjiasettle[key].daqiangfen) data.push({
              seatid: seatid,
              score: wanjiasettle[key].daqiangfen[seatid]
            });
            this.daqiangIndex.push({
              seatid: parseInt(key),
              data: data
            });
          }
          if (wanjiasettle[key].isteshupaixing > 0) this.specialCard.push({
            seatid: parseInt(key),
            cardType: wanjiasettle[key].isteshupaixing,
            cardTypeScore: wanjiasettle[key].cardtypefen,
            totalScore: wanjiasettle[key].teshupaixingyingfen
          }); else {
            upPierArr.push({
              seatid: parseInt(key),
              cards: wanjiasettle[key].handcards[0]
            });
            midPierArr.push({
              seatid: parseInt(key),
              cards: wanjiasettle[key].handcards[1]
            });
            downPierArr.push({
              seatid: parseInt(key),
              cards: wanjiasettle[key].handcards[2]
            });
          }
          if (0 != wanjiasettle[key].quanleidafen) {
            this.quanleida[key] = wanjiasettle[key].quanleidafen;
            wanjiasettle[key].quanleidafen > 0 && (this.quanleidaIndex = parseInt(key));
          }
          this.maCardMap[key] = wanjiasettle[key].maCardCount;
        }
        this.sortBipaiIndex(upPierArr, midPierArr, downPierArr);
        this.sortDaqiangIndex();
        this.nextReadyTime = parseInt(settle.settleTime.substring(4)) + this.timeDiff + this.getAnimTime();
        if (this.gameHide) {
          if (RoomMgr_1.default.getInstance().isBunchFinish()) return RoomMgr_1.default.getInstance().showFinalSettle();
          var curTime = parseInt(Date.now().toString().substring(4));
          var loopTime_1 = parseInt((this.nextReadyTime - curTime) / 1e3) + 10;
          if (10 > loopTime_1 > 0) {
            console.log("发送了 movieFinish");
            RoomMgr_1.default.getInstance().movieFinished();
          } else if (loopTime_1 > 10) {
            var cb_1 = function() {
              if (loopTime_1 <= 10) {
                console.log("发送了 movieFinish");
                RoomMgr_1.default.getInstance().movieFinished();
                clearTimeout(_this.resendMovieFinishTO);
                return;
              }
              loopTime_1--;
              _this.resendMovieFinishTO = setTimeout(cb_1, 1);
            };
            this.resendMovieFinishTO = setTimeout(cb_1, 1);
          }
          return;
        }
        this.movieFinisTO = setTimeout(function() {
          _this.clear();
          if (RoomMgr_1.default.getInstance().isBunchFinish()) RoomMgr_1.default.getInstance().showFinalSettle(); else if (!_this.dissRoom) {
            _this.gemit(GEventDef_1.default.sss_roundEnd);
            console.log("发送了 movieFinish");
            RoomMgr_1.default.getInstance().movieFinished();
          }
        }, this.getAnimTime() + 1e3);
      };
      SssLogic.prototype.getNextReadyTime = function() {
        console.log("下次自动准备时间戳", this.nextReadyTime);
        return this.nextReadyTime;
      };
      SssLogic.prototype.onSyncData = function(msg) {
        this.myHandCard = msg.handcard;
        this.mySeatId = RoomMgr_1.default.getInstance().getMySeatId();
        this.finalCardList[this.mySeatId] = msg.settleCard;
        msg.process != SssDef_1.SssDef.process_peipai && msg.process != SssDef_1.SssDef.process_dengdaijiesuan || (this.gameHide = false);
        if (msg.process == SssDef_1.SssDef.process_peipai && msg.state == SssDef_1.SssDef.state_peipai && !cc.director.getScene().getChildByName("Prefab_SssSetCards")) {
          this.mySeatId = msg.seatid;
          this.myHandCard = msg.handcard;
          this.curSpecialType = msg.teshupaixing;
          this.curSpecialCard = msg.SpecialCard;
          this.maCard = msg.maCard;
          this.maCardCount = msg.maCardCount;
        }
        RoomMgr_1.default.getInstance().isBunchFinish() && RoomMgr_1.default.getInstance().showFinalSettle();
      };
      SssLogic.prototype.onDissolutionRoom = function(msg) {
        this.dissRoom = msg.result;
      };
      SssLogic.prototype.send_peipai = function(data, isteshupaixing) {
        var msg = {
          data: data,
          isteshu: isteshupaixing,
          allcard: this.myHandCard,
          event: SssDef_1.SssDef.event_peipai
        };
        console.error("大菠萝 出牌 数据", msg);
        this.finalCardList[this.mySeatId] = data;
        this.send_msg("room.roomHandler.playerOp", msg);
      };
      SssLogic.prototype.send_xipai = function() {
        this.send_msg("room.roomHandler.xiPai");
      };
      SssLogic.prototype.getAnimTime = function() {
        var _this = this;
        var time = 0;
        var specialTime = function() {
          0 != _this.specialCard.length ? time += 3e3 * _this.specialCard.length + 1e3 : "{}" != JSON.stringify(_this.quanleida) && (time += 3e3);
        };
        var daqianTime = function(index) {
          if (index >= _this.daqiangIndex.length) {
            time += 250;
            return specialTime();
          }
          time += 750;
          daqianTime(index + 1);
        };
        var ordinaryTime = function(index) {
          if (index >= 3 || 0 == _this.dunSort[0].length) return daqianTime(0);
          time += 450 * (_this.dunSort[0].length + 1);
          ordinaryTime(index + 1);
        };
        ordinaryTime(0);
        return time + 1e3;
      };
      SssLogic.prototype.send_bipai = function(index) {
        var _this = this;
        if (index >= 3 || 0 == this.dunSort[0].length) {
          this.send_daqiang(0, 0);
          return;
        }
        this.gemit(GEventDef_1.default.sss_startBipai, {
          index: index,
          time: 450 * this.dunSort[0].length
        });
        this.bipaiTO = setTimeout(function() {
          _this.send_bipai(index + 1);
        }, 450 * (this.dunSort[0].length + 1));
      };
      SssLogic.prototype.send_daqiang = function(index, nextIndex) {
        var _this = this;
        if (index >= this.daqiangIndex.length) {
          this.specialTO = setTimeout(function() {
            _this.send_specialCard();
          }, 250);
          return;
        }
        this.gemit(GEventDef_1.default.sss_startDaqiang, {
          seatid: this.daqiangIndex[index].seatid,
          data: this.daqiangIndex[index].data[nextIndex]
        });
        this.daqiangTO = setTimeout(function() {
          var newIndex, newNextIndex;
          if (nextIndex + 1 < _this.daqiangIndex[index].data.length) {
            newNextIndex = nextIndex + 1;
            newIndex = index;
          } else {
            newNextIndex = 0;
            newIndex = index + 1;
          }
          _this.send_daqiang(newIndex, newNextIndex);
        }, 750);
      };
      SssLogic.prototype.send_specialCard = function() {
        if (0 != this.specialCard.length) {
          this.specialCard.sort(function(a, b) {
            return a.cardType - b.cardType;
          });
          this.gemit(GEventDef_1.default.sss_specialCard, this.specialCard);
        } else "{}" != JSON.stringify(this.quanleida) && this.gemit(GEventDef_1.default.sss_quanleida, this.quanleida);
      };
      SssLogic.prototype.getMyHandCard = function() {
        return this.myHandCard;
      };
      SssLogic.prototype.getCurSpecialType = function() {
        return this.curSpecialType;
      };
      SssLogic.prototype.getCurSpecialCard = function() {
        return this.curSpecialCard;
      };
      SssLogic.prototype.getFinalCard = function(seatid) {
        return this.finalCardList[seatid];
      };
      SssLogic.prototype.getCardType = function(seatid) {
        return this.cardTypeList[seatid];
      };
      SssLogic.prototype.getScore = function(seatid) {
        return this.scoreList[seatid];
      };
      SssLogic.prototype.getDunSort = function(index) {
        return this.dunSort[index];
      };
      SssLogic.prototype.getRoomInfo = function() {
        return this.roomInfo;
      };
      SssLogic.prototype.getRoomValue = function() {
        return this.roomValue;
      };
      SssLogic.prototype.getMaCard = function() {
        return this.maCard;
      };
      SssLogic.prototype.getMaCardMap = function() {
        return this.maCardMap;
      };
      SssLogic.prototype.getBunchInfo = function() {
        return this.bunchInfo;
      };
      SssLogic.prototype.setBiPaiState = function(bool) {
        this.bipaistate = bool;
      };
      SssLogic.prototype.getBiPaiState = function() {
        return this.bipaistate;
      };
      SssLogic.prototype.sortBipaiIndex = function(upPierArr, midPierArr, downPierArr) {
        var _loop_1 = function(i) {
          var cardCount = i > 0 ? 5 : 3;
          arguments_1[i].sort(function(a, b) {
            return SssCards_1.default.getInstance().CompareCard(a.cards, b.cards, cardCount, cardCount, false) ? -1 : 1;
          });
          for (var j = 0; j < arguments_1[i].length; ++j) this_1.dunSort[i].push(arguments_1[i][j].seatid);
        };
        var arguments_1 = arguments, this_1 = this;
        for (var i = 0; i < arguments.length; ++i) _loop_1(i);
      };
      SssLogic.prototype.sortDaqiangIndex = function() {
        if (null == this.quanleidaIndex) return;
        for (var i = 0; i < this.daqiangIndex.length; ++i) if (this.daqiangIndex[i].seatid == this.quanleidaIndex) {
          var temp = this.daqiangIndex[this.daqiangIndex.length - 1];
          this.daqiangIndex[this.daqiangIndex.length - 1] = this.daqiangIndex[i];
          this.daqiangIndex[i] = temp;
          break;
        }
      };
      SssLogic.prototype.clear = function() {
        this.myHandCard = [];
        this.finalCardList = {};
        this.scoreList = {};
        this.cardTypeList = {};
        this.daqiangIndex = [];
        this.specialCard = [];
        this.quanleida = {};
        this.quanleidaIndex = null;
        this.curSpecialType = null;
        for (var i = 0; i < 3; ++i) this.curSpecialCard[i] = [];
        for (var i = 0; i < 3; ++i) this.dunSort[i] = [];
        this.bipaistate = false;
      };
      SssLogic.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        SssLogic._instance = null;
        delete SssLogic._instance;
      };
      SssLogic.getInstance = function() {
        this._instance || (this._instance = new SssLogic());
        return this._instance;
      };
      return SssLogic;
    }(BaseMgr_1.default);
    exports.default = SssLogic;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/GEventDef": "GEventDef",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseMgr": "BaseMgr",
    "./SssCards": "SssCards",
    "./SssDef": "SssDef"
  } ],
  SssRecordCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "91bdbBGmTdACJE7eNv91lw2", "SssRecordCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var SssDef_1 = require("../SssMgr/SssDef");
    var BunchInfoMgr_1 = require("../../../Plat/GameMgrs/BunchInfoMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.roundData = null;
        _this.roundData = BunchInfoMgr_1.default.getInstance().getBunchInfo().meiju;
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          closeBtn: ctrl.closeBtn,
          content: ctrl.content,
          item: ctrl.item
        };
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        for (var i = this.model.roundData.length - 1; i >= 0; --i) {
          var newNode = cc.instantiate(this.ui.item);
          newNode.getComponent("SssSettleRoundItemCtrl").init(this.model.roundData[i][1], i);
          this.ui.content.addChild(newNode);
        }
      };
      return View;
    }(BaseView_1.default);
    var SssRecord = function(_super) {
      __extends(SssRecord, _super);
      function SssRecord() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.closeBtn = null;
        _this.content = null;
        _this.item = null;
        return _this;
      }
      SssRecord.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      SssRecord.prototype.defineNetEvents = function() {
        this.n_events = {
          onProcess: this.onProcess,
          onStartGame: this.onStartGame,
          onDissolutionRoom: this.onDissolutionRoom,
          onGameFinished: this.onGameFinished
        };
      };
      SssRecord.prototype.defineGlobalEvents = function() {};
      SssRecord.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.closeBtn, this.finish, "关闭");
      };
      SssRecord.prototype.start = function() {};
      SssRecord.prototype.onProcess = function(msg) {
        msg.process == SssDef_1.SssDef.process_peipai ? this.finish() : msg.process == SssDef_1.SssDef.process_gamesettle && this.finish();
      };
      SssRecord.prototype.onStartGame = function(msg) {
        this.finish();
      };
      SssRecord.prototype.onDissolutionRoom = function(msg) {
        msg.result && this.finish();
      };
      SssRecord.prototype.onGameFinished = function(msg) {
        this.finish();
      };
      __decorate([ property(cc.Node) ], SssRecord.prototype, "closeBtn", void 0);
      __decorate([ property({
        tooltip: "内容",
        type: cc.Node
      }) ], SssRecord.prototype, "content", void 0);
      __decorate([ property(cc.Prefab) ], SssRecord.prototype, "item", void 0);
      SssRecord = __decorate([ ccclass ], SssRecord);
      return SssRecord;
    }(BaseCtrl_1.default);
    exports.default = SssRecord;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../SssMgr/SssDef": "SssDef"
  } ],
  SssResMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2fdc9DC6tdL96maikOe4TbE", "SssResMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SssResMgr = function() {
      function SssResMgr() {}
      return SssResMgr;
    }();
    exports.default = SssResMgr;
    cc._RF.pop();
  }, {} ],
  SssRoomCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "258fchZeN1CS7qQ7qI8lK02", "SssRoomCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var SettingMgr_1 = require("../../../Plat/GameMgrs/SettingMgr");
    var SssDef_1 = require("../SssMgr/SssDef");
    var SssLogic_1 = require("../SssMgr/SssLogic");
    var SssResMgr_1 = require("../SssMgr/SssResMgr");
    var SssAudio_1 = require("../SssMgr/SssAudio");
    var SssCards_1 = require("../SssMgr/SssCards");
    var FrameMgr_1 = require("../../../Plat/GameMgrs/FrameMgr");
    var LocalStorage_1 = require("../../../Plat/Libs/LocalStorage");
    var LoaderMgr_1 = require("../../../AppStart/AppMgrs/LoaderMgr");
    var AppInfoMgr_1 = require("../../../AppStart/AppMgrs/AppInfoMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.mySeatId = null;
        _this.roomInfo = null;
        _this.roomValue = null;
        _this.myPrepared = null;
        _this.roundIndex = 0;
        _this.posCfg = null;
        _this.myBwatchState = false;
        _this.bTopolect = null;
        _this.tableState = null;
        _this.sssAudio = RoomMgr_1.default.getInstance().getAudio();
        _this.paytypeList = [ "房主支付", "AA支付", "赢家支付" ];
        _this.updateRoomInfo();
        _this.updateTableBg();
        _this.bTopolect = SettingMgr_1.default.getInstance().getMusicInfo().bTopolectSwitch;
        SettingMgr_1.default.getInstance().setProperty(false, "musicInfo", "bTopolectSwitch");
        return _this;
      }
      Model.prototype.updateRoomInfo = function() {
        this.roomInfo = RoomMgr_1.default.getInstance().getRoomInfo();
        this.roomValue = RoomMgr_1.default.getInstance().getFangKaCfg();
        this.posCfg = SssDef_1.SssDef.seatCfg[this.roomInfo.seatcount];
      };
      Model.prototype.updateRoundInfo = function() {
        this.roundIndex = RoomMgr_1.default.getInstance().getRoundIndex();
      };
      Model.prototype.updateMySeatId = function() {
        this.mySeatId = RoomMgr_1.default.getInstance().getMySeatId();
      };
      Model.prototype.updateMyPrepared = function() {
        this.myPrepared = RoomMgr_1.default.getInstance().preparemap[this.mySeatId];
      };
      Model.prototype.onChangeRoomMaster = function(msg) {
        this.roomInfo = RoomMgr_1.default.getInstance().getRoomInfo();
      };
      Model.prototype.updateTableBg = function() {
        this.tableState = LocalStorage_1.default.getInstance().getSssRoomBGCfg() || 1;
      };
      Model.prototype.clear = function() {};
      Model.prototype.recover = function() {};
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          bg: ctrl.bg,
          btn_invite: ctrl.btn_invite,
          btn_cleanCard: ctrl.btn_cleanCard,
          btn_prepare: ctrl.btn_prepare,
          btn_gameStart: ctrl.btn_gameStart,
          rule: ctrl.rule,
          chat: ctrl.chat,
          setting: ctrl.setting,
          record: ctrl.record,
          lbl_roundIndex: ctrl.lbl_roundIndex,
          lbl_roomId: ctrl.lbl_roomId,
          lbl_roundCount: ctrl.lbl_roundCount,
          lbl_extendRule: ctrl.lbl_extendRule,
          lbl_gameRule: ctrl.lbl_gameRule,
          seatContain: ctrl.seatContain,
          cardContain: ctrl.cardContain,
          bubblePanel: ctrl.bubblePanel,
          pre_seat: ctrl.pre_seat,
          pre_card: ctrl.pre_card,
          pre_bubble: ctrl.pre_bubble,
          xipaiAnim: ctrl.xipaiAnim,
          clock: ctrl.clock,
          watchImg: ctrl.watchImg,
          lbl_font: ctrl.lbl_font
        };
        _this.node = ctrl.node;
        _this.initUi();
        _this.specialTO = null;
        _this.animFinished = null;
        return _this;
      }
      View.prototype.initUi = function() {
        this.updateLblContent();
        this.updateTableBg();
      };
      View.prototype.updateLblContent = function() {
        this.ui.lbl_roomId.string = "房间号：" + this.model.roomInfo.password;
        this.ui.lbl_roundIndex.string = "第1局";
        this.ui.lbl_roundCount.string = "大菠萝-" + this.model.roomInfo.roundcount + "局";
        this.ui.lbl_extendRule.node.active = this.model.roomValue.v_extendRule > 0;
        if (3 == this.model.roomValue.v_extendRule) {
          var data = this.model.roomValue.v_allotFlowerData;
          this.ui.lbl_extendRule.string = "配花：方块" + data[0] + "/草花" + data[1] + "/红桃" + data[2] + "/黑桃" + data[3];
        } else 4 == this.model.roomValue.v_extendRule && (this.ui.lbl_extendRule.string = "加一色");
        this.ui.lbl_gameRule[0].node.active = !!this.model.roomValue.v_crazyField;
        this.ui.lbl_gameRule[1].node.active = !!this.model.roomValue.v_jokerCard;
        this.ui.lbl_gameRule[2].node.active = !!this.model.roomValue.v_buyHorse;
        var horseColor = parseInt(this.model.roomValue.v_buyHorseData / 16);
        var horseNumer = this.model.roomValue.v_buyHorseData % 16;
        this.ui.lbl_gameRule[2].string = "买码-" + SssDef_1.SssDef.cardColor[horseColor] + SssDef_1.SssDef.cardNumber[horseNumer];
      };
      View.prototype.updateRoundInfo = function() {
        this.ui.lbl_roundIndex.string = "第" + (this.model.roundIndex + 1) + "局";
      };
      View.prototype.updateClock = function() {
        var nextReadyTime = SssLogic_1.default.getInstance().getNextReadyTime();
        if (0 != nextReadyTime) {
          var curTime = Date.now().toString().substring(4);
          console.log("当前时间", curTime);
          var loopTime = parseInt((nextReadyTime - curTime) / 1e3) + 10;
          console.log("倒计时从哪里开始", loopTime);
          loopTime < 0 && (loopTime = 10);
          this.startCountDown(loopTime);
        }
      };
      View.prototype.updateInviteBtn = function() {
        if (SssLogic_1.default.getInstance().getBiPaiState()) return;
        var isFirstRound = RoomMgr_1.default.getInstance().isFirstRound();
        var isRoomFull = RoomMgr_1.default.getInstance().isRoomFull();
        var isGameStarted = RoomMgr_1.default.getInstance().isGameStarted();
        var myReadyState = this.model.myPrepared;
        var isShowStartBtn = RoomMgr_1.default.getInstance().isShowStartBtn();
        this.ui.btn_invite.active = !isRoomFull && !isGameStarted;
        this.ui.btn_cleanCard.active = !isFirstRound && !isGameStarted && !myReadyState;
        this.ui.btn_prepare.active = !isGameStarted && !myReadyState;
        this.ui.btn_gameStart.active = isShowStartBtn;
      };
      View.prototype.playAnim = function(animName, delayTime) {
        var _this = this;
        var anim = this.node.getChildByName("animNode").getComponent(cc.Animation);
        this.animFinished && anim.off("finished", this.animFinished, this);
        this.playAnimTO && clearTimeout(this.playAnimTO);
        this.animFinished = function() {
          _this.playAnimTO = setTimeout(function() {
            _this.node.getChildByName("animNode").getComponent(cc.Sprite).spriteFrame = null;
            "Sss_bipai" == animName && SssLogic_1.default.getInstance().send_bipai(0);
          }, delayTime);
          anim.off("finished", _this.animFinished, _this);
        };
        anim.on("finished", this.animFinished, this);
        anim.play(animName);
      };
      View.prototype.playStartAnim = function() {
        this.playAnim("Sss_start", 0);
      };
      View.prototype.playXipaiAnim = function() {
        var _this = this;
        var animNode = cc.instantiate(this.ui.xipaiAnim);
        this.node.addChild(animNode);
        var anim = animNode.getComponent(cc.Animation);
        var finish = function() {
          ctrl.SssState.shuffling = false;
          animNode.destroy();
          anim.off("finished", finish, _this);
        };
        anim.on("finished", finish, this);
        anim.play();
      };
      View.prototype.playBipaiAnim = function() {
        this.playAnim("Sss_bipai", 0);
        this.model.sssAudio.getInstance().playStartCompare();
      };
      View.prototype.playSpecialCardAnim = function(type, time) {
        this.playAnim("specialCard_" + type, time);
      };
      View.prototype.playQuanleidaAnim = function() {
        this.playAnim("Sss_quanleida", 0);
      };
      View.prototype.startCountDown = function(time) {
        this.ui.clock.active = true;
        this.ui.clock.getChildByName("label").getComponent(cc.Label).string = time;
        ctrl.schedule(ctrl.countDown, 1, time);
      };
      View.prototype.unCountDown = function() {
        this.ui.clock.active = false;
        this.ui.clock.getChildByName("label").getComponent(cc.Label).string = "80";
        ctrl.unschedule(ctrl.countDown);
      };
      View.prototype.updateTableBg = function() {
        var _this = this;
        var url = "Games/Sss/common/table_" + this.model.tableState;
        LoaderMgr_1.default.getInstance().loadRes(url, function(assert) {
          _this.ui.bg[0].spriteFrame = new cc.SpriteFrame(assert);
          _this.ui.bg[1].spriteFrame = new cc.SpriteFrame(assert);
        });
      };
      View.prototype.updateAllLabel = function() {
        var gameState = RoomMgr_1.default.getInstance().isFirstRound() && !RoomMgr_1.default.getInstance().isGameStarted() ? 0 : 2;
        var fontIndex = gameState + (this.model.tableState - 1);
        this.ui.lbl_roundCount.font = this.ui.lbl_font[fontIndex];
        this.ui.lbl_roundIndex.font = this.ui.lbl_font[fontIndex];
        this.ui.lbl_roomId.font = this.ui.lbl_font[fontIndex];
        this.ui.lbl_extendRule.font = this.ui.lbl_font[fontIndex];
        for (var i = 0; i < this.ui.lbl_gameRule.length; ++i) this.ui.lbl_gameRule[i].font = this.ui.lbl_font[fontIndex];
      };
      View.prototype.clearAllAnimation = function() {
        this.node.getChildByName("animNode").getComponent(cc.Animation).off("finished", this.animFinished, this);
      };
      View.prototype.clearAllTimeout = function() {
        null !== this.specialTO && clearTimeout(this.specialTO);
        this.clear();
      };
      View.prototype.refreshWatchImg = function() {
        this.ui.watchImg.active = this.model.myBwatchState;
      };
      View.prototype.onChangeRoomMaster = function(msg) {};
      View.prototype.clear = function() {
        this.ui.seatContain.destroyAllChildren();
        this.ui.cardContain.destroyAllChildren();
        this.ui.bubblePanel.destroyAllChildren();
        this.node.getChildByName("animNode").getComponent(cc.Animation).stop();
        this.node.getChildByName("animNode").getComponent(cc.Sprite).spriteFrame = null;
      };
      View.prototype.recover = function() {};
      return View;
    }(BaseView_1.default);
    var SssRoomCtrl = function(_super) {
      __extends(SssRoomCtrl, _super);
      function SssRoomCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.SssState = {
          dissRoom: false,
          shuffling: false
        };
        _this.bg = [];
        _this.btn_invite = null;
        _this.btn_cleanCard = null;
        _this.btn_prepare = null;
        _this.lbl_roundIndex = null;
        _this.lbl_roomId = null;
        _this.lbl_roundCount = null;
        _this.lbl_extendRule = null;
        _this.lbl_gameRule = [];
        _this.seatContain = null;
        _this.cardContain = null;
        _this.pre_seat = [];
        _this.pre_card = null;
        _this.xipaiAnim = null;
        _this.setting = null;
        _this.rule = null;
        _this.record = null;
        _this.chat = null;
        _this.Node_battery = null;
        _this.Node_network = null;
        _this.Label_curTime = null;
        _this.clock = null;
        _this.btn_gameStart = null;
        _this.pre_bubble = [];
        _this.bubblePanel = null;
        _this.lbl_font = [];
        _this.watchImg = null;
        return _this;
      }
      SssRoomCtrl.prototype.onLoad = function() {
        ctrl = this;
        RoomMgr_1.default.getInstance().setGameLibs(SssDef_1.SssDef, SssResMgr_1.default, SssLogic_1.default, SssAudio_1.default, SssCards_1.default);
        this.initMvc(Model, View);
        SssLogic_1.default.getInstance();
        RoomMgr_1.default.getInstance().enterRoom();
        this.schedule(this.updateCurDate.bind(this), 1);
        if (cc.sys.isNative) {
          G_PLATFORM.getCurNetWorkData();
          G_PLATFORM.getBatteryPercent();
        }
        this.specialTO = null;
        this.gameHide = false;
      };
      SssRoomCtrl.prototype.start = function() {
        this.isIPhoneX() && this.resetDesignResolution(this.node.getComponent(cc.Canvas));
      };
      SssRoomCtrl.prototype.onDestroy = function() {
        this.unschedule(this.updateCurDate);
        SettingMgr_1.default.getInstance().setProperty(this.model.bTopolect, "musicInfo", "bTopolectSwitch");
        RoomMgr_1.default.getInstance().destroy();
        _super.prototype.onDestroy.call(this);
      };
      SssRoomCtrl.prototype.updateCurDate = function() {
        var curDate = new Date();
        var hours = curDate.getHours();
        var minutes = curDate.getMinutes();
        this.Label_curTime.string = (hours < 10 ? "0" + hours : hours) + ":" + (minutes < 10 ? "0" + minutes : minutes);
      };
      SssRoomCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onEnterRoom: this.onEnterRoom,
          "connector.entryHandler.enterRoom": this.connector_entryHandler_enterRoom,
          onPrepare: this.onPrepare,
          onStartGame: this.onStartGame,
          onProcess: this.onProcess,
          onLeaveRoom: this.onLeaveRoom,
          "room.roomHandler.xiPai": this.room_roomHandler_xiPai,
          "http.reqSettle": this.http_reqSettle,
          "room.roomHandler.nextRound": this.room_roomHandler_nextRound,
          onDissolutionRoom: this.onDissolutionRoom,
          onReEnterRoom: this.onReEnterRoom,
          onSyncData: this.onSyncData,
          onMidEnter: this.onMidEnter,
          onChangeRoomMaster: this.onChangeRoomMaster
        };
      };
      SssRoomCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          batteryChange: this.onBatteryChange,
          networkChange: this.onNetWorkChange,
          sss_specialCard: this.sss_specialCard,
          sss_quanleida: this.sss_quanleida,
          sss_roundEnd: this.sss_roundEnd,
          sss_changeTableBg: this.sss_changeTableBg,
          EnterForeground: this.EnterForeground
        };
      };
      SssRoomCtrl.prototype.clearAllTimeout = function() {
        null !== this.specialTO && clearTimeout(this.specialTO);
      };
      SssRoomCtrl.prototype.EnterForeground = function() {
        this.clearAllTimeout();
        this.view.clearAllTimeout();
        this.view.clearAllAnimation();
        this.view.unCountDown();
        this.gameHide = true;
      };
      SssRoomCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.btn_prepare, this.btn_prepare_cb, "点击准备");
        this.connect(G_UiType.button, this.ui.btn_invite, this.btn_invite_cb, "点击邀请");
        this.connect(G_UiType.button, this.ui.btn_cleanCard, this.btn_cleanCard_cb, "点击洗牌");
        this.connect(G_UiType.button, this.ui.setting, this.setting_cb, "点击设置");
        this.connect(G_UiType.button, this.ui.rule, this.rule_cb, "点击规则");
        this.connect(G_UiType.button, this.ui.record, this.record_cb, "点击战绩");
        this.connect(G_UiType.button, this.ui.chat, this.chat_cb, "点击快捷聊天");
        this.connect(G_UiType.button, this.ui.btn_gameStart, this.gameStart_cb, "点击开始");
      };
      SssRoomCtrl.prototype.onPrepare = function(msg) {
        this.model.updateMyPrepared();
        this.view.updateInviteBtn();
      };
      SssRoomCtrl.prototype.onReEnterRoom = function() {
        this.view.updateInviteBtn();
      };
      SssRoomCtrl.prototype.onStartGame = function() {
        this.gameHide = false;
        this.SssState.shuffling = false;
        this.model.myBwatchState = false;
        this.view.refreshWatchImg();
        this.view.unCountDown();
        this.view.updateInviteBtn();
        this.view.updateAllLabel();
        this.model.updateRoundInfo();
        this.view.updateRoundInfo();
        this.view.playStartAnim();
        RoomMgr_1.default.getInstance().reqCheating();
      };
      SssRoomCtrl.prototype.onProcess = function(msg) {
        msg.process != SssDef_1.SssDef.process_peipai && msg.process != SssDef_1.SssDef.process_dengdaijiesuan || (this.gameHide = false);
        if (msg.process == SssDef_1.SssDef.process_peipai) {
          if (this.SssState.dissRoom || this.model.myBwatchState) return;
          this.start_sub_module(G_MODULE.SssSetCard);
          this.view.startCountDown(80);
        } else msg.process == SssDef_1.SssDef.process_cheatcheck && this.start_sub_module(G_MODULE.RoomPreventionCheating);
      };
      SssRoomCtrl.prototype.http_reqSettle = function() {
        this.view.unCountDown();
        if (RoomMgr_1.default.getInstance().isGameStarted()) return;
        if (this.gameHide) {
          this.view.updateClock();
          this.ui.btn_cleanCard.active = true;
          this.ui.btn_prepare.active = true;
          return;
        }
        SssLogic_1.default.getInstance().setBiPaiState(true);
        this.view.playBipaiAnim();
      };
      SssRoomCtrl.prototype.onLeaveRoom = function(msg) {
        this.view.updateInviteBtn();
      };
      SssRoomCtrl.prototype.onEnterRoom = function(msg) {
        this.view.updateInviteBtn();
        if (this.ui.cardContain.getChildByName("handCard_" + RoomMgr_1.default.getInstance().getViewSeatId(msg.seatid))) return;
        this.createSeatAndCard({
          viewID: RoomMgr_1.default.getInstance().getViewSeatId(msg.seatid),
          uid: msg.user
        });
      };
      SssRoomCtrl.prototype.onMidEnter = function(msg) {
        console.error("啊啊啊啊啊啊 onMidEnter", msg);
        if (!RoomMgr_1.default.getInstance().isGameStarted()) return;
        this.view.updateInviteBtn();
      };
      SssRoomCtrl.prototype.onChangeRoomMaster = function(msg) {
        this.model.onChangeRoomMaster(msg);
        this.view.onChangeRoomMaster(msg);
        this.view.updateInviteBtn();
      };
      SssRoomCtrl.prototype.createSeatAndCard = function(obj) {
        var cfg, seat, card, bubble;
        cfg = this.model.posCfg[obj.viewID];
        seat = cc.instantiate(this.ui.pre_seat[cfg.seatType]);
        card = cc.instantiate(this.ui.pre_card);
        bubble = cc.instantiate(this.ui.pre_bubble[cfg.seatType]);
        seat.setPosition(cfg.seatPos[0], cfg.seatPos[1]);
        card.setPosition(cfg.cardPos[0], cfg.cardPos[1]);
        card.setScale(cfg.cardScale);
        card.name = "handCard_" + obj.viewID;
        obj.type = cfg.seatType;
        bubble.setPosition(cfg.seatPos[0], cfg.seatPos[1] - 15);
        seat.getComponent("SssSeatCtrl").setVidAndUid(obj);
        card.getComponent("SssHandCardCtrl").setVidAndUid(obj);
        bubble.getComponent("Sss_bubbleCtrl").initProperty(obj);
        RoomMgr_1.default.getInstance().getMySeatId() == RoomMgr_1.default.getInstance().getLogicSeatId(obj.viewID) && card.getComponent("SssHandCardCtrl").setWatchState(this.model.myBwatchState);
        this.ui.seatContain.addChild(seat);
        this.ui.cardContain.addChild(card);
        this.ui.bubblePanel.addChild(bubble);
      };
      SssRoomCtrl.prototype.connector_entryHandler_enterRoom = function(msg) {
        this.model.clear();
        this.view.clear();
        this.model.updateMySeatId();
        this.model.updateMyPrepared();
        this.model.updateRoundInfo();
        this.model.myBwatchState = msg.bwatch;
        this.view.refreshWatchImg();
        this.view.updateInviteBtn();
        this.view.updateRoundInfo();
        this.view.updateAllLabel();
        this.view.updateClock();
        for (var key in msg.seats) {
          var viewID = RoomMgr_1.default.getInstance().getViewSeatId(key);
          this.createSeatAndCard({
            viewID: viewID,
            uid: msg.seats[key]
          });
        }
      };
      SssRoomCtrl.prototype.room_roomHandler_xiPai = function() {
        this.model.sssAudio.getInstance().playXiPai();
        this.view.playXipaiAnim();
      };
      SssRoomCtrl.prototype.room_roomHandler_nextRound = function() {
        this.model.updateMyPrepared();
        this.view.updateInviteBtn();
      };
      SssRoomCtrl.prototype.onDissolutionRoom = function(msg) {
        this.SssState.dissRoom = msg.result;
        msg.result && this.view.unCountDown();
      };
      SssRoomCtrl.prototype.onSyncData = function(msg) {
        msg.process != SssDef_1.SssDef.process_peipai && msg.process != SssDef_1.SssDef.process_dengdaijiesuan || (this.gameHide = false);
        if (msg.process == SssDef_1.SssDef.process_peipai && msg.state == SssDef_1.SssDef.state_peipai && !cc.director.getScene().getChildByName("Prefab_SssSetCards")) {
          this.start_sub_module(G_MODULE.SssSetCard);
          this.view.startCountDown(80);
        }
      };
      SssRoomCtrl.prototype.sss_specialCard = function(msg) {
        var _this = this;
        var showSpectalLoop = function(i, time) {
          if (i >= msg.length) return;
          _this.model.sssAudio.getInstance().playSpecialBGM();
          _this.model.sssAudio.getInstance().playCardTypeAudio(msg[i].cardType, 1);
          _this.view.playSpecialCardAnim(msg[i].cardType, 2e3);
          _this.specialTO = setTimeout(function() {
            showSpectalLoop(i + 1, time);
          }, time);
        };
        showSpectalLoop(0, 3e3);
      };
      SssRoomCtrl.prototype.sss_quanleida = function() {
        this.model.sssAudio.getInstance().playQuanLeiDa();
        this.view.playQuanleidaAnim();
      };
      SssRoomCtrl.prototype.sss_changeTableBg = function() {
        this.model.updateTableBg();
        this.view.updateTableBg();
        this.view.updateAllLabel();
      };
      SssRoomCtrl.prototype.onBatteryChange = function(msg) {
        var _this = this;
        cc.log("电量变化？？", msg);
        var proportion = parseInt(msg / 10);
        var imageName = "";
        imageName = 6 <= proportion ? "dl_1" : 3 <= proportion ? "dl_2" : "dl_3";
        cc.loader.loadRes("Icons/" + imageName, cc.SpriteFrame, function(err, sprite) {
          if (err) return cc.error("no find Icons/" + imageName);
          var childrens = _this.Node_battery.children;
          for (var i = 0; i < childrens.length; i++) {
            childrens[i].active = i < proportion;
            i < proportion && (childrens[i].getComponent(cc.Sprite).spriteFrame = sprite);
          }
        });
      };
      SssRoomCtrl.prototype.onNetWorkChange = function(msg) {
        var _this = this;
        var imageName = msg.type + "_" + msg.level;
        cc.loader.loadRes("Icons/" + imageName, cc.SpriteFrame, function(err, sprite) {
          if (err) return cc.error("no find Icons/" + imageName);
          _this.Node_network.getComponent(cc.Sprite).spriteFrame = sprite;
        });
      };
      SssRoomCtrl.prototype.sss_roundEnd = function() {
        this.model.updateMyPrepared();
        this.view.updateInviteBtn();
        this.view.updateClock();
      };
      SssRoomCtrl.prototype.btn_prepare_cb = function() {
        RoomMgr_1.default.getInstance().isFirstRound() || this.view.unCountDown();
        RoomMgr_1.default.getInstance().prepare();
      };
      SssRoomCtrl.prototype.btn_invite_cb = function() {
        if (cc.sys.isNative) {
          var roomvalue = RoomMgr_1.default.getInstance().getFangKaCfg();
          var appname = AppInfoMgr_1.default.getInstance().getAppName();
          G_PLATFORM.wxShareRoom(G_PLATFORM.WX_SHARE_TYPE.WXSceneSession, appname + "好友房间邀请", RoomMgr_1.default.getInstance().getGameName() + " 房间号:" + this.model.roomInfo.password + " 局数：" + roomvalue.v_roundcount + "局 人数：" + roomvalue.v_seatcount + "人 " + this.model.paytypeList[roomvalue.v_paytype], this.model.roomInfo.password);
        }
      };
      SssRoomCtrl.prototype.btn_cleanCard_cb = function() {
        var _this = this;
        if (this.SssState.shuffling) return;
        FrameMgr_1.default.getInstance().showDialog("是否花费1钻石进行洗牌？", SssLogic_1.default.getInstance().send_xipai.bind(SssLogic_1.default.getInstance()), "确认洗牌", function() {
          _this.SssState.shuffling = false;
        });
        this.SssState.shuffling = true;
      };
      SssRoomCtrl.prototype.setting_cb = function() {
        this.start_sub_module(G_MODULE.RoomSetting);
      };
      SssRoomCtrl.prototype.rule_cb = function() {
        this.start_sub_module(G_MODULE.GameRule);
      };
      SssRoomCtrl.prototype.record_cb = function() {
        this.start_sub_module(G_MODULE.SssRecord);
      };
      SssRoomCtrl.prototype.chat_cb = function() {
        this.start_sub_module(G_MODULE.RoomChat);
      };
      SssRoomCtrl.prototype.gameStart_cb = function() {
        RoomMgr_1.default.getInstance().isRoomOwner(RoomMgr_1.default.getInstance().getMySeatId()) && RoomMgr_1.default.getInstance().manualStart();
      };
      SssRoomCtrl.prototype.countDown = function() {
        var time = parseInt(this.ui.clock.getChildByName("label").getComponent(cc.Label).string) - 1;
        this.ui.clock.getChildByName("label").getComponent(cc.Label).string = time;
        time < 10 && this.model.sssAudio.getInstance().playClock();
        if (time <= 0) {
          this.ui.clock.getChildByName("label").getComponent(cc.Label).string = "80";
          this.ui.clock.active = false;
          this.unschedule(this.countDown);
        }
      };
      __decorate([ property({
        tooltip: "背景",
        type: [ cc.Sprite ]
      }) ], SssRoomCtrl.prototype, "bg", void 0);
      __decorate([ property({
        tooltip: "邀请按钮",
        type: cc.Node
      }) ], SssRoomCtrl.prototype, "btn_invite", void 0);
      __decorate([ property({
        tooltip: "洗牌按钮",
        type: cc.Node
      }) ], SssRoomCtrl.prototype, "btn_cleanCard", void 0);
      __decorate([ property({
        tooltip: "准备按钮",
        type: cc.Node
      }) ], SssRoomCtrl.prototype, "btn_prepare", void 0);
      __decorate([ property({
        tooltip: "局数Lbl",
        type: cc.Label
      }) ], SssRoomCtrl.prototype, "lbl_roundIndex", void 0);
      __decorate([ property({
        tooltip: "房间号Lbl",
        type: cc.Label
      }) ], SssRoomCtrl.prototype, "lbl_roomId", void 0);
      __decorate([ property({
        tooltip: "总局数",
        type: cc.Label
      }) ], SssRoomCtrl.prototype, "lbl_roundCount", void 0);
      __decorate([ property({
        tooltip: "扩展玩法",
        type: cc.Label
      }) ], SssRoomCtrl.prototype, "lbl_extendRule", void 0);
      __decorate([ property({
        tooltip: "玩法",
        type: [ cc.Label ]
      }) ], SssRoomCtrl.prototype, "lbl_gameRule", void 0);
      __decorate([ property({
        tooltip: "座位父节点",
        type: cc.Node
      }) ], SssRoomCtrl.prototype, "seatContain", void 0);
      __decorate([ property({
        tooltip: "牌父节点",
        type: cc.Node
      }) ], SssRoomCtrl.prototype, "cardContain", void 0);
      __decorate([ property({
        tooltip: "座位预制",
        type: [ cc.Prefab ]
      }) ], SssRoomCtrl.prototype, "pre_seat", void 0);
      __decorate([ property({
        tooltip: "牌预制",
        type: cc.Prefab
      }) ], SssRoomCtrl.prototype, "pre_card", void 0);
      __decorate([ property({
        tooltip: "洗牌动画预制",
        type: cc.Prefab
      }) ], SssRoomCtrl.prototype, "xipaiAnim", void 0);
      __decorate([ property({
        tooltip: "设置按钮",
        type: cc.Node
      }) ], SssRoomCtrl.prototype, "setting", void 0);
      __decorate([ property({
        tooltip: "规则按钮",
        type: cc.Node
      }) ], SssRoomCtrl.prototype, "rule", void 0);
      __decorate([ property({
        tooltip: "战绩按钮",
        type: cc.Node
      }) ], SssRoomCtrl.prototype, "record", void 0);
      __decorate([ property({
        tooltip: "快捷聊天按钮",
        type: cc.Node
      }) ], SssRoomCtrl.prototype, "chat", void 0);
      __decorate([ property({
        tooltip: "电量",
        type: cc.Node
      }) ], SssRoomCtrl.prototype, "Node_battery", void 0);
      __decorate([ property({
        tooltip: "网络",
        type: cc.Node
      }) ], SssRoomCtrl.prototype, "Node_network", void 0);
      __decorate([ property({
        tooltip: "时间",
        type: cc.Label
      }) ], SssRoomCtrl.prototype, "Label_curTime", void 0);
      __decorate([ property({
        tooltip: "倒计时时钟",
        type: cc.Node
      }) ], SssRoomCtrl.prototype, "clock", void 0);
      __decorate([ property({
        tooltip: "手动开始按钮",
        type: cc.Node
      }) ], SssRoomCtrl.prototype, "btn_gameStart", void 0);
      __decorate([ property({
        tooltip: "气泡预制",
        type: [ cc.Prefab ]
      }) ], SssRoomCtrl.prototype, "pre_bubble", void 0);
      __decorate([ property({
        tooltip: "气泡父节点",
        type: cc.Node
      }) ], SssRoomCtrl.prototype, "bubblePanel", void 0);
      __decorate([ property({
        tooltip: "字体",
        type: [ cc.Font ]
      }) ], SssRoomCtrl.prototype, "lbl_font", void 0);
      __decorate([ property({
        tooltip: "旁边标识",
        type: cc.Node
      }) ], SssRoomCtrl.prototype, "watchImg", void 0);
      SssRoomCtrl = __decorate([ ccclass ], SssRoomCtrl);
      return SssRoomCtrl;
    }(BaseCtrl_1.default);
    exports.default = SssRoomCtrl;
    cc._RF.pop();
  }, {
    "../../../AppStart/AppMgrs/AppInfoMgr": "AppInfoMgr",
    "../../../AppStart/AppMgrs/LoaderMgr": "LoaderMgr",
    "../../../Plat/GameMgrs/FrameMgr": "FrameMgr",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/GameMgrs/SettingMgr": "SettingMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../../../Plat/Libs/LocalStorage": "LocalStorage",
    "../SssMgr/SssAudio": "SssAudio",
    "../SssMgr/SssCards": "SssCards",
    "../SssMgr/SssDef": "SssDef",
    "../SssMgr/SssLogic": "SssLogic",
    "../SssMgr/SssResMgr": "SssResMgr"
  } ],
  SssRoundsSettleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c5deemcME5FPZxl2otRvWQp", "SssRoundsSettleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BunchInfoMgr_1 = require("../../Plat/GameMgrs/BunchInfoMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.roundData = null;
        _this.roundData = BunchInfoMgr_1.default.getInstance().getBunchInfo().meiju;
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          content: ctrl.content,
          item: ctrl.item
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        for (var i = 0; i < this.model.roundData.length; ++i) {
          var newNode = cc.instantiate(this.ui.item);
          newNode.getComponent("SssSettleRoundItemCtrl").init(this.model.roundData[i][1], i);
          this.ui.content.addChild(newNode);
        }
      };
      return View;
    }(BaseView_1.default);
    var Prefab_SssSettleRoundCtrl = function(_super) {
      __extends(Prefab_SssSettleRoundCtrl, _super);
      function Prefab_SssSettleRoundCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.content = null;
        _this.item = null;
        return _this;
      }
      Prefab_SssSettleRoundCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_SssSettleRoundCtrl.prototype.defineNetEvents = function() {};
      Prefab_SssSettleRoundCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_SssSettleRoundCtrl.prototype.connectUi = function() {};
      Prefab_SssSettleRoundCtrl.prototype.start = function() {};
      __decorate([ property({
        tooltip: "内容节点",
        type: cc.Node
      }) ], Prefab_SssSettleRoundCtrl.prototype, "content", void 0);
      __decorate([ property({
        tooltip: "item预制",
        type: cc.Prefab
      }) ], Prefab_SssSettleRoundCtrl.prototype, "item", void 0);
      Prefab_SssSettleRoundCtrl = __decorate([ ccclass ], Prefab_SssSettleRoundCtrl);
      return Prefab_SssSettleRoundCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_SssSettleRoundCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView"
  } ],
  SssSeatCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5a7978mX4REKocqSuEb4h+V", "SssSeatCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var UserMgr_1 = require("../../../Plat/GameMgrs/UserMgr");
    var UiMgr_1 = require("../../../Plat/GameMgrs/UiMgr");
    var SssLogic_1 = require("../SssMgr/SssLogic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.myPrepared = null;
        _this.roomInfo = null;
        _this.seatId = null;
        _this.logicSeatId = null;
        _this.uid = null;
        _this.userInfo = null;
        _this.score = 0;
        _this.isWatch = false;
        _this.ipWarnning = false;
        _this.distWarnning = false;
        _this.mySeatId = null;
        _this.voiceState = null;
        _this.sssAudio = RoomMgr_1.default.getInstance().getAudio();
        _this.seatType = null;
        _this.uid = ctrl.uid;
        _this.seatId = ctrl.seatId;
        _this.logicSeatId = RoomMgr_1.default.getInstance().getLogicSeatId(ctrl.seatId);
        _this.roomInfo = RoomMgr_1.default.getInstance().getRoomInfo();
        _this.seatType = ctrl.seatType;
        _this.updateVoiceState();
        _this.updateScore();
        _this.updateUserInfo();
        return _this;
      }
      Model.prototype.updateUserInfo = function() {
        this.userInfo = UserMgr_1.default.getInstance().getUserById(this.uid);
      };
      Model.prototype.updateMyPrepared = function() {
        this.myPrepared = RoomMgr_1.default.getInstance().preparemap[this.logicSeatId];
      };
      Model.prototype.updateScore = function() {
        var bunchInfo = SssLogic_1.default.getInstance().getBunchInfo();
        this.score = bunchInfo ? bunchInfo.leiji[this.logicSeatId].zongshuying : 0;
      };
      Model.prototype.updateCheatInfo = function() {
        this.ipWarnning = RoomMgr_1.default.getInstance().getIpWarnningBySeatId(this.logicSeatId);
        this.distWarnning = RoomMgr_1.default.getInstance().getDistWarnningBySeatId(this.logicSeatId);
      };
      Model.prototype.updateVoiceState = function() {
        this.voiceState = RoomMgr_1.default.getInstance().getVoiceState(this.logicSeatId);
      };
      Model.prototype.onChangeRoomMaster = function() {
        this.roomInfo = RoomMgr_1.default.getInstance().getRoomInfo();
      };
      Model.prototype.clear = function() {};
      Model.prototype.recover = function() {};
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          headImg: ctrl.headImg,
          nickNameLbl: ctrl.nickNameLbl,
          scoreLbl: ctrl.scoreLbl,
          lightRing: ctrl.lightRing,
          masterImg: ctrl.masterImg,
          locationImg: ctrl.locationImg,
          plugImg: ctrl.plugImg,
          ipImg: ctrl.ipImg,
          preparFlag: ctrl.preparFlag,
          watchImg: ctrl.watchImg,
          voiceImg: ctrl.voiceImg
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.refreshPreparFlag();
        this.refreshWatchImg();
        this.refreshScoreLbl();
        this.model.seatType ? this.ui.watchImg.x = this.node.x > 0 ? -94 : 94 : this.ui.watchImg.y = this.node.y > 0 ? -52 : 52;
        this.ui.voiceImg.node.active = 0 != this.model.seatId;
        this.updateVoiceState();
      };
      View.prototype.refreshPreparFlag = function() {
        this.ui.preparFlag.active = this.model.myPrepared;
      };
      View.prototype.updateInfo = function() {
        this.ui.scoreLbl.string = this.model.score.toString();
        this.ui.masterImg.active = this.model.uid == this.model.roomInfo.owner;
        0 == this.model.seatId && (this.ui.lightRing.active = true);
        var userinfo = this.model.userInfo;
        this.ui.nickNameLbl.string = userinfo.nickname.length > 2 ? userinfo.nickname.substring(0, 3) : userinfo.nickname;
        UiMgr_1.default.getInstance().setUserHead(this.ui.headImg, userinfo.headid, userinfo.headurl);
      };
      View.prototype.refreshScoreLbl = function() {
        this.ui.scoreLbl.string = this.model.score.toString();
      };
      View.prototype.updateCheat = function() {
        this.model.ipWarnning && (this.ui.ipImg.active = true);
        this.model.distWarnning && (this.ui.locationImg.active = true);
      };
      View.prototype.onChangeRoomMaster = function() {
        this.ui.masterImg.active = this.model.uid == this.model.roomInfo.owner;
      };
      View.prototype.refreshWatchImg = function() {
        if (0 == this.model.seatId) return;
        this.ui.watchImg.active = this.model.isWatch;
      };
      View.prototype.updateVoiceState = function() {
        var _this = this;
        var img_name = {
          1: "img_shuohua",
          2: "img_bofang",
          3: "img_voice_close"
        };
        var url = "Plat/GameRoomCommon/RoomUi/" + img_name[this.model.voiceState];
        cc.loader.loadRes(url, cc.SpriteFrame, function(err, sp) {
          if (err) return cc.error("no find Icons/" + img_name[_this.model.voiceState]);
          _this.ui.voiceImg.spriteFrame = sp;
        });
      };
      View.prototype.clear = function() {};
      View.prototype.recover = function() {};
      return View;
    }(BaseView_1.default);
    var SssSeatCtrl = function(_super) {
      __extends(SssSeatCtrl, _super);
      function SssSeatCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.headImg = null;
        _this.nickNameLbl = null;
        _this.scoreLbl = null;
        _this.lightRing = null;
        _this.masterImg = null;
        _this.preparFlag = null;
        _this.locationImg = null;
        _this.plugImg = null;
        _this.ipImg = null;
        _this.watchImg = null;
        _this.voiceImg = null;
        return _this;
      }
      SssSeatCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        UserMgr_1.default.getInstance().reqUsers([ this.model.uid ]);
      };
      SssSeatCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onPrepare: this.onPrepare,
          onStartGame: this.onStartGame,
          onLeaveRoom: this.onLeaveRoom,
          "http.reqUsers": this.http_reqUsers,
          "room.roomHandler.nextRound": this.room_roomHandler_nextRound,
          onSyncData: this.onSyncData,
          onMidEnter: this.onMidEnter,
          "http.reqCheating": this.http_reqCheating,
          onChangeRoomMaster: this.onChangeRoomMaster,
          onVoiceStateChanged: this.onVoiceStateChanged
        };
      };
      SssSeatCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          sss_roundEnd: this.sss_roundEnd
        };
      };
      SssSeatCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.node, this.showUserDetail, "显示用户详情");
      };
      SssSeatCtrl.prototype.start = function() {};
      SssSeatCtrl.prototype.onPrepare = function(msg) {
        if (msg.seatid == this.model.logicSeatId) {
          this.model.updateMyPrepared();
          this.view.refreshPreparFlag();
        }
      };
      SssSeatCtrl.prototype.onStartGame = function() {
        this.ui.preparFlag.active = false;
        this.model.isWatch = false;
        this.view.refreshWatchImg();
      };
      SssSeatCtrl.prototype.http_reqUsers = function() {
        if (null == this.model.uid) return;
        this.model.updateUserInfo();
        this.view.updateInfo();
        this.model.updateScore();
        this.view.refreshScoreLbl();
        if (!RoomMgr_1.default.getInstance().isGameStarted()) {
          this.model.updateMyPrepared();
          this.view.refreshPreparFlag();
        }
      };
      SssSeatCtrl.prototype.onLeaveRoom = function(msg) {
        if (this.model.logicSeatId == msg.seatid) {
          this.model.clear();
          this.view.clear();
          this.finish();
        }
      };
      SssSeatCtrl.prototype.room_roomHandler_nextRound = function() {
        this.model.updateMyPrepared();
        this.view.refreshPreparFlag();
      };
      SssSeatCtrl.prototype.onSyncData = function() {
        this.model.updateMyPrepared();
        this.view.refreshPreparFlag();
      };
      SssSeatCtrl.prototype.onMidEnter = function(msg) {
        if (this.model.logicSeatId == msg.seatid) {
          this.model.isWatch = true;
          this.view.refreshWatchImg();
          this.view.refreshScoreLbl();
        }
      };
      SssSeatCtrl.prototype.http_reqCheating = function(msg) {
        if (null == this.model.logicSeatId) return;
        if (this.model.logicSeatId == RoomMgr_1.default.getInstance().getMySeatId()) return;
        this.model.updateCheatInfo();
        this.view.updateCheat();
      };
      SssSeatCtrl.prototype.onChangeRoomMaster = function(msg) {
        this.model.onChangeRoomMaster();
        this.view.onChangeRoomMaster();
      };
      SssSeatCtrl.prototype.onVoiceStateChanged = function(msg) {
        if (0 == this.model.seatId || msg.seatid != this.model.logicSeatId) return;
        this.model.updateVoiceState();
        this.view.updateVoiceState();
      };
      SssSeatCtrl.prototype.sss_roundEnd = function() {
        if (null != this.model.logicSeatId) {
          this.model.mySeatId = RoomMgr_1.default.getInstance().getMySeatId();
          this.model.updateScore();
          this.view.refreshScoreLbl();
          this.model.updateMyPrepared();
          !this.model.mySeatId && 0 != this.model.mySeatId || this.model.mySeatId != this.model.logicSeatId || (this.model.score >= this.ui.scoreLbl.string ? this.model.sssAudio.getInstance().playCompareWin() : this.model.sssAudio.getInstance().playCompareLose());
        }
      };
      SssSeatCtrl.prototype.showUserDetail = function() {
        var _this = this;
        null != this.model.uid && this.start_sub_module(G_MODULE.RoomUserInfo, function(uiCtrl) {
          uiCtrl.setUid(_this.model.uid);
        }, "RoomUserInfoCtrl");
      };
      SssSeatCtrl.prototype.setVidAndUid = function(obj) {
        this.uid = obj.uid;
        this.seatId = obj.viewID;
        this.seatType = obj.type;
      };
      __decorate([ property({
        tooltip: "头像",
        type: cc.Node
      }) ], SssSeatCtrl.prototype, "headImg", void 0);
      __decorate([ property({
        tooltip: "昵称Lbl",
        type: cc.Label
      }) ], SssSeatCtrl.prototype, "nickNameLbl", void 0);
      __decorate([ property({
        tooltip: "分数Lbl",
        type: cc.Label
      }) ], SssSeatCtrl.prototype, "scoreLbl", void 0);
      __decorate([ property({
        tooltip: "光环",
        type: cc.Node
      }) ], SssSeatCtrl.prototype, "lightRing", void 0);
      __decorate([ property({
        tooltip: "房主标识",
        type: cc.Node
      }) ], SssSeatCtrl.prototype, "masterImg", void 0);
      __decorate([ property({
        tooltip: "准备标识",
        type: cc.Node
      }) ], SssSeatCtrl.prototype, "preparFlag", void 0);
      __decorate([ property({
        tooltip: "定位图标",
        type: cc.Node
      }) ], SssSeatCtrl.prototype, "locationImg", void 0);
      __decorate([ property({
        tooltip: "外挂图标",
        type: cc.Node
      }) ], SssSeatCtrl.prototype, "plugImg", void 0);
      __decorate([ property({
        tooltip: "IP图标",
        type: cc.Node
      }) ], SssSeatCtrl.prototype, "ipImg", void 0);
      __decorate([ property({
        tooltip: "旁观中标识",
        type: cc.Node
      }) ], SssSeatCtrl.prototype, "watchImg", void 0);
      __decorate([ property({
        tooltip: "声音状态标识",
        type: cc.Sprite
      }) ], SssSeatCtrl.prototype, "voiceImg", void 0);
      SssSeatCtrl = __decorate([ ccclass ], SssSeatCtrl);
      return SssSeatCtrl;
    }(BaseCtrl_1.default);
    exports.default = SssSeatCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/GameMgrs/UiMgr": "UiMgr",
    "../../../Plat/GameMgrs/UserMgr": "UserMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../SssMgr/SssLogic": "SssLogic"
  } ],
  SssSettleRoundItemCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1e4037ynrxCHYju9WTkl6DT", "SssSettleRoundItemCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var SssDef_1 = require("../../Games/Sss/SssMgr/SssDef");
    var BunchInfoMgr_1 = require("../../Plat/GameMgrs/BunchInfoMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.roundData = null;
        _this.round = null;
        _this.roundData = ctrl.roundData;
        _this.round = ctrl.round;
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          titleLbl: ctrl.titleLbl,
          arrowBtn: ctrl.arrowBtn,
          singlePanel: ctrl.singlePanel,
          detailPanel: ctrl.detailPanel,
          singleItem: ctrl.singleItem,
          detailItem: ctrl.detailItem
        };
        _this.node = ctrl.node;
        _this.initUi();
        _this.refreshTitle();
        return _this;
      }
      View.prototype.initUi = function() {
        for (var i = 0; i < BunchInfoMgr_1.default.getInstance().getSeatCount(); ++i) {
          var userData = this.model.roundData[i.toString()];
          if (!userData) continue;
          var users = BunchInfoMgr_1.default.getInstance().getMembelist();
          if (!users[i]) continue;
          var singleItem = cc.instantiate(this.ui.singleItem);
          singleItem.getChildByName("name").getComponent(cc.Label).string = users[i].nickname.length > 5 ? users[i].nickname.substring(0, 5) + "..." : users[i].nickname;
          if (userData.zongfen >= 0) singleItem.getChildByName("score").children[0].getComponent(cc.Label).string = "+" + userData.zongfen; else {
            singleItem.getChildByName("score").children[0].color = cc.color(56, 185, 43);
            singleItem.getChildByName("score").children[0].getComponent(cc.LabelOutline).color = cc.color(56, 185, 43);
            singleItem.getChildByName("score").children[0].getComponent(cc.Label).string = userData.zongfen;
          }
          if (null != userData.xiazhubeizhu) {
            singleItem.getChildByName("score").children[1].active = true;
            singleItem.getChildByName("score").children[1].getComponent(cc.Label).string = "(" + userData.xiazhubeizhu + "倍)";
          }
          if (userData.isteshupaixing > 0) {
            singleItem.getChildByName("paixing").active = true;
            singleItem.getChildByName("paixing").getComponent(cc.Label).string = SssDef_1.SssDef.specialCardNames[userData.isteshupaixing];
          }
          singleItem.getChildByName("fengexian").active = 0 == i;
          this.ui.singlePanel.addChild(singleItem);
          var detailItem = cc.instantiate(this.ui.detailItem);
          detailItem.getComponent("sssSettleDetailItemCtrl").init(userData, i);
          this.ui.detailPanel.addChild(detailItem);
        }
      };
      View.prototype.refreshTitle = function() {
        var round = this.model.round + 1;
        this.ui.titleLbl.string = round <= 10 ? "第" + SssDef_1.SssDef.chineseNumber[round] + "局" : round > 10 && round < 20 ? "第十" + SssDef_1.SssDef.chineseNumber[round % 10] + "局" : "第" + SssDef_1.SssDef.chineseNumber[parseInt(round / 10)] + "十" + SssDef_1.SssDef.chineseNumber[round % 10] + "局";
      };
      return View;
    }(BaseView_1.default);
    var SssSettleRoundItemCtrl = function(_super) {
      __extends(SssSettleRoundItemCtrl, _super);
      function SssSettleRoundItemCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.titleLbl = null;
        _this.arrowBtn = null;
        _this.singlePanel = null;
        _this.singleItem = null;
        _this.detailPanel = null;
        _this.detailItem = null;
        _this.roundData = null;
        _this.round = null;
        return _this;
      }
      SssSettleRoundItemCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      SssSettleRoundItemCtrl.prototype.defineNetEvents = function() {};
      SssSettleRoundItemCtrl.prototype.defineGlobalEvents = function() {};
      SssSettleRoundItemCtrl.prototype.connectUi = function() {
        this.node.on("touchend", this.touchEnd, this);
      };
      SssSettleRoundItemCtrl.prototype.start = function() {};
      SssSettleRoundItemCtrl.prototype.touchEnd = function() {
        if (this.ui.arrowBtn.scaleY < 0) {
          this.ui.singlePanel.active = false;
          this.ui.detailPanel.active = true;
          this.ui.arrowBtn.scaleY = 1;
        } else {
          this.ui.singlePanel.active = true;
          this.ui.detailPanel.active = false;
          this.ui.arrowBtn.scaleY = -1;
        }
      };
      SssSettleRoundItemCtrl.prototype.init = function(value, round) {
        this.roundData = value;
        this.round = round;
      };
      __decorate([ property({
        tooltip: "标题",
        type: cc.Label
      }) ], SssSettleRoundItemCtrl.prototype, "titleLbl", void 0);
      __decorate([ property({
        tooltip: "箭头按钮",
        type: cc.Node
      }) ], SssSettleRoundItemCtrl.prototype, "arrowBtn", void 0);
      __decorate([ property({
        tooltip: "简单信息父节点",
        type: cc.Node
      }) ], SssSettleRoundItemCtrl.prototype, "singlePanel", void 0);
      __decorate([ property({
        tooltip: "简单信息item",
        type: cc.Prefab
      }) ], SssSettleRoundItemCtrl.prototype, "singleItem", void 0);
      __decorate([ property({
        tooltip: "详细信息父节点",
        type: cc.Node
      }) ], SssSettleRoundItemCtrl.prototype, "detailPanel", void 0);
      __decorate([ property({
        tooltip: "详细信息item",
        type: cc.Prefab
      }) ], SssSettleRoundItemCtrl.prototype, "detailItem", void 0);
      SssSettleRoundItemCtrl = __decorate([ ccclass ], SssSettleRoundItemCtrl);
      return SssSettleRoundItemCtrl;
    }(BaseCtrl_1.default);
    exports.default = SssSettleRoundItemCtrl;
    cc._RF.pop();
  }, {
    "../../Games/Sss/SssMgr/SssDef": "SssDef",
    "../../Plat/GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView"
  } ],
  SssStatisticsSettleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "252dbb1q/FHKYgItRMwcNBx", "SssStatisticsSettleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var UiMgr_1 = require("../../Plat/GameMgrs/UiMgr");
    var BunchInfoMgr_1 = require("../../Plat/GameMgrs/BunchInfoMgr");
    var viewLogicSeatConvertMgr_1 = require("../../Plat/GameMgrs/viewLogicSeatConvertMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.bunchInfo = null;
        _this.datas = null;
        _this.mySeatId = null;
        _this.owner = null;
        _this.roomValue = null;
        _this.costList = null;
        _this.users = null;
        _this.bunchInfo = BunchInfoMgr_1.default.getInstance().getBunchInfo();
        _this.datas = _this.bunchInfo.leiji;
        _this.owner = _this.bunchInfo.roomOwner;
        _this.roomValue = _this.bunchInfo.roomValue;
        _this.costList = _this.bunchInfo.costs;
        _this.mySeatId = viewLogicSeatConvertMgr_1.default.getInstance().myseatid;
        _this.users = BunchInfoMgr_1.default.getInstance().getMembelist();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          item: ctrl.item,
          titleAltas: ctrl.titleAltas
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        var _this = this;
        for (var key = 0; key < BunchInfoMgr_1.default.getInstance().getSeatCount(); ++key) {
          var itemData = this.model.datas[key.toString()];
          if (!itemData) continue;
          var user = this.model.users[key];
          if (!user) continue;
          var curNode = key == this.model.mySeatId ? this.node.children[0] : function() {
            var node = cc.instantiate(_this.ui.item);
            _this.node.addChild(node);
            node.getChildByName("payCount").active = false;
            return node;
          }();
          curNode.active = true;
          curNode.getChildByName("fangzhu").active = user.id == this.model.owner || user.bowner;
          curNode.getChildByName("ID").getComponent(cc.Label).string = user.logicid;
          if (itemData.zongshuying >= 0) {
            curNode.getChildByName("totalScore").color = cc.color(185, 56, 43);
            curNode.getChildByName("totalScore").getComponent(cc.Label).string = "+" + itemData.zongshuying;
          } else {
            curNode.getChildByName("totalScore").color = cc.color(56, 185, 43);
            curNode.getChildByName("totalScore").getComponent(cc.Label).string = itemData.zongshuying;
          }
          UiMgr_1.default.getInstance().setUserHead(curNode.getChildByName("headImg"), user.headid || "number" == typeof user.url && user.url, user.headurl || "string" == typeof user.url && user.url);
          curNode.getChildByName("name").getComponent(cc.Label).string = user.nickname.length > 6 ? user.nickname.substring(0, 5) + "..." : user.nickname;
          curNode.getChildByName("logo").active = true;
          curNode.getChildByName("logo").getComponent(cc.Sprite).spriteFrame = this.ui.titleAltas.getSpriteFrame("title_" + itemData.biaoqian);
          if (2 == this.model.roomValue.v_paytype && itemData.zongshuying > 0) {
            curNode.getChildByName("payCount").active = true;
            curNode.getChildByName("payCount").getComponent(cc.Label).string = this.model.costList[user.id];
          }
        }
      };
      return View;
    }(BaseView_1.default);
    var Prefab_SssSettleTotalCtrl = function(_super) {
      __extends(Prefab_SssSettleTotalCtrl, _super);
      function Prefab_SssSettleTotalCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.item = null;
        _this.titleAltas = null;
        return _this;
      }
      Prefab_SssSettleTotalCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_SssSettleTotalCtrl.prototype.defineNetEvents = function() {};
      Prefab_SssSettleTotalCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_SssSettleTotalCtrl.prototype.connectUi = function() {};
      Prefab_SssSettleTotalCtrl.prototype.start = function() {};
      __decorate([ property({
        tooltip: "item预制",
        type: cc.Node
      }) ], Prefab_SssSettleTotalCtrl.prototype, "item", void 0);
      __decorate([ property({
        tooltip: "称号图集",
        type: cc.SpriteAtlas
      }) ], Prefab_SssSettleTotalCtrl.prototype, "titleAltas", void 0);
      Prefab_SssSettleTotalCtrl = __decorate([ ccclass ], Prefab_SssSettleTotalCtrl);
      return Prefab_SssSettleTotalCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_SssSettleTotalCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../Plat/GameMgrs/UiMgr": "UiMgr",
    "../../Plat/GameMgrs/viewLogicSeatConvertMgr": "viewLogicSeatConvertMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView"
  } ],
  SssXipaiCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4a586KV7eZAFJ6PsQAcWl4K", "SssXipaiCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var LocalStorage_1 = require("../../../Plat/Libs/LocalStorage");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.cardBgState = 3;
        _this.updateCardBg();
        return _this;
      }
      Model.prototype.updateCardBg = function() {
        this.cardBgState = LocalStorage_1.default.getInstance().getSssCardBGCfg() || 3;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          cards: ctrl.cards,
          cardAtlas: ctrl.cardAtlas
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.updateCardBg();
      };
      View.prototype.updateCardBg = function() {
        for (var i = 0; i < 6; ++i) {
          var bgName = 3 == this.model.cardBgState ? "bull1_0x00" : "bull1_0x00_" + this.model.cardBgState;
          this.ui.cards[i].spriteFrame = this.ui.cardAtlas.getSpriteFrame(bgName);
        }
      };
      return View;
    }(BaseView_1.default);
    var SssXipaiCtrl = function(_super) {
      __extends(SssXipaiCtrl, _super);
      function SssXipaiCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.cards = [];
        _this.cardAtlas = null;
        return _this;
      }
      SssXipaiCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      SssXipaiCtrl.prototype.defineNetEvents = function() {};
      SssXipaiCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          sss_changeCardBg: this.sss_changeCardBg
        };
      };
      SssXipaiCtrl.prototype.connectUi = function() {};
      SssXipaiCtrl.prototype.start = function() {};
      SssXipaiCtrl.prototype.sss_changeCardBg = function() {
        this.model.updateCardBg();
        this.view.updateCardBg();
      };
      __decorate([ property({
        tooltip: "牌",
        type: [ cc.Sprite ]
      }) ], SssXipaiCtrl.prototype, "cards", void 0);
      __decorate([ property({
        tooltip: "牌图集",
        type: cc.SpriteAtlas
      }) ], SssXipaiCtrl.prototype, "cardAtlas", void 0);
      SssXipaiCtrl = __decorate([ ccclass ], SssXipaiCtrl);
      return SssXipaiCtrl;
    }(BaseCtrl_1.default);
    exports.default = SssXipaiCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../../../Plat/Libs/LocalStorage": "LocalStorage"
  } ],
  Sss_bubbleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f1268aavpBEmq68+4JiU0gu", "Sss_bubbleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var QuickAudioCfg_1 = require("../../../Plat/CfgMgrs/QuickAudioCfg");
    var UserMgr_1 = require("../../../Plat/GameMgrs/UserMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.userInfo = null;
        _this.logicSeatId = null;
        _this.seatType = null;
        _this.uid = null;
        _this.seatType = ctrl.type;
        _this.uid = ctrl.uid;
        _this.logicSeatId = RoomMgr_1.default.getInstance().getLogicSeatId(ctrl.seatId);
        return _this;
      }
      Model.prototype.updateUserInfo = function() {
        this.userInfo = UserMgr_1.default.getInstance().getUserById(this.uid);
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          expressionAltas: ctrl.expressionAltas
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        for (var i = 0; i < this.node.childrenCount; ++i) this.node.children[i].active = false;
      };
      View.prototype.addChatMsg = function(msg) {
        if (msg.seatid != this.model.logicSeatId) return;
        switch (msg.type) {
         case 1:
          var text = void 0;
          text = this.model.seatType ? this.node.position.x > 0 ? this.node.getChildByName("textLeft") : this.node.getChildByName("textRight") : this.node.getChildByName("text");
          text.active = true;
          var list = QuickAudioCfg_1.default.getInstance().getCfg();
          var value = list[msg.id - 1].text;
          text.children[1].getComponent(cc.Label).string = value;
          text.children[0].width = text.children[1].width + 20;
          var sex = this.model.userInfo.sex;
          QuickAudioCfg_1.default.getInstance().play(msg.id, sex);
          this.hideBubble(text);
          break;

         case 2:
          var expression = this.node.getChildByName("expression");
          expression.active = true;
          expression.children[0].getComponent(cc.Sprite).spriteFrame = this.ui.expressionAltas.getSpriteFrame(msg.id);
          this.hideBubble(expression);
        }
      };
      View.prototype.hideBubble = function(bubble) {
        var act1 = cc.delayTime(2);
        var act2 = cc.callFunc(function() {
          bubble.active = false;
        });
        bubble.runAction(cc.sequence(act1, act2));
      };
      return View;
    }(BaseView_1.default);
    var Sss_bubbleCtrl = function(_super) {
      __extends(Sss_bubbleCtrl, _super);
      function Sss_bubbleCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.seatId = null;
        _this.uid = null;
        _this.type = null;
        _this.expressionAltas = null;
        return _this;
      }
      Sss_bubbleCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Sss_bubbleCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onRoomChat: this.onRoomChat,
          "http.reqUsers": this.http_reqUsers
        };
      };
      Sss_bubbleCtrl.prototype.defineGlobalEvents = function() {};
      Sss_bubbleCtrl.prototype.connectUi = function() {};
      Sss_bubbleCtrl.prototype.start = function() {};
      Sss_bubbleCtrl.prototype.onRoomChat = function(msg) {
        this.view.addChatMsg(msg);
      };
      Sss_bubbleCtrl.prototype.http_reqUsers = function() {
        if (null == this.model.uid) return;
        this.model.updateUserInfo();
      };
      Sss_bubbleCtrl.prototype.initProperty = function(obj) {
        this.uid = obj.uid;
        this.seatId = obj.viewID;
        this.type = obj.type;
      };
      __decorate([ property({
        tooltip: "表情图集",
        type: cc.SpriteAtlas
      }) ], Sss_bubbleCtrl.prototype, "expressionAltas", void 0);
      Sss_bubbleCtrl = __decorate([ ccclass ], Sss_bubbleCtrl);
      return Sss_bubbleCtrl;
    }(BaseCtrl_1.default);
    exports.default = Sss_bubbleCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/CfgMgrs/QuickAudioCfg": "QuickAudioCfg",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/GameMgrs/UserMgr": "UserMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView"
  } ],
  SubGameDownLoader: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "140531GYQFIrYTX4i3EiQuE", "SubGameDownLoader");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SUBGAMEDOWNLOAD_STATE;
    (function(SUBGAMEDOWNLOAD_STATE) {
      SUBGAMEDOWNLOAD_STATE[SUBGAMEDOWNLOAD_STATE["none"] = 0] = "none";
      SUBGAMEDOWNLOAD_STATE[SUBGAMEDOWNLOAD_STATE["que"] = 1] = "que";
      SUBGAMEDOWNLOAD_STATE[SUBGAMEDOWNLOAD_STATE["ready"] = 2] = "ready";
      SUBGAMEDOWNLOAD_STATE[SUBGAMEDOWNLOAD_STATE["downloading"] = 3] = "downloading";
      SUBGAMEDOWNLOAD_STATE[SUBGAMEDOWNLOAD_STATE["complete"] = 4] = "complete";
      SUBGAMEDOWNLOAD_STATE[SUBGAMEDOWNLOAD_STATE["downfailed"] = 5] = "downfailed";
    })(SUBGAMEDOWNLOAD_STATE || (SUBGAMEDOWNLOAD_STATE = {}));
    window["SUBGAMEDOWNLOAD_STATE"] = SUBGAMEDOWNLOAD_STATE;
    var SUBGAMEPROCESS_STATE;
    (function(SUBGAMEPROCESS_STATE) {
      SUBGAMEPROCESS_STATE[SUBGAMEPROCESS_STATE["none"] = 0] = "none";
      SUBGAMEPROCESS_STATE[SUBGAMEPROCESS_STATE["sizeCaled"] = 1] = "sizeCaled";
      SUBGAMEPROCESS_STATE[SUBGAMEPROCESS_STATE["loading"] = 2] = "loading";
    })(SUBGAMEPROCESS_STATE || (SUBGAMEPROCESS_STATE = {}));
    window["SUBGAMEPROCESS_STATE"] = SUBGAMEPROCESS_STATE;
    var MAX_TASK_COUNT = 2;
    var SubGameDownLoader = function() {
      function SubGameDownLoader(gamecode, subgamemgr) {
        this.remoteSubMd5dic = null;
        this.localSubMd5Dic = null;
        this._storagePath = null;
        this.submd5dicfFileName = null;
        this.subgamesdir = null;
        this.rootDownLoadUrl = "";
        this.newFileDic = {};
        this.alreadydownloadsize = 0;
        this.totalfilesize = 0;
        this.state = SUBGAMEDOWNLOAD_STATE.none;
        this.completeDic = null;
        this.downloaderDic = {};
        this.gamecode = null;
        this.process_state = SUBGAMEPROCESS_STATE.none;
        this.subgamemgr = null;
        this.subgameStateDic = null;
        this.speed = null;
        this.failedtasks = [];
        this.runningtasks = [];
        this.timedic = {};
        this.timer = null;
        this.startDownLoadTime = 0;
        this.subgamemgr = subgamemgr;
        this.remoteSubMd5dic = this.subgamemgr.remoteSubMd5dic;
        this.completeDic = this.subgamemgr.completeDic;
        this.subgameStateDic = this.subgamemgr.subgameStateDic;
        this.localSubMd5Dic = this.subgamemgr.localSubMd5Dic;
        this.submd5dicfFileName = this.subgamemgr.submd5dicfFileName;
        this.subgamesdir = this.subgamemgr.subgamesdir;
        this._storagePath = this.subgamemgr._storagePath;
        this.rootDownLoadUrl = this.subgamemgr.rootDownLoadUrl;
        this.gamecode = gamecode;
      }
      SubGameDownLoader.prototype.run = function() {
        var curTime = new Date().getTime();
        var delayTask = [];
        for (var i = 0; i < this.runningtasks.length; ++i) {
          var filepath = this.runningtasks[i];
          var time = this.timedic[filepath];
          curTime - time > 2e4 && delayTask.push(filepath);
        }
        for (var i = 0; i < delayTask.length; ++i) {
          var filepath = delayTask[0];
          this.runningtasks.removeByValue(filepath);
        }
        delayTask.length > 0 && this.genTasks();
      };
      SubGameDownLoader.prototype.getState = function() {
        return this.state;
      };
      SubGameDownLoader.prototype.getSpeed = function() {
        return this.speed;
      };
      SubGameDownLoader.prototype.getProcessState = function() {
        return this.process_state;
      };
      SubGameDownLoader.prototype.setState = function(state) {
        this.state = state;
        this.subgamemgr.setState(this.gamecode, state);
      };
      SubGameDownLoader.prototype.removeTask = function(filepath) {
        this.runningtasks.removeByValue(filepath);
        delete this.downloaderDic[filepath];
        this.refreshTasks();
      };
      SubGameDownLoader.prototype.retry = function() {
        this.subgamemgr.resetNewFileList();
        this.startDownLoad();
      };
      SubGameDownLoader.prototype.downloadSubMd5dic = function() {
        var _this = this;
        var zipfilename = this.submd5dicfFileName + ".json";
        var filename = this.submd5dicfFileName;
        var reqRemoteMd5DicCb = function(data) {
          var new_zip = new JSZip(data);
          var jsonstr = new_zip.file(filename).asText();
          this.remoteSubMd5dic[this.gamecode] = JSON.parse(jsonstr);
          this.genDiffMd5FileList();
          if (this.totalfilesize > 0) this.setState(SUBGAMEDOWNLOAD_STATE.ready); else {
            this.subgamemgr.completeGameDownLoad(this.gamecode);
            this.setState(SUBGAMEDOWNLOAD_STATE.none);
          }
        };
        var xhr = cc.loader.getXMLHttpRequest();
        xhr.responseType = "arraybuffer";
        xhr.onreadystatechange = function() {
          if (4 === xhr.readyState && xhr.status >= 200 && xhr.status < 300) {
            var arraybuffer = xhr.response;
            reqRemoteMd5DicCb.bind(_this)(arraybuffer);
          }
        };
        xhr.timeout = 5e3;
        var url = this.rootDownLoadUrl + "/" + this.subgamesdir + "/" + this.gamecode + "/" + zipfilename;
        xhr.onerror = function(error) {
          _this.setState(SUBGAMEDOWNLOAD_STATE.downfailed);
        };
        xhr.ontimeout = function() {
          _this.setState(SUBGAMEDOWNLOAD_STATE.downfailed);
        };
        xhr.open("GET", url, true);
        xhr.send();
      };
      SubGameDownLoader.prototype.getAlreadLoadSize = function() {
        return this.alreadydownloadsize;
      };
      SubGameDownLoader.prototype.resetNewFileList = function() {
        this.newFileDic = {};
        var isNewFile = false;
        this.totalfilesize = 0;
        this.alreadydownloadsize = 0;
        for (var filepath in this.remoteSubMd5dic[this.gamecode]) {
          if (this.completeDic[filepath]) continue;
          var remoteitem = this.remoteSubMd5dic[this.gamecode][filepath];
          var localitem = this.localSubMd5Dic[this.gamecode][filepath];
          isNewFile = false;
          isNewFile = !localitem || localitem.md5 != remoteitem.md5;
          if (isNewFile) {
            remoteitem.filepath = filepath;
            this.totalfilesize += remoteitem.size;
            this.newFileDic[filepath] = remoteitem;
          }
        }
      };
      SubGameDownLoader.prototype.genDiffMd5FileList = function() {
        this.newFileDic = {};
        var isNewFile = false;
        this.totalfilesize = 0;
        this.alreadydownloadsize = 0;
        for (var gamecode in this.remoteSubMd5dic) {
          if (0 != this.subgameStateDic[gamecode]) continue;
          var dic = this.remoteSubMd5dic[gamecode];
          for (var filepath in dic) this.completeDic[filepath] = dic[filepath];
        }
        for (var filepath in this.remoteSubMd5dic[this.gamecode]) {
          if (this.completeDic[filepath]) continue;
          var remoteitem = this.remoteSubMd5dic[this.gamecode][filepath];
          var localitem = this.localSubMd5Dic[this.gamecode][filepath];
          isNewFile = false;
          isNewFile = !localitem || localitem.md5 != remoteitem.md5;
          if (isNewFile) {
            remoteitem.filepath = filepath;
            this.totalfilesize += remoteitem.size;
            this.newFileDic[filepath] = remoteitem;
          }
        }
        this.process_state = SUBGAMEPROCESS_STATE.sizeCaled;
      };
      SubGameDownLoader.prototype.refreshTasks = function() {
        this.alreadydownloadsize = 0;
        for (var filepath in this.completeDic) {
          var item = this.newFileDic[filepath];
          if (!item) continue;
          this.alreadydownloadsize += item.size;
        }
        this.executeTasks();
      };
      SubGameDownLoader.prototype.genTasks = function() {
        var newTasks = [];
        for (var filepath in this.newFileDic) {
          if (this.completeDic[filepath] || this.failedtasks.contain(filepath) || this.runningtasks.contain(filepath)) continue;
          if (this.runningtasks.length < MAX_TASK_COUNT) {
            this.timedic[filepath] = new Date().getTime();
            this.runningtasks.push(filepath);
            newTasks.push(filepath);
          }
        }
        return newTasks;
      };
      SubGameDownLoader.prototype.executeTasks = function() {
        var newTasks = this.genTasks();
        if (newTasks.length > 0) for (var i = 0; i < newTasks.length; ++i) {
          var filepath = newTasks[i];
          var item = this.newFileDic[filepath];
          this.downloadNewFile(item);
        } else if (this.runningtasks.length <= 0) {
          this.clearTimer();
          if (this.failedtasks.length > 0) {
            this.failedtasks = [];
            this.setState(SUBGAMEDOWNLOAD_STATE.downfailed);
          } else {
            var elapseTime = (new Date().getTime() - this.startDownLoadTime) / 1e3;
            console.log("总共耗时=", elapseTime);
            this.subgamemgr.completeGameDownLoad(this.gamecode);
            this.setState(SUBGAMEDOWNLOAD_STATE.complete);
          }
        }
      };
      SubGameDownLoader.prototype.clearTimer = function() {
        if (null != this.timer) {
          clearInterval(this.timer);
          this.timer = null;
        }
      };
      SubGameDownLoader.prototype.getTotalSize = function() {
        return this.totalfilesize;
      };
      SubGameDownLoader.prototype.downloadNewFile = function(item) {
        var _this = this;
        var completeCb = function(filename, filepath, oname, rootpath) {
          if (!item.compressed) {
            var data = jsb.fileUtils.getDataFromFile(filepath);
            var new_zip = new JSZip(data);
            var buffer = new_zip.file(oname).asUint8Array();
            jsb.fileUtils.writeDataToFile(buffer, rootpath + "/" + oname);
            jsb.fileUtils.removeFile(filepath);
          }
          this.localSubMd5Dic[this.gamecode][item.filepath] = item;
          jsb.fileUtils.writeStringToFile(JSON.stringify(this.localSubMd5Dic[this.gamecode]), this._storagePath + "/" + this.subgamesdir + "/" + this.gamecode + "/" + this.submd5dicfFileName);
          this.completeDic[item.filepath] = item;
          this.removeTask(item.filepath);
        };
        var filepath = item.filepath;
        var storagefilename = this._storagePath + "/" + filepath;
        var dirarr = filepath.split("/");
        var rootPath = this._storagePath;
        var oname = dirarr[dirarr.length - 1];
        for (var index = 0; index < dirarr.length - 1; ++index) {
          var subdir = dirarr[index];
          rootPath = rootPath + "/" + subdir;
          jsb.fileUtils.createDirectory(rootPath);
        }
        var filename = item.filepath;
        if (!item.compressed) {
          filename += ".json";
          storagefilename += ".json";
        }
        var url = this.rootDownLoadUrl + "/" + filename;
        var downloaderDic = new jsb.Downloader();
        storagefilename = storagefilename.replace(/\\/g, "/");
        downloaderDic.createDownloadFileTask(url, storagefilename);
        downloaderDic.setOnTaskError(function(sender, errorCode, errorCodeInternal, errorStr) {
          console.log("错误提示=", errorCode, errorCodeInternal, errorStr);
          _this.failedtasks.push(item.filepath);
          _this.removeTask(item.filepath);
        });
        downloaderDic.setOnFileTaskSuccess(function(sender) {
          completeCb.bind(_this)(filename, sender.storagePath, oname, rootPath);
        });
        downloaderDic.setOnTaskProgress(function(sender, speed, alreadsize, totalsize) {
          _this.speed = speed;
          _this.subgamemgr.updateProcess(_this.gamecode, speed, _this.alreadydownloadsize + alreadsize, _this.totalfilesize);
        });
        this.downloaderDic[item.filepath] = downloaderDic;
      };
      SubGameDownLoader.prototype.startDownLoad = function() {
        if (this.subgamemgr.taskIsRunning()) {
          this.setState(SUBGAMEDOWNLOAD_STATE.que);
          this.subgamemgr.putInQue(this.gamecode);
          return;
        }
        this.startDownLoadTime = new Date().getTime();
        this.clearTimer();
        this.timer = setInterval(this.run.bind(this));
        this.process_state = SUBGAMEPROCESS_STATE.loading;
        var submd5dir = this.subgamesdir + "/" + this.gamecode;
        var dirarr = submd5dir.split("/");
        var rootPath = this._storagePath;
        var oname = dirarr[dirarr.length - 1];
        for (var index = 0; index < dirarr.length; ++index) {
          var subdir = dirarr[index];
          rootPath = rootPath + "/" + subdir;
          jsb.fileUtils.createDirectory(rootPath);
        }
        this.setState(SUBGAMEDOWNLOAD_STATE.downloading);
        this.executeTasks();
      };
      return SubGameDownLoader;
    }();
    exports.default = SubGameDownLoader;
    cc._RF.pop();
  }, {} ],
  SubGameMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7efa24L9SNMibCOtVtb7SJU", "SubGameMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ServerMgr_1 = require("../../AppStart/AppMgrs/ServerMgr");
    var VersionMgr_1 = require("../../AppStart/AppMgrs/VersionMgr");
    var SubGameDownLoader_1 = require("./SubGameDownLoader");
    var SubGameMgr = function() {
      function SubGameMgr() {
        this.downloaders = {};
        this.remoteGamesPackInfo = null;
        this.remoteSubMd5dic = {};
        this.localSubMd5Dic = {};
        this.localGamesPackInfo = null;
        this.getGamesPackInfoCb = null;
        this._storagePath = null;
        this.gamespackFileName = "gamespack.json";
        this.submd5dicfFileName = "submd5dic.json";
        this.subgamesdir = "subgames";
        this.rootDownLoadUrl = "";
        this.processCb = null;
        this.subgameStateDic = {};
        this.downLoadSubGameCb = null;
        this.completeDic = {};
        this.downloadQue = [];
      }
      SubGameMgr.getInstance = function() {
        this._instance || (this._instance = new SubGameMgr());
        return this._instance;
      };
      SubGameMgr.prototype.getDownLoaders = function() {
        return this.downloaders;
      };
      SubGameMgr.prototype.taskIsRunning = function() {
        for (var gamecode in this.downloaders) {
          var downloader = this.downloaders[gamecode];
          if (downloader.getState() == SUBGAMEDOWNLOAD_STATE.downloading) return true;
        }
        return false;
      };
      SubGameMgr.prototype.putInQue = function(gamecode) {
        this.downloadQue.push(gamecode);
      };
      SubGameMgr.prototype.initDirs = function() {
        this._storagePath = VersionMgr_1.default.getInstance().getStoragePath();
        this.rootDownLoadUrl = ServerMgr_1.default.getInstance().getHotupdateVersionUrl();
        this.readLoaclGamesPackInfo();
      };
      SubGameMgr.prototype.updateGameId = function(gamecode) {
        if (0 == this.subgameStateDic[gamecode]) return;
        this.downloaders[gamecode] || (this.downloaders[gamecode] = new SubGameDownLoader_1.default(gamecode, this));
      };
      SubGameMgr.prototype.readLoaclGamesPackInfo = function() {
        var localstr = jsb.fileUtils.getStringFromFile(this.gamespackFileName);
        var versioninfoexist = localstr && localstr.length > 0;
        versioninfoexist && (this.localGamesPackInfo = JSON.parse(localstr));
      };
      SubGameMgr.prototype.gameIsUpdated = function(gamecode) {
        if (!ServerMgr_1.default.getInstance().isEnableHotUpdate()) return true;
        return 0 == this.subgameStateDic[gamecode];
      };
      SubGameMgr.prototype.getSubGameState = function(gamecode) {
        if (ServerMgr_1.default.getInstance().isEnableHotUpdate()) return this.subgameStateDic[gamecode];
        return 0;
      };
      SubGameMgr.prototype.setState = function(gamecode, state) {
        this.downLoadSubGameCb && this.downLoadSubGameCb(gamecode, state);
      };
      SubGameMgr.prototype.getRemoteGamesPackInfo = function(getGamesPackInfoCb) {
        this.initDirs();
        this.getGamesPackInfoCb = getGamesPackInfoCb;
        this.localGamesPackInfo ? this.reqRemoteGamesPackInfo() : this.getGamesPackInfoCb(0);
      };
      SubGameMgr.prototype.completeGameDownLoad = function(gamecode) {
        delete this.downloaders[gamecode];
        this.updateGamePackInfo(gamecode);
        this.resetNewFileList();
        if (this.downloadQue.length <= 0) return;
        var nextGameCode = this.downloadQue[0];
        var downloader = this.downloaders[nextGameCode];
        downloader.startDownLoad();
        this.downloadQue.remove(0);
      };
      SubGameMgr.prototype.resetNewFileList = function() {
        for (var gamecode in this.downloaders) this.downloaders[gamecode].resetNewFileList();
      };
      SubGameMgr.prototype.reqRemoteGamesPackInfo = function() {
        var _this = this;
        var reqGamesPackInfoCb = function(str) {
          if (!str) {
            this.getGamesPackInfoCb(-1);
            return;
          }
          this.remoteGamesPackInfo = JSON.parse(str);
          for (var gamecode in this.remoteGamesPackInfo) this.localGamesPackInfo[gamecode] ? this.remoteGamesPackInfo[gamecode] == this.localGamesPackInfo[gamecode] ? this.subgameStateDic[gamecode] = 0 : this.subgameStateDic[gamecode] = 1 : this.subgameStateDic[gamecode] = 2;
          for (var gamecode in this.remoteGamesPackInfo) {
            var localstr = jsb.fileUtils.getStringFromFile(this.subgamesdir + "/" + gamecode + "/" + this.submd5dicfFileName);
            localstr && localstr.length > 0 ? this.localSubMd5Dic[gamecode] = JSON.parse(localstr) : this.localSubMd5Dic[gamecode] = {};
            if (0 == this.subgameStateDic[gamecode]) {
              var submd5dic = this.localSubMd5Dic[gamecode];
              for (var filepath in submd5dic) this.completeDic[filepath] = submd5dic[filepath];
            }
          }
          this.getGamesPackInfoCb(0);
        };
        var xhr = cc.loader.getXMLHttpRequest();
        xhr.onreadystatechange = function() {
          cc.log("xhr.readyState=" + xhr.readyState + "  xhr.status=" + xhr.status);
          if (4 === xhr.readyState && xhr.status >= 200 && xhr.status < 300) {
            var respone = xhr.responseText;
            var data = JSON.parse(respone);
            console.log("获取到了内容=", _this.gamespackFileName, respone);
            reqGamesPackInfoCb.bind(_this)(respone);
          }
        };
        xhr.timeout = 5e3;
        var url = this.rootDownLoadUrl + "/" + this.gamespackFileName;
        xhr.onerror = function(error) {
          console.log("httpRequest" + url + "出错啦");
          reqGamesPackInfoCb.bind(_this)(null);
        };
        xhr.ontimeout = function() {
          console.log("httpRequest" + url + "超时啦");
          reqGamesPackInfoCb.bind(_this)(null);
        };
        xhr.open("GET", url, true);
        xhr.send();
      };
      SubGameMgr.prototype.retryFiles = function() {};
      SubGameMgr.prototype.updateGamePackInfo = function(gamecode) {
        this.subgameStateDic[gamecode] = 0;
        this.localGamesPackInfo[gamecode] = this.remoteGamesPackInfo[gamecode];
        jsb.fileUtils.writeStringToFile(JSON.stringify(this.localGamesPackInfo), this._storagePath + "/" + this.gamespackFileName);
      };
      SubGameMgr.prototype.updateProcess = function(gamecode, speed, alreadydownloadsize, totalfilesize) {
        this.processCb && this.processCb(gamecode, speed, alreadydownloadsize, totalfilesize);
      };
      SubGameMgr.prototype.registerCb = function(downLoadSubGameCb, processCb) {
        this.downLoadSubGameCb = downLoadSubGameCb;
        this.processCb = processCb;
      };
      SubGameMgr.prototype.unRegisterCb = function() {
        this.downLoadSubGameCb = null;
        this.processCb = null;
      };
      return SubGameMgr;
    }();
    exports.default = SubGameMgr;
    cc._RF.pop();
  }, {
    "../../AppStart/AppMgrs/ServerMgr": "ServerMgr",
    "../../AppStart/AppMgrs/VersionMgr": "VersionMgr",
    "./SubGameDownLoader": "SubGameDownLoader"
  } ],
  SwitchMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7c0ee1K5/pMRLqhzSnxgetV", "SwitchMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var SwitchSettingCfg_1 = require("../CfgMgrs/SwitchSettingCfg");
    var SwitchMgr = function(_super) {
      __extends(SwitchMgr, _super);
      function SwitchMgr() {
        var _this = _super.call(this) || this;
        _this.customcfg = null;
        _this.defaultcfg = {
          switch_shop: 1,
          switch_visitors_login: 1,
          switch_wechat_login: 1,
          switch_wechat_agreement: 1,
          switch_bing_account: 1,
          switch_exchange_code: 1,
          switch_customer_service: 1,
          switch_luck_draw: 1,
          switch_hall_sharing: 1,
          switch_game_sharing: 1,
          switch_settlement_sharing: 1,
          switch_performance_sharing: 1,
          switch_play_method: 1,
          switch_notice: 1,
          switch_horse_race_lamp: 1,
          switch_apple_pay_outside: 1,
          switch_add_club: 1,
          switch_add_club_expense: 1,
          switch_del_club: 1,
          switch_out_card_acceleration: 1,
          switch_touch_card_acceleration: 1,
          switch_compare_card_acceleration: 1
        };
        _this.routes = {
          "http.reqGameSwitch": _this.http_reqGameSwitch
        };
        _this.customcfg = {};
        return _this;
      }
      SwitchMgr.prototype.http_reqGameSwitch = function(msg) {
        var localSwitchSetting = SwitchSettingCfg_1.default.getInstance().getSetting();
        if (localSwitchSetting) for (var key in localSwitchSetting) msg.cfg[key] = localSwitchSetting[key];
        this.customcfg = msg.cfg;
      };
      SwitchMgr.prototype.reqGameSwitch = function() {
        this.send_msg("http.reqGameSwitch", {
          gid: 8
        });
      };
      SwitchMgr.prototype.get_switch_shop = function() {
        if (null != this.customcfg["switch_shop"]) return this.customcfg["switch_shop"];
        return this.defaultcfg["switch_shop"];
      };
      SwitchMgr.prototype.get_switch_visitors_login = function() {
        if (null != this.customcfg["switch_visitors_login"]) return this.customcfg["switch_visitors_login"];
        return this.defaultcfg["switch_visitors_login"];
      };
      SwitchMgr.prototype.get_switch_wechat_login = function() {
        if (null != this.customcfg["switch_wechat_login"]) return this.customcfg["switch_wechat_login"];
        return this.defaultcfg["switch_wechat_login"];
      };
      SwitchMgr.prototype.get_switch_wechat_agreement = function() {
        if (null != this.customcfg["switch_wechat_agreement"]) return this.customcfg["switch_wechat_agreement"];
        return this.defaultcfg["switch_wechat_agreement"];
      };
      SwitchMgr.prototype.get_switch_bing_account = function() {
        if (null != this.customcfg["switch_bing_account"]) return this.customcfg["switch_bing_account"];
        return this.defaultcfg["switch_bing_account"];
      };
      SwitchMgr.prototype.get_switch_exchange_code = function() {
        if (null != this.customcfg["switch_exchange_code"]) return this.customcfg["switch_exchange_code"];
        return this.defaultcfg["switch_exchange_code"];
      };
      SwitchMgr.prototype.get_switch_customer_service = function() {
        if (null != this.customcfg["switch_customer_service"]) return this.customcfg["switch_customer_service"];
        return this.defaultcfg["switch_customer_service"];
      };
      SwitchMgr.prototype.get_switch_luck_draw = function() {
        if (null != this.customcfg["switch_luck_draw"]) return this.customcfg["switch_luck_draw"];
        return this.defaultcfg["switch_luck_draw"];
      };
      SwitchMgr.prototype.get_switch_hall_sharing = function() {
        if (null != this.customcfg["switch_hall_sharing"]) return this.customcfg["switch_hall_sharing"];
        return this.defaultcfg["switch_hall_sharing"];
      };
      SwitchMgr.prototype.get_switch_game_sharing = function() {
        if (null != this.customcfg["switch_game_sharing"]) return this.customcfg["switch_game_sharing"];
        return this.defaultcfg["switch_game_sharing"];
      };
      SwitchMgr.prototype.get_switch_settlement_sharing = function() {
        if (null != this.customcfg["switch_settlement_sharing"]) return this.customcfg["switch_settlement_sharing"];
        return this.defaultcfg["switch_settlement_sharing"];
      };
      SwitchMgr.prototype.get_switch_performance_sharing = function() {
        if (null != this.customcfg["switch_performance_sharing"]) return this.customcfg["switch_performance_sharing"];
        return this.defaultcfg["switch_performance_sharing"];
      };
      SwitchMgr.prototype.get_switch_play_method = function() {
        if (null != this.customcfg["switch_play_method"]) return this.customcfg["switch_play_method"];
        return this.defaultcfg["switch_play_method"];
      };
      SwitchMgr.prototype.get_switch_notice = function() {
        if (null != this.customcfg["switch_notice"]) return this.customcfg["switch_notice"];
        return this.defaultcfg["switch_notice"];
      };
      SwitchMgr.prototype.get_switch_horse_race_lamp = function() {
        if (null != this.customcfg["switch_horse_race_lamp"]) return this.customcfg["switch_horse_race_lamp"];
        return this.defaultcfg["switch_horse_race_lamp"];
      };
      SwitchMgr.prototype.get_switch_apple_pay_outside = function() {
        if (null != this.customcfg["switch_apple_pay_outside"]) return this.customcfg["switch_apple_pay_outside"];
        return this.defaultcfg["switch_apple_pay_outside"];
      };
      SwitchMgr.prototype.get_switch_add_club = function() {
        if (null != this.customcfg["switch_add_club"]) return this.customcfg["switch_add_club"];
        return this.defaultcfg["switch_add_club"];
      };
      SwitchMgr.prototype.get_switch_add_club_expense = function() {
        if (null != this.customcfg["switch_add_club_expense"]) return this.customcfg["switch_add_club_expense"];
        return this.defaultcfg["switch_add_club_expense"];
      };
      SwitchMgr.prototype.get_switch_del_club = function() {
        if (null != this.customcfg["switch_del_club"]) return this.customcfg["switch_del_club"];
        return this.defaultcfg["switch_del_club"];
      };
      SwitchMgr.prototype.get_switch_out_card_acceleration = function() {
        if (null != this.customcfg["switch_out_card_acceleration"]) return this.customcfg["switch_out_card_acceleration"];
        return this.defaultcfg["switch_out_card_acceleration"];
      };
      SwitchMgr.prototype.get_switch_touch_card_acceleration = function() {
        if (null != this.customcfg["switch_touch_card_acceleration"]) return this.customcfg["switch_touch_card_acceleration"];
        return this.defaultcfg["switch_touch_card_acceleration"];
      };
      SwitchMgr.prototype.get_switch_compare_card_acceleration = function() {
        if (null != this.customcfg["switch_compare_card_acceleration"]) return this.customcfg["switch_compare_card_acceleration"];
        return this.defaultcfg["switch_compare_card_acceleration"];
      };
      SwitchMgr.getInstance = function() {
        this._instance || (this._instance = new SwitchMgr());
        return this._instance;
      };
      return SwitchMgr;
    }(BaseMgr_1.default);
    exports.default = SwitchMgr;
    cc._RF.pop();
  }, {
    "../CfgMgrs/SwitchSettingCfg": "SwitchSettingCfg",
    "../Libs/BaseMgr": "BaseMgr"
  } ],
  SwitchSettingCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6c7fa2NqqpIBZTaq0VN77Nb", "SwitchSettingCfg");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCfg_1 = require("../Libs/BaseCfg");
    var ServerMgr_1 = require("../../AppStart/AppMgrs/ServerMgr");
    var SwitchSettingCfg = function(_super) {
      __extends(SwitchSettingCfg, _super);
      function SwitchSettingCfg() {
        var _this = _super.call(this) || this;
        _this.productsettingPath = null;
        _this.switchSettings = null;
        _this.loadCb2 = null;
        _this.productsettingPath = _this.getFullPath("switchsetting");
        return _this;
      }
      SwitchSettingCfg.getInstance = function() {
        this._instance || (this._instance = new SwitchSettingCfg());
        return this._instance;
      };
      SwitchSettingCfg.prototype.getSetting = function() {
        return this.switchSettings;
      };
      SwitchSettingCfg.prototype.loadCb = function(name, data) {
        this.loaded = true;
        this.switchSettings = data[ServerMgr_1.default.getInstance().getProductTag()];
        this.loadCb2();
      };
      SwitchSettingCfg.prototype.load = function(loadCb2) {
        this.loadCb2 = loadCb2;
        this.loadRes(this.productsettingPath, this.loadCb);
      };
      return SwitchSettingCfg;
    }(BaseCfg_1.default);
    exports.default = SwitchSettingCfg;
    cc._RF.pop();
  }, {
    "../../AppStart/AppMgrs/ServerMgr": "ServerMgr",
    "../Libs/BaseCfg": "BaseCfg"
  } ],
  TaskMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fe1d3wWAd9CQ7gLU1V6HmGA", "TaskMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var GEventDef_1 = require("./GEventDef");
    var TaskMgr = function(_super) {
      __extends(TaskMgr, _super);
      function TaskMgr() {
        var _this = _super.call(this) || this;
        _this.taskList = [];
        _this.taskItemInfo = {};
        _this.inviteInfo = {};
        _this.routes = null;
        _this.routes = {
          "http.reqDailyActivity": _this.http_reqDailyActivity,
          "http.reqDailyActivityReceive": _this.http_reqDailyActivityReceive
        };
        _this.inviteInfo = {
          InvitedAmount: 0,
          PeopleAmount: [ 1, 3, 5, 10, 20 ],
          RewardType: [ 1, 1, 1, 1, 1 ],
          RewardAmount: [ 100, 200, 300, 400, 500 ]
        };
        _this.reqDailyActivity();
        return _this;
      }
      TaskMgr.prototype.getTaskList = function() {
        return this.taskList;
      };
      TaskMgr.prototype.setTaskItemInfo = function(obj) {
        this.taskItemInfo = obj;
      };
      TaskMgr.prototype.getTaskItemInfo = function() {
        return this.taskItemInfo;
      };
      TaskMgr.prototype.getInviteInfo = function() {
        return this.inviteInfo;
      };
      TaskMgr.prototype.closeTaskPanel = function() {
        this.gemit(GEventDef_1.default.closeActivityModule);
      };
      TaskMgr.prototype.reqDailyActivityReceive = function(rewardtype) {
        var msg = {
          reward_type: rewardtype
        };
        this.send_msg("http.reqDailyActivityReceive", msg);
      };
      TaskMgr.prototype.http_reqDailyActivityReceive = function(msg) {};
      TaskMgr.prototype.reqDailyActivity = function() {
        this.send_msg("http.reqDailyActivity");
      };
      TaskMgr.prototype.http_reqDailyActivity = function(msg) {
        this.taskList = msg;
      };
      TaskMgr.getInstance = function() {
        this._instance || (this._instance = new TaskMgr());
        return this._instance;
      };
      return TaskMgr;
    }(BaseMgr_1.default);
    exports.default = TaskMgr;
    cc._RF.pop();
  }, {
    "../Libs/BaseMgr": "BaseMgr",
    "./GEventDef": "GEventDef"
  } ],
  TbnnAudioMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7f77eS+2z1PgIak0JGLLtLT", "TbnnAudioMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../../../Plat/Libs/BaseMgr");
    var LoaderMgr_1 = require("../../../AppStart/AppMgrs/LoaderMgr");
    var TbnnConst_1 = require("../BullMgr/TbnnConst");
    var processaudiodic = {};
    processaudiodic[TbnnConst_1.default.process.start] = "audio_ready";
    processaudiodic[TbnnConst_1.default.process.giveCards] = "audio_fapai";
    processaudiodic[TbnnConst_1.default.process.settle] = "kaijin";
    var TbnnAudioMgr = function(_super) {
      __extends(TbnnAudioMgr, _super);
      function TbnnAudioMgr() {
        var _this = _super.call(this) || this;
        _this.baseUrl = cc.url.raw("resources/audio/Games/tbnn/%s.mp3");
        _this.womanUrl = cc.url.raw("resources/audio/Games/tbnn/pth/woman/%s.mp3");
        _this.manUrl = cc.url.raw("resources/audio/Games/tbnn/pth/man/%s.mp3");
        _this.ResultAudioWoman = {
          womanbull0: "womanbull0",
          womanbull1: "womanbull1",
          womanbull2: "womanbull2",
          womanbull3: "womanbull3",
          womanbull4: "womanbull4",
          womanbull5: "womanbull5",
          womanbull6: "womanbull6",
          womanbull7: "womanbull7",
          womanbull8: "womanbull8",
          womanbull9: "womanbull9",
          womanbull10: "womanbull10",
          womanbull103: "womanbull103",
          womanbull105: "womanbull105",
          womanbull106: "womanbull106"
        };
        _this.ResultAudioMan = {
          manbull0: "manbull0",
          manbull1: "manbull1",
          manbull2: "manbull2",
          manbull3: "manbull3",
          manbull4: "manbull4",
          manbull5: "manbull5",
          manbull6: "manbull6",
          manbull7: "manbull7",
          manbull8: "manbull8",
          manbull9: "manbull9",
          manbull10: "manbull10",
          manbull103: "manbull103",
          manbull105: "manbull105",
          manbull106: "manbull106"
        };
        _this.process_audio = {
          audio_start: "audio_start",
          audio_fapai: "audio_fapai",
          Particle_Money: "Particle_Money"
        };
        _this.other_audio = {
          audio_ready: "audio_ready",
          backmusic: "backmusic"
        };
        return _this;
      }
      TbnnAudioMgr.prototype.playTest1Audio = function() {
        cc.audioEngine.play(this.formatStr(this.manUrl, "fix_msg_1"), false, 1);
      };
      TbnnAudioMgr.prototype.playReadyAudio = function() {
        cc.audioEngine.play(this.formatStr(this.baseUrl, this.other_audio.audio_ready), false, 1);
      };
      TbnnAudioMgr.prototype.playFaPaiAudio = function() {
        cc.audioEngine.play(this.formatStr(this.baseUrl, this.process_audio.audio_fapai), false, 1);
      };
      TbnnAudioMgr.prototype.playStartAudio = function() {
        cc.audioEngine.play(this.formatStr(this.baseUrl, this.process_audio.audio_start), false, 1);
      };
      TbnnAudioMgr.prototype.playBGM = function() {
        cc.audioEngine.play(this.formatStr(this.baseUrl, this.other_audio.backmusic), false, 1);
      };
      TbnnAudioMgr.prototype.playParticle_MoneyAudio = function() {
        cc.audioEngine.play(this.formatStr(this.baseUrl, this.process_audio.Particle_Money), false, 1);
      };
      TbnnAudioMgr.prototype.playResultAudio = function(value, sex) {
        var temp;
        var url;
        url = 2 == sex ? this.womanUrl : this.manUrl;
        switch (value) {
         case 0:
          temp = 2 == sex ? this.ResultAudioWoman.womanbull0 : this.ResultAudioMan.manbull0;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
          break;

         case "1":
          temp = 2 == sex ? this.ResultAudioWoman.womanbull1 : this.ResultAudioMan.manbull1;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
          break;

         case "2":
          temp = 2 == sex ? this.ResultAudioWoman.womanbull2 : this.ResultAudioMan.manbull2;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
          break;

         case "3":
          temp = 2 == sex ? this.ResultAudioWoman.womanbull3 : this.ResultAudioMan.manbull3;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
          break;

         case "4":
          temp = 2 == sex ? this.ResultAudioWoman.womanbull4 : this.ResultAudioMan.manbull4;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
          break;

         case "5":
          temp = 2 == sex ? this.ResultAudioWoman.womanbull5 : this.ResultAudioMan.manbull5;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
          break;

         case "6":
          temp = 2 == sex ? this.ResultAudioWoman.womanbull6 : this.ResultAudioMan.manbull6;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
          break;

         case "7":
          temp = 2 == sex ? this.ResultAudioWoman.womanbull7 : this.ResultAudioMan.manbull7;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
          break;

         case "8":
          temp = 2 == sex ? this.ResultAudioWoman.womanbull8 : this.ResultAudioMan.manbull8;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
          break;

         case "9":
          temp = 2 == sex ? this.ResultAudioWoman.womanbull9 : this.ResultAudioMan.manbull9;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
          break;

         case "10":
          temp = 2 == sex ? this.ResultAudioWoman.womanbull10 : this.ResultAudioMan.manbull10;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
          break;

         case "17":
          temp = 2 == sex ? this.ResultAudioWoman.womanbull105 : this.ResultAudioMan.manbull105;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
          break;

         case "18":
          temp = 2 == sex ? this.ResultAudioWoman.womanbull103 : this.ResultAudioMan.manbull103;
          cc.audioEngine.play(this.formatStr(url, temp), false, 1);
        }
      };
      TbnnAudioMgr.prototype.reloadAudio = function(cb) {
        for (var key in this.ResultAudioMan) cc.loader.load(this.formatStr(this.manUrl, this.ResultAudioMan[key]), function() {
          cb && cb();
        });
        for (var key in this.ResultAudioWoman) cc.loader.load(this.formatStr(this.womanUrl, this.ResultAudioWoman[key]), function() {
          cb && cb();
        });
      };
      TbnnAudioMgr.prototype.getAudioNum = function() {
        return Object.keys(this.dict_audio).length;
      };
      TbnnAudioMgr.prototype.releaseAll = function() {
        for (var key in this.ResultAudioMan) LoaderMgr_1.default.getInstance().releaseUrlRes(this.formatStr(this.manUrl, this.ResultAudioMan[key]));
        for (var key in this.ResultAudioWoman) LoaderMgr_1.default.getInstance().releaseUrlRes(this.formatStr(this.womanUrl, this.ResultAudioWoman[key]));
      };
      TbnnAudioMgr.prototype.formatStr = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
        var t = args, e = t.length;
        if (e < 1) return "";
        var i = /(%d)|(%s)/, n = 1, r = t[0], s = "string" == typeof r && i.test(r);
        if (s) for (var o = /%s/; n < e; ++n) {
          var a = t[n], c = "number" == typeof a ? i : o;
          c.test(r) ? r = r.replace(c, a) : r += " " + a;
        } else if (e > 1) for (;n < e; ++n) r += " " + t[n]; else r = "" + r;
        return r;
      };
      TbnnAudioMgr.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        delete TbnnAudioMgr._instance;
      };
      TbnnAudioMgr.getInstance = function() {
        this._instance || (this._instance = new TbnnAudioMgr());
        return this._instance;
      };
      return TbnnAudioMgr;
    }(BaseMgr_1.default);
    exports.default = TbnnAudioMgr;
    cc._RF.pop();
  }, {
    "../../../AppStart/AppMgrs/LoaderMgr": "LoaderMgr",
    "../../../Plat/Libs/BaseMgr": "BaseMgr",
    "../BullMgr/TbnnConst": "TbnnConst"
  } ],
  TbnnAudio: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "90fb50YJh5LfL2KufbaenQX", "TbnnAudio");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../../../Plat/Libs/BaseMgr");
    var GameAudioCfg_1 = require("../../../Plat/CfgMgrs/GameAudioCfg");
    var TbnnConst_1 = require("../BullMgr/TbnnConst");
    var resultAudioDic = {
      0: "niu0",
      1: "niu1",
      2: "niu2",
      3: "niu3",
      4: "niu4",
      5: "niu5",
      6: "niu6",
      7: "niu7",
      8: "niu8",
      9: "niu9",
      10: "niu10",
      12: "niu10",
      13: "niu10",
      14: "niu10",
      15: "niu13",
      17: "niu12",
      18: "niu11"
    };
    var opaudiodic = {};
    var BGMName = "backmusic";
    var processaudiodic = {};
    processaudiodic[TbnnConst_1.default.process.start] = "audio_start";
    processaudiodic["onPrepare"] = "audio_ready";
    processaudiodic[TbnnConst_1.default.process.giveCards] = "audio_fapai";
    processaudiodic[TbnnConst_1.default.process.settle] = "audio_win";
    processaudiodic["Clock"] = "Clock";
    var TbnnAudio = function(_super) {
      __extends(TbnnAudio, _super);
      function TbnnAudio() {
        return _super.call(this) || this;
      }
      TbnnAudio.getInstance = function() {
        this._instance || (this._instance = new TbnnAudio());
        return this._instance;
      };
      TbnnAudio.prototype.destroy = function() {
        GameAudioCfg_1.default.getInstance().stopbackgroudMusic();
        _super.prototype.destroy.call(this);
        TbnnAudio._instance = null;
        delete TbnnAudio._instance;
      };
      TbnnAudio.prototype.uncacheAll = function() {};
      TbnnAudio.prototype.playOpAudio = function(sex, op) {};
      TbnnAudio.prototype.playResultAudio = function(sex, resultType) {
        var type = parseInt(resultType);
        var audiotag = resultAudioDic[type];
        GameAudioCfg_1.default.getInstance().play(audiotag, sex);
      };
      TbnnAudio.prototype.playBGM = function() {
        GameAudioCfg_1.default.getInstance().playBGM(BGMName);
      };
      TbnnAudio.prototype.playGameProcessAudio = function(name, flag) {
        GameAudioCfg_1.default.getInstance().playGameProcessAudio(name, flag);
      };
      TbnnAudio.prototype.playClock = function(Clock, flag) {
        GameAudioCfg_1.default.getInstance().playGameProcessAudio(Clock, flag);
      };
      return TbnnAudio;
    }(BaseMgr_1.default);
    exports.default = TbnnAudio;
    cc._RF.pop();
  }, {
    "../../../Plat/CfgMgrs/GameAudioCfg": "GameAudioCfg",
    "../../../Plat/Libs/BaseMgr": "BaseMgr",
    "../BullMgr/TbnnConst": "TbnnConst"
  } ],
  TbnnConst: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f1260AHOjtI056FF8eqeiLj", "TbnnConst");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = {
      gameType: {
        normal: 1,
        grabDealer: 2
      },
      clientEvent: {
        onInitRoom_tbnn: "onInitRoom_tbnn",
        onStart: "onStart_tbnn",
        onGiveCards: "onGiveCards_tbnn",
        onProcess: "onProcess_tbnn",
        onSettle: "onSettle_tbnn",
        onTanPai: "onTanPai_tbnn",
        onSyncData: "onSyncData_tbnn",
        onMidEnter: "onMidEnter"
      },
      process: {
        start: 1,
        giveCards: 2,
        settle: 3
      },
      oprEvent: {
        oprTanPai: 1,
        oprTestStart: 2,
        oprTestCards: 3
      },
      config: {
        bigCardOffWRate: 1.2,
        minCardOffWRate: .4,
        maxGroupCardsNum: 5,
        cardIntervalTime: .1,
        cardMoveTime: .25
      },
      title: {
        nothing: 0,
        winer: 1,
        loser: 2,
        maxNiuniu: 3
      }
    };
    cc._RF.pop();
  }, {} ],
  TbnnEntry: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cd2108xi4BPaLB3iNna8gup", "TbnnEntry");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ModuleMgr_1 = require("../../Plat/GameMgrs/ModuleMgr");
    var modules = {
      BullRoom: "TbnnRoom",
      Bull_settle: "SubLayer/Games/Tbnn/Prefab_bull_settleCtrl",
      Bull_totalSettle: "GameStatistics/tbnn/TbnnFinalSettle",
      Bull_settle_openContent: "SubLayer/Games/Tbnn/Tbnn_settle_openContent",
      Bull_settle_meijuDetail: "SubLayer/Games/Tbnn/Tbnn_settle_openDetail",
      RoomUserInfo: "SubLayer/Plat/GameRoomCommon/RoomUserInfo",
      GambleRecord: "SubLayer/Games/Tbnn/Tbnn_record",
      Bull_settle_rowCotent: "GameCommon/Bull/bull_settle_rowContent",
      Bull_cuopai: "GameCommon/Bull/Bull_cuopai",
      Bull_calculate: "GameCommon/Bull/Bull_calculateCtrl",
      Bull_goldFalsh: "GameCommon/Bull/Bull_ani_coinFlash"
    };
    var TbnnEntry = function() {
      function TbnnEntry() {}
      TbnnEntry.getInstance = function() {
        this._instance || (this._instance = new TbnnEntry());
        return this._instance;
      };
      TbnnEntry.prototype.registerModules = function() {
        ModuleMgr_1.default.getInstance().registerGame(modules);
      };
      return TbnnEntry;
    }();
    exports.default = TbnnEntry;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/ModuleMgr": "ModuleMgr"
  } ],
  TbnnLogic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "981993fFm1Dtprz3MKU3UM9", "TbnnLogic");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../../../Plat/Libs/BaseMgr");
    var TbnnPlayer_1 = require("./TbnnPlayer");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var TbnnConst_1 = require("./TbnnConst");
    var GEventDef_1 = require("../../../Plat/GameMgrs/GEventDef");
    var BunchInfoMgr_1 = require("../../../Plat/GameMgrs/BunchInfoMgr");
    var BullPosMgr_1 = require("../../../GameCommon/Bull/BullPosMgr");
    var BullCardsMgr_1 = require("../../../GameCommon/Bull/BullCardsMgr");
    var TbnnAudio_1 = require("./TbnnAudio");
    var LoginMgr_1 = require("../../../Plat/GameMgrs/LoginMgr");
    var AppInfoMgr_1 = require("../../../AppStart/AppMgrs/AppInfoMgr");
    var PAYTYPE = {
      0: "房主支付",
      1: "AA支付",
      2: "赢家支付"
    };
    var TbnnLogic = function(_super) {
      __extends(TbnnLogic, _super);
      function TbnnLogic() {
        var _this = _super.call(this) || this;
        _this.initRoomCfg();
        _this.routes = {};
        _this.routes["onPrepare"] = _this.onPrepare;
        _this.routes["http.reqSettle"] = _this.http_reqSettle;
        _this.routes["connector.entryHandler.enterRoom"] = _this.onEnterRoom;
        _this.routes[TbnnConst_1.default.clientEvent.onProcess] = _this.onProcess;
        _this.routes[TbnnConst_1.default.clientEvent.onInitRoom_tbnn] = _this.onInitRoom_tbnn;
        _this.routes[TbnnConst_1.default.clientEvent.onSettle] = _this.onSettle_bull;
        _this.routes[TbnnConst_1.default.clientEvent.onSyncData] = _this.onSyncData;
        _this.routes[TbnnConst_1.default.clientEvent.onMidEnter] = _this.onMidEnter;
        return _this;
      }
      TbnnLogic.prototype.initRoomCfg = function() {
        this.seatcount = RoomMgr_1.default.getInstance().getSeatCount();
        this.fangkacfg = RoomMgr_1.default.getInstance().getFangKaCfg();
        this.baseChipValue = this.fangkacfg.v_minChip;
        this.players = {};
        this.cur_waitTime = 0;
        this.curWinId = -1;
        this.serverTimeOff = 0;
        this.isWatcher = false;
        for (var i = 0; i < this.seatcount; i++) {
          this.players[i] = new TbnnPlayer_1.default();
          this.players[i].init(i, this);
        }
        BullCardsMgr_1.default.initTeshuLimit();
      };
      TbnnLogic.prototype.clearData = function() {
        this.cur_waitTime = 0;
      };
      TbnnLogic.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        delete TbnnLogic._instance;
        BullPosMgr_1.default.getInstance().clear();
      };
      TbnnLogic.prototype.isShowStartBtn = function() {
        var isShow = RoomMgr_1.default.getInstance().isShowStartBtn();
      };
      TbnnLogic.prototype.native_invite = function() {
        if (cc.sys.isNative) {
          var gameName = RoomMgr_1.default.getInstance().getGameName();
          var roominfo = RoomMgr_1.default.getInstance().roominfo;
          var roomvalue = RoomMgr_1.default.getInstance().getFangKaCfg();
          var appname = AppInfoMgr_1.default.getInstance().getAppName();
          G_PLATFORM.wxShareRoom(G_PLATFORM.WX_SHARE_TYPE.WXSceneSession, appname + "好友房间邀请", gameName + " 房间号:" + roominfo.password + " 局数：" + roomvalue.v_roundcount + "局 人数：" + roomvalue.v_seatcount + "人 " + PAYTYPE[roomvalue.v_paytype], roominfo.password);
        }
      };
      TbnnLogic.prototype.addAndroidLog = function(str) {
        var _this = this;
        this.androidLog ? this.androidLog.addLog(str) : this.start_sub_module("SubLayer/Games/Tbnn/test_androidLog", function(comp) {
          _this.androidLog = comp;
          _this.androidLog.addLog(str);
        }, "test_androidLog");
      };
      TbnnLogic.prototype.sendTanpai = function() {
        this.send_msg("room.roomHandler.playerOp", {
          oprType: TbnnConst_1.default.oprEvent.oprTanPai
        });
      };
      TbnnLogic.prototype.sendTestCards = function(cardsList) {
        this.send_msg("room.roomHandler.playerOp", {
          oprType: TbnnConst_1.default.oprEvent.oprTestCards,
          dictCards: cardsList
        });
      };
      TbnnLogic.prototype.sendTestStart = function() {
        this.send_msg("room.roomHandler.playerOp", {
          oprType: TbnnConst_1.default.oprEvent.oprTestStart
        });
      };
      TbnnLogic.prototype.emit_showResultType = function(data) {
        G_FRAME.globalEmitter.emit(GEventDef_1.default.bull_showResultType, data);
      };
      TbnnLogic.prototype.emit_giveCardsEnd = function() {
        G_FRAME.globalEmitter.emit(GEventDef_1.default.bull_giveCardEnd);
      };
      TbnnLogic.prototype.emit_flyGold = function(startPos, targetPos, tagStr, flyType) {
        G_FRAME.globalEmitter.emit(GEventDef_1.default.bull_flyGold, {
          startPos: startPos,
          targetPos: targetPos,
          flyType: flyType,
          tagStr: tagStr
        });
      };
      TbnnLogic.prototype.emit_flyGoldEnd = function(tagStr) {
        G_FRAME.globalEmitter.emit(GEventDef_1.default.bull_flyGoldEnd, tagStr);
      };
      TbnnLogic.prototype.emit_cuopai = function(msg) {
        G_FRAME.globalEmitter.emit(GEventDef_1.default.bull_cuopai, msg);
      };
      TbnnLogic.prototype.emit_cuopaiEnd = function(msg) {
        G_FRAME.globalEmitter.emit(GEventDef_1.default.bull_cuopaiEnd, msg);
      };
      TbnnLogic.prototype.emit_roomIdColorChange = function() {
        G_FRAME.globalEmitter.emit(GEventDef_1.default.bull_setAllTableLaebl);
      };
      TbnnLogic.prototype.onEnterRoom = function(msg) {
        this.midEnterInfo = null;
      };
      TbnnLogic.prototype.http_reqSettle = function(msg) {
        console.log("接收到平台的结算信息= ", msg);
      };
      TbnnLogic.prototype.onInitRoom_tbnn = function(msg) {
        console.log("初始房间的数据onInitRoom_tbnn=, " + msg);
        this.openCardsTest();
        this.dict_playingSeats = {};
        var room = RoomMgr_1.default.getInstance();
        var users = room.users;
        for (var seatId in users) this.dict_playingSeats[seatId] = users[seatId];
      };
      TbnnLogic.prototype.syncData = function() {
        this.send_msg("room.roomHandler.syncData", null);
      };
      TbnnLogic.prototype.onSyncData = function(msg) {
        console.log("========onSyncData===========");
        console.log(msg);
        this.cur_waitTime = msg.settleTime;
        this.baseChipValue = msg.curChipValue;
      };
      TbnnLogic.prototype.onPrepare = function(msg) {
        msg.seatid == RoomMgr_1.default.getInstance().getMySeatId() && this.clearData();
      };
      TbnnLogic.prototype.onProcess = function(msg) {
        switch (msg.process) {
         case TbnnConst_1.default.process.start:
          this.cur_waitTime = 0;
          this.curWinId = -1;
          this.isWatcher = false;
          this.serverTimeOff = msg.servertime - Date.now();
          break;

         case TbnnConst_1.default.process.giveCards:
          this.cur_waitTime = msg.waitTime;
          TbnnAudio_1.default.getInstance().playGameProcessAudio("audio_fapai", false);
          break;

         case TbnnConst_1.default.process.settle:
          this.midEnterInfo = null;
          this.cur_waitTime = 0;
          this.isWatcher = false;
        }
      };
      TbnnLogic.prototype.onSettle_bull = function(msg) {
        console.log("****************onSettle = ", msg);
        this.curWinId = msg.winSeatId;
      };
      TbnnLogic.prototype.onMidEnter = function(msg) {
        console.log("自己是属于中途入场的", msg);
        this.midEnterInfo = msg;
        this.cur_waitTime = msg.settleTime;
        this.serverTimeOff = msg.serverTime - Date.now();
        this.isWatcher = true;
      };
      TbnnLogic.prototype.openGoldFalsh = function(cb) {
        this.start_sub_module(G_MODULE.Bull_goldFalsh, cb);
      };
      TbnnLogic.prototype.openSettle = function(cb) {
        this.start_sub_module(G_MODULE.Bull_settle, cb, "Prefab_bull_settleCtrl");
      };
      TbnnLogic.prototype.openCalculate = function(cb) {
        this.start_sub_module(G_MODULE.Bull_calculate, cb, "Bull_calculateCtrl");
      };
      TbnnLogic.prototype.toPlaza = function() {
        LoginMgr_1.default.getInstance().disconnectGameSvr();
      };
      TbnnLogic.prototype.openClock = function() {
        this.start_sub_module(G_MODULE.BullClock);
      };
      TbnnLogic.prototype.openCuopai = function(cb) {
        this.start_sub_module(G_MODULE.Bull_cuopai, cb);
      };
      TbnnLogic.prototype.openTotalSettle = function() {
        this.start_sub_module(G_MODULE.Bull_totalSettle);
      };
      TbnnLogic.prototype.openCardsTest = function() {};
      TbnnLogic.prototype.openCheatCheck = function() {
        this.start_sub_module(G_MODULE.RoomPreventionCheating);
      };
      TbnnLogic.prototype.getIsWatcher = function(logicSeatId) {
        if (this.midEnterInfo) return this.isHaveKey(this.midEnterInfo.idleSeatIdList, logicSeatId);
        return false;
      };
      TbnnLogic.prototype.getValidSeats = function() {
        return this.dict_playingSeats;
      };
      TbnnLogic.prototype.getMaxRounds = function() {
        return this.fangkacfg.v_roundcount;
      };
      TbnnLogic.prototype.getBaseChipValue = function() {
        return this.baseChipValue;
      };
      TbnnLogic.prototype.getCurWaitTime = function() {
        return Math.floor((this.cur_waitTime - (Date.now() + this.serverTimeOff)) / 1e3);
      };
      TbnnLogic.prototype.getPlayerInfo = function(seatId) {
        return this.players[seatId];
      };
      TbnnLogic.prototype.getMyViewSeatId = function() {
        return RoomMgr_1.default.getInstance().getViewSeatId(this.getMyLogicSeatId());
      };
      TbnnLogic.prototype.getMyLogicSeatId = function() {
        return RoomMgr_1.default.getInstance().getMySeatId();
      };
      TbnnLogic.prototype.getMyScore = function(logicSeatId) {
        var bunchInfo = BunchInfoMgr_1.default.getInstance().getBunchInfo();
        if (bunchInfo && bunchInfo.leiji[logicSeatId]) return bunchInfo.leiji[logicSeatId].zongshuying;
        return 0;
      };
      TbnnLogic.prototype.getLeijiInfo = function() {
        var bunchInfo = BunchInfoMgr_1.default.getInstance().getBunchInfo();
        if (bunchInfo) return bunchInfo.leiji;
        return null;
      };
      TbnnLogic.prototype.getIsMyWin = function() {
        return RoomMgr_1.default.getInstance().getMySeatId() == this.curWinId;
      };
      TbnnLogic.prototype.getIsCuopaiLimit = function() {
        return parseInt(this.fangkacfg.v_cuopaiLimit);
      };
      TbnnLogic.prototype.getIsMyWatcher = function() {
        return this.getIsWatcher(this.getMyLogicSeatId());
      };
      TbnnLogic.prototype.isHaveKey = function(list, key) {
        for (var i = 0; i < list.length; i++) if (list[i] == key) return true;
        return false;
      };
      TbnnLogic.getInstance = function() {
        this._instance || (this._instance = new TbnnLogic());
        return this._instance;
      };
      return TbnnLogic;
    }(BaseMgr_1.default);
    exports.default = TbnnLogic;
    cc._RF.pop();
  }, {
    "../../../AppStart/AppMgrs/AppInfoMgr": "AppInfoMgr",
    "../../../GameCommon/Bull/BullCardsMgr": "BullCardsMgr",
    "../../../GameCommon/Bull/BullPosMgr": "BullPosMgr",
    "../../../Plat/GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../../Plat/GameMgrs/GEventDef": "GEventDef",
    "../../../Plat/GameMgrs/LoginMgr": "LoginMgr",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseMgr": "BaseMgr",
    "./TbnnAudio": "TbnnAudio",
    "./TbnnConst": "TbnnConst",
    "./TbnnPlayer": "TbnnPlayer"
  } ],
  TbnnModulesInstallCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bbbcc1kD/dK3JmqV73vkyri", "TbnnModulesInstallCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var LoaderMgr_1 = require("../../../AppStart/AppMgrs/LoaderMgr");
    var GEventDef_1 = require("../../../Plat/GameMgrs/GEventDef");
    var LocalStorage_1 = require("../../../Plat/Libs/LocalStorage");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CONFIGS = {
      localBGName: "bull_backgroundTable"
    };
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.mySeatId = null;
        _this.resultGoldUpH = null;
        _this.seatCount = null;
        _this.voiceState = null;
        _this.maikefeng_on = null;
        _this.laba_on = null;
        _this.resultGoldUpH = 100;
        _this.seatCount = RoomMgr_1.default.getInstance().getSeatCount();
        _this.mySeatId = RoomMgr_1.default.getInstance().getMySeatId();
        return _this;
      }
      Model.prototype.switchLabaState = function() {
        var voicestate = null;
        voicestate = this.laba_on ? 2 : 3;
        return voicestate;
      };
      Model.prototype.switchMaiKeFengState = function() {
        var voicestate = null;
        voicestate = this.maikefeng_on ? 3 : 1;
        return voicestate;
      };
      Model.prototype.initBGState = function() {
        this.bgState = LocalStorage_1.default.getInstance().getBullRoomBGCfg();
        if (!this.bgState) {
          this.bgState = 1;
          LocalStorage_1.default.getInstance().setBullRoomBGCfg(this.bgState);
        }
      };
      Model.prototype.updateVoiceState = function() {
        this.voiceState = RoomMgr_1.default.getInstance().getVoiceState(this.mySeatId);
        console.log("更新声音状态=======this.voiceState", this.voiceState);
        switch (this.voiceState) {
         case 1:
          this.maikefeng_on = true;
          this.laba_on = true;
          break;

         case 2:
         case 3:
          this.maikefeng_on = false;
          this.laba_on = true;
        }
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.node_resultGold = null;
        _this.prefab_backGround = null;
        _this.ui = {
          node_parent_bg: null,
          node_parent_seat: null,
          node_parent_upUi: null,
          prefab_roomInfo: null,
          prefab_background6: null,
          prefab_background8: null,
          prefab_tipClock: null,
          prefab_roomAround: null,
          prefab_BullroomInfo: null,
          sprite_background6: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.prefab_roomAround = ctrl.prefab_roomAround;
        this.ui.node_parent_bg = ctrl.node_parent_bg;
        this.ui.node_parent_seat = ctrl.node_parent_seat;
        this.ui.node_parent_upUi = ctrl.node_parent_upUi;
        this.ui.prefab_roomInfo = ctrl.prefab_roomInfo;
        this.ui.prefab_background6 = ctrl.prefab_background6;
        this.ui.prefab_background8 = ctrl.prefab_background8;
        this.ui.prefab_tipClock = ctrl.prefab_tipClock;
        this.ui.prefab_BullroomInfo = ctrl.prefab_BullroomInfo;
      };
      View.prototype.initModules = function(cb) {
        this.model.seatCount <= 6 ? this.prefab_backGround = cc.instantiate(this.ui.prefab_background6) : this.prefab_backGround = cc.instantiate(this.ui.prefab_background8);
        this.prefab_backGround.parent = this.ui.node_parent_bg;
        this.prefab_backGround.active = true;
        this.model.initBGState();
        this.updateBackGroundSpriteFrame();
        var curNode = cc.instantiate(this.ui.prefab_BullroomInfo);
        curNode.parent = this.ui.node_parent_bg;
        curNode = cc.instantiate(this.ui.prefab_roomInfo);
        curNode.parent = this.ui.node_parent_bg;
        curNode = cc.instantiate(this.ui.prefab_tipClock);
        curNode.parent = this.ui.node_parent_upUi;
        curNode = cc.instantiate(this.ui.prefab_roomAround);
        curNode.parent = this.ui.node_parent_upUi;
        curNode.zIndex = 1;
        cb();
        cb = null;
      };
      View.prototype.updateBackGroundSpriteFrame = function() {
        var _this = this;
        this.getBGImg(function(frame) {
          _this.prefab_backGround.children[0].getComponent(cc.Sprite).spriteFrame = frame;
          _this.prefab_backGround.children[1].getComponent(cc.Sprite).spriteFrame = frame;
        });
      };
      View.prototype.getBGImg = function(cb) {
        var state = this.model.bgState;
        var bgName6 = "img_6rnn";
        var bgName8 = "img_8rnn";
        var blueStr = 1 == state ? "" : "_blue";
        var curBGName = "";
        curBGName = this.model.seatCount <= 6 ? bgName6 + blueStr : bgName8 + blueStr;
        var url = "Icons/tbnnBGChange/" + curBGName;
        LoaderMgr_1.default.getInstance().loadRes(url, function(assert) {
          cb(new cc.SpriteFrame(assert));
        });
      };
      return View;
    }(BaseView_1.default);
    var TbnnModulesInstallCtrl = function(_super) {
      __extends(TbnnModulesInstallCtrl, _super);
      function TbnnModulesInstallCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.node_parent_bg = null;
        _this.node_parent_seat = null;
        _this.node_parent_upUi = null;
        _this.prefab_background6 = null;
        _this.prefab_background8 = null;
        _this.prefab_roomInfo = null;
        _this.prefab_BullroomInfo = null;
        _this.prefab_tipClock = null;
        _this.prefab_roomAround = null;
        return _this;
      }
      TbnnModulesInstallCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      TbnnModulesInstallCtrl.prototype.defineNetEvents = function() {};
      TbnnModulesInstallCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          setBackGroundSpriteFrame: this.setBackGroundSpriteFrame
        };
        this.g_events[GEventDef_1.default.usersUpdated] = this.usersUpdated;
      };
      TbnnModulesInstallCtrl.prototype.connectUi = function() {};
      TbnnModulesInstallCtrl.prototype.start = function() {
        var _this = this;
        this.view.initModules(function() {
          _this.startGame();
        });
      };
      TbnnModulesInstallCtrl.prototype.usersUpdated = function() {};
      TbnnModulesInstallCtrl.prototype.startGame = function() {
        RoomMgr_1.default.getInstance().enterRoom();
      };
      TbnnModulesInstallCtrl.prototype.setBackGroundSpriteFrame = function() {
        this.model.initBGState();
        this.view.updateBackGroundSpriteFrame();
      };
      __decorate([ property({
        type: cc.Node,
        displayName: "background"
      }) ], TbnnModulesInstallCtrl.prototype, "node_parent_bg", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "seatParent"
      }) ], TbnnModulesInstallCtrl.prototype, "node_parent_seat", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "upUi"
      }) ], TbnnModulesInstallCtrl.prototype, "node_parent_upUi", void 0);
      __decorate([ property({
        type: cc.Prefab,
        displayName: "bgPrefab6"
      }) ], TbnnModulesInstallCtrl.prototype, "prefab_background6", void 0);
      __decorate([ property({
        type: cc.Prefab,
        displayName: "bgPrefab8"
      }) ], TbnnModulesInstallCtrl.prototype, "prefab_background8", void 0);
      __decorate([ property({
        type: cc.Prefab,
        displayName: "roomInfo"
      }) ], TbnnModulesInstallCtrl.prototype, "prefab_roomInfo", void 0);
      __decorate([ property({
        type: cc.Prefab,
        displayName: "BullroomInfo"
      }) ], TbnnModulesInstallCtrl.prototype, "prefab_BullroomInfo", void 0);
      __decorate([ property({
        type: cc.Prefab,
        displayName: "tipClock"
      }) ], TbnnModulesInstallCtrl.prototype, "prefab_tipClock", void 0);
      __decorate([ property({
        type: cc.Prefab,
        displayName: "roomAround"
      }) ], TbnnModulesInstallCtrl.prototype, "prefab_roomAround", void 0);
      TbnnModulesInstallCtrl = __decorate([ ccclass ], TbnnModulesInstallCtrl);
      return TbnnModulesInstallCtrl;
    }(BaseCtrl_1.default);
    exports.default = TbnnModulesInstallCtrl;
    cc._RF.pop();
  }, {
    "../../../AppStart/AppMgrs/LoaderMgr": "LoaderMgr",
    "../../../Plat/GameMgrs/GEventDef": "GEventDef",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../../../Plat/Libs/LocalStorage": "LocalStorage"
  } ],
  TbnnPlayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2d9a4Py32hBQq8YFfT/MVJC", "TbnnPlayer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TbnnPlayer = function() {
      function TbnnPlayer() {
        this.uid = null;
        this.seatid = null;
        this.logic = null;
        this.uid = null;
        this.seatid = null;
      }
      TbnnPlayer.prototype.init = function(seatid, logic) {
        this.seatid = seatid;
        this.logic = logic;
      };
      return TbnnPlayer;
    }();
    exports.default = TbnnPlayer;
    cc._RF.pop();
  }, {} ],
  TbnnProp: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2bd66T5H3JNdbEGq8NZcdcr", "TbnnProp");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TbnnProp = function() {
      function TbnnProp(customcfg) {
        this.customcfg = null;
        this.defaultcfg = {
          t_niu_0: 1,
          t_niu_1: 1,
          t_niu_2: 1,
          t_niu_3: 1,
          t_niu_4: 1,
          t_niu_5: 1,
          t_niu_6: 1,
          t_niu_7: 2,
          t_niu_8: 2,
          t_niu_9: 3,
          t_niu_10: 4,
          t_niu_12: 5,
          t_niu_13: 5,
          t_niu_14: 6,
          t_niu_15: 6,
          t_niu_17: 5,
          t_niu_18: 8,
          v_cuopaiLimit: 1,
          v_fangfei: 1,
          v_huluNiuLimit: 1,
          v_midEnterLimit: 1,
          v_minChip: 1,
          v_paytype: 1,
          v_roundcount: 1,
          v_seatcount: 1,
          v_shunziNiuLimit: 1,
          v_fullstart: 4,
          v_startModel: 1,
          v_tonghuaNiuLimit: 1,
          v_wanglaiLimit: 1,
          v_wuhuaNiuLimit: 1,
          v_wuxiaoNiuLimit: 1,
          v_zhadanNiuLimit: 1
        };
        this.customcfg = customcfg;
      }
      TbnnProp.prototype.get_t_niu_0 = function() {
        if (null != this.customcfg["t_niu_0"]) return this.customcfg["t_niu_0"];
        return this.defaultcfg["t_niu_0"];
      };
      TbnnProp.prototype.get_t_niu_1 = function() {
        if (null != this.customcfg["t_niu_1"]) return this.customcfg["t_niu_1"];
        return this.defaultcfg["t_niu_1"];
      };
      TbnnProp.prototype.get_t_niu_2 = function() {
        if (null != this.customcfg["t_niu_2"]) return this.customcfg["t_niu_2"];
        return this.defaultcfg["t_niu_2"];
      };
      TbnnProp.prototype.get_t_niu_3 = function() {
        if (null != this.customcfg["t_niu_3"]) return this.customcfg["t_niu_3"];
        return this.defaultcfg["t_niu_3"];
      };
      TbnnProp.prototype.get_t_niu_4 = function() {
        if (null != this.customcfg["t_niu_4"]) return this.customcfg["t_niu_4"];
        return this.defaultcfg["t_niu_4"];
      };
      TbnnProp.prototype.get_t_niu_5 = function() {
        if (null != this.customcfg["t_niu_5"]) return this.customcfg["t_niu_5"];
        return this.defaultcfg["t_niu_5"];
      };
      TbnnProp.prototype.get_t_niu_6 = function() {
        if (null != this.customcfg["t_niu_6"]) return this.customcfg["t_niu_6"];
        return this.defaultcfg["t_niu_6"];
      };
      TbnnProp.prototype.get_t_niu_7 = function() {
        if (null != this.customcfg["t_niu_7"]) return this.customcfg["t_niu_7"];
        return this.defaultcfg["t_niu_7"];
      };
      TbnnProp.prototype.get_t_niu_8 = function() {
        if (null != this.customcfg["t_niu_8"]) return this.customcfg["t_niu_8"];
        return this.defaultcfg["t_niu_8"];
      };
      TbnnProp.prototype.get_t_niu_9 = function() {
        if (null != this.customcfg["t_niu_9"]) return this.customcfg["t_niu_9"];
        return this.defaultcfg["t_niu_9"];
      };
      TbnnProp.prototype.get_t_niu_10 = function() {
        if (null != this.customcfg["t_niu_10"]) return this.customcfg["t_niu_10"];
        return this.defaultcfg["t_niu_10"];
      };
      TbnnProp.prototype.get_t_niu_12 = function() {
        if (null != this.customcfg["t_niu_12"]) return this.customcfg["t_niu_12"];
        return this.defaultcfg["t_niu_12"];
      };
      TbnnProp.prototype.get_t_niu_13 = function() {
        if (null != this.customcfg["t_niu_13"]) return this.customcfg["t_niu_13"];
        return this.defaultcfg["t_niu_13"];
      };
      TbnnProp.prototype.get_t_niu_14 = function() {
        if (null != this.customcfg["t_niu_14"]) return this.customcfg["t_niu_14"];
        return this.defaultcfg["t_niu_14"];
      };
      TbnnProp.prototype.get_t_niu_15 = function() {
        if (null != this.customcfg["t_niu_15"]) return this.customcfg["t_niu_15"];
        return this.defaultcfg["t_niu_15"];
      };
      TbnnProp.prototype.get_t_niu_17 = function() {
        if (null != this.customcfg["t_niu_17"]) return this.customcfg["t_niu_17"];
        return this.defaultcfg["t_niu_17"];
      };
      TbnnProp.prototype.get_t_niu_18 = function() {
        if (null != this.customcfg["t_niu_18"]) return this.customcfg["t_niu_18"];
        return this.defaultcfg["t_niu_18"];
      };
      TbnnProp.prototype.get_v_cuopaiLimit = function() {
        if (null != this.customcfg["v_cuopaiLimit"]) return this.customcfg["v_cuopaiLimit"];
        return this.defaultcfg["v_cuopaiLimit"];
      };
      TbnnProp.prototype.get_v_fangfei = function() {
        if (null != this.customcfg["v_fangfei"]) return this.customcfg["v_fangfei"];
        return this.defaultcfg["v_fangfei"];
      };
      TbnnProp.prototype.get_v_huluNiuLimit = function() {
        if (null != this.customcfg["v_huluNiuLimit"]) return this.customcfg["v_huluNiuLimit"];
        return this.defaultcfg["v_huluNiuLimit"];
      };
      TbnnProp.prototype.get_v_midEnterLimit = function() {
        if (null != this.customcfg["v_midEnterLimit"]) return this.customcfg["v_midEnterLimit"];
        return this.defaultcfg["v_midEnterLimit"];
      };
      TbnnProp.prototype.get_v_minChip = function() {
        if (null != this.customcfg["v_minChip"]) return this.customcfg["v_minChip"];
        return this.defaultcfg["v_minChip"];
      };
      TbnnProp.prototype.get_v_paytype = function() {
        if (null != this.customcfg["v_paytype"]) return this.customcfg["v_paytype"];
        return this.defaultcfg["v_paytype"];
      };
      TbnnProp.prototype.get_v_roundcount = function() {
        if (null != this.customcfg["v_roundcount"]) return this.customcfg["v_roundcount"];
        return this.defaultcfg["v_roundcount"];
      };
      TbnnProp.prototype.get_v_seatcount = function() {
        if (null != this.customcfg["v_seatcount"]) return this.customcfg["v_seatcount"];
        return this.defaultcfg["v_seatcount"];
      };
      TbnnProp.prototype.get_v_shunziNiuLimit = function() {
        if (null != this.customcfg["v_shunziNiuLimit"]) return this.customcfg["v_shunziNiuLimit"];
        return this.defaultcfg["v_shunziNiuLimit"];
      };
      TbnnProp.prototype.get_v_fullstart = function() {
        if (null != this.customcfg["v_fullstart"]) return this.customcfg["v_fullstart"];
        return this.defaultcfg["v_fullstart"];
      };
      TbnnProp.prototype.get_v_startModel = function() {
        if (null != this.customcfg["v_startModel"]) return this.customcfg["v_startModel"];
        return this.defaultcfg["v_startModel"];
      };
      TbnnProp.prototype.get_v_tonghuaNiuLimit = function() {
        if (null != this.customcfg["v_tonghuaNiuLimit"]) return this.customcfg["v_tonghuaNiuLimit"];
        return this.defaultcfg["v_tonghuaNiuLimit"];
      };
      TbnnProp.prototype.get_v_wanglaiLimit = function() {
        if (null != this.customcfg["v_wanglaiLimit"]) return this.customcfg["v_wanglaiLimit"];
        return this.defaultcfg["v_wanglaiLimit"];
      };
      TbnnProp.prototype.get_v_wuhuaNiuLimit = function() {
        if (null != this.customcfg["v_wuhuaNiuLimit"]) return this.customcfg["v_wuhuaNiuLimit"];
        return this.defaultcfg["v_wuhuaNiuLimit"];
      };
      TbnnProp.prototype.get_v_wuxiaoNiuLimit = function() {
        if (null != this.customcfg["v_wuxiaoNiuLimit"]) return this.customcfg["v_wuxiaoNiuLimit"];
        return this.defaultcfg["v_wuxiaoNiuLimit"];
      };
      TbnnProp.prototype.get_v_zhadanNiuLimit = function() {
        if (null != this.customcfg["v_zhadanNiuLimit"]) return this.customcfg["v_zhadanNiuLimit"];
        return this.defaultcfg["v_zhadanNiuLimit"];
      };
      return TbnnProp;
    }();
    exports.default = TbnnProp;
    cc._RF.pop();
  }, {} ],
  TbnnRecordCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d2b3cAzDWxImY/Q4hyvCOx7", "TbnnRecordCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BunchInfoMgr_1 = require("../../../Plat/GameMgrs/BunchInfoMgr");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CONFIGS = {
      horizontalNum: 4,
      itemOffX: 0,
      itemOffY: 0,
      str_openNode: "_openContentNode",
      str_curRound: "_curRound",
      str_diyIndex: "_diyIndex"
    };
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      Model.prototype.updateInfo = function() {
        var roomRule = RoomMgr_1.default.getInstance().getFangKaCfg();
        this.mamai_kaiguan = roomRule.v_playerbuyLimit;
        var bunchInfo = RoomMgr_1.default.getInstance().getBunchInfo();
        if (bunchInfo) {
          console.log("bunchInfo= ", bunchInfo);
          var leijiInfo = bunchInfo.leiji;
          this.data_meiju = bunchInfo.meiju;
          this.peopleNum = Object.keys(leijiInfo).length;
          this.maxRounds = bunchInfo.meiju.length;
          console.log("peopleNum = ", this.peopleNum);
          console.log("maxRounds= ", this.maxRounds);
        } else cc.error("bullTotalSettle bunchInfo is empty");
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_close: null,
          scrollow_content: null,
          node_content: null,
          prefab_meijuDetail: null,
          prefab_rowContent: null,
          prefab_openContent: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.scrollow_content = ctrl.scrollow_content;
        this.ui.btn_close = ctrl.btn_close;
        this.ui.prefab_rowContent = ctrl.prefab_rowContent;
        this.ui.prefab_openContent = ctrl.prefab_openContent;
        this.ui.prefab_meijuDetail = ctrl.prefab_meijuDetail;
        this.node_content = this.ui.scrollow_content.content;
        this.startPosX = -this.node_content.width / 2;
      };
      View.prototype.updateMeijuContent = function() {
        this.clearContent();
        var allItemNum = this.model.maxRounds;
        this.curShowNum = 0;
        this.curHorizontalNum = 1;
        this.curPrefab = this.ui.prefab_rowContent;
        this.list_clickBtn = [];
        for (var i = 0; i < allItemNum; i++) this.list_clickBtn.push(this.addItem());
        for (var j = 0; j < this.list_clickBtn.length; j++) {
          var playerName = this.list_clickBtn[j].children[1];
          for (var i = this.model.peopleNum; i < playerName.childrenCount; i++) playerName.children[i].active = false;
        }
        ctrl.reconnectUi();
      };
      View.prototype.openItem = function(index) {
        this.isChooseTotal || this.addOpenDetail(index);
      };
      View.prototype.addOpenDetail = function(index) {
        var children = this.node_content.children;
        var itemNode = children[index];
        var downList = [];
        for (var i = 0; i < children.length; i++) children[i].y < itemNode.y && downList.push(children[i]);
        var addItemNode = cc.instantiate(this.ui.prefab_openContent);
        addItemNode.parent = this.node_content;
        addItemNode.position = cc.p(itemNode.x, itemNode.y - itemNode.height / 2 - addItemNode.height / 2);
        var downH = addItemNode.height;
        if (null != addItemNode.children[1].children[1]) if (this.model.mamai_kaiguan) {
          addItemNode.children[1].children[1].active = true;
          addItemNode.children[0].height = 230;
        } else {
          addItemNode.children[1].children[1].active = false;
          addItemNode.children[0].height = 145;
        }
        itemNode[CONFIGS.str_openNode] = addItemNode;
        addItemNode["_curRound"] = index;
        var posConfigs = addItemNode.children[2].children;
        var detailNum = this.model.peopleNum;
        var myLogicSeatId = BunchInfoMgr_1.default.getInstance().getMyLogicSeatId();
        var curId;
        for (var i = 0; i < detailNum; i++) {
          curId = 0 == i ? myLogicSeatId : i == myLogicSeatId ? 0 : i;
          if (!this.model.data_meiju[index][1].handCards[curId]) continue;
          var detailNode = cc.instantiate(this.ui.prefab_meijuDetail);
          detailNode.parent = posConfigs[i];
        }
        for (var i = 0; i < downList.length; i++) downList[i].y -= downH;
        this.resetRankContentSize();
      };
      View.prototype.delOpenDetail = function(targetNode) {
        var children = this.node_content.children;
        var downList = [];
        for (var i = 0; i < children.length; i++) children[i].y < targetNode.y && downList.push(children[i]);
        var delNode = targetNode[CONFIGS.str_openNode];
        var downH = delNode.height;
        this.node_content.removeChild(delNode, true);
        delNode.destroy();
        targetNode[CONFIGS.str_openNode] = null;
        for (var i = 0; i < downList.length; i++) downList[i].y += downH;
        this.resetRankContentSize();
      };
      View.prototype.clearContent = function() {
        var children = this.node_content.children;
        for (var i = 0; i < children.length; i++) children[i].destroy();
        this.node_content.removeAllChildren(true);
        this.curShowNum = 0;
        this.curPrefab = null;
        this.itemWidth = null;
        this.itemHeight = null;
      };
      View.prototype.addItem = function() {
        var curNode = cc.instantiate(this.curPrefab);
        curNode.parent = this.node_content;
        this.initSize(curNode);
        curNode.position = this.getItemPos();
        this.curShowNum += 1;
        this.resetGridContentSize();
        return curNode;
      };
      View.prototype.initSize = function(curNode) {
        if (!this.itemWidth) {
          this.itemWidth = curNode.width;
          this.itemHeight = curNode.height;
        }
      };
      View.prototype.getItemPos = function() {
        var curLineNum, rowNum, posX, posY;
        curLineNum = this.curShowNum % this.curHorizontalNum;
        rowNum = Math.floor(this.curShowNum / this.curHorizontalNum);
        posX = this.startPosX + curLineNum * (this.itemWidth + CONFIGS.itemOffX) + this.itemWidth / 2;
        posY = -rowNum * (this.itemHeight + CONFIGS.itemOffY) - this.itemHeight / 2;
        return cc.p(posX, posY);
      };
      View.prototype.getContentHeight = function() {
        var rowNum = Math.ceil(this.curShowNum / this.curHorizontalNum);
        return rowNum * (this.itemHeight + CONFIGS.itemOffY);
      };
      View.prototype.resetGridContentSize = function() {
        this.node_content.height = this.getContentHeight();
      };
      View.prototype.resetRankContentSize = function() {
        var children = this.node_content.children;
        var curH = 0;
        for (var i = 0; i < children.length; i++) curH += children[i].height;
        this.node_content.height = curH;
      };
      return View;
    }(BaseView_1.default);
    var TbnnRecordCtrl = function(_super) {
      __extends(TbnnRecordCtrl, _super);
      function TbnnRecordCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.btn_close = null;
        _this.scrollow_content = null;
        _this.prefab_rowContent = null;
        _this.prefab_openContent = null;
        _this.prefab_meijuDetail = null;
        return _this;
      }
      TbnnRecordCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.model.updateInfo();
        this.inititems();
      };
      TbnnRecordCtrl.prototype.defineNetEvents = function() {};
      TbnnRecordCtrl.prototype.defineGlobalEvents = function() {};
      TbnnRecordCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_close, this.btn_closecb, "点击退出房间");
      };
      TbnnRecordCtrl.prototype.start = function() {};
      TbnnRecordCtrl.prototype.btn_closecb = function() {
        this.finish();
      };
      TbnnRecordCtrl.prototype.inititems = function() {
        console.log("初始化战绩详情");
        this.view.updateMeijuContent();
      };
      TbnnRecordCtrl.prototype.reconnectUi = function() {
        var curList = this.view.list_clickBtn;
        var curNode;
        for (var i = 0; i < curList.length; i++) {
          curNode = curList[i];
          curNode["_diyIndex"] = i;
          curNode.on(cc.Node.EventType.TOUCH_END, this.clickOpenDetail, this);
        }
      };
      TbnnRecordCtrl.prototype.clickOpenDetail = function(event) {
        var curNode = event.target;
        curNode[CONFIGS.str_openNode] ? this.view.delOpenDetail(curNode) : this.view.openItem(curNode[CONFIGS.str_diyIndex]);
      };
      __decorate([ property({
        tooltip: "关闭",
        type: cc.Node
      }) ], TbnnRecordCtrl.prototype, "btn_close", void 0);
      __decorate([ property({
        tooltip: "关闭",
        type: cc.ScrollView
      }) ], TbnnRecordCtrl.prototype, "scrollow_content", void 0);
      __decorate([ property(cc.Prefab) ], TbnnRecordCtrl.prototype, "prefab_rowContent", void 0);
      __decorate([ property(cc.Prefab) ], TbnnRecordCtrl.prototype, "prefab_openContent", void 0);
      __decorate([ property(cc.Prefab) ], TbnnRecordCtrl.prototype, "prefab_meijuDetail", void 0);
      TbnnRecordCtrl = __decorate([ ccclass ], TbnnRecordCtrl);
      return TbnnRecordCtrl;
    }(BaseCtrl_1.default);
    exports.default = TbnnRecordCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView"
  } ],
  TbnnRoomCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "549b53JYfxHzoGb7fkjHzXC", "TbnnRoomCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var TbnnLogic_1 = require("../BullMgr/TbnnLogic");
    var TbnnConst_1 = require("../BullMgr/TbnnConst");
    var BullPosMgr_1 = require("../../../GameCommon/Bull/BullPosMgr");
    var TbnnAudio_1 = require("../BullMgr/TbnnAudio");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.roomInfo = null;
        _this.roomid = null;
        _this.curRound = null;
        _this.time_startAni = null;
        _this.time_startAni = .5;
        return _this;
      }
      Model.prototype.getSeatCount = function() {
        return RoomMgr_1.default.getInstance().getSeatCount();
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.dict_readyTag = null;
        _this.intervalID = null;
        _this.ui = {
          node_btn_invite: null,
          node_chatPos: null,
          node_seatsConfig: null,
          node_seatParent: null,
          prefab_seat: null,
          node_giveCardPosConfig: null,
          node_btn_prepare: null,
          node_chipValuePos: null,
          node_resultTypePos: null,
          node_btn_sitDown: null,
          node_btn_backHall: null,
          node_btn_checkRecord: null,
          btn_startGame: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_btn_invite = ctrl.node_btn_invite;
        this.ui.node_btn_backHall = ctrl.node_btn_backHall;
        this.ui.node_btn_checkRecord = ctrl.node_btn_checkRecord;
        this.ui.node_chatPos = ctrl.node_chatPos;
        this.ui.node_seatsConfig = ctrl.node_seatsConfig;
        this.ui.node_seatParent = ctrl.node_seatParent;
        this.ui.prefab_seat = ctrl.prefab_seat;
        this.ui.node_btn_prepare = ctrl.node_btn_prepare;
        this.ui.node_giveCardPosConfig = ctrl.node_giveCardPosConfig;
        this.ui.node_chipValuePos = ctrl.node_chipValuePos;
        this.ui.node_resultTypePos = ctrl.node_resultTypePos;
        this.ui.node_btn_sitDown = ctrl.node_btn_sitDown;
        this.ui.btn_startGame = ctrl.btn_startGame;
        BullPosMgr_1.default.getInstance().setSeatConfigs(this.ui.node_seatsConfig);
        BullPosMgr_1.default.getInstance().setGiveCardPosCfg(this.ui.node_giveCardPosConfig);
        BullPosMgr_1.default.getInstance().setChipValuePosCfg(this.ui.node_chipValuePos);
        BullPosMgr_1.default.getInstance().setResultTypePosCfg(this.ui.node_resultTypePos);
        BullPosMgr_1.default.getInstance().setChatPosCfg(this.ui.node_chatPos);
        this.initSeats();
      };
      View.prototype.updateMyPrepared = function() {
        this.ui.node_btn_prepare.active = this.isShowPrepare();
      };
      View.prototype.updateStartBtnShow = function() {
        this.ui.btn_startGame.active = RoomMgr_1.default.getInstance().isShowStartBtn();
        this.btnPos(this.ui.btn_startGame, this.ui.node_btn_invite, this.ui.node_btn_sitDown);
      };
      View.prototype.updateSitdownShow = function() {
        this.ui.node_btn_sitDown.active = this.isShowSitdown();
        this.btnPos(this.ui.btn_startGame, this.ui.node_btn_invite, this.ui.node_btn_sitDown);
      };
      View.prototype.updateInvitingShow = function() {
        this.ui.node_btn_invite.active = this.isShowInvite();
        this.btnPos(this.ui.btn_startGame, this.ui.node_btn_invite, this.ui.node_btn_sitDown);
      };
      View.prototype.updateTotalSettleBtn = function() {
        this.ui.node_btn_backHall.active = true;
        this.ui.node_btn_checkRecord.active = true;
      };
      View.prototype.initSeats = function() {
        var seatCount = this.model.getSeatCount();
        for (var i = 0; i < seatCount; i++) {
          var curNode = cc.instantiate(this.ui.prefab_seat);
          BullPosMgr_1.default.getInstance().setSeatSizeConfig(curNode);
          curNode.parent = this.ui.node_seatParent;
          curNode.position = BullPosMgr_1.default.getInstance().getSeatPos(i);
        }
      };
      View.prototype.isShowPrepare = function() {
        var room = RoomMgr_1.default.getInstance();
        if (room.isFirstRound()) return false;
        if (room.isGameStarted()) return false;
        var myLogicSeatId = room.getMySeatId();
        if (room.preparemap[myLogicSeatId]) return false;
        return true;
      };
      View.prototype.isShowInvite = function() {
        var room = RoomMgr_1.default.getInstance();
        if (room.isRoomFull()) return false;
        if (room.isWather()) return false;
        if (room.isGameStarted()) return false;
        return true;
      };
      View.prototype.isShowSitdown = function() {
        var room = RoomMgr_1.default.getInstance();
        if (!room.isFirstRound()) return false;
        if (room.isGameStarted()) return false;
        var myLogicSeatId = room.getMySeatId();
        if (room.preparemap[myLogicSeatId]) return false;
        return true;
      };
      View.prototype.btnPos = function(btn1, btn2, btn3) {
        var arr = [ btn1, btn2, btn3 ];
        var index = 0;
        var temp = 0;
        for (var i = 0; i < 3; i++) {
          this.saveFirstPos(arr[i]);
          if (arr[i].active) {
            index++;
            temp = i;
          }
        }
        1 == index && (arr[temp].x = 0);
      };
      View.prototype.saveFirstPos = function(curNode) {
        curNode["_isFirstPos"] || (curNode["_isFirstPos"] = curNode.position);
        curNode.position = curNode["_isFirstPos"];
      };
      return View;
    }(BaseView_1.default);
    var TbnnRoomCtrl = function(_super) {
      __extends(TbnnRoomCtrl, _super);
      function TbnnRoomCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.node_seatsConfig = null;
        _this.node_giveCardPosConfig = null;
        _this.node_chipValuePos = null;
        _this.node_chatPos = null;
        _this.node_resultTypePos = null;
        _this.node_seatParent = null;
        _this.prefab_seat = null;
        _this.node_btn_prepare = null;
        _this.node_btn_sitDown = null;
        _this.btn_startGame = null;
        _this.node_btn_backHall = null;
        _this.node_btn_checkRecord = null;
        _this.node_btn_invite = null;
        return _this;
      }
      TbnnRoomCtrl.prototype.onLoad = function() {
        ctrl = this;
        RoomMgr_1.default.getInstance().setGameLibs(TbnnConst_1.default, null, TbnnLogic_1.default, TbnnAudio_1.default, null);
        this.initMvc(Model, View);
        this.isShowCheck = false;
        console.log(RoomMgr_1.default.getInstance().getFangKaCfg());
        console.log(RoomMgr_1.default.getInstance().LogicCls);
      };
      TbnnRoomCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onLeaveRoom: this.onLeaveRoom,
          "room.roomHandler.exitRoom": this.room_roomHandler_exitRoom,
          "http.reqDisbandRoom": this.http_reqDisbandRoom,
          onEnterRoom: this.onOtherEnterRoom
        };
        this.n_events["http.reqSettle"] = this.onReqSettle;
        this.n_events["onPrepare"] = this.onPrepare;
        this.n_events["connector.entryHandler.enterRoom"] = this.onMyEnterRoom;
        this.n_events["onChangeRoomMaster"] = this.onChangeRoomMaster;
        this.n_events[TbnnConst_1.default.clientEvent.onInitRoom_tbnn] = this.onInitRoom_tbnn;
        this.n_events[TbnnConst_1.default.clientEvent.onMidEnter] = this.onMidEnter;
      };
      TbnnRoomCtrl.prototype.defineGlobalEvents = function() {
        this.g_events["usersUpdated"] = this.usersUpdated;
      };
      TbnnRoomCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.node_btn_sitDown, this.node_btn_sitDown_cb, "坐下");
        this.connect(G_UiType.image, this.ui.node_btn_prepare, this.node_btn_prepare_cb, "准备");
        this.connect(G_UiType.image, this.ui.node_btn_checkRecord, this.node_btn_checkRecord_cb, "查看战绩");
        this.connect(G_UiType.image, this.ui.node_btn_backHall, this.node_btn_backHall_cb, "返回大厅");
        this.connect(G_UiType.image, this.ui.btn_startGame, this.btn_startGame_cb, "房主开始游戏");
        this.connect(G_UiType.image, this.ui.node_btn_invite, this.btn_invite_cb, "点击邀请好友");
      };
      TbnnRoomCtrl.prototype.start = function() {
        console.log("TbnnRoomCtrl通比牛牛房卡信息(赢家支付)", RoomMgr_1.default.getInstance().getFangKaCfg());
        this.isIPhoneX() && this.resetDesignResolution(this.node.getComponent(cc.Canvas));
      };
      TbnnRoomCtrl.prototype.onMyEnterRoom = function(msg) {
        console.log("TbnnRoomCtrl自己进入了房间===================", msg);
        var room = RoomMgr_1.default.getInstance();
        this.view.updateInvitingShow();
        this.view.updateStartBtnShow();
        this.view.updateSitdownShow();
        this.view.updateMyPrepared();
        this.updateCheatcheck();
      };
      TbnnRoomCtrl.prototype.onOtherEnterRoom = function() {
        RoomMgr_1.default.getInstance().isFirstRound() && !RoomMgr_1.default.getInstance().isGameStarted() || RoomMgr_1.default.getInstance().reqCheating();
        this.view.updateInvitingShow();
        this.view.updateStartBtnShow();
      };
      TbnnRoomCtrl.prototype.http_reqDisbandRoom = function() {
        TbnnLogic_1.default.getInstance().toPlaza();
      };
      TbnnRoomCtrl.prototype.onLeaveRoom = function() {
        this.view.updateInvitingShow();
        this.view.updateStartBtnShow();
      };
      TbnnRoomCtrl.prototype.onChangeRoomMaster = function(msg) {
        this.view.updateStartBtnShow();
      };
      TbnnRoomCtrl.prototype.room_roomHandler_exitRoom = function() {
        TbnnLogic_1.default.getInstance().toPlaza();
      };
      TbnnRoomCtrl.prototype.onPrepare = function(msg) {
        var mySeatId = RoomMgr_1.default.getInstance().getMySeatId();
        msg.seatid == mySeatId && this.view.updateMyPrepared();
        this.view.updateStartBtnShow();
      };
      TbnnRoomCtrl.prototype.onInitRoom_tbnn = function() {
        if (RoomMgr_1.default.getInstance().isFirstRound()) {
          this.updateCheatcheck();
          this.view.updateSitdownShow();
        }
        this.view.updateInvitingShow();
        this.view.updateStartBtnShow();
      };
      TbnnRoomCtrl.prototype.onReqSettle = function(msg) {
        var _this = this;
        console.log("onReqSettle", msg);
        if (RoomMgr_1.default.getInstance().isBunchFinish()) {
          console.log("进入总结算");
          this.scheduleOnce(function() {
            _this.view.updateTotalSettleBtn();
          }, 2);
        } else {
          this.view.updateMyPrepared();
          this.view.updateInvitingShow();
        }
      };
      TbnnRoomCtrl.prototype.onMidEnter = function() {
        this.view.updateMyPrepared();
        this.view.updateSitdownShow();
        this.view.updateInvitingShow();
        this.updateCheatcheck();
        TbnnLogic_1.default.getInstance().emit_roomIdColorChange();
      };
      TbnnRoomCtrl.prototype.usersUpdated = function() {
        this.view.updateMyPrepared();
      };
      TbnnRoomCtrl.prototype.updateCheatcheck = function() {
        if (!this.isShowCheck && (RoomMgr_1.default.getInstance().isGameStarted() || !RoomMgr_1.default.getInstance().isFirstRound())) {
          this.isShowCheck = true;
          TbnnLogic_1.default.getInstance().openCheatCheck();
        }
      };
      TbnnRoomCtrl.prototype.btn_startGame_cb = function() {
        RoomMgr_1.default.getInstance().isRoomOwner(RoomMgr_1.default.getInstance().getMySeatId()) && RoomMgr_1.default.getInstance().manualStart();
        TbnnAudio_1.default.getInstance().playGameProcessAudio("audio_start", false);
      };
      TbnnRoomCtrl.prototype.node_btn_backHall_cb = function() {
        TbnnLogic_1.default.getInstance().toPlaza();
      };
      TbnnRoomCtrl.prototype.node_btn_checkRecord_cb = function() {
        TbnnLogic_1.default.getInstance().openTotalSettle();
      };
      TbnnRoomCtrl.prototype.node_btn_sitDown_cb = function(btnNode) {
        btnNode.active = false;
        RoomMgr_1.default.getInstance().prepare();
        TbnnAudio_1.default.getInstance().playGameProcessAudio("audio_ready", false);
      };
      TbnnRoomCtrl.prototype.node_btn_prepare_cb = function(btnNode) {
        btnNode.active = false;
        RoomMgr_1.default.getInstance().isBunchFinish() || RoomMgr_1.default.getInstance().nextRound();
        TbnnAudio_1.default.getInstance().playGameProcessAudio("audio_ready", false);
      };
      TbnnRoomCtrl.prototype.btn_invite_cb = function() {
        TbnnLogic_1.default.getInstance().native_invite();
      };
      TbnnRoomCtrl.prototype.onDestroy = function() {
        RoomMgr_1.default.getInstance().destroy();
        clearTimeout(this.timeId);
        _super.prototype.onDestroy.call(this);
      };
      __decorate([ property({
        type: cc.Node,
        displayName: "seatsConfig"
      }) ], TbnnRoomCtrl.prototype, "node_seatsConfig", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "giveCardPosCfg"
      }) ], TbnnRoomCtrl.prototype, "node_giveCardPosConfig", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "chipValuePos"
      }) ], TbnnRoomCtrl.prototype, "node_chipValuePos", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "chatPos"
      }) ], TbnnRoomCtrl.prototype, "node_chatPos", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "resultTypePos"
      }) ], TbnnRoomCtrl.prototype, "node_resultTypePos", void 0);
      __decorate([ property(cc.Node) ], TbnnRoomCtrl.prototype, "node_seatParent", void 0);
      __decorate([ property(cc.Prefab) ], TbnnRoomCtrl.prototype, "prefab_seat", void 0);
      __decorate([ property(cc.Node) ], TbnnRoomCtrl.prototype, "node_btn_prepare", void 0);
      __decorate([ property(cc.Node) ], TbnnRoomCtrl.prototype, "node_btn_sitDown", void 0);
      __decorate([ property(cc.Node) ], TbnnRoomCtrl.prototype, "btn_startGame", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "返回大厅"
      }) ], TbnnRoomCtrl.prototype, "node_btn_backHall", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "查看战绩"
      }) ], TbnnRoomCtrl.prototype, "node_btn_checkRecord", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "邀请好友"
      }) ], TbnnRoomCtrl.prototype, "node_btn_invite", void 0);
      TbnnRoomCtrl = __decorate([ ccclass ], TbnnRoomCtrl);
      return TbnnRoomCtrl;
    }(BaseCtrl_1.default);
    exports.default = TbnnRoomCtrl;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Bull/BullPosMgr": "BullPosMgr",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../BullMgr/TbnnAudio": "TbnnAudio",
    "../BullMgr/TbnnConst": "TbnnConst",
    "../BullMgr/TbnnLogic": "TbnnLogic"
  } ],
  Tbnn_MyCardsCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e33bc1MgfJFJqsiuPSKdALd", "Tbnn_MyCardsCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var TbnnLogic_1 = require("../BullMgr/TbnnLogic");
    var TbnnConst_1 = require("../BullMgr/TbnnConst");
    var GEventDef_1 = require("../../../Plat/GameMgrs/GEventDef");
    var BullCardsMgr_1 = require("../../../GameCommon/Bull/BullCardsMgr");
    var BullPosMgr_1 = require("../../../GameCommon/Bull/BullPosMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var C_cardAttr = "_cardInfo";
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.maxHandlerCardNum = null;
        _this.cardOffRate = null;
        _this.moveStartPos = null;
        _this.touchUpY = null;
        _this.myViewSeatId = null;
        _this.touchUpNum = null;
        _this.maxTouchUpNum = null;
        _this.list_cardsLogicId = null;
        _this.seatCount = null;
        _this.myViewSeatId = 0;
        _this.maxHandlerCardNum = 5;
        _this.cardOffRate = TbnnConst_1.default.config.bigCardOffWRate;
        _this.moveStartPos = cc.p(0, 0);
        _this.touchUpY = 15;
        _this.maxTouchUpNum = 3;
        _this.touchUpNum = 0;
        _this.seatCount = RoomMgr_1.default.getInstance().getSeatCount();
        return _this;
      }
      Model.prototype.resetData = function() {
        this.list_cardsLogicId = null;
        this.touchUpNum = 0;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.list_myCards = null;
        _this.list_hideCards = null;
        _this.num_showCards = null;
        _this.ui = {
          atlas_cards: null,
          node_btn_tanpai: null,
          node_btn_tanpaiTip: null,
          node_btn_cuopai: null,
          node_btn_openCard: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.list_hideCards = [];
        _this.list_myCards = [];
        _this.num_showCards = 0;
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.atlas_cards = ctrl.atlas_cards;
        this.ui.node_btn_tanpai = ctrl.node_btn_tanpai;
        this.ui.node_btn_tanpaiTip = ctrl.node_btn_tanpaiTip;
        this.ui.node_btn_cuopai = ctrl.node_btn_cuopai;
        this.ui.node_btn_openCard = ctrl.node_btn_openCard;
      };
      View.prototype.showCard = function(cardsNum) {
        var i, cardNode;
        for (i = 0; i < this.model.maxHandlerCardNum; i++) {
          cardNode = this.list_myCards[i];
          if (!cardNode) {
            cardNode = BullCardsMgr_1.default.addMyCard();
            this.list_myCards.push(cardNode);
          }
          cardNode.zIndex = i;
          if (cardsNum > 0 && false == cardNode.active) {
            cardsNum -= 1;
            cardNode.active = true;
            cardNode.opacity = 255;
            cardNode.color = cc.Color.WHITE;
            cardNode[C_cardAttr].logicValue = 0;
            cardNode[C_cardAttr].isOpen = false;
            BullCardsMgr_1.default.setCardValue(cardNode);
          }
        }
      };
      View.prototype.giveCards = function(giveNum, isNoEffect) {
        void 0 === isNoEffect && (isNoEffect = false);
        this.showCard(giveNum);
        var flyData = {
          isMyself: true,
          cardsList: this.list_myCards,
          targetPos: this.getGiveTargetPos(0),
          cb: ctrl.onMyGiveCardEnd.bind(ctrl),
          isNoEffect: isNoEffect
        };
        BullCardsMgr_1.default.giveCards(flyData);
      };
      View.prototype.hideAllCards = function() {
        if (this.list_myCards) for (var i = 0; i < this.list_myCards.length; i++) {
          var card = this.list_myCards[i];
          card.stopAllActions();
          card.active = false;
        }
      };
      View.prototype.openAllCards = function(valueList, cb) {
        BullCardsMgr_1.default.openCards(this.list_myCards, valueList, cb);
      };
      View.prototype.exchangeTouchState = function(cardNode) {
        if (cardNode[C_cardAttr].initPosY) {
          cardNode.y = cardNode[C_cardAttr].initPosY;
          cardNode[C_cardAttr].initPosY = null;
          this.model.touchUpNum -= 1;
          this.model.touchUpNum = Math.max(this.model.touchUpNum, 0);
        } else if (this.model.touchUpNum < this.model.maxTouchUpNum) {
          cardNode[C_cardAttr].initPosY = cardNode.y;
          cardNode.y += this.model.touchUpY;
          this.model.touchUpNum += 1;
        }
      };
      View.prototype.coverAllCards = function() {
        BullCardsMgr_1.default.coverCards(this.list_myCards);
      };
      View.prototype.openTouch = function() {
        this.node.on(cc.Node.EventType.TOUCH_START, ctrl.onTouchStart, ctrl);
        this.node.on(cc.Node.EventType.TOUCH_MOVE, ctrl.onTouchMove, ctrl);
        this.node.on(cc.Node.EventType.TOUCH_END, ctrl.onTouchEnd, ctrl);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, ctrl.onTouchCancel, ctrl);
      };
      View.prototype.closeTouch = function() {
        this.node.off(cc.Node.EventType.TOUCH_START, ctrl.onTouchStart, ctrl);
        this.node.off(cc.Node.EventType.TOUCH_MOVE, ctrl.onTouchMove, ctrl);
        this.node.off(cc.Node.EventType.TOUCH_END, ctrl.onTouchEnd, ctrl);
        this.node.off(cc.Node.EventType.TOUCH_CANCEL, ctrl.onTouchCancel, ctrl);
      };
      View.prototype.getGiveTargetPos = function(viewSeatId) {
        return BullPosMgr_1.default.getInstance().getGiveCardPos(viewSeatId);
      };
      View.prototype.setTanpaiBtnShow = function(isShow) {
        this.ui.node_btn_tanpai.active = isShow;
        this.ui.node_btn_tanpaiTip.active = isShow;
      };
      View.prototype.showTiShi = function() {
        var cardsList = this.model.list_cardsLogicId;
        var resultObj = BullCardsMgr_1.default.getCardResult(cardsList);
        ctrl.showTanpai(this.model.myViewSeatId, resultObj, true);
      };
      View.prototype.setCuoPaiBtnShow = function(isShow) {
        TbnnLogic_1.default.getInstance().getIsCuopaiLimit() || (this.ui.node_btn_cuopai.active = isShow);
      };
      View.prototype.setOpenCardBtnShow = function(isShow) {
        this.ui.node_btn_openCard.active = isShow;
      };
      return View;
    }(BaseView_1.default);
    var Tbnn_MyCardsCtrl = function(_super) {
      __extends(Tbnn_MyCardsCtrl, _super);
      function Tbnn_MyCardsCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.model = null;
        _this.view = null;
        _this.list_touchPos = null;
        _this.ctrl_calculate = null;
        _this.atlas_cards = null;
        _this.node_btn_tanpai = null;
        _this.node_btn_tanpaiTip = null;
        _this.node_btn_cuopai = null;
        _this.node_btn_openCard = null;
        return _this;
      }
      Tbnn_MyCardsCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        BullCardsMgr_1.default.initData(this, this.ui.atlas_cards);
      };
      Tbnn_MyCardsCtrl.prototype.defineNetEvents = function() {
        this.n_events = {};
        this.n_events[TbnnConst_1.default.clientEvent.onGiveCards] = this.onStartGive;
        this.n_events[TbnnConst_1.default.clientEvent.onSettle] = this.onSettle_bull;
        this.n_events[TbnnConst_1.default.clientEvent.onTanPai] = this.onTanPai;
        this.n_events[TbnnConst_1.default.clientEvent.onStart] = this.onStart;
        this.n_events[TbnnConst_1.default.clientEvent.onProcess] = this.onProcess;
        this.n_events[TbnnConst_1.default.clientEvent.onSyncData] = this.onSyncData;
        this.n_events["onPrepare"] = this.onPrepare;
        this.n_events["onReEnterRoom"] = this.onReEnterRoom;
        this.n_events["room.roomHandler.nextRound"] = this.onNextRound;
        this.n_events["connector.entryHandler.enterRoom"] = this.onMyEnterRoom;
      };
      Tbnn_MyCardsCtrl.prototype.defineGlobalEvents = function() {
        this.g_events[GEventDef_1.default.bull_cuopaiEnd] = this.onCuopaiEnd;
      };
      Tbnn_MyCardsCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.node_btn_tanpai, this.node_btn_tanpai_cb, "点击摊牌");
        this.connect(G_UiType.image, this.ui.node_btn_tanpaiTip, this.node_btn_tanpaiTip_cb, "点击摊牌提示");
        this.connect(G_UiType.image, this.ui.node_btn_cuopai, this.node_btn_cuopai_cb, "点击搓牌");
        this.connect(G_UiType.image, this.ui.node_btn_openCard, this.node_btn_openCard_cb, "点击翻牌");
      };
      Tbnn_MyCardsCtrl.prototype.start = function() {};
      Tbnn_MyCardsCtrl.prototype.onStart = function() {
        this.view.hideAllCards();
      };
      Tbnn_MyCardsCtrl.prototype.onNextRound = function() {
        this.view.hideAllCards();
      };
      Tbnn_MyCardsCtrl.prototype.onPrepare = function(msg) {
        msg.seatid == RoomMgr_1.default.getInstance().getMySeatId() && this.view.hideAllCards();
      };
      Tbnn_MyCardsCtrl.prototype.onReEnterRoom = function() {
        this.view.closeTouch();
      };
      Tbnn_MyCardsCtrl.prototype.onProcess = function(msg) {
        if (msg.process == TbnnConst_1.default.process.start) {
          this.view.hideAllCards();
          this.model.touchUpNum = 0;
        } else if (msg.process == TbnnConst_1.default.process.settle) {
          this.view.setCuoPaiBtnShow(false);
          this.view.setOpenCardBtnShow(false);
        }
      };
      Tbnn_MyCardsCtrl.prototype.onStartGive = function(msg) {
        console.log("********on my  StartGive* = ", msg);
        this.model.list_cardsLogicId = msg.myCardsList;
        this.view.giveCards(msg.myCardsList.length);
        var time = TbnnConst_1.default.config.cardIntervalTime * TbnnConst_1.default.config.maxGroupCardsNum + TbnnConst_1.default.config.cardMoveTime;
        var peopleNum = Object.keys(RoomMgr_1.default.getInstance().users).length;
        time *= peopleNum;
        var delayAct1 = cc.delayTime(time);
        this.node.runAction(cc.sequence(delayAct1, cc.callFunc(this.onGiveAllCardEnd, this)));
      };
      Tbnn_MyCardsCtrl.prototype.onGiveAllCardEnd = function() {
        console.log("onGiveCardEnd===");
        this.view.setCuoPaiBtnShow(true);
        this.view.setOpenCardBtnShow(true);
        TbnnLogic_1.default.getInstance().emit_giveCardsEnd();
      };
      Tbnn_MyCardsCtrl.prototype.onTanPai = function(msg) {
        console.log("onTanPai=== ", msg);
        if (msg.seatId == RoomMgr_1.default.getInstance().myseatid) {
          this.view.closeTouch();
          if (this.ctrl_calculate) {
            this.ctrl_calculate.finish();
            this.ctrl_calculate = null;
          }
          this.showTanpai(this.model.myViewSeatId, {
            cardIdList: msg.cardLogicIdList,
            resultType: msg.resultType
          });
        }
      };
      Tbnn_MyCardsCtrl.prototype.onSettle_bull = function(msg) {
        console.log("****************onSettle = ", msg);
        var logicId = RoomMgr_1.default.getInstance().getMySeatId();
        var resultObj = msg.dict_notTanPai[logicId];
        if (resultObj) {
          this.showTanpai(this.model.myViewSeatId, resultObj);
          this.view.setTanpaiBtnShow(false);
        }
        this.view.closeTouch();
        if (this.ctrl_calculate) {
          this.ctrl_calculate.finish();
          this.ctrl_calculate = null;
        }
      };
      Tbnn_MyCardsCtrl.prototype.onMyEnterRoom = function(msg) {
        this.node.stopAllActions();
        this.view.hideAllCards();
        if (this.ctrl_calculate) {
          this.ctrl_calculate.finish();
          this.ctrl_calculate = null;
        }
        this.view.setCuoPaiBtnShow(false);
        this.view.setOpenCardBtnShow(false);
        this.view.setTanpaiBtnShow(false);
      };
      Tbnn_MyCardsCtrl.prototype.onSyncData = function(msg) {
        this.model.list_cardsLogicId = msg.myCardsList;
        this.view.giveCards(msg.myCardsList.length, true);
        var resultObj = msg.tanpaiDict[RoomMgr_1.default.getInstance().getMySeatId()];
        var isTanpai = Boolean(resultObj);
        isTanpai && this.showTanpai(this.model.myViewSeatId, resultObj, true);
        this.view.setCuoPaiBtnShow(!isTanpai && !TbnnLogic_1.default.getInstance().getIsCuopaiLimit());
        this.view.setOpenCardBtnShow(!isTanpai);
      };
      Tbnn_MyCardsCtrl.prototype.onCuopaiEnd = function(msg) {
        1 == msg && this.node_btn_openCard_cb();
      };
      Tbnn_MyCardsCtrl.prototype.node_btn_openCard_cb = function() {
        var _this = this;
        this.view.setOpenCardBtnShow(false);
        this.view.setCuoPaiBtnShow(false);
        this.view.openAllCards(this.model.list_cardsLogicId, function() {
          _this.view.openTouch();
          _this.view.setTanpaiBtnShow(true);
        });
      };
      Tbnn_MyCardsCtrl.prototype.node_btn_cuopai_cb = function() {
        var _this = this;
        TbnnLogic_1.default.getInstance().openCuopai(function() {
          TbnnLogic_1.default.getInstance().emit_cuopai(_this.model.list_cardsLogicId);
        });
      };
      Tbnn_MyCardsCtrl.prototype.node_btn_tanpai_cb = function(curNode) {
        console.log("node_btn_tanpai_cb===");
        this.view.setTanpaiBtnShow(false);
        TbnnLogic_1.default.getInstance().sendTanpai();
      };
      Tbnn_MyCardsCtrl.prototype.node_btn_tanpaiTip_cb = function(curNode) {
        console.log("点击摊牌提示");
        this.view.showTiShi();
      };
      Tbnn_MyCardsCtrl.prototype.onMyGiveCardEnd = function() {
        console.log("on_giveCardsEnd", this.model.list_cardsLogicId);
      };
      Tbnn_MyCardsCtrl.prototype.onTouchStart = function(event) {
        var pos = event.touch.getLocation();
        this.list_touchPos = [];
        this.list_touchPos.push(pos);
      };
      Tbnn_MyCardsCtrl.prototype.onTouchMove = function(event) {};
      Tbnn_MyCardsCtrl.prototype.onTouchEnd = function(event) {
        var _this = this;
        var cards = this.checkCardsTouch(this.view.list_myCards, this.list_touchPos);
        var i, list_down = [], list_up = [];
        for (i = 0; i < cards.length; i++) {
          var isDown = Boolean(cards[i][C_cardAttr].initPosY);
          isDown ? list_down.push(this._getCardValue(cards[i][C_cardAttr].logicValue)) : list_up.push(this._getCardValue(cards[i][C_cardAttr].logicValue));
        }
        if (cards.length > 0) if (this.ctrl_calculate) {
          this.ctrl_calculate.delValues(list_down);
          this.ctrl_calculate.addValues(list_up);
        } else TbnnLogic_1.default.getInstance().openCalculate(function(ctrl) {
          _this.ctrl_calculate = ctrl;
          _this.ctrl_calculate.delValues(list_down);
          _this.ctrl_calculate.addValues(list_up);
        });
        for (var i_1 = 0; i_1 < cards.length; i_1++) {
          cards[i_1].opacity = 255;
          console.log("click card VALUE= ", BullCardsMgr_1.default.getSixValue(cards[i_1][C_cardAttr].logicValue));
          this.view.exchangeTouchState(cards[i_1]);
        }
        this.list_touchPos = null;
      };
      Tbnn_MyCardsCtrl.prototype.onTouchCancel = function(event) {
        this.list_touchPos = null;
      };
      Tbnn_MyCardsCtrl.prototype.showTanpai = function(viewSeatId, resultObj, refreshResult) {
        this.view.list_myCards || this.view.showCard(5);
        var targetPos = this.view.getGiveTargetPos(viewSeatId);
        refreshResult && TbnnLogic_1.default.getInstance().emit_showResultType({
          resultType: resultObj.resultType,
          seatId: viewSeatId
        });
        BullCardsMgr_1.default.showTanPai(this.view.list_myCards, resultObj.cardIdList, resultObj.resultType);
      };
      Tbnn_MyCardsCtrl.prototype._getCardValue = function(logicValue) {
        var sixValue = BullCardsMgr_1.default.getSixValue(logicValue);
        return sixValue.slice(-1);
      };
      Tbnn_MyCardsCtrl.prototype.checkCardsTouch = function(cardsList, posList) {
        var i, j, cardNode = null, cardRect, winSizeW2 = cc.director.getWinSize().width / 2, winSizeH2 = cc.director.getWinSize().height / 2, curX, curY, list_touchCards = [];
        for (i = 0; i < cardsList.length; i++) {
          cardNode = cardsList[i];
          if (cardNode.active && cardNode[C_cardAttr].isOpen) {
            curX = cardNode.x + winSizeW2 - cardNode.width / 2;
            curY = cardNode.y + winSizeH2 - cardNode.height / 2;
            cardRect = cardNode.zIndex == this.model.maxHandlerCardNum ? cc.rect(curX, curY, cardNode.width, cardNode.height) : cc.rect(curX, curY, this.model.cardOffRate * cardNode.width, cardNode.height);
            for (j = 0; j < posList.length; j++) if (cc.rectContainsPoint(cardRect, posList[j])) {
              cardNode.opacity = 120;
              list_touchCards.push(cardNode);
              break;
            }
          }
        }
        return list_touchCards;
      };
      Tbnn_MyCardsCtrl.prototype.onDestroy = function() {
        this.timeId1 && clearTimeout(this.timeId1);
        BullCardsMgr_1.default.clearData();
        _super.prototype.onDestroy.call(this);
      };
      __decorate([ property({
        type: cc.SpriteAtlas,
        displayName: "cardsAtlas"
      }) ], Tbnn_MyCardsCtrl.prototype, "atlas_cards", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "tanpaiBtn"
      }) ], Tbnn_MyCardsCtrl.prototype, "node_btn_tanpai", void 0);
      __decorate([ property({
        type: cc.Node,
        displayName: "tanpaiTipBtn"
      }) ], Tbnn_MyCardsCtrl.prototype, "node_btn_tanpaiTip", void 0);
      __decorate([ property(cc.Node) ], Tbnn_MyCardsCtrl.prototype, "node_btn_cuopai", void 0);
      __decorate([ property(cc.Node) ], Tbnn_MyCardsCtrl.prototype, "node_btn_openCard", void 0);
      Tbnn_MyCardsCtrl = __decorate([ ccclass ], Tbnn_MyCardsCtrl);
      return Tbnn_MyCardsCtrl;
    }(BaseCtrl_1.default);
    exports.default = Tbnn_MyCardsCtrl;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Bull/BullCardsMgr": "BullCardsMgr",
    "../../../GameCommon/Bull/BullPosMgr": "BullPosMgr",
    "../../../Plat/GameMgrs/GEventDef": "GEventDef",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../BullMgr/TbnnConst": "TbnnConst",
    "../BullMgr/TbnnLogic": "TbnnLogic"
  } ],
  Tbnn_OthersCardsCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "95709J8uE1DBrQakrRLAbhs", "Tbnn_OthersCardsCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var TbnnConst_1 = require("../BullMgr/TbnnConst");
    var TbnnLogic_1 = require("../BullMgr/TbnnLogic");
    var BullCardsMgr_1 = require("../../../GameCommon/Bull/BullCardsMgr");
    var BullPosMgr_1 = require("../../../GameCommon/Bull/BullPosMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var C_cardAttr = "_cardInfo";
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.moveStartPos = null;
        _this.maxHandlerCardNum = null;
        _this.cardOffRate = null;
        _this.lowScaleRate = null;
        _this.curGiveCardsNum = null;
        _this.timeoutId = null;
        _this.moveStartPos = cc.p(0, 0);
        _this.maxHandlerCardNum = 5;
        _this.cardOffRate = TbnnConst_1.default.config.minCardOffWRate;
        _this.lowScaleRate = .5;
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.dict_cards = null;
        _this.ui = {
          atlas_cards: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.dict_cards = {};
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.atlas_cards = ctrl.atlas_cards;
      };
      View.prototype.showCard = function(viewSeatId, cardsNum) {
        this.dict_cards[viewSeatId] || (this.dict_cards[viewSeatId] = []);
        var i, cardNode;
        for (i = 0; i < this.model.maxHandlerCardNum; i++) {
          cardNode = this.dict_cards[viewSeatId][i];
          if (!cardNode) {
            cardNode = BullCardsMgr_1.default.addOtherCard();
            this.dict_cards[viewSeatId][i] = cardNode;
          }
          cardNode.zIndex = i;
          if (cardsNum > 0 && false == cardNode.active) {
            cardsNum -= 1;
            cardNode.active = true;
            cardNode.active = true;
            cardNode.opacity = 255;
            cardNode.color = cc.Color.WHITE;
            cardNode[C_cardAttr].logicValue = 0;
            cardNode[C_cardAttr].isOpen = false;
            BullCardsMgr_1.default.setCardValue(cardNode);
          }
        }
      };
      View.prototype.giveCards = function(viewSeatId, giveNum, isNoEffect) {
        this.showCard(viewSeatId, giveNum);
        var flyData = {
          isMyself: false,
          cardsList: this.dict_cards[viewSeatId],
          targetPos: this.getGiveTargetPos(viewSeatId),
          cb: ctrl.onGiveCardsEnd.bind(ctrl),
          isNoEffect: isNoEffect
        };
        BullCardsMgr_1.default.giveCards(flyData);
      };
      View.prototype.setCardsOnly = function(viewSeatId, resultObj) {
        var giveNum = 5;
        this.showCard(viewSeatId, giveNum);
        var flyData = {
          isMyself: false,
          cardsList: this.dict_cards[viewSeatId],
          targetPos: this.getGiveTargetPos(viewSeatId),
          cb: ctrl.onGiveCardsEnd.bind(ctrl),
          isNoEffect: true
        };
        BullCardsMgr_1.default.giveCards(flyData);
        resultObj && ctrl.showTanpai(viewSeatId, resultObj, true);
      };
      View.prototype.coverAllCards = function(viewSeatId) {
        BullCardsMgr_1.default.coverCards(this.dict_cards[viewSeatId]);
      };
      View.prototype.hideAllCards = function() {
        console.log("这里做了卡牌的清理======");
        if (this.dict_cards) for (var seatId in this.dict_cards) {
          var cardsList = this.dict_cards[seatId];
          for (var i = 0; i < cardsList.length; i++) {
            var card = cardsList[i];
            card.stopAllActions();
            card.active = false;
          }
        }
      };
      View.prototype.getGiveTargetPos = function(viewSeatId) {
        return BullPosMgr_1.default.getInstance().getGiveCardPos(viewSeatId);
      };
      View.prototype.getCardListByViewId = function(viewSeatId) {
        return this.dict_cards[viewSeatId];
      };
      return View;
    }(BaseView_1.default);
    var Tbnn_OthersCardsCtrl = function(_super) {
      __extends(Tbnn_OthersCardsCtrl, _super);
      function Tbnn_OthersCardsCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.model = null;
        _this.view = null;
        _this.list_giveSeatId = null;
        _this.atlas_cards = null;
        return _this;
      }
      Tbnn_OthersCardsCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        BullCardsMgr_1.default.setOtherCardsAtlas(this.ui.atlas_cards);
      };
      Tbnn_OthersCardsCtrl.prototype.defineNetEvents = function() {
        this.n_events = {};
        this.n_events[TbnnConst_1.default.clientEvent.onGiveCards] = this.onStartGive;
        this.n_events[TbnnConst_1.default.clientEvent.onTanPai] = this.onTanPai;
        this.n_events[TbnnConst_1.default.clientEvent.onSettle] = this.onSettle_bull;
        this.n_events[TbnnConst_1.default.clientEvent.onSyncData] = this.onSyncData;
        this.n_events[TbnnConst_1.default.clientEvent.onMidEnter] = this.onMidEnter;
        this.n_events["onPrepare"] = this.onPrepare;
        this.n_events["room.roomHandler.nextRound"] = this.onNextRound;
        this.n_events["connector.entryHandler.enterRoom"] = this.onMyEnterRoom;
        this.n_events["http.reqUsers"] = this.http_reqUsers;
      };
      Tbnn_OthersCardsCtrl.prototype.defineGlobalEvents = function() {};
      Tbnn_OthersCardsCtrl.prototype.connectUi = function() {};
      Tbnn_OthersCardsCtrl.prototype.start = function() {};
      Tbnn_OthersCardsCtrl.prototype.onNextRound = function() {
        this.clearData();
        this.view.hideAllCards();
      };
      Tbnn_OthersCardsCtrl.prototype.onPrepare = function(msg) {
        if (msg.seatid == RoomMgr_1.default.getInstance().getMySeatId()) {
          this.clearData();
          this.view.hideAllCards();
        }
      };
      Tbnn_OthersCardsCtrl.prototype.onStartGive = function(msg) {
        var _this = this;
        console.log("开始给牌=====", msg);
        this.list_roundSeatId = [];
        var validDict = TbnnLogic_1.default.getInstance().getValidSeats();
        console.log(validDict);
        var room = RoomMgr_1.default.getInstance();
        for (var seatId in validDict) seatId != RoomMgr_1.default.getInstance().getMySeatId() && this.list_roundSeatId.push(room.getViewSeatId(seatId));
        this.list_roundSeatId = this.list_roundSeatId.sort(function(a, b) {
          return a < b;
        });
        console.log(this.list_roundSeatId);
        var time = TbnnConst_1.default.config.cardIntervalTime * TbnnConst_1.default.config.maxGroupCardsNum + TbnnConst_1.default.config.cardMoveTime;
        var delayAct1 = cc.delayTime(time);
        this.node.runAction(cc.sequence(delayAct1, cc.callFunc(function() {
          _this.model.curGiveCardsNum = msg.cardNum;
          _this._inGiveRound();
        }, this)));
      };
      Tbnn_OthersCardsCtrl.prototype.onTanPai = function(msg) {
        console.log("onTanPai=== ", msg);
        var id = msg.seatId;
        if (id != RoomMgr_1.default.getInstance().myseatid) {
          var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(id);
          this.showTanpai(viewSeatId, {
            cardIdList: msg.cardLogicIdList,
            resultType: msg.resultType
          });
        }
      };
      Tbnn_OthersCardsCtrl.prototype.onSettle_bull = function(msg) {
        console.log("********others********onSettle = ", msg);
        var myLogicId = RoomMgr_1.default.getInstance().getMySeatId();
        var seatId, resultObj, viewSeatId;
        for (seatId in msg.dict_notTanPai) if (seatId != myLogicId) {
          resultObj = msg.dict_notTanPai[seatId];
          viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(seatId);
          this.showTanpai(viewSeatId, resultObj);
        }
      };
      Tbnn_OthersCardsCtrl.prototype.onMyEnterRoom = function(msg) {
        this.node.stopAllActions();
        this.view.hideAllCards();
      };
      Tbnn_OthersCardsCtrl.prototype.onSyncData = function(msg) {
        if (msg.processType == TbnnConst_1.default.process.giveCards) {
          this.node.stopAllActions();
          var msg_tanpaiDict = msg.tanpaiDict;
          var room = RoomMgr_1.default.getInstance();
          var myLogicId = room.getMySeatId();
          var users = room.users;
          for (var seatId in users) seatId != myLogicId && this.view.giveCards(room.getViewSeatId(seatId), 5, true);
          console.log("其他玩家接收到摊牌=", msg_tanpaiDict, "myLogicId=", myLogicId);
          var resultObj = void 0, viewSeatId = void 0;
          for (var seatId in msg_tanpaiDict) if (seatId != myLogicId) {
            resultObj = msg_tanpaiDict[seatId];
            viewSeatId = room.getViewSeatId(seatId);
            console.log("这里有摊牌的消息viewSeatId= ", viewSeatId, "resultObj=", resultObj);
            this.showTanpai(viewSeatId, resultObj, true);
          }
        }
      };
      Tbnn_OthersCardsCtrl.prototype.http_reqUsers = function() {
        if (this.midEnterInfo) {
          var dictTanpai = this.midEnterInfo.dict_tanPai;
          var idleSeatIdList = this.midEnterInfo.idleSeatIdList;
          var room = RoomMgr_1.default.getInstance();
          var users = room.users;
          for (var seatId in users) {
            if (seatId == room.getMySeatId()) continue;
            this.isHaveKey(idleSeatIdList, seatId) || this.view.setCardsOnly(room.getViewSeatId(seatId), dictTanpai[seatId]);
          }
          this.midEnterInfo = null;
        }
      };
      Tbnn_OthersCardsCtrl.prototype.isHaveKey = function(list, key) {
        for (var i = 0; i < list.length; i++) if (list[i] == key) return true;
        return false;
      };
      Tbnn_OthersCardsCtrl.prototype.onMidEnter = function(msg) {
        this.midEnterInfo = msg;
      };
      Tbnn_OthersCardsCtrl.prototype.onGiveCardsEnd = function() {
        console.log("on_giveCardsEnd");
        this._inGiveRound();
      };
      Tbnn_OthersCardsCtrl.prototype.showTanpai = function(viewSeatId, resultObj, refreshResult) {
        var cardsList = this.view.dict_cards[viewSeatId];
        if (!cardsList) {
          this.view.showCard(viewSeatId, 5);
          cardsList = this.view.getCardListByViewId(viewSeatId);
        }
        var targetPos = this.view.getGiveTargetPos(viewSeatId);
        refreshResult && TbnnLogic_1.default.getInstance().emit_showResultType({
          resultType: resultObj.resultType,
          seatId: viewSeatId
        });
        BullCardsMgr_1.default.showTanPai(cardsList, resultObj.cardIdList, resultObj.resultType);
      };
      Tbnn_OthersCardsCtrl.prototype.clearData = function() {
        clearTimeout(this.model.timeoutId);
      };
      Tbnn_OthersCardsCtrl.prototype._inGiveRound = function() {
        var viewSeatId = this.list_roundSeatId.pop();
        viewSeatId && this.view.giveCards(viewSeatId, this.model.curGiveCardsNum);
      };
      Tbnn_OthersCardsCtrl.prototype.onDestroy = function() {
        clearTimeout(this.model.timeoutId);
        _super.prototype.onDestroy.call(this);
      };
      __decorate([ property({
        type: cc.SpriteAtlas,
        displayName: "cardsAtlas"
      }) ], Tbnn_OthersCardsCtrl.prototype, "atlas_cards", void 0);
      Tbnn_OthersCardsCtrl = __decorate([ ccclass ], Tbnn_OthersCardsCtrl);
      return Tbnn_OthersCardsCtrl;
    }(BaseCtrl_1.default);
    exports.default = Tbnn_OthersCardsCtrl;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Bull/BullCardsMgr": "BullCardsMgr",
    "../../../GameCommon/Bull/BullPosMgr": "BullPosMgr",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../BullMgr/TbnnConst": "TbnnConst",
    "../BullMgr/TbnnLogic": "TbnnLogic"
  } ],
  Tbnn_TopUiCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0447eDj19dHEZs7kVfaIrPP", "Tbnn_TopUiCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.intervalID = null;
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_seats: null,
          node_img_grabAni: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {};
      return View;
    }(BaseView_1.default);
    var Tbnn_TopUiCtrl = function(_super) {
      __extends(Tbnn_TopUiCtrl, _super);
      function Tbnn_TopUiCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        return _this;
      }
      Tbnn_TopUiCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Tbnn_TopUiCtrl.prototype.defineNetEvents = function() {};
      Tbnn_TopUiCtrl.prototype.defineGlobalEvents = function() {};
      Tbnn_TopUiCtrl.prototype.connectUi = function() {};
      Tbnn_TopUiCtrl.prototype.start = function() {};
      Tbnn_TopUiCtrl.prototype.onGrabAniEnd = function() {
        console.log("抢庄动画结束");
      };
      Tbnn_TopUiCtrl.prototype.onDestroy = function() {
        clearInterval(this.model.intervalID);
        _super.prototype.onDestroy.call(this);
      };
      Tbnn_TopUiCtrl = __decorate([ ccclass ], Tbnn_TopUiCtrl);
      return Tbnn_TopUiCtrl;
    }(BaseCtrl_1.default);
    exports.default = Tbnn_TopUiCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView"
  } ],
  Tbnn_chipValueCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "19709yoMchETbnSkgTlhx12", "Tbnn_chipValueCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var TbnnLogic_1 = require("../BullMgr/TbnnLogic");
    var TbnnConst_1 = require("../BullMgr/TbnnConst");
    var GEventDef_1 = require("../../../Plat/GameMgrs/GEventDef");
    var BullPosMgr_1 = require("../../../GameCommon/Bull/BullPosMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var BullConst = null;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.seatsCount = RoomMgr_1.default.getInstance().getSeatCount();
        BullConst = TbnnConst_1.default;
        _this.curLogic = TbnnLogic_1.default.getInstance();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          prefab_oneChip: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.dict_chips = {};
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.prefab_oneChip = ctrl.prefab_oneChip;
        this.curNodeCfg = this.node.getChildByName("seats_" + this.model.seatsCount);
      };
      View.prototype.setSyncChip = function() {
        var room = RoomMgr_1.default.getInstance();
        var users = room.users;
        for (var seatId in users) {
          console.log("显示该座位的凑吗= seatId=", seatId);
          this.showChipOnly(room.getViewSeatId(seatId), this.model.curLogic.getBaseChipValue());
        }
      };
      View.prototype.showChipValue = function(viewSeatId) {
        var curNode = this.dict_chips[viewSeatId];
        curNode && (curNode.active = true);
      };
      View.prototype.showAllChipValue = function() {
        var room = RoomMgr_1.default.getInstance();
        var users = room.users;
        for (var seatId in users) TbnnLogic_1.default.getInstance().getIsWatcher(seatId) || this.setChipValue(room.getViewSeatId(seatId), this.model.curLogic.getBaseChipValue());
      };
      View.prototype.deleteAllChipValue = function() {
        var room = RoomMgr_1.default.getInstance();
        var users = room.users;
        for (var seatId in users) {
          var curNode = this.getOneChip(RoomMgr_1.default.getInstance().getViewSeatId(seatId));
          curNode.active = false;
        }
      };
      View.prototype.showSeatChipValue = function(chipDict) {
        for (var seatId in chipDict) {
          var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(seatId);
          if (void 0 == viewSeatId) continue;
          this.setChipValue(viewSeatId, this.model.curLogic.getBaseChipValue());
        }
      };
      View.prototype.setChipValue = function(viewSeatId, chipValue) {
        var curNode = this.getOneChip(viewSeatId);
        if (curNode) {
          var posMgr = BullPosMgr_1.default.getInstance();
          var startPos = posMgr.getSeatPos(viewSeatId);
          var targetPos = curNode.position;
          var tagStr = "chipValue_" + viewSeatId;
          this.model.curLogic.emit_flyGold(startPos, targetPos, tagStr);
          curNode.children[0].getComponent(cc.Label).string = chipValue + "";
          curNode.active = false;
        }
      };
      View.prototype.getOneChip = function(viewSeatId) {
        var curNode = this.dict_chips[viewSeatId];
        if (!curNode) {
          curNode = cc.instantiate(this.ui.prefab_oneChip);
          curNode.parent = this.node;
          curNode.position = BullPosMgr_1.default.getInstance().getChipPos(viewSeatId);
          this.dict_chips[viewSeatId] = curNode;
        }
        return curNode;
      };
      View.prototype.showChipOnly = function(viewSeatId, chipValue) {
        var curNode = this.getOneChip(viewSeatId);
        if (curNode) {
          var tagStr = "chipValue_" + viewSeatId;
          curNode.children[0].getComponent(cc.Label).string = chipValue + "";
          curNode.active = true;
        }
      };
      return View;
    }(BaseView_1.default);
    var Tbnn_chipValueCtrl = function(_super) {
      __extends(Tbnn_chipValueCtrl, _super);
      function Tbnn_chipValueCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.prefab_oneChip = null;
        return _this;
      }
      Tbnn_chipValueCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Tbnn_chipValueCtrl.prototype.defineNetEvents = function() {
        this.n_events[BullConst.clientEvent.onProcess] = this.onProcess;
        this.n_events[BullConst.clientEvent.onSyncData] = this.onSyncData;
        this.n_events[BullConst.clientEvent.onMidEnter] = this.onMidEnter;
        this.n_events["room.roomHandler.nextRound"] = this.onNextRound;
        this.n_events["connector.entryHandler.enterRoom"] = this.onMyEnterRoom;
        this.n_events["http.reqUsers"] = this.http_reqUsers;
      };
      Tbnn_chipValueCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {};
        this.g_events[GEventDef_1.default.bull_flyGoldEnd] = this.onModules_flyGoldEnd;
      };
      Tbnn_chipValueCtrl.prototype.connectUi = function() {};
      Tbnn_chipValueCtrl.prototype.start = function() {
        console.log("++++ 这里进入start");
      };
      Tbnn_chipValueCtrl.prototype.onMyEnterRoom = function(msg) {
        var room = RoomMgr_1.default.getInstance();
        this.view.deleteAllChipValue();
      };
      Tbnn_chipValueCtrl.prototype.onProcess = function(msg) {
        switch (msg.process) {
         case BullConst.process.start:
          this.view.showAllChipValue();
        }
      };
      Tbnn_chipValueCtrl.prototype.onSyncData = function() {
        this.view.setSyncChip();
      };
      Tbnn_chipValueCtrl.prototype.onMidEnter = function(msg) {
        console.log("++++ 这里进入onMidEnter");
        this.midChipInfo = msg.dict_chipValue;
      };
      Tbnn_chipValueCtrl.prototype.http_reqUsers = function() {
        console.log("++++ 这里进入http_reqUsers");
        if (this.midChipInfo) {
          this.view.showSeatChipValue(this.midChipInfo);
          this.midChipInfo = null;
        }
      };
      Tbnn_chipValueCtrl.prototype.onNextRound = function(msg) {
        this.view.deleteAllChipValue();
      };
      Tbnn_chipValueCtrl.prototype.onModules_flyGoldEnd = function(msg) {
        console.log("金币飞行结束onModules_flyGoldEnd", msg);
        var viewSeatId = msg.split("_")[1];
        this.view.showChipValue(viewSeatId);
      };
      __decorate([ property(cc.Prefab) ], Tbnn_chipValueCtrl.prototype, "prefab_oneChip", void 0);
      Tbnn_chipValueCtrl = __decorate([ ccclass ], Tbnn_chipValueCtrl);
      return Tbnn_chipValueCtrl;
    }(BaseCtrl_1.default);
    exports.default = Tbnn_chipValueCtrl;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Bull/BullPosMgr": "BullPosMgr",
    "../../../Plat/GameMgrs/GEventDef": "GEventDef",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../BullMgr/TbnnConst": "TbnnConst",
    "../BullMgr/TbnnLogic": "TbnnLogic"
  } ],
  Tbnn_goldPoolCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c53dd7z1WZKLJRf8dAzfxXp", "Tbnn_goldPoolCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var TbnnConst_1 = require("../BullMgr/TbnnConst");
    var TbnnLogic_1 = require("../BullMgr/TbnnLogic");
    var GEventDef_1 = require("../../../Plat/GameMgrs/GEventDef");
    var BullPosMgr_1 = require("../../../GameCommon/Bull/BullPosMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.onceFlyNum = null;
        _this.minFlySpeed = null;
        _this.maxFlySpeed = null;
        _this.chipFlyNum = null;
        _this.onceFlyNum = 7;
        _this.minFlySpeed = 50;
        _this.maxFlySpeed = 100;
        _this.flyGoldSpeed = 80;
        _this.chipFlyNum = 8;
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this._list_cache = null;
        _this._list_hideGold = null;
        _this.ui = {
          sprite_goldImg: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this._list_cache = [];
        _this._list_hideGold = [];
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.sprite_goldImg = ctrl.sprite_goldImg;
      };
      View.prototype.flyGold = function(startPos, targetPos, cb, endCb) {
        var golds = this._createGroupGold(this.model.onceFlyNum);
        var flyInfo = {
          groupList: golds,
          startPos: startPos,
          targetPos: targetPos,
          flySpeed: this.model.flyGoldSpeed,
          cb: cb,
          endCb: endCb
        };
        console.log("这里飞行金币startPos= ", flyInfo.startPos, ", targetPos=", flyInfo.targetPos);
        this.flyGroupToTarget(flyInfo);
        return golds;
      };
      View.prototype.flyChips = function(startPos, targetPos, cb, endCb) {
        var golds = this._createGroupGold(this.model.chipFlyNum);
        var flyInfo = {
          groupList: golds,
          startPos: startPos,
          targetPos: targetPos,
          flySpeed: this.model.maxFlySpeed,
          cb: cb,
          endCb: endCb
        };
        this.flyGroupToTarget(flyInfo);
      };
      View.prototype.flyByGolds = function(startPos, targetPos, golds, cb, endCb) {
        var flyInfo = {
          groupList: golds,
          startPos: startPos,
          targetPos: targetPos,
          flySpeed: this.model.flyGoldSpeed,
          cb: cb,
          endCb: endCb
        };
        this.setGroupGoldShow(golds);
        console.log("这里用现成的金币金币startPos= ", flyInfo.startPos, ", targetPos=", flyInfo.targetPos);
        this.flyGroupToTarget(flyInfo);
      };
      View.prototype.getMaxSeatsCount = function() {
        return RoomMgr_1.default.getInstance().getSeatCount();
      };
      View.prototype.getPosByViewSeatId = function(viewSeatId) {
        return BullPosMgr_1.default.getInstance().getSeatPos(viewSeatId);
      };
      View.prototype.hideAll = function() {
        var curNode;
        for (var i = 0; i < this._list_cache.length; i++) {
          curNode = this._list_cache[i];
          curNode.stopAllActions();
          curNode.active && this._hideOneGold(curNode);
        }
      };
      View.prototype.flyGroupToTarget = function(flyInfo) {
        var groupList = flyInfo.groupList, startPos = flyInfo.startPos, targetPos = flyInfo.targetPos, flySpeed = flyInfo.flySpeed, cb = flyInfo.cb, endCb = flyInfo.endCb;
        var i, curNodeNum = groupList.length;
        var _loop_1 = function() {
          var goldNode = groupList[i];
          goldNode.stopAllActions();
          goldNode.position = this_1._getRandomPos(startPos);
          var act1 = cc.moveTo(this_1.getRandomArea(this_1.model.minFlySpeed, flySpeed) / 100, targetPos);
          var act2 = cc.callFunc(function() {
            this._hideOneGold(goldNode);
            curNodeNum -= 1;
            if (curNodeNum < 1 && endCb) {
              endCb();
              endCb = null;
            }
            if (cb) {
              cb();
              cb = null;
            }
          }, this_1);
          goldNode.runAction(cc.sequence(act1, act2));
        };
        var this_1 = this;
        for (i = 0; i < groupList.length; i++) _loop_1();
      };
      View.prototype._createGroupGold = function(num) {
        var i, goldNode, list_golds = [];
        for (i = 0; i < num; i++) {
          goldNode = this._getOneGold();
          list_golds.push(goldNode);
        }
        return list_golds;
      };
      View.prototype._getOneGold = function() {
        var curNode = this._list_hideGold.pop();
        if (!curNode) {
          curNode = new cc.Node();
          curNode.parent = this.node;
          curNode.addComponent(cc.Sprite).spriteFrame = this.ui.sprite_goldImg;
          this._list_cache.push(curNode);
        }
        curNode.active = true;
        return curNode;
      };
      View.prototype._hideOneGold = function(curNode) {
        curNode.active = false;
        this._list_hideGold.push(curNode);
      };
      View.prototype.setGroupGoldShow = function(golds) {
        var curGold;
        for (var i = 0; i < golds.length; i++) {
          curGold = golds[i];
          curGold.active = true;
          this._list_hideGold.splice(this._list_hideGold.indexOf(curGold));
        }
      };
      View.prototype._getRandomPos = function(curPos) {
        var curW = 25, curH = 50;
        var nodeW = this.getRandomArea(0, curW) * (Math.random() > .5 ? 1 : -1), nodeH = this.getRandomArea(0, curH) * (Math.random() > .5 ? 1 : -1);
        return cc.p(curPos.x + nodeW, curPos.y + nodeH);
      };
      View.prototype.getRandomArea = function(downNum, upNum) {
        return parseInt(Math.random() * (upNum - downNum + 1) + downNum);
      };
      return View;
    }(BaseView_1.default);
    var Tbnn_goldPoolCtrl = function(_super) {
      __extends(Tbnn_goldPoolCtrl, _super);
      function Tbnn_goldPoolCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.sprite_goldImg = null;
        return _this;
      }
      Tbnn_goldPoolCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Tbnn_goldPoolCtrl.prototype.defineNetEvents = function() {
        this.n_events[TbnnConst_1.default.clientEvent.onSettle] = this.onSettle_bull;
        this.n_events[TbnnConst_1.default.clientEvent.onSyncData] = this.onSyncData;
      };
      Tbnn_goldPoolCtrl.prototype.defineGlobalEvents = function() {
        this.g_events[GEventDef_1.default.bull_flyGold] = this.onModules_flyGold;
        this.g_events[GEventDef_1.default.usersUpdated] = this.usersUpdated;
      };
      Tbnn_goldPoolCtrl.prototype.connectUi = function() {};
      Tbnn_goldPoolCtrl.prototype.start = function() {};
      Tbnn_goldPoolCtrl.prototype.test = function() {
        this.view.flyGold(cc.p(-522, -278), cc.p(2, -173), null, function() {
          console.log("飞行结最后一个金币落下束，发送消息1");
        });
        this.view.flyGold(cc.p(535, 27), cc.p(303, -75), null, function() {
          console.log("飞行结最后一个金币落下束，发送消息2");
        });
      };
      Tbnn_goldPoolCtrl.prototype.onSettle_bull = function(msg) {
        var _this = this;
        console.log("onSettle_bull金币结算==", msg);
        var winViewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(msg.winSeatId);
        var startPosList = [];
        var room = RoomMgr_1.default.getInstance();
        var posMgr = BullPosMgr_1.default.getInstance();
        for (var seatId in msg.scoreInfo) {
          if (seatId == msg.winSeatId) continue;
          startPosList.push(posMgr.getSeatPos(room.getViewSeatId(seatId)));
        }
        var dataList = [ {
          targetPos: cc.p(0, 0),
          startPosList: startPosList
        }, {
          targetPos: posMgr.getSeatPos(winViewSeatId),
          startPosList: [ cc.p(0, 0) ]
        } ];
        this.flyGolds(dataList, function() {
          _this.playGetGoldEffect(winViewSeatId);
        });
      };
      Tbnn_goldPoolCtrl.prototype.onSyncData = function() {
        this.view.hideAll();
      };
      Tbnn_goldPoolCtrl.prototype.usersUpdated = function() {
        this.view.hideAll();
      };
      Tbnn_goldPoolCtrl.prototype.onModules_flyGold = function(msg) {
        console.log("接收到金币飞行的消息", msg);
        var startPos = msg.startPos;
        var targetPos = msg.targetPos;
        var flyType = msg.flyType;
        var tagStr = msg.tagStr;
        this.view.flyGold(startPos, targetPos, null, function() {
          console.log("飞行结束，发送消息", tagStr);
          TbnnLogic_1.default.getInstance().emit_flyGoldEnd(tagStr);
        });
      };
      Tbnn_goldPoolCtrl.prototype.flyGolds = function(dataList, cb) {
        var _this = this;
        dataList = dataList.concat([]);
        var flyData, showGolds = [];
        var flyFunc = function(curData) {
          var i, j, curStartPos, curGroupNum;
          curGroupNum = curData.startPosList.length;
          for (j = 0; j < curData.startPosList.length; j++) {
            curStartPos = curData.startPosList[j];
            if (0 == dataList.length) _this.view.flyByGolds(curStartPos, curData.targetPos, showGolds, null, function() {
              cb && cb();
            }); else {
              var golds = _this.view.flyGold(curStartPos, curData.targetPos, function() {}, function() {
                curGroupNum -= 1;
                if (curGroupNum < 1) {
                  var newData = dataList.splice(0, 1)[0];
                  newData && flyFunc(newData);
                }
              });
              showGolds = showGolds.concat(golds);
            }
          }
        };
        flyData = dataList.splice(0, 1)[0];
        flyData && flyFunc(flyData);
      };
      Tbnn_goldPoolCtrl.prototype.playGetGoldEffect = function(winLogicId) {
        var _this = this;
        this.dict_anis || (this.dict_anis = {});
        this.dict_anis[winLogicId] ? this.dict_anis[winLogicId].play() : TbnnLogic_1.default.getInstance().openGoldFalsh(function(curPrefab, curNode) {
          _this.dict_anis[winLogicId] = curNode.getComponent(cc.Animation);
          var curPos = _this.view.getPosByViewSeatId(winLogicId);
          var visibleSize = cc.director.getVisibleSize();
          curNode.position = cc.p(curPos.x + visibleSize.width / 2, curPos.y + visibleSize.height / 2);
          _this.dict_anis[winLogicId].play();
        });
      };
      Tbnn_goldPoolCtrl.prototype.chooseChip = function(startSeatId, targetPos, cb) {};
      __decorate([ property({
        type: cc.SpriteFrame,
        displayName: "goldImg"
      }) ], Tbnn_goldPoolCtrl.prototype, "sprite_goldImg", void 0);
      Tbnn_goldPoolCtrl = __decorate([ ccclass ], Tbnn_goldPoolCtrl);
      return Tbnn_goldPoolCtrl;
    }(BaseCtrl_1.default);
    exports.default = Tbnn_goldPoolCtrl;
    cc._RF.pop();
  }, {
    "../../../GameCommon/Bull/BullPosMgr": "BullPosMgr",
    "../../../Plat/GameMgrs/GEventDef": "GEventDef",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../BullMgr/TbnnConst": "TbnnConst",
    "../BullMgr/TbnnLogic": "TbnnLogic"
  } ],
  Tbnn_seatCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8c313zYpbJGz7PE6WGHuXoD", "Tbnn_seatCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var UiMgr_1 = require("../../../Plat/GameMgrs/UiMgr");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var UserMgr_1 = require("../../../Plat/GameMgrs/UserMgr");
    var TbnnLogic_1 = require("../BullMgr/TbnnLogic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var BullConst = null;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.viewSeatId = null;
        _this.logicseatid = null;
        _this.uid = null;
        _this.playerCtrl = null;
        _this.userinfo = null;
        BullConst = RoomMgr_1.default.getInstance().getDef();
        return _this;
      }
      Model.prototype.clear = function() {
        this.uid = null;
        this.logicseatid = null;
        this.userinfo = null;
      };
      Model.prototype.updateLogicId = function() {
        this.logicseatid = RoomMgr_1.default.getInstance().getLogicSeatId(this.viewSeatId);
        this.playerCtrl = TbnnLogic_1.default.getInstance().getPlayerInfo(this.logicseatid);
        this.uid = RoomMgr_1.default.getInstance().users[this.logicseatid];
      };
      Model.prototype.updateUserInfo = function() {
        this.userinfo = UserMgr_1.default.getInstance().getUserById(this.uid);
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_img_head: null,
          lbl_name: null,
          lbl_money: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_img_head = ctrl.node_img_head;
        this.ui.lbl_name = ctrl.lbl_name;
        this.ui.lbl_money = ctrl.lbl_money;
      };
      View.prototype.clear = function() {
        this.resetHead();
        this.updateMoney();
        this._updateName();
      };
      View.prototype.updateUserInfo = function() {
        this._updateHead();
        this.updateMoney();
        this._updateName();
      };
      View.prototype.updateMoney = function() {
        this.model.userinfo ? this.ui.lbl_money.string = this.model.userinfo.coin : this.ui.lbl_money.string = "";
      };
      View.prototype._updateHead = function() {
        this.ui.node_img_head._defaultHead || (this.ui.node_img_head._defaultHead = this.ui.node_img_head.getComponent(cc.Sprite).spriteFrame);
        UiMgr_1.default.getInstance().setUserHead(this.ui.node_img_head, this.model.userinfo.headid, this.model.userinfo.headurl);
      };
      View.prototype._updateName = function() {
        this.model.userinfo ? this.ui.lbl_name.string = this.model.userinfo.nickname : this.ui.lbl_name.string = "";
      };
      View.prototype.resetHead = function() {
        this.ui.node_img_head._defaultHead && (this.ui.node_img_head.getComponent(cc.Sprite).spriteFrame = this.ui.node_img_head._defaultHead);
      };
      return View;
    }(BaseView_1.default);
    var Prefab_bull_SeatCtrl = function(_super) {
      __extends(Prefab_bull_SeatCtrl, _super);
      function Prefab_bull_SeatCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.node_img_head = null;
        _this.lbl_name = null;
        _this.lbl_money = null;
        return _this;
      }
      Prefab_bull_SeatCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.model.viewSeatId = this.node.parent.children.indexOf(this.node);
      };
      Prefab_bull_SeatCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onEnterRoom: this.onEnterRoom,
          onLeaveRoom: this.onLeaveRoom,
          "http.reqRoomUsers": this.http_reqRoomUsers,
          "http.reqUsers": this.http_reqUsers
        };
        this.n_events[BullConst.clientEvent.onProcess] = this.onProcess;
      };
      Prefab_bull_SeatCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          usersUpdated: this.usersUpdated
        };
      };
      Prefab_bull_SeatCtrl.prototype.connectUi = function() {};
      Prefab_bull_SeatCtrl.prototype.start = function() {};
      Prefab_bull_SeatCtrl.prototype.onEnterRoom = function(msg) {
        if (this.model.logicseatid != msg.seatid) return;
        this.model.uid = msg.user;
      };
      Prefab_bull_SeatCtrl.prototype.onLeaveRoom = function(msg) {
        if (this.model.logicseatid == msg.seatid) {
          this.model.clear();
          this.view.clear();
        }
      };
      Prefab_bull_SeatCtrl.prototype.onProcess = function(msg) {
        msg.process == BullConst.process.start || msg.process == BullConst.process.settle;
      };
      Prefab_bull_SeatCtrl.prototype.http_reqRoomUsers = function(msg) {
        console.log("http_reqRoomUsers== ", msg);
        this.model.updateLogicId();
        this.view.clear();
      };
      Prefab_bull_SeatCtrl.prototype.http_reqUsers = function(msg) {
        console.log("http_reqUsers== ", msg);
        if (null == this.model.uid) return;
        this.model.updateUserInfo();
        this.view.updateUserInfo();
        var myViewId = RoomMgr_1.default.getInstance().getViewSeatId(RoomMgr_1.default.getInstance().getMySeatId());
      };
      Prefab_bull_SeatCtrl.prototype.usersUpdated = function() {
        this.model.updateLogicId();
        this.view.clear();
      };
      Prefab_bull_SeatCtrl.prototype.initViewSeatId = function(viewSeatId) {
        this.model.viewSeatId = viewSeatId;
      };
      __decorate([ property({
        type: cc.Node,
        displayName: "headImg"
      }) ], Prefab_bull_SeatCtrl.prototype, "node_img_head", void 0);
      __decorate([ property({
        type: cc.Label,
        displayName: "nameLabel"
      }) ], Prefab_bull_SeatCtrl.prototype, "lbl_name", void 0);
      __decorate([ property({
        type: cc.Label,
        displayName: "moneyLabel"
      }) ], Prefab_bull_SeatCtrl.prototype, "lbl_money", void 0);
      Prefab_bull_SeatCtrl = __decorate([ ccclass ], Prefab_bull_SeatCtrl);
      return Prefab_bull_SeatCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_bull_SeatCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/GameMgrs/UiMgr": "UiMgr",
    "../../../Plat/GameMgrs/UserMgr": "UserMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../BullMgr/TbnnLogic": "TbnnLogic"
  } ],
  Tbnn_settle_openDetailCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "779665rBLFArqhExtXQZSDi", "Tbnn_settle_openDetailCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var BunchInfoMgr_1 = require("../../../Plat/GameMgrs/BunchInfoMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      Model.prototype.updateInfo = function() {
        var bunchInfo = BunchInfoMgr_1.default.getInstance().getBunchInfo();
        var meijuDict = bunchInfo.meiju[this.curRound][1];
        var mySeatId = BunchInfoMgr_1.default.getInstance().getMyLogicSeatId();
        console.log("Tbnn_settle_openDetailCtrl meiju info= ", meijuDict);
        var curSeatId;
        curSeatId = 0 == this.viewIndex ? mySeatId : this.viewIndex == mySeatId ? 0 : this.viewIndex;
        this.curInfo = {};
        this.curInfo.handCards = meijuDict["handCards"][curSeatId];
        this.curInfo.resultType = meijuDict["resultType"][curSeatId];
        this.curInfo.chipValue = meijuDict["chipValue"][curSeatId];
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_pokers: null,
          sprite_result: null,
          lbl_score: null,
          atlas_result: null,
          atlas_cards: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_pokers = ctrl.node_pokers;
        this.ui.sprite_result = ctrl.sprite_result;
        this.ui.lbl_score = ctrl.lbl_score;
        this.ui.atlas_result = ctrl.atlas_result;
        this.ui.atlas_cards = ctrl.atlas_cards;
      };
      View.prototype.updateInfo = function() {
        if (!this.model.curInfo.handCards) return;
        this.setPokerData();
        this.setResult();
        this.setChipValue();
      };
      View.prototype.setPokerData = function() {
        var dataList = this.model.curInfo.handCards;
        var pokers = this.ui.node_pokers.children;
        for (var i = 0; i < dataList.length; i++) pokers[i].getComponent(cc.Sprite).spriteFrame = this.ui.atlas_cards.getSpriteFrame("bull_" + this.getSixValue(dataList[i]));
      };
      View.prototype.setResult = function() {
        var resultValue = this.model.curInfo.resultType;
        this.ui.sprite_result.spriteFrame = this.ui.atlas_result.getSpriteFrame("bull_result_" + resultValue);
      };
      View.prototype.setChipValue = function() {
        var chipValue = this.model.curInfo.chipValue;
        this.ui.lbl_score.string = chipValue;
      };
      View.prototype.getSixValue = function(logicNum) {
        logicNum = parseInt(logicNum);
        var str = logicNum < 14 ? "0x0" : "0x";
        return str + logicNum.toString(16);
      };
      return View;
    }(BaseView_1.default);
    var Tbnn_settle_openDetailCtrl = function(_super) {
      __extends(Tbnn_settle_openDetailCtrl, _super);
      function Tbnn_settle_openDetailCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.node_pokers = null;
        _this.sprite_result = null;
        _this.lbl_score = null;
        _this.atlas_result = null;
        _this.atlas_cards = null;
        return _this;
      }
      Tbnn_settle_openDetailCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.model.viewIndex = this.node.parent.parent.children.indexOf(this.node.parent);
      };
      Tbnn_settle_openDetailCtrl.prototype.defineNetEvents = function() {};
      Tbnn_settle_openDetailCtrl.prototype.defineGlobalEvents = function() {};
      Tbnn_settle_openDetailCtrl.prototype.connectUi = function() {};
      Tbnn_settle_openDetailCtrl.prototype.start = function() {
        this.model.curRound = this.node.parent.parent.parent["_curRound"];
        this.model.updateInfo();
        this.view.updateInfo();
      };
      __decorate([ property(cc.Node) ], Tbnn_settle_openDetailCtrl.prototype, "node_pokers", void 0);
      __decorate([ property(cc.Sprite) ], Tbnn_settle_openDetailCtrl.prototype, "sprite_result", void 0);
      __decorate([ property(cc.Label) ], Tbnn_settle_openDetailCtrl.prototype, "lbl_score", void 0);
      __decorate([ property(cc.SpriteAtlas) ], Tbnn_settle_openDetailCtrl.prototype, "atlas_result", void 0);
      __decorate([ property(cc.SpriteAtlas) ], Tbnn_settle_openDetailCtrl.prototype, "atlas_cards", void 0);
      Tbnn_settle_openDetailCtrl = __decorate([ ccclass ], Tbnn_settle_openDetailCtrl);
      return Tbnn_settle_openDetailCtrl;
    }(BaseCtrl_1.default);
    exports.default = Tbnn_settle_openDetailCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView"
  } ],
  Tbnn_tipClock: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5534fnL+bpLzp7GaemoB2BL", "Tbnn_tipClock");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var TbnnLogic_1 = require("../BullMgr/TbnnLogic");
    var TbnnConst_1 = require("../BullMgr/TbnnConst");
    var RoomMgr_1 = require("../../../Plat/GameMgrs/RoomMgr");
    var GEventDef_1 = require("../../../Plat/GameMgrs/GEventDef");
    var UserMgr_1 = require("../../../Plat/GameMgrs/UserMgr");
    var TbnnAudio_1 = require("../../../Games/Tbnn/BullMgr/TbnnAudio");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var TipStr = {
      idle: "旁观中",
      waitStart: "等待房主%s开始游戏",
      waitChooseChip: "等待玩家下注",
      thinking: "查看手牌:%s",
      waitTanpai: "等待玩家摊牌:%s",
      waitRestart: "等待重新开始",
      waitOtherPrepare: "等待玩家准备"
    };
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      Model.prototype.getCurWaitTime = function() {
        return TbnnLogic_1.default.getInstance().getCurWaitTime();
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          lbl_info: null,
          sprite_bg: null
        };
        _this.node = null;
        _this.intervalID = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.lbl_info = ctrl.lbl_info;
        this.ui.sprite_bg = ctrl.sprite_bg;
      };
      View.prototype.setInfo = function(info) {
        this.node.active = true;
        this.ui.lbl_info.string = info;
        this.ui.sprite_bg.node.width = this.ui.lbl_info.fontSize * (this.ui.lbl_info.string.length + 4);
      };
      View.prototype.startCountDown = function(curStr) {
        void 0 === curStr && (curStr = "%s");
        this.clearCountDown();
        var time = this.model.getCurWaitTime();
        if (time > 0) {
          this.node.active = true;
          this.countDownStr = curStr;
          this.showCountDown(time);
        }
      };
      View.prototype.hideTipInfo = function() {
        this.node.active = false;
      };
      View.prototype.clearCountDown = function() {
        clearInterval(this.intervalID);
        this.intervalID = null;
        this.hideTipInfo();
      };
      View.prototype.showCountDown = function(time) {
        var _this = this;
        var curTime = time;
        this.ui.lbl_info.string = this.formatStr(this.countDownStr, curTime);
        this.intervalID = setInterval(function() {
          if (curTime > 0) {
            curTime -= 1;
            curTime <= 3 && TbnnAudio_1.default.getInstance().playClock("Clock", false);
            _this.ui.lbl_info.string = _this.formatStr(_this.countDownStr, curTime);
          } else _this.clearCountDown();
        }, 1e3);
      };
      View.prototype.formatStr = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
        var t = args, e = t.length;
        if (e < 1) return "";
        var i = /(%d)|(%s)/, n = 1, r = t[0], s = "string" == typeof r && i.test(r);
        if (s) for (var o = /%s/; n < e; ++n) {
          var a = t[n], c = "number" == typeof a ? i : o;
          c.test(r) ? r = r.replace(c, a) : r += " " + a;
        } else if (e > 1) for (;n < e; ++n) r += " " + t[n]; else r = "" + r;
        return r;
      };
      return View;
    }(BaseView_1.default);
    var Tbnn_tipClock = function(_super) {
      __extends(Tbnn_tipClock, _super);
      function Tbnn_tipClock() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.lbl_info = null;
        _this.sprite_bg = null;
        return _this;
      }
      Tbnn_tipClock.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Tbnn_tipClock.prototype.defineNetEvents = function() {
        this.n_events = {};
        this.n_events[TbnnConst_1.default.clientEvent.onProcess] = this.onProcess;
        this.n_events["onPrepare"] = this.onPrepare;
        this.n_events[TbnnConst_1.default.clientEvent.onTanPai] = this.onTanPai;
        this.n_events[TbnnConst_1.default.clientEvent.onSyncData] = this.onSyncData;
        this.n_events[TbnnConst_1.default.clientEvent.onMidEnter] = this.onMidEnter;
        this.n_events["http.reqSettle"] = this.onReqSettle;
        this.n_events["onChangeRoomMaster"] = this.onChangeRoomMaster;
        this.n_events["connector.entryHandler.enterRoom"] = this.onMyEnterRoom;
      };
      Tbnn_tipClock.prototype.defineGlobalEvents = function() {
        this.g_events[GEventDef_1.default.bull_giveCardEnd] = this.onGiveCardEnd;
      };
      Tbnn_tipClock.prototype.connectUi = function() {};
      Tbnn_tipClock.prototype.start = function() {
        this.view.setInfo(TipStr.idle);
      };
      Tbnn_tipClock.prototype.onReqSettle = function(msg) {
        RoomMgr_1.default.getInstance().isBunchFinish() && this.view.hideTipInfo();
      };
      Tbnn_tipClock.prototype.onProcess = function(msg) {
        var _this = this;
        switch (msg.process) {
         case TbnnConst_1.default.process.start:
          if (TbnnLogic_1.default.getInstance().getIsMyWatcher()) return;
          this.view.setInfo(TipStr.waitChooseChip);
          this.waitId = setTimeout(function() {
            _this.view.hideTipInfo();
          }, 300);
          break;

         case TbnnConst_1.default.process.giveCards:
          clearTimeout(this.waitId);
          this.waitId = null;
          break;

         case TbnnConst_1.default.process.settle:
          this.view.clearCountDown();
          this.view.setInfo(TipStr.waitOtherPrepare);
        }
      };
      Tbnn_tipClock.prototype.onChangeRoomMaster = function(msg) {
        if (RoomMgr_1.default.getInstance().isFirstRound()) {
          var curStr = void 0;
          if (RoomMgr_1.default.getInstance().isFirstRound()) {
            var uid = RoomMgr_1.default.getInstance().getRoomOwner();
            curStr = this.view.formatStr(TipStr.waitStart, UserMgr_1.default.getInstance().getUserById(uid).nickname);
          } else curStr = TipStr.waitOtherPrepare;
          this.view.setInfo(curStr);
        }
      };
      Tbnn_tipClock.prototype.onPrepare = function(msg) {
        if (msg.seatid == TbnnLogic_1.default.getInstance().getMyLogicSeatId()) {
          var curStr = void 0;
          var room = RoomMgr_1.default.getInstance();
          if (RoomMgr_1.default.getInstance().isFirstRound()) {
            var preparemap = room.preparemap;
            var isAllPrepare = true;
            for (var seatId in preparemap) if (!preparemap[seatId]) {
              isAllPrepare = false;
              break;
            }
            if (isAllPrepare) {
              var uid = RoomMgr_1.default.getInstance().getRoomOwner();
              curStr = this.view.formatStr(TipStr.waitStart, UserMgr_1.default.getInstance().getUserById(uid).nickname);
            } else curStr = TipStr.waitOtherPrepare;
          } else curStr = TipStr.waitOtherPrepare;
          this.view.setInfo(curStr);
        }
      };
      Tbnn_tipClock.prototype.onTanPai = function(msg) {
        msg.seatId == TbnnLogic_1.default.getInstance().getMyLogicSeatId() && this.view.startCountDown(TipStr.waitTanpai);
      };
      Tbnn_tipClock.prototype.onMyEnterRoom = function(msg) {
        var room = RoomMgr_1.default.getInstance();
        this.view.clearCountDown();
        room.isGameStarted() || this.view.setInfo(TipStr.waitOtherPrepare);
      };
      Tbnn_tipClock.prototype.onSyncData = function(msg) {
        if (msg.processType == TbnnConst_1.default.process.giveCards) {
          var tanpaiInfo = msg.tanpaiDict[RoomMgr_1.default.getInstance().getMySeatId()];
          tanpaiInfo ? this.view.startCountDown(TipStr.waitTanpai) : this.view.startCountDown(TipStr.thinking);
        }
      };
      Tbnn_tipClock.prototype.onMidEnter = function(msg) {
        msg.curProcess == TbnnConst_1.default.process.giveCards && TbnnLogic_1.default.getInstance().getIsMyWatcher() && this.view.setInfo(TipStr.idle);
      };
      Tbnn_tipClock.prototype.onGiveCardEnd = function() {
        this.view.startCountDown(TipStr.thinking);
      };
      Tbnn_tipClock.prototype.onDestroy = function() {
        clearInterval(this.view.intervalID);
        clearTimeout(this.waitId);
        this.view.intervalID = null;
        this.waitId = null;
        _super.prototype.onDestroy.call(this);
      };
      __decorate([ property(cc.Label) ], Tbnn_tipClock.prototype, "lbl_info", void 0);
      __decorate([ property(cc.Sprite) ], Tbnn_tipClock.prototype, "sprite_bg", void 0);
      Tbnn_tipClock = __decorate([ ccclass ], Tbnn_tipClock);
      return Tbnn_tipClock;
    }(BaseCtrl_1.default);
    exports.default = Tbnn_tipClock;
    cc._RF.pop();
  }, {
    "../../../Games/Tbnn/BullMgr/TbnnAudio": "TbnnAudio",
    "../../../Plat/GameMgrs/GEventDef": "GEventDef",
    "../../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../../Plat/GameMgrs/UserMgr": "UserMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView",
    "../BullMgr/TbnnConst": "TbnnConst",
    "../BullMgr/TbnnLogic": "TbnnLogic"
  } ],
  Tbnn_totalSettleCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "eeb4abPmjdKaq7OIDuVVVlL", "Tbnn_totalSettleCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SwitchMgr_1 = require("../../../Plat/GameMgrs/SwitchMgr");
    var BaseModel_1 = require("../../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../../Plat/Libs/BaseCtrl");
    var BunchInfoMgr_1 = require("../../../Plat/GameMgrs/BunchInfoMgr");
    var LoginMgr_1 = require("../../../Plat/GameMgrs/LoginMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CONFIGS = {
      horizontalNum: 4,
      itemOffX: 0,
      itemOffY: 0,
      str_openNode: "_openContentNode",
      str_curRound: "_curRound",
      str_diyIndex: "_diyIndex"
    };
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.shareSwitch = null;
        _this.shareSwitch = SwitchMgr_1.default.getInstance().get_switch_performance_sharing();
        return _this;
      }
      Model.prototype.updateSwitch = function(msg) {
        this.shareSwitch = msg.cfg.switch_performance_sharing;
      };
      Model.prototype.updateInfo = function() {
        var bunchInfo = BunchInfoMgr_1.default.getInstance().getBunchInfo();
        var roomRule = bunchInfo.roomValue;
        this.mamai_kaiguan = roomRule.v_playerbuyLimit;
        if (bunchInfo) {
          console.log("bunchInfo= ", bunchInfo);
          var leijiInfo = bunchInfo.leiji;
          this.data_meiju = bunchInfo.meiju;
          this.peopleNum = 0;
          var userlist = BunchInfoMgr_1.default.getInstance().getMembelist();
          for (var i = 0; i < userlist.length; i++) userlist[i] && (this.peopleNum += 1);
          this.maxRounds = bunchInfo.meiju.length;
          console.log("peopleNum = ", this.peopleNum);
          console.log("maxRounds= ", this.maxRounds);
        } else cc.error("bullTotalSettle bunchInfo is empty");
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_btn_totalChoose: null,
          node_btn_exitRoom: null,
          node_btn_meijuChoose: null,
          node_btn_shared: null,
          scrollow_content: null,
          prefab_meijuDetail: null,
          prefab_openContent: null,
          prefab_playerDetail: null,
          prefab_rowContent: null,
          node_btn_close: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_btn_exitRoom = ctrl.node_btn_exitRoom;
        this.ui.node_btn_totalChoose = ctrl.node_btn_totalChoose;
        this.ui.node_btn_meijuChoose = ctrl.node_btn_meijuChoose;
        this.ui.node_btn_shared = ctrl.node_btn_shared;
        this.ui.scrollow_content = ctrl.scrollow_content;
        this.ui.prefab_playerDetail = ctrl.prefab_playerDetail;
        this.ui.prefab_rowContent = ctrl.prefab_rowContent;
        this.ui.prefab_openContent = ctrl.prefab_openContent;
        this.ui.prefab_meijuDetail = ctrl.prefab_meijuDetail;
        this.ui.node_btn_close = ctrl.node_btn_close;
        this.node_content = this.ui.scrollow_content.content;
        this.startPosX = -this.node_content.width / 2;
        this.showShareBtn();
      };
      View.prototype.chooseTotal = function() {
        if (this.isChooseTotal) return;
        var totalTopNode = this.ui.node_btn_totalChoose.children[1];
        var meijuTopNode = this.ui.node_btn_meijuChoose.children[1];
        totalTopNode.active = true;
        meijuTopNode.active = false;
        this.isChooseTotal = true;
        this.updateTotalContent();
      };
      View.prototype.chooseMeiju = function() {
        if (!this.isChooseTotal) return;
        var totalTopNode = this.ui.node_btn_totalChoose.children[1];
        var meijuTopNode = this.ui.node_btn_meijuChoose.children[1];
        totalTopNode.active = false;
        meijuTopNode.active = true;
        this.isChooseTotal = false;
        this.updateMeijuContent();
      };
      View.prototype.updateTotalContent = function() {
        this.clearContent();
        var allItemNum = this.model.peopleNum;
        this.curShowNum = 0;
        this.curHorizontalNum = 4;
        this.curPrefab = this.ui.prefab_playerDetail;
        for (var i = 0; i < allItemNum; i++) this.addItem();
      };
      View.prototype.updateMeijuContent = function() {
        this.clearContent();
        var allItemNum = this.model.maxRounds;
        this.curShowNum = 0;
        this.curHorizontalNum = 1;
        this.curPrefab = this.ui.prefab_rowContent;
        this.list_clickBtn = [];
        for (var i = 0; i < allItemNum; i++) this.list_clickBtn.push(this.addItem());
        ctrl.reconnectUi();
      };
      View.prototype.openItem = function(index) {
        if (!this.isChooseTotal) {
          console.log("openItem");
          this.addOpenDetail(index);
        }
      };
      View.prototype.clearContent = function() {
        var children = this.node_content.children;
        for (var i = 0; i < children.length; i++) children[i].destroy();
        this.node_content.removeAllChildren(true);
        this.curShowNum = 0;
        this.curPrefab = null;
        this.itemWidth = null;
        this.itemHeight = null;
      };
      View.prototype.delOpenDetail = function(targetNode) {
        var children = this.node_content.children;
        var downList = [];
        for (var i = 0; i < children.length; i++) children[i].y < targetNode.y && downList.push(children[i]);
        var delNode = targetNode[CONFIGS.str_openNode];
        var downH = delNode.height;
        this.node_content.removeChild(delNode, true);
        delNode.destroy();
        targetNode[CONFIGS.str_openNode] = null;
        for (var i = 0; i < downList.length; i++) downList[i].y += downH;
        this.resetRankContentSize();
      };
      View.prototype.setIsPlatShow = function() {
        var isPlat = BunchInfoMgr_1.default.getInstance().getplazzaFlag();
        this.ui.node_btn_exitRoom.active = !isPlat;
        this.ui.node_btn_close.active = isPlat;
        this.ui.node_btn_shared.x = isPlat ? 0 : -267;
      };
      View.prototype.addItem = function() {
        var curNode = cc.instantiate(this.curPrefab);
        curNode.parent = this.node_content;
        this.initSize(curNode);
        curNode.position = this.getItemPos();
        this.curShowNum += 1;
        this.resetGridContentSize();
        return curNode;
      };
      View.prototype.addOpenDetail = function(index) {
        var children = this.node_content.children;
        var itemNode = children[index];
        var downList = [];
        for (var i = 0; i < children.length; i++) children[i].y < itemNode.y && downList.push(children[i]);
        var addItemNode = cc.instantiate(this.ui.prefab_openContent);
        addItemNode.parent = this.node_content;
        addItemNode.position = cc.p(itemNode.x, itemNode.y - itemNode.height / 2 - addItemNode.height / 2);
        var downH = addItemNode.height;
        if (null != addItemNode.children[1].children[1]) if (this.model.mamai_kaiguan) {
          addItemNode.children[1].children[1].active = true;
          addItemNode.children[0].height = 230;
        } else {
          addItemNode.children[1].children[1].active = false;
          addItemNode.children[0].height = 145;
        }
        addItemNode[CONFIGS.str_curRound] = index;
        itemNode[CONFIGS.str_openNode] = addItemNode;
        var posConfigs = addItemNode.children[2].children;
        var detailNum = this.model.peopleNum;
        var myLogicSeatId = BunchInfoMgr_1.default.getInstance().getMyLogicSeatId();
        var curId;
        for (var i = 0; i < detailNum; i++) {
          curId = 0 == i ? myLogicSeatId : i == myLogicSeatId ? 0 : i;
          if (!this.model.data_meiju[index][1].handCards[curId]) continue;
          var detailNode = cc.instantiate(this.ui.prefab_meijuDetail);
          detailNode.parent = posConfigs[i];
          console.log("addOpenDetail 3", posConfigs[i].name);
        }
        for (var i = 0; i < downList.length; i++) downList[i].y -= downH;
        this.resetRankContentSize();
      };
      View.prototype.initSize = function(curNode) {
        if (!this.itemWidth) {
          this.itemWidth = curNode.width;
          this.itemHeight = curNode.height;
        }
      };
      View.prototype.getItemPos = function() {
        var curLineNum, rowNum, posX, posY;
        curLineNum = this.curShowNum % this.curHorizontalNum;
        rowNum = Math.floor(this.curShowNum / this.curHorizontalNum);
        posX = this.startPosX + curLineNum * (this.itemWidth + CONFIGS.itemOffX) + this.itemWidth / 2;
        posY = -rowNum * (this.itemHeight + CONFIGS.itemOffY) - this.itemHeight / 2;
        return cc.p(posX, posY);
      };
      View.prototype.getContentHeight = function() {
        var rowNum = Math.ceil(this.curShowNum / this.curHorizontalNum);
        return rowNum * (this.itemHeight + CONFIGS.itemOffY);
      };
      View.prototype.resetGridContentSize = function() {
        this.node_content.height = this.getContentHeight();
      };
      View.prototype.resetRankContentSize = function() {
        var children = this.node_content.children;
        var curH = 0;
        for (var i = 0; i < children.length; i++) curH += children[i].height;
        this.node_content.height = curH + 50;
      };
      View.prototype.showShareBtn = function() {
        this.ui.node_btn_shared.active = 1 == this.model.shareSwitch;
      };
      return View;
    }(BaseView_1.default);
    var Bull_totalSettleCtrl = function(_super) {
      __extends(Bull_totalSettleCtrl, _super);
      function Bull_totalSettleCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.node_btn_totalChoose = null;
        _this.node_btn_meijuChoose = null;
        _this.node_btn_shared = null;
        _this.node_btn_exitRoom = null;
        _this.node_btn_close = null;
        _this.scrollow_content = null;
        _this.prefab_playerDetail = null;
        _this.prefab_rowContent = null;
        _this.prefab_openContent = null;
        _this.prefab_meijuDetail = null;
        return _this;
      }
      Bull_totalSettleCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Bull_totalSettleCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqGameSwitch": this.http_reqGameSwitch
        };
      };
      Bull_totalSettleCtrl.prototype.defineGlobalEvents = function() {};
      Bull_totalSettleCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.node_btn_exitRoom, this.node_btn_exitRoom_cb, "点击退出房间");
        this.connect(G_UiType.image, this.ui.node_btn_shared, this.node_btn_shared_cb, "点击分享");
        this.connect(G_UiType.image, this.ui.node_btn_meijuChoose, this.node_btn_meijuChoose_cb, "点击每局积分");
        this.connect(G_UiType.image, this.ui.node_btn_totalChoose, this.node_btn_totalChoose_cb, "点击总统计");
        this.connect(G_UiType.image, this.ui.node_btn_close, this.node_btn_close_cb, "点击总统计");
      };
      Bull_totalSettleCtrl.prototype.reconnectUi = function() {
        var curList = this.view.list_clickBtn;
        var curNode;
        for (var i = 0; i < curList.length; i++) {
          curNode = curList[i];
          curNode["_diyIndex"] = i;
          curNode.on(cc.Node.EventType.TOUCH_END, this.clickOpenDetail, this);
        }
      };
      Bull_totalSettleCtrl.prototype.start = function() {
        console.log("初始容器坐标", this.scrollow_content.content.position);
        this.view.setIsPlatShow();
        this.model.updateInfo();
        this.view.chooseTotal();
      };
      Bull_totalSettleCtrl.prototype.http_reqGameSwitch = function(msg) {
        this.model.updateSwitch(msg);
        this.view.showShareBtn();
      };
      Bull_totalSettleCtrl.prototype.node_btn_close_cb = function() {
        BunchInfoMgr_1.default.getInstance().clear();
        this.finish();
      };
      Bull_totalSettleCtrl.prototype.node_btn_exitRoom_cb = function() {
        console.log("click node_btn_exitRoom_cb");
        BunchInfoMgr_1.default.getInstance().clear();
        LoginMgr_1.default.getInstance().disconnectGameSvr();
      };
      Bull_totalSettleCtrl.prototype.node_btn_shared_cb = function() {
        console.log("click node_btn_shared_cb");
        console.log("btn_share_cb");
        this.start_sub_module(G_MODULE.Shared);
      };
      Bull_totalSettleCtrl.prototype.node_btn_meijuChoose_cb = function() {
        console.log("click 点击了每局积分");
        this.view.chooseMeiju();
      };
      Bull_totalSettleCtrl.prototype.node_btn_totalChoose_cb = function() {
        console.log("click 点击了总统计");
        this.view.chooseTotal();
      };
      Bull_totalSettleCtrl.prototype.clickOpenDetail = function(event) {
        var curNode = event.target;
        curNode[CONFIGS.str_openNode] ? this.view.delOpenDetail(curNode) : this.view.openItem(curNode[CONFIGS.str_diyIndex]);
      };
      Bull_totalSettleCtrl.prototype.onDestroy = function() {
        BunchInfoMgr_1.default.getInstance().resetData();
        _super.prototype.onDestroy.call(this);
      };
      __decorate([ property(cc.Node) ], Bull_totalSettleCtrl.prototype, "node_btn_totalChoose", void 0);
      __decorate([ property(cc.Node) ], Bull_totalSettleCtrl.prototype, "node_btn_meijuChoose", void 0);
      __decorate([ property(cc.Node) ], Bull_totalSettleCtrl.prototype, "node_btn_shared", void 0);
      __decorate([ property(cc.Node) ], Bull_totalSettleCtrl.prototype, "node_btn_exitRoom", void 0);
      __decorate([ property(cc.Node) ], Bull_totalSettleCtrl.prototype, "node_btn_close", void 0);
      __decorate([ property(cc.ScrollView) ], Bull_totalSettleCtrl.prototype, "scrollow_content", void 0);
      __decorate([ property(cc.Prefab) ], Bull_totalSettleCtrl.prototype, "prefab_playerDetail", void 0);
      __decorate([ property(cc.Prefab) ], Bull_totalSettleCtrl.prototype, "prefab_rowContent", void 0);
      __decorate([ property(cc.Prefab) ], Bull_totalSettleCtrl.prototype, "prefab_openContent", void 0);
      __decorate([ property(cc.Prefab) ], Bull_totalSettleCtrl.prototype, "prefab_meijuDetail", void 0);
      Bull_totalSettleCtrl = __decorate([ ccclass ], Bull_totalSettleCtrl);
      return Bull_totalSettleCtrl;
    }(BaseCtrl_1.default);
    exports.default = Bull_totalSettleCtrl;
    cc._RF.pop();
  }, {
    "../../../Plat/GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../../Plat/GameMgrs/LoginMgr": "LoginMgr",
    "../../../Plat/GameMgrs/SwitchMgr": "SwitchMgr",
    "../../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../../Plat/Libs/BaseModel": "BaseModel",
    "../../../Plat/Libs/BaseView": "BaseView"
  } ],
  TipsCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "64d5dphJcdKg6+TviVsjW/6", "TipsCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.fontSize = null;
        _this.context = null;
        _this.pos = null;
        _this.contentSize = null;
        _this.delayTime = null;
        _this.fontColor = null;
        _this.font = null;
        _this.startSecond = null;
        _this.model = null;
        var date = new Date();
        _this.startSecond = date.getTime();
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          sprite_bg: null,
          lbl_Context: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.sprite_bg = ctrl.sprite_bg;
        this.ui.lbl_Context = ctrl.lbl_Context;
      };
      View.prototype.showTip = function() {
        this.ui.sprite_bg.node.setPosition(this.model.pos);
        this.ui.lbl_Context.node.color = this.model.fontColor;
        this.ui.lbl_Context.fontSize = this.model.fontSize;
        this.ui.lbl_Context.fontFamily = this.model.font;
        this.ui.lbl_Context.string = this.model.context;
        var size = this.ui.lbl_Context.node.getContentSize();
        var h = this.ui.sprite_bg.node.getContentSize().height;
        this.ui.sprite_bg.node.setContentSize(size.width + 60, h);
      };
      return View;
    }(BaseView_1.default);
    var Prefab_tipsCtrl = function(_super) {
      __extends(Prefab_tipsCtrl, _super);
      function Prefab_tipsCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sprite_bg = null;
        _this.lbl_Context = null;
        return _this;
      }
      Prefab_tipsCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Prefab_tipsCtrl.prototype.defineNetEvents = function() {};
      Prefab_tipsCtrl.prototype.defineGlobalEvents = function() {};
      Prefab_tipsCtrl.prototype.connectUi = function() {};
      Prefab_tipsCtrl.prototype.start = function() {};
      Prefab_tipsCtrl.prototype.update = function(dt) {
        var date = new Date();
        var curSecond = date.getTime();
        if (curSecond - this.model.startSecond > this.model.delayTime) {
          this.model.callback && this.model.callback();
          this.model.startSecond = null;
          this.finish();
        }
      };
      Prefab_tipsCtrl.prototype.showTips = function(context, cb, fontSize, color, pos, font, delayTime, contentSize) {
        this.model.callback = cb;
        this.model.pos = pos;
        this.model.contentSize = contentSize;
        this.model.fontColor = color;
        this.model.fontSize = fontSize;
        this.model.font = font;
        this.model.context = context;
        this.model.delayTime = delayTime;
        this.view.showTip();
      };
      __decorate([ property(cc.Sprite) ], Prefab_tipsCtrl.prototype, "sprite_bg", void 0);
      __decorate([ property(cc.Label) ], Prefab_tipsCtrl.prototype, "lbl_Context", void 0);
      Prefab_tipsCtrl = __decorate([ ccclass ], Prefab_tipsCtrl);
      return Prefab_tipsCtrl;
    }(BaseCtrl_1.default);
    exports.default = Prefab_tipsCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  UiMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a5960k1pFNA2KAFhw/vn4Gp", "UiMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LogMgr_1 = require("./LogMgr");
    var UserMgr_1 = require("./UserMgr");
    var AudioMgr_1 = require("./AudioMgr");
    var G_UiType;
    (function(G_UiType) {
      G_UiType[G_UiType["button"] = 1] = "button";
      G_UiType[G_UiType["image"] = 2] = "image";
      G_UiType[G_UiType["text"] = 3] = "text";
      G_UiType[G_UiType["edit"] = 4] = "edit";
      G_UiType[G_UiType["scroll"] = 5] = "scroll";
      G_UiType[G_UiType["slider"] = 6] = "slider";
      G_UiType[G_UiType["toggle"] = 7] = "toggle";
    })(G_UiType || (G_UiType = {}));
    window["G_UiType"] = G_UiType;
    var CONFIGS = {
      touchLimitTime: .2
    };
    var UiMgr = function() {
      function UiMgr() {
        this._scaleRate = null;
        this.bindMap = {};
        this._scaleRate = .9;
      }
      UiMgr.getInstance = function() {
        this._instance || (this._instance = new UiMgr());
        return this._instance;
      };
      UiMgr.prototype.connect = function(uitpye, node, callback, opname) {
        var __instanceId = node.__instanceId;
        if (this.bindMap[__instanceId]) return;
        this.bindMap[__instanceId] = callback;
        switch (uitpye) {
         case G_UiType.button:
          this.bindButton(node, callback, opname);
          break;

         case G_UiType.image:
          this.bindImage(node, callback, opname);
          break;

         case G_UiType.text:
          this.bindText(node, callback, opname);
          break;

         case G_UiType.edit:
          this.bindEdit(node, callback, opname);
          break;

         case G_UiType.scroll:
          this.bindScroll(node, callback, opname);
          break;

         case G_UiType.slider:
          this.bindSlider(node, callback, opname);
          break;

         case G_UiType.toggle:
          this.bindToggle(node, callback, opname);
        }
      };
      UiMgr.prototype.bindButton = function(node, callback, opname) {
        var clickCallBack = null;
        var startCallBack = null;
        var moveCallBack = null;
        var endCallBack = null;
        var cancelCallBack = null;
        node["_isTouchEnabledEx"] = true;
        if ("function" == typeof callback) {
          clickCallBack = callback;
          node.on(cc.Node.EventType.TOUCH_END, function(event) {
            if (node._isTouchEnabledEx) {
              AudioMgr_1.default.getInstance().play(opname);
              LogMgr_1.default.getInstance().addOpreation(opname);
              console.log('你点击了按钮"' + opname + '"');
              clickCallBack && clickCallBack(event);
              node._isTouchEnabledEx = false;
              setTimeout(function() {
                cc.isValid(node) && (node["_isTouchEnabledEx"] = true);
              }, 1e3 * CONFIGS.touchLimitTime);
            }
          }, this);
        } else if ("object" == typeof callback) {
          startCallBack = callback.startCallBack;
          moveCallBack = callback.moveCallBack;
          endCallBack = callback.endCallBack;
          console.log("callback", callback, opname);
          callback.cancelCallBack && (cancelCallBack = callback.cancelCallBack);
          node.on(cc.Node.EventType.TOUCH_START, function(event) {
            if (node._isTouchEnabledEx) {
              node.color = cc.Color.GRAY;
              startCallBack && startCallBack(event);
            }
          }, this);
          node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
            moveCallBack && moveCallBack(event);
          }, this);
          node.on(cc.Node.EventType.TOUCH_END, function(event) {
            if (node._isTouchEnabledEx) {
              node.color = cc.Color.WHITE;
              endCallBack && endCallBack(event);
              node._isTouchEnabledEx = false;
              setTimeout(function() {
                cc.isValid(node) && (node["_isTouchEnabledEx"] = true);
              }, 1e3 * CONFIGS.touchLimitTime);
            }
          }, this);
          node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
            node.color = cc.Color.WHITE;
            console.log("cancelCallBack", cancelCallBack);
            cancelCallBack && cancelCallBack(event);
          }, this);
        }
      };
      UiMgr.prototype.bindToggle = function(node, callback, opname) {
        node.on("toggle", function(event) {
          AudioMgr_1.default.getInstance().play(opname);
          console.log('你点击了按钮"' + opname + '"');
          LogMgr_1.default.getInstance().addOpreation(opname);
          callback(event);
        }, this);
      };
      UiMgr.prototype.bindSlider = function(node, callback, opname) {
        node.on("slide", function(event) {
          LogMgr_1.default.getInstance().addOpreation(opname);
          callback(event);
        }, this);
      };
      UiMgr.prototype.bindEdit = function(node, callback, opname) {
        node.on("text-changed", function(event) {
          callback("text-changed", event);
        }, this);
        node.on("editing-did-ended", function(event) {
          AudioMgr_1.default.getInstance().play(opname);
          LogMgr_1.default.getInstance().addOpreation(opname);
          console.log('你输入了内容"' + opname + '"');
          console.log("你输入了内容");
          callback("editing-did-ended", event);
        }, this);
      };
      UiMgr.prototype.bindScroll = function(node, callback, opname) {
        node.on(cc.Node.EventType.TOUCH_START, function(event) {});
        node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          callback(node, event);
        }, this);
        node.on(cc.Node.EventType.TOUCH_END, function(event) {
          callback(node, event);
        }, this);
        node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          callback(node, event);
        }, this);
      };
      UiMgr.prototype.bindImage = function(node, callback, opname) {
        var startCallBack = null;
        var moveCallBack = null;
        var endCallBack = null;
        if ("function" == typeof callback) endCallBack = callback; else if ("object" == typeof callback) {
          startCallBack = callback.startCallBack;
          moveCallBack = callback.moveCallBack;
          endCallBack = callback.endCallBack;
        }
        node["_isTouchEnabledEx"] = true;
        node.on(cc.Node.EventType.TOUCH_START, function(event) {
          event.target._isTouchEnabledEx && startCallBack && startCallBack(node, event);
        }, this);
        node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          event.target._isTouchEnabledEx && moveCallBack && moveCallBack(node, event);
        }, this);
        node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {}, this);
        node.on(cc.Node.EventType.TOUCH_END, function(event) {
          LogMgr_1.default.getInstance().addOpreation(opname);
          console.log('你点击了图片"' + opname + '"');
          opname.indexOf("登录") < 0 && AudioMgr_1.default.getInstance().play(opname);
          if (event.target._isTouchEnabledEx) {
            event.target._isTouchEnabledEx = false;
            setTimeout(function() {
              cc.isValid(node) && (node["_isTouchEnabledEx"] = true);
            }, 1e3 * CONFIGS.touchLimitTime);
            endCallBack && endCallBack(node, event);
          }
        }, this);
      };
      UiMgr.prototype.setBtnEnable = function(node, isEnable, isNoGray) {
        isEnable ? node.color = cc.Color.WHITE : isNoGray || (node.color = cc.Color.GRAY);
        node["_isTouchEnabledEx"] = isEnable;
      };
      UiMgr.prototype.setUserHead = function(targetNode, headID, headUrl) {
        var _this = this;
        targetNode instanceof cc.Sprite && (targetNode = targetNode.node);
        headUrl || (headUrl = UserMgr_1.default.getInstance().getHeadPng(headID));
        var myPng = headUrl.split(".");
        var imageType = myPng[myPng.length - 1];
        headUrl = "png" == imageType || "jpg" == imageType ? headUrl : headUrl + "?aa=aa.jpg";
        cc.loader.load(headUrl, function(err, assets) {
          if (err) _this.setDefaultHead(targetNode); else {
            var w = targetNode.width, h = targetNode.height;
            targetNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(assets);
            targetNode.width = w;
            targetNode.height = h;
          }
        });
      };
      UiMgr.prototype.setDefaultHead = function(targetNode) {
        cc.loader.loadRes("Icons/img_rwtx", cc.SpriteFrame, function(err, spriteFrame) {
          var w = targetNode.width, h = targetNode.height;
          targetNode.getComponent(cc.Sprite).spriteFrame = spriteFrame;
          targetNode.width = w;
          targetNode.height = h;
        });
      };
      UiMgr.prototype.bindText = function(node, callback, opname) {
        node["_isTouchEnabledEx"] = true;
        node.on(cc.Node.EventType.TOUCH_END, function(event) {
          LogMgr_1.default.getInstance().addOpreation(opname);
          console.log('你点击了图片"' + opname + '"');
          AudioMgr_1.default.getInstance().play(opname);
          event.target._isTouchEnabledEx && callback && callback(node, event);
        }, this);
      };
      return UiMgr;
    }();
    exports.default = UiMgr;
    cc._RF.pop();
  }, {
    "./AudioMgr": "AudioMgr",
    "./LogMgr": "LogMgr",
    "./UserMgr": "UserMgr"
  } ],
  Up_information: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4dc5ftLVTdIuIl2EeihRq2J", "Up_information");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var UserMgr_1 = require("../../GameMgrs/UserMgr");
    var UiMgr_1 = require("../../GameMgrs/UiMgr");
    var SwitchMgr_1 = require("../../GameMgrs/SwitchMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.myinfo = null;
        _this.isGetReward = null;
        _this.invitationCode = null;
        _this.promotersId = null;
        _this.bingAccount = null;
        _this.luckyDrawSwitch = null;
        _this.myinfo = UserMgr_1.default.getInstance().getMyInfo();
        _this.isGetReward = _this.myinfo.is_get_reward;
        _this.invitationCode = _this.myinfo.invitation_code;
        _this.promotersId = _this.myinfo.promoters_id;
        _this.bingAccount = SwitchMgr_1.default.getInstance().get_switch_bing_account();
        _this.luckyDrawSwitch = SwitchMgr_1.default.getInstance().get_switch_luck_draw();
        return _this;
      }
      Model.prototype.updateMyInfo = function() {
        this.myinfo = UserMgr_1.default.getInstance().getMyInfo();
        this.isGetReward = this.myinfo.is_get_reward;
        this.invitationCode = this.myinfo.invitation_code;
        this.promotersId = this.myinfo.promoters_id;
        this.myinfo.idstatus = this.myinfo.idstatus ? this.myinfo.idstatus : 1;
        console.log("我的数据是", this.myinfo);
      };
      Model.prototype.updateSwitch = function(msg) {
        this.bingAccount = msg.cfg.switch_bing_account;
        this.luckyDrawSwitch = msg.cfg.switch_luck_draw;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          sprite_head: null,
          lab_name: null,
          lab_id: null,
          lab_diamonds: null,
          node_clickBindAgent: null,
          node_clickSafety: null,
          node_clickRealName: null,
          node_clickFirstCharge: null,
          node_luckyDraw: null,
          node_clickHead: null,
          node_clickRightMoney: null
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.node_clickHead = ctrl.node_clickHead;
        this.ui.node_clickRightMoney = ctrl.node_clickRightMoney;
        this.ui.sprite_head = ctrl.sprite_head;
        this.ui.lab_name = ctrl.lab_name;
        this.ui.lab_id = ctrl.lab_id;
        this.ui.lab_diamonds = ctrl.lab_diamonds;
        this.ui.node_clickBindAgent = ctrl.node_clickBindAgent;
        this.ui.node_clickSafety = ctrl.node_clickSafety;
        this.ui.node_clickRealName = ctrl.node_clickRealName;
        this.ui.node_clickFirstCharge = ctrl.node_clickFirstCharge;
        this.ui.node_luckyDraw = ctrl.node_luckyDraw;
        this.ui.node_clickFirstCharge.active = false;
        this.ui.node_clickSafety.active = true;
        this.ui.node_clickBindAgent.active = false;
        this.ui.node_luckyDraw.active = false;
        this.updataIdstatus();
        this.updateAgent();
      };
      View.prototype.updateMyInfo = function() {
        this.updateName();
        this.updateID();
        this.updateDiamonds();
        this.updateHead();
        this.initUserNickName();
        this.updataIdstatus();
        this.updateAgent();
        this.showButton();
      };
      View.prototype.initUserNickName = function() {
        if (1 == this.model.myinfo.plat) {
          this.model.myinfo.nickname = "游客" + this.model.myinfo.nickname;
          this.ui.lab_name.string = this.model.myinfo.nickname.substring(0, 6);
        } else if (2 == this.model.myinfo.plat) {
          this.model.headurl = this.model.myinfo.headurl;
          this.updateHead();
        }
      };
      View.prototype.updateHead = function() {
        UiMgr_1.default.getInstance().setUserHead(this.ui.sprite_head.node, this.model.myinfo.headid, this.model.myinfo.headurl);
      };
      View.prototype.updateName = function() {
        this.ui.lab_name.string = this.model.myinfo.nickname.substring(0, 6);
      };
      View.prototype.updateID = function() {
        this.ui.lab_id.string = "ID:" + this.model.myinfo.logicid;
      };
      View.prototype.updateDiamonds = function() {
        this.ui.lab_diamonds.string = this.model.myinfo.gold;
      };
      View.prototype.updataIdstatus = function() {
        this.ui.node_clickRealName.active = 2 != this.model.myinfo.idstatus;
      };
      View.prototype.updateAgent = function() {
        this.model.updateMyInfo();
        if (this.model.invitationCode && this.model.promotersId) {
          this.ui.node_clickBindAgent.active = false;
          return;
        }
        this.ui.node_clickBindAgent.active = false;
      };
      View.prototype.showButton = function() {
        this.ui.node_luckyDraw.active = 1 == this.model.luckyDrawSwitch;
        if (this.model.myinfo.phone.length > 0) return;
      };
      return View;
    }(BaseView_1.default);
    var NodeTopCtrl = function(_super) {
      __extends(NodeTopCtrl, _super);
      function NodeTopCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.node_clickHead = null;
        _this.node_clickRightMoney = null;
        _this.sprite_head = null;
        _this.lab_name = null;
        _this.lab_id = null;
        _this.lab_diamonds = null;
        _this.node_clickBindAgent = null;
        _this.node_clickSafety = null;
        _this.node_clickRealName = null;
        _this.node_luckyDraw = null;
        _this.node_clickFirstCharge = null;
        return _this;
      }
      NodeTopCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      NodeTopCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqMyInfo": this.http_reqMyInfo,
          "http.reqGetRelief": this.http_reqGetRelief,
          "http.ReqIdCardRegistration": this.http_ReqIdCardRegistration,
          "http.reqGameSwitch": this.http_reqGameSwitch
        };
      };
      NodeTopCtrl.prototype.defineGlobalEvents = function() {};
      NodeTopCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.node_clickHead, this._onclick_head, "点击头像");
        this.connect(G_UiType.button, this.ui.node_clickRightMoney, this._onclick_rightMoney, "点击右边金钱");
        this.connect(G_UiType.button, this.ui.node_clickBindAgent, this._onclick_bindAgent, "点击绑定代理");
        this.connect(G_UiType.button, this.ui.node_clickSafety, this._onclick_safety, "点击安全认证");
        this.connect(G_UiType.button, this.ui.node_clickRealName, this._onclick_realName, "点击实名认证");
        this.connect(G_UiType.button, this.ui.node_clickFirstCharge, this._onclick_firstRecharge, "点击首充按钮");
        this.connect(G_UiType.button, this.ui.node_luckyDraw, this.luckdraw_cb, "点击大转盘抽奖");
      };
      NodeTopCtrl.prototype.start = function() {};
      NodeTopCtrl.prototype.http_reqMyInfo = function(msg) {
        this.model.updateMyInfo();
        this.view.updateMyInfo();
      };
      NodeTopCtrl.prototype.http_reqGetRelief = function(msg) {
        this.model.updateMyInfo();
        this.view.updateMyInfo();
      };
      NodeTopCtrl.prototype.http_reqGameSwitch = function(msg) {
        this.model.updateSwitch(msg);
        this.view.showButton();
      };
      NodeTopCtrl.prototype._onclick_head = function(event) {
        this.start_sub_module(G_MODULE.PlayerDetail);
      };
      NodeTopCtrl.prototype._onclick_rightMoney = function(event) {
        console.log("_onclick_rightMoney");
        this.start_sub_module(G_MODULE.Shop);
      };
      NodeTopCtrl.prototype._onclick_bindAgent = function(event) {
        this.start_sub_module(G_MODULE.Shared);
      };
      NodeTopCtrl.prototype._onclick_safety = function(event) {
        this.start_sub_module(G_MODULE.CustomService);
      };
      NodeTopCtrl.prototype._onclick_realName = function(event) {
        this.start_sub_module(G_MODULE.shimingRenZheng);
      };
      NodeTopCtrl.prototype._onclick_firstRecharge = function(event) {
        this.start_sub_module(G_MODULE.Task, function(uiComp) {
          uiComp.setFirstRecharge();
        }, "Prefab_TaskPanelCtrl");
      };
      NodeTopCtrl.prototype.luckdraw_cb = function() {
        this.start_sub_module(G_MODULE.PlazaSetting);
      };
      NodeTopCtrl.prototype.http_ReqIdCardRegistration = function() {
        this.ui.node_clickRealName.active = false;
      };
      __decorate([ property(cc.Node) ], NodeTopCtrl.prototype, "node_clickHead", void 0);
      __decorate([ property(cc.Node) ], NodeTopCtrl.prototype, "node_clickRightMoney", void 0);
      __decorate([ property(cc.Sprite) ], NodeTopCtrl.prototype, "sprite_head", void 0);
      __decorate([ property(cc.Label) ], NodeTopCtrl.prototype, "lab_name", void 0);
      __decorate([ property(cc.Label) ], NodeTopCtrl.prototype, "lab_id", void 0);
      __decorate([ property(cc.Label) ], NodeTopCtrl.prototype, "lab_diamonds", void 0);
      __decorate([ property(cc.Node) ], NodeTopCtrl.prototype, "node_clickBindAgent", void 0);
      __decorate([ property(cc.Node) ], NodeTopCtrl.prototype, "node_clickSafety", void 0);
      __decorate([ property(cc.Node) ], NodeTopCtrl.prototype, "node_clickRealName", void 0);
      __decorate([ property(cc.Node) ], NodeTopCtrl.prototype, "node_luckyDraw", void 0);
      __decorate([ property(cc.Node) ], NodeTopCtrl.prototype, "node_clickFirstCharge", void 0);
      NodeTopCtrl = __decorate([ ccclass ], NodeTopCtrl);
      return NodeTopCtrl;
    }(BaseCtrl_1.default);
    exports.default = NodeTopCtrl;
    cc._RF.pop();
  }, {
    "../../GameMgrs/SwitchMgr": "SwitchMgr",
    "../../GameMgrs/UiMgr": "UiMgr",
    "../../GameMgrs/UserMgr": "UserMgr",
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  UserDefaultCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2f7aaA1eXFJd5Vu3rzEJTFG", "UserDefaultCfg");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCfg_1 = require("../Libs/BaseCfg");
    var UserDefaultCfg = function(_super) {
      __extends(UserDefaultCfg, _super);
      function UserDefaultCfg() {
        var _this = _super.call(this) || this;
        _this.cfgPath = null;
        _this.defaultCfg = null;
        _this.cfgPath = _this.getFullPath("userdefault");
        return _this;
      }
      UserDefaultCfg.getInstance = function() {
        this._instance || (this._instance = new UserDefaultCfg());
        return this._instance;
      };
      UserDefaultCfg.prototype.loadCb = function(name, data) {
        this.loaded = true;
        this.defaultCfg = data;
        console.log("默认配置=", this.defaultCfg, typeof data);
      };
      UserDefaultCfg.prototype.getVoiceState = function() {
        return this.defaultCfg.voicestate;
      };
      UserDefaultCfg.prototype.load = function() {
        this.loadRes(this.cfgPath, this.loadCb);
      };
      return UserDefaultCfg;
    }(BaseCfg_1.default);
    exports.default = UserDefaultCfg;
    cc._RF.pop();
  }, {
    "../Libs/BaseCfg": "BaseCfg"
  } ],
  UserMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "19cd5WkdEBCyKF35dQuFWZY", "UserMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var LoginMgr_1 = require("./LoginMgr");
    var UserMgr = function(_super) {
      __extends(UserMgr, _super);
      function UserMgr() {
        var _this = _super.call(this) || this;
        _this.myinfo = {};
        _this.users = null;
        _this.routes = null;
        _this.exitHeadurl = null;
        _this.exitNickname = null;
        _this.exitSex = null;
        _this.exitSognature = null;
        _this.uid = null;
        _this.myinfo = {};
        _this.users = {};
        _this.routes = {
          "http.reqMyInfo": _this.http_reqMyInfo,
          "http.reqGetRelief": _this.http_reqGetRelief,
          "http.reqUsers": _this.http_reqUsers,
          onUserInfoChanged: _this.onUserInfoChanged,
          "http.reqRegister": _this.http_reqRegister,
          "http.reqLogin": _this.http_reqLogin,
          "http.reqEditHeadUrl": _this.http_reqEditHeadUrl,
          "http.reqEditNickname": _this.http_reqEditNickname,
          "http.reqEditSex": _this.http_reqEditSex,
          "http.reqEditSignature": _this.http_reqEditSignature,
          "http.ReqIdCardRegistration": _this.http_ReqIdCardRegistration,
          "http.reqFirstRecharge": _this.http_reqFirstRecharge,
          "http.onPlayerChange": _this.onPlayerChange,
          "http.reqBindPhone": _this.http_reqBindPhone
        };
        return _this;
      }
      UserMgr.prototype.http_reqBindPhone = function() {
        this.reqMyInfo();
      };
      UserMgr.prototype.reqEditHeadUrl = function(headurl) {
        this.exitHeadurl = headurl;
        var msg = {
          headurl: headurl
        };
        this.send_msg("http.reqEditHeadUrl", msg);
      };
      UserMgr.prototype.http_reqEditHeadUrl = function(msg) {
        this.myinfo.headurl = this.exitHeadurl;
      };
      UserMgr.prototype.reqEditNickname = function(nickname) {
        this.exitNickname = nickname;
        var msg = {
          nickname: nickname
        };
        this.send_msg("http.reqEditNickname", msg);
      };
      UserMgr.prototype.http_reqEditNickname = function(msg) {
        this.myinfo.nickname = this.exitNickname;
      };
      UserMgr.prototype.reqEditSex = function(sex) {
        this.exitSex = sex;
        var msg = {
          sex: sex
        };
        this.send_msg("http.reqEditSex", msg);
      };
      UserMgr.prototype.http_reqEditSex = function(msg) {
        this.myinfo.sex = this.exitSex;
      };
      UserMgr.prototype.reqEditSignature = function(signStr) {
        this.exitSognature = signStr;
        var msg = {
          sign: signStr
        };
        this.send_msg("http.reqEditSignature", msg);
      };
      UserMgr.prototype.http_reqEditSignature = function(msg) {
        this.myinfo.signature = this.exitSognature;
        this.reqMyInfo();
      };
      UserMgr.prototype.sendGpsInfo = function(msg) {
        this.send_msg("http.reqLocate", msg);
      };
      UserMgr.prototype.getMyInfo = function() {
        return this.myinfo;
      };
      UserMgr.prototype.reqFirstRecharge = function() {
        this.send_msg("http.reqFirstRecharge");
      };
      UserMgr.prototype.http_reqFirstRecharge = function(msg) {
        this.myinfo.isFirstRecharge = msg;
      };
      UserMgr.prototype.http_reqRegister = function(msg) {
        this.uid = msg.uid;
      };
      UserMgr.prototype.http_reqLogin = function(msg) {
        this.uid = msg.uid;
      };
      UserMgr.prototype.onUserInfoChanged = function(msg) {
        this.reqMyInfo();
      };
      UserMgr.prototype.http_reqMyInfo = function(msg) {
        this.myinfo = msg;
      };
      UserMgr.prototype.http_reqGetRelief = function(msg) {
        this.myinfo = msg;
      };
      UserMgr.prototype.onPlayerChange = function(msg) {
        console.log("onPlayerChange", msg);
      };
      UserMgr.prototype.reqGetRelief = function() {
        this.send_msg("http.reqGetRelief");
      };
      UserMgr.prototype.reqMyInfo = function() {
        this.send_msg("http.reqMyInfo");
      };
      UserMgr.prototype.reqSyncUser = function(data) {
        this.send_msg("http.reqSyncUser", data);
      };
      UserMgr.prototype.reqUsers = function(uids) {
        console.log("reqUsers 请求信息=", uids);
        var msg = {
          uids: uids
        };
        console.log("我娃哦哦额哦按非uids=", uids);
        this.send_msg("http.reqUsers", msg);
      };
      UserMgr.prototype.http_reqUsers = function(msg) {
        var value;
        for (var i = 0; i < msg.users.length; i++) {
          value = msg.users[i];
          console.log("http_reqUsers=", value.id, typeof value.id);
          this.users[value.id] = value;
        }
        for (var i in this.users) console.log("ssidddddd=", i, typeof i);
      };
      UserMgr.prototype.ReqIdCardRegistration = function(myData) {
        console.log("aaaaaa", {
          name: myData.name,
          card: myData.card
        });
        this.send_msg("http.ReqIdCardRegistration", {
          name: myData.name,
          card: myData.card
        });
      };
      UserMgr.prototype.http_VerificationCode = function(Data) {
        this.send_msg("http.reqPostPhoneCode", {
          phone: Data.phone
        });
      };
      UserMgr.prototype.http_BingPhone = function(Data) {
        this.send_msg("http.reqBindPhone", {
          phone: Data.phone,
          code: Data.code
        });
      };
      UserMgr.prototype.http_ReqIdCardRegistration = function(msg) {
        console.log(msg);
      };
      UserMgr.prototype.getUserById = function(uid) {
        console.log("this.users=", this.users, typeof uid, uid);
        var user = this.users[uid];
        for (var i in this.users) console.log("id=", i, this.users[i]);
        console.log("返回的用户=", this.users[uid]);
        return this.users[uid];
      };
      UserMgr.prototype.getUid = function() {
        return this.myinfo.id;
      };
      UserMgr.prototype.getHeadPng = function(headid) {
        var webRootUrl = LoginMgr_1.default.getInstance().getWetRootUrl();
        return webRootUrl + "/images/default_" + headid + ".png";
      };
      UserMgr.getInstance = function() {
        this._instance || (this._instance = new UserMgr());
        return this._instance;
      };
      return UserMgr;
    }(BaseMgr_1.default);
    exports.default = UserMgr;
    cc._RF.pop();
  }, {
    "../Libs/BaseMgr": "BaseMgr",
    "./LoginMgr": "LoginMgr"
  } ],
  VerifyMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2ef65pCS7BDtpCcJIgdj1p/", "VerifyMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var RoomMgr_1 = require("./RoomMgr");
    var UserMgr_1 = require("./UserMgr");
    var FrameMgr_1 = require("./FrameMgr");
    var BetMgr_1 = require("./BetMgr");
    var ClubMgr_1 = require("./ClubMgr");
    var LoginMgr_1 = require("./LoginMgr");
    var PlatMgr_1 = require("./PlatMgr");
    var VerifyMgr = function(_super) {
      __extends(VerifyMgr, _super);
      function VerifyMgr() {
        var _this = _super.call(this) || this;
        _this.roomUserInfo = null;
        _this.routes = null;
        _this.autoEnter = true;
        _this.roomUserInfo = null;
        _this.routes = {
          "http.reqMyRoomState": _this.http_reqMyRoomState,
          onGameFinished: _this.onGameFinished
        };
        return _this;
      }
      VerifyMgr.prototype.onGameFinished = function(msg) {
        this.roomUserInfo = null;
      };
      VerifyMgr.prototype.disableAutoEnter = function() {
        this.autoEnter = false;
      };
      VerifyMgr.prototype.http_reqMyRoomState = function(msg) {
        this.roomUserInfo = msg.roomUserInfo;
        console.log("http_reqMyRoomState this.roomUserInfo=", this.roomUserInfo);
        if (this.roomUserInfo && this.roomUserInfo.rid > 0) if (RoomMgr_1.default.getInstance().isInRoom()) PlatMgr_1.default.getInstance().enterGameSvr(); else {
          BetMgr_1.default.getInstance().setGameId(this.roomUserInfo.gameid);
          BetMgr_1.default.getInstance().setBetType(this.roomUserInfo.bettype);
          if (this.autoEnter) {
            console.log("http_reqMyRoomState 开始加载游戏啦啦啦");
            LoginMgr_1.default.getInstance().disconnectDaTing();
            this.autoEnter = false;
          } else this.showRecoverRoom();
        } else {
          this.roomUserInfo = null;
          RoomMgr_1.default.getInstance().isInRoom() && LoginMgr_1.default.getInstance().disconnectGameSvr();
        }
      };
      VerifyMgr.prototype.showRecoverRoom = function() {
        var okcb = function() {
          if (!this.roomUserInfo) {
            FrameMgr_1.default.getInstance().showMsgBox("游戏已解散");
            return;
          }
          LoginMgr_1.default.getInstance().disconnectDaTing();
        };
        FrameMgr_1.default.getInstance().showDialog("你有房间未恢复,点击确定进入!", okcb.bind(this));
      };
      VerifyMgr.prototype.checkUnSettled = function() {
        this.roomUserInfo && this.showRecoverRoom();
        return false;
      };
      VerifyMgr.prototype.checkCoin = function() {
        if (this.checkUnSettled()) return false;
        var myinfo = UserMgr_1.default.getInstance().getMyInfo();
        var jbcCfg = BetMgr_1.default.getInstance().getJbcCfg();
        if (myinfo.coin < jbcCfg.leastcoin) {
          myinfo.relief > 0 ? this.start_sub_module(G_MODULE.ReliefMoney) : this.start_sub_module(G_MODULE.Shop, function(uiComp) {
            uiComp.buyCoin();
          });
          return false;
        }
        return true;
      };
      VerifyMgr.prototype.checkFangKa = function(cost) {
        if (this.checkUnSettled()) return false;
        var myinfo = UserMgr_1.default.getInstance().myinfo;
        if (myinfo.fangka < cost) return false;
        return true;
      };
      VerifyMgr.prototype.checkGold = function(cost) {
        if (this.checkUnSettled()) return false;
        var myGold = UserMgr_1.default.getInstance().myinfo.gold;
        if (myGold < cost) return false;
        return true;
      };
      VerifyMgr.prototype.checkClubGold = function(id, cost) {
        if (this.checkUnSettled()) return false;
        var myGold = ClubMgr_1.default.getInstance().getClubDiamond(id);
        if (myGold < cost) return false;
        return true;
      };
      VerifyMgr.getInstance = function() {
        this._instance || (this._instance = new VerifyMgr());
        return this._instance;
      };
      return VerifyMgr;
    }(BaseMgr_1.default);
    exports.default = VerifyMgr;
    cc._RF.pop();
  }, {
    "../Libs/BaseMgr": "BaseMgr",
    "./BetMgr": "BetMgr",
    "./ClubMgr": "ClubMgr",
    "./FrameMgr": "FrameMgr",
    "./LoginMgr": "LoginMgr",
    "./PlatMgr": "PlatMgr",
    "./RoomMgr": "RoomMgr",
    "./UserMgr": "UserMgr"
  } ],
  VersionMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "44a16fg7lFBZoFV2aO7W8rT", "VersionMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ServerMgr_1 = require("./ServerMgr");
    var ASSETDOWNLOAD_STATE;
    (function(ASSETDOWNLOAD_STATE) {
      ASSETDOWNLOAD_STATE[ASSETDOWNLOAD_STATE["none"] = 0] = "none";
      ASSETDOWNLOAD_STATE[ASSETDOWNLOAD_STATE["checking"] = 1] = "checking";
      ASSETDOWNLOAD_STATE[ASSETDOWNLOAD_STATE["newfullversion"] = 2] = "newfullversion";
      ASSETDOWNLOAD_STATE[ASSETDOWNLOAD_STATE["downloading"] = 3] = "downloading";
      ASSETDOWNLOAD_STATE[ASSETDOWNLOAD_STATE["complete"] = 4] = "complete";
      ASSETDOWNLOAD_STATE[ASSETDOWNLOAD_STATE["downfailed"] = 5] = "downfailed";
      ASSETDOWNLOAD_STATE[ASSETDOWNLOAD_STATE["neterr"] = 6] = "neterr";
      ASSETDOWNLOAD_STATE[ASSETDOWNLOAD_STATE["loadingproduct"] = 7] = "loadingproduct";
      ASSETDOWNLOAD_STATE[ASSETDOWNLOAD_STATE["loadproducterr"] = 8] = "loadproducterr";
      ASSETDOWNLOAD_STATE[ASSETDOWNLOAD_STATE["loadremotemd5"] = 9] = "loadremotemd5";
      ASSETDOWNLOAD_STATE[ASSETDOWNLOAD_STATE["needdownloadnewverison"] = 10] = "needdownloadnewverison";
    })(ASSETDOWNLOAD_STATE || (ASSETDOWNLOAD_STATE = {}));
    window["ASSETDOWNLOAD_STATE"] = ASSETDOWNLOAD_STATE;
    var MAX_TASK_COUNT = 2;
    var VersionMgr = function() {
      function VersionMgr() {
        this.remoteVersionInfo = null;
        this.remoteMd5dic = null;
        this.localMd5dic = null;
        this.localVersionInfo = null;
        this.checkVersionCb = null;
        this._storagePath = null;
        this.versionFileName = "version.json";
        this.md5dicfFileName = "md5dic.json";
        this.rootDownLoadUrl = "";
        this.newFileDic = null;
        this.downloadprocess = 0;
        this.alreadydownloadsize = 0;
        this.totalfilesize = 0;
        this.processCb = null;
        this.timer_delay = null;
        this.completeDic = {};
        this.downloaderDic = {};
        this.curfilealreadysize = 0;
        this.failedtasks = [];
        this.runningtasks = [];
        this.timedic = {};
        this.timer = null;
        this.startDownLoadTime = 0;
      }
      VersionMgr.getInstance = function() {
        this._instance || (this._instance = new VersionMgr());
        return this._instance;
      };
      VersionMgr.prototype.getStoragePath = function() {
        return this._storagePath;
      };
      VersionMgr.prototype.initDirs = function() {
        this.rootDownLoadUrl = ServerMgr_1.default.getInstance().getHotupdateVersionUrl();
        console.log("读取内容=");
        var str = cc.sys.localStorage.getItem("hotupdateinfo");
        if (str && str.length > 0) {
          var info = JSON.parse(str);
          this._storagePath = info._storagePath;
          console.log("检查过期内容");
          this.checkHotUpdateIsExpire();
          console.log("新建热更新路径=1", this._storagePath);
          console.log("新建热更新路径=2", jsb.fileUtils.getSearchPaths());
        } else {
          var tag = ServerMgr_1.default.getInstance().getProductTag();
          var rootPath = jsb.fileUtils.getWritablePath();
          this._storagePath = rootPath + "dzwphotupdate_" + tag;
          jsb.fileUtils.createDirectory(this._storagePath);
          var searchPaths = jsb.fileUtils.getSearchPaths();
          console.log("新建热更新路径=1", jsb.fileUtils.getSearchPaths());
          searchPaths.unshift(this._storagePath);
          var hotupdateinfo = {
            searchPaths: searchPaths,
            _storagePath: this._storagePath,
            backfromhotupdate: false
          };
          console.log("新建热更新路径=2", this._storagePath);
          cc.sys.localStorage.setItem("hotupdateinfo", JSON.stringify(hotupdateinfo));
          jsb.fileUtils.setSearchPaths(searchPaths);
        }
      };
      VersionMgr.prototype.run = function() {
        var curTime = new Date().getTime();
        var delayTask = [];
        for (var i = 0; i < this.runningtasks.length; ++i) {
          var filepath = this.runningtasks[i];
          var time = this.timedic[filepath];
          curTime - time > 2e4 && delayTask.push(filepath);
        }
        for (var i = 0; i < delayTask.length; ++i) {
          var filepath = delayTask[0];
          this.runningtasks.removeByValue(filepath);
        }
        delayTask.length > 0 && this.genTasks();
      };
      VersionMgr.prototype.removeTask = function(filepath) {
        this.runningtasks.removeByValue(filepath);
        delete this.downloaderDic[filepath];
        this.refreshTasks();
      };
      VersionMgr.prototype.refreshTasks = function() {
        this.alreadydownloadsize = 0;
        for (var filepath in this.completeDic) {
          var item = this.newFileDic[filepath];
          if (!item) continue;
          this.alreadydownloadsize += item.size;
        }
        this.executeTasks();
      };
      VersionMgr.prototype.setAsBackFromHotupdate = function() {
        console.log("下载完了设置从重启中回来标志");
        var str = cc.sys.localStorage.getItem("hotupdateinfo");
        if (str) {
          var info = JSON.parse(str);
          info.backfromhotupdate = true;
          cc.sys.localStorage.setItem("hotupdateinfo", JSON.stringify(info));
        }
      };
      VersionMgr.prototype.resetBackFromHotupdate = function() {
        var str = cc.sys.localStorage.getItem("hotupdateinfo");
        if (str) {
          var info = JSON.parse(str);
          info.backfromhotupdate = false;
          cc.sys.localStorage.setItem("hotupdateinfo", JSON.stringify(info));
        }
      };
      VersionMgr.prototype.isBackFromHotupdate = function() {
        var isBackFromHotUpdate = false;
        var str = cc.sys.localStorage.getItem("hotupdateinfo");
        if (str) {
          var info = JSON.parse(str);
          isBackFromHotUpdate = info.backfromhotupdate;
        }
        return isBackFromHotUpdate;
      };
      VersionMgr.prototype.readLoaclVersionInfo = function() {
        var localstr = jsb.fileUtils.getStringFromFile(this.versionFileName);
        var versioninfoexist = localstr && localstr.length > 0;
        versioninfoexist && (this.localVersionInfo = JSON.parse(localstr));
      };
      VersionMgr.prototype.setState = function(state) {
        this.clearTimer();
        this.state = state;
        this.checkVersionCb(state);
      };
      VersionMgr.prototype.checkVersion = function(checkVersionCb, processCb) {
        this.checkVersionCb = checkVersionCb;
        this.processCb = processCb;
        this.readLoaclVersionInfo();
        this.localVersionInfo ? this.reqRemoteVersionInfo() : this.setState(ASSETDOWNLOAD_STATE.none);
      };
      VersionMgr.prototype.getVersionInfo = function() {
        return this.localVersionInfo;
      };
      VersionMgr.prototype.checkHotUpdateIsExpire = function() {
        console.log("哈哈哈=", window.g_localrootpath);
        if (null == window.g_localrootpath || "undefined" == window.g_localrootpath) return;
        console.log("获取代码=", window.g_localrootpath);
        console.log("本地的version文件=", "" + window.g_localrootpath + this.versionFileName);
        var localversionstr = jsb.fileUtils.getStringFromFile("" + window.g_localrootpath + this.versionFileName);
        var hotupdateversionpath = this._storagePath + "/" + this.versionFileName;
        console.log("热更新版本路径=", hotupdateversionpath);
        var hotupdatemd5path = this._storagePath + "/" + this.md5dicfFileName;
        console.log("热更新md5路径=", hotupdatemd5path);
        var hotupdateversionstr = jsb.fileUtils.getStringFromFile(hotupdateversionpath);
        console.log("热更新目录版本号=", hotupdateversionstr);
        var hotversionexist = hotupdateversionstr && hotupdateversionstr.length > 0;
        console.log("hotversionexist=", hotversionexist);
        if (hotversionexist) {
          var localversion = JSON.parse(localversionstr);
          var hotupdateversion = JSON.parse(hotupdateversionstr);
          console.log("本地版本信息=", localversion.versioncode, "远程版本信息=", hotupdateversion.versioncode);
          localversion.versioncode > hotupdateversion.versioncode && this.clearHotUpdate();
        }
      };
      VersionMgr.prototype.clearHotUpdate = function() {
        this.setAsBackFromHotupdate();
        var path = this._storagePath + "/";
        var ret = jsb.fileUtils.removeDirectory(path);
        console.log("移除文件夹=", path, "ret=", ret);
        cc.audioEngine.stopAll();
        cc.game.restart();
      };
      VersionMgr.prototype.reqRemoteVersionInfo = function() {
        var _this = this;
        var reqCbVersionInfo = function(str) {
          if (!str) {
            console.log("下载version失败");
            this.setState(ASSETDOWNLOAD_STATE.neterr);
            return;
          }
          this.remoteVersionInfo = JSON.parse(str);
          if (this.remoteVersionInfo.build > this.localVersionInfo.build) this.setState(ASSETDOWNLOAD_STATE.needdownloadnewverison); else if (this.remoteVersionInfo.versioncode > this.localVersionInfo.versioncode) {
            this.readLocalMd5dic();
            this.setState(ASSETDOWNLOAD_STATE.loadremotemd5);
            this.downloadMd5dic();
          } else this.setState(ASSETDOWNLOAD_STATE.none);
        };
        var xhr = cc.loader.getXMLHttpRequest();
        xhr.onreadystatechange = function() {
          cc.log("xhr.readyState=" + xhr.readyState + "  xhr.status=" + xhr.status);
          if (4 === xhr.readyState && xhr.status >= 200 && xhr.status < 300) {
            var respone = xhr.responseText;
            var data = JSON.parse(respone);
            _this.clearTimer();
            console.log("获取到了内容=", _this.versionFileName, respone);
            reqCbVersionInfo.bind(_this)(respone);
          }
        };
        xhr.timeout = 5e3;
        var url = this.rootDownLoadUrl + "/" + this.versionFileName;
        xhr.onerror = function(error) {
          console.log("httpRequest" + url + "出错啦");
          _this.clearTimer();
          reqCbVersionInfo.bind(_this)(null);
        };
        xhr.ontimeout = function() {
          console.log("httpRequest" + url + "超时啦");
          _this.clearTimer();
          reqCbVersionInfo.bind(_this)(null);
        };
        xhr.open("GET", url, true);
        xhr.send();
      };
      VersionMgr.prototype.readLocalMd5dic = function() {
        var localstr = jsb.fileUtils.getStringFromFile(this.md5dicfFileName);
        this.localMd5dic = JSON.parse(localstr);
      };
      VersionMgr.prototype.downloadMd5dic = function() {
        var _this = this;
        var zipfilename = this.md5dicfFileName + ".json";
        var filename = this.md5dicfFileName;
        var reqRemoteMd5DicCb = function(data) {
          if (!data) {
            console.log("下载md5dic失败");
            this.setState(ASSETDOWNLOAD_STATE.neterr);
            return;
          }
          var new_zip = new JSZip(data);
          console.log("oname=", filename);
          var jsonstr = new_zip.file(filename).asText();
          console.log("jsonstr=", jsonstr);
          this.remoteMd5dic = JSON.parse(jsonstr);
          this.genDiffMd5FileList();
          if (this.totalfilesize > 0) {
            this.setState(ASSETDOWNLOAD_STATE.downloading);
            this.processCb(0, this.totalfilesize);
            this.startDownLoad();
          } else this.setState(ASSETDOWNLOAD_STATE.none);
        };
        var xhr = cc.loader.getXMLHttpRequest();
        xhr.responseType = "arraybuffer";
        xhr.onreadystatechange = function() {
          cc.log("xhr.readyState=" + xhr.readyState + "  xhr.status=" + xhr.status);
          if (4 === xhr.readyState && xhr.status >= 200 && xhr.status < 300) {
            var arraybuffer = xhr.response;
            _this.clearTimer();
            console.log("获取到了内容=", zipfilename, arraybuffer);
            reqRemoteMd5DicCb.bind(_this)(arraybuffer);
          }
        };
        xhr.timeout = 5e3;
        var url = this.rootDownLoadUrl + "/" + zipfilename;
        xhr.onerror = function(error) {
          console.log("httpRequest" + url + "出错啦");
          _this.clearTimer();
          reqRemoteMd5DicCb.bind(_this)(null);
        };
        xhr.ontimeout = function() {
          console.log("httpRequest" + url + "超时啦");
          _this.clearTimer();
          reqRemoteMd5DicCb.bind(_this)(null);
        };
        xhr.open("GET", url, true);
        xhr.send();
      };
      VersionMgr.prototype.genDiffMd5FileList = function() {
        this.newFileDic = {};
        var isNewFile = false;
        this.totalfilesize = 0;
        this.downloadprocess = 0;
        this.alreadydownloadsize = 0;
        for (var filepath in this.remoteMd5dic) {
          var remoteitem = this.remoteMd5dic[filepath];
          var localitem = this.localMd5dic[filepath];
          isNewFile = false;
          isNewFile = !localitem || localitem.md5 != remoteitem.md5;
          if (isNewFile) {
            remoteitem.filepath = filepath;
            this.totalfilesize += remoteitem.size;
            this.newFileDic[filepath] = remoteitem;
          }
        }
      };
      VersionMgr.prototype.genTasks = function() {
        var newTasks = [];
        for (var filepath in this.newFileDic) {
          if (this.completeDic[filepath] || this.failedtasks.contain(filepath) || this.runningtasks.contain(filepath)) continue;
          if (this.runningtasks.length < MAX_TASK_COUNT) {
            this.timedic[filepath] = new Date().getTime();
            this.runningtasks.push(filepath);
            newTasks.push(filepath);
          }
        }
        return newTasks;
      };
      VersionMgr.prototype.executeTasks = function() {
        var newTasks = this.genTasks();
        if (newTasks.length > 0) for (var i = 0; i < newTasks.length; ++i) {
          var filepath = newTasks[i];
          var item = this.newFileDic[filepath];
          this.downloadNewFile(item);
        } else if (this.runningtasks.length <= 0) {
          this.clearTimer();
          if (this.failedtasks.length > 0) {
            this.failedtasks = [];
            this.setState(ASSETDOWNLOAD_STATE.downfailed);
          } else {
            this.updateVersion();
            this.complete();
          }
        }
      };
      VersionMgr.prototype.retryVersion = function() {
        this.reqRemoteVersionInfo();
      };
      VersionMgr.prototype.retryFiles = function() {
        this.startDownLoad();
      };
      VersionMgr.prototype.startDownLoad = function() {
        this.startDownLoadTime = new Date().getTime();
        this.clearTimer();
        this.timer = setInterval(this.run.bind(this));
        this.executeTasks();
      };
      VersionMgr.prototype.complete = function() {
        this.clearTimer();
        this.setAsBackFromHotupdate();
        cc.audioEngine.stopAll();
        cc.game.restart();
      };
      VersionMgr.prototype.updateVersion = function() {
        jsb.fileUtils.writeStringToFile(JSON.stringify(this.remoteVersionInfo), this._storagePath + "/" + this.versionFileName);
      };
      VersionMgr.prototype.clearTimer = function() {
        if (null != this.timer) {
          clearInterval(this.timer);
          this.timer = null;
        }
      };
      VersionMgr.prototype.downloadNewFile = function(item) {
        var _this = this;
        var completeCb = function(filename, filepath, oname, rootpath) {
          if (!item.compressed) {
            var data = jsb.fileUtils.getDataFromFile(filepath);
            var new_zip = new JSZip(data);
            var buffer = new_zip.file(oname).asUint8Array();
            jsb.fileUtils.writeDataToFile(buffer, rootpath + "/" + oname);
            jsb.fileUtils.removeFile(filepath);
          }
          var alreadyDownLoad = this.completeDic[item.filepath];
          this.localMd5dic[item.filepath] = item;
          jsb.fileUtils.writeStringToFile(JSON.stringify(this.localMd5dic), this._storagePath + "/" + this.md5dicfFileName);
          this.completeDic[item.filepath] = item;
          this.removeTask(item.filepath);
        };
        var filepath = item.filepath;
        var storagefilename = this._storagePath + "/" + filepath;
        var dirarr = filepath.split("/");
        var rootPath = this._storagePath;
        var oname = dirarr[dirarr.length - 1];
        for (var index = 0; index < dirarr.length - 1; ++index) {
          var subdir = dirarr[index];
          rootPath = rootPath + "/" + subdir;
          jsb.fileUtils.createDirectory(rootPath);
        }
        var filename = item.filepath;
        if (!item.compressed) {
          filename += ".json";
          storagefilename += ".json";
        }
        var url = this.rootDownLoadUrl + "/" + filename;
        var downloaderDic = new jsb.Downloader();
        storagefilename = storagefilename.replace(/\\/g, "/");
        downloaderDic.createDownloadFileTask(url, storagefilename);
        downloaderDic.setOnTaskError(function(sender, errorCode, errorCodeInternal, errorStr) {
          console.log("错误提示=", errorCode, errorCodeInternal, errorStr);
          _this.failedtasks.push(item.filepath);
          _this.removeTask(item.filepath);
        });
        downloaderDic.setOnFileTaskSuccess(function(sender) {
          completeCb.bind(_this)(filename, sender.storagePath, oname, rootPath);
        });
        downloaderDic.setOnTaskProgress(function(sender, speed, alreadsize, totalsize) {
          _this.processCb(speed, _this.alreadydownloadsize + alreadsize, _this.totalfilesize);
        });
        this.downloaderDic[item.filepath] = downloaderDic;
      };
      return VersionMgr;
    }();
    exports.default = VersionMgr;
    cc._RF.pop();
  }, {
    "./ServerMgr": "ServerMgr"
  } ],
  VideoPlay: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a8d44eIAZlCG61Uhf6Zx4sM", "VideoPlay");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var RecordMgr_1 = require("../../Plat/GameMgrs/RecordMgr");
    var MahjongDef_1 = require("./MahjongDef");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.mahjongResMgr = RoomMgr_1.default.getInstance().getResMgr();
        _this.mahjongLogic = RoomMgr_1.default.getInstance().getLogic();
        _this.mahjongDef = RoomMgr_1.default.getInstance().getDef();
        _this.bPause = false;
        return _this;
      }
      Model.prototype.clear = function() {
        this.bPause = false;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          btn_prestep: null,
          btn_play: null,
          btn_stop: null,
          btn_nextstep: null,
          lbl_curstep: null,
          lbl_totalstep: null,
          lbl_leftcardcount: null,
          lbl_roundindex: null,
          lbl_recordcode: null,
          node_play: null,
          node_replay: null,
          btn_replay: null,
          node_recordcode: null,
          btn_exit: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.btn_prestep = ctrl.btn_prestep;
        this.ui.btn_play = ctrl.btn_play;
        this.ui.btn_stop = ctrl.btn_stop;
        this.ui.btn_exit = ctrl.btn_exit;
        this.ui.btn_nextstep = ctrl.btn_nextstep;
        this.ui.lbl_curstep = ctrl.lbl_curstep;
        this.ui.lbl_totalstep = ctrl.lbl_totalstep;
        this.ui.lbl_leftcardcount = ctrl.lbl_leftcardcount;
        this.ui.lbl_roundindex = ctrl.lbl_roundindex;
        this.ui.lbl_curstep.string = 1;
        this.ui.node_play = ctrl.node_play;
        this.ui.node_replay = ctrl.node_replay;
        this.ui.btn_replay = ctrl.btn_replay;
        this.ui.node_play.active = false;
        this.ui.node_replay.active = false;
        this.ui.lbl_recordcode = ctrl.lbl_recordcode;
        this.ui.node_recordcode = ctrl.node_recordcode;
        this.ui.lbl_recordcode.string = RecordMgr_1.default.getInstance().getRecordCode();
      };
      View.prototype.updatePlayState = function() {};
      View.prototype.updateLoopIndex = function() {
        this.ui.lbl_curstep.string = RecordMgr_1.default.getInstance().getLoopIndex();
      };
      View.prototype.clear = function() {};
      View.prototype.initVideoInfo = function() {
        this.ui.node_play.active = true;
        this.ui.node_replay.active = false;
        this.ui.lbl_totalstep.string = RecordMgr_1.default.getInstance().getLoopCount();
        this.ui.lbl_roundindex.string = RoomMgr_1.default.getInstance().getRoundIndex() + 1;
        this.updateLoopIndex();
        this.updateLeftCardCount();
      };
      View.prototype.finishVideo = function() {
        console.log("隐藏播放按钮");
        this.ui.node_play.active = false;
        this.ui.node_replay.active = true;
      };
      View.prototype.updateLeftCardCount = function() {
        this.ui.lbl_leftcardcount.string = this.model.mahjongLogic.getInstance().getLeftCardCount();
      };
      View.prototype.recover = function() {
        this.initVideoInfo();
      };
      return View;
    }(BaseView_1.default);
    var VideoPlayCtrl = function(_super) {
      __extends(VideoPlayCtrl, _super);
      function VideoPlayCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btn_prestep = null;
        _this.btn_play = null;
        _this.btn_stop = null;
        _this.btn_nextstep = null;
        _this.node_recordcode = null;
        _this.lbl_curstep = null;
        _this.lbl_totalstep = null;
        _this.lbl_leftcardcount = null;
        _this.lbl_roundindex = null;
        _this.lbl_recordcode = null;
        _this.node_play = null;
        _this.node_replay = null;
        _this.btn_replay = null;
        _this.btn_exit = null;
        return _this;
      }
      VideoPlayCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      VideoPlayCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          onSeatChange: this.onSeatChange,
          onProcess: this.onProcess,
          onSyncData: this.onSyncData
        };
      };
      VideoPlayCtrl.prototype.defineGlobalEvents = function() {
        this.g_events = {
          usersUpdated: this.usersUpdated,
          loopChanged: this.loopChanged
        };
      };
      VideoPlayCtrl.prototype.onSyncData = function() {
        this.view.recover();
      };
      VideoPlayCtrl.prototype.loopChanged = function() {
        console.log("步长变化了");
        this.view.updateLoopIndex();
      };
      VideoPlayCtrl.prototype.onProcess = function(msg) {
        this.view.updateLeftCardCount();
        switch (msg.process) {
         case MahjongDef_1.MahjongDef.process_loop:
          this.view.initVideoInfo();
          break;

         case MahjongDef_1.MahjongDef.process_gamesettle:
          this.view.finishVideo();
        }
      };
      VideoPlayCtrl.prototype.onSeatChange = function(msg) {
        this.view.updateLeftCardCount();
      };
      VideoPlayCtrl.prototype.usersUpdated = function() {};
      VideoPlayCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.image, this.ui.btn_prestep, this.btn_prestep_cb, "上一步");
        this.connect(G_UiType.image, this.ui.btn_play, this.btn_play_cb, "播放");
        this.connect(G_UiType.image, this.ui.btn_stop, this.btn_play_cb, "暂停");
        this.connect(G_UiType.image, this.ui.btn_exit, this.btn_exit_cb, "退出");
        this.connect(G_UiType.image, this.ui.btn_nextstep, this.btn_nextstep_cb, "下一步");
        this.connect(G_UiType.image, this.ui.btn_replay, this.btn_replay_cb, "重播");
      };
      VideoPlayCtrl.prototype.start = function() {};
      VideoPlayCtrl.prototype.btn_prestep_cb = function() {
        this.pause();
        RecordMgr_1.default.getInstance().gotoPreStep();
      };
      VideoPlayCtrl.prototype.btn_exit_cb = function() {
        this.start_module(G_MODULE.Plaza);
      };
      VideoPlayCtrl.prototype.pause = function() {
        if (this.model.bPause) return;
        RecordMgr_1.default.getInstance().stopLoop();
        this.model.bPause = !this.model.bPause;
        this.view.updatePlayState();
      };
      VideoPlayCtrl.prototype.play = function() {
        if (!this.model.bPause) return;
        RecordMgr_1.default.getInstance().startLoop();
        this.model.bPause = !this.model.bPause;
        this.view.updatePlayState();
      };
      VideoPlayCtrl.prototype.btn_play_cb = function() {
        this.model.bPause ? this.play() : this.pause();
        this.ui.btn_play.active = this.model.bPause;
        this.ui.btn_stop.active = !this.model.bPause;
      };
      VideoPlayCtrl.prototype.btn_nextstep_cb = function() {
        this.pause();
        RecordMgr_1.default.getInstance().gotoNextStep();
      };
      VideoPlayCtrl.prototype.btn_replay_cb = function() {
        RecordMgr_1.default.getInstance().replay();
      };
      __decorate([ property(cc.Node) ], VideoPlayCtrl.prototype, "btn_prestep", void 0);
      __decorate([ property(cc.Node) ], VideoPlayCtrl.prototype, "btn_play", void 0);
      __decorate([ property(cc.Node) ], VideoPlayCtrl.prototype, "btn_stop", void 0);
      __decorate([ property(cc.Node) ], VideoPlayCtrl.prototype, "btn_nextstep", void 0);
      __decorate([ property(cc.Node) ], VideoPlayCtrl.prototype, "node_recordcode", void 0);
      __decorate([ property(cc.Label) ], VideoPlayCtrl.prototype, "lbl_curstep", void 0);
      __decorate([ property(cc.Label) ], VideoPlayCtrl.prototype, "lbl_totalstep", void 0);
      __decorate([ property(cc.Label) ], VideoPlayCtrl.prototype, "lbl_leftcardcount", void 0);
      __decorate([ property(cc.Label) ], VideoPlayCtrl.prototype, "lbl_roundindex", void 0);
      __decorate([ property(cc.Label) ], VideoPlayCtrl.prototype, "lbl_recordcode", void 0);
      __decorate([ property(cc.Node) ], VideoPlayCtrl.prototype, "node_play", void 0);
      __decorate([ property(cc.Node) ], VideoPlayCtrl.prototype, "node_replay", void 0);
      __decorate([ property(cc.Node) ], VideoPlayCtrl.prototype, "btn_replay", void 0);
      __decorate([ property(cc.Node) ], VideoPlayCtrl.prototype, "btn_exit", void 0);
      VideoPlayCtrl = __decorate([ ccclass ], VideoPlayCtrl);
      return VideoPlayCtrl;
    }(BaseCtrl_1.default);
    exports.default = VideoPlayCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RecordMgr": "RecordMgr",
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "./MahjongDef": "MahjongDef"
  } ],
  WM_Emitter: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d2537v80+lCGLjmX//nrG8o", "WM_Emitter");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var WM_Emitter = function() {
      function WM_Emitter(name) {
        this.m_listen_list = [];
        this.m_next_id = 1;
        this.m_emitter_name = null;
        this.m_emitter_name = name;
      }
      WM_Emitter.prototype.on = function(event_id, call_back, listenler) {
        var id = this.m_next_id;
        var event_item = {};
        event_item["m_id"] = this.m_next_id;
        event_item["m_call_back"] = call_back;
        event_item["m_event_id"] = event_id;
        event_item["m_listenler"] = listenler;
        this.m_listen_list.push(event_item);
        this.m_next_id = this.m_next_id + 1;
        return id;
      };
      WM_Emitter.prototype.emit = function(event_id, arg1, arg2) {
        for (var index = 0; index < this.m_listen_list.length; index++) {
          var event_item = this.m_listen_list[index];
          event_item.m_event_id == event_id && event_item.m_call_back(arg1, arg2);
        }
        return true;
      };
      WM_Emitter.prototype.remove_by_id = function(id) {
        for (var index = 0; index < this.m_listen_list.length; index++) {
          var event_item = this.m_listen_list[index];
          event_item.m_id == id && this.m_listen_list.remove(index);
        }
      };
      WM_Emitter.prototype.remove_by_listener = function(listenler) {
        for (var index = this.m_listen_list.length - 1; index >= 0; index--) {
          var event_item = this.m_listen_list[index];
          event_item.m_listenler == listenler && this.m_listen_list.remove(index);
        }
      };
      WM_Emitter.prototype.clear = function() {
        this.m_listen_list = [];
        this.m_next_id = 1;
        return true;
      };
      WM_Emitter.prototype.reg_events = function(events, listenler) {
        for (var event_id in events) {
          var callback = events[event_id];
          this.on(event_id, callback, listenler);
        }
      };
      return WM_Emitter;
    }();
    exports.default = WM_Emitter;
    cc._RF.pop();
  }, {} ],
  WxSdk: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "46afcACORBD/730USmIzBzr", "WxSdk");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AppInfoMgr_1 = require("../../AppStart/AppMgrs/AppInfoMgr");
    var WxSdkMgr = function() {
      function WxSdkMgr() {
        this.wxCalssName = null;
        var rootPath = AppInfoMgr_1.default.getInstance().getAppActivityPath();
        this.wxCalssName = rootPath + "/wxapi/WXEntryActivity";
      }
      WxSdkMgr.getInstance = function() {
        this._wxCtor || (this._wxCtor = new WxSdkMgr());
        return this._wxCtor;
      };
      WxSdkMgr.prototype.shareSuccess = function() {
        this._shareCb && this._shareCb();
      };
      return WxSdkMgr;
    }();
    exports.default = WxSdkMgr;
    window.G_JAVA_OUTPUT = WxSdkMgr.getInstance();
    cc._RF.pop();
  }, {
    "../../AppStart/AppMgrs/AppInfoMgr": "AppInfoMgr"
  } ],
  YySdk: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6f2e1ei21tNlYATeuxuIxsr", "YySdk");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var YySdkMgr = function() {
      function YySdkMgr() {
        this.iosClassName = "AppController";
        this.yyEnter = false;
        this.yyMic = true;
        this.yyPlay = true;
        this.isMicManual = false;
        this.isPlayManual = false;
      }
      YySdkMgr.getInstance = function() {
        if (!this._yyCtor) {
          this._yyCtor = new YySdkMgr();
          this._yyCtor.YYEvent();
        }
        return this._yyCtor;
      };
      YySdkMgr.prototype.getBolYYEvent = function() {
        return this.yyEnter;
      };
      YySdkMgr.prototype.getBolYYMic = function() {
        return this.yyMic;
      };
      YySdkMgr.prototype.getBolYYPlay = function() {
        return this.yyPlay;
      };
      YySdkMgr.prototype.InitYaYaSdk = function(uid, nickname, roomId) {
        if (this.yyEnter) return;
        if (cc.sys.isNative) {
          console.log("初始化呀呀语音sdk", cc.sys.os);
          if (cc.sys.os == cc.sys.OS_ANDROID) var o = jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "GameStart", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", uid + "", nickname, roomId); else cc.sys.os == cc.sys.OS_IOS && jsb.reflection.callStaticMethod(this.iosClassName, "loginYaYaSdk:Player:Room:", "" + uid, "" + nickname, "" + roomId);
        }
      };
      YySdkMgr.prototype.setVoiceInitOk = function() {
        this.yyEnter = true;
      };
      YySdkMgr.prototype.micUp = function() {
        if (!this.yyEnter) return;
        if (cc.sys.isNative) {
          this.yyMic = true;
          console.log("Listener: js micUp+++");
          cc.sys.os == cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "micUp", "()V") : cc.sys.os == cc.sys.OS_IOS && jsb.reflection.callStaticMethod(this.iosClassName, "ChatMic:", true);
        }
      };
      YySdkMgr.prototype.micDown = function(type) {
        if (!this.yyEnter) return;
        if (cc.sys.isNative) {
          this.yyMic = false;
          this.isMicManual = 1 == type;
          console.log("Listener: js micDown+++");
          cc.sys.os == cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "micDown", "()V") : cc.sys.os == cc.sys.OS_IOS && jsb.reflection.callStaticMethod(this.iosClassName, "ChatMic:", false);
        }
      };
      YySdkMgr.prototype.speakerUp = function() {
        if (!this.yyEnter) return;
        if (cc.sys.isNative) {
          this.yyPlay = true;
          console.log("Listener: js speakerUp+++");
          cc.sys.os == cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "speakerUp", "()V") : cc.sys.os == cc.sys.OS_IOS && jsb.reflection.callStaticMethod(this.iosClassName, "RealAudio:", true);
        }
      };
      YySdkMgr.prototype.speakerDown = function(type) {
        if (!this.yyEnter) return;
        if (cc.sys.isNative) {
          this.yyPlay = false;
          this.isPlayManual = 1 == type;
          console.log("Listener: js speakerDown+++");
          cc.sys.os == cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "speakerDown", "()V") : cc.sys.os == cc.sys.OS_IOS && jsb.reflection.callStaticMethod(this.iosClassName, "RealAudio:", false);
        }
      };
      YySdkMgr.prototype.pausePlay = function(type) {
        if (!this.yyEnter) return;
        if (!this.yyPlay) return;
        if (cc.sys.isNative) {
          this.yyPlay = false;
          this.isPlayManual = 1 == type;
          cc.sys.os == cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "pausePlay", "()V") : cc.sys.os == cc.sys.OS_IOS;
        }
      };
      YySdkMgr.prototype.resumePlay = function() {
        if (!this.yyEnter) return;
        if (this.yyPlay) return;
        if (cc.sys.isNative) {
          this.yyPlay = true;
          cc.sys.os == cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "resumePlay", "()V") : cc.sys.os == cc.sys.OS_IOS;
        }
      };
      YySdkMgr.prototype.LeaveRoom = function() {
        if (!this.yyEnter) return;
        if (cc.sys.isNative) {
          this.yyEnter = false;
          console.log("退出房间登出呀呀语音sdk");
          cc.sys.os == cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "EndStart", "()V") : cc.sys.os == cc.sys.OS_IOS && jsb.reflection.callStaticMethod(this.iosClassName, "logoutYaYaSdk");
        }
      };
      YySdkMgr.prototype.yyEventHide = function() {
        if (!this.yyEnter) return;
        this.voiceSateBeforeHide = {
          mic: this.yyMic,
          speaker: this.yyPlay
        };
        cc.sys.os == cc.sys.OS_IOS && this.yyMic && cc.audioEngine.pauseAll();
        this.micDown(0);
        this.speakerDown(0);
      };
      YySdkMgr.prototype.yyEventShow = function() {
        if (!this.yyEnter) return;
        if (this.voiceSateBeforeHide) {
          if (this.voiceSateBeforeHide.mic) {
            cc.sys.os == cc.sys.OS_IOS && cc.audioEngine.resumeAll();
            this.micUp();
          } else this.micDown(0);
          this.voiceSateBeforeHide.speaker ? this.speakerUp() : this.speakerDown(0);
          this.voiceSateBeforeHide = null;
        }
      };
      YySdkMgr.prototype.YYEvent = function() {
        if (cc.sys.isNative) {
          G_FRAME.globalEmitter.on("EnterBackground", this.EnterBackground.bind(this), this);
          G_FRAME.globalEmitter.on("EnterForeground", this.EnterForeground.bind(this), this);
        }
      };
      YySdkMgr.prototype.EnterBackground = function() {
        YySdkMgr.getInstance().yyEventHide();
      };
      YySdkMgr.prototype.EnterForeground = function() {
        console.trace("Listener: 啊啊啊啊啊啊啊");
        console.log("Listener: js EnterForeground");
        YySdkMgr.getInstance().yyEventShow();
      };
      return YySdkMgr;
    }();
    exports.default = YySdkMgr;
    cc._RF.pop();
  }, {} ],
  android: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cf36bFPTpRHU61OCd9YOYl+", "android");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var FrameMgr_1 = require("../FrameMgr");
    var ShareMgr_1 = require("../ShareMgr");
    var ServerMgr_1 = require("../../../AppStart/AppMgrs/ServerMgr");
    var AppInfoMgr_1 = require("../../../AppStart/AppMgrs/AppInfoMgr");
    var GpsSdk_1 = require("../../../Plat/SdkMgrs/GpsSdk");
    var UserMgr_1 = require("../UserMgr");
    var GEventDef_1 = require("../GEventDef");
    var platform_android = function() {
      function platform_android() {
        this.javaClassName = "org/cocos2dx/javascript/AppActivity";
        this.javaWeChatClassName = null;
        this.G_NETWORK_CHANGE = "networkChange";
        this.G_BATTERY_CHANGE = "batteryChange";
        this.G_LOCATION_RESULT = "locationResult";
        this.G_WECHAT_EMPOWERMENT_SUCCESS = "weChat_empowerment_success";
        var rootPath = AppInfoMgr_1.default.getInstance().getAppActivityPath();
        this.javaWeChatClassName = rootPath + "/wxapi/WXEntryActivity";
      }
      platform_android.getInstance = function() {
        this._platform_android || (this._platform_android = new platform_android());
        return this._platform_android;
      };
      platform_android.prototype.callJavaTest = function() {
        var methodName = "test";
        var methodSignature = "()V";
        jsb.reflection.callStaticMethod(this.javaWeChatClassName, methodName, methodSignature);
      };
      platform_android.prototype.weChatLogin = function() {
        var methodName = "weChatLogin";
        var methodSignature = "()V";
        jsb.reflection.callStaticMethod(this.javaWeChatClassName, methodName, methodSignature);
      };
      platform_android.prototype.wxShareImage = function(type) {
        var _this = this;
        var methodName = "shareImage";
        var methodSignature = "(Ljava/lang/String;I)V";
        this.screenshot(function(path) {
          jsb.reflection.callStaticMethod(_this.javaWeChatClassName, methodName, methodSignature, path, type);
        });
      };
      platform_android.prototype.wxShareSpecificImage = function(type, path) {
        var methodName = "shareImage";
        var methodSignature = "(Ljava/lang/String;I)V";
        var fullPath = jsb.fileUtils.getWritablePath() + "img/";
        jsb.fileUtils.isDirectoryExist(dirpath) || jsb.fileUtils.createDirectory(dirpath);
        var rawPicPath = cc.url.raw("resources/Share/share.png");
        var picData = jsb.fileUtils.getDataFromFile(rawPicPath);
        jsb.fileUtils.writeDataToFile(picData, fullPath);
        console.log("wxShareSpecificImage-------------------------");
        console.log(fullPath);
        var check = jsb.fileUtils.getWritablePath() + "img/share.png";
        jsb.reflection.callStaticMethod(this.javaWeChatClassName, methodName, methodSignature, check, type);
      };
      platform_android.prototype.wxShareContent = function(type, title, content, url) {
        var methodName = "shareContent";
        var methodSignature = "(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V";
        jsb.reflection.callStaticMethod(this.javaWeChatClassName, methodName, methodSignature, type, title, content, url);
      };
      platform_android.prototype.wxShareRoom = function(type, title, content, password) {
        var url = ServerMgr_1.default.getInstance().getInviteFriendJoinUrl(UserMgr_1.default.getInstance().getUid(), password);
        this.wxShareContent(type, title, content, url);
      };
      platform_android.prototype.wxShareClub = function(type, title, content, club_id) {
        var url = ServerMgr_1.default.getInstance().getClubInviteFriendJoinUrl(UserMgr_1.default.getInstance().getUid(), club_id);
        this.wxShareContent(type, title, content, url);
      };
      platform_android.prototype.getCurNetWorkData = function() {
        var methodName = "getCurNetWorkData";
        var methodSignature = "()Ljava/lang/String;";
        var o = jsb.reflection.callStaticMethod(this.javaClassName, methodName, methodSignature);
        cc.log("getCurNetWorkData ------\x3e ", o);
        var data = JSON.parse(o);
        null != data && (data.level = Math.min(5, Math.max(1, Number(data.level))));
        G_FRAME.globalEmitter.emit(this.G_NETWORK_CHANGE, data);
      };
      platform_android.prototype.getBatteryPercent = function() {
        var methodName = "getBatteryPercent";
        var methodSignature = "()I";
        var o = jsb.reflection.callStaticMethod(this.javaClassName, methodName, methodSignature);
        cc.log("getBatteryPercent ------\x3e ", o);
        G_FRAME.globalEmitter.emit(this.G_BATTERY_CHANGE, o);
      };
      platform_android.prototype.copyToClipboard = function(text) {
        var methodName = "copyToClipboard";
        var methodSignature = "(Ljava/lang/String;)Z";
        var o = jsb.reflection.callStaticMethod(this.javaClassName, methodName, methodSignature, text);
        o && this.showGreenTip("已复制到剪切板");
      };
      platform_android.prototype.moblieVibrator = function() {
        var methodName = "moblieVibrator";
        var methodSignature = "()V";
        jsb.reflection.callStaticMethod(this.javaClassName, methodName, methodSignature);
      };
      platform_android.prototype.gainToClipboard = function() {
        var methodName = "getClipboardText";
        var methodSignature = "()Ljava/lang/String;";
        return jsb.reflection.callStaticMethod(this.javaClassName, methodName, methodSignature);
      };
      platform_android.prototype.getPhoneType = function() {
        var methodName = "getPhoneType";
        var methodSignature = "()Ljava/lang/String;";
        return jsb.reflection.callStaticMethod(this.javaClassName, methodName, methodSignature);
      };
      platform_android.prototype.setMicrophoneMute = function(flag) {
        var methodName = "setMicrophoneMute";
        var methodSignature = "(Z)V";
        jsb.reflection.callStaticMethod(this.javaClassName, methodName, methodSignature, flag);
      };
      platform_android.prototype.setSpeakerphoneOn = function(flag) {
        var methodName = "setSpeakerphoneOn";
        var methodSignature = "(Z)V";
        jsb.reflection.callStaticMethod(this.javaClassName, methodName, methodSignature, flag);
      };
      platform_android.prototype.startLocation = function(type) {
        var methodName = "startLocation";
        var methodSignature = "(I)V";
        jsb.reflection.callStaticMethod(this.javaClassName, methodName, methodSignature, type);
      };
      platform_android.prototype.stopLocation = function() {
        var methodName = "stopLocation";
        var methodSignature = "()V";
        jsb.reflection.callStaticMethod(this.javaClassName, methodName, methodSignature);
      };
      platform_android.prototype.global_error = function(msg) {
        this.showRedTip(msg);
      };
      platform_android.prototype.global_info = function(msg) {
        this.showGreenTip(msg);
      };
      platform_android.prototype.locationResult = function(msg) {
        console.log("定位结果回调", msg, JSON.stringify(msg));
        if (parseInt(msg.code)) {
          GpsSdk_1.default.getInstance().sendGpsInfo();
          G_FRAME.globalEmitter.emit(this.G_LOCATION_RESULT);
          this.showGreenTip(msg.content);
        } else this.showRedTip(msg.content);
      };
      platform_android.prototype.onWeChatShare = function() {
        ShareMgr_1.default.getInstance().shareSuccess();
      };
      platform_android.prototype.onWeChatloginSuccess = function(userInfo) {
        cc.log("java to js -> onWeChatloginSuccess: ", userInfo);
        var jsonObj = JSON.parse(userInfo);
        var msg = {
          nickname: jsonObj.nickname,
          headurl: jsonObj.headimgurl,
          sex: jsonObj.sex,
          username: jsonObj.unionid,
          plat: 2,
          phoneType: G_PLATFORM.getPhoneType()
        };
        G_FRAME.globalEmitter.emit(this.G_WECHAT_EMPOWERMENT_SUCCESS, msg);
      };
      platform_android.prototype.onNetworkChange = function(args) {
        cc.log("监听到网络变化", args);
        var data = JSON.parse(args);
        null != data && (data.level = Math.min(5, Math.max(1, Number(data.level))));
        G_FRAME.globalEmitter.emit(this.G_NETWORK_CHANGE, data);
      };
      platform_android.prototype.onBatteryChange = function(args) {
        cc.log("监听到电量变化", args);
        G_FRAME.globalEmitter.emit(this.G_BATTERY_CHANGE, args);
      };
      platform_android.prototype.screenshot = function(func) {
        if (!cc.sys.isNative) return;
        var dirpath = jsb.fileUtils.getWritablePath() + "screenshot/";
        jsb.fileUtils.isDirectoryExist(dirpath) || jsb.fileUtils.createDirectory(dirpath);
        var name = "screenshot-" + new Date().valueOf() + ".png";
        var filepath = dirpath + name;
        var size = cc.director.getVisibleSize();
        var rt = cc.RenderTexture.create(size.width, size.height, cc.Texture2D.PIXEL_FORMAT_RGBA8888, gl.DEPTH24_STENCIL8_OES);
        cc.director.getScene()._sgNode.addChild(rt);
        rt.setVisible(false);
        rt.begin();
        cc.director.getScene()._sgNode.visit();
        rt.end();
        rt.saveToFile("screenshot/" + name, cc.ImageFormat.PNG, true, function() {
          cc.log("save succ");
          rt.removeFromParent();
          func && func(filepath);
        });
      };
      platform_android.prototype.showRedTip = function(content) {
        FrameMgr_1.default.getInstance().showTips(content, null, 35, cc.color(220, 24, 63), cc.p(0, 0), "Arial", 1500);
      };
      platform_android.prototype.showGreenTip = function(content) {
        FrameMgr_1.default.getInstance().showTips(content, null, 35, cc.color(0, 255, 50), cc.p(0, 0), "Arial", 1500);
      };
      platform_android.prototype.onJoinVoiceRoom = function() {
        G_FRAME.globalEmitter.emit(GEventDef_1.default.voice_JoinRoomOk, null);
      };
      return platform_android;
    }();
    exports.default = platform_android;
    cc._RF.pop();
  }, {
    "../../../AppStart/AppMgrs/AppInfoMgr": "AppInfoMgr",
    "../../../AppStart/AppMgrs/ServerMgr": "ServerMgr",
    "../../../Plat/SdkMgrs/GpsSdk": "GpsSdk",
    "../FrameMgr": "FrameMgr",
    "../GEventDef": "GEventDef",
    "../ShareMgr": "ShareMgr",
    "../UserMgr": "UserMgr"
  } ],
  base64: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1b169yAZc5LFKFmev8tDN+r", "base64");
    "use strict";
    var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    exports.encode = function(input, utf8) {
      var output = "";
      var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
      var i = 0;
      while (i < input.length) {
        chr1 = input.charCodeAt(i++);
        chr2 = input.charCodeAt(i++);
        chr3 = input.charCodeAt(i++);
        enc1 = chr1 >> 2;
        enc2 = (3 & chr1) << 4 | chr2 >> 4;
        enc3 = (15 & chr2) << 2 | chr3 >> 6;
        enc4 = 63 & chr3;
        isNaN(chr2) ? enc3 = enc4 = 64 : isNaN(chr3) && (enc4 = 64);
        output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
      }
      return output;
    };
    exports.decode = function(input, utf8) {
      var output = "";
      var chr1, chr2, chr3;
      var enc1, enc2, enc3, enc4;
      var i = 0;
      input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
      while (i < input.length) {
        enc1 = _keyStr.indexOf(input.charAt(i++));
        enc2 = _keyStr.indexOf(input.charAt(i++));
        enc3 = _keyStr.indexOf(input.charAt(i++));
        enc4 = _keyStr.indexOf(input.charAt(i++));
        chr1 = enc1 << 2 | enc2 >> 4;
        chr2 = (15 & enc2) << 4 | enc3 >> 2;
        chr3 = (3 & enc3) << 6 | enc4;
        output += String.fromCharCode(chr1);
        64 != enc3 && (output += String.fromCharCode(chr2));
        64 != enc4 && (output += String.fromCharCode(chr3));
      }
      return output;
    };
    cc._RF.pop();
  }, {} ],
  bindAgentMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ba876CpU2tAz504RKGrjH0l", "bindAgentMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var FrameMgr_1 = require("./FrameMgr");
    var UserMgr_1 = require("./UserMgr");
    var bindAgentMgr = function(_super) {
      __extends(bindAgentMgr, _super);
      function bindAgentMgr() {
        var _this = _super.call(this) || this;
        _this.routes = null;
        _this.agentID = null;
        _this.confirmNode = null;
        _this.inputNode = null;
        _this.routes = {
          "http.reqBindAgent": _this.http_reqBindAgent
        };
        return _this;
      }
      bindAgentMgr.prototype.reqBindAgent = function(ID, node) {
        this.agentID = ID;
      };
      bindAgentMgr.prototype.getAgentID = function() {
        return this.agentID;
      };
      bindAgentMgr.prototype.sendID = function() {
        var info = {
          code: this.agentID
        };
        this.send_msg("http.reqBindAgent", info);
      };
      bindAgentMgr.prototype.http_reqBindAgent = function(msg) {
        if (msg.result) {
          console.log(msg);
          this.gemit("closBindAgent");
          var text = "绑定成功";
          FrameMgr_1.default.getInstance().showTips(text, null, 35, cc.color(0, 255, 0), cc.p(0, 0), "Arial", 1e3);
          UserMgr_1.default.getInstance().reqMyInfo();
        } else {
          this.gemit("closeConfirm");
          var text = "绑定失败，请检查后重新输入";
          FrameMgr_1.default.getInstance().showTips(text, null, 35, cc.color(255, 0, 0), cc.p(0, 0), "Arial", 1e3);
        }
      };
      bindAgentMgr.getInstance = function() {
        this._instance || (this._instance = new bindAgentMgr());
        return this._instance;
      };
      return bindAgentMgr;
    }(BaseMgr_1.default);
    exports.default = bindAgentMgr;
    cc._RF.pop();
  }, {
    "../Libs/BaseMgr": "BaseMgr",
    "./FrameMgr": "FrameMgr",
    "./UserMgr": "UserMgr"
  } ],
  bull_preventionCheating: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "edcfanH1M5Gy7K7jgNmasjd", "bull_preventionCheating");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BullPosMgr_1 = require("./BullPosMgr");
    var RoomMgr_1 = require("../../Plat/GameMgrs/RoomMgr");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.uid = null;
        _this.ipWarnning = false;
        _this.distWarnning = false;
        _this.waiguaWarnning = false;
        return _this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          prefab_preventionCheating: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        _this.dict_one = {};
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.prefab_preventionCheating = ctrl.prefab_preventionCheating;
      };
      View.prototype.showOne = function(viewSeat, isGps, isCheat, isIp) {
        var targetNode = this.getOne(viewSeat);
        var children = targetNode.children;
        var gps = children[0];
        var cheat = children[1];
        var ip = children[2];
        gps.active = Boolean(isGps);
        cheat.active = Boolean(isCheat);
        ip.active = Boolean(isIp);
      };
      View.prototype.getOne = function(viewSeatId) {
        var curNode = this.dict_one[viewSeatId];
        if (!curNode) {
          curNode = cc.instantiate(this.ui.prefab_preventionCheating);
          curNode.parent = this.node;
          var posMgr = BullPosMgr_1.default.getInstance();
          var curPos = posMgr.getSeatCheckPos(viewSeatId);
          var minSeat = posMgr.getMinSeatId();
          curPos.x += viewSeatId < minSeat ? -curNode.width / 2 : curNode.width / 2;
          curNode.position = curPos;
          this.dict_one[viewSeatId] = curNode;
        }
        return curNode;
      };
      View.prototype.deleteOne = function(viewSeatId) {
        if (this.dict_one[viewSeatId]) {
          this.dict_one[viewSeatId].destroy();
          delete this.dict_one[viewSeatId];
        }
      };
      return View;
    }(BaseView_1.default);
    var Bull_preventionCheating = function(_super) {
      __extends(Bull_preventionCheating, _super);
      function Bull_preventionCheating() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.prefab_preventionCheating = null;
        return _this;
      }
      Bull_preventionCheating.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      Bull_preventionCheating.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqCheating": this.http_reqCheating,
          onLeaveRoom: this.onLeaveRoom
        };
      };
      Bull_preventionCheating.prototype.defineGlobalEvents = function() {};
      Bull_preventionCheating.prototype.connectUi = function() {};
      Bull_preventionCheating.prototype.start = function() {};
      Bull_preventionCheating.prototype.http_reqCheating = function(msg) {
        var result = msg.result;
        var room = RoomMgr_1.default.getInstance();
        for (var uid in result) {
          var seatId = room.getSeatIdByUid(uid);
          if (null == seatId) continue;
          var viewSeatId = room.getViewSeatId(seatId);
          var ipWarnning = room.getIpWarnningBySeatId(seatId);
          var distWarnning = room.getDistWarnningBySeatId(seatId);
          "0" != viewSeatId && this.view.showOne(room.getViewSeatId(seatId), distWarnning, false, ipWarnning);
        }
      };
      Bull_preventionCheating.prototype.onLeaveRoom = function(msg) {
        var seatId = msg.seatid;
        var viewSeatId = RoomMgr_1.default.getInstance().getViewSeatId(seatId);
        this.view.deleteOne(viewSeatId);
      };
      __decorate([ property({
        tooltip: "防作弊",
        type: cc.Prefab
      }) ], Bull_preventionCheating.prototype, "prefab_preventionCheating", void 0);
      Bull_preventionCheating = __decorate([ ccclass ], Bull_preventionCheating);
      return Bull_preventionCheating;
    }(BaseCtrl_1.default);
    exports.default = Bull_preventionCheating;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/RoomMgr": "RoomMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView",
    "./BullPosMgr": "BullPosMgr"
  } ],
  bull_settle_playerDetailCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f9f4fmSVtpJiJ4tKtEmMwVJ", "bull_settle_playerDetailCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BunchInfoMgr_1 = require("../../Plat/GameMgrs/BunchInfoMgr");
    var UiMgr_1 = require("../../Plat/GameMgrs/UiMgr");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var CONFIGS = {
      title: {
        nothing: 0,
        winer: 1,
        loser: 2,
        maxNiuniu: 3
      }
    };
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      Model.prototype.updateUserInfo = function() {
        var bunchMgr = BunchInfoMgr_1.default.getInstance();
        var bunchInfo = bunchMgr.getBunchInfo();
        var fangkaCfg = bunchInfo.roomValue;
        if (bunchInfo) {
          var mySeatId = bunchMgr.getMyLogicSeatId();
          var logicSeatId = void 0;
          logicSeatId = 0 == this.viewSeatId ? mySeatId : this.viewSeatId == mySeatId ? 0 : this.viewSeatId;
          console.log("当前的索引", logicSeatId);
          var leijiInfo = bunchInfo.leiji[logicSeatId];
          console.log("获取的累计信息= ", leijiInfo);
          var users = bunchMgr.getMembelist();
          var recordUserInfo = users[logicSeatId];
          if (!recordUserInfo) {
            ctrl.destroy();
            return;
          }
          console.log("获取的累计信息1= ", recordUserInfo);
          this.userInfo = {
            id: recordUserInfo.id,
            nickname: recordUserInfo.nickname,
            headid: recordUserInfo.headid,
            headurl: recordUserInfo.headurl,
            url: recordUserInfo.url
          };
          this.userInfo.zongshuying = leijiInfo.zongshuying;
          this.userInfo.title = leijiInfo.title;
          this.userInfo.isMaster = recordUserInfo.bowner;
          this.userInfo.isWinerPay = 2 == fangkaCfg.v_paytype;
          this.userInfo.cost = bunchInfo.costs[bunchMgr.getUidBySeatId(logicSeatId)];
          console.log("初始化玩家信息", this.userInfo);
        } else cc.error("bullTotalSettle bunchInfo is empty");
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          spriteFrame_dayingjia: null,
          spriteFrame_cishanduwang: null,
          spriteFrame_niuqichongtian: null,
          sprite_head: null,
          node_img_title: null,
          node_img_master: null,
          lbl_id: null,
          lbl_name: null,
          lbl_totalScore: null,
          node_payinfo: null,
          node_img_head: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.spriteFrame_niuqichongtian = ctrl.spriteFrame_niuqichongtian;
        this.ui.spriteFrame_cishanduwang = ctrl.spriteFrame_cishanduwang;
        this.ui.spriteFrame_dayingjia = ctrl.spriteFrame_dayingjia;
        this.ui.node_img_head = ctrl.node_img_head;
        this.ui.node_img_title = ctrl.node_img_title;
        this.ui.node_img_master = ctrl.node_img_master;
        this.ui.node_payinfo = ctrl.payinfo;
        this.ui.lbl_id = ctrl.lbl_id;
        this.ui.lbl_name = ctrl.lbl_name;
        this.ui.lbl_totalScore = ctrl.lbl_totalScore;
      };
      View.prototype.updateInfo = function() {
        this.setWinerPay();
        this.setTitle();
        this.setTotalSocre();
        this.setID();
        this.setName();
        this.setIsMaster();
        this.setHead();
      };
      View.prototype.setWinerPay = function() {
        var bunchMgr = BunchInfoMgr_1.default.getInstance();
        var bunchInfo = bunchMgr.getBunchInfo();
        var fangkaCfg = bunchInfo.roomValue;
        var lbl_paytype = this.ui.node_payinfo.getChildByName("lbl_paytype");
        var lbl_playercost = this.ui.node_payinfo.getChildByName("lbl_playercost");
        if (1 == fangkaCfg.v_paytype) {
          this.ui.node_payinfo.active = true;
          lbl_paytype.getComponent(cc.Label).string = "AA支付：";
          lbl_playercost.getComponent(cc.Label).string = this.model.userInfo.cost;
        } else if (0 == fangkaCfg.v_paytype) {
          var myseatID = bunchMgr.getMyLogicSeatId();
          if (this.model.userInfo.id == bunchInfo.roomOwner) {
            this.ui.node_payinfo.active = true;
            lbl_paytype.getComponent(cc.Label).string = "房主支付：";
            lbl_playercost.getComponent(cc.Label).string = this.model.userInfo.cost;
          }
        } else if (2 == fangkaCfg.v_paytype && this.model.userInfo.isWinerPay && parseInt(this.model.userInfo.zongshuying) > 0) {
          this.ui.node_payinfo.active = true;
          lbl_paytype.getComponent(cc.Label).string = "赢家支付：";
          lbl_playercost.getComponent(cc.Label).string = this.model.userInfo.cost;
        }
      };
      View.prototype.setTitle = function() {
        switch (this.model.userInfo.title) {
         case CONFIGS.title.winer:
          this.ui.node_img_title.active = true;
          this.ui.node_img_title.getComponent(cc.Sprite).spriteFrame = this.ui.spriteFrame_dayingjia;
          break;

         case CONFIGS.title.loser:
          this.ui.node_img_title.active = true;
          this.ui.node_img_title.getComponent(cc.Sprite).spriteFrame = this.ui.spriteFrame_cishanduwang;
          break;

         case CONFIGS.title.maxNiuniu:
          this.ui.node_img_title.active = true;
          this.ui.node_img_title.getComponent(cc.Sprite).spriteFrame = this.ui.spriteFrame_niuqichongtian;
        }
      };
      View.prototype.setTotalSocre = function() {
        var curValue = this.model.userInfo.zongshuying;
        if (parseInt(curValue) >= 0) {
          this.ui.lbl_totalScore.node.color = new cc.Color(255, 0, 0);
          this.ui.lbl_totalScore.string = "+" + curValue;
        } else {
          this.ui.lbl_totalScore.node.color = new cc.Color(0, 255, 0);
          this.ui.lbl_totalScore.string = curValue;
        }
      };
      View.prototype.setID = function() {
        this.ui.lbl_id.string = this.model.userInfo.id;
      };
      View.prototype.setName = function() {
        this.ui.lbl_name.string = this.changeStrLen(this.model.userInfo.nickname);
      };
      View.prototype.setIsMaster = function() {
        this.ui.node_img_master.active = this.model.userInfo.isMaster;
      };
      View.prototype.setHead = function() {
        var user = this.model.userInfo;
        UiMgr_1.default.getInstance().setUserHead(this.ui.node_img_head, user.headid || "number" == typeof user.url && user.url, user.headurl || "string" == typeof user.url && user.url);
      };
      View.prototype.changeStrLen = function(curStr) {
        if (null == curStr || null == curStr.length) return "";
        var newStr = "", limitNum = 6, curLen = 0;
        for (var i = 0; i < curStr.length; i++) if (curStr.charCodeAt(i) > 255) {
          if (curLen + 2 > limitNum) {
            newStr += "...";
            break;
          }
          newStr += curStr[i];
          curLen += 2;
        } else {
          if (curLen + 1 > limitNum) {
            newStr += "...";
            break;
          }
          newStr += curStr[i];
          curLen += 1;
        }
        return newStr;
      };
      return View;
    }(BaseView_1.default);
    var Bull_settle_playerDetailCtrl = function(_super) {
      __extends(Bull_settle_playerDetailCtrl, _super);
      function Bull_settle_playerDetailCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.spriteFrame_dayingjia = null;
        _this.spriteFrame_cishanduwang = null;
        _this.spriteFrame_niuqichongtian = null;
        _this.lbl_name = null;
        _this.lbl_id = null;
        _this.lbl_totalScore = null;
        _this.payinfo = null;
        _this.node_img_head = null;
        _this.node_img_title = null;
        _this.node_img_master = null;
        return _this;
      }
      Bull_settle_playerDetailCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.model.viewSeatId = this.node.parent.children.indexOf(this.node);
      };
      Bull_settle_playerDetailCtrl.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqMyInfo": this.http_reqMyInfo
        };
      };
      Bull_settle_playerDetailCtrl.prototype.defineGlobalEvents = function() {};
      Bull_settle_playerDetailCtrl.prototype.connectUi = function() {};
      Bull_settle_playerDetailCtrl.prototype.start = function() {
        this.model.updateUserInfo();
        this.view.updateInfo();
      };
      Bull_settle_playerDetailCtrl.prototype.http_reqMyInfo = function() {
        this.model.updateUserInfo();
        this.view.updateInfo();
      };
      __decorate([ property(cc.SpriteFrame) ], Bull_settle_playerDetailCtrl.prototype, "spriteFrame_dayingjia", void 0);
      __decorate([ property(cc.SpriteFrame) ], Bull_settle_playerDetailCtrl.prototype, "spriteFrame_cishanduwang", void 0);
      __decorate([ property(cc.SpriteFrame) ], Bull_settle_playerDetailCtrl.prototype, "spriteFrame_niuqichongtian", void 0);
      __decorate([ property(cc.Label) ], Bull_settle_playerDetailCtrl.prototype, "lbl_name", void 0);
      __decorate([ property(cc.Label) ], Bull_settle_playerDetailCtrl.prototype, "lbl_id", void 0);
      __decorate([ property(cc.Label) ], Bull_settle_playerDetailCtrl.prototype, "lbl_totalScore", void 0);
      __decorate([ property(cc.Node) ], Bull_settle_playerDetailCtrl.prototype, "payinfo", void 0);
      __decorate([ property(cc.Node) ], Bull_settle_playerDetailCtrl.prototype, "node_img_head", void 0);
      __decorate([ property(cc.Node) ], Bull_settle_playerDetailCtrl.prototype, "node_img_title", void 0);
      __decorate([ property(cc.Node) ], Bull_settle_playerDetailCtrl.prototype, "node_img_master", void 0);
      Bull_settle_playerDetailCtrl = __decorate([ ccclass ], Bull_settle_playerDetailCtrl);
      return Bull_settle_playerDetailCtrl;
    }(BaseCtrl_1.default);
    exports.default = Bull_settle_playerDetailCtrl;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../Plat/GameMgrs/UiMgr": "UiMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView"
  } ],
  bull_settle_rowContentCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4017a7f+XhDp4GiVfKS/Zd9", "bull_settle_rowContentCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BunchInfoMgr_1 = require("../../Plat/GameMgrs/BunchInfoMgr");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var NAMESTRLENGTH = 6;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      Model.prototype.updateInfo = function() {
        var bunchMgr = BunchInfoMgr_1.default.getInstance();
        var meijuInfo = bunchMgr.getBunchInfo().meiju;
        this.curInfo = {};
        this.peopleNum = 0;
        var info = meijuInfo[this.viewIndex][1]["score"];
        console.log("bull_settle_rowContentCtrl meiju scoreInfo= ", info);
        var list = bunchMgr.getMembelist();
        var mySeatId = BunchInfoMgr_1.default.getInstance().getMyLogicSeatId();
        var curSeatId;
        for (var logicSeatId in info) {
          if (null == logicSeatId) continue;
          curSeatId = 0 == parseInt(logicSeatId) ? mySeatId : logicSeatId == mySeatId ? 0 : logicSeatId;
          var userInfo = {
            nickname: ""
          };
          null != list && null != list.length && (userInfo = list[logicSeatId]);
          this.curInfo[curSeatId] = {
            score: info[logicSeatId],
            nickName: userInfo.nickname
          };
          this.peopleNum += 1;
        }
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          node_names: null,
          node_scores: null,
          lbl_index: null
        };
        _this.node = null;
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.lbl_index = ctrl.lbl_index;
        this.ui.node_scores = ctrl.node_scores;
        this.ui.node_names = ctrl.node_names;
      };
      View.prototype.updateInfo = function() {
        var maxNum = this.ui.node_names.children.length;
        var data;
        console.log("rowContent show data= ", this.model.curInfo);
        var mySeatId = 0;
        if (0 == this.model.peopleNum) {
          console.log("Bull_settle_rowContent updateInfo = ", this.model.peopleNum);
          mySeatId = BunchInfoMgr_1.default.getInstance().getMyLogicSeatId();
        }
        var curId;
        for (var logicSeatId = 0; logicSeatId < maxNum; logicSeatId++) {
          curId = 0 == logicSeatId && this.model.curInfo[0] ? mySeatId : logicSeatId == mySeatId ? 0 : logicSeatId;
          data = this.model.curInfo[curId];
          if (data) {
            this.setName(logicSeatId, data.nickName);
            this.setScore(logicSeatId, data.score);
          } else {
            this.setName(logicSeatId, "");
            this.setScore(logicSeatId, "");
          }
        }
        this.setIndex(this.model.viewIndex + 1);
      };
      View.prototype.setName = function(viewSeatId, curName) {
        this.ui.node_names.children[viewSeatId].getComponent(cc.Label).string = curName;
      };
      View.prototype.setScore = function(viewSeatId, scroeValue) {
        this.ui.node_scores.children[viewSeatId].getComponent(cc.Label).string = scroeValue;
        parseInt(scroeValue) > 0 ? this.ui.node_scores.children[viewSeatId].getComponent(cc.Label).node.color = new cc.Color(255, 0, 0) : parseInt(scroeValue) < 0 ? this.ui.node_scores.children[viewSeatId].getComponent(cc.Label).node.color = new cc.Color(0, 255, 0) : this.ui.node_scores.children[viewSeatId].getComponent(cc.Label).node.color = new cc.Color(255, 97, 0);
      };
      View.prototype.setIndex = function(index) {
        this.ui.lbl_index.string = "第\n" + index + "\n局";
      };
      return View;
    }(BaseView_1.default);
    var Bull_settle_rowContent = function(_super) {
      __extends(Bull_settle_rowContent, _super);
      function Bull_settle_rowContent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.view = null;
        _this.model = null;
        _this.node_names = null;
        _this.node_scores = null;
        _this.lbl_index = null;
        return _this;
      }
      Bull_settle_rowContent.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
        this.model.viewIndex = this.node.parent.children.indexOf(this.node);
        console.log("bull_settle_rowContentCtrl, viewIndex=", this.model.viewIndex);
      };
      Bull_settle_rowContent.prototype.defineNetEvents = function() {
        this.n_events = {
          "http.reqUsers": this.http_reqUsers
        };
      };
      Bull_settle_rowContent.prototype.defineGlobalEvents = function() {};
      Bull_settle_rowContent.prototype.connectUi = function() {};
      Bull_settle_rowContent.prototype.start = function() {
        this.model.updateInfo();
        this.view.updateInfo();
      };
      Bull_settle_rowContent.prototype.http_reqUsers = function() {
        this.model.updateInfo();
        this.view.updateInfo();
      };
      __decorate([ property(cc.Node) ], Bull_settle_rowContent.prototype, "node_names", void 0);
      __decorate([ property(cc.Node) ], Bull_settle_rowContent.prototype, "node_scores", void 0);
      __decorate([ property(cc.Label) ], Bull_settle_rowContent.prototype, "lbl_index", void 0);
      Bull_settle_rowContent = __decorate([ ccclass ], Bull_settle_rowContent);
      return Bull_settle_rowContent;
    }(BaseCtrl_1.default);
    exports.default = Bull_settle_rowContent;
    cc._RF.pop();
  }, {
    "../../Plat/GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView"
  } ],
  compressedObject: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "83264UR/rRDc6h9Xu/+gn1s", "compressedObject");
    "use strict";
    function CompressedObject() {
      this.compressedSize = 0;
      this.uncompressedSize = 0;
      this.crc32 = 0;
      this.compressionMethod = null;
      this.compressedContent = null;
    }
    CompressedObject.prototype = {
      getContent: function getContent() {
        return null;
      },
      getCompressedContent: function getCompressedContent() {
        return null;
      }
    };
    module.exports = CompressedObject;
    cc._RF.pop();
  }, {} ],
  compressions: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "455230igH1NRJiMg0LyVIE2", "compressions");
    "use strict";
    exports.STORE = {
      magic: "\0\0",
      compress: function compress(content, compressionOptions) {
        return content;
      },
      uncompress: function uncompress(content) {
        return content;
      },
      compressInputType: null,
      uncompressInputType: null
    };
    exports.DEFLATE = require("./flate");
    cc._RF.pop();
  }, {
    "./flate": "flate"
  } ],
  crc32: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d18fczRoUJJU7zES4xWaxlv", "crc32");
    "use strict";
    var utils = require("./utils");
    var table = [ 0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918e3, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117 ];
    module.exports = function crc32(input, crc) {
      if ("undefined" === typeof input || !input.length) return 0;
      var isArray = "string" !== utils.getTypeOf(input);
      "undefined" == typeof crc && (crc = 0);
      var x = 0;
      var y = 0;
      var b = 0;
      crc ^= -1;
      for (var i = 0, iTop = input.length; i < iTop; i++) {
        b = isArray ? input[i] : input.charCodeAt(i);
        y = 255 & (crc ^ b);
        x = table[y];
        crc = crc >>> 8 ^ x;
      }
      return -1 ^ crc;
    };
    cc._RF.pop();
  }, {
    "./utils": "utils"
  } ],
  customserviceCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7d90fhi5opLoZ+E2sqbIlDw", "customserviceCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Libs/BaseCtrl");
    var BaseView_1 = require("../../Libs/BaseView");
    var BaseModel_1 = require("../../Libs/BaseModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        return _super.call(this) || this;
      }
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          web_content: null,
          btn_close: null
        };
        _this.node = ctrl.node;
        _this.initUi();
        _this.addGrayLayer();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.web_content = ctrl.web_content;
        this.ui.btn_close = ctrl.btn_close;
      };
      return View;
    }(BaseView_1.default);
    var customserviceCtrl = function(_super) {
      __extends(customserviceCtrl, _super);
      function customserviceCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.web_content = null;
        _this.btn_close = null;
        return _this;
      }
      customserviceCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      customserviceCtrl.prototype.defineNetEvents = function() {};
      customserviceCtrl.prototype.defineGlobalEvents = function() {};
      customserviceCtrl.prototype.connectUi = function() {
        this.connect(G_UiType.button, this.ui.btn_close, this.btn_close_cb, "关闭按钮");
      };
      customserviceCtrl.prototype.btn_close_cb = function() {
        this.finish();
      };
      customserviceCtrl.prototype.start = function() {};
      __decorate([ property(cc.WebView) ], customserviceCtrl.prototype, "web_content", void 0);
      __decorate([ property(cc.Node) ], customserviceCtrl.prototype, "btn_close", void 0);
      customserviceCtrl = __decorate([ ccclass ], customserviceCtrl);
      return customserviceCtrl;
    }(BaseCtrl_1.default);
    exports.default = customserviceCtrl;
    cc._RF.pop();
  }, {
    "../../Libs/BaseCtrl": "BaseCtrl",
    "../../Libs/BaseModel": "BaseModel",
    "../../Libs/BaseView": "BaseView"
  } ],
  dataReader: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cf1a4J2+pROMbpcUqAFHlTC", "dataReader");
    "use strict";
    var utils = require("./utils");
    function DataReader(data) {
      this.data = null;
      this.length = 0;
      this.index = 0;
    }
    DataReader.prototype = {
      checkOffset: function checkOffset(offset) {
        this.checkIndex(this.index + offset);
      },
      checkIndex: function checkIndex(newIndex) {
        if (this.length < newIndex || newIndex < 0) throw new Error("End of data reached (data length = " + this.length + ", asked index = " + newIndex + "). Corrupted zip ?");
      },
      setIndex: function setIndex(newIndex) {
        this.checkIndex(newIndex);
        this.index = newIndex;
      },
      skip: function skip(n) {
        this.setIndex(this.index + n);
      },
      byteAt: function byteAt(i) {},
      readInt: function readInt(size) {
        var result = 0, i;
        this.checkOffset(size);
        for (i = this.index + size - 1; i >= this.index; i--) result = (result << 8) + this.byteAt(i);
        this.index += size;
        return result;
      },
      readString: function readString(size) {
        return utils.transformTo("string", this.readData(size));
      },
      readData: function readData(size) {},
      lastIndexOfSignature: function lastIndexOfSignature(sig) {},
      readDate: function readDate() {
        var dostime = this.readInt(4);
        return new Date(1980 + (dostime >> 25 & 127), (dostime >> 21 & 15) - 1, dostime >> 16 & 31, dostime >> 11 & 31, dostime >> 5 & 63, (31 & dostime) << 1);
      }
    };
    module.exports = DataReader;
    cc._RF.pop();
  }, {
    "./utils": "utils"
  } ],
  defaults: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f01851E0wNIR4WbRT0XV/n2", "defaults");
    "use strict";
    exports.base64 = false;
    exports.binary = false;
    exports.dir = false;
    exports.createFolders = false;
    exports.date = null;
    exports.compression = null;
    exports.compressionOptions = null;
    exports.comment = null;
    exports.unixPermissions = null;
    exports.dosPermissions = null;
    cc._RF.pop();
  }, {} ],
  deprecatedPublicUtils: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "190af/ihpZABqojYjdkGnOy", "deprecatedPublicUtils");
    "use strict";
    var utils = require("./utils");
    exports.string2binary = function(str) {
      return utils.string2binary(str);
    };
    exports.string2Uint8Array = function(str) {
      return utils.transformTo("uint8array", str);
    };
    exports.uint8Array2String = function(array) {
      return utils.transformTo("string", array);
    };
    exports.string2Blob = function(str) {
      var buffer = utils.transformTo("arraybuffer", str);
      return utils.arrayBuffer2Blob(buffer);
    };
    exports.arrayBuffer2Blob = function(buffer) {
      return utils.arrayBuffer2Blob(buffer);
    };
    exports.transformTo = function(outputType, input) {
      return utils.transformTo(outputType, input);
    };
    exports.getTypeOf = function(input) {
      return utils.getTypeOf(input);
    };
    exports.checkSupport = function(type) {
      return utils.checkSupport(type);
    };
    exports.MAX_VALUE_16BITS = utils.MAX_VALUE_16BITS;
    exports.MAX_VALUE_32BITS = utils.MAX_VALUE_32BITS;
    exports.pretty = function(str) {
      return utils.pretty(str);
    };
    exports.findCompression = function(compressionMethod) {
      return utils.findCompression(compressionMethod);
    };
    exports.isRegExp = function(object) {
      return utils.isRegExp(object);
    };
    cc._RF.pop();
  }, {
    "./utils": "utils"
  } ],
  flate: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "870c77smEtKeL2NRF7DHGIe", "flate");
    "use strict";
    var USE_TYPEDARRAY = "undefined" !== typeof Uint8Array && "undefined" !== typeof Uint16Array && "undefined" !== typeof Uint32Array;
    var pako = require("pako");
    exports.uncompressInputType = USE_TYPEDARRAY ? "uint8array" : "array";
    exports.compressInputType = USE_TYPEDARRAY ? "uint8array" : "array";
    exports.magic = "\b\0";
    exports.compress = function(input, compressionOptions) {
      return pako.deflateRaw(input, {
        level: compressionOptions.level || -1
      });
    };
    exports.uncompress = function(input) {
      return pako.inflateRaw(input);
    };
    cc._RF.pop();
  }, {
    pako: 5
  } ],
  index: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9947dKiza9AgqpWf0xkCu/X", "index");
    "use strict";
    var base64 = require("./base64");
    function JSZip(data, options) {
      if (!(this instanceof JSZip)) return new JSZip(data, options);
      this.files = {};
      this.comment = null;
      this.root = "";
      data && this.load(data, options);
      this.clone = function() {
        var newObj = new JSZip();
        for (var i in this) "function" !== typeof this[i] && (newObj[i] = this[i]);
        return newObj;
      };
    }
    JSZip.prototype = require("./object");
    JSZip.prototype.load = require("./load");
    JSZip.support = require("./support");
    JSZip.defaults = require("./defaults");
    JSZip.utils = require("./deprecatedPublicUtils");
    JSZip.base64 = {
      encode: function encode(input) {
        return base64.encode(input);
      },
      decode: function decode(input) {
        return base64.decode(input);
      }
    };
    JSZip.compressions = require("./compressions");
    window.JSZip = JSZip;
    module.exports = JSZip;
    cc._RF.pop();
  }, {
    "./base64": "base64",
    "./compressions": "compressions",
    "./defaults": "defaults",
    "./deprecatedPublicUtils": "deprecatedPublicUtils",
    "./load": "load",
    "./object": "object",
    "./support": "support"
  } ],
  ios: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "70a87jycIROMpwfbjoVK+9G", "ios");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var FrameMgr_1 = require("../FrameMgr");
    var ShareMgr_1 = require("../ShareMgr");
    var ServerMgr_1 = require("../../../AppStart/AppMgrs/ServerMgr");
    var GpsSdk_1 = require("../../../Plat/SdkMgrs/GpsSdk");
    var UserMgr_1 = require("../UserMgr");
    var GEventDef_1 = require("../GEventDef");
    var platform_ios = function() {
      function platform_ios() {
        this.iosClassName = "AppController";
        this.G_NETWORK_CHANGE = "networkChange";
        this.G_BATTERY_CHANGE = "batteryChange";
        this.NETWORK_CALL_NAME = "G_PLATFORM.onNetworkChange";
        this.BATTERY_CALL_NAME = "G_PLATFORM.onBatteryChange";
        this.G_LOCATION_RESULT = "locationResult";
        this.G_WECHAT_EMPOWERMENT_SUCCESS = "weChat_empowerment_success";
      }
      platform_ios.getInstance = function() {
        this._platform_ios || (this._platform_ios = new platform_ios());
        return this._platform_ios;
      };
      platform_ios.prototype.getCurNetWorkData = function() {
        var methodName = "listenNetWorkingStatus:";
        jsb.reflection.callStaticMethod(this.iosClassName, methodName, this.NETWORK_CALL_NAME);
        console.log("getCurNetWorkData ------\x3e ");
      };
      platform_ios.prototype.getBatteryPercent = function() {
        var methodName = "callStaticMethod:";
        var o = jsb.reflection.callStaticMethod(this.iosClassName, methodName, this.BATTERY_CALL_NAME);
        console.log("getBatteryPercent ------\x3e ", o);
        G_FRAME.globalEmitter.emit(this.G_BATTERY_CHANGE, 100 * Number(o));
      };
      platform_ios.prototype.onNetworkChange = function(args) {
        console.log("监听到 IOS 网络变化", args);
        var data = JSON.parse(args);
        null != data && (data.level = Math.min(5, Math.max(1, Number(data.level))));
        G_FRAME.globalEmitter.emit(this.G_NETWORK_CHANGE, data);
      };
      platform_ios.prototype.onBatteryChange = function(args) {
        console.log("监听到 IOS 电量变化", args);
        G_FRAME.globalEmitter.emit(this.G_BATTERY_CHANGE, 100 * Number(args));
      };
      platform_ios.prototype.weChatLogin = function() {
        var methodName = "weChatLogin";
        jsb.reflection.callStaticMethod(this.iosClassName, methodName);
      };
      platform_ios.prototype.wxShareImage = function(type) {
        var _this = this;
        var methodName = "shareImage:path:";
        this.screenshot(function(path) {
          jsb.reflection.callStaticMethod(_this.iosClassName, methodName, type, path);
        });
      };
      platform_ios.prototype.wxShareSpecificImage = function(type, path) {
        var methodName = "shareImage:path:";
        jsb.reflection.callStaticMethod(this.iosClassName, methodName, type, path);
      };
      platform_ios.prototype.wxShareContent = function(type, title, content, url) {
        var methodName = "shareContent:title:content:url:";
        jsb.reflection.callStaticMethod(this.iosClassName, methodName, type, title, content, url);
      };
      platform_ios.prototype.wxShareRoom = function(type, title, content, password) {
        var url = ServerMgr_1.default.getInstance().getInviteFriendJoinUrl(UserMgr_1.default.getInstance().getUid(), password);
        this.wxShareContent(type, title, content, url);
      };
      platform_ios.prototype.wxShareClub = function(type, title, content, club_id) {
        var url = ServerMgr_1.default.getInstance().getClubInviteFriendJoinUrl(UserMgr_1.default.getInstance().getUid(), club_id);
        this.wxShareContent(type, title, content, url);
      };
      platform_ios.prototype.onWeChatShare = function() {
        ShareMgr_1.default.getInstance().shareSuccess();
      };
      platform_ios.prototype.onWeChatloginSuccess = function(userInfo) {
        cc.log("ios to js -> onWeChatloginSuccess: ", userInfo);
        var jsonObj = JSON.parse(userInfo);
        var msg = {
          nickname: jsonObj.nickname,
          headurl: jsonObj.headimgurl,
          sex: "string" == typeof jsonObj.sex ? Number(jsonObj.sex) : jsonObj.sex,
          username: jsonObj.unionid,
          plat: 2
        };
        G_FRAME.globalEmitter.emit(this.G_WECHAT_EMPOWERMENT_SUCCESS, msg);
      };
      platform_ios.prototype.copyToClipboard = function(text) {
        var methodName = "copyToClipboard:";
        var o = jsb.reflection.callStaticMethod(this.iosClassName, methodName, "" + text);
        o && this.showGreenTip("已复制到剪切板");
      };
      platform_ios.prototype.moblieVibrator = function() {
        var methodName = "moblieVibrator";
        jsb.reflection.callStaticMethod(this.iosClassName, methodName);
      };
      platform_ios.prototype.gainToClipboard = function() {
        var methodName = "gainToClipboard";
        var o = jsb.reflection.callStaticMethod(this.iosClassName, methodName);
        return o;
      };
      platform_ios.prototype.startLocation = function(type) {
        var methodName = "startLocation";
        jsb.reflection.callStaticMethod(this.iosClassName, methodName);
      };
      platform_ios.prototype.stopLocation = function() {};
      platform_ios.prototype.global_info = function(msg) {
        this.showGreenTip(msg);
      };
      platform_ios.prototype.locationResult = function(msg) {
        console.log("定位结果回调", msg);
        if (parseInt(msg.code)) {
          GpsSdk_1.default.getInstance().sendGpsInfo();
          G_FRAME.globalEmitter.emit(this.G_LOCATION_RESULT);
          this.showGreenTip(msg.content);
        } else this.showTip(msg.content);
      };
      platform_ios.prototype.screenshot = function(func) {
        if (!cc.sys.isNative) return;
        var dirpath = jsb.fileUtils.getWritablePath() + "screenshot/";
        jsb.fileUtils.isDirectoryExist(dirpath) || jsb.fileUtils.createDirectory(dirpath);
        var name = "screenshot-" + new Date().valueOf() + ".png";
        var filepath = dirpath + name;
        var size = cc.director.getVisibleSize();
        var rt = cc.RenderTexture.create(size.width, size.height, cc.Texture2D.PIXEL_FORMAT_RGBA8888, gl.DEPTH24_STENCIL8_OES);
        cc.director.getScene()._sgNode.addChild(rt);
        rt.setVisible(false);
        rt.begin();
        cc.director.getScene()._sgNode.visit();
        rt.end();
        rt.saveToFile("screenshot/" + name, cc.ImageFormat.PNG, true, function() {
          cc.log("save succ");
          rt.removeFromParent();
          func && func(filepath);
        });
      };
      platform_ios.prototype.showTip = function(content) {
        FrameMgr_1.default.getInstance().showTips(content, null, 35, cc.color(220, 24, 63), cc.p(0, 0), "Arial", 1500);
      };
      platform_ios.prototype.showGreenTip = function(content) {
        FrameMgr_1.default.getInstance().showTips(content, null, 35, cc.color(0, 255, 50), cc.p(0, 0), "Arial", 1500);
      };
      platform_ios.prototype.onJoinVoiceRoom = function() {
        G_FRAME.globalEmitter.emit(GEventDef_1.default.voice_JoinRoomOk, null);
      };
      return platform_ios;
    }();
    exports.default = platform_ios;
    cc._RF.pop();
  }, {
    "../../../AppStart/AppMgrs/ServerMgr": "ServerMgr",
    "../../../Plat/SdkMgrs/GpsSdk": "GpsSdk",
    "../FrameMgr": "FrameMgr",
    "../GEventDef": "GEventDef",
    "../ShareMgr": "ShareMgr",
    "../UserMgr": "UserMgr"
  } ],
  license_header: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "162e7HH8L5Iw6QFVqu/k0/k", "license_header");
    "use strict";
    cc._RF.pop();
  }, {} ],
  load: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "453baz7kKBE27keE28+ZV09", "load");
    "use strict";
    var base64 = require("./base64");
    var ZipEntries = require("./zipEntries");
    module.exports = function(data, options) {
      var files, zipEntries, i, input;
      options = options || {};
      options.base64 && (data = base64.decode(data));
      zipEntries = new ZipEntries(data, options);
      files = zipEntries.files;
      for (i = 0; i < files.length; i++) {
        input = files[i];
        this.file(input.fileName, input.decompressed, {
          binary: true,
          optimizedBinaryString: true,
          date: input.date,
          dir: input.dir,
          comment: input.fileComment.length ? input.fileComment : null,
          unixPermissions: input.unixPermissions,
          dosPermissions: input.dosPermissions,
          createFolders: options.createFolders
        });
      }
      zipEntries.zipComment.length && (this.comment = zipEntries.zipComment);
      return this;
    };
    cc._RF.pop();
  }, {
    "./base64": "base64",
    "./zipEntries": "zipEntries"
  } ],
  nodeBufferReader: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b2328gi4v5CpJQ0boxjF2dg", "nodeBufferReader");
    "use strict";
    var Uint8ArrayReader = require("./uint8ArrayReader");
    function NodeBufferReader(data) {
      this.data = data;
      this.length = this.data.length;
      this.index = 0;
    }
    NodeBufferReader.prototype = new Uint8ArrayReader();
    NodeBufferReader.prototype.readData = function(size) {
      this.checkOffset(size);
      var result = this.data.slice(this.index, this.index + size);
      this.index += size;
      return result;
    };
    module.exports = NodeBufferReader;
    cc._RF.pop();
  }, {
    "./uint8ArrayReader": "uint8ArrayReader"
  } ],
  nodeBuffer: [ function(require, module, exports) {
    (function(Buffer) {
      "use strict";
      cc._RF.push(module, "ff10f6nWz9NRogRHPmV5KkN", "nodeBuffer");
      "use strict";
      module.exports = function(data, encoding) {
        return new Buffer(data, encoding);
      };
      module.exports.test = function(b) {
        return Buffer.isBuffer(b);
      };
      cc._RF.pop();
    }).call(this, require("buffer").Buffer);
  }, {
    buffer: 2
  } ],
  object: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1850eAzdqhPRLNf7KlGCDWx", "object");
    "use strict";
    var support = require("./support");
    var utils = require("./utils");
    var _crc = require("./crc32");
    var signature = require("./signature");
    var defaults = require("./defaults");
    var base64 = require("./base64");
    var compressions = require("./compressions");
    var CompressedObject = require("./compressedObject");
    var nodeBuffer = require("./nodeBuffer");
    var utf8 = require("./utf8");
    var StringWriter = require("./stringWriter");
    var Uint8ArrayWriter = require("./uint8ArrayWriter");
    var getRawData = function getRawData(file) {
      if (file._data instanceof CompressedObject) {
        file._data = file._data.getContent();
        file.options.binary = true;
        file.options.base64 = false;
        if ("uint8array" === utils.getTypeOf(file._data)) {
          var copy = file._data;
          file._data = new Uint8Array(copy.length);
          0 !== copy.length && file._data.set(copy, 0);
        }
      }
      return file._data;
    };
    var getBinaryData = function getBinaryData(file) {
      var result = getRawData(file), type = utils.getTypeOf(result);
      if ("string" === type) {
        if (!file.options.binary && support.nodebuffer) return nodeBuffer(result, "utf-8");
        return file.asBinary();
      }
      return result;
    };
    var dataToString = function dataToString(asUTF8) {
      var result = getRawData(this);
      if (null === result || "undefined" === typeof result) return "";
      this.options.base64 && (result = base64.decode(result));
      result = asUTF8 && this.options.binary ? out.utf8decode(result) : utils.transformTo("string", result);
      asUTF8 || this.options.binary || (result = utils.transformTo("string", out.utf8encode(result)));
      return result;
    };
    var ZipObject = function ZipObject(name, data, options) {
      this.name = name;
      this.dir = options.dir;
      this.date = options.date;
      this.comment = options.comment;
      this.unixPermissions = options.unixPermissions;
      this.dosPermissions = options.dosPermissions;
      this._data = data;
      this.options = options;
      this._initialMetadata = {
        dir: options.dir,
        date: options.date
      };
    };
    ZipObject.prototype = {
      asText: function asText() {
        return dataToString.call(this, true);
      },
      asBinary: function asBinary() {
        return dataToString.call(this, false);
      },
      asNodeBuffer: function asNodeBuffer() {
        var result = getBinaryData(this);
        return utils.transformTo("nodebuffer", result);
      },
      asUint8Array: function asUint8Array() {
        var result = getBinaryData(this);
        return utils.transformTo("uint8array", result);
      },
      asArrayBuffer: function asArrayBuffer() {
        return this.asUint8Array().buffer;
      }
    };
    var decToHex = function decToHex(dec, bytes) {
      var hex = "", i;
      for (i = 0; i < bytes; i++) {
        hex += String.fromCharCode(255 & dec);
        dec >>>= 8;
      }
      return hex;
    };
    var extend = function extend() {
      var result = {}, i, attr;
      for (i = 0; i < arguments.length; i++) for (attr in arguments[i]) arguments[i].hasOwnProperty(attr) && "undefined" === typeof result[attr] && (result[attr] = arguments[i][attr]);
      return result;
    };
    var prepareFileAttrs = function prepareFileAttrs(o) {
      o = o || {};
      true !== o.base64 || null !== o.binary && void 0 !== o.binary || (o.binary = true);
      o = extend(o, defaults);
      o.date = o.date || new Date();
      null !== o.compression && (o.compression = o.compression.toUpperCase());
      return o;
    };
    var fileAdd = function fileAdd(name, data, o) {
      var dataType = utils.getTypeOf(data), parent;
      o = prepareFileAttrs(o);
      "string" === typeof o.unixPermissions && (o.unixPermissions = parseInt(o.unixPermissions, 8));
      o.unixPermissions && 16384 & o.unixPermissions && (o.dir = true);
      o.dosPermissions && 16 & o.dosPermissions && (o.dir = true);
      o.dir && (name = forceTrailingSlash(name));
      o.createFolders && (parent = parentFolder(name)) && folderAdd.call(this, parent, true);
      if (o.dir || null === data || "undefined" === typeof data) {
        o.base64 = false;
        o.binary = false;
        data = null;
        dataType = null;
      } else if ("string" === dataType) o.binary && !o.base64 && true !== o.optimizedBinaryString && (data = utils.string2binary(data)); else {
        o.base64 = false;
        o.binary = true;
        if (!dataType && !(data instanceof CompressedObject)) throw new Error("The data of '" + name + "' is in an unsupported format !");
        "arraybuffer" === dataType && (data = utils.transformTo("uint8array", data));
      }
      var object = new ZipObject(name, data, o);
      this.files[name] = object;
      return object;
    };
    var parentFolder = function parentFolder(path) {
      "/" == path.slice(-1) && (path = path.substring(0, path.length - 1));
      var lastSlash = path.lastIndexOf("/");
      return lastSlash > 0 ? path.substring(0, lastSlash) : "";
    };
    var forceTrailingSlash = function forceTrailingSlash(path) {
      "/" != path.slice(-1) && (path += "/");
      return path;
    };
    var folderAdd = function folderAdd(name, createFolders) {
      createFolders = "undefined" !== typeof createFolders && createFolders;
      name = forceTrailingSlash(name);
      this.files[name] || fileAdd.call(this, name, null, {
        dir: true,
        createFolders: createFolders
      });
      return this.files[name];
    };
    var generateCompressedObjectFrom = function generateCompressedObjectFrom(file, compression, compressionOptions) {
      var result = new CompressedObject(), content;
      if (file._data instanceof CompressedObject) {
        result.uncompressedSize = file._data.uncompressedSize;
        result.crc32 = file._data.crc32;
        if (0 === result.uncompressedSize || file.dir) {
          compression = compressions["STORE"];
          result.compressedContent = "";
          result.crc32 = 0;
        } else if (file._data.compressionMethod === compression.magic) result.compressedContent = file._data.getCompressedContent(); else {
          content = file._data.getContent();
          result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content), compressionOptions);
        }
      } else {
        content = getBinaryData(file);
        if (!content || 0 === content.length || file.dir) {
          compression = compressions["STORE"];
          content = "";
        }
        result.uncompressedSize = content.length;
        result.crc32 = _crc(content);
        result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content), compressionOptions);
      }
      result.compressedSize = result.compressedContent.length;
      result.compressionMethod = compression.magic;
      return result;
    };
    var generateUnixExternalFileAttr = function generateUnixExternalFileAttr(unixPermissions, isDir) {
      var result = unixPermissions;
      unixPermissions || (result = isDir ? 16893 : 33204);
      return (65535 & result) << 16;
    };
    var generateDosExternalFileAttr = function generateDosExternalFileAttr(dosPermissions, isDir) {
      return 63 & (dosPermissions || 0);
    };
    var generateZipParts = function generateZipParts(name, file, compressedObject, offset, platform) {
      var data = compressedObject.compressedContent, utfEncodedFileName = utils.transformTo("string", utf8.utf8encode(file.name)), comment = file.comment || "", utfEncodedComment = utils.transformTo("string", utf8.utf8encode(comment)), useUTF8ForFileName = utfEncodedFileName.length !== file.name.length, useUTF8ForComment = utfEncodedComment.length !== comment.length, o = file.options, dosTime, dosDate, extraFields = "", unicodePathExtraField = "", unicodeCommentExtraField = "", dir, date;
      dir = file._initialMetadata.dir !== file.dir ? file.dir : o.dir;
      date = file._initialMetadata.date !== file.date ? file.date : o.date;
      var extFileAttr = 0;
      var versionMadeBy = 0;
      dir && (extFileAttr |= 16);
      if ("UNIX" === platform) {
        versionMadeBy = 798;
        extFileAttr |= generateUnixExternalFileAttr(file.unixPermissions, dir);
      } else {
        versionMadeBy = 20;
        extFileAttr |= generateDosExternalFileAttr(file.dosPermissions, dir);
      }
      dosTime = date.getHours();
      dosTime <<= 6;
      dosTime |= date.getMinutes();
      dosTime <<= 5;
      dosTime |= date.getSeconds() / 2;
      dosDate = date.getFullYear() - 1980;
      dosDate <<= 4;
      dosDate |= date.getMonth() + 1;
      dosDate <<= 5;
      dosDate |= date.getDate();
      if (useUTF8ForFileName) {
        unicodePathExtraField = decToHex(1, 1) + decToHex(_crc(utfEncodedFileName), 4) + utfEncodedFileName;
        extraFields += "up" + decToHex(unicodePathExtraField.length, 2) + unicodePathExtraField;
      }
      if (useUTF8ForComment) {
        unicodeCommentExtraField = decToHex(1, 1) + decToHex(this.crc32(utfEncodedComment), 4) + utfEncodedComment;
        extraFields += "uc" + decToHex(unicodeCommentExtraField.length, 2) + unicodeCommentExtraField;
      }
      var header = "";
      header += "\n\0";
      header += useUTF8ForFileName || useUTF8ForComment ? "\0\b" : "\0\0";
      header += compressedObject.compressionMethod;
      header += decToHex(dosTime, 2);
      header += decToHex(dosDate, 2);
      header += decToHex(compressedObject.crc32, 4);
      header += decToHex(compressedObject.compressedSize, 4);
      header += decToHex(compressedObject.uncompressedSize, 4);
      header += decToHex(utfEncodedFileName.length, 2);
      header += decToHex(extraFields.length, 2);
      var fileRecord = signature.LOCAL_FILE_HEADER + header + utfEncodedFileName + extraFields;
      var dirRecord = signature.CENTRAL_FILE_HEADER + decToHex(versionMadeBy, 2) + header + decToHex(utfEncodedComment.length, 2) + "\0\0\0\0" + decToHex(extFileAttr, 4) + decToHex(offset, 4) + utfEncodedFileName + extraFields + utfEncodedComment;
      return {
        fileRecord: fileRecord,
        dirRecord: dirRecord,
        compressedObject: compressedObject
      };
    };
    var out = {
      load: function load(stream, options) {
        throw new Error("Load method is not defined. Is the file jszip-load.js included ?");
      },
      filter: function filter(search) {
        var result = [], filename, relativePath, file, fileClone;
        for (filename in this.files) {
          if (!this.files.hasOwnProperty(filename)) continue;
          file = this.files[filename];
          fileClone = new ZipObject(file.name, file._data, extend(file.options));
          relativePath = filename.slice(this.root.length, filename.length);
          filename.slice(0, this.root.length) === this.root && search(relativePath, fileClone) && result.push(fileClone);
        }
        return result;
      },
      file: function file(name, data, o) {
        if (1 === arguments.length) {
          if (utils.isRegExp(name)) {
            var regexp = name;
            return this.filter(function(relativePath, file) {
              return !file.dir && regexp.test(relativePath);
            });
          }
          return this.filter(function(relativePath, file) {
            return !file.dir && relativePath === name;
          })[0] || null;
        }
        name = this.root + name;
        fileAdd.call(this, name, data, o);
        return this;
      },
      folder: function folder(arg) {
        if (!arg) return this;
        if (utils.isRegExp(arg)) return this.filter(function(relativePath, file) {
          return file.dir && arg.test(relativePath);
        });
        var name = this.root + arg;
        var newFolder = folderAdd.call(this, name);
        var ret = this.clone();
        ret.root = newFolder.name;
        return ret;
      },
      remove: function remove(name) {
        name = this.root + name;
        var file = this.files[name];
        if (!file) {
          "/" != name.slice(-1) && (name += "/");
          file = this.files[name];
        }
        if (file && !file.dir) delete this.files[name]; else {
          var kids = this.filter(function(relativePath, file) {
            return file.name.slice(0, name.length) === name;
          });
          for (var i = 0; i < kids.length; i++) delete this.files[kids[i].name];
        }
        return this;
      },
      generate: function generate(options) {
        options = extend(options || {}, {
          base64: true,
          compression: "STORE",
          compressionOptions: null,
          type: "base64",
          platform: "DOS",
          comment: null,
          mimeType: "application/zip"
        });
        utils.checkSupport(options.type);
        "darwin" !== options.platform && "freebsd" !== options.platform && "linux" !== options.platform && "sunos" !== options.platform || (options.platform = "UNIX");
        "win32" === options.platform && (options.platform = "DOS");
        var zipData = [], localDirLength = 0, centralDirLength = 0, writer, i, utfEncodedComment = utils.transformTo("string", this.utf8encode(options.comment || this.comment || ""));
        for (var name in this.files) {
          if (!this.files.hasOwnProperty(name)) continue;
          var file = this.files[name];
          var compressionName = file.options.compression || options.compression.toUpperCase();
          var compression = compressions[compressionName];
          if (!compression) throw new Error(compressionName + " is not a valid compression method !");
          var compressionOptions = file.options.compressionOptions || options.compressionOptions || {};
          var compressedObject = generateCompressedObjectFrom.call(this, file, compression, compressionOptions);
          var zipPart = generateZipParts.call(this, name, file, compressedObject, localDirLength, options.platform);
          localDirLength += zipPart.fileRecord.length + compressedObject.compressedSize;
          centralDirLength += zipPart.dirRecord.length;
          zipData.push(zipPart);
        }
        var dirEnd = "";
        dirEnd = signature.CENTRAL_DIRECTORY_END + "\0\0\0\0" + decToHex(zipData.length, 2) + decToHex(zipData.length, 2) + decToHex(centralDirLength, 4) + decToHex(localDirLength, 4) + decToHex(utfEncodedComment.length, 2) + utfEncodedComment;
        var typeName = options.type.toLowerCase();
        writer = "uint8array" === typeName || "arraybuffer" === typeName || "blob" === typeName || "nodebuffer" === typeName ? new Uint8ArrayWriter(localDirLength + centralDirLength + dirEnd.length) : new StringWriter(localDirLength + centralDirLength + dirEnd.length);
        for (i = 0; i < zipData.length; i++) {
          writer.append(zipData[i].fileRecord);
          writer.append(zipData[i].compressedObject.compressedContent);
        }
        for (i = 0; i < zipData.length; i++) writer.append(zipData[i].dirRecord);
        writer.append(dirEnd);
        var zip = writer.finalize();
        switch (options.type.toLowerCase()) {
         case "uint8array":
         case "arraybuffer":
         case "nodebuffer":
          return utils.transformTo(options.type.toLowerCase(), zip);

         case "blob":
          return utils.arrayBuffer2Blob(utils.transformTo("arraybuffer", zip), options.mimeType);

         case "base64":
          return options.base64 ? base64.encode(zip) : zip;

         default:
          return zip;
        }
      },
      crc32: function crc32(input, crc) {
        return _crc(input, crc);
      },
      utf8encode: function utf8encode(string) {
        return utils.transformTo("string", utf8.utf8encode(string));
      },
      utf8decode: function utf8decode(input) {
        return utf8.utf8decode(input);
      }
    };
    module.exports = out;
    cc._RF.pop();
  }, {
    "./base64": "base64",
    "./compressedObject": "compressedObject",
    "./compressions": "compressions",
    "./crc32": "crc32",
    "./defaults": "defaults",
    "./nodeBuffer": "nodeBuffer",
    "./signature": "signature",
    "./stringWriter": "stringWriter",
    "./support": "support",
    "./uint8ArrayWriter": "uint8ArrayWriter",
    "./utf8": "utf8",
    "./utils": "utils"
  } ],
  platform: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0eab5GS9G1OOI/jpidy6PvC", "platform");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var android_1 = require("./android");
    var ios_1 = require("./ios");
    var platform = function() {
      function platform() {}
      platform.getInstance = function() {
        if (!this._platform) {
          this._platform = new platform();
          this._platform.init();
        }
        return this._platform;
      };
      platform.prototype.init = function() {
        window.G_PLATFORM = {};
        cc.sys.os == cc.sys.OS_ANDROID && (window.G_PLATFORM = android_1.default.getInstance());
        cc.sys.os == cc.sys.OS_IOS && (window.G_PLATFORM = ios_1.default.getInstance());
        if (!cc.sys.isNative) return;
        G_PLATFORM.WX_SHARE_TYPE = {
          WXSceneSession: 0,
          WXSceneTimeline: 1,
          WXSceneFavorite: 2
        };
      };
      return platform;
    }();
    exports.default = platform;
    cc._RF.pop();
  }, {
    "./android": "android",
    "./ios": "ios"
  } ],
  "pomelo-client": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f46b8iXN9NIP6/33SIBNQ7O", "pomelo-client");
    "use strict";
    (function() {
      var JS_WS_CLIENT_TYPE = "js-websocket";
      var JS_WS_CLIENT_VERSION = "0.0.1";
      var Proctocol = require("protocol");
      var Package = Protocol.Package;
      var Message = Protocol.Message;
      "undefined" != typeof window && "undefined" != typeof sys && sys.localStorage && (window.localStorage = sys.localStorage);
      var RES_OK = 200;
      var RES_FAIL = 500;
      var RES_OLD_CLIENT = 501;
      "function" !== typeof Object.create && (Object.create = function(o) {
        function F() {}
        F.prototype = o;
        return new F();
      });
      var root = window;
      var pomelo = {};
      root.pomelo = pomelo;
      var socket = null;
      var reqId = 0;
      var handlers = {};
      var routeMap = {};
      var heartbeatInterval = 0;
      var heartbeatTimeout = 0;
      var nextHeartbeatTimeout = 0;
      var gapThreshold = 100;
      var heartbeatId = null;
      var heartbeatTimeoutId = null;
      var handshakeCallback = null;
      var decode = null;
      var encode = null;
      var useCrypto;
      var handshakeBuffer = {
        sys: {
          type: JS_WS_CLIENT_TYPE,
          version: JS_WS_CLIENT_VERSION
        },
        user: {}
      };
      var connectcb = null;
      var debug = false;
      var msgcb = null;
      pomelo.init = function(params) {
        var host = params.host;
        var port = params.port;
        connectcb = params.connectcb;
        debug = params.debug;
        msgcb = params.msgcb;
        var url = "ws://" + host;
        port && (url += ":" + port);
        handshakeBuffer.user = params.user;
        handshakeCallback = params.handshakeCallback;
        initWebSocket(url);
      };
      var initWebSocket = function initWebSocket(url) {
        var onopen = function onopen(event) {
          var obj = Package.encode(Package.TYPE_HANDSHAKE, Protocol.strencode(JSON.stringify(handshakeBuffer)));
          send(obj);
        };
        var onmessage = function onmessage(event) {
          processPackage(Package.decode(event.data));
          heartbeatTimeout && (nextHeartbeatTimeout = Date.now() + heartbeatTimeout);
        };
        var onerror = function onerror(event) {
          connectcb && connectcb("io-error", event);
          cc.error("socket error: ", event);
        };
        var onclose = function onclose(event) {
          if (connectcb) {
            connectcb("close", event);
            connectcb("disconnect", event);
          }
          cc.error("socket close: ", event);
        };
        socket = new WebSocket(url);
        socket.binaryType = "arraybuffer";
        socket.onopen = onopen;
        socket.onmessage = onmessage;
        socket.onerror = onerror;
        socket.onclose = onclose;
      };
      pomelo.clearListener = function() {
        connectcb = function connectcb() {};
        msgcb = function msgcb() {};
      };
      pomelo.disconnect = function() {
        if (socket) {
          socket.disconnect && socket.disconnect();
          socket.close && socket.close();
          cc.log("disconnect");
          socket = null;
        }
        if (heartbeatId) {
          clearTimeout(heartbeatId);
          heartbeatId = null;
        }
        if (heartbeatTimeoutId) {
          clearTimeout(heartbeatTimeoutId);
          heartbeatTimeoutId = null;
        }
      };
      pomelo.request = function(route, msg) {
        if (!route) return;
        reqId++;
        sendMessage(reqId, route, msg);
        routeMap[reqId] = route;
        console.log("routeMap=", routeMap);
      };
      pomelo.notify = function(route, msg) {
        msg = msg || {};
        sendMessage(0, route, msg);
      };
      var sendMessage = function sendMessage(reqId, route, msg) {
        var type = reqId ? Message.TYPE_REQUEST : Message.TYPE_NOTIFY;
        var protos = !pomelo.data.protos ? {} : pomelo.data.protos.client;
        msg = protos[route] ? protobuf.encode(route, msg) : Protocol.strencode(JSON.stringify(msg));
        var compressRoute = 0;
        if (pomelo.dict && pomelo.dict[route]) {
          route = pomelo.dict[route];
          compressRoute = 1;
        }
        msg = Message.encode(reqId, type, compressRoute, route, msg);
        var packet = Package.encode(Package.TYPE_DATA, msg);
        send(packet);
      };
      var send = function send(packet) {
        socket.send(packet.buffer);
      };
      var handler = {};
      var heartbeat = function heartbeat(data) {
        if (!heartbeatInterval) return;
        var obj = Package.encode(Package.TYPE_HEARTBEAT);
        if (heartbeatTimeoutId) {
          clearTimeout(heartbeatTimeoutId);
          heartbeatTimeoutId = null;
        }
        if (heartbeatId) return;
        heartbeatId = setTimeout(function() {
          heartbeatId = null;
          send(obj);
          nextHeartbeatTimeout = Date.now() + heartbeatTimeout;
          heartbeatTimeoutId = setTimeout(heartbeatTimeoutCb, heartbeatTimeout);
        }, heartbeatInterval);
      };
      var heartbeatTimeoutCb = function heartbeatTimeoutCb() {
        var gap = nextHeartbeatTimeout - Date.now();
        if (gap > gapThreshold) heartbeatTimeoutId = setTimeout(heartbeatTimeoutCb, gap); else {
          cc.error("server heartbeat timeout");
          connectcb("heartbeat timeout");
          pomelo.disconnect();
        }
      };
      var handshake = function handshake(data) {
        data = JSON.parse(Protocol.strdecode(data));
        if (data.code === RES_OLD_CLIENT) {
          connectcb("error", "client version not fullfill");
          return;
        }
        if (data.code !== RES_OK) {
          connectcb("error", "handshake fail");
          return;
        }
        handshakeInit(data);
        var obj = Package.encode(Package.TYPE_HANDSHAKE_ACK);
        send(obj);
        connectcb("connect");
      };
      var onData = function onData(data) {
        var msg = Message.decode(data);
        if (msg.id > 0) {
          msg.route = routeMap[msg.id];
          delete routeMap[msg.id];
          if (!msg.route) return;
        }
        msg.body = deCompose(msg);
        processMessage(pomelo, msg);
      };
      var onKick = function onKick(data) {
        data = JSON.parse(Protocol.strdecode(data));
        connectcb("onKick", data);
      };
      handlers[Package.TYPE_HANDSHAKE] = handshake;
      handlers[Package.TYPE_HEARTBEAT] = heartbeat;
      handlers[Package.TYPE_DATA] = onData;
      handlers[Package.TYPE_KICK] = onKick;
      var processPackage = function processPackage(msgs) {
        if (Array.isArray(msgs)) for (var i = 0; i < msgs.length; i++) {
          var msg = msgs[i];
          handlers[msg.type](msg.body);
        } else handlers[msgs.type](msgs.body);
      };
      var processMessage = function processMessage(pomelo, msg) {
        var code = null;
        msg.body && (code = msg.body.code);
        msgcb(msg.route, code, msg.body);
        return;
      };
      var processMessageBatch = function processMessageBatch(pomelo, msgs) {
        for (var i = 0, l = msgs.length; i < l; i++) processMessage(pomelo, msgs[i]);
      };
      var deCompose = function deCompose(msg) {
        var protos = !pomelo.data.protos ? {} : pomelo.data.protos.server;
        var abbrs = pomelo.data.abbrs;
        var route = msg.route;
        if (msg.compressRoute) {
          if (!abbrs[route]) return {};
          route = msg.route = abbrs[route];
        }
        return protos[route] ? protobuf.decode(route, msg.body) : JSON.parse(Protocol.strdecode(msg.body));
      };
      var handshakeInit = function handshakeInit(data) {
        if (data.sys && data.sys.heartbeat) {
          heartbeatInterval = 1e3 * data.sys.heartbeat;
          heartbeatTimeout = 2 * heartbeatInterval;
        } else {
          heartbeatInterval = 0;
          heartbeatTimeout = 0;
        }
        initData(data);
        "function" === typeof handshakeCallback && handshakeCallback(data.user);
      };
      var initData = function initData(data) {
        if (!data || !data.sys) return;
        pomelo.data = pomelo.data || {};
        var dict = data.sys.dict;
        var protos = data.sys.protos;
        if (dict) {
          pomelo.data.dict = dict;
          pomelo.data.abbrs = {};
          for (var route in dict) pomelo.data.abbrs[dict[route]] = route;
        }
        if (protos) {
          pomelo.data.protos = {
            server: protos.server || {},
            client: protos.client || {}
          };
          !protobuf || protobuf.init({
            encoderProtos: protos.client,
            decoderProtos: protos.server
          });
        }
      };
      module.exports = pomelo;
    })();
    cc._RF.pop();
  }, {
    protocol: "protocol"
  } ],
  protobuf: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "27d1cdsWbJCp6+gJ11UoKmu", "protobuf");
    "use strict";
    (function(exports, global) {
      var Protobuf = exports;
      Protobuf.init = function(opts) {
        Protobuf.encoder.init(opts.encoderProtos);
        Protobuf.decoder.init(opts.decoderProtos);
      };
      Protobuf.encode = function(key, msg) {
        return Protobuf.encoder.encode(key, msg);
      };
      Protobuf.decode = function(key, msg) {
        return Protobuf.decoder.decode(key, msg);
      };
      module.exports = Protobuf;
      "undefined" != typeof window && (window.protobuf = Protobuf);
    })("undefined" == typeof window ? module.exports : {}, void 0);
    (function(exports, global) {
      var constants = exports.constants = {};
      constants.TYPES = {
        uInt32: 0,
        sInt32: 0,
        int32: 0,
        double: 1,
        string: 2,
        message: 2,
        float: 5
      };
    })("undefined" !== typeof protobuf ? protobuf : module.exports, void 0);
    (function(exports, global) {
      var Util = exports.util = {};
      Util.isSimpleType = function(type) {
        return "uInt32" === type || "sInt32" === type || "int32" === type || "uInt64" === type || "sInt64" === type || "float" === type || "double" === type;
      };
    })("undefined" !== typeof protobuf ? protobuf : module.exports, void 0);
    (function(exports, global) {
      var Codec = exports.codec = {};
      var buffer = new ArrayBuffer(8);
      var float32Array = new Float32Array(buffer);
      var float64Array = new Float64Array(buffer);
      var uInt8Array = new Uint8Array(buffer);
      Codec.encodeUInt32 = function(n) {
        var n = parseInt(n);
        if (isNaN(n) || n < 0) return null;
        var result = [];
        do {
          var tmp = n % 128;
          var next = Math.floor(n / 128);
          0 !== next && (tmp += 128);
          result.push(tmp);
          n = next;
        } while (0 !== n);
        return result;
      };
      Codec.encodeSInt32 = function(n) {
        var n = parseInt(n);
        if (isNaN(n)) return null;
        n = n < 0 ? 2 * Math.abs(n) - 1 : 2 * n;
        return Codec.encodeUInt32(n);
      };
      Codec.decodeUInt32 = function(bytes) {
        var n = 0;
        for (var i = 0; i < bytes.length; i++) {
          var m = parseInt(bytes[i]);
          n += (127 & m) * Math.pow(2, 7 * i);
          if (m < 128) return n;
        }
        return n;
      };
      Codec.decodeSInt32 = function(bytes) {
        var n = this.decodeUInt32(bytes);
        var flag = n % 2 === 1 ? -1 : 1;
        n = (n % 2 + n) / 2 * flag;
        return n;
      };
      Codec.encodeFloat = function(float) {
        float32Array[0] = float;
        return uInt8Array;
      };
      Codec.decodeFloat = function(bytes, offset) {
        if (!bytes || bytes.length < offset + 4) return null;
        for (var i = 0; i < 4; i++) uInt8Array[i] = bytes[offset + i];
        return float32Array[0];
      };
      Codec.encodeDouble = function(double) {
        float64Array[0] = double;
        return uInt8Array.subarray(0, 8);
      };
      Codec.decodeDouble = function(bytes, offset) {
        if (!bytes || bytes.length < 8 + offset) return null;
        for (var i = 0; i < 8; i++) uInt8Array[i] = bytes[offset + i];
        return float64Array[0];
      };
      Codec.encodeStr = function(bytes, offset, str) {
        for (var i = 0; i < str.length; i++) {
          var code = str.charCodeAt(i);
          var codes = encode2UTF8(code);
          for (var j = 0; j < codes.length; j++) {
            bytes[offset] = codes[j];
            offset++;
          }
        }
        return offset;
      };
      Codec.decodeStr = function(bytes, offset, length) {
        var array = [];
        var end = offset + length;
        while (offset < end) {
          var code = 0;
          if (bytes[offset] < 128) {
            code = bytes[offset];
            offset += 1;
          } else if (bytes[offset] < 224) {
            code = ((63 & bytes[offset]) << 6) + (63 & bytes[offset + 1]);
            offset += 2;
          } else {
            code = ((15 & bytes[offset]) << 12) + ((63 & bytes[offset + 1]) << 6) + (63 & bytes[offset + 2]);
            offset += 3;
          }
          array.push(code);
        }
        var str = "";
        for (var i = 0; i < array.length; ) {
          str += String.fromCharCode.apply(null, array.slice(i, i + 1e4));
          i += 1e4;
        }
        return str;
      };
      Codec.byteLength = function(str) {
        if ("string" !== typeof str) return -1;
        var length = 0;
        for (var i = 0; i < str.length; i++) {
          var code = str.charCodeAt(i);
          length += codeLength(code);
        }
        return length;
      };
      function encode2UTF8(charCode) {
        return charCode <= 127 ? [ charCode ] : charCode <= 2047 ? [ 192 | charCode >> 6, 128 | 63 & charCode ] : [ 224 | charCode >> 12, 128 | (4032 & charCode) >> 6, 128 | 63 & charCode ];
      }
      function codeLength(code) {
        return code <= 127 ? 1 : code <= 2047 ? 2 : 3;
      }
    })("undefined" !== typeof protobuf ? protobuf : module.exports, void 0);
    (function(exports, global) {
      var protobuf = exports;
      var MsgEncoder = exports.encoder = {};
      var codec = protobuf.codec;
      var constant = protobuf.constants;
      var util = protobuf.util;
      MsgEncoder.init = function(protos) {
        this.protos = protos || {};
      };
      MsgEncoder.encode = function(route, msg) {
        var protos = this.protos[route];
        if (!checkMsg(msg, protos)) return null;
        var length = codec.byteLength(JSON.stringify(msg));
        var buffer = new ArrayBuffer(length);
        var uInt8Array = new Uint8Array(buffer);
        var offset = 0;
        if (!!protos) {
          offset = encodeMsg(uInt8Array, offset, protos, msg);
          if (offset > 0) return uInt8Array.subarray(0, offset);
        }
        return null;
      };
      function checkMsg(msg, protos) {
        if (!protos) return false;
        for (var name in protos) {
          var proto = protos[name];
          switch (proto.option) {
           case "required":
            if ("undefined" === typeof msg[name]) return false;

           case "optional":
            "undefined" !== typeof msg[name] && (!protos.__messages[proto.type] || checkMsg(msg[name], protos.__messages[proto.type]));
            break;

           case "repeated":
            if (!!msg[name] && !!protos.__messages[proto.type]) for (var i = 0; i < msg[name].length; i++) if (!checkMsg(msg[name][i], protos.__messages[proto.type])) return false;
          }
        }
        return true;
      }
      function encodeMsg(buffer, offset, protos, msg) {
        for (var name in msg) if (!!protos[name]) {
          var proto = protos[name];
          switch (proto.option) {
           case "required":
           case "optional":
            offset = writeBytes(buffer, offset, encodeTag(proto.type, proto.tag));
            offset = encodeProp(msg[name], proto.type, offset, buffer, protos);
            break;

           case "repeated":
            msg[name].length > 0 && (offset = encodeArray(msg[name], proto, offset, buffer, protos));
          }
        }
        return offset;
      }
      function encodeProp(value, type, offset, buffer, protos) {
        switch (type) {
         case "uInt32":
          offset = writeBytes(buffer, offset, codec.encodeUInt32(value));
          break;

         case "int32":
         case "sInt32":
          offset = writeBytes(buffer, offset, codec.encodeSInt32(value));
          break;

         case "float":
          writeBytes(buffer, offset, codec.encodeFloat(value));
          offset += 4;
          break;

         case "double":
          writeBytes(buffer, offset, codec.encodeDouble(value));
          offset += 8;
          break;

         case "string":
          var length = codec.byteLength(value);
          offset = writeBytes(buffer, offset, codec.encodeUInt32(length));
          codec.encodeStr(buffer, offset, value);
          offset += length;
          break;

         default:
          if (!!protos.__messages[type]) {
            var tmpBuffer = new ArrayBuffer(codec.byteLength(JSON.stringify(value)));
            var length = 0;
            length = encodeMsg(tmpBuffer, length, protos.__messages[type], value);
            offset = writeBytes(buffer, offset, codec.encodeUInt32(length));
            for (var i = 0; i < length; i++) {
              buffer[offset] = tmpBuffer[i];
              offset++;
            }
          }
        }
        return offset;
      }
      function encodeArray(array, proto, offset, buffer, protos) {
        var i = 0;
        if (util.isSimpleType(proto.type)) {
          offset = writeBytes(buffer, offset, encodeTag(proto.type, proto.tag));
          offset = writeBytes(buffer, offset, codec.encodeUInt32(array.length));
          for (i = 0; i < array.length; i++) offset = encodeProp(array[i], proto.type, offset, buffer);
        } else for (i = 0; i < array.length; i++) {
          offset = writeBytes(buffer, offset, encodeTag(proto.type, proto.tag));
          offset = encodeProp(array[i], proto.type, offset, buffer, protos);
        }
        return offset;
      }
      function writeBytes(buffer, offset, bytes) {
        for (var i = 0; i < bytes.length; i++, offset++) buffer[offset] = bytes[i];
        return offset;
      }
      function encodeTag(type, tag) {
        var value = constant.TYPES[type] || 2;
        return codec.encodeUInt32(tag << 3 | value);
      }
    })("undefined" !== typeof protobuf ? protobuf : module.exports, void 0);
    (function(exports, global) {
      var protobuf = exports;
      var MsgDecoder = exports.decoder = {};
      var codec = protobuf.codec;
      var util = protobuf.util;
      var buffer;
      var offset = 0;
      MsgDecoder.init = function(protos) {
        this.protos = protos || {};
      };
      MsgDecoder.setProtos = function(protos) {
        !protos || (this.protos = protos);
      };
      MsgDecoder.decode = function(route, buf) {
        var protos = this.protos[route];
        buffer = buf;
        offset = 0;
        if (!!protos) return decodeMsg({}, protos, buffer.length);
        return null;
      };
      function decodeMsg(msg, protos, length) {
        while (offset < length) {
          var head = getHead();
          var type = head.type;
          var tag = head.tag;
          var name = protos.__tags[tag];
          switch (protos[name].option) {
           case "optional":
           case "required":
            msg[name] = decodeProp(protos[name].type, protos);
            break;

           case "repeated":
            msg[name] || (msg[name] = []);
            decodeArray(msg[name], protos[name].type, protos);
          }
        }
        return msg;
      }
      function isFinish(msg, protos) {
        return !protos.__tags[peekHead().tag];
      }
      function getHead() {
        var tag = codec.decodeUInt32(getBytes());
        return {
          type: 7 & tag,
          tag: tag >> 3
        };
      }
      function peekHead() {
        var tag = codec.decodeUInt32(peekBytes());
        return {
          type: 7 & tag,
          tag: tag >> 3
        };
      }
      function decodeProp(type, protos) {
        switch (type) {
         case "uInt32":
          return codec.decodeUInt32(getBytes());

         case "int32":
         case "sInt32":
          return codec.decodeSInt32(getBytes());

         case "float":
          var float = codec.decodeFloat(buffer, offset);
          offset += 4;
          return float;

         case "double":
          var double = codec.decodeDouble(buffer, offset);
          offset += 8;
          return double;

         case "string":
          var length = codec.decodeUInt32(getBytes());
          var str = codec.decodeStr(buffer, offset, length);
          offset += length;
          return str;

         default:
          if (!!protos && !!protos.__messages[type]) {
            var length = codec.decodeUInt32(getBytes());
            var msg = {};
            decodeMsg(msg, protos.__messages[type], offset + length);
            return msg;
          }
        }
      }
      function decodeArray(array, type, protos) {
        if (util.isSimpleType(type)) {
          var length = codec.decodeUInt32(getBytes());
          for (var i = 0; i < length; i++) array.push(decodeProp(type));
        } else array.push(decodeProp(type, protos));
      }
      function getBytes(flag) {
        var bytes = [];
        var pos = offset;
        flag = flag || false;
        var b;
        do {
          b = buffer[pos];
          bytes.push(b);
          pos++;
        } while (b >= 128);
        flag || (offset = pos);
        return bytes;
      }
      function peekBytes() {
        return getBytes(true);
      }
    })("undefined" !== typeof protobuf ? protobuf : module.exports, void 0);
    cc._RF.pop();
  }, {} ],
  protocol: [ function(require, module, exports) {
    (function(Buffer) {
      "use strict";
      cc._RF.push(module, "33a92JJsX1FX7opbirwgfli", "protocol");
      "use strict";
      (function(exports, ByteArray, global) {
        var Protocol = exports;
        var PKG_HEAD_BYTES = 4;
        var MSG_FLAG_BYTES = 1;
        var MSG_ROUTE_CODE_BYTES = 2;
        var MSG_ID_MAX_BYTES = 5;
        var MSG_ROUTE_LEN_BYTES = 1;
        var MSG_ROUTE_CODE_MAX = 65535;
        var MSG_COMPRESS_ROUTE_MASK = 1;
        var MSG_TYPE_MASK = 7;
        var Package = Protocol.Package = {};
        var Message = Protocol.Message = {};
        Package.TYPE_HANDSHAKE = 1;
        Package.TYPE_HANDSHAKE_ACK = 2;
        Package.TYPE_HEARTBEAT = 3;
        Package.TYPE_DATA = 4;
        Package.TYPE_KICK = 5;
        Message.TYPE_REQUEST = 0;
        Message.TYPE_NOTIFY = 1;
        Message.TYPE_RESPONSE = 2;
        Message.TYPE_PUSH = 3;
        Protocol.strencode = function(str) {
          var byteArray = new ByteArray(3 * str.length);
          var offset = 0;
          for (var i = 0; i < str.length; i++) {
            var charCode = str.charCodeAt(i);
            var codes = null;
            codes = charCode <= 127 ? [ charCode ] : charCode <= 2047 ? [ 192 | charCode >> 6, 128 | 63 & charCode ] : [ 224 | charCode >> 12, 128 | (4032 & charCode) >> 6, 128 | 63 & charCode ];
            for (var j = 0; j < codes.length; j++) {
              byteArray[offset] = codes[j];
              ++offset;
            }
          }
          var _buffer = new ByteArray(offset);
          copyArray(_buffer, 0, byteArray, 0, offset);
          return _buffer;
        };
        Protocol.strdecode = function(buffer) {
          var bytes = new ByteArray(buffer);
          var array = [];
          var offset = 0;
          var charCode = 0;
          var end = bytes.length;
          while (offset < end) {
            if (bytes[offset] < 128) {
              charCode = bytes[offset];
              offset += 1;
            } else if (bytes[offset] < 224) {
              charCode = ((63 & bytes[offset]) << 6) + (63 & bytes[offset + 1]);
              offset += 2;
            } else {
              charCode = ((15 & bytes[offset]) << 12) + ((63 & bytes[offset + 1]) << 6) + (63 & bytes[offset + 2]);
              offset += 3;
            }
            array.push(charCode);
          }
          return String.fromCharCode.apply(null, array);
        };
        Package.encode = function(type, body) {
          var length = body ? body.length : 0;
          var buffer = new ByteArray(PKG_HEAD_BYTES + length);
          var index = 0;
          buffer[index++] = 255 & type;
          buffer[index++] = length >> 16 & 255;
          buffer[index++] = length >> 8 & 255;
          buffer[index++] = 255 & length;
          body && copyArray(buffer, index, body, 0, length);
          return buffer;
        };
        Package.decode = function(buffer) {
          var offset = 0;
          var bytes = new ByteArray(buffer);
          var length = 0;
          var rs = [];
          while (offset < bytes.length) {
            var type = bytes[offset++];
            length = (bytes[offset++] << 16 | bytes[offset++] << 8 | bytes[offset++]) >>> 0;
            var body = length ? new ByteArray(length) : null;
            copyArray(body, 0, bytes, offset, length);
            offset += length;
            rs.push({
              type: type,
              body: body
            });
          }
          return 1 === rs.length ? rs[0] : rs;
        };
        Message.encode = function(id, type, compressRoute, route, msg) {
          var idBytes = msgHasId(type) ? caculateMsgIdBytes(id) : 0;
          var msgLen = MSG_FLAG_BYTES + idBytes;
          if (msgHasRoute(type)) if (compressRoute) {
            if ("number" !== typeof route) throw new Error("error flag for number route!");
            msgLen += MSG_ROUTE_CODE_BYTES;
          } else {
            msgLen += MSG_ROUTE_LEN_BYTES;
            if (route) {
              route = Protocol.strencode(route);
              if (route.length > 255) throw new Error("route maxlength is overflow");
              msgLen += route.length;
            }
          }
          msg && (msgLen += msg.length);
          var buffer = new ByteArray(msgLen);
          var offset = 0;
          offset = encodeMsgFlag(type, compressRoute, buffer, offset);
          msgHasId(type) && (offset = encodeMsgId(id, buffer, offset));
          msgHasRoute(type) && (offset = encodeMsgRoute(compressRoute, route, buffer, offset));
          msg && (offset = encodeMsgBody(msg, buffer, offset));
          return buffer;
        };
        Message.decode = function(buffer) {
          var bytes = new ByteArray(buffer);
          var bytesLen = bytes.length || bytes.byteLength;
          var offset = 0;
          var id = 0;
          var route = null;
          var flag = bytes[offset++];
          var compressRoute = flag & MSG_COMPRESS_ROUTE_MASK;
          var type = flag >> 1 & MSG_TYPE_MASK;
          if (msgHasId(type)) {
            var m = parseInt(bytes[offset]);
            var i = 0;
            do {
              var m = parseInt(bytes[offset]);
              id += (127 & m) * Math.pow(2, 7 * i);
              offset++;
              i++;
            } while (m >= 128);
          }
          if (msgHasRoute(type)) if (compressRoute) route = bytes[offset++] << 8 | bytes[offset++]; else {
            var routeLen = bytes[offset++];
            if (routeLen) {
              route = new ByteArray(routeLen);
              copyArray(route, 0, bytes, offset, routeLen);
              route = Protocol.strdecode(route);
            } else route = "";
            offset += routeLen;
          }
          var bodyLen = bytesLen - offset;
          var body = new ByteArray(bodyLen);
          copyArray(body, 0, bytes, offset, bodyLen);
          return {
            id: id,
            type: type,
            compressRoute: compressRoute,
            route: route,
            body: body
          };
        };
        var copyArray = function copyArray(dest, doffset, src, soffset, length) {
          if ("function" === typeof src.copy) src.copy(dest, doffset, soffset, soffset + length); else for (var index = 0; index < length; index++) dest[doffset++] = src[soffset++];
        };
        var msgHasId = function msgHasId(type) {
          return type === Message.TYPE_REQUEST || type === Message.TYPE_RESPONSE;
        };
        var msgHasRoute = function msgHasRoute(type) {
          return type === Message.TYPE_REQUEST || type === Message.TYPE_NOTIFY || type === Message.TYPE_PUSH;
        };
        var caculateMsgIdBytes = function caculateMsgIdBytes(id) {
          var len = 0;
          do {
            len += 1;
            id >>= 7;
          } while (id > 0);
          return len;
        };
        var encodeMsgFlag = function encodeMsgFlag(type, compressRoute, buffer, offset) {
          if (type !== Message.TYPE_REQUEST && type !== Message.TYPE_NOTIFY && type !== Message.TYPE_RESPONSE && type !== Message.TYPE_PUSH) throw new Error("unkonw message type: " + type);
          buffer[offset] = type << 1 | (compressRoute ? 1 : 0);
          return offset + MSG_FLAG_BYTES;
        };
        var encodeMsgId = function encodeMsgId(id, buffer, offset) {
          do {
            var tmp = id % 128;
            var next = Math.floor(id / 128);
            0 !== next && (tmp += 128);
            buffer[offset++] = tmp;
            id = next;
          } while (0 !== id);
          return offset;
        };
        var encodeMsgRoute = function encodeMsgRoute(compressRoute, route, buffer, offset) {
          if (compressRoute) {
            if (route > MSG_ROUTE_CODE_MAX) throw new Error("route number is overflow");
            buffer[offset++] = route >> 8 & 255;
            buffer[offset++] = 255 & route;
          } else if (route) {
            buffer[offset++] = 255 & route.length;
            copyArray(buffer, offset, route, 0, route.length);
            offset += route.length;
          } else buffer[offset++] = 0;
          return offset;
        };
        var encodeMsgBody = function encodeMsgBody(msg, buffer, offset) {
          copyArray(buffer, offset, msg, 0, msg.length);
          return offset + msg.length;
        };
        module.exports = Protocol;
        "undefined" != typeof window && (window.Protocol = Protocol);
      })("undefined" == typeof window ? module.exports : {}, "undefined" == typeof window ? Buffer : Uint8Array, void 0);
      cc._RF.pop();
    }).call(this, require("buffer").Buffer);
  }, {
    buffer: 2
  } ],
  redPushMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5d109Llx+9Mbrs/rllRfpoJ", "redPushMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseMgr_1 = require("../Libs/BaseMgr");
    var redPushMgr = function(_super) {
      __extends(redPushMgr, _super);
      function redPushMgr() {
        var _this = _super.call(this) || this;
        _this.routes = null;
        _this.redState = [];
        _this.mailList = null;
        _this.dailyTaskList = null;
        _this.inviteList = null;
        _this.mailRed = false;
        _this.welfareRed = false;
        _this.routes = {
          "http.reqUnread": _this.http_reqUnread,
          "http.reqMailList": _this.http_reqMailList,
          "http.reqDailyActivity": _this.http_reqDailyActivity,
          "http.reqInviteGiftInfo": _this.http_reqInviteGiftInfo
        };
        _this.sendRedreq();
        return _this;
      }
      redPushMgr.prototype.sendRedreq = function() {
        this.send_msg("http.reqUnread");
      };
      redPushMgr.prototype.http_reqUnread = function(msg) {
        this.redState = msg.result;
        if (2 == this.redState.length) {
          this.mailRed = true;
          this.welfareRed = false;
        } else if (1 == this.redState.length) if (1 == this.redState[0]) {
          this.welfareRed = true;
          this.mailRed = false;
        } else if (2 == this.redState[0]) {
          this.welfareRed = false;
          this.mailRed = true;
        }
      };
      redPushMgr.prototype.http_reqMailList = function(msg) {
        this.mailRed = false;
        this.mailList = msg.maillist;
        for (var i = 0; i < this.mailList.length; i++) 2 != this.mailList[i].status && (this.mailRed = true);
        this.gemit("mailRedPush_update", this.mailRed);
      };
      redPushMgr.prototype.http_reqDailyActivity = function(msg) {
        this.dailyTaskList = msg;
        this.updateWelfareRed();
      };
      redPushMgr.prototype.http_reqInviteGiftInfo = function(msg) {
        this.inviteList = msg;
        this.updateWelfareRed();
      };
      redPushMgr.prototype.updateWelfareRed = function() {
        this.welfareRed = false;
        if (this.dailyTaskList) for (var i = 0; i < this.dailyTaskList.length; i++) {
          var target = this.dailyTaskList[i].target;
          var step = this.dailyTaskList[i].step;
          !this.dailyTaskList[i].is_receive && step >= target && (this.welfareRed = true);
        }
        if (this.inviteList) {
          var list = this.inviteList.targets;
          var num = this.inviteList.number;
          for (var i = 0; i < list.length; i++) parseInt(list[i].target) <= num && 1 != list[i].status && (this.welfareRed = true);
        }
        this.gemit("welfareRedPush_update", this.welfareRed);
      };
      redPushMgr.prototype.getMailRed = function() {
        return this.mailRed;
      };
      redPushMgr.prototype.getwelfareRed = function() {
        return this.welfareRed;
      };
      redPushMgr.getInstance = function() {
        this._instance || (this._instance = new redPushMgr());
        return this._instance;
      };
      return redPushMgr;
    }(BaseMgr_1.default);
    exports.default = redPushMgr;
    cc._RF.pop();
  }, {
    "../Libs/BaseMgr": "BaseMgr"
  } ],
  signature: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2e1edWQ6zhLzLbtS9/zRWLF", "signature");
    "use strict";
    exports.LOCAL_FILE_HEADER = "PK";
    exports.CENTRAL_FILE_HEADER = "PK";
    exports.CENTRAL_DIRECTORY_END = "PK";
    exports.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK";
    exports.ZIP64_CENTRAL_DIRECTORY_END = "PK";
    exports.DATA_DESCRIPTOR = "PK\b";
    cc._RF.pop();
  }, {} ],
  sssSettleDetailItemCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2759fssAi1DWKuBuojJuR7E", "sssSettleDetailItemCtrl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseCtrl_1 = require("../../Plat/Libs/BaseCtrl");
    var BaseModel_1 = require("../../Plat/Libs/BaseModel");
    var BaseView_1 = require("../../Plat/Libs/BaseView");
    var BunchInfoMgr_1 = require("../../Plat/GameMgrs/BunchInfoMgr");
    var SssDef_1 = require("../../Games/Sss/SssMgr/SssDef");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ctrl;
    var Model = function(_super) {
      __extends(Model, _super);
      function Model() {
        var _this = _super.call(this) || this;
        _this.userData = null;
        _this.seatId = null;
        _this.userInfo = null;
        _this.roomValue = null;
        _this.owner = null;
        _this.roomValue = BunchInfoMgr_1.default.getInstance().getBunchInfo().roomValue;
        _this.userData = ctrl.userData;
        _this.seatId = ctrl.seatId;
        _this.updateUserInfo();
        return _this;
      }
      Model.prototype.updateUserInfo = function() {
        var users = BunchInfoMgr_1.default.getInstance().getMembelist();
        this.userInfo = users[this.seatId];
        this.owner = BunchInfoMgr_1.default.getInstance().getBunchInfo().roomOwner;
      };
      return Model;
    }(BaseModel_1.default);
    var View = function(_super) {
      __extends(View, _super);
      function View(model) {
        var _this = _super.call(this, model) || this;
        _this.ui = {
          nameLbl: ctrl.nameLbl,
          cardPanel: ctrl.cardPanel,
          cardTypePanel: ctrl.cardTypePanel,
          cardScorePanel: ctrl.cardScorePanel,
          scorePanel: ctrl.scorePanel,
          scoreFont: ctrl.scoreFont,
          cardAltas: ctrl.cardAltas,
          masterImg: ctrl.masterImg,
          cardTypeAltas: ctrl.cardTypeAltas,
          specialAltas: ctrl.specialAltas
        };
        _this.node = ctrl.node;
        _this.initUi();
        return _this;
      }
      View.prototype.initUi = function() {
        this.ui.masterImg.active = this.model.userInfo.id == this.model.owner || this.model.userInfo.bowner;
        this.ui.nameLbl.string = this.model.userInfo.nickname.length > 5 ? this.model.userInfo.nickname.substring(0, 5) + "..." : this.model.userInfo.nickname;
        var cards = this.model.userData.settleCard;
        for (var i = 0; i < this.ui.cardPanel.children.length; ++i) {
          if (this.model.userData.alldunfen.length > 0) {
            if (this.model.userData.alldunfen[i] >= 0) this.ui.cardScorePanel.children[i].getComponent(cc.Label).string = "+" + this.model.userData.alldunfen[i]; else {
              this.ui.cardScorePanel.children[i].color = cc.color(0, 255, 0);
              this.ui.cardScorePanel.children[i].getComponent(cc.LabelOutline).color = cc.color(0, 255, 0);
              this.ui.cardScorePanel.children[i].getComponent(cc.Label).string = this.model.userData.alldunfen[i];
            }
            this.ui.cardScorePanel.children[i].active = true;
          }
          if (this.model.userData.allduntype.length > 0) {
            var name = void 0;
            name = 0 == i && this.model.userData.allduntype[i] == SssDef_1.SssDef.CT_THREE ? "cardtype_" + (SssDef_1.SssDef.cardTypeNames[SssDef_1.SssDef.CT_THREE] + 10).toString() : 1 == i && this.model.userData.allduntype[i] == SssDef_1.SssDef.CT_FIVE_THREE_DEOUBLE ? "cardtype_" + (SssDef_1.SssDef.cardTypeNames[SssDef_1.SssDef.CT_FIVE_THREE_DEOUBLE] + 10).toString() : "cardtype_" + SssDef_1.SssDef.cardTypeNames[this.model.userData.allduntype[i]];
            this.ui.cardTypePanel.children[i].active = true;
            this.ui.cardTypePanel.children[i].getComponent(cc.Sprite).spriteFrame = this.ui.cardTypeAltas.getSpriteFrame(name);
          }
          var node = this.ui.cardPanel.children[i];
          for (var j = 0; j < node.children.length; ++j) {
            var name = cards[i][j] < 14 ? "bull_0x0" + cards[i][j].toString(16) : "bull_0x" + cards[i][j].toString(16);
            node.children[j].getComponent(cc.Sprite).spriteFrame = this.ui.cardAltas.getSpriteFrame(name);
            if (1 == this.model.roomValue.v_buyHorse && cards[i][j] == this.model.roomValue.v_buyHorseData) {
              node.children[j].children[0].active = true;
              node.children[j].color = cc.color(240, 241, 162);
            }
          }
        }
        if (this.model.userData.zongfen < 0) {
          this.ui.scorePanel.getComponent(cc.Label).font = this.ui.scoreFont[1];
          this.ui.scorePanel.getComponent(cc.Label).string = this.model.userData.zongfen + "水";
        } else {
          this.ui.scorePanel.getComponent(cc.Label).font = this.ui.scoreFont[0];
          this.ui.scorePanel.getComponent(cc.Label).string = "+" + this.model.userData.zongfen + "水";
        }
        if (this.model.userData.isteshupaixing > 0) {
          this.ui.cardTypePanel.children[2].active = true;
          this.ui.cardTypePanel.children[2].getComponent(cc.Sprite).spriteFrame = this.ui.specialAltas.getSpriteFrame(this.model.userData.isteshupaixing);
        }
      };
      return View;
    }(BaseView_1.default);
    var sssSettleDetailItemCtrl = function(_super) {
      __extends(sssSettleDetailItemCtrl, _super);
      function sssSettleDetailItemCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.nameLbl = null;
        _this.cardPanel = null;
        _this.cardTypePanel = null;
        _this.cardScorePanel = null;
        _this.scorePanel = null;
        _this.scoreFont = [];
        _this.cardAltas = null;
        _this.masterImg = null;
        _this.cardTypeAltas = null;
        _this.specialAltas = null;
        _this.userData = null;
        _this.seatId = null;
        return _this;
      }
      sssSettleDetailItemCtrl.prototype.onLoad = function() {
        ctrl = this;
        this.initMvc(Model, View);
      };
      sssSettleDetailItemCtrl.prototype.defineNetEvents = function() {};
      sssSettleDetailItemCtrl.prototype.defineGlobalEvents = function() {};
      sssSettleDetailItemCtrl.prototype.connectUi = function() {};
      sssSettleDetailItemCtrl.prototype.start = function() {};
      sssSettleDetailItemCtrl.prototype.init = function(value, seatid) {
        this.userData = value;
        this.seatId = seatid;
      };
      __decorate([ property({
        tooltip: "nameLbl",
        type: cc.Label
      }) ], sssSettleDetailItemCtrl.prototype, "nameLbl", void 0);
      __decorate([ property({
        tooltip: "牌节点",
        type: cc.Node
      }) ], sssSettleDetailItemCtrl.prototype, "cardPanel", void 0);
      __decorate([ property({
        tooltip: "牌型节点",
        type: cc.Node
      }) ], sssSettleDetailItemCtrl.prototype, "cardTypePanel", void 0);
      __decorate([ property({
        tooltip: "牌分节点",
        type: cc.Node
      }) ], sssSettleDetailItemCtrl.prototype, "cardScorePanel", void 0);
      __decorate([ property({
        tooltip: "总分",
        type: cc.Node
      }) ], sssSettleDetailItemCtrl.prototype, "scorePanel", void 0);
      __decorate([ property({
        tooltip: "总分字体",
        type: [ cc.Font ]
      }) ], sssSettleDetailItemCtrl.prototype, "scoreFont", void 0);
      __decorate([ property({
        tooltip: "牌图集",
        type: cc.SpriteAtlas
      }) ], sssSettleDetailItemCtrl.prototype, "cardAltas", void 0);
      __decorate([ property({
        tooltip: "房主标志",
        type: cc.Node
      }) ], sssSettleDetailItemCtrl.prototype, "masterImg", void 0);
      __decorate([ property({
        tooltip: "牌型图集",
        type: cc.SpriteAtlas
      }) ], sssSettleDetailItemCtrl.prototype, "cardTypeAltas", void 0);
      __decorate([ property({
        tooltip: "特殊牌型图集",
        type: cc.SpriteAtlas
      }) ], sssSettleDetailItemCtrl.prototype, "specialAltas", void 0);
      sssSettleDetailItemCtrl = __decorate([ ccclass ], sssSettleDetailItemCtrl);
      return sssSettleDetailItemCtrl;
    }(BaseCtrl_1.default);
    exports.default = sssSettleDetailItemCtrl;
    cc._RF.pop();
  }, {
    "../../Games/Sss/SssMgr/SssDef": "SssDef",
    "../../Plat/GameMgrs/BunchInfoMgr": "BunchInfoMgr",
    "../../Plat/Libs/BaseCtrl": "BaseCtrl",
    "../../Plat/Libs/BaseModel": "BaseModel",
    "../../Plat/Libs/BaseView": "BaseView"
  } ],
  stringReader: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fcc3ba1Y+lL/IDBkBbB83Yo", "stringReader");
    "use strict";
    var DataReader = require("./dataReader");
    var utils = require("./utils");
    function StringReader(data, optimizedBinaryString) {
      this.data = data;
      optimizedBinaryString || (this.data = utils.string2binary(this.data));
      this.length = this.data.length;
      this.index = 0;
    }
    StringReader.prototype = new DataReader();
    StringReader.prototype.byteAt = function(i) {
      return this.data.charCodeAt(i);
    };
    StringReader.prototype.lastIndexOfSignature = function(sig) {
      return this.data.lastIndexOf(sig);
    };
    StringReader.prototype.readData = function(size) {
      this.checkOffset(size);
      var result = this.data.slice(this.index, this.index + size);
      this.index += size;
      return result;
    };
    module.exports = StringReader;
    cc._RF.pop();
  }, {
    "./dataReader": "dataReader",
    "./utils": "utils"
  } ],
  stringWriter: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c96caGb1dJN5qnlszkEr57I", "stringWriter");
    "use strict";
    var utils = require("./utils");
    var StringWriter = function StringWriter() {
      this.data = [];
    };
    StringWriter.prototype = {
      append: function append(input) {
        input = utils.transformTo("string", input);
        this.data.push(input);
      },
      finalize: function finalize() {
        return this.data.join("");
      }
    };
    module.exports = StringWriter;
    cc._RF.pop();
  }, {
    "./utils": "utils"
  } ],
  support: [ function(require, module, exports) {
    (function(Buffer) {
      "use strict";
      cc._RF.push(module, "dd2e7XZLHFHSrn8+osEQWih", "support");
      "use strict";
      exports.base64 = true;
      exports.array = true;
      exports.string = true;
      exports.arraybuffer = "undefined" !== typeof ArrayBuffer && "undefined" !== typeof Uint8Array;
      exports.nodebuffer = "undefined" !== typeof Buffer;
      exports.uint8array = "undefined" !== typeof Uint8Array;
      if ("undefined" === typeof ArrayBuffer) exports.blob = false; else {
        var buffer = new ArrayBuffer(0);
        try {
          exports.blob = 0 === new Blob([ buffer ], {
            type: "application/zip"
          }).size;
        } catch (e) {
          try {
            var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
            var builder = new Builder();
            builder.append(buffer);
            exports.blob = 0 === builder.getBlob("application/zip").size;
          } catch (e) {
            exports.blob = false;
          }
        }
      }
      cc._RF.pop();
    }).call(this, require("buffer").Buffer);
  }, {
    buffer: 2
  } ],
  uint8ArrayReader: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bdcb4GBn0lCpL12aLrS1Tn6", "uint8ArrayReader");
    "use strict";
    var DataReader = require("./dataReader");
    function Uint8ArrayReader(data) {
      if (data) {
        this.data = data;
        this.length = this.data.length;
        this.index = 0;
      }
    }
    Uint8ArrayReader.prototype = new DataReader();
    Uint8ArrayReader.prototype.byteAt = function(i) {
      return this.data[i];
    };
    Uint8ArrayReader.prototype.lastIndexOfSignature = function(sig) {
      var sig0 = sig.charCodeAt(0), sig1 = sig.charCodeAt(1), sig2 = sig.charCodeAt(2), sig3 = sig.charCodeAt(3);
      for (var i = this.length - 4; i >= 0; --i) if (this.data[i] === sig0 && this.data[i + 1] === sig1 && this.data[i + 2] === sig2 && this.data[i + 3] === sig3) return i;
      return -1;
    };
    Uint8ArrayReader.prototype.readData = function(size) {
      this.checkOffset(size);
      if (0 === size) return new Uint8Array(0);
      var result = this.data.subarray(this.index, this.index + size);
      this.index += size;
      return result;
    };
    module.exports = Uint8ArrayReader;
    cc._RF.pop();
  }, {
    "./dataReader": "dataReader"
  } ],
  uint8ArrayWriter: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b54aeoSNS9PX6A7BUHw090/", "uint8ArrayWriter");
    "use strict";
    var utils = require("./utils");
    var Uint8ArrayWriter = function Uint8ArrayWriter(length) {
      this.data = new Uint8Array(length);
      this.index = 0;
    };
    Uint8ArrayWriter.prototype = {
      append: function append(input) {
        if (0 !== input.length) {
          input = utils.transformTo("uint8array", input);
          this.data.set(input, this.index);
          this.index += input.length;
        }
      },
      finalize: function finalize() {
        return this.data;
      }
    };
    module.exports = Uint8ArrayWriter;
    cc._RF.pop();
  }, {
    "./utils": "utils"
  } ],
  utf8: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e50e2FwfJxPYqFcl8+51oaW", "utf8");
    "use strict";
    var utils = require("./utils");
    var support = require("./support");
    var nodeBuffer = require("./nodeBuffer");
    var _utf8len = new Array(256);
    for (var i = 0; i < 256; i++) _utf8len[i] = i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1;
    _utf8len[254] = _utf8len[254] = 1;
    var string2buf = function string2buf(str) {
      var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;
      for (m_pos = 0; m_pos < str_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if (55296 === (64512 & c) && m_pos + 1 < str_len) {
          c2 = str.charCodeAt(m_pos + 1);
          if (56320 === (64512 & c2)) {
            c = 65536 + (c - 55296 << 10) + (c2 - 56320);
            m_pos++;
          }
        }
        buf_len += c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : 4;
      }
      buf = support.uint8array ? new Uint8Array(buf_len) : new Array(buf_len);
      for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if (55296 === (64512 & c) && m_pos + 1 < str_len) {
          c2 = str.charCodeAt(m_pos + 1);
          if (56320 === (64512 & c2)) {
            c = 65536 + (c - 55296 << 10) + (c2 - 56320);
            m_pos++;
          }
        }
        if (c < 128) buf[i++] = c; else if (c < 2048) {
          buf[i++] = 192 | c >>> 6;
          buf[i++] = 128 | 63 & c;
        } else if (c < 65536) {
          buf[i++] = 224 | c >>> 12;
          buf[i++] = 128 | c >>> 6 & 63;
          buf[i++] = 128 | 63 & c;
        } else {
          buf[i++] = 240 | c >>> 18;
          buf[i++] = 128 | c >>> 12 & 63;
          buf[i++] = 128 | c >>> 6 & 63;
          buf[i++] = 128 | 63 & c;
        }
      }
      return buf;
    };
    var utf8border = function utf8border(buf, max) {
      var pos;
      max = max || buf.length;
      max > buf.length && (max = buf.length);
      pos = max - 1;
      while (pos >= 0 && 128 === (192 & buf[pos])) pos--;
      if (pos < 0) return max;
      if (0 === pos) return max;
      return pos + _utf8len[buf[pos]] > max ? pos : max;
    };
    var buf2string = function buf2string(buf) {
      var str, i, out, c, c_len;
      var len = buf.length;
      var utf16buf = new Array(2 * len);
      for (out = 0, i = 0; i < len; ) {
        c = buf[i++];
        if (c < 128) {
          utf16buf[out++] = c;
          continue;
        }
        c_len = _utf8len[c];
        if (c_len > 4) {
          utf16buf[out++] = 65533;
          i += c_len - 1;
          continue;
        }
        c &= 2 === c_len ? 31 : 3 === c_len ? 15 : 7;
        while (c_len > 1 && i < len) {
          c = c << 6 | 63 & buf[i++];
          c_len--;
        }
        if (c_len > 1) {
          utf16buf[out++] = 65533;
          continue;
        }
        if (c < 65536) utf16buf[out++] = c; else {
          c -= 65536;
          utf16buf[out++] = 55296 | c >> 10 & 1023;
          utf16buf[out++] = 56320 | 1023 & c;
        }
      }
      utf16buf.length !== out && (utf16buf.subarray ? utf16buf = utf16buf.subarray(0, out) : utf16buf.length = out);
      return utils.applyFromCharCode(utf16buf);
    };
    exports.utf8encode = function utf8encode(str) {
      if (support.nodebuffer) return nodeBuffer(str, "utf-8");
      return string2buf(str);
    };
    exports.utf8decode = function utf8decode(buf) {
      if (support.nodebuffer) return utils.transformTo("nodebuffer", buf).toString("utf-8");
      buf = utils.transformTo(support.uint8array ? "uint8array" : "array", buf);
      var result = [], k = 0, len = buf.length, chunk = 65536;
      while (k < len) {
        var nextBoundary = utf8border(buf, Math.min(k + chunk, len));
        support.uint8array ? result.push(buf2string(buf.subarray(k, nextBoundary))) : result.push(buf2string(buf.slice(k, nextBoundary)));
        k = nextBoundary;
      }
      return result.join("");
    };
    cc._RF.pop();
  }, {
    "./nodeBuffer": "nodeBuffer",
    "./support": "support",
    "./utils": "utils"
  } ],
  utils: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "244b7ugMYBJ7r0rMp4g4fuF", "utils");
    "use strict";
    var support = require("./support");
    var compressions = require("./compressions");
    var nodeBuffer = require("./nodeBuffer");
    exports.string2binary = function(str) {
      var result = "";
      for (var i = 0; i < str.length; i++) result += String.fromCharCode(255 & str.charCodeAt(i));
      return result;
    };
    exports.arrayBuffer2Blob = function(buffer, mimeType) {
      exports.checkSupport("blob");
      mimeType = mimeType || "application/zip";
      try {
        return new Blob([ buffer ], {
          type: mimeType
        });
      } catch (e) {
        try {
          var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
          var builder = new Builder();
          builder.append(buffer);
          return builder.getBlob(mimeType);
        } catch (e) {
          throw new Error("Bug : can't construct the Blob.");
        }
      }
    };
    function identity(input) {
      return input;
    }
    function stringToArrayLike(str, array) {
      for (var i = 0; i < str.length; ++i) array[i] = 255 & str.charCodeAt(i);
      return array;
    }
    function arrayLikeToString(array) {
      var chunk = 65536;
      var result = [], len = array.length, type = exports.getTypeOf(array), k = 0, canUseApply = true;
      try {
        switch (type) {
         case "uint8array":
          String.fromCharCode.apply(null, new Uint8Array(0));
          break;

         case "nodebuffer":
          String.fromCharCode.apply(null, nodeBuffer(0));
        }
      } catch (e) {
        canUseApply = false;
      }
      if (!canUseApply) {
        var resultStr = "";
        for (var i = 0; i < array.length; i++) resultStr += String.fromCharCode(array[i]);
        return resultStr;
      }
      while (k < len && chunk > 1) try {
        "array" === type || "nodebuffer" === type ? result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len)))) : result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));
        k += chunk;
      } catch (e) {
        chunk = Math.floor(chunk / 2);
      }
      return result.join("");
    }
    exports.applyFromCharCode = arrayLikeToString;
    function arrayLikeToArrayLike(arrayFrom, arrayTo) {
      for (var i = 0; i < arrayFrom.length; i++) arrayTo[i] = arrayFrom[i];
      return arrayTo;
    }
    var transform = {};
    transform["string"] = {
      string: identity,
      array: function array(input) {
        return stringToArrayLike(input, new Array(input.length));
      },
      arraybuffer: function arraybuffer(input) {
        return transform["string"]["uint8array"](input).buffer;
      },
      uint8array: function uint8array(input) {
        return stringToArrayLike(input, new Uint8Array(input.length));
      },
      nodebuffer: function nodebuffer(input) {
        return stringToArrayLike(input, nodeBuffer(input.length));
      }
    };
    transform["array"] = {
      string: arrayLikeToString,
      array: identity,
      arraybuffer: function arraybuffer(input) {
        return new Uint8Array(input).buffer;
      },
      uint8array: function uint8array(input) {
        return new Uint8Array(input);
      },
      nodebuffer: function nodebuffer(input) {
        return nodeBuffer(input);
      }
    };
    transform["arraybuffer"] = {
      string: function string(input) {
        return arrayLikeToString(new Uint8Array(input));
      },
      array: function array(input) {
        return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));
      },
      arraybuffer: identity,
      uint8array: function uint8array(input) {
        return new Uint8Array(input);
      },
      nodebuffer: function nodebuffer(input) {
        return nodeBuffer(new Uint8Array(input));
      }
    };
    transform["uint8array"] = {
      string: arrayLikeToString,
      array: function array(input) {
        return arrayLikeToArrayLike(input, new Array(input.length));
      },
      arraybuffer: function arraybuffer(input) {
        return input.buffer;
      },
      uint8array: identity,
      nodebuffer: function nodebuffer(input) {
        return nodeBuffer(input);
      }
    };
    transform["nodebuffer"] = {
      string: arrayLikeToString,
      array: function array(input) {
        return arrayLikeToArrayLike(input, new Array(input.length));
      },
      arraybuffer: function arraybuffer(input) {
        return transform["nodebuffer"]["uint8array"](input).buffer;
      },
      uint8array: function uint8array(input) {
        return arrayLikeToArrayLike(input, new Uint8Array(input.length));
      },
      nodebuffer: identity
    };
    exports.transformTo = function(outputType, input) {
      input || (input = "");
      if (!outputType) return input;
      exports.checkSupport(outputType);
      var inputType = exports.getTypeOf(input);
      var result = transform[inputType][outputType](input);
      return result;
    };
    exports.getTypeOf = function(input) {
      if ("string" === typeof input) return "string";
      if ("[object Array]" === Object.prototype.toString.call(input)) return "array";
      if (support.nodebuffer && nodeBuffer.test(input)) return "nodebuffer";
      if (support.uint8array && input instanceof Uint8Array) return "uint8array";
      if (support.arraybuffer && input instanceof ArrayBuffer) return "arraybuffer";
    };
    exports.checkSupport = function(type) {
      var supported = support[type.toLowerCase()];
      if (!supported) throw new Error(type + " is not supported by this browser");
    };
    exports.MAX_VALUE_16BITS = 65535;
    exports.MAX_VALUE_32BITS = -1;
    exports.pretty = function(str) {
      var res = "", code, i;
      for (i = 0; i < (str || "").length; i++) {
        code = str.charCodeAt(i);
        res += "\\x" + (code < 16 ? "0" : "") + code.toString(16).toUpperCase();
      }
      return res;
    };
    exports.findCompression = function(compressionMethod) {
      for (var method in compressions) {
        if (!compressions.hasOwnProperty(method)) continue;
        if (compressions[method].magic === compressionMethod) return compressions[method];
      }
      return null;
    };
    exports.isRegExp = function(object) {
      return "[object RegExp]" === Object.prototype.toString.call(object);
    };
    cc._RF.pop();
  }, {
    "./compressions": "compressions",
    "./nodeBuffer": "nodeBuffer",
    "./support": "support"
  } ],
  viewLogicSeatConvertMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d9332IOqlhExrvoo7pWHl+c", "viewLogicSeatConvertMgr");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var viewLogicSeatConvertMgr = function() {
      function viewLogicSeatConvertMgr() {
        this.myseatid = null;
        this.viewSeatCount = 4;
        this.viewlogicMap = {};
        this.logicViewMap = {};
      }
      viewLogicSeatConvertMgr.prototype.clear = function() {
        delete viewLogicSeatConvertMgr._instance;
        viewLogicSeatConvertMgr._instance = null;
      };
      viewLogicSeatConvertMgr.prototype.updateSeatCount = function(viewSeatCount) {
        this.viewSeatCount = viewSeatCount;
      };
      viewLogicSeatConvertMgr.prototype.setMySeatId = function(seatId, seatcount) {
        this.myseatid = seatId;
        var viewseatarr = [];
        if (seatcount <= this.viewSeatCount / 4) for (var index = 0; index < this.viewSeatCount; ++index) index % 4 == 0 && viewseatarr.push(index); else if (seatcount <= this.viewSeatCount / 2) for (var index = 0; index < this.viewSeatCount; ++index) index % 2 == 0 && viewseatarr.push(index); else for (var index = 0; index < this.viewSeatCount; ++index) viewseatarr.push(index);
        for (var viewSeatId = 0; viewSeatId < this.viewSeatCount; ++viewSeatId) {
          var offset = null;
          for (var i = 0; i < viewseatarr.length; ++i) viewseatarr[i] == viewSeatId && (offset = i);
          if (null == offset) continue;
          var logicSeatId = (offset + this.myseatid) % viewseatarr.length;
          if (logicSeatId >= seatcount) continue;
          this.viewlogicMap[logicSeatId] = viewSeatId;
          this.logicViewMap[viewSeatId] = logicSeatId;
        }
      };
      viewLogicSeatConvertMgr.prototype.getViewSeatCount = function() {
        return this.viewSeatCount;
      };
      viewLogicSeatConvertMgr.prototype.getViewSeatId = function(logicSeatId) {
        console.log("获取视图座位=", this.viewlogicMap, logicSeatId);
        return this.viewlogicMap[logicSeatId];
      };
      viewLogicSeatConvertMgr.prototype.getLogicSeatId = function(viewSeatId) {
        return this.logicViewMap[viewSeatId];
      };
      viewLogicSeatConvertMgr.getInstance = function() {
        this._instance || (this._instance = new viewLogicSeatConvertMgr());
        return this._instance;
      };
      return viewLogicSeatConvertMgr;
    }();
    exports.default = viewLogicSeatConvertMgr;
    cc._RF.pop();
  }, {} ],
  zipEntries: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d7d54XJbz9BTatZ+djYtBXX", "zipEntries");
    "use strict";
    var StringReader = require("./stringReader");
    var NodeBufferReader = require("./nodeBufferReader");
    var Uint8ArrayReader = require("./uint8ArrayReader");
    var utils = require("./utils");
    var sig = require("./signature");
    var ZipEntry = require("./zipEntry");
    var support = require("./support");
    var jszipProto = require("./object");
    function ZipEntries(data, loadOptions) {
      this.files = [];
      this.loadOptions = loadOptions;
      data && this.load(data);
    }
    ZipEntries.prototype = {
      checkSignature: function checkSignature(expectedSignature) {
        var signature = this.reader.readString(4);
        if (signature !== expectedSignature) throw new Error("Corrupted zip or bug : unexpected signature (" + utils.pretty(signature) + ", expected " + utils.pretty(expectedSignature) + ")");
      },
      readBlockEndOfCentral: function readBlockEndOfCentral() {
        this.diskNumber = this.reader.readInt(2);
        this.diskWithCentralDirStart = this.reader.readInt(2);
        this.centralDirRecordsOnThisDisk = this.reader.readInt(2);
        this.centralDirRecords = this.reader.readInt(2);
        this.centralDirSize = this.reader.readInt(4);
        this.centralDirOffset = this.reader.readInt(4);
        this.zipCommentLength = this.reader.readInt(2);
        this.zipComment = this.reader.readString(this.zipCommentLength);
        this.zipComment = jszipProto.utf8decode(this.zipComment);
      },
      readBlockZip64EndOfCentral: function readBlockZip64EndOfCentral() {
        this.zip64EndOfCentralSize = this.reader.readInt(8);
        this.versionMadeBy = this.reader.readString(2);
        this.versionNeeded = this.reader.readInt(2);
        this.diskNumber = this.reader.readInt(4);
        this.diskWithCentralDirStart = this.reader.readInt(4);
        this.centralDirRecordsOnThisDisk = this.reader.readInt(8);
        this.centralDirRecords = this.reader.readInt(8);
        this.centralDirSize = this.reader.readInt(8);
        this.centralDirOffset = this.reader.readInt(8);
        this.zip64ExtensibleData = {};
        var extraDataSize = this.zip64EndOfCentralSize - 44, index = 0, extraFieldId, extraFieldLength, extraFieldValue;
        while (index < extraDataSize) {
          extraFieldId = this.reader.readInt(2);
          extraFieldLength = this.reader.readInt(4);
          extraFieldValue = this.reader.readString(extraFieldLength);
          this.zip64ExtensibleData[extraFieldId] = {
            id: extraFieldId,
            length: extraFieldLength,
            value: extraFieldValue
          };
        }
      },
      readBlockZip64EndOfCentralLocator: function readBlockZip64EndOfCentralLocator() {
        this.diskWithZip64CentralDirStart = this.reader.readInt(4);
        this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8);
        this.disksCount = this.reader.readInt(4);
        if (this.disksCount > 1) throw new Error("Multi-volumes zip are not supported");
      },
      readLocalFiles: function readLocalFiles() {
        var i, file;
        for (i = 0; i < this.files.length; i++) {
          file = this.files[i];
          this.reader.setIndex(file.localHeaderOffset);
          this.checkSignature(sig.LOCAL_FILE_HEADER);
          file.readLocalPart(this.reader);
          file.handleUTF8();
          file.processAttributes();
        }
      },
      readCentralDir: function readCentralDir() {
        var file;
        this.reader.setIndex(this.centralDirOffset);
        while (this.reader.readString(4) === sig.CENTRAL_FILE_HEADER) {
          file = new ZipEntry({
            zip64: this.zip64
          }, this.loadOptions);
          file.readCentralPart(this.reader);
          this.files.push(file);
        }
      },
      readEndOfCentral: function readEndOfCentral() {
        var offset = this.reader.lastIndexOfSignature(sig.CENTRAL_DIRECTORY_END);
        if (-1 === offset) {
          var isGarbage = true;
          try {
            this.reader.setIndex(0);
            this.checkSignature(sig.LOCAL_FILE_HEADER);
            isGarbage = false;
          } catch (e) {}
          throw isGarbage ? new Error("Can't find end of central directory : is this a zip file ? If it is, see http://stuk.github.io/jszip/documentation/howto/read_zip.html") : new Error("Corrupted zip : can't find end of central directory");
        }
        this.reader.setIndex(offset);
        this.checkSignature(sig.CENTRAL_DIRECTORY_END);
        this.readBlockEndOfCentral();
        if (this.diskNumber === utils.MAX_VALUE_16BITS || this.diskWithCentralDirStart === utils.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === utils.MAX_VALUE_16BITS || this.centralDirRecords === utils.MAX_VALUE_16BITS || this.centralDirSize === utils.MAX_VALUE_32BITS || this.centralDirOffset === utils.MAX_VALUE_32BITS) {
          this.zip64 = true;
          offset = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
          if (-1 === offset) throw new Error("Corrupted zip : can't find the ZIP64 end of central directory locator");
          this.reader.setIndex(offset);
          this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
          this.readBlockZip64EndOfCentralLocator();
          this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir);
          this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);
          this.readBlockZip64EndOfCentral();
        }
      },
      prepareReader: function prepareReader(data) {
        var type = utils.getTypeOf(data);
        "string" !== type || support.uint8array ? this.reader = "nodebuffer" === type ? new NodeBufferReader(data) : new Uint8ArrayReader(utils.transformTo("uint8array", data)) : this.reader = new StringReader(data, this.loadOptions.optimizedBinaryString);
      },
      load: function load(data) {
        this.prepareReader(data);
        this.readEndOfCentral();
        this.readCentralDir();
        this.readLocalFiles();
      }
    };
    module.exports = ZipEntries;
    cc._RF.pop();
  }, {
    "./nodeBufferReader": "nodeBufferReader",
    "./object": "object",
    "./signature": "signature",
    "./stringReader": "stringReader",
    "./support": "support",
    "./uint8ArrayReader": "uint8ArrayReader",
    "./utils": "utils",
    "./zipEntry": "zipEntry"
  } ],
  zipEntry: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "469delLPOpFD6M9dYX5h6bp", "zipEntry");
    "use strict";
    var StringReader = require("./stringReader");
    var utils = require("./utils");
    var CompressedObject = require("./compressedObject");
    var jszipProto = require("./object");
    var MADE_BY_DOS = 0;
    var MADE_BY_UNIX = 3;
    function ZipEntry(options, loadOptions) {
      this.options = options;
      this.loadOptions = loadOptions;
    }
    ZipEntry.prototype = {
      isEncrypted: function isEncrypted() {
        return 1 === (1 & this.bitFlag);
      },
      useUTF8: function useUTF8() {
        return 2048 === (2048 & this.bitFlag);
      },
      prepareCompressedContent: function prepareCompressedContent(reader, from, length) {
        return function() {
          var previousIndex = reader.index;
          reader.setIndex(from);
          var compressedFileData = reader.readData(length);
          reader.setIndex(previousIndex);
          return compressedFileData;
        };
      },
      prepareContent: function prepareContent(reader, from, length, compression, uncompressedSize) {
        return function() {
          var compressedFileData = utils.transformTo(compression.uncompressInputType, this.getCompressedContent());
          var uncompressedFileData = compression.uncompress(compressedFileData);
          if (uncompressedFileData.length !== uncompressedSize) throw new Error("Bug : uncompressed data size mismatch");
          return uncompressedFileData;
        };
      },
      readLocalPart: function readLocalPart(reader) {
        var compression, localExtraFieldsLength;
        reader.skip(22);
        this.fileNameLength = reader.readInt(2);
        localExtraFieldsLength = reader.readInt(2);
        this.fileName = reader.readString(this.fileNameLength);
        reader.skip(localExtraFieldsLength);
        if (-1 == this.compressedSize || -1 == this.uncompressedSize) throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory (compressedSize == -1 || uncompressedSize == -1)");
        compression = utils.findCompression(this.compressionMethod);
        if (null === compression) throw new Error("Corrupted zip : compression " + utils.pretty(this.compressionMethod) + " unknown (inner file : " + this.fileName + ")");
        this.decompressed = new CompressedObject();
        this.decompressed.compressedSize = this.compressedSize;
        this.decompressed.uncompressedSize = this.uncompressedSize;
        this.decompressed.crc32 = this.crc32;
        this.decompressed.compressionMethod = this.compressionMethod;
        this.decompressed.getCompressedContent = this.prepareCompressedContent(reader, reader.index, this.compressedSize, compression);
        this.decompressed.getContent = this.prepareContent(reader, reader.index, this.compressedSize, compression, this.uncompressedSize);
        if (this.loadOptions.checkCRC32) {
          this.decompressed = utils.transformTo("string", this.decompressed.getContent());
          if (jszipProto.crc32(this.decompressed) !== this.crc32) throw new Error("Corrupted zip : CRC32 mismatch");
        }
      },
      readCentralPart: function readCentralPart(reader) {
        this.versionMadeBy = reader.readInt(2);
        this.versionNeeded = reader.readInt(2);
        this.bitFlag = reader.readInt(2);
        this.compressionMethod = reader.readString(2);
        this.date = reader.readDate();
        this.crc32 = reader.readInt(4);
        this.compressedSize = reader.readInt(4);
        this.uncompressedSize = reader.readInt(4);
        this.fileNameLength = reader.readInt(2);
        this.extraFieldsLength = reader.readInt(2);
        this.fileCommentLength = reader.readInt(2);
        this.diskNumberStart = reader.readInt(2);
        this.internalFileAttributes = reader.readInt(2);
        this.externalFileAttributes = reader.readInt(4);
        this.localHeaderOffset = reader.readInt(4);
        if (this.isEncrypted()) throw new Error("Encrypted zip are not supported");
        this.fileName = reader.readString(this.fileNameLength);
        this.readExtraFields(reader);
        this.parseZIP64ExtraField(reader);
        this.fileComment = reader.readString(this.fileCommentLength);
      },
      processAttributes: function processAttributes() {
        this.unixPermissions = null;
        this.dosPermissions = null;
        var madeBy = this.versionMadeBy >> 8;
        this.dir = !!(16 & this.externalFileAttributes);
        madeBy === MADE_BY_DOS && (this.dosPermissions = 63 & this.externalFileAttributes);
        madeBy === MADE_BY_UNIX && (this.unixPermissions = this.externalFileAttributes >> 16 & 65535);
        this.dir || "/" !== this.fileName.slice(-1) || (this.dir = true);
      },
      parseZIP64ExtraField: function parseZIP64ExtraField(reader) {
        if (!this.extraFields[1]) return;
        var extraReader = new StringReader(this.extraFields[1].value);
        this.uncompressedSize === utils.MAX_VALUE_32BITS && (this.uncompressedSize = extraReader.readInt(8));
        this.compressedSize === utils.MAX_VALUE_32BITS && (this.compressedSize = extraReader.readInt(8));
        this.localHeaderOffset === utils.MAX_VALUE_32BITS && (this.localHeaderOffset = extraReader.readInt(8));
        this.diskNumberStart === utils.MAX_VALUE_32BITS && (this.diskNumberStart = extraReader.readInt(4));
      },
      readExtraFields: function readExtraFields(reader) {
        var start = reader.index, extraFieldId, extraFieldLength, extraFieldValue;
        this.extraFields = this.extraFields || {};
        while (reader.index < start + this.extraFieldsLength) {
          extraFieldId = reader.readInt(2);
          extraFieldLength = reader.readInt(2);
          extraFieldValue = reader.readString(extraFieldLength);
          this.extraFields[extraFieldId] = {
            id: extraFieldId,
            length: extraFieldLength,
            value: extraFieldValue
          };
        }
      },
      handleUTF8: function handleUTF8() {
        if (this.useUTF8()) {
          this.fileName = jszipProto.utf8decode(this.fileName);
          this.fileComment = jszipProto.utf8decode(this.fileComment);
        } else {
          var upath = this.findExtraFieldUnicodePath();
          null !== upath && (this.fileName = upath);
          var ucomment = this.findExtraFieldUnicodeComment();
          null !== ucomment && (this.fileComment = ucomment);
        }
      },
      findExtraFieldUnicodePath: function findExtraFieldUnicodePath() {
        var upathField = this.extraFields[28789];
        if (upathField) {
          var extraReader = new StringReader(upathField.value);
          if (1 !== extraReader.readInt(1)) return null;
          if (jszipProto.crc32(this.fileName) !== extraReader.readInt(4)) return null;
          return jszipProto.utf8decode(extraReader.readString(upathField.length - 5));
        }
        return null;
      },
      findExtraFieldUnicodeComment: function findExtraFieldUnicodeComment() {
        var ucommentField = this.extraFields[25461];
        if (ucommentField) {
          var extraReader = new StringReader(ucommentField.value);
          if (1 !== extraReader.readInt(1)) return null;
          if (jszipProto.crc32(this.fileComment) !== extraReader.readInt(4)) return null;
          return jszipProto.utf8decode(extraReader.readString(ucommentField.length - 5));
        }
        return null;
      }
    };
    module.exports = ZipEntry;
    cc._RF.pop();
  }, {
    "./compressedObject": "compressedObject",
    "./object": "object",
    "./stringReader": "stringReader",
    "./utils": "utils"
  } ]
}, {}, [ "AppInfoMgr", "LoaderMgr", "ServerMgr", "VersionMgr", "LaunchCtrl", "BullCardsMgr", "BullPosMgr", "BullRoomAroundCtrl", "BullThinkingAniCtrl", "Bull_Seat", "Bull_calculateCtrl", "Bull_cardResultTypeCtrl", "Bull_chatMsgCtrl", "Bull_cuopaiCtrl", "Bull_readyCtrl", "Bull_resultGoldCtrl", "Bull_voiceCtrl", "Prefab_Tbnn_roomInfoCtrl", "Prefab_bull_roomInfoCtrl", "bull_preventionCheating", "bull_settle_playerDetailCtrl", "bull_settle_rowContentCtrl", "Common_voiceBtnCtrl", "GroupMaJiang3DCtrl", "HandMaJiang3DCtrl", "HuaCtrl", "MahjongAudio", "MahjongCards", "MahjongClock3DCtrl", "MahjongDef", "MahjongDiceCtrl", "MahjongEventCtrl", "MahjongFaPaiGmCtrl", "MahjongGeneral", "MahjongJinCtrl", "MahjongJinMgrCtrl", "MahjongLogic", "MahjongMyStateTipCtrl", "MahjongOpAniCtrl", "MahjongOtherStateTipCtrl", "MahjongPlayer", "MahjongResMgr", "MahjongRoomCtrl", "MahjongRoomRuleCtrl", "MahjongSeatCtrl", "MahjongSwitchCardWithPlayerGmCtrl", "MahjongSwitchCardWithWallGmCtrl", "MyHandMahjongCtrl", "PoolMaJiang3DCtrl", "VideoPlay", "FzmjFinalSettleCtrl", "FzmjRoundsSettleCtrl", "FzmjStatisticsSettleCtrl", "LymjFinalSettleCtrl", "LymjRoundsSettleCtrl", "LymjStatisticsSettleCtrl", "QzmjFinalSettleCtrl", "QzmjRoundsSettleCtrl", "QzmjStatisticsSettleCtrl", "SssFinalSettleCtrl", "SssRoundsSettleCtrl", "SssSettleRoundItemCtrl", "SssStatisticsSettleCtrl", "sssSettleDetailItemCtrl", "FzmjEntry", "FzmjCards", "FzmjLogic", "FzmjPlayer", "FzmjProp", "FzmjGambleRecordCtrl", "FzmjHaidilaoyueCtrl", "FzmjRoomCtrl", "FzmjSettleCtrl", "LymjEntry", "LymjCards", "LymjLogic", "LymjPlayer", "LymjProp", "LymjGambleRecordCtrl", "LymjRoomCtrl", "LymjSettleCtrl", "MpnnAudio", "MpnnAudioMgr", "MpnnConst", "MpnnLogic", "MpnnPlayer", "MpnnProp", "MpnnModulesInstallCtrl", "MpnnRoomCtrl", "Mpnn_Bets_btnCtrl", "Mpnn_MyCardsCtrl", "Mpnn_OthersCardsCtrl", "Mpnn_RecordCtrl", "Mpnn_TopUiCtrl", "Mpnn_chipValueCtrl", "Mpnn_cuopaiCtrl", "Mpnn_goldPoolCtrl", "Mpnn_maimaCtrl", "Mpnn_qiangzhuangCtrl", "Mpnn_roomrule", "Mpnn_seatCtrl", "Mpnn_settle_openDetailCtrl", "Mpnn_tipClock", "Mpnn_totalSettleCtrl", "Prefab_bull_chooseChipCtrl", "Prefab_bull_chooseGrabCtrl", "Prefab_maimatankuangCtrl", "MpnnEntry", "QgmjEntry", "QgmjCards", "QgmjLogic", "QgmjPlayer", "QgmjProp", "QgmjGambleRecordCtrl", "QgmjRoomCtrl", "QgmjSettleCtrl", "QzmjEntry", "QzmjCards", "QzmjLogic", "QzmjPlayer", "QzmjProp", "QzmjGambleRecordCtrl", "QzmjRoomCtrl", "QzmjSettleCtrl", "QznnEntry", "QznnConst", "QznnLogic", "QznnPlayer", "QznnProp", "QznnModulesInstallCtrl", "QznnRoomCtrl", "Qznn_MyCardsCtrl", "Qznn_OthersCardsCtrl", "Qznn_TopUiCtrl", "Qznn_chipValueCtrl", "Qznn_goldPoolCtrl", "Qznn_tipClock", "SssEntry", "SssAudio", "SssCards", "SssDef", "SssLib", "SssLogic", "SssResMgr", "Prefab_SssSetCardsCtrl", "SssHandCardCtrl", "SssRecordCtrl", "SssRoomCtrl", "SssSeatCtrl", "SssXipaiCtrl", "Sss_bubbleCtrl", "NiuNiuFP", "TbnnAudio", "TbnnAudioMgr", "TbnnConst", "TbnnLogic", "TbnnPlayer", "TbnnProp", "TbnnModulesInstallCtrl", "TbnnRecordCtrl", "TbnnRoomCtrl", "Tbnn_MyCardsCtrl", "Tbnn_OthersCardsCtrl", "Tbnn_TopUiCtrl", "Tbnn_chipValueCtrl", "Tbnn_goldPoolCtrl", "Tbnn_seatCtrl", "Tbnn_settle_openDetailCtrl", "Tbnn_tipClock", "Tbnn_totalSettleCtrl", "Bull_cardsTest", "TbnnEntry", "AudioCfg", "CreateRoomOptionCfg", "GameAudioCfg", "GameCateCfg", "GameHelpCfg", "GameResCfg", "GoodsCfg", "JbcCfg", "NameCfg", "ProductSettingCfg", "QuickAudioCfg", "RichIconCfg", "RoomCostCfg", "RoomOptionCfg", "RoomRuleCfg", "SwitchSettingCfg", "UserDefaultCfg", "AudioMgr", "BagMgr", "BehaviorMgr", "BetMgr", "BunchInfoMgr", "CharMgr", "ChatFillterMgr", "ClubChatMgr", "ClubGameMgr", "ClubMemberMgr", "ClubMgr", "CreateRoomMgr", "FirstChargeTaskMgr", "FrameMgr", "GEventDef", "GameFreeMgr", "GameRecordMgr", "LogMgr", "LoginMgr", "LuckDrawMgr", "MailMgr", "MarqueMgr", "MatchGameMgr", "ModuleMgr", "NetErrMgr", "NotifyMgr", "PlatMgr", "android", "ios", "platform", "PointMgr", "QuitMgr", "RechargeMgr", "RecordMgr", "RichTextMgr", "RoomMgr", "SeatMgr", "SettingMgr", "ShareMgr", "SubGameDownLoader", "SubGameMgr", "SwitchMgr", "TaskMgr", "UiMgr", "UserMgr", "VerifyMgr", "bindAgentMgr", "redPushMgr", "viewLogicSeatConvertMgr", "BaseCfg", "BaseCtrl", "BaseMgr", "BaseModel", "BaseView", "Gfun", "Global_defines", "LocalStorage", "MyMd5", "MyUdid", "WM_Emitter", "Prefab_AnnouncementPanelCtrl", "Prefab_ChatTextItemCtrl", "Club_ApplicationList", "Club_AskListItemCtrl", "Club_BlackListItemCtrl", "Club_ChangeIconCtrl", "Club_ChangeNameCtrl", "Club_ChatRoomEnterCtrl", "Club_CreateCtrl", "Club_LobbyChatCtrl", "Club_LobbyCtrl", "Club_LobbyDownCtrl", "Club_LobbyNoticeCtrl", "Club_LobbyRoomCtrl", "Club_LobbyTopCtrl", "Club_MemberListCtrl", "Club_MemberStripCtrl", "Club_RechargeCtrl", "Club_RecordListCtrl", "Club_RecordStripCtrl", "Club_RoomStripCtrl", "Club_SeekListCtrl", "Club_SeekStripCtrl", "Prefab_CreateCommonRuleCtrl", "Prefab_CreateFzmj", "Prefab_CreateQgmj", "Prefab_CreateQzmj", "Prefab_CreateRoomPanelCtrl", "Prefab_DefaultRuleCtrl", "Prefab_DefaultRuleItemCtrl", "Prefab_LymjCreateCtrl", "Prefab_MoreGameCtrl", "Prefab_MpnnCreatCtrl", "Prefab_NNRoomInfoCtrlCtrl", "Prefab_RenameCommonRuleCtrl", "Prefab_RoomRuleCtrl", "Prefab_SSSCreateCtrl", "RoomRuleMoreSuggestionCtrl", "DownLoadSubGameCtrl", "Prefab_ContentCtrl", "Prefab_RecordListCtrl", "Prefab_RecordStripCtrl", "Prefab_VideoEnterCtrl", "Prefab_ZixunCtrl", "RoomApplyDissolutionCtrl", "RoomAudioSettingCtrl", "RoomChatNodeCtrl", "RoomControlSettingCtrl", "RoomDepositCtrl", "RoomOptionCtrl", "RoomOptionItemCtrl", "RoomPreventionCheatingCtrl", "RoomRuleCtrl", "RoomSettingCtrl", "RoomSetting_bullControlCtrl", "RoomSetting_mjCtrl", "RoomSetting_sssControlCtrl", "RoomUserInfoCtrl", "GameVideoCtrl", "LoadingGameCtrl", "LoadingPlatCtrl", "MsgBoxLoadingAni", "LoginCtrl", "Prefab_Web_xieyiCtrl", "Prefab_MailCtrl", "Prefab_MailDetailCtrl", "Match_CompetitionPanelCtrl", "Match_PrixItemCtrl", "Match_chatCtrl", "Match_dajiang_PanelCtrl", "Match_dajiang_scrollCtrl", "Match_enlistCtrl", "Match_hongbao_scrollCtrl", "Match_inviteCodeCtrl", "Match_rowContentCtrl", "MatchVideoCtrl", "MoreCtrl", "HarvestCtrl", "HintsCtrl", "MsgBoxCtrl", "Button_middle", "Down_infoumation", "PlazaCtrl", "Prefab_AccountBindCtrl", "Prefab_AgencyBindCtrl", "Prefab_ControlSettingCtrl", "Prefab_JoinRoomCtrl", "Prefab_LuckDrawCtrl", "Prefab_PlazaLeftCtrl", "Prefab_TranningCtrl", "Prefab_bindAgent", "Prefab_bindconfirm", "Prefab_bingPhoneCtrl", "Prefab_changeNameCtrl", "Prefab_luckDrawTipCtrl", "Prefab_marqueeCtrl", "Prefab_notifySettingCtrl", "Prefab_playerDetailCtrl", "Prefab_plazaSettingCtrl", "Prefab_reliefMoneyCtrl", "Prefab_shareTipCtrl", "Prefab_sharedCtrl", "Prefab_shimingRenZhengCtrl", "Rank_list", "Up_information", "Prefab_rankCtrl", "Prefab_rankItemCtrl", "Prefab_rankRoleCtrl", "Prefab_RuleCtrl", "Prefab_bagCtrl", "Prefab_bagItemCtrl", "Prefab_rechargeRecordCtrl", "Prefab_shopCtrl", "Prefab_shopDetailCtrl", "Prefab_shopItemCtrl", "Prefab_SignInCtrl", "Prefab_DayTaskPanelCtrl", "Prefab_FirstChargeTaskCtrl", "Prefab_InviteTaskCtrl", "Prefab_TaskItemCtrl", "Prefab_TaskPanelCtrl", "Prefab_WeChatTaskCtrl", "Prefab_goinviteCtrl", "Prefab_UserLogin", "Prefab_UserRegister", "customserviceCtrl", "TipsCtrl", "GameNet", "NetCode", "NetMgr", "NetNotify", "SocketNet", "QzmjOption", "GpsSdk", "WxSdk", "YySdk", "base64", "compressedObject", "compressions", "crc32", "dataReader", "defaults", "deprecatedPublicUtils", "flate", "index", "license_header", "load", "nodeBuffer", "nodeBufferReader", "object", "signature", "stringReader", "stringWriter", "support", "uint8ArrayReader", "uint8ArrayWriter", "utf8", "utils", "zipEntries", "zipEntry", "pomelo-client", "protobuf", "protocol" ]);